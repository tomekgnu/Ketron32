
Ketron32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000728c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  0000728c  00007320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000343  0080017c  0080017c  0000743c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000743c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000746c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008f8  00000000  00000000  000074a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cca5  00000000  00000000  00007da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000279e  00000000  00000000  00014a45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006651  00000000  00000000  000171e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002278  00000000  00000000  0001d834  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b55  00000000  00000000  0001faac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ca3a  00000000  00000000  00021601  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000980  00000000  00000000  0002e03b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__ctors_end>
       4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
       8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
       c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      10:	0c 94 7b 34 	jmp	0x68f6	; 0x68f6 <__vector_4>
      14:	0c 94 87 33 	jmp	0x670e	; 0x670e <__vector_5>
      18:	0c 94 4e 34 	jmp	0x689c	; 0x689c <__vector_6>
      1c:	0c 94 f4 33 	jmp	0x67e8	; 0x67e8 <__vector_7>
      20:	0c 94 21 34 	jmp	0x6842	; 0x6842 <__vector_8>
      24:	0c 94 5a 33 	jmp	0x66b4	; 0x66b4 <__vector_9>
      28:	0c 94 c7 33 	jmp	0x678e	; 0x678e <__vector_10>
      2c:	0c 94 07 33 	jmp	0x660e	; 0x660e <__vector_11>
      30:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      34:	0c 94 8a 35 	jmp	0x6b14	; 0x6b14 <__vector_13>
      38:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      3c:	0c 94 4f 35 	jmp	0x6a9e	; 0x6a9e <__vector_15>
      40:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__vector_16>
      44:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      48:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      4c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      50:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      54:	a3 1d       	adc	r26, r3
      56:	55 1f       	adc	r21, r21
      58:	b4 1d       	adc	r27, r4
      5a:	c5 1d       	adc	r28, r5
      5c:	21 1e       	adc	r2, r17
      5e:	54 1e       	adc	r5, r20
      60:	6b 1e       	adc	r6, r27
      62:	a8 1e       	adc	r10, r24
      64:	bf 1e       	adc	r11, r31
      66:	9b 1d       	adc	r25, r11
      68:	10 26       	eor	r1, r16
      6a:	35 25       	eor	r19, r5
      6c:	2e 25       	eor	r18, r14
      6e:	27 25       	eor	r18, r7
      70:	20 25       	eor	r18, r0
      72:	19 25       	eor	r17, r9
      74:	12 25       	eor	r17, r2
      76:	0b 25       	eor	r16, r11
      78:	f6 26       	eor	r15, r22
      7a:	f6 26       	eor	r15, r22
      7c:	f6 26       	eor	r15, r22
      7e:	f6 26       	eor	r15, r22
      80:	f6 26       	eor	r15, r22
      82:	f6 26       	eor	r15, r22
      84:	f6 26       	eor	r15, r22
      86:	f6 26       	eor	r15, r22
      88:	f6 26       	eor	r15, r22
      8a:	f6 26       	eor	r15, r22
      8c:	f6 26       	eor	r15, r22
      8e:	f6 26       	eor	r15, r22
      90:	f6 26       	eor	r15, r22
      92:	f6 26       	eor	r15, r22
      94:	f6 26       	eor	r15, r22
      96:	f6 26       	eor	r15, r22
      98:	f6 26       	eor	r15, r22
      9a:	f6 26       	eor	r15, r22
      9c:	f6 26       	eor	r15, r22
      9e:	f6 26       	eor	r15, r22
      a0:	f6 26       	eor	r15, r22
      a2:	f6 26       	eor	r15, r22
      a4:	f6 26       	eor	r15, r22
      a6:	f6 26       	eor	r15, r22
      a8:	17 26       	eor	r1, r23
      aa:	1d 26       	eor	r1, r29
      ac:	f6 26       	eor	r15, r22
      ae:	f6 26       	eor	r15, r22
      b0:	f6 26       	eor	r15, r22
      b2:	f6 26       	eor	r15, r22
      b4:	f6 26       	eor	r15, r22
      b6:	f6 26       	eor	r15, r22
      b8:	f6 26       	eor	r15, r22
      ba:	f6 26       	eor	r15, r22
      bc:	f6 26       	eor	r15, r22
      be:	f6 26       	eor	r15, r22
      c0:	f6 26       	eor	r15, r22
      c2:	f6 26       	eor	r15, r22
      c4:	f6 26       	eor	r15, r22
      c6:	3c 25       	eor	r19, r12
      c8:	f6 26       	eor	r15, r22
      ca:	f6 26       	eor	r15, r22
      cc:	f6 26       	eor	r15, r22
      ce:	f6 26       	eor	r15, r22
      d0:	f6 26       	eor	r15, r22
      d2:	f6 26       	eor	r15, r22
      d4:	f6 26       	eor	r15, r22
      d6:	f6 26       	eor	r15, r22
      d8:	f6 26       	eor	r15, r22
      da:	f6 26       	eor	r15, r22
      dc:	f6 26       	eor	r15, r22
      de:	f6 26       	eor	r15, r22
      e0:	f6 26       	eor	r15, r22
      e2:	f6 26       	eor	r15, r22
      e4:	f6 26       	eor	r15, r22
      e6:	f6 26       	eor	r15, r22
      e8:	f6 26       	eor	r15, r22
      ea:	f6 26       	eor	r15, r22
      ec:	f6 26       	eor	r15, r22
      ee:	f6 26       	eor	r15, r22
      f0:	f6 26       	eor	r15, r22
      f2:	f6 26       	eor	r15, r22
      f4:	f6 26       	eor	r15, r22
      f6:	f6 26       	eor	r15, r22
      f8:	f6 26       	eor	r15, r22
      fa:	f6 26       	eor	r15, r22
      fc:	f6 26       	eor	r15, r22
      fe:	f6 26       	eor	r15, r22
     100:	f6 26       	eor	r15, r22
     102:	f6 26       	eor	r15, r22
     104:	f6 26       	eor	r15, r22
     106:	f6 26       	eor	r15, r22
     108:	f6 26       	eor	r15, r22
     10a:	41 25       	eor	r20, r1
     10c:	f6 26       	eor	r15, r22
     10e:	f6 26       	eor	r15, r22
     110:	04 25       	eor	r16, r4
     112:	f6 26       	eor	r15, r22
     114:	f6 26       	eor	r15, r22
     116:	f6 26       	eor	r15, r22
     118:	53 25       	eor	r21, r3
     11a:	90 25       	eor	r25, r0
     11c:	f6 26       	eor	r15, r22
     11e:	f6 26       	eor	r15, r22
     120:	f6 26       	eor	r15, r22
     122:	f6 26       	eor	r15, r22
     124:	f6 26       	eor	r15, r22
     126:	f6 26       	eor	r15, r22
     128:	f6 26       	eor	r15, r22
     12a:	f6 26       	eor	r15, r22
     12c:	f6 26       	eor	r15, r22
     12e:	f6 26       	eor	r15, r22
     130:	f6 26       	eor	r15, r22
     132:	f6 26       	eor	r15, r22
     134:	f6 26       	eor	r15, r22
     136:	f6 26       	eor	r15, r22
     138:	f6 26       	eor	r15, r22
     13a:	f6 26       	eor	r15, r22
     13c:	f6 26       	eor	r15, r22
     13e:	f6 26       	eor	r15, r22
     140:	f6 26       	eor	r15, r22
     142:	f6 26       	eor	r15, r22
     144:	f6 26       	eor	r15, r22
     146:	f6 26       	eor	r15, r22
     148:	f6 26       	eor	r15, r22
     14a:	f6 26       	eor	r15, r22
     14c:	f6 26       	eor	r15, r22
     14e:	f6 26       	eor	r15, r22
     150:	f6 26       	eor	r15, r22
     152:	f6 26       	eor	r15, r22
     154:	f6 26       	eor	r15, r22
     156:	f6 26       	eor	r15, r22
     158:	f6 26       	eor	r15, r22
     15a:	f6 26       	eor	r15, r22
     15c:	f6 26       	eor	r15, r22
     15e:	f6 26       	eor	r15, r22
     160:	f6 26       	eor	r15, r22
     162:	f6 26       	eor	r15, r22
     164:	f6 26       	eor	r15, r22
     166:	fd 24       	eor	r15, r13
     168:	e3 28       	or	r14, r3
     16a:	e5 28       	or	r14, r5
     16c:	e5 28       	or	r14, r5
     16e:	e5 28       	or	r14, r5
     170:	e5 28       	or	r14, r5
     172:	e5 28       	or	r14, r5
     174:	e5 28       	or	r14, r5
     176:	e5 28       	or	r14, r5
     178:	e5 28       	or	r14, r5
     17a:	e5 28       	or	r14, r5
     17c:	e5 28       	or	r14, r5
     17e:	e5 28       	or	r14, r5
     180:	e5 28       	or	r14, r5
     182:	e5 28       	or	r14, r5
     184:	e5 28       	or	r14, r5
     186:	e5 28       	or	r14, r5
     188:	e3 28       	or	r14, r3
     18a:	e5 28       	or	r14, r5
     18c:	e5 28       	or	r14, r5
     18e:	e5 28       	or	r14, r5
     190:	e5 28       	or	r14, r5
     192:	e5 28       	or	r14, r5
     194:	e5 28       	or	r14, r5
     196:	e5 28       	or	r14, r5
     198:	e5 28       	or	r14, r5
     19a:	e5 28       	or	r14, r5
     19c:	e5 28       	or	r14, r5
     19e:	e5 28       	or	r14, r5
     1a0:	e5 28       	or	r14, r5
     1a2:	e5 28       	or	r14, r5
     1a4:	e5 28       	or	r14, r5
     1a6:	e5 28       	or	r14, r5
     1a8:	e3 28       	or	r14, r3
     1aa:	e5 28       	or	r14, r5
     1ac:	e5 28       	or	r14, r5
     1ae:	e5 28       	or	r14, r5
     1b0:	e5 28       	or	r14, r5
     1b2:	e5 28       	or	r14, r5
     1b4:	e5 28       	or	r14, r5
     1b6:	e5 28       	or	r14, r5
     1b8:	e5 28       	or	r14, r5
     1ba:	e5 28       	or	r14, r5
     1bc:	e5 28       	or	r14, r5
     1be:	e5 28       	or	r14, r5
     1c0:	e5 28       	or	r14, r5
     1c2:	e5 28       	or	r14, r5
     1c4:	e5 28       	or	r14, r5
     1c6:	e5 28       	or	r14, r5
     1c8:	e3 28       	or	r14, r3
     1ca:	e5 28       	or	r14, r5
     1cc:	e5 28       	or	r14, r5
     1ce:	e5 28       	or	r14, r5
     1d0:	e5 28       	or	r14, r5
     1d2:	e5 28       	or	r14, r5
     1d4:	e5 28       	or	r14, r5
     1d6:	e5 28       	or	r14, r5
     1d8:	e5 28       	or	r14, r5
     1da:	e5 28       	or	r14, r5
     1dc:	e5 28       	or	r14, r5
     1de:	e5 28       	or	r14, r5
     1e0:	e5 28       	or	r14, r5
     1e2:	e5 28       	or	r14, r5
     1e4:	e5 28       	or	r14, r5
     1e6:	e5 28       	or	r14, r5
     1e8:	e1 28       	or	r14, r1
     1ea:	e5 28       	or	r14, r5
     1ec:	e5 28       	or	r14, r5
     1ee:	e5 28       	or	r14, r5
     1f0:	e5 28       	or	r14, r5
     1f2:	e5 28       	or	r14, r5
     1f4:	e5 28       	or	r14, r5
     1f6:	e5 28       	or	r14, r5
     1f8:	e5 28       	or	r14, r5
     1fa:	e5 28       	or	r14, r5
     1fc:	e5 28       	or	r14, r5
     1fe:	e5 28       	or	r14, r5
     200:	e5 28       	or	r14, r5
     202:	e5 28       	or	r14, r5
     204:	e5 28       	or	r14, r5
     206:	e5 28       	or	r14, r5
     208:	e1 28       	or	r14, r1
     20a:	e5 28       	or	r14, r5
     20c:	e5 28       	or	r14, r5
     20e:	e5 28       	or	r14, r5
     210:	e5 28       	or	r14, r5
     212:	e5 28       	or	r14, r5
     214:	e5 28       	or	r14, r5
     216:	e5 28       	or	r14, r5
     218:	e5 28       	or	r14, r5
     21a:	e5 28       	or	r14, r5
     21c:	e5 28       	or	r14, r5
     21e:	e5 28       	or	r14, r5
     220:	e5 28       	or	r14, r5
     222:	e5 28       	or	r14, r5
     224:	e5 28       	or	r14, r5
     226:	e5 28       	or	r14, r5
     228:	e3 28       	or	r14, r3
     22a:	e5 28       	or	r14, r5
     22c:	e5 28       	or	r14, r5
     22e:	e5 28       	or	r14, r5
     230:	e5 28       	or	r14, r5
     232:	e5 28       	or	r14, r5
     234:	e5 28       	or	r14, r5
     236:	e5 28       	or	r14, r5
     238:	e5 28       	or	r14, r5
     23a:	e5 28       	or	r14, r5
     23c:	e5 28       	or	r14, r5
     23e:	e5 28       	or	r14, r5
     240:	e5 28       	or	r14, r5
     242:	e5 28       	or	r14, r5
     244:	e5 28       	or	r14, r5
     246:	e5 28       	or	r14, r5
     248:	e5 28       	or	r14, r5
     24a:	e1 28       	or	r14, r1
     24c:	e3 28       	or	r14, r3
     24e:	e1 28       	or	r14, r1
     250:	e5 28       	or	r14, r5
     252:	e5 28       	or	r14, r5
     254:	e7 28       	or	r14, r7
     256:	e5 28       	or	r14, r5
     258:	e7 28       	or	r14, r7
     25a:	e7 28       	or	r14, r7
     25c:	e7 28       	or	r14, r7
     25e:	e7 28       	or	r14, r7
     260:	e7 28       	or	r14, r7
     262:	e5 28       	or	r14, r5
     264:	e7 28       	or	r14, r7
     266:	e7 28       	or	r14, r7
     268:	2f 2c       	mov	r2, r15
     26a:	38 2c       	mov	r3, r8
     26c:	9f 2c       	mov	r9, r15
     26e:	a6 2c       	mov	r10, r6
     270:	8a 2d       	mov	r24, r10
     272:	8a 2d       	mov	r24, r10
     274:	8a 2d       	mov	r24, r10
     276:	8a 2d       	mov	r24, r10
     278:	8a 2d       	mov	r24, r10
     27a:	8a 2d       	mov	r24, r10
     27c:	35 2d       	mov	r19, r5
     27e:	3b 2d       	mov	r19, r11
     280:	4e 2d       	mov	r20, r14
     282:	61 2d       	mov	r22, r1
     284:	76 2d       	mov	r23, r6

00000286 <LcdCustomChar>:
     286:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     296:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     2a6:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     2b6:	03 07 0f 1f 0f 07 03 00 00 1f 1f 1f 1f 1f 1f 00     ................
     2c6:	1b 1b 1b 1b 1b 1b 1b 00 18 1c 1e 1f 1e 1c 18 00     ................
     2d6:	00 04 04 0e 0e 1f 1f 00 00 1f 1f 0e 0e 04 04 00     ................
	...
     2ee:	00 0e 19 15 13 0e 00 00 00 0e 15 15 15 0e 00 00     ................
     2fe:	00 0e 13 15 19 0e 00 00 00 0e 11 1f 11 0e 00 00     ................

0000030e <__ctors_end>:
     30e:	11 24       	eor	r1, r1
     310:	1f be       	out	0x3f, r1	; 63
     312:	cf e5       	ldi	r28, 0x5F	; 95
     314:	d8 e0       	ldi	r29, 0x08	; 8
     316:	de bf       	out	0x3e, r29	; 62
     318:	cd bf       	out	0x3d, r28	; 61

0000031a <__do_copy_data>:
     31a:	11 e0       	ldi	r17, 0x01	; 1
     31c:	a0 e6       	ldi	r26, 0x60	; 96
     31e:	b0 e0       	ldi	r27, 0x00	; 0
     320:	ec e8       	ldi	r30, 0x8C	; 140
     322:	f2 e7       	ldi	r31, 0x72	; 114
     324:	02 c0       	rjmp	.+4      	; 0x32a <__do_copy_data+0x10>
     326:	05 90       	lpm	r0, Z+
     328:	0d 92       	st	X+, r0
     32a:	ac 37       	cpi	r26, 0x7C	; 124
     32c:	b1 07       	cpc	r27, r17
     32e:	d9 f7       	brne	.-10     	; 0x326 <__do_copy_data+0xc>

00000330 <__do_clear_bss>:
     330:	24 e0       	ldi	r18, 0x04	; 4
     332:	ac e7       	ldi	r26, 0x7C	; 124
     334:	b1 e0       	ldi	r27, 0x01	; 1
     336:	01 c0       	rjmp	.+2      	; 0x33a <.do_clear_bss_start>

00000338 <.do_clear_bss_loop>:
     338:	1d 92       	st	X+, r1

0000033a <.do_clear_bss_start>:
     33a:	af 3b       	cpi	r26, 0xBF	; 191
     33c:	b2 07       	cpc	r27, r18
     33e:	e1 f7       	brne	.-8      	; 0x338 <.do_clear_bss_loop>
     340:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <main>
     344:	0c 94 44 39 	jmp	0x7288	; 0x7288 <_exit>

00000348 <__bad_interrupt>:
     348:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000034c <a2dSetPrescaler>:

// return TRUE if conversion is complete
u08 a2dIsComplete(void)
{
	return bit_is_set(ADCSR, ADSC);
}
     34c:	96 b1       	in	r25, 0x06	; 6
     34e:	98 7f       	andi	r25, 0xF8	; 248
     350:	89 2b       	or	r24, r25
     352:	86 b9       	out	0x06, r24	; 6
     354:	08 95       	ret

00000356 <a2dSetReference>:
     356:	27 b1       	in	r18, 0x07	; 7
     358:	2f 73       	andi	r18, 0x3F	; 63
     35a:	30 e4       	ldi	r19, 0x40	; 64
     35c:	83 9f       	mul	r24, r19
     35e:	c0 01       	movw	r24, r0
     360:	11 24       	eor	r1, r1
     362:	82 2b       	or	r24, r18
     364:	87 b9       	out	0x07, r24	; 7
     366:	08 95       	ret

00000368 <a2dInit>:
     368:	37 9a       	sbi	0x06, 7	; 6
     36a:	35 98       	cbi	0x06, 5	; 6
     36c:	86 e0       	ldi	r24, 0x06	; 6
     36e:	0e 94 a6 01 	call	0x34c	; 0x34c <a2dSetPrescaler>
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	0e 94 ab 01 	call	0x356	; 0x356 <a2dSetReference>
     378:	3d 98       	cbi	0x07, 5	; 7
     37a:	33 9a       	sbi	0x06, 3	; 6
     37c:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <a2dCompleteFlag>
     380:	78 94       	sei
     382:	08 95       	ret

00000384 <a2dSetChannel>:
     384:	97 b1       	in	r25, 0x07	; 7
     386:	90 7e       	andi	r25, 0xE0	; 224
     388:	8f 71       	andi	r24, 0x1F	; 31
     38a:	89 2b       	or	r24, r25
     38c:	87 b9       	out	0x07, r24	; 7
     38e:	08 95       	ret

00000390 <a2dStartConvert>:
     390:	34 9a       	sbi	0x06, 4	; 6
     392:	36 9a       	sbi	0x06, 6	; 6
     394:	08 95       	ret

00000396 <a2dConvert10bit>:

// Perform a 10-bit conversion
// starts conversion, waits until conversion is done, and returns result
unsigned short a2dConvert10bit(unsigned char ch)
{
	a2dCompleteFlag = FALSE;				// clear conversion complete flag
     396:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <a2dCompleteFlag>
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
     39a:	97 b1       	in	r25, 0x07	; 7
     39c:	90 7e       	andi	r25, 0xE0	; 224
     39e:	8f 71       	andi	r24, 0x1F	; 31
     3a0:	89 2b       	or	r24, r25
     3a2:	87 b9       	out	0x07, r24	; 7
	sbi(ADCSR, ADIF);						// clear hardware "conversion complete" flag 
     3a4:	34 9a       	sbi	0x06, 4	; 6
	sbi(ADCSR, ADSC);						// start conversion
     3a6:	36 9a       	sbi	0x06, 6	; 6
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSR, ADSC) );		// wait until conversion complete
     3a8:	36 99       	sbic	0x06, 6	; 6
     3aa:	fe cf       	rjmp	.-4      	; 0x3a8 <a2dConvert10bit+0x12>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	return (inb(ADCL) | (inb(ADCH)<<8));	// read ADC (full 10 bits);
     3ac:	84 b1       	in	r24, 0x04	; 4
     3ae:	25 b1       	in	r18, 0x05	; 5
     3b0:	90 e0       	ldi	r25, 0x00	; 0
}
     3b2:	92 2b       	or	r25, r18
     3b4:	08 95       	ret

000003b6 <a2dConvert8bit>:
// Perform a 8-bit conversion.
// starts conversion, waits until conversion is done, and returns result
unsigned char a2dConvert8bit(unsigned char ch)
{
	// do 10-bit conversion and return highest 8 bits
	return a2dConvert10bit(ch)>>2;			// return ADC MSB byte
     3b6:	0e 94 cb 01 	call	0x396	; 0x396 <a2dConvert10bit>
     3ba:	96 95       	lsr	r25
     3bc:	87 95       	ror	r24
     3be:	96 95       	lsr	r25
     3c0:	87 95       	ror	r24
}
     3c2:	08 95       	ret

000003c4 <__vector_16>:

//! Interrupt handler for ADC complete interrupt.
SIGNAL(ADC_vect)
{
     3c4:	1f 92       	push	r1
     3c6:	0f 92       	push	r0
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	0f 92       	push	r0
     3cc:	11 24       	eor	r1, r1
     3ce:	8f 93       	push	r24
	// set the a2d conversion flag to indicate "complete"
	a2dCompleteFlag = TRUE;
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <a2dCompleteFlag>
	
}
     3d6:	8f 91       	pop	r24
     3d8:	0f 90       	pop	r0
     3da:	0f be       	out	0x3f, r0	; 63
     3dc:	0f 90       	pop	r0
     3de:	1f 90       	pop	r1
     3e0:	18 95       	reti

000003e2 <bufferInit>:
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
	return data;
}
     3e2:	fc 01       	movw	r30, r24
     3e4:	8f b7       	in	r24, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	71 83       	std	Z+1, r23	; 0x01
     3ea:	60 83       	st	Z, r22
     3ec:	53 83       	std	Z+3, r21	; 0x03
     3ee:	42 83       	std	Z+2, r20	; 0x02
     3f0:	17 82       	std	Z+7, r1	; 0x07
     3f2:	16 82       	std	Z+6, r1	; 0x06
     3f4:	15 82       	std	Z+5, r1	; 0x05
     3f6:	14 82       	std	Z+4, r1	; 0x04
     3f8:	8f bf       	out	0x3f, r24	; 63
     3fa:	08 95       	ret

000003fc <bufferGetFromFront>:
     3fc:	fc 01       	movw	r30, r24
     3fe:	9f b7       	in	r25, 0x3f	; 63
     400:	f8 94       	cli
     402:	44 81       	ldd	r20, Z+4	; 0x04
     404:	55 81       	ldd	r21, Z+5	; 0x05
     406:	41 15       	cp	r20, r1
     408:	51 05       	cpc	r21, r1
     40a:	c9 f0       	breq	.+50     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     40c:	26 81       	ldd	r18, Z+6	; 0x06
     40e:	37 81       	ldd	r19, Z+7	; 0x07
     410:	a0 81       	ld	r26, Z
     412:	b1 81       	ldd	r27, Z+1	; 0x01
     414:	a2 0f       	add	r26, r18
     416:	b3 1f       	adc	r27, r19
     418:	8c 91       	ld	r24, X
     41a:	2f 5f       	subi	r18, 0xFF	; 255
     41c:	3f 4f       	sbci	r19, 0xFF	; 255
     41e:	37 83       	std	Z+7, r19	; 0x07
     420:	26 83       	std	Z+6, r18	; 0x06
     422:	62 81       	ldd	r22, Z+2	; 0x02
     424:	73 81       	ldd	r23, Z+3	; 0x03
     426:	26 17       	cp	r18, r22
     428:	37 07       	cpc	r19, r23
     42a:	20 f0       	brcs	.+8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     42c:	26 1b       	sub	r18, r22
     42e:	37 0b       	sbc	r19, r23
     430:	37 83       	std	Z+7, r19	; 0x07
     432:	26 83       	std	Z+6, r18	; 0x06
     434:	41 50       	subi	r20, 0x01	; 1
     436:	51 09       	sbc	r21, r1
     438:	55 83       	std	Z+5, r21	; 0x05
     43a:	44 83       	std	Z+4, r20	; 0x04
     43c:	01 c0       	rjmp	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	9f bf       	out	0x3f, r25	; 63
     442:	08 95       	ret

00000444 <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     444:	cf 93       	push	r28
     446:	fc 01       	movw	r30, r24
     448:	c6 2f       	mov	r28, r22
	// begin critical section
	CRITICAL_SECTION_START;
     44a:	4f b7       	in	r20, 0x3f	; 63
     44c:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     44e:	24 81       	ldd	r18, Z+4	; 0x04
     450:	35 81       	ldd	r19, Z+5	; 0x05
     452:	62 81       	ldd	r22, Z+2	; 0x02
     454:	73 81       	ldd	r23, Z+3	; 0x03
     456:	26 17       	cp	r18, r22
     458:	37 07       	cpc	r19, r23
     45a:	98 f4       	brcc	.+38     	; 0x482 <bufferAddToEnd+0x3e>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     45c:	86 81       	ldd	r24, Z+6	; 0x06
     45e:	97 81       	ldd	r25, Z+7	; 0x07
     460:	82 0f       	add	r24, r18
     462:	93 1f       	adc	r25, r19
     464:	0e 94 65 37 	call	0x6eca	; 0x6eca <__udivmodhi4>
     468:	a0 81       	ld	r26, Z
     46a:	b1 81       	ldd	r27, Z+1	; 0x01
     46c:	a8 0f       	add	r26, r24
     46e:	b9 1f       	adc	r27, r25
     470:	cc 93       	st	X, r28
		// increment the length
		buffer->datalength++;
     472:	84 81       	ldd	r24, Z+4	; 0x04
     474:	95 81       	ldd	r25, Z+5	; 0x05
     476:	01 96       	adiw	r24, 0x01	; 1
     478:	95 83       	std	Z+5, r25	; 0x05
     47a:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     47c:	4f bf       	out	0x3f, r20	; 63
		// return success
		return -1;
     47e:	8f ef       	ldi	r24, 0xFF	; 255
     480:	02 c0       	rjmp	.+4      	; 0x486 <bufferAddToEnd+0x42>
	}
	// end critical section
	CRITICAL_SECTION_END;
     482:	4f bf       	out	0x3f, r20	; 63
	// return failure
	return 0;
     484:	80 e0       	ldi	r24, 0x00	; 0
}
     486:	cf 91       	pop	r28
     488:	08 95       	ret

0000048a <mem_cpy>:
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj.fs, res);
}
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	42 30       	cpi	r20, 0x02	; 2
     490:	51 05       	cpc	r21, r1
     492:	c0 f0       	brcs	.+48     	; 0x4c4 <mem_cpy+0x3a>
     494:	db 01       	movw	r26, r22
     496:	fc 01       	movw	r30, r24
     498:	9a 01       	movw	r18, r20
     49a:	cd 91       	ld	r28, X+
     49c:	dd 91       	ld	r29, X+
     49e:	c1 93       	st	Z+, r28
     4a0:	d1 93       	st	Z+, r29
     4a2:	22 50       	subi	r18, 0x02	; 2
     4a4:	31 09       	sbc	r19, r1
     4a6:	22 30       	cpi	r18, 0x02	; 2
     4a8:	31 05       	cpc	r19, r1
     4aa:	b8 f7       	brcc	.-18     	; 0x49a <mem_cpy+0x10>
     4ac:	9a 01       	movw	r18, r20
     4ae:	22 50       	subi	r18, 0x02	; 2
     4b0:	31 09       	sbc	r19, r1
     4b2:	2e 7f       	andi	r18, 0xFE	; 254
     4b4:	2e 5f       	subi	r18, 0xFE	; 254
     4b6:	3f 4f       	sbci	r19, 0xFF	; 255
     4b8:	82 0f       	add	r24, r18
     4ba:	93 1f       	adc	r25, r19
     4bc:	62 0f       	add	r22, r18
     4be:	73 1f       	adc	r23, r19
     4c0:	41 70       	andi	r20, 0x01	; 1
     4c2:	55 27       	eor	r21, r21
     4c4:	41 15       	cp	r20, r1
     4c6:	51 05       	cpc	r21, r1
     4c8:	49 f0       	breq	.+18     	; 0x4dc <mem_cpy+0x52>
     4ca:	db 01       	movw	r26, r22
     4cc:	fc 01       	movw	r30, r24
     4ce:	48 0f       	add	r20, r24
     4d0:	59 1f       	adc	r21, r25
     4d2:	9d 91       	ld	r25, X+
     4d4:	91 93       	st	Z+, r25
     4d6:	e4 17       	cp	r30, r20
     4d8:	f5 07       	cpc	r31, r21
     4da:	d9 f7       	brne	.-10     	; 0x4d2 <mem_cpy+0x48>
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	08 95       	ret

000004e2 <get_fileinfo>:
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	fb 01       	movw	r30, r22
     4ec:	39 96       	adiw	r30, 0x09	; 9
     4ee:	dc 01       	movw	r26, r24
     4f0:	1e 96       	adiw	r26, 0x0e	; 14
     4f2:	0d 91       	ld	r16, X+
     4f4:	1d 91       	ld	r17, X+
     4f6:	2d 91       	ld	r18, X+
     4f8:	3c 91       	ld	r19, X
     4fa:	51 97       	sbiw	r26, 0x11	; 17
     4fc:	01 2b       	or	r16, r17
     4fe:	02 2b       	or	r16, r18
     500:	03 2b       	or	r16, r19
     502:	09 f4       	brne	.+2      	; 0x506 <get_fileinfo+0x24>
     504:	51 c0       	rjmp	.+162    	; 0x5a8 <get_fileinfo+0xc6>
     506:	52 96       	adiw	r26, 0x12	; 18
     508:	4d 91       	ld	r20, X+
     50a:	5c 91       	ld	r21, X
     50c:	53 97       	sbiw	r26, 0x13	; 19
     50e:	ea 01       	movw	r28, r20
     510:	88 81       	ld	r24, Y
     512:	80 32       	cpi	r24, 0x20	; 32
     514:	b9 f0       	breq	.+46     	; 0x544 <get_fileinfo+0x62>
     516:	9a 01       	movw	r18, r20
     518:	2f 5f       	subi	r18, 0xFF	; 255
     51a:	3f 4f       	sbci	r19, 0xFF	; 255
     51c:	db 01       	movw	r26, r22
     51e:	51 96       	adiw	r26, 0x11	; 17
     520:	95 ee       	ldi	r25, 0xE5	; 229
     522:	05 c0       	rjmp	.+10     	; 0x52e <get_fileinfo+0x4c>
     524:	e9 01       	movw	r28, r18
     526:	89 91       	ld	r24, Y+
     528:	9e 01       	movw	r18, r28
     52a:	80 32       	cpi	r24, 0x20	; 32
     52c:	69 f0       	breq	.+26     	; 0x548 <get_fileinfo+0x66>
     52e:	85 30       	cpi	r24, 0x05	; 5
     530:	09 f4       	brne	.+2      	; 0x534 <get_fileinfo+0x52>
     532:	89 2f       	mov	r24, r25
     534:	31 96       	adiw	r30, 0x01	; 1
     536:	ef 01       	movw	r28, r30
     538:	21 97       	sbiw	r28, 0x01	; 1
     53a:	88 83       	st	Y, r24
     53c:	ea 17       	cp	r30, r26
     53e:	fb 07       	cpc	r31, r27
     540:	89 f7       	brne	.-30     	; 0x524 <get_fileinfo+0x42>
     542:	03 c0       	rjmp	.+6      	; 0x54a <get_fileinfo+0x68>
     544:	df 01       	movw	r26, r30
     546:	01 c0       	rjmp	.+2      	; 0x54a <get_fileinfo+0x68>
     548:	df 01       	movw	r26, r30
     54a:	fa 01       	movw	r30, r20
     54c:	80 85       	ldd	r24, Z+8	; 0x08
     54e:	80 32       	cpi	r24, 0x20	; 32
     550:	69 f0       	breq	.+26     	; 0x56c <get_fileinfo+0x8a>
     552:	8e e2       	ldi	r24, 0x2E	; 46
     554:	8c 93       	st	X, r24
     556:	80 85       	ldd	r24, Z+8	; 0x08
     558:	80 32       	cpi	r24, 0x20	; 32
     55a:	41 f5       	brne	.+80     	; 0x5ac <get_fileinfo+0xca>
     55c:	fd 01       	movw	r30, r26
     55e:	31 96       	adiw	r30, 0x01	; 1
     560:	06 c0       	rjmp	.+12     	; 0x56e <get_fileinfo+0x8c>
     562:	fd 01       	movw	r30, r26
     564:	34 96       	adiw	r30, 0x04	; 4
     566:	13 96       	adiw	r26, 0x03	; 3
     568:	8c 93       	st	X, r24
     56a:	01 c0       	rjmp	.+2      	; 0x56e <get_fileinfo+0x8c>
     56c:	fd 01       	movw	r30, r26
     56e:	da 01       	movw	r26, r20
     570:	1b 96       	adiw	r26, 0x0b	; 11
     572:	8c 91       	ld	r24, X
     574:	1b 97       	sbiw	r26, 0x0b	; 11
     576:	eb 01       	movw	r28, r22
     578:	88 87       	std	Y+8, r24	; 0x08
     57a:	5c 96       	adiw	r26, 0x1c	; 28
     57c:	8d 91       	ld	r24, X+
     57e:	9d 91       	ld	r25, X+
     580:	0d 90       	ld	r0, X+
     582:	bc 91       	ld	r27, X
     584:	a0 2d       	mov	r26, r0
     586:	88 83       	st	Y, r24
     588:	99 83       	std	Y+1, r25	; 0x01
     58a:	aa 83       	std	Y+2, r26	; 0x02
     58c:	bb 83       	std	Y+3, r27	; 0x03
     58e:	da 01       	movw	r26, r20
     590:	58 96       	adiw	r26, 0x18	; 24
     592:	8d 91       	ld	r24, X+
     594:	9c 91       	ld	r25, X
     596:	59 97       	sbiw	r26, 0x19	; 25
     598:	9d 83       	std	Y+5, r25	; 0x05
     59a:	8c 83       	std	Y+4, r24	; 0x04
     59c:	56 96       	adiw	r26, 0x16	; 22
     59e:	8d 91       	ld	r24, X+
     5a0:	9c 91       	ld	r25, X
     5a2:	57 97       	sbiw	r26, 0x17	; 23
     5a4:	9f 83       	std	Y+7, r25	; 0x07
     5a6:	8e 83       	std	Y+6, r24	; 0x06
     5a8:	10 82       	st	Z, r1
     5aa:	11 c0       	rjmp	.+34     	; 0x5ce <get_fileinfo+0xec>
     5ac:	fd 01       	movw	r30, r26
     5ae:	32 96       	adiw	r30, 0x02	; 2
     5b0:	11 96       	adiw	r26, 0x01	; 1
     5b2:	8c 93       	st	X, r24
     5b4:	11 97       	sbiw	r26, 0x01	; 1
     5b6:	ea 01       	movw	r28, r20
     5b8:	89 85       	ldd	r24, Y+9	; 0x09
     5ba:	80 32       	cpi	r24, 0x20	; 32
     5bc:	c1 f2       	breq	.-80     	; 0x56e <get_fileinfo+0x8c>
     5be:	31 96       	adiw	r30, 0x01	; 1
     5c0:	12 96       	adiw	r26, 0x02	; 2
     5c2:	8c 93       	st	X, r24
     5c4:	12 97       	sbiw	r26, 0x02	; 2
     5c6:	8a 85       	ldd	r24, Y+10	; 0x0a
     5c8:	80 32       	cpi	r24, 0x20	; 32
     5ca:	59 f6       	brne	.-106    	; 0x562 <get_fileinfo+0x80>
     5cc:	d0 cf       	rjmp	.-96     	; 0x56e <get_fileinfo+0x8c>
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	08 95       	ret

000005d8 <move_window>:
     5d8:	4f 92       	push	r4
     5da:	5f 92       	push	r5
     5dc:	6f 92       	push	r6
     5de:	7f 92       	push	r7
     5e0:	af 92       	push	r10
     5e2:	bf 92       	push	r11
     5e4:	cf 92       	push	r12
     5e6:	df 92       	push	r13
     5e8:	ef 92       	push	r14
     5ea:	ff 92       	push	r15
     5ec:	0f 93       	push	r16
     5ee:	1f 93       	push	r17
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	fc 01       	movw	r30, r24
     5f6:	c6 a4       	ldd	r12, Z+46	; 0x2e
     5f8:	d7 a4       	ldd	r13, Z+47	; 0x2f
     5fa:	e0 a8       	ldd	r14, Z+48	; 0x30
     5fc:	f1 a8       	ldd	r15, Z+49	; 0x31
     5fe:	c4 16       	cp	r12, r20
     600:	d5 06       	cpc	r13, r21
     602:	e6 06       	cpc	r14, r22
     604:	f7 06       	cpc	r15, r23
     606:	09 f4       	brne	.+2      	; 0x60a <move_window+0x32>
     608:	4f c0       	rjmp	.+158    	; 0x6a8 <move_window+0xd0>
     60a:	2a 01       	movw	r4, r20
     60c:	3b 01       	movw	r6, r22
     60e:	ec 01       	movw	r28, r24
     610:	84 81       	ldd	r24, Z+4	; 0x04
     612:	88 23       	and	r24, r24
     614:	a1 f1       	breq	.+104    	; 0x67e <move_window+0xa6>
     616:	5f 01       	movw	r10, r30
     618:	f2 e3       	ldi	r31, 0x32	; 50
     61a:	af 0e       	add	r10, r31
     61c:	b1 1c       	adc	r11, r1
     61e:	01 e0       	ldi	r16, 0x01	; 1
     620:	a7 01       	movw	r20, r14
     622:	96 01       	movw	r18, r12
     624:	b5 01       	movw	r22, r10
     626:	89 81       	ldd	r24, Y+1	; 0x01
     628:	0e 94 93 2b 	call	0x5726	; 0x5726 <disk_write>
     62c:	81 11       	cpse	r24, r1
     62e:	3e c0       	rjmp	.+124    	; 0x6ac <move_window+0xd4>
     630:	1c 82       	std	Y+4, r1	; 0x04
     632:	4a a1       	ldd	r20, Y+34	; 0x22
     634:	5b a1       	ldd	r21, Y+35	; 0x23
     636:	6c a1       	ldd	r22, Y+36	; 0x24
     638:	7d a1       	ldd	r23, Y+37	; 0x25
     63a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     63c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     63e:	a8 a1       	ldd	r26, Y+32	; 0x20
     640:	b9 a1       	ldd	r27, Y+33	; 0x21
     642:	84 0f       	add	r24, r20
     644:	95 1f       	adc	r25, r21
     646:	a6 1f       	adc	r26, r22
     648:	b7 1f       	adc	r27, r23
     64a:	c8 16       	cp	r12, r24
     64c:	d9 06       	cpc	r13, r25
     64e:	ea 06       	cpc	r14, r26
     650:	fb 06       	cpc	r15, r27
     652:	a8 f4       	brcc	.+42     	; 0x67e <move_window+0xa6>
     654:	1b 81       	ldd	r17, Y+3	; 0x03
     656:	12 30       	cpi	r17, 0x02	; 2
     658:	90 f0       	brcs	.+36     	; 0x67e <move_window+0xa6>
     65a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     65c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     65e:	a8 a1       	ldd	r26, Y+32	; 0x20
     660:	b9 a1       	ldd	r27, Y+33	; 0x21
     662:	c8 0e       	add	r12, r24
     664:	d9 1e       	adc	r13, r25
     666:	ea 1e       	adc	r14, r26
     668:	fb 1e       	adc	r15, r27
     66a:	01 e0       	ldi	r16, 0x01	; 1
     66c:	a7 01       	movw	r20, r14
     66e:	96 01       	movw	r18, r12
     670:	b5 01       	movw	r22, r10
     672:	89 81       	ldd	r24, Y+1	; 0x01
     674:	0e 94 93 2b 	call	0x5726	; 0x5726 <disk_write>
     678:	11 50       	subi	r17, 0x01	; 1
     67a:	11 30       	cpi	r17, 0x01	; 1
     67c:	71 f7       	brne	.-36     	; 0x65a <move_window+0x82>
     67e:	41 14       	cp	r4, r1
     680:	51 04       	cpc	r5, r1
     682:	61 04       	cpc	r6, r1
     684:	71 04       	cpc	r7, r1
     686:	a1 f0       	breq	.+40     	; 0x6b0 <move_window+0xd8>
     688:	01 e0       	ldi	r16, 0x01	; 1
     68a:	a3 01       	movw	r20, r6
     68c:	92 01       	movw	r18, r4
     68e:	be 01       	movw	r22, r28
     690:	6e 5c       	subi	r22, 0xCE	; 206
     692:	7f 4f       	sbci	r23, 0xFF	; 255
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	0e 94 40 2b 	call	0x5680	; 0x5680 <disk_read>
     69a:	81 11       	cpse	r24, r1
     69c:	0b c0       	rjmp	.+22     	; 0x6b4 <move_window+0xdc>
     69e:	4e a6       	std	Y+46, r4	; 0x2e
     6a0:	5f a6       	std	Y+47, r5	; 0x2f
     6a2:	68 aa       	std	Y+48, r6	; 0x30
     6a4:	79 aa       	std	Y+49, r7	; 0x31
     6a6:	07 c0       	rjmp	.+14     	; 0x6b6 <move_window+0xde>
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	05 c0       	rjmp	.+10     	; 0x6b6 <move_window+0xde>
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	03 c0       	rjmp	.+6      	; 0x6b6 <move_window+0xde>
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	01 c0       	rjmp	.+2      	; 0x6b6 <move_window+0xde>
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	ff 90       	pop	r15
     6c0:	ef 90       	pop	r14
     6c2:	df 90       	pop	r13
     6c4:	cf 90       	pop	r12
     6c6:	bf 90       	pop	r11
     6c8:	af 90       	pop	r10
     6ca:	7f 90       	pop	r7
     6cc:	6f 90       	pop	r6
     6ce:	5f 90       	pop	r5
     6d0:	4f 90       	pop	r4
     6d2:	08 95       	ret

000006d4 <check_fs>:
     6d4:	0f 93       	push	r16
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	ec 01       	movw	r28, r24
     6dc:	9a 01       	movw	r18, r20
     6de:	ab 01       	movw	r20, r22
     6e0:	bc 01       	movw	r22, r24
     6e2:	6e 5c       	subi	r22, 0xCE	; 206
     6e4:	7f 4f       	sbci	r23, 0xFF	; 255
     6e6:	01 e0       	ldi	r16, 0x01	; 1
     6e8:	89 81       	ldd	r24, Y+1	; 0x01
     6ea:	0e 94 40 2b 	call	0x5680	; 0x5680 <disk_read>
     6ee:	81 11       	cpse	r24, r1
     6f0:	23 c0       	rjmp	.+70     	; 0x738 <check_fs+0x64>
     6f2:	fe 01       	movw	r30, r28
     6f4:	e0 5d       	subi	r30, 0xD0	; 208
     6f6:	fd 4f       	sbci	r31, 0xFD	; 253
     6f8:	80 81       	ld	r24, Z
     6fa:	91 81       	ldd	r25, Z+1	; 0x01
     6fc:	85 35       	cpi	r24, 0x55	; 85
     6fe:	9a 4a       	sbci	r25, 0xAA	; 170
     700:	e9 f4       	brne	.+58     	; 0x73c <check_fs+0x68>
     702:	e8 5c       	subi	r30, 0xC8	; 200
     704:	f1 40       	sbci	r31, 0x01	; 1
     706:	80 81       	ld	r24, Z
     708:	91 81       	ldd	r25, Z+1	; 0x01
     70a:	a2 81       	ldd	r26, Z+2	; 0x02
     70c:	b3 81       	ldd	r27, Z+3	; 0x03
     70e:	bb 27       	eor	r27, r27
     710:	86 34       	cpi	r24, 0x46	; 70
     712:	91 44       	sbci	r25, 0x41	; 65
     714:	a4 45       	sbci	r26, 0x54	; 84
     716:	b1 05       	cpc	r27, r1
     718:	99 f0       	breq	.+38     	; 0x740 <check_fs+0x6c>
     71a:	cc 57       	subi	r28, 0x7C	; 124
     71c:	df 4f       	sbci	r29, 0xFF	; 255
     71e:	48 81       	ld	r20, Y
     720:	59 81       	ldd	r21, Y+1	; 0x01
     722:	6a 81       	ldd	r22, Y+2	; 0x02
     724:	7b 81       	ldd	r23, Y+3	; 0x03
     726:	77 27       	eor	r23, r23
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	46 34       	cpi	r20, 0x46	; 70
     72c:	51 44       	sbci	r21, 0x41	; 65
     72e:	64 45       	sbci	r22, 0x54	; 84
     730:	71 05       	cpc	r23, r1
     732:	39 f4       	brne	.+14     	; 0x742 <check_fs+0x6e>
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	05 c0       	rjmp	.+10     	; 0x742 <check_fs+0x6e>
     738:	83 e0       	ldi	r24, 0x03	; 3
     73a:	03 c0       	rjmp	.+6      	; 0x742 <check_fs+0x6e>
     73c:	82 e0       	ldi	r24, 0x02	; 2
     73e:	01 c0       	rjmp	.+2      	; 0x742 <check_fs+0x6e>
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	0f 91       	pop	r16
     748:	08 95       	ret

0000074a <validate>:
     74a:	00 97       	sbiw	r24, 0x00	; 0
     74c:	81 f0       	breq	.+32     	; 0x76e <validate+0x24>
     74e:	fc 01       	movw	r30, r24
     750:	20 81       	ld	r18, Z
     752:	22 23       	and	r18, r18
     754:	71 f0       	breq	.+28     	; 0x772 <validate+0x28>
     756:	26 81       	ldd	r18, Z+6	; 0x06
     758:	37 81       	ldd	r19, Z+7	; 0x07
     75a:	26 17       	cp	r18, r22
     75c:	37 07       	cpc	r19, r23
     75e:	59 f4       	brne	.+22     	; 0x776 <validate+0x2c>
     760:	81 81       	ldd	r24, Z+1	; 0x01
     762:	0e 94 39 2b 	call	0x5672	; 0x5672 <disk_status>
     766:	80 fd       	sbrc	r24, 0
     768:	08 c0       	rjmp	.+16     	; 0x77a <validate+0x30>
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	08 95       	ret
     76e:	89 e0       	ldi	r24, 0x09	; 9
     770:	08 95       	ret
     772:	89 e0       	ldi	r24, 0x09	; 9
     774:	08 95       	ret
     776:	89 e0       	ldi	r24, 0x09	; 9
     778:	08 95       	ret
     77a:	83 e0       	ldi	r24, 0x03	; 3
     77c:	08 95       	ret

0000077e <chk_mounted>:
     77e:	2f 92       	push	r2
     780:	3f 92       	push	r3
     782:	4f 92       	push	r4
     784:	5f 92       	push	r5
     786:	6f 92       	push	r6
     788:	7f 92       	push	r7
     78a:	8f 92       	push	r8
     78c:	9f 92       	push	r9
     78e:	af 92       	push	r10
     790:	bf 92       	push	r11
     792:	cf 92       	push	r12
     794:	df 92       	push	r13
     796:	ef 92       	push	r14
     798:	ff 92       	push	r15
     79a:	0f 93       	push	r16
     79c:	1f 93       	push	r17
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62
     7a6:	2e 97       	sbiw	r28, 0x0e	; 14
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	de bf       	out	0x3e, r29	; 62
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	cd bf       	out	0x3d, r28	; 61
     7b2:	dc 01       	movw	r26, r24
     7b4:	ed 91       	ld	r30, X+
     7b6:	fc 91       	ld	r31, X
     7b8:	11 97       	sbiw	r26, 0x01	; 1
     7ba:	20 81       	ld	r18, Z
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	20 53       	subi	r18, 0x30	; 48
     7c0:	31 09       	sbc	r19, r1
     7c2:	2a 30       	cpi	r18, 0x0A	; 10
     7c4:	31 05       	cpc	r19, r1
     7c6:	38 f4       	brcc	.+14     	; 0x7d6 <chk_mounted+0x58>
     7c8:	51 81       	ldd	r21, Z+1	; 0x01
     7ca:	5a 33       	cpi	r21, 0x3A	; 58
     7cc:	21 f4       	brne	.+8      	; 0x7d6 <chk_mounted+0x58>
     7ce:	32 96       	adiw	r30, 0x02	; 2
     7d0:	ed 93       	st	X+, r30
     7d2:	fc 93       	st	X, r31
     7d4:	03 c0       	rjmp	.+6      	; 0x7dc <chk_mounted+0x5e>
     7d6:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <__data_end>
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	23 2b       	or	r18, r19
     7de:	09 f0       	breq	.+2      	; 0x7e2 <chk_mounted+0x64>
     7e0:	c0 c1       	rjmp	.+896    	; 0xb62 <__stack+0x303>
     7e2:	e0 91 7f 01 	lds	r30, 0x017F	; 0x80017f <FatFs>
     7e6:	f0 91 80 01 	lds	r31, 0x0180	; 0x800180 <FatFs+0x1>
     7ea:	fe 87       	std	Y+14, r31	; 0x0e
     7ec:	ed 87       	std	Y+13, r30	; 0x0d
     7ee:	db 01       	movw	r26, r22
     7f0:	ed 93       	st	X+, r30
     7f2:	fc 93       	st	X, r31
     7f4:	30 97       	sbiw	r30, 0x00	; 0
     7f6:	09 f4       	brne	.+2      	; 0x7fa <chk_mounted+0x7c>
     7f8:	b6 c1       	rjmp	.+876    	; 0xb66 <__stack+0x307>
     7fa:	14 2f       	mov	r17, r20
     7fc:	80 81       	ld	r24, Z
     7fe:	88 23       	and	r24, r24
     800:	61 f0       	breq	.+24     	; 0x81a <chk_mounted+0x9c>
     802:	81 81       	ldd	r24, Z+1	; 0x01
     804:	0e 94 39 2b 	call	0x5672	; 0x5672 <disk_status>
     808:	80 fd       	sbrc	r24, 0
     80a:	07 c0       	rjmp	.+14     	; 0x81a <chk_mounted+0x9c>
     80c:	11 23       	and	r17, r17
     80e:	09 f4       	brne	.+2      	; 0x812 <chk_mounted+0x94>
     810:	ac c1       	rjmp	.+856    	; 0xb6a <__stack+0x30b>
     812:	82 ff       	sbrs	r24, 2
     814:	ac c1       	rjmp	.+856    	; 0xb6e <__stack+0x30f>
     816:	8a e0       	ldi	r24, 0x0A	; 10
     818:	7f c2       	rjmp	.+1278   	; 0xd18 <__stack+0x4b9>
     81a:	ed 85       	ldd	r30, Y+13	; 0x0d
     81c:	fe 85       	ldd	r31, Y+14	; 0x0e
     81e:	10 82       	st	Z, r1
     820:	11 82       	std	Z+1, r1	; 0x01
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <disk_initialize>
     828:	80 fd       	sbrc	r24, 0
     82a:	a3 c1       	rjmp	.+838    	; 0xb72 <__stack+0x313>
     82c:	11 23       	and	r17, r17
     82e:	11 f0       	breq	.+4      	; 0x834 <chk_mounted+0xb6>
     830:	82 fd       	sbrc	r24, 2
     832:	a1 c1       	rjmp	.+834    	; 0xb76 <__stack+0x317>
     834:	40 e0       	ldi	r20, 0x00	; 0
     836:	50 e0       	ldi	r21, 0x00	; 0
     838:	ba 01       	movw	r22, r20
     83a:	8d 85       	ldd	r24, Y+13	; 0x0d
     83c:	9e 85       	ldd	r25, Y+14	; 0x0e
     83e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <check_fs>
     842:	81 30       	cpi	r24, 0x01	; 1
     844:	b9 f4       	brne	.+46     	; 0x874 <__stack+0x15>
     846:	ed 85       	ldd	r30, Y+13	; 0x0d
     848:	fe 85       	ldd	r31, Y+14	; 0x0e
     84a:	ec 50       	subi	r30, 0x0C	; 12
     84c:	fe 4f       	sbci	r31, 0xFE	; 254
     84e:	80 81       	ld	r24, Z
     850:	88 23       	and	r24, r24
     852:	09 f4       	brne	.+2      	; 0x856 <chk_mounted+0xd8>
     854:	92 c1       	rjmp	.+804    	; 0xb7a <__stack+0x31b>
     856:	ed 85       	ldd	r30, Y+13	; 0x0d
     858:	fe 85       	ldd	r31, Y+14	; 0x0e
     85a:	e8 50       	subi	r30, 0x08	; 8
     85c:	fe 4f       	sbci	r31, 0xFE	; 254
     85e:	c0 80       	ld	r12, Z
     860:	d1 80       	ldd	r13, Z+1	; 0x01
     862:	e2 80       	ldd	r14, Z+2	; 0x02
     864:	f3 80       	ldd	r15, Z+3	; 0x03
     866:	b7 01       	movw	r22, r14
     868:	a6 01       	movw	r20, r12
     86a:	8d 85       	ldd	r24, Y+13	; 0x0d
     86c:	9e 85       	ldd	r25, Y+14	; 0x0e
     86e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <check_fs>
     872:	03 c0       	rjmp	.+6      	; 0x87a <__stack+0x1b>
     874:	c1 2c       	mov	r12, r1
     876:	d1 2c       	mov	r13, r1
     878:	76 01       	movw	r14, r12
     87a:	83 30       	cpi	r24, 0x03	; 3
     87c:	09 f4       	brne	.+2      	; 0x880 <__stack+0x21>
     87e:	7f c1       	rjmp	.+766    	; 0xb7e <__stack+0x31f>
     880:	81 11       	cpse	r24, r1
     882:	7f c1       	rjmp	.+766    	; 0xb82 <__stack+0x323>
     884:	ad 85       	ldd	r26, Y+13	; 0x0d
     886:	be 85       	ldd	r27, Y+14	; 0x0e
     888:	dd 96       	adiw	r26, 0x3d	; 61
     88a:	8d 91       	ld	r24, X+
     88c:	9c 91       	ld	r25, X
     88e:	de 97       	sbiw	r26, 0x3e	; 62
     890:	81 15       	cp	r24, r1
     892:	92 40       	sbci	r25, 0x02	; 2
     894:	09 f0       	breq	.+2      	; 0x898 <__stack+0x39>
     896:	77 c1       	rjmp	.+750    	; 0xb86 <__stack+0x327>
     898:	ed 85       	ldd	r30, Y+13	; 0x0d
     89a:	fe 85       	ldd	r31, Y+14	; 0x0e
     89c:	e8 5b       	subi	r30, 0xB8	; 184
     89e:	ff 4f       	sbci	r31, 0xFF	; 255
     8a0:	40 80       	ld	r4, Z
     8a2:	51 80       	ldd	r5, Z+1	; 0x01
     8a4:	61 2c       	mov	r6, r1
     8a6:	71 2c       	mov	r7, r1
     8a8:	41 14       	cp	r4, r1
     8aa:	51 04       	cpc	r5, r1
     8ac:	61 04       	cpc	r6, r1
     8ae:	71 04       	cpc	r7, r1
     8b0:	41 f4       	brne	.+16     	; 0x8c2 <__stack+0x63>
     8b2:	ed 85       	ldd	r30, Y+13	; 0x0d
     8b4:	fe 85       	ldd	r31, Y+14	; 0x0e
     8b6:	ea 5a       	subi	r30, 0xAA	; 170
     8b8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ba:	40 80       	ld	r4, Z
     8bc:	51 80       	ldd	r5, Z+1	; 0x01
     8be:	62 80       	ldd	r6, Z+2	; 0x02
     8c0:	73 80       	ldd	r7, Z+3	; 0x03
     8c2:	ed 85       	ldd	r30, Y+13	; 0x0d
     8c4:	fe 85       	ldd	r31, Y+14	; 0x0e
     8c6:	46 8e       	std	Z+30, r4	; 0x1e
     8c8:	57 8e       	std	Z+31, r5	; 0x1f
     8ca:	60 a2       	std	Z+32, r6	; 0x20
     8cc:	71 a2       	std	Z+33, r7	; 0x21
     8ce:	ee 5b       	subi	r30, 0xBE	; 190
     8d0:	ff 4f       	sbci	r31, 0xFF	; 255
     8d2:	a0 81       	ld	r26, Z
     8d4:	ed 85       	ldd	r30, Y+13	; 0x0d
     8d6:	fe 85       	ldd	r31, Y+14	; 0x0e
     8d8:	a3 83       	std	Z+3, r26	; 0x03
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	8a 0f       	add	r24, r26
     8de:	82 30       	cpi	r24, 0x02	; 2
     8e0:	08 f0       	brcs	.+2      	; 0x8e4 <__stack+0x85>
     8e2:	53 c1       	rjmp	.+678    	; 0xb8a <__stack+0x32b>
     8e4:	17 ad       	ldd	r17, Z+63	; 0x3f
     8e6:	12 83       	std	Z+2, r17	; 0x02
     8e8:	11 23       	and	r17, r17
     8ea:	09 f4       	brne	.+2      	; 0x8ee <__stack+0x8f>
     8ec:	50 c1       	rjmp	.+672    	; 0xb8e <__stack+0x32f>
     8ee:	81 2f       	mov	r24, r17
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	9c 01       	movw	r18, r24
     8f4:	21 50       	subi	r18, 0x01	; 1
     8f6:	31 09       	sbc	r19, r1
     8f8:	82 23       	and	r24, r18
     8fa:	93 23       	and	r25, r19
     8fc:	89 2b       	or	r24, r25
     8fe:	09 f0       	breq	.+2      	; 0x902 <__stack+0xa3>
     900:	48 c1       	rjmp	.+656    	; 0xb92 <__stack+0x333>
     902:	ed 5b       	subi	r30, 0xBD	; 189
     904:	ff 4f       	sbci	r31, 0xFF	; 255
     906:	20 80       	ld	r2, Z
     908:	31 80       	ldd	r3, Z+1	; 0x01
     90a:	ed 85       	ldd	r30, Y+13	; 0x0d
     90c:	fe 85       	ldd	r31, Y+14	; 0x0e
     90e:	31 86       	std	Z+9, r3	; 0x09
     910:	20 86       	std	Z+8, r2	; 0x08
     912:	c1 01       	movw	r24, r2
     914:	8f 70       	andi	r24, 0x0F	; 15
     916:	99 27       	eor	r25, r25
     918:	89 2b       	or	r24, r25
     91a:	09 f0       	breq	.+2      	; 0x91e <__stack+0xbf>
     91c:	3c c1       	rjmp	.+632    	; 0xb96 <__stack+0x337>
     91e:	eb 5b       	subi	r30, 0xBB	; 187
     920:	ff 4f       	sbci	r31, 0xFF	; 255
     922:	80 80       	ld	r8, Z
     924:	91 80       	ldd	r9, Z+1	; 0x01
     926:	a1 2c       	mov	r10, r1
     928:	b1 2c       	mov	r11, r1
     92a:	81 14       	cp	r8, r1
     92c:	91 04       	cpc	r9, r1
     92e:	a1 04       	cpc	r10, r1
     930:	b1 04       	cpc	r11, r1
     932:	41 f4       	brne	.+16     	; 0x944 <__stack+0xe5>
     934:	ed 85       	ldd	r30, Y+13	; 0x0d
     936:	fe 85       	ldd	r31, Y+14	; 0x0e
     938:	ee 5a       	subi	r30, 0xAE	; 174
     93a:	ff 4f       	sbci	r31, 0xFF	; 255
     93c:	80 80       	ld	r8, Z
     93e:	91 80       	ldd	r9, Z+1	; 0x01
     940:	a2 80       	ldd	r10, Z+2	; 0x02
     942:	b3 80       	ldd	r11, Z+3	; 0x03
     944:	ed 85       	ldd	r30, Y+13	; 0x0d
     946:	fe 85       	ldd	r31, Y+14	; 0x0e
     948:	e0 5c       	subi	r30, 0xC0	; 192
     94a:	ff 4f       	sbci	r31, 0xFF	; 255
     94c:	01 90       	ld	r0, Z+
     94e:	f0 81       	ld	r31, Z
     950:	e0 2d       	mov	r30, r0
     952:	30 97       	sbiw	r30, 0x00	; 0
     954:	09 f4       	brne	.+2      	; 0x958 <__stack+0xf9>
     956:	21 c1       	rjmp	.+578    	; 0xb9a <__stack+0x33b>
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	a3 01       	movw	r20, r6
     95c:	92 01       	movw	r18, r4
     95e:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <__muluhisi3>
     962:	69 87       	std	Y+9, r22	; 0x09
     964:	7a 87       	std	Y+10, r23	; 0x0a
     966:	8b 87       	std	Y+11, r24	; 0x0b
     968:	9c 87       	std	Y+12, r25	; 0x0c
     96a:	9f 01       	movw	r18, r30
     96c:	40 e0       	ldi	r20, 0x00	; 0
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	2d 83       	std	Y+5, r18	; 0x05
     972:	3e 83       	std	Y+6, r19	; 0x06
     974:	4f 83       	std	Y+7, r20	; 0x07
     976:	58 87       	std	Y+8, r21	; 0x08
     978:	c1 01       	movw	r24, r2
     97a:	92 95       	swap	r25
     97c:	82 95       	swap	r24
     97e:	8f 70       	andi	r24, 0x0F	; 15
     980:	89 27       	eor	r24, r25
     982:	9f 70       	andi	r25, 0x0F	; 15
     984:	89 27       	eor	r24, r25
     986:	28 0f       	add	r18, r24
     988:	39 1f       	adc	r19, r25
     98a:	41 1d       	adc	r20, r1
     98c:	51 1d       	adc	r21, r1
     98e:	da 01       	movw	r26, r20
     990:	c9 01       	movw	r24, r18
     992:	29 85       	ldd	r18, Y+9	; 0x09
     994:	3a 85       	ldd	r19, Y+10	; 0x0a
     996:	4b 85       	ldd	r20, Y+11	; 0x0b
     998:	5c 85       	ldd	r21, Y+12	; 0x0c
     99a:	28 0f       	add	r18, r24
     99c:	39 1f       	adc	r19, r25
     99e:	4a 1f       	adc	r20, r26
     9a0:	5b 1f       	adc	r21, r27
     9a2:	29 83       	std	Y+1, r18	; 0x01
     9a4:	3a 83       	std	Y+2, r19	; 0x02
     9a6:	4b 83       	std	Y+3, r20	; 0x03
     9a8:	5c 83       	std	Y+4, r21	; 0x04
     9aa:	82 16       	cp	r8, r18
     9ac:	93 06       	cpc	r9, r19
     9ae:	a4 06       	cpc	r10, r20
     9b0:	b5 06       	cpc	r11, r21
     9b2:	08 f4       	brcc	.+2      	; 0x9b6 <__stack+0x157>
     9b4:	f4 c0       	rjmp	.+488    	; 0xb9e <__stack+0x33f>
     9b6:	c5 01       	movw	r24, r10
     9b8:	b4 01       	movw	r22, r8
     9ba:	62 1b       	sub	r22, r18
     9bc:	73 0b       	sbc	r23, r19
     9be:	84 0b       	sbc	r24, r20
     9c0:	95 0b       	sbc	r25, r21
     9c2:	21 2f       	mov	r18, r17
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	40 e0       	ldi	r20, 0x00	; 0
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	0e 94 79 37 	call	0x6ef2	; 0x6ef2 <__udivmodsi4>
     9ce:	da 01       	movw	r26, r20
     9d0:	c9 01       	movw	r24, r18
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	41 05       	cpc	r20, r1
     9d8:	51 05       	cpc	r21, r1
     9da:	09 f4       	brne	.+2      	; 0x9de <__stack+0x17f>
     9dc:	e2 c0       	rjmp	.+452    	; 0xba2 <__stack+0x343>
     9de:	26 3f       	cpi	r18, 0xF6	; 246
     9e0:	6f e0       	ldi	r22, 0x0F	; 15
     9e2:	36 07       	cpc	r19, r22
     9e4:	41 05       	cpc	r20, r1
     9e6:	51 05       	cpc	r21, r1
     9e8:	08 f0       	brcs	.+2      	; 0x9ec <__stack+0x18d>
     9ea:	8e c1       	rjmp	.+796    	; 0xd08 <__stack+0x4a9>
     9ec:	f1 e0       	ldi	r31, 0x01	; 1
     9ee:	8d c1       	rjmp	.+794    	; 0xd0a <__stack+0x4ab>
     9f0:	ed 85       	ldd	r30, Y+13	; 0x0d
     9f2:	fe 85       	ldd	r31, Y+14	; 0x0e
     9f4:	e2 5a       	subi	r30, 0xA2	; 162
     9f6:	ff 4f       	sbci	r31, 0xFF	; 255
     9f8:	80 81       	ld	r24, Z
     9fa:	91 81       	ldd	r25, Z+1	; 0x01
     9fc:	a2 81       	ldd	r26, Z+2	; 0x02
     9fe:	b3 81       	ldd	r27, Z+3	; 0x03
     a00:	ed 85       	ldd	r30, Y+13	; 0x0d
     a02:	fe 85       	ldd	r31, Y+14	; 0x0e
     a04:	86 a3       	std	Z+38, r24	; 0x26
     a06:	97 a3       	std	Z+39, r25	; 0x27
     a08:	a0 a7       	std	Z+40, r26	; 0x28
     a0a:	b1 a7       	std	Z+41, r27	; 0x29
     a0c:	88 0c       	add	r8, r8
     a0e:	99 1c       	adc	r9, r9
     a10:	aa 1c       	adc	r10, r10
     a12:	bb 1c       	adc	r11, r11
     a14:	88 0c       	add	r8, r8
     a16:	99 1c       	adc	r9, r9
     a18:	aa 1c       	adc	r10, r10
     a1a:	bb 1c       	adc	r11, r11
     a1c:	ff ef       	ldi	r31, 0xFF	; 255
     a1e:	8f 0e       	add	r8, r31
     a20:	f1 e0       	ldi	r31, 0x01	; 1
     a22:	9f 1e       	adc	r9, r31
     a24:	a1 1c       	adc	r10, r1
     a26:	b1 1c       	adc	r11, r1
     a28:	07 2e       	mov	r0, r23
     a2a:	79 e0       	ldi	r23, 0x09	; 9
     a2c:	b6 94       	lsr	r11
     a2e:	a7 94       	ror	r10
     a30:	97 94       	ror	r9
     a32:	87 94       	ror	r8
     a34:	7a 95       	dec	r23
     a36:	d1 f7       	brne	.-12     	; 0xa2c <__stack+0x1cd>
     a38:	70 2d       	mov	r23, r0
     a3a:	48 14       	cp	r4, r8
     a3c:	59 04       	cpc	r5, r9
     a3e:	6a 04       	cpc	r6, r10
     a40:	7b 04       	cpc	r7, r11
     a42:	08 f4       	brcc	.+2      	; 0xa46 <__stack+0x1e7>
     a44:	b0 c0       	rjmp	.+352    	; 0xba6 <__stack+0x347>
     a46:	07 c1       	rjmp	.+526    	; 0xc56 <__stack+0x3f7>
     a48:	29 85       	ldd	r18, Y+9	; 0x09
     a4a:	3a 85       	ldd	r19, Y+10	; 0x0a
     a4c:	4b 85       	ldd	r20, Y+11	; 0x0b
     a4e:	5c 85       	ldd	r21, Y+12	; 0x0c
     a50:	c2 0e       	add	r12, r18
     a52:	d3 1e       	adc	r13, r19
     a54:	e4 1e       	adc	r14, r20
     a56:	f5 1e       	adc	r15, r21
     a58:	ad 85       	ldd	r26, Y+13	; 0x0d
     a5a:	be 85       	ldd	r27, Y+14	; 0x0e
     a5c:	96 96       	adiw	r26, 0x26	; 38
     a5e:	cd 92       	st	X+, r12
     a60:	dd 92       	st	X+, r13
     a62:	ed 92       	st	X+, r14
     a64:	fc 92       	st	X, r15
     a66:	99 97       	sbiw	r26, 0x29	; 41
     a68:	f2 30       	cpi	r31, 0x02	; 2
     a6a:	29 f4       	brne	.+10     	; 0xa76 <__stack+0x217>
     a6c:	88 0c       	add	r8, r8
     a6e:	99 1c       	adc	r9, r9
     a70:	aa 1c       	adc	r10, r10
     a72:	bb 1c       	adc	r11, r11
     a74:	da c0       	rjmp	.+436    	; 0xc2a <__stack+0x3cb>
     a76:	a3 e0       	ldi	r26, 0x03	; 3
     a78:	b0 e0       	ldi	r27, 0x00	; 0
     a7a:	a5 01       	movw	r20, r10
     a7c:	94 01       	movw	r18, r8
     a7e:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <__muluhisi3>
     a82:	dc 01       	movw	r26, r24
     a84:	cb 01       	movw	r24, r22
     a86:	b6 95       	lsr	r27
     a88:	a7 95       	ror	r26
     a8a:	97 95       	ror	r25
     a8c:	87 95       	ror	r24
     a8e:	e1 e0       	ldi	r30, 0x01	; 1
     a90:	8e 22       	and	r8, r30
     a92:	99 24       	eor	r9, r9
     a94:	aa 24       	eor	r10, r10
     a96:	bb 24       	eor	r11, r11
     a98:	88 0e       	add	r8, r24
     a9a:	99 1e       	adc	r9, r25
     a9c:	aa 1e       	adc	r10, r26
     a9e:	bb 1e       	adc	r11, r27
     aa0:	c4 c0       	rjmp	.+392    	; 0xc2a <__stack+0x3cb>
     aa2:	ed 85       	ldd	r30, Y+13	; 0x0d
     aa4:	fe 85       	ldd	r31, Y+14	; 0x0e
     aa6:	e0 5d       	subi	r30, 0xD0	; 208
     aa8:	fd 4f       	sbci	r31, 0xFD	; 253
     aaa:	80 81       	ld	r24, Z
     aac:	91 81       	ldd	r25, Z+1	; 0x01
     aae:	85 35       	cpi	r24, 0x55	; 85
     ab0:	9a 4a       	sbci	r25, 0xAA	; 170
     ab2:	a1 f5       	brne	.+104    	; 0xb1c <__stack+0x2bd>
     ab4:	ed 85       	ldd	r30, Y+13	; 0x0d
     ab6:	fe 85       	ldd	r31, Y+14	; 0x0e
     ab8:	82 a9       	ldd	r24, Z+50	; 0x32
     aba:	93 a9       	ldd	r25, Z+51	; 0x33
     abc:	a4 a9       	ldd	r26, Z+52	; 0x34
     abe:	b5 a9       	ldd	r27, Z+53	; 0x35
     ac0:	82 35       	cpi	r24, 0x52	; 82
     ac2:	92 45       	sbci	r25, 0x52	; 82
     ac4:	a1 46       	sbci	r26, 0x61	; 97
     ac6:	b1 44       	sbci	r27, 0x41	; 65
     ac8:	59 f5       	brne	.+86     	; 0xb20 <__stack+0x2c1>
     aca:	ed 85       	ldd	r30, Y+13	; 0x0d
     acc:	fe 85       	ldd	r31, Y+14	; 0x0e
     ace:	ea 5e       	subi	r30, 0xEA	; 234
     ad0:	fd 4f       	sbci	r31, 0xFD	; 253
     ad2:	80 81       	ld	r24, Z
     ad4:	91 81       	ldd	r25, Z+1	; 0x01
     ad6:	a2 81       	ldd	r26, Z+2	; 0x02
     ad8:	b3 81       	ldd	r27, Z+3	; 0x03
     ada:	82 37       	cpi	r24, 0x72	; 114
     adc:	92 47       	sbci	r25, 0x72	; 114
     ade:	a1 44       	sbci	r26, 0x41	; 65
     ae0:	b1 46       	sbci	r27, 0x61	; 97
     ae2:	01 f5       	brne	.+64     	; 0xb24 <__stack+0x2c5>
     ae4:	ed 85       	ldd	r30, Y+13	; 0x0d
     ae6:	fe 85       	ldd	r31, Y+14	; 0x0e
     ae8:	e2 5e       	subi	r30, 0xE2	; 226
     aea:	fd 4f       	sbci	r31, 0xFD	; 253
     aec:	80 81       	ld	r24, Z
     aee:	91 81       	ldd	r25, Z+1	; 0x01
     af0:	a2 81       	ldd	r26, Z+2	; 0x02
     af2:	b3 81       	ldd	r27, Z+3	; 0x03
     af4:	ed 85       	ldd	r30, Y+13	; 0x0d
     af6:	fe 85       	ldd	r31, Y+14	; 0x0e
     af8:	82 87       	std	Z+10, r24	; 0x0a
     afa:	93 87       	std	Z+11, r25	; 0x0b
     afc:	a4 87       	std	Z+12, r26	; 0x0c
     afe:	b5 87       	std	Z+13, r27	; 0x0d
     b00:	e6 5e       	subi	r30, 0xE6	; 230
     b02:	fd 4f       	sbci	r31, 0xFD	; 253
     b04:	80 81       	ld	r24, Z
     b06:	91 81       	ldd	r25, Z+1	; 0x01
     b08:	a2 81       	ldd	r26, Z+2	; 0x02
     b0a:	b3 81       	ldd	r27, Z+3	; 0x03
     b0c:	ed 85       	ldd	r30, Y+13	; 0x0d
     b0e:	fe 85       	ldd	r31, Y+14	; 0x0e
     b10:	86 87       	std	Z+14, r24	; 0x0e
     b12:	97 87       	std	Z+15, r25	; 0x0f
     b14:	a0 8b       	std	Z+16, r26	; 0x10
     b16:	b1 8b       	std	Z+17, r27	; 0x11
     b18:	f3 e0       	ldi	r31, 0x03	; 3
     b1a:	05 c0       	rjmp	.+10     	; 0xb26 <__stack+0x2c7>
     b1c:	f3 e0       	ldi	r31, 0x03	; 3
     b1e:	03 c0       	rjmp	.+6      	; 0xb26 <__stack+0x2c7>
     b20:	f3 e0       	ldi	r31, 0x03	; 3
     b22:	01 c0       	rjmp	.+2      	; 0xb26 <__stack+0x2c7>
     b24:	f3 e0       	ldi	r31, 0x03	; 3
     b26:	ad 85       	ldd	r26, Y+13	; 0x0d
     b28:	be 85       	ldd	r27, Y+14	; 0x0e
     b2a:	fc 93       	st	X, r31
     b2c:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <Fsid>
     b30:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <Fsid+0x1>
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <Fsid+0x1>
     b3a:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <Fsid>
     b3e:	17 96       	adiw	r26, 0x07	; 7
     b40:	9c 93       	st	X, r25
     b42:	8e 93       	st	-X, r24
     b44:	16 97       	sbiw	r26, 0x06	; 6
     b46:	fd 01       	movw	r30, r26
     b48:	16 a6       	std	Z+46, r1	; 0x2e
     b4a:	17 a6       	std	Z+47, r1	; 0x2f
     b4c:	10 aa       	std	Z+48, r1	; 0x30
     b4e:	11 aa       	std	Z+49, r1	; 0x31
     b50:	14 82       	std	Z+4, r1	; 0x04
     b52:	56 96       	adiw	r26, 0x16	; 22
     b54:	1d 92       	st	X+, r1
     b56:	1d 92       	st	X+, r1
     b58:	1d 92       	st	X+, r1
     b5a:	1c 92       	st	X, r1
     b5c:	59 97       	sbiw	r26, 0x19	; 25
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	db c0       	rjmp	.+438    	; 0xd18 <__stack+0x4b9>
     b62:	8b e0       	ldi	r24, 0x0B	; 11
     b64:	d9 c0       	rjmp	.+434    	; 0xd18 <__stack+0x4b9>
     b66:	8c e0       	ldi	r24, 0x0C	; 12
     b68:	d7 c0       	rjmp	.+430    	; 0xd18 <__stack+0x4b9>
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	d5 c0       	rjmp	.+426    	; 0xd18 <__stack+0x4b9>
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	d3 c0       	rjmp	.+422    	; 0xd18 <__stack+0x4b9>
     b72:	83 e0       	ldi	r24, 0x03	; 3
     b74:	d1 c0       	rjmp	.+418    	; 0xd18 <__stack+0x4b9>
     b76:	8a e0       	ldi	r24, 0x0A	; 10
     b78:	cf c0       	rjmp	.+414    	; 0xd18 <__stack+0x4b9>
     b7a:	8d e0       	ldi	r24, 0x0D	; 13
     b7c:	cd c0       	rjmp	.+410    	; 0xd18 <__stack+0x4b9>
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	cb c0       	rjmp	.+406    	; 0xd18 <__stack+0x4b9>
     b82:	8d e0       	ldi	r24, 0x0D	; 13
     b84:	c9 c0       	rjmp	.+402    	; 0xd18 <__stack+0x4b9>
     b86:	8d e0       	ldi	r24, 0x0D	; 13
     b88:	c7 c0       	rjmp	.+398    	; 0xd18 <__stack+0x4b9>
     b8a:	8d e0       	ldi	r24, 0x0D	; 13
     b8c:	c5 c0       	rjmp	.+394    	; 0xd18 <__stack+0x4b9>
     b8e:	8d e0       	ldi	r24, 0x0D	; 13
     b90:	c3 c0       	rjmp	.+390    	; 0xd18 <__stack+0x4b9>
     b92:	8d e0       	ldi	r24, 0x0D	; 13
     b94:	c1 c0       	rjmp	.+386    	; 0xd18 <__stack+0x4b9>
     b96:	8d e0       	ldi	r24, 0x0D	; 13
     b98:	bf c0       	rjmp	.+382    	; 0xd18 <__stack+0x4b9>
     b9a:	8d e0       	ldi	r24, 0x0D	; 13
     b9c:	bd c0       	rjmp	.+378    	; 0xd18 <__stack+0x4b9>
     b9e:	8d e0       	ldi	r24, 0x0D	; 13
     ba0:	bb c0       	rjmp	.+374    	; 0xd18 <__stack+0x4b9>
     ba2:	8d e0       	ldi	r24, 0x0D	; 13
     ba4:	b9 c0       	rjmp	.+370    	; 0xd18 <__stack+0x4b9>
     ba6:	8d e0       	ldi	r24, 0x0D	; 13
     ba8:	b7 c0       	rjmp	.+366    	; 0xd18 <__stack+0x4b9>
     baa:	8d e0       	ldi	r24, 0x0D	; 13
     bac:	b5 c0       	rjmp	.+362    	; 0xd18 <__stack+0x4b9>
     bae:	8d e0       	ldi	r24, 0x0D	; 13
     bb0:	b3 c0       	rjmp	.+358    	; 0xd18 <__stack+0x4b9>
     bb2:	8d e0       	ldi	r24, 0x0D	; 13
     bb4:	b1 c0       	rjmp	.+354    	; 0xd18 <__stack+0x4b9>
     bb6:	49 01       	movw	r8, r18
     bb8:	5a 01       	movw	r10, r20
     bba:	b2 e0       	ldi	r27, 0x02	; 2
     bbc:	8b 0e       	add	r8, r27
     bbe:	91 1c       	adc	r9, r1
     bc0:	a1 1c       	adc	r10, r1
     bc2:	b1 1c       	adc	r11, r1
     bc4:	ed 85       	ldd	r30, Y+13	; 0x0d
     bc6:	fe 85       	ldd	r31, Y+14	; 0x0e
     bc8:	82 8e       	std	Z+26, r8	; 0x1a
     bca:	93 8e       	std	Z+27, r9	; 0x1b
     bcc:	a4 8e       	std	Z+28, r10	; 0x1c
     bce:	b5 8e       	std	Z+29, r11	; 0x1d
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	9a 81       	ldd	r25, Y+2	; 0x02
     bd4:	ab 81       	ldd	r26, Y+3	; 0x03
     bd6:	bc 81       	ldd	r27, Y+4	; 0x04
     bd8:	8c 0d       	add	r24, r12
     bda:	9d 1d       	adc	r25, r13
     bdc:	ae 1d       	adc	r26, r14
     bde:	bf 1d       	adc	r27, r15
     be0:	82 a7       	std	Z+42, r24	; 0x2a
     be2:	93 a7       	std	Z+43, r25	; 0x2b
     be4:	a4 a7       	std	Z+44, r26	; 0x2c
     be6:	b5 a7       	std	Z+45, r27	; 0x2d
     be8:	8d 81       	ldd	r24, Y+5	; 0x05
     bea:	9e 81       	ldd	r25, Y+6	; 0x06
     bec:	af 81       	ldd	r26, Y+7	; 0x07
     bee:	b8 85       	ldd	r27, Y+8	; 0x08
     bf0:	8c 0d       	add	r24, r12
     bf2:	9d 1d       	adc	r25, r13
     bf4:	ae 1d       	adc	r26, r14
     bf6:	bf 1d       	adc	r27, r15
     bf8:	82 a3       	std	Z+34, r24	; 0x22
     bfa:	93 a3       	std	Z+35, r25	; 0x23
     bfc:	a4 a3       	std	Z+36, r26	; 0x24
     bfe:	b5 a3       	std	Z+37, r27	; 0x25
     c00:	23 28       	or	r2, r3
     c02:	99 f6       	brne	.-90     	; 0xbaa <__stack+0x34b>
     c04:	f5 ce       	rjmp	.-534    	; 0x9f0 <__stack+0x191>
     c06:	4f ef       	ldi	r20, 0xFF	; 255
     c08:	5f ef       	ldi	r21, 0xFF	; 255
     c0a:	ba 01       	movw	r22, r20
     c0c:	ad 85       	ldd	r26, Y+13	; 0x0d
     c0e:	be 85       	ldd	r27, Y+14	; 0x0e
     c10:	1e 96       	adiw	r26, 0x0e	; 14
     c12:	4d 93       	st	X+, r20
     c14:	5d 93       	st	X+, r21
     c16:	6d 93       	st	X+, r22
     c18:	7c 93       	st	X, r23
     c1a:	51 97       	sbiw	r26, 0x11	; 17
     c1c:	1a 96       	adiw	r26, 0x0a	; 10
     c1e:	1d 92       	st	X+, r1
     c20:	1d 92       	st	X+, r1
     c22:	1d 92       	st	X+, r1
     c24:	1c 92       	st	X, r1
     c26:	1d 97       	sbiw	r26, 0x0d	; 13
     c28:	7e cf       	rjmp	.-260    	; 0xb26 <__stack+0x2c7>
     c2a:	bf ef       	ldi	r27, 0xFF	; 255
     c2c:	8b 0e       	add	r8, r27
     c2e:	b1 e0       	ldi	r27, 0x01	; 1
     c30:	9b 1e       	adc	r9, r27
     c32:	a1 1c       	adc	r10, r1
     c34:	b1 1c       	adc	r11, r1
     c36:	07 2e       	mov	r0, r23
     c38:	79 e0       	ldi	r23, 0x09	; 9
     c3a:	b6 94       	lsr	r11
     c3c:	a7 94       	ror	r10
     c3e:	97 94       	ror	r9
     c40:	87 94       	ror	r8
     c42:	7a 95       	dec	r23
     c44:	d1 f7       	brne	.-12     	; 0xc3a <__stack+0x3db>
     c46:	70 2d       	mov	r23, r0
     c48:	48 14       	cp	r4, r8
     c4a:	59 04       	cpc	r5, r9
     c4c:	6a 04       	cpc	r6, r10
     c4e:	7b 04       	cpc	r7, r11
     c50:	08 f4       	brcc	.+2      	; 0xc54 <__stack+0x3f5>
     c52:	ad cf       	rjmp	.-166    	; 0xbae <__stack+0x34f>
     c54:	d8 cf       	rjmp	.-80     	; 0xc06 <__stack+0x3a7>
     c56:	8f ef       	ldi	r24, 0xFF	; 255
     c58:	9f ef       	ldi	r25, 0xFF	; 255
     c5a:	dc 01       	movw	r26, r24
     c5c:	ed 85       	ldd	r30, Y+13	; 0x0d
     c5e:	fe 85       	ldd	r31, Y+14	; 0x0e
     c60:	86 87       	std	Z+14, r24	; 0x0e
     c62:	97 87       	std	Z+15, r25	; 0x0f
     c64:	a0 8b       	std	Z+16, r26	; 0x10
     c66:	b1 8b       	std	Z+17, r27	; 0x11
     c68:	df 01       	movw	r26, r30
     c6a:	12 86       	std	Z+10, r1	; 0x0a
     c6c:	13 86       	std	Z+11, r1	; 0x0b
     c6e:	14 86       	std	Z+12, r1	; 0x0c
     c70:	15 86       	std	Z+13, r1	; 0x0d
     c72:	15 82       	std	Z+5, r1	; 0x05
     c74:	ee 59       	subi	r30, 0x9E	; 158
     c76:	ff 4f       	sbci	r31, 0xFF	; 255
     c78:	80 81       	ld	r24, Z
     c7a:	91 81       	ldd	r25, Z+1	; 0x01
     c7c:	a7 01       	movw	r20, r14
     c7e:	96 01       	movw	r18, r12
     c80:	28 0f       	add	r18, r24
     c82:	39 1f       	adc	r19, r25
     c84:	41 1d       	adc	r20, r1
     c86:	51 1d       	adc	r21, r1
     c88:	fd 01       	movw	r30, r26
     c8a:	22 8b       	std	Z+18, r18	; 0x12
     c8c:	33 8b       	std	Z+19, r19	; 0x13
     c8e:	44 8b       	std	Z+20, r20	; 0x14
     c90:	55 8b       	std	Z+21, r21	; 0x15
     c92:	01 e0       	ldi	r16, 0x01	; 1
     c94:	bd 01       	movw	r22, r26
     c96:	6e 5c       	subi	r22, 0xCE	; 206
     c98:	7f 4f       	sbci	r23, 0xFF	; 255
     c9a:	81 81       	ldd	r24, Z+1	; 0x01
     c9c:	0e 94 40 2b 	call	0x5680	; 0x5680 <disk_read>
     ca0:	88 23       	and	r24, r24
     ca2:	09 f4       	brne	.+2      	; 0xca6 <__stack+0x447>
     ca4:	fe ce       	rjmp	.-516    	; 0xaa2 <__stack+0x243>
     ca6:	f3 e0       	ldi	r31, 0x03	; 3
     ca8:	3e cf       	rjmp	.-388    	; 0xb26 <__stack+0x2c7>
     caa:	49 01       	movw	r8, r18
     cac:	5a 01       	movw	r10, r20
     cae:	62 e0       	ldi	r22, 0x02	; 2
     cb0:	86 0e       	add	r8, r22
     cb2:	91 1c       	adc	r9, r1
     cb4:	a1 1c       	adc	r10, r1
     cb6:	b1 1c       	adc	r11, r1
     cb8:	ad 85       	ldd	r26, Y+13	; 0x0d
     cba:	be 85       	ldd	r27, Y+14	; 0x0e
     cbc:	5a 96       	adiw	r26, 0x1a	; 26
     cbe:	8d 92       	st	X+, r8
     cc0:	9d 92       	st	X+, r9
     cc2:	ad 92       	st	X+, r10
     cc4:	bc 92       	st	X, r11
     cc6:	5d 97       	sbiw	r26, 0x1d	; 29
     cc8:	49 81       	ldd	r20, Y+1	; 0x01
     cca:	5a 81       	ldd	r21, Y+2	; 0x02
     ccc:	6b 81       	ldd	r22, Y+3	; 0x03
     cce:	7c 81       	ldd	r23, Y+4	; 0x04
     cd0:	4c 0d       	add	r20, r12
     cd2:	5d 1d       	adc	r21, r13
     cd4:	6e 1d       	adc	r22, r14
     cd6:	7f 1d       	adc	r23, r15
     cd8:	9a 96       	adiw	r26, 0x2a	; 42
     cda:	4d 93       	st	X+, r20
     cdc:	5d 93       	st	X+, r21
     cde:	6d 93       	st	X+, r22
     ce0:	7c 93       	st	X, r23
     ce2:	9d 97       	sbiw	r26, 0x2d	; 45
     ce4:	2d 81       	ldd	r18, Y+5	; 0x05
     ce6:	3e 81       	ldd	r19, Y+6	; 0x06
     ce8:	4f 81       	ldd	r20, Y+7	; 0x07
     cea:	58 85       	ldd	r21, Y+8	; 0x08
     cec:	c2 0e       	add	r12, r18
     cee:	d3 1e       	adc	r13, r19
     cf0:	e4 1e       	adc	r14, r20
     cf2:	f5 1e       	adc	r15, r21
     cf4:	92 96       	adiw	r26, 0x22	; 34
     cf6:	cd 92       	st	X+, r12
     cf8:	dd 92       	st	X+, r13
     cfa:	ed 92       	st	X+, r14
     cfc:	fc 92       	st	X, r15
     cfe:	95 97       	sbiw	r26, 0x25	; 37
     d00:	23 28       	or	r2, r3
     d02:	09 f4       	brne	.+2      	; 0xd06 <__stack+0x4a7>
     d04:	56 cf       	rjmp	.-340    	; 0xbb2 <__stack+0x353>
     d06:	a0 ce       	rjmp	.-704    	; 0xa48 <__stack+0x1e9>
     d08:	f2 e0       	ldi	r31, 0x02	; 2
     d0a:	86 3f       	cpi	r24, 0xF6	; 246
     d0c:	9f 4f       	sbci	r25, 0xFF	; 255
     d0e:	a1 05       	cpc	r26, r1
     d10:	b1 05       	cpc	r27, r1
     d12:	08 f0       	brcs	.+2      	; 0xd16 <__stack+0x4b7>
     d14:	50 cf       	rjmp	.-352    	; 0xbb6 <__stack+0x357>
     d16:	c9 cf       	rjmp	.-110    	; 0xcaa <__stack+0x44b>
     d18:	2e 96       	adiw	r28, 0x0e	; 14
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	1f 91       	pop	r17
     d2a:	0f 91       	pop	r16
     d2c:	ff 90       	pop	r15
     d2e:	ef 90       	pop	r14
     d30:	df 90       	pop	r13
     d32:	cf 90       	pop	r12
     d34:	bf 90       	pop	r11
     d36:	af 90       	pop	r10
     d38:	9f 90       	pop	r9
     d3a:	8f 90       	pop	r8
     d3c:	7f 90       	pop	r7
     d3e:	6f 90       	pop	r6
     d40:	5f 90       	pop	r5
     d42:	4f 90       	pop	r4
     d44:	3f 90       	pop	r3
     d46:	2f 90       	pop	r2
     d48:	08 95       	ret

00000d4a <sync>:
     d4a:	0f 93       	push	r16
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	ec 01       	movw	r28, r24
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	50 e0       	ldi	r21, 0x00	; 0
     d56:	ba 01       	movw	r22, r20
     d58:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <move_window>
     d5c:	98 2f       	mov	r25, r24
     d5e:	81 11       	cpse	r24, r1
     d60:	54 c0       	rjmp	.+168    	; 0xe0a <sync+0xc0>
     d62:	88 81       	ld	r24, Y
     d64:	83 30       	cpi	r24, 0x03	; 3
     d66:	09 f0       	breq	.+2      	; 0xd6a <sync+0x20>
     d68:	46 c0       	rjmp	.+140    	; 0xdf6 <sync+0xac>
     d6a:	8d 81       	ldd	r24, Y+5	; 0x05
     d6c:	88 23       	and	r24, r24
     d6e:	09 f4       	brne	.+2      	; 0xd72 <sync+0x28>
     d70:	42 c0       	rjmp	.+132    	; 0xdf6 <sync+0xac>
     d72:	1e a6       	std	Y+46, r1	; 0x2e
     d74:	1f a6       	std	Y+47, r1	; 0x2f
     d76:	18 aa       	std	Y+48, r1	; 0x30
     d78:	19 aa       	std	Y+49, r1	; 0x31
     d7a:	be 01       	movw	r22, r28
     d7c:	6e 5c       	subi	r22, 0xCE	; 206
     d7e:	7f 4f       	sbci	r23, 0xFF	; 255
     d80:	fb 01       	movw	r30, r22
     d82:	ce 01       	movw	r24, r28
     d84:	8e 5c       	subi	r24, 0xCE	; 206
     d86:	9d 4f       	sbci	r25, 0xFD	; 253
     d88:	11 92       	st	Z+, r1
     d8a:	e8 17       	cp	r30, r24
     d8c:	f9 07       	cpc	r31, r25
     d8e:	e1 f7       	brne	.-8      	; 0xd88 <sync+0x3e>
     d90:	85 e5       	ldi	r24, 0x55	; 85
     d92:	9a ea       	ldi	r25, 0xAA	; 170
     d94:	fe 01       	movw	r30, r28
     d96:	e0 5d       	subi	r30, 0xD0	; 208
     d98:	fd 4f       	sbci	r31, 0xFD	; 253
     d9a:	91 83       	std	Z+1, r25	; 0x01
     d9c:	80 83       	st	Z, r24
     d9e:	82 e5       	ldi	r24, 0x52	; 82
     da0:	92 e5       	ldi	r25, 0x52	; 82
     da2:	a1 e6       	ldi	r26, 0x61	; 97
     da4:	b1 e4       	ldi	r27, 0x41	; 65
     da6:	8a ab       	std	Y+50, r24	; 0x32
     da8:	9b ab       	std	Y+51, r25	; 0x33
     daa:	ac ab       	std	Y+52, r26	; 0x34
     dac:	bd ab       	std	Y+53, r27	; 0x35
     dae:	82 e7       	ldi	r24, 0x72	; 114
     db0:	92 e7       	ldi	r25, 0x72	; 114
     db2:	a1 e4       	ldi	r26, 0x41	; 65
     db4:	b1 e6       	ldi	r27, 0x61	; 97
     db6:	7a 97       	sbiw	r30, 0x1a	; 26
     db8:	80 83       	st	Z, r24
     dba:	91 83       	std	Z+1, r25	; 0x01
     dbc:	a2 83       	std	Z+2, r26	; 0x02
     dbe:	b3 83       	std	Z+3, r27	; 0x03
     dc0:	8e 85       	ldd	r24, Y+14	; 0x0e
     dc2:	9f 85       	ldd	r25, Y+15	; 0x0f
     dc4:	a8 89       	ldd	r26, Y+16	; 0x10
     dc6:	b9 89       	ldd	r27, Y+17	; 0x11
     dc8:	34 96       	adiw	r30, 0x04	; 4
     dca:	80 83       	st	Z, r24
     dcc:	91 83       	std	Z+1, r25	; 0x01
     dce:	a2 83       	std	Z+2, r26	; 0x02
     dd0:	b3 83       	std	Z+3, r27	; 0x03
     dd2:	8a 85       	ldd	r24, Y+10	; 0x0a
     dd4:	9b 85       	ldd	r25, Y+11	; 0x0b
     dd6:	ac 85       	ldd	r26, Y+12	; 0x0c
     dd8:	bd 85       	ldd	r27, Y+13	; 0x0d
     dda:	34 96       	adiw	r30, 0x04	; 4
     ddc:	80 83       	st	Z, r24
     dde:	91 83       	std	Z+1, r25	; 0x01
     de0:	a2 83       	std	Z+2, r26	; 0x02
     de2:	b3 83       	std	Z+3, r27	; 0x03
     de4:	2a 89       	ldd	r18, Y+18	; 0x12
     de6:	3b 89       	ldd	r19, Y+19	; 0x13
     de8:	4c 89       	ldd	r20, Y+20	; 0x14
     dea:	5d 89       	ldd	r21, Y+21	; 0x15
     dec:	01 e0       	ldi	r16, 0x01	; 1
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	0e 94 93 2b 	call	0x5726	; 0x5726 <disk_write>
     df4:	1d 82       	std	Y+5, r1	; 0x05
     df6:	40 e0       	ldi	r20, 0x00	; 0
     df8:	50 e0       	ldi	r21, 0x00	; 0
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <disk_ioctl>
     e02:	91 e0       	ldi	r25, 0x01	; 1
     e04:	81 11       	cpse	r24, r1
     e06:	01 c0       	rjmp	.+2      	; 0xe0a <sync+0xc0>
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	89 2f       	mov	r24, r25
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	0f 91       	pop	r16
     e12:	08 95       	ret

00000e14 <clust2sect>:
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	fc 01       	movw	r30, r24
     e1a:	9a 01       	movw	r18, r20
     e1c:	ab 01       	movw	r20, r22
     e1e:	22 50       	subi	r18, 0x02	; 2
     e20:	31 09       	sbc	r19, r1
     e22:	41 09       	sbc	r20, r1
     e24:	51 09       	sbc	r21, r1
     e26:	82 8d       	ldd	r24, Z+26	; 0x1a
     e28:	93 8d       	ldd	r25, Z+27	; 0x1b
     e2a:	a4 8d       	ldd	r26, Z+28	; 0x1c
     e2c:	b5 8d       	ldd	r27, Z+29	; 0x1d
     e2e:	02 97       	sbiw	r24, 0x02	; 2
     e30:	a1 09       	sbc	r26, r1
     e32:	b1 09       	sbc	r27, r1
     e34:	28 17       	cp	r18, r24
     e36:	39 07       	cpc	r19, r25
     e38:	4a 07       	cpc	r20, r26
     e3a:	5b 07       	cpc	r21, r27
     e3c:	68 f4       	brcc	.+26     	; 0xe58 <clust2sect+0x44>
     e3e:	a2 81       	ldd	r26, Z+2	; 0x02
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <__muluhisi3>
     e46:	02 a5       	ldd	r16, Z+42	; 0x2a
     e48:	13 a5       	ldd	r17, Z+43	; 0x2b
     e4a:	24 a5       	ldd	r18, Z+44	; 0x2c
     e4c:	35 a5       	ldd	r19, Z+45	; 0x2d
     e4e:	60 0f       	add	r22, r16
     e50:	71 1f       	adc	r23, r17
     e52:	82 1f       	adc	r24, r18
     e54:	93 1f       	adc	r25, r19
     e56:	03 c0       	rjmp	.+6      	; 0xe5e <clust2sect+0x4a>
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	cb 01       	movw	r24, r22
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	08 95       	ret

00000e64 <get_fat>:
     e64:	af 92       	push	r10
     e66:	bf 92       	push	r11
     e68:	cf 92       	push	r12
     e6a:	df 92       	push	r13
     e6c:	ef 92       	push	r14
     e6e:	ff 92       	push	r15
     e70:	1f 93       	push	r17
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	42 30       	cpi	r20, 0x02	; 2
     e78:	51 05       	cpc	r21, r1
     e7a:	61 05       	cpc	r22, r1
     e7c:	71 05       	cpc	r23, r1
     e7e:	08 f4       	brcc	.+2      	; 0xe82 <get_fat+0x1e>
     e80:	ad c0       	rjmp	.+346    	; 0xfdc <get_fat+0x178>
     e82:	fc 01       	movw	r30, r24
     e84:	c2 8c       	ldd	r12, Z+26	; 0x1a
     e86:	d3 8c       	ldd	r13, Z+27	; 0x1b
     e88:	e4 8c       	ldd	r14, Z+28	; 0x1c
     e8a:	f5 8c       	ldd	r15, Z+29	; 0x1d
     e8c:	4c 15       	cp	r20, r12
     e8e:	5d 05       	cpc	r21, r13
     e90:	6e 05       	cpc	r22, r14
     e92:	7f 05       	cpc	r23, r15
     e94:	08 f0       	brcs	.+2      	; 0xe98 <get_fat+0x34>
     e96:	a7 c0       	rjmp	.+334    	; 0xfe6 <get_fat+0x182>
     e98:	6a 01       	movw	r12, r20
     e9a:	7b 01       	movw	r14, r22
     e9c:	ec 01       	movw	r28, r24
     e9e:	80 81       	ld	r24, Z
     ea0:	82 30       	cpi	r24, 0x02	; 2
     ea2:	09 f4       	brne	.+2      	; 0xea6 <get_fat+0x42>
     ea4:	4c c0       	rjmp	.+152    	; 0xf3e <get_fat+0xda>
     ea6:	83 30       	cpi	r24, 0x03	; 3
     ea8:	09 f4       	brne	.+2      	; 0xeac <get_fat+0x48>
     eaa:	6b c0       	rjmp	.+214    	; 0xf82 <get_fat+0x11e>
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	09 f0       	breq	.+2      	; 0xeb2 <get_fat+0x4e>
     eb0:	9f c0       	rjmp	.+318    	; 0xff0 <get_fat+0x18c>
     eb2:	5a 01       	movw	r10, r20
     eb4:	b6 94       	lsr	r11
     eb6:	a7 94       	ror	r10
     eb8:	a4 0e       	add	r10, r20
     eba:	b5 1e       	adc	r11, r21
     ebc:	c5 01       	movw	r24, r10
     ebe:	89 2f       	mov	r24, r25
     ec0:	99 27       	eor	r25, r25
     ec2:	86 95       	lsr	r24
     ec4:	42 a1       	ldd	r20, Z+34	; 0x22
     ec6:	53 a1       	ldd	r21, Z+35	; 0x23
     ec8:	64 a1       	ldd	r22, Z+36	; 0x24
     eca:	75 a1       	ldd	r23, Z+37	; 0x25
     ecc:	48 0f       	add	r20, r24
     ece:	59 1f       	adc	r21, r25
     ed0:	61 1d       	adc	r22, r1
     ed2:	71 1d       	adc	r23, r1
     ed4:	cf 01       	movw	r24, r30
     ed6:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <move_window>
     eda:	81 11       	cpse	r24, r1
     edc:	8d c0       	rjmp	.+282    	; 0xff8 <get_fat+0x194>
     ede:	f5 01       	movw	r30, r10
     ee0:	f1 70       	andi	r31, 0x01	; 1
     ee2:	ec 0f       	add	r30, r28
     ee4:	fd 1f       	adc	r31, r29
     ee6:	12 a9       	ldd	r17, Z+50	; 0x32
     ee8:	ff ef       	ldi	r31, 0xFF	; 255
     eea:	af 1a       	sub	r10, r31
     eec:	bf 0a       	sbc	r11, r31
     eee:	c5 01       	movw	r24, r10
     ef0:	89 2f       	mov	r24, r25
     ef2:	99 27       	eor	r25, r25
     ef4:	86 95       	lsr	r24
     ef6:	4a a1       	ldd	r20, Y+34	; 0x22
     ef8:	5b a1       	ldd	r21, Y+35	; 0x23
     efa:	6c a1       	ldd	r22, Y+36	; 0x24
     efc:	7d a1       	ldd	r23, Y+37	; 0x25
     efe:	48 0f       	add	r20, r24
     f00:	59 1f       	adc	r21, r25
     f02:	61 1d       	adc	r22, r1
     f04:	71 1d       	adc	r23, r1
     f06:	ce 01       	movw	r24, r28
     f08:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <move_window>
     f0c:	81 11       	cpse	r24, r1
     f0e:	78 c0       	rjmp	.+240    	; 0x1000 <get_fat+0x19c>
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	b8 22       	and	r11, r24
     f14:	ca 0d       	add	r28, r10
     f16:	db 1d       	adc	r29, r11
     f18:	8a a9       	ldd	r24, Y+50	; 0x32
     f1a:	61 2f       	mov	r22, r17
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	78 2b       	or	r23, r24
     f20:	c0 fe       	sbrs	r12, 0
     f22:	09 c0       	rjmp	.+18     	; 0xf36 <get_fat+0xd2>
     f24:	72 95       	swap	r23
     f26:	62 95       	swap	r22
     f28:	6f 70       	andi	r22, 0x0F	; 15
     f2a:	67 27       	eor	r22, r23
     f2c:	7f 70       	andi	r23, 0x0F	; 15
     f2e:	67 27       	eor	r22, r23
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	70 c0       	rjmp	.+224    	; 0x1016 <get_fat+0x1b2>
     f36:	7f 70       	andi	r23, 0x0F	; 15
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	6c c0       	rjmp	.+216    	; 0x1016 <get_fat+0x1b2>
     f3e:	45 2f       	mov	r20, r21
     f40:	56 2f       	mov	r21, r22
     f42:	67 2f       	mov	r22, r23
     f44:	77 27       	eor	r23, r23
     f46:	82 a1       	ldd	r24, Z+34	; 0x22
     f48:	93 a1       	ldd	r25, Z+35	; 0x23
     f4a:	a4 a1       	ldd	r26, Z+36	; 0x24
     f4c:	b5 a1       	ldd	r27, Z+37	; 0x25
     f4e:	48 0f       	add	r20, r24
     f50:	59 1f       	adc	r21, r25
     f52:	6a 1f       	adc	r22, r26
     f54:	7b 1f       	adc	r23, r27
     f56:	cf 01       	movw	r24, r30
     f58:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <move_window>
     f5c:	81 11       	cpse	r24, r1
     f5e:	54 c0       	rjmp	.+168    	; 0x1008 <get_fat+0x1a4>
     f60:	b7 01       	movw	r22, r14
     f62:	a6 01       	movw	r20, r12
     f64:	44 0f       	add	r20, r20
     f66:	55 1f       	adc	r21, r21
     f68:	66 1f       	adc	r22, r22
     f6a:	77 1f       	adc	r23, r23
     f6c:	4e 7f       	andi	r20, 0xFE	; 254
     f6e:	51 70       	andi	r21, 0x01	; 1
     f70:	66 27       	eor	r22, r22
     f72:	77 27       	eor	r23, r23
     f74:	c4 0f       	add	r28, r20
     f76:	d5 1f       	adc	r29, r21
     f78:	6a a9       	ldd	r22, Y+50	; 0x32
     f7a:	7b a9       	ldd	r23, Y+51	; 0x33
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	4a c0       	rjmp	.+148    	; 0x1016 <get_fat+0x1b2>
     f82:	82 a1       	ldd	r24, Z+34	; 0x22
     f84:	93 a1       	ldd	r25, Z+35	; 0x23
     f86:	a4 a1       	ldd	r26, Z+36	; 0x24
     f88:	b5 a1       	ldd	r27, Z+37	; 0x25
     f8a:	68 94       	set
     f8c:	16 f8       	bld	r1, 6
     f8e:	76 95       	lsr	r23
     f90:	67 95       	ror	r22
     f92:	57 95       	ror	r21
     f94:	47 95       	ror	r20
     f96:	16 94       	lsr	r1
     f98:	d1 f7       	brne	.-12     	; 0xf8e <get_fat+0x12a>
     f9a:	48 0f       	add	r20, r24
     f9c:	59 1f       	adc	r21, r25
     f9e:	6a 1f       	adc	r22, r26
     fa0:	7b 1f       	adc	r23, r27
     fa2:	cf 01       	movw	r24, r30
     fa4:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <move_window>
     fa8:	81 11       	cpse	r24, r1
     faa:	32 c0       	rjmp	.+100    	; 0x1010 <get_fat+0x1ac>
     fac:	b7 01       	movw	r22, r14
     fae:	a6 01       	movw	r20, r12
     fb0:	44 0f       	add	r20, r20
     fb2:	55 1f       	adc	r21, r21
     fb4:	66 1f       	adc	r22, r22
     fb6:	77 1f       	adc	r23, r23
     fb8:	44 0f       	add	r20, r20
     fba:	55 1f       	adc	r21, r21
     fbc:	66 1f       	adc	r22, r22
     fbe:	77 1f       	adc	r23, r23
     fc0:	4c 7f       	andi	r20, 0xFC	; 252
     fc2:	51 70       	andi	r21, 0x01	; 1
     fc4:	66 27       	eor	r22, r22
     fc6:	77 27       	eor	r23, r23
     fc8:	c4 0f       	add	r28, r20
     fca:	d5 1f       	adc	r29, r21
     fcc:	8a a9       	ldd	r24, Y+50	; 0x32
     fce:	9b a9       	ldd	r25, Y+51	; 0x33
     fd0:	ac a9       	ldd	r26, Y+52	; 0x34
     fd2:	bd a9       	ldd	r27, Y+53	; 0x35
     fd4:	bc 01       	movw	r22, r24
     fd6:	cd 01       	movw	r24, r26
     fd8:	9f 70       	andi	r25, 0x0F	; 15
     fda:	1d c0       	rjmp	.+58     	; 0x1016 <get_fat+0x1b2>
     fdc:	61 e0       	ldi	r22, 0x01	; 1
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	18 c0       	rjmp	.+48     	; 0x1016 <get_fat+0x1b2>
     fe6:	61 e0       	ldi	r22, 0x01	; 1
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	13 c0       	rjmp	.+38     	; 0x1016 <get_fat+0x1b2>
     ff0:	6f ef       	ldi	r22, 0xFF	; 255
     ff2:	7f ef       	ldi	r23, 0xFF	; 255
     ff4:	cb 01       	movw	r24, r22
     ff6:	0f c0       	rjmp	.+30     	; 0x1016 <get_fat+0x1b2>
     ff8:	6f ef       	ldi	r22, 0xFF	; 255
     ffa:	7f ef       	ldi	r23, 0xFF	; 255
     ffc:	cb 01       	movw	r24, r22
     ffe:	0b c0       	rjmp	.+22     	; 0x1016 <get_fat+0x1b2>
    1000:	6f ef       	ldi	r22, 0xFF	; 255
    1002:	7f ef       	ldi	r23, 0xFF	; 255
    1004:	cb 01       	movw	r24, r22
    1006:	07 c0       	rjmp	.+14     	; 0x1016 <get_fat+0x1b2>
    1008:	6f ef       	ldi	r22, 0xFF	; 255
    100a:	7f ef       	ldi	r23, 0xFF	; 255
    100c:	cb 01       	movw	r24, r22
    100e:	03 c0       	rjmp	.+6      	; 0x1016 <get_fat+0x1b2>
    1010:	6f ef       	ldi	r22, 0xFF	; 255
    1012:	7f ef       	ldi	r23, 0xFF	; 255
    1014:	cb 01       	movw	r24, r22
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	1f 91       	pop	r17
    101c:	ff 90       	pop	r15
    101e:	ef 90       	pop	r14
    1020:	df 90       	pop	r13
    1022:	cf 90       	pop	r12
    1024:	bf 90       	pop	r11
    1026:	af 90       	pop	r10
    1028:	08 95       	ret

0000102a <dir_sdi>:
    102a:	ef 92       	push	r14
    102c:	ff 92       	push	r15
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	ec 01       	movw	r28, r24
    1038:	8b 01       	movw	r16, r22
    103a:	7d 83       	std	Y+5, r23	; 0x05
    103c:	6c 83       	std	Y+4, r22	; 0x04
    103e:	4e 81       	ldd	r20, Y+6	; 0x06
    1040:	5f 81       	ldd	r21, Y+7	; 0x07
    1042:	68 85       	ldd	r22, Y+8	; 0x08
    1044:	79 85       	ldd	r23, Y+9	; 0x09
    1046:	41 30       	cpi	r20, 0x01	; 1
    1048:	51 05       	cpc	r21, r1
    104a:	61 05       	cpc	r22, r1
    104c:	71 05       	cpc	r23, r1
    104e:	09 f4       	brne	.+2      	; 0x1052 <dir_sdi+0x28>
    1050:	92 c0       	rjmp	.+292    	; 0x1176 <dir_sdi+0x14c>
    1052:	e8 81       	ld	r30, Y
    1054:	f9 81       	ldd	r31, Y+1	; 0x01
    1056:	82 8d       	ldd	r24, Z+26	; 0x1a
    1058:	93 8d       	ldd	r25, Z+27	; 0x1b
    105a:	a4 8d       	ldd	r26, Z+28	; 0x1c
    105c:	b5 8d       	ldd	r27, Z+29	; 0x1d
    105e:	48 17       	cp	r20, r24
    1060:	59 07       	cpc	r21, r25
    1062:	6a 07       	cpc	r22, r26
    1064:	7b 07       	cpc	r23, r27
    1066:	08 f0       	brcs	.+2      	; 0x106a <dir_sdi+0x40>
    1068:	88 c0       	rjmp	.+272    	; 0x117a <dir_sdi+0x150>
    106a:	41 15       	cp	r20, r1
    106c:	51 05       	cpc	r21, r1
    106e:	61 05       	cpc	r22, r1
    1070:	71 05       	cpc	r23, r1
    1072:	51 f5       	brne	.+84     	; 0x10c8 <dir_sdi+0x9e>
    1074:	80 81       	ld	r24, Z
    1076:	83 30       	cpi	r24, 0x03	; 3
    1078:	49 f4       	brne	.+18     	; 0x108c <dir_sdi+0x62>
    107a:	46 a1       	ldd	r20, Z+38	; 0x26
    107c:	57 a1       	ldd	r21, Z+39	; 0x27
    107e:	60 a5       	ldd	r22, Z+40	; 0x28
    1080:	71 a5       	ldd	r23, Z+41	; 0x29
    1082:	41 15       	cp	r20, r1
    1084:	51 05       	cpc	r21, r1
    1086:	61 05       	cpc	r22, r1
    1088:	71 05       	cpc	r23, r1
    108a:	f1 f4       	brne	.+60     	; 0x10c8 <dir_sdi+0x9e>
    108c:	1a 86       	std	Y+10, r1	; 0x0a
    108e:	1b 86       	std	Y+11, r1	; 0x0b
    1090:	1c 86       	std	Y+12, r1	; 0x0c
    1092:	1d 86       	std	Y+13, r1	; 0x0d
    1094:	80 85       	ldd	r24, Z+8	; 0x08
    1096:	91 85       	ldd	r25, Z+9	; 0x09
    1098:	08 17       	cp	r16, r24
    109a:	19 07       	cpc	r17, r25
    109c:	08 f0       	brcs	.+2      	; 0x10a0 <dir_sdi+0x76>
    109e:	6f c0       	rjmp	.+222    	; 0x117e <dir_sdi+0x154>
    10a0:	86 a1       	ldd	r24, Z+38	; 0x26
    10a2:	97 a1       	ldd	r25, Z+39	; 0x27
    10a4:	a0 a5       	ldd	r26, Z+40	; 0x28
    10a6:	b1 a5       	ldd	r27, Z+41	; 0x29
    10a8:	98 01       	movw	r18, r16
    10aa:	32 95       	swap	r19
    10ac:	22 95       	swap	r18
    10ae:	2f 70       	andi	r18, 0x0F	; 15
    10b0:	23 27       	eor	r18, r19
    10b2:	3f 70       	andi	r19, 0x0F	; 15
    10b4:	23 27       	eor	r18, r19
    10b6:	82 0f       	add	r24, r18
    10b8:	93 1f       	adc	r25, r19
    10ba:	a1 1d       	adc	r26, r1
    10bc:	b1 1d       	adc	r27, r1
    10be:	8e 87       	std	Y+14, r24	; 0x0e
    10c0:	9f 87       	std	Y+15, r25	; 0x0f
    10c2:	a8 8b       	std	Y+16, r26	; 0x10
    10c4:	b9 8b       	std	Y+17, r27	; 0x11
    10c6:	44 c0       	rjmp	.+136    	; 0x1150 <dir_sdi+0x126>
    10c8:	e2 80       	ldd	r14, Z+2	; 0x02
    10ca:	80 e1       	ldi	r24, 0x10	; 16
    10cc:	e8 9e       	mul	r14, r24
    10ce:	70 01       	movw	r14, r0
    10d0:	11 24       	eor	r1, r1
    10d2:	0e 15       	cp	r16, r14
    10d4:	1f 05       	cpc	r17, r15
    10d6:	18 f1       	brcs	.+70     	; 0x111e <dir_sdi+0xf4>
    10d8:	88 81       	ld	r24, Y
    10da:	99 81       	ldd	r25, Y+1	; 0x01
    10dc:	0e 94 32 07 	call	0xe64	; 0xe64 <get_fat>
    10e0:	ab 01       	movw	r20, r22
    10e2:	bc 01       	movw	r22, r24
    10e4:	4f 3f       	cpi	r20, 0xFF	; 255
    10e6:	8f ef       	ldi	r24, 0xFF	; 255
    10e8:	58 07       	cpc	r21, r24
    10ea:	68 07       	cpc	r22, r24
    10ec:	78 07       	cpc	r23, r24
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <dir_sdi+0xc8>
    10f0:	48 c0       	rjmp	.+144    	; 0x1182 <dir_sdi+0x158>
    10f2:	42 30       	cpi	r20, 0x02	; 2
    10f4:	51 05       	cpc	r21, r1
    10f6:	61 05       	cpc	r22, r1
    10f8:	71 05       	cpc	r23, r1
    10fa:	08 f4       	brcc	.+2      	; 0x10fe <dir_sdi+0xd4>
    10fc:	44 c0       	rjmp	.+136    	; 0x1186 <dir_sdi+0x15c>
    10fe:	e8 81       	ld	r30, Y
    1100:	f9 81       	ldd	r31, Y+1	; 0x01
    1102:	82 8d       	ldd	r24, Z+26	; 0x1a
    1104:	93 8d       	ldd	r25, Z+27	; 0x1b
    1106:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1108:	b5 8d       	ldd	r27, Z+29	; 0x1d
    110a:	48 17       	cp	r20, r24
    110c:	59 07       	cpc	r21, r25
    110e:	6a 07       	cpc	r22, r26
    1110:	7b 07       	cpc	r23, r27
    1112:	d8 f5       	brcc	.+118    	; 0x118a <dir_sdi+0x160>
    1114:	0e 19       	sub	r16, r14
    1116:	1f 09       	sbc	r17, r15
    1118:	0e 15       	cp	r16, r14
    111a:	1f 05       	cpc	r17, r15
    111c:	e8 f6       	brcc	.-70     	; 0x10d8 <dir_sdi+0xae>
    111e:	4a 87       	std	Y+10, r20	; 0x0a
    1120:	5b 87       	std	Y+11, r21	; 0x0b
    1122:	6c 87       	std	Y+12, r22	; 0x0c
    1124:	7d 87       	std	Y+13, r23	; 0x0d
    1126:	88 81       	ld	r24, Y
    1128:	99 81       	ldd	r25, Y+1	; 0x01
    112a:	0e 94 0a 07 	call	0xe14	; 0xe14 <clust2sect>
    112e:	98 01       	movw	r18, r16
    1130:	32 95       	swap	r19
    1132:	22 95       	swap	r18
    1134:	2f 70       	andi	r18, 0x0F	; 15
    1136:	23 27       	eor	r18, r19
    1138:	3f 70       	andi	r19, 0x0F	; 15
    113a:	23 27       	eor	r18, r19
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	82 0f       	add	r24, r18
    1142:	93 1f       	adc	r25, r19
    1144:	a1 1d       	adc	r26, r1
    1146:	b1 1d       	adc	r27, r1
    1148:	8e 87       	std	Y+14, r24	; 0x0e
    114a:	9f 87       	std	Y+15, r25	; 0x0f
    114c:	a8 8b       	std	Y+16, r26	; 0x10
    114e:	b9 8b       	std	Y+17, r27	; 0x11
    1150:	88 81       	ld	r24, Y
    1152:	99 81       	ldd	r25, Y+1	; 0x01
    1154:	c2 96       	adiw	r24, 0x32	; 50
    1156:	0f 70       	andi	r16, 0x0F	; 15
    1158:	11 27       	eor	r17, r17
    115a:	00 0f       	add	r16, r16
    115c:	11 1f       	adc	r17, r17
    115e:	02 95       	swap	r16
    1160:	12 95       	swap	r17
    1162:	10 7f       	andi	r17, 0xF0	; 240
    1164:	10 27       	eor	r17, r16
    1166:	00 7f       	andi	r16, 0xF0	; 240
    1168:	10 27       	eor	r17, r16
    116a:	08 0f       	add	r16, r24
    116c:	19 1f       	adc	r17, r25
    116e:	1b 8b       	std	Y+19, r17	; 0x13
    1170:	0a 8b       	std	Y+18, r16	; 0x12
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	0b c0       	rjmp	.+22     	; 0x118c <dir_sdi+0x162>
    1176:	82 e0       	ldi	r24, 0x02	; 2
    1178:	09 c0       	rjmp	.+18     	; 0x118c <dir_sdi+0x162>
    117a:	82 e0       	ldi	r24, 0x02	; 2
    117c:	07 c0       	rjmp	.+14     	; 0x118c <dir_sdi+0x162>
    117e:	82 e0       	ldi	r24, 0x02	; 2
    1180:	05 c0       	rjmp	.+10     	; 0x118c <dir_sdi+0x162>
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	03 c0       	rjmp	.+6      	; 0x118c <dir_sdi+0x162>
    1186:	82 e0       	ldi	r24, 0x02	; 2
    1188:	01 c0       	rjmp	.+2      	; 0x118c <dir_sdi+0x162>
    118a:	82 e0       	ldi	r24, 0x02	; 2
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	1f 91       	pop	r17
    1192:	0f 91       	pop	r16
    1194:	ff 90       	pop	r15
    1196:	ef 90       	pop	r14
    1198:	08 95       	ret

0000119a <put_fat>:
    119a:	6f 92       	push	r6
    119c:	7f 92       	push	r7
    119e:	8f 92       	push	r8
    11a0:	9f 92       	push	r9
    11a2:	af 92       	push	r10
    11a4:	bf 92       	push	r11
    11a6:	cf 92       	push	r12
    11a8:	df 92       	push	r13
    11aa:	ef 92       	push	r14
    11ac:	ff 92       	push	r15
    11ae:	0f 93       	push	r16
    11b0:	1f 93       	push	r17
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	42 30       	cpi	r20, 0x02	; 2
    11b8:	51 05       	cpc	r21, r1
    11ba:	61 05       	cpc	r22, r1
    11bc:	71 05       	cpc	r23, r1
    11be:	08 f4       	brcc	.+2      	; 0x11c2 <put_fat+0x28>
    11c0:	e1 c0       	rjmp	.+450    	; 0x1384 <put_fat+0x1ea>
    11c2:	fc 01       	movw	r30, r24
    11c4:	c2 8c       	ldd	r12, Z+26	; 0x1a
    11c6:	d3 8c       	ldd	r13, Z+27	; 0x1b
    11c8:	e4 8c       	ldd	r14, Z+28	; 0x1c
    11ca:	f5 8c       	ldd	r15, Z+29	; 0x1d
    11cc:	4c 15       	cp	r20, r12
    11ce:	5d 05       	cpc	r21, r13
    11d0:	6e 05       	cpc	r22, r14
    11d2:	7f 05       	cpc	r23, r15
    11d4:	08 f0       	brcs	.+2      	; 0x11d8 <put_fat+0x3e>
    11d6:	d8 c0       	rjmp	.+432    	; 0x1388 <put_fat+0x1ee>
    11d8:	68 01       	movw	r12, r16
    11da:	79 01       	movw	r14, r18
    11dc:	4a 01       	movw	r8, r20
    11de:	5b 01       	movw	r10, r22
    11e0:	ec 01       	movw	r28, r24
    11e2:	80 81       	ld	r24, Z
    11e4:	82 30       	cpi	r24, 0x02	; 2
    11e6:	09 f4       	brne	.+2      	; 0x11ea <put_fat+0x50>
    11e8:	67 c0       	rjmp	.+206    	; 0x12b8 <put_fat+0x11e>
    11ea:	83 30       	cpi	r24, 0x03	; 3
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <put_fat+0x56>
    11ee:	88 c0       	rjmp	.+272    	; 0x1300 <put_fat+0x166>
    11f0:	81 30       	cpi	r24, 0x01	; 1
    11f2:	09 f0       	breq	.+2      	; 0x11f6 <put_fat+0x5c>
    11f4:	bf c0       	rjmp	.+382    	; 0x1374 <put_fat+0x1da>
    11f6:	8a 01       	movw	r16, r20
    11f8:	16 95       	lsr	r17
    11fa:	07 95       	ror	r16
    11fc:	38 01       	movw	r6, r16
    11fe:	64 0e       	add	r6, r20
    1200:	75 1e       	adc	r7, r21
    1202:	c3 01       	movw	r24, r6
    1204:	89 2f       	mov	r24, r25
    1206:	99 27       	eor	r25, r25
    1208:	86 95       	lsr	r24
    120a:	42 a1       	ldd	r20, Z+34	; 0x22
    120c:	53 a1       	ldd	r21, Z+35	; 0x23
    120e:	64 a1       	ldd	r22, Z+36	; 0x24
    1210:	75 a1       	ldd	r23, Z+37	; 0x25
    1212:	48 0f       	add	r20, r24
    1214:	59 1f       	adc	r21, r25
    1216:	61 1d       	adc	r22, r1
    1218:	71 1d       	adc	r23, r1
    121a:	cf 01       	movw	r24, r30
    121c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <move_window>
    1220:	18 2f       	mov	r17, r24
    1222:	81 11       	cpse	r24, r1
    1224:	ac c0       	rjmp	.+344    	; 0x137e <put_fat+0x1e4>
    1226:	c3 01       	movw	r24, r6
    1228:	91 70       	andi	r25, 0x01	; 1
    122a:	80 fe       	sbrs	r8, 0
    122c:	24 c0       	rjmp	.+72     	; 0x1276 <put_fat+0xdc>
    122e:	fe 01       	movw	r30, r28
    1230:	e8 0f       	add	r30, r24
    1232:	f9 1f       	adc	r31, r25
    1234:	82 a9       	ldd	r24, Z+50	; 0x32
    1236:	28 2f       	mov	r18, r24
    1238:	2f 70       	andi	r18, 0x0F	; 15
    123a:	30 e1       	ldi	r19, 0x10	; 16
    123c:	c3 9e       	mul	r12, r19
    123e:	c0 01       	movw	r24, r0
    1240:	11 24       	eor	r1, r1
    1242:	82 2b       	or	r24, r18
    1244:	82 ab       	std	Z+50, r24	; 0x32
    1246:	53 01       	movw	r10, r6
    1248:	8f ef       	ldi	r24, 0xFF	; 255
    124a:	a8 1a       	sub	r10, r24
    124c:	b8 0a       	sbc	r11, r24
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	8c 83       	std	Y+4, r24	; 0x04
    1252:	c5 01       	movw	r24, r10
    1254:	89 2f       	mov	r24, r25
    1256:	99 27       	eor	r25, r25
    1258:	86 95       	lsr	r24
    125a:	4a a1       	ldd	r20, Y+34	; 0x22
    125c:	5b a1       	ldd	r21, Y+35	; 0x23
    125e:	6c a1       	ldd	r22, Y+36	; 0x24
    1260:	7d a1       	ldd	r23, Y+37	; 0x25
    1262:	48 0f       	add	r20, r24
    1264:	59 1f       	adc	r21, r25
    1266:	61 1d       	adc	r22, r1
    1268:	71 1d       	adc	r23, r1
    126a:	ce 01       	movw	r24, r28
    126c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <move_window>
    1270:	81 11       	cpse	r24, r1
    1272:	82 c0       	rjmp	.+260    	; 0x1378 <put_fat+0x1de>
    1274:	8b c0       	rjmp	.+278    	; 0x138c <put_fat+0x1f2>
    1276:	fe 01       	movw	r30, r28
    1278:	e8 0f       	add	r30, r24
    127a:	f9 1f       	adc	r31, r25
    127c:	c2 aa       	std	Z+50, r12	; 0x32
    127e:	53 01       	movw	r10, r6
    1280:	ef ef       	ldi	r30, 0xFF	; 255
    1282:	ae 1a       	sub	r10, r30
    1284:	be 0a       	sbc	r11, r30
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	8c 83       	std	Y+4, r24	; 0x04
    128a:	c5 01       	movw	r24, r10
    128c:	89 2f       	mov	r24, r25
    128e:	99 27       	eor	r25, r25
    1290:	86 95       	lsr	r24
    1292:	4a a1       	ldd	r20, Y+34	; 0x22
    1294:	5b a1       	ldd	r21, Y+35	; 0x23
    1296:	6c a1       	ldd	r22, Y+36	; 0x24
    1298:	7d a1       	ldd	r23, Y+37	; 0x25
    129a:	48 0f       	add	r20, r24
    129c:	59 1f       	adc	r21, r25
    129e:	61 1d       	adc	r22, r1
    12a0:	71 1d       	adc	r23, r1
    12a2:	ce 01       	movw	r24, r28
    12a4:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <move_window>
    12a8:	81 11       	cpse	r24, r1
    12aa:	68 c0       	rjmp	.+208    	; 0x137c <put_fat+0x1e2>
    12ac:	7a c0       	rjmp	.+244    	; 0x13a2 <put_fat+0x208>
    12ae:	fe 01       	movw	r30, r28
    12b0:	e8 0f       	add	r30, r24
    12b2:	f9 1f       	adc	r31, r25
    12b4:	c2 aa       	std	Z+50, r12	; 0x32
    12b6:	63 c0       	rjmp	.+198    	; 0x137e <put_fat+0x1e4>
    12b8:	45 2f       	mov	r20, r21
    12ba:	56 2f       	mov	r21, r22
    12bc:	67 2f       	mov	r22, r23
    12be:	77 27       	eor	r23, r23
    12c0:	82 a1       	ldd	r24, Z+34	; 0x22
    12c2:	93 a1       	ldd	r25, Z+35	; 0x23
    12c4:	a4 a1       	ldd	r26, Z+36	; 0x24
    12c6:	b5 a1       	ldd	r27, Z+37	; 0x25
    12c8:	48 0f       	add	r20, r24
    12ca:	59 1f       	adc	r21, r25
    12cc:	6a 1f       	adc	r22, r26
    12ce:	7b 1f       	adc	r23, r27
    12d0:	cf 01       	movw	r24, r30
    12d2:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <move_window>
    12d6:	18 2f       	mov	r17, r24
    12d8:	81 11       	cpse	r24, r1
    12da:	51 c0       	rjmp	.+162    	; 0x137e <put_fat+0x1e4>
    12dc:	b5 01       	movw	r22, r10
    12de:	a4 01       	movw	r20, r8
    12e0:	44 0f       	add	r20, r20
    12e2:	55 1f       	adc	r21, r21
    12e4:	66 1f       	adc	r22, r22
    12e6:	77 1f       	adc	r23, r23
    12e8:	4e 7f       	andi	r20, 0xFE	; 254
    12ea:	51 70       	andi	r21, 0x01	; 1
    12ec:	66 27       	eor	r22, r22
    12ee:	77 27       	eor	r23, r23
    12f0:	4e 5c       	subi	r20, 0xCE	; 206
    12f2:	5f 4f       	sbci	r21, 0xFF	; 255
    12f4:	fe 01       	movw	r30, r28
    12f6:	e4 0f       	add	r30, r20
    12f8:	f5 1f       	adc	r31, r21
    12fa:	d1 82       	std	Z+1, r13	; 0x01
    12fc:	c0 82       	st	Z, r12
    12fe:	3f c0       	rjmp	.+126    	; 0x137e <put_fat+0x1e4>
    1300:	82 a1       	ldd	r24, Z+34	; 0x22
    1302:	93 a1       	ldd	r25, Z+35	; 0x23
    1304:	a4 a1       	ldd	r26, Z+36	; 0x24
    1306:	b5 a1       	ldd	r27, Z+37	; 0x25
    1308:	68 94       	set
    130a:	16 f8       	bld	r1, 6
    130c:	76 95       	lsr	r23
    130e:	67 95       	ror	r22
    1310:	57 95       	ror	r21
    1312:	47 95       	ror	r20
    1314:	16 94       	lsr	r1
    1316:	d1 f7       	brne	.-12     	; 0x130c <put_fat+0x172>
    1318:	48 0f       	add	r20, r24
    131a:	59 1f       	adc	r21, r25
    131c:	6a 1f       	adc	r22, r26
    131e:	7b 1f       	adc	r23, r27
    1320:	cf 01       	movw	r24, r30
    1322:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <move_window>
    1326:	18 2f       	mov	r17, r24
    1328:	81 11       	cpse	r24, r1
    132a:	29 c0       	rjmp	.+82     	; 0x137e <put_fat+0x1e4>
    132c:	b5 01       	movw	r22, r10
    132e:	a4 01       	movw	r20, r8
    1330:	44 0f       	add	r20, r20
    1332:	55 1f       	adc	r21, r21
    1334:	66 1f       	adc	r22, r22
    1336:	77 1f       	adc	r23, r23
    1338:	44 0f       	add	r20, r20
    133a:	55 1f       	adc	r21, r21
    133c:	66 1f       	adc	r22, r22
    133e:	77 1f       	adc	r23, r23
    1340:	4c 7f       	andi	r20, 0xFC	; 252
    1342:	51 70       	andi	r21, 0x01	; 1
    1344:	66 27       	eor	r22, r22
    1346:	77 27       	eor	r23, r23
    1348:	4e 5c       	subi	r20, 0xCE	; 206
    134a:	5f 4f       	sbci	r21, 0xFF	; 255
    134c:	fe 01       	movw	r30, r28
    134e:	e4 0f       	add	r30, r20
    1350:	f5 1f       	adc	r31, r21
    1352:	80 81       	ld	r24, Z
    1354:	91 81       	ldd	r25, Z+1	; 0x01
    1356:	a2 81       	ldd	r26, Z+2	; 0x02
    1358:	b3 81       	ldd	r27, Z+3	; 0x03
    135a:	88 27       	eor	r24, r24
    135c:	99 27       	eor	r25, r25
    135e:	aa 27       	eor	r26, r26
    1360:	b0 7f       	andi	r27, 0xF0	; 240
    1362:	c8 2a       	or	r12, r24
    1364:	d9 2a       	or	r13, r25
    1366:	ea 2a       	or	r14, r26
    1368:	fb 2a       	or	r15, r27
    136a:	c0 82       	st	Z, r12
    136c:	d1 82       	std	Z+1, r13	; 0x01
    136e:	e2 82       	std	Z+2, r14	; 0x02
    1370:	f3 82       	std	Z+3, r15	; 0x03
    1372:	05 c0       	rjmp	.+10     	; 0x137e <put_fat+0x1e4>
    1374:	12 e0       	ldi	r17, 0x02	; 2
    1376:	03 c0       	rjmp	.+6      	; 0x137e <put_fat+0x1e4>
    1378:	18 2f       	mov	r17, r24
    137a:	01 c0       	rjmp	.+2      	; 0x137e <put_fat+0x1e4>
    137c:	18 2f       	mov	r17, r24
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	8c 83       	std	Y+4, r24	; 0x04
    1382:	1b c0       	rjmp	.+54     	; 0x13ba <put_fat+0x220>
    1384:	12 e0       	ldi	r17, 0x02	; 2
    1386:	19 c0       	rjmp	.+50     	; 0x13ba <put_fat+0x220>
    1388:	12 e0       	ldi	r17, 0x02	; 2
    138a:	17 c0       	rjmp	.+46     	; 0x13ba <put_fat+0x220>
    138c:	c5 01       	movw	r24, r10
    138e:	91 70       	andi	r25, 0x01	; 1
    1390:	68 94       	set
    1392:	13 f8       	bld	r1, 3
    1394:	f6 94       	lsr	r15
    1396:	e7 94       	ror	r14
    1398:	d7 94       	ror	r13
    139a:	c7 94       	ror	r12
    139c:	16 94       	lsr	r1
    139e:	d1 f7       	brne	.-12     	; 0x1394 <put_fat+0x1fa>
    13a0:	86 cf       	rjmp	.-244    	; 0x12ae <put_fat+0x114>
    13a2:	c5 01       	movw	r24, r10
    13a4:	91 70       	andi	r25, 0x01	; 1
    13a6:	fe 01       	movw	r30, r28
    13a8:	e8 0f       	add	r30, r24
    13aa:	f9 1f       	adc	r31, r25
    13ac:	32 a9       	ldd	r19, Z+50	; 0x32
    13ae:	30 7f       	andi	r19, 0xF0	; 240
    13b0:	2d 2d       	mov	r18, r13
    13b2:	2f 70       	andi	r18, 0x0F	; 15
    13b4:	c3 2e       	mov	r12, r19
    13b6:	c2 2a       	or	r12, r18
    13b8:	7a cf       	rjmp	.-268    	; 0x12ae <put_fat+0x114>
    13ba:	81 2f       	mov	r24, r17
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	1f 91       	pop	r17
    13c2:	0f 91       	pop	r16
    13c4:	ff 90       	pop	r15
    13c6:	ef 90       	pop	r14
    13c8:	df 90       	pop	r13
    13ca:	cf 90       	pop	r12
    13cc:	bf 90       	pop	r11
    13ce:	af 90       	pop	r10
    13d0:	9f 90       	pop	r9
    13d2:	8f 90       	pop	r8
    13d4:	7f 90       	pop	r7
    13d6:	6f 90       	pop	r6
    13d8:	08 95       	ret

000013da <create_chain>:
    13da:	4f 92       	push	r4
    13dc:	5f 92       	push	r5
    13de:	6f 92       	push	r6
    13e0:	7f 92       	push	r7
    13e2:	8f 92       	push	r8
    13e4:	9f 92       	push	r9
    13e6:	af 92       	push	r10
    13e8:	bf 92       	push	r11
    13ea:	cf 92       	push	r12
    13ec:	df 92       	push	r13
    13ee:	ef 92       	push	r14
    13f0:	ff 92       	push	r15
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	ec 01       	movw	r28, r24
    13fc:	2a 01       	movw	r4, r20
    13fe:	3b 01       	movw	r6, r22
    1400:	41 15       	cp	r20, r1
    1402:	51 05       	cpc	r21, r1
    1404:	61 05       	cpc	r22, r1
    1406:	71 05       	cpc	r23, r1
    1408:	b9 f4       	brne	.+46     	; 0x1438 <create_chain+0x5e>
    140a:	8a 84       	ldd	r8, Y+10	; 0x0a
    140c:	9b 84       	ldd	r9, Y+11	; 0x0b
    140e:	ac 84       	ldd	r10, Y+12	; 0x0c
    1410:	bd 84       	ldd	r11, Y+13	; 0x0d
    1412:	81 14       	cp	r8, r1
    1414:	91 04       	cpc	r9, r1
    1416:	a1 04       	cpc	r10, r1
    1418:	b1 04       	cpc	r11, r1
    141a:	29 f1       	breq	.+74     	; 0x1466 <create_chain+0x8c>
    141c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    141e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1420:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1422:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1424:	88 16       	cp	r8, r24
    1426:	99 06       	cpc	r9, r25
    1428:	aa 06       	cpc	r10, r26
    142a:	bb 06       	cpc	r11, r27
    142c:	00 f1       	brcs	.+64     	; 0x146e <create_chain+0x94>
    142e:	81 2c       	mov	r8, r1
    1430:	91 2c       	mov	r9, r1
    1432:	54 01       	movw	r10, r8
    1434:	83 94       	inc	r8
    1436:	1b c0       	rjmp	.+54     	; 0x146e <create_chain+0x94>
    1438:	0e 94 32 07 	call	0xe64	; 0xe64 <get_fat>
    143c:	6b 01       	movw	r12, r22
    143e:	7c 01       	movw	r14, r24
    1440:	62 30       	cpi	r22, 0x02	; 2
    1442:	71 05       	cpc	r23, r1
    1444:	81 05       	cpc	r24, r1
    1446:	91 05       	cpc	r25, r1
    1448:	08 f4       	brcc	.+2      	; 0x144c <create_chain+0x72>
    144a:	86 c0       	rjmp	.+268    	; 0x1558 <create_chain+0x17e>
    144c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    144e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1450:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1452:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1454:	c8 16       	cp	r12, r24
    1456:	d9 06       	cpc	r13, r25
    1458:	ea 06       	cpc	r14, r26
    145a:	fb 06       	cpc	r15, r27
    145c:	08 f4       	brcc	.+2      	; 0x1460 <create_chain+0x86>
    145e:	81 c0       	rjmp	.+258    	; 0x1562 <create_chain+0x188>
    1460:	53 01       	movw	r10, r6
    1462:	42 01       	movw	r8, r4
    1464:	04 c0       	rjmp	.+8      	; 0x146e <create_chain+0x94>
    1466:	81 2c       	mov	r8, r1
    1468:	91 2c       	mov	r9, r1
    146a:	54 01       	movw	r10, r8
    146c:	83 94       	inc	r8
    146e:	75 01       	movw	r14, r10
    1470:	64 01       	movw	r12, r8
    1472:	8f ef       	ldi	r24, 0xFF	; 255
    1474:	c8 1a       	sub	r12, r24
    1476:	d8 0a       	sbc	r13, r24
    1478:	e8 0a       	sbc	r14, r24
    147a:	f8 0a       	sbc	r15, r24
    147c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    147e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1480:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1482:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1484:	c8 16       	cp	r12, r24
    1486:	d9 06       	cpc	r13, r25
    1488:	ea 06       	cpc	r14, r26
    148a:	fb 06       	cpc	r15, r27
    148c:	60 f0       	brcs	.+24     	; 0x14a6 <create_chain+0xcc>
    148e:	22 e0       	ldi	r18, 0x02	; 2
    1490:	82 16       	cp	r8, r18
    1492:	91 04       	cpc	r9, r1
    1494:	a1 04       	cpc	r10, r1
    1496:	b1 04       	cpc	r11, r1
    1498:	08 f4       	brcc	.+2      	; 0x149c <create_chain+0xc2>
    149a:	68 c0       	rjmp	.+208    	; 0x156c <create_chain+0x192>
    149c:	c1 2c       	mov	r12, r1
    149e:	d1 2c       	mov	r13, r1
    14a0:	76 01       	movw	r14, r12
    14a2:	68 94       	set
    14a4:	c1 f8       	bld	r12, 1
    14a6:	b7 01       	movw	r22, r14
    14a8:	a6 01       	movw	r20, r12
    14aa:	ce 01       	movw	r24, r28
    14ac:	0e 94 32 07 	call	0xe64	; 0xe64 <get_fat>
    14b0:	61 15       	cp	r22, r1
    14b2:	71 05       	cpc	r23, r1
    14b4:	81 05       	cpc	r24, r1
    14b6:	91 05       	cpc	r25, r1
    14b8:	99 f0       	breq	.+38     	; 0x14e0 <create_chain+0x106>
    14ba:	6f 3f       	cpi	r22, 0xFF	; 255
    14bc:	2f ef       	ldi	r18, 0xFF	; 255
    14be:	72 07       	cpc	r23, r18
    14c0:	82 07       	cpc	r24, r18
    14c2:	92 07       	cpc	r25, r18
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <create_chain+0xee>
    14c6:	57 c0       	rjmp	.+174    	; 0x1576 <create_chain+0x19c>
    14c8:	61 30       	cpi	r22, 0x01	; 1
    14ca:	71 05       	cpc	r23, r1
    14cc:	81 05       	cpc	r24, r1
    14ce:	91 05       	cpc	r25, r1
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <create_chain+0xfa>
    14d2:	56 c0       	rjmp	.+172    	; 0x1580 <create_chain+0x1a6>
    14d4:	c8 14       	cp	r12, r8
    14d6:	d9 04       	cpc	r13, r9
    14d8:	ea 04       	cpc	r14, r10
    14da:	fb 04       	cpc	r15, r11
    14dc:	51 f6       	brne	.-108    	; 0x1472 <create_chain+0x98>
    14de:	55 c0       	rjmp	.+170    	; 0x158a <create_chain+0x1b0>
    14e0:	0f ef       	ldi	r16, 0xFF	; 255
    14e2:	1f ef       	ldi	r17, 0xFF	; 255
    14e4:	2f ef       	ldi	r18, 0xFF	; 255
    14e6:	3f e0       	ldi	r19, 0x0F	; 15
    14e8:	b7 01       	movw	r22, r14
    14ea:	a6 01       	movw	r20, r12
    14ec:	ce 01       	movw	r24, r28
    14ee:	0e 94 cd 08 	call	0x119a	; 0x119a <put_fat>
    14f2:	81 11       	cpse	r24, r1
    14f4:	2a c0       	rjmp	.+84     	; 0x154a <create_chain+0x170>
    14f6:	41 14       	cp	r4, r1
    14f8:	51 04       	cpc	r5, r1
    14fa:	61 04       	cpc	r6, r1
    14fc:	71 04       	cpc	r7, r1
    14fe:	49 f0       	breq	.+18     	; 0x1512 <create_chain+0x138>
    1500:	97 01       	movw	r18, r14
    1502:	86 01       	movw	r16, r12
    1504:	b3 01       	movw	r22, r6
    1506:	a2 01       	movw	r20, r4
    1508:	ce 01       	movw	r24, r28
    150a:	0e 94 cd 08 	call	0x119a	; 0x119a <put_fat>
    150e:	81 11       	cpse	r24, r1
    1510:	1c c0       	rjmp	.+56     	; 0x154a <create_chain+0x170>
    1512:	ca 86       	std	Y+10, r12	; 0x0a
    1514:	db 86       	std	Y+11, r13	; 0x0b
    1516:	ec 86       	std	Y+12, r14	; 0x0c
    1518:	fd 86       	std	Y+13, r15	; 0x0d
    151a:	8e 85       	ldd	r24, Y+14	; 0x0e
    151c:	9f 85       	ldd	r25, Y+15	; 0x0f
    151e:	a8 89       	ldd	r26, Y+16	; 0x10
    1520:	b9 89       	ldd	r27, Y+17	; 0x11
    1522:	8f 3f       	cpi	r24, 0xFF	; 255
    1524:	2f ef       	ldi	r18, 0xFF	; 255
    1526:	92 07       	cpc	r25, r18
    1528:	a2 07       	cpc	r26, r18
    152a:	b2 07       	cpc	r27, r18
    152c:	99 f1       	breq	.+102    	; 0x1594 <create_chain+0x1ba>
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	a1 09       	sbc	r26, r1
    1532:	b1 09       	sbc	r27, r1
    1534:	8e 87       	std	Y+14, r24	; 0x0e
    1536:	9f 87       	std	Y+15, r25	; 0x0f
    1538:	a8 8b       	std	Y+16, r26	; 0x10
    153a:	b9 8b       	std	Y+17, r27	; 0x11
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	8d 83       	std	Y+5, r24	; 0x05
    1540:	6c 2d       	mov	r22, r12
    1542:	7d 2d       	mov	r23, r13
    1544:	8e 2d       	mov	r24, r14
    1546:	9f 2d       	mov	r25, r15
    1548:	2e c0       	rjmp	.+92     	; 0x15a6 <create_chain+0x1cc>
    154a:	81 30       	cpi	r24, 0x01	; 1
    154c:	41 f1       	breq	.+80     	; 0x159e <create_chain+0x1c4>
    154e:	61 e0       	ldi	r22, 0x01	; 1
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	27 c0       	rjmp	.+78     	; 0x15a6 <create_chain+0x1cc>
    1558:	61 e0       	ldi	r22, 0x01	; 1
    155a:	70 e0       	ldi	r23, 0x00	; 0
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	22 c0       	rjmp	.+68     	; 0x15a6 <create_chain+0x1cc>
    1562:	6c 2d       	mov	r22, r12
    1564:	7d 2d       	mov	r23, r13
    1566:	8e 2d       	mov	r24, r14
    1568:	9f 2d       	mov	r25, r15
    156a:	1d c0       	rjmp	.+58     	; 0x15a6 <create_chain+0x1cc>
    156c:	60 e0       	ldi	r22, 0x00	; 0
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	18 c0       	rjmp	.+48     	; 0x15a6 <create_chain+0x1cc>
    1576:	6f ef       	ldi	r22, 0xFF	; 255
    1578:	7f ef       	ldi	r23, 0xFF	; 255
    157a:	8f ef       	ldi	r24, 0xFF	; 255
    157c:	9f ef       	ldi	r25, 0xFF	; 255
    157e:	13 c0       	rjmp	.+38     	; 0x15a6 <create_chain+0x1cc>
    1580:	61 e0       	ldi	r22, 0x01	; 1
    1582:	70 e0       	ldi	r23, 0x00	; 0
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	0e c0       	rjmp	.+28     	; 0x15a6 <create_chain+0x1cc>
    158a:	60 e0       	ldi	r22, 0x00	; 0
    158c:	70 e0       	ldi	r23, 0x00	; 0
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	09 c0       	rjmp	.+18     	; 0x15a6 <create_chain+0x1cc>
    1594:	6c 2d       	mov	r22, r12
    1596:	7d 2d       	mov	r23, r13
    1598:	8e 2d       	mov	r24, r14
    159a:	9f 2d       	mov	r25, r15
    159c:	04 c0       	rjmp	.+8      	; 0x15a6 <create_chain+0x1cc>
    159e:	6f ef       	ldi	r22, 0xFF	; 255
    15a0:	7f ef       	ldi	r23, 0xFF	; 255
    15a2:	8f ef       	ldi	r24, 0xFF	; 255
    15a4:	9f ef       	ldi	r25, 0xFF	; 255
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	1f 91       	pop	r17
    15ac:	0f 91       	pop	r16
    15ae:	ff 90       	pop	r15
    15b0:	ef 90       	pop	r14
    15b2:	df 90       	pop	r13
    15b4:	cf 90       	pop	r12
    15b6:	bf 90       	pop	r11
    15b8:	af 90       	pop	r10
    15ba:	9f 90       	pop	r9
    15bc:	8f 90       	pop	r8
    15be:	7f 90       	pop	r7
    15c0:	6f 90       	pop	r6
    15c2:	5f 90       	pop	r5
    15c4:	4f 90       	pop	r4
    15c6:	08 95       	ret

000015c8 <dir_next>:
    15c8:	8f 92       	push	r8
    15ca:	9f 92       	push	r9
    15cc:	af 92       	push	r10
    15ce:	bf 92       	push	r11
    15d0:	cf 92       	push	r12
    15d2:	df 92       	push	r13
    15d4:	ef 92       	push	r14
    15d6:	ff 92       	push	r15
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	dc 01       	movw	r26, r24
    15e2:	14 96       	adiw	r26, 0x04	; 4
    15e4:	cd 91       	ld	r28, X+
    15e6:	dc 91       	ld	r29, X
    15e8:	15 97       	sbiw	r26, 0x05	; 5
    15ea:	21 96       	adiw	r28, 0x01	; 1
    15ec:	09 f4       	brne	.+2      	; 0x15f0 <dir_next+0x28>
    15ee:	02 c1       	rjmp	.+516    	; 0x17f4 <dir_next+0x22c>
    15f0:	1e 96       	adiw	r26, 0x0e	; 14
    15f2:	8d 90       	ld	r8, X+
    15f4:	9d 90       	ld	r9, X+
    15f6:	ad 90       	ld	r10, X+
    15f8:	bc 90       	ld	r11, X
    15fa:	51 97       	sbiw	r26, 0x11	; 17
    15fc:	81 14       	cp	r8, r1
    15fe:	91 04       	cpc	r9, r1
    1600:	a1 04       	cpc	r10, r1
    1602:	b1 04       	cpc	r11, r1
    1604:	09 f4       	brne	.+2      	; 0x1608 <dir_next+0x40>
    1606:	f8 c0       	rjmp	.+496    	; 0x17f8 <dir_next+0x230>
    1608:	7b 01       	movw	r14, r22
    160a:	8c 01       	movw	r16, r24
    160c:	6e 01       	movw	r12, r28
    160e:	bf e0       	ldi	r27, 0x0F	; 15
    1610:	cb 22       	and	r12, r27
    1612:	dd 24       	eor	r13, r13
    1614:	c1 14       	cp	r12, r1
    1616:	d1 04       	cpc	r13, r1
    1618:	09 f0       	breq	.+2      	; 0x161c <dir_next+0x54>
    161a:	d6 c0       	rjmp	.+428    	; 0x17c8 <dir_next+0x200>
    161c:	ef ef       	ldi	r30, 0xFF	; 255
    161e:	8e 1a       	sub	r8, r30
    1620:	9e 0a       	sbc	r9, r30
    1622:	ae 0a       	sbc	r10, r30
    1624:	be 0a       	sbc	r11, r30
    1626:	dc 01       	movw	r26, r24
    1628:	1e 96       	adiw	r26, 0x0e	; 14
    162a:	8d 92       	st	X+, r8
    162c:	9d 92       	st	X+, r9
    162e:	ad 92       	st	X+, r10
    1630:	bc 92       	st	X, r11
    1632:	51 97       	sbiw	r26, 0x11	; 17
    1634:	1a 96       	adiw	r26, 0x0a	; 10
    1636:	4d 91       	ld	r20, X+
    1638:	5d 91       	ld	r21, X+
    163a:	6d 91       	ld	r22, X+
    163c:	7c 91       	ld	r23, X
    163e:	1d 97       	sbiw	r26, 0x0d	; 13
    1640:	41 15       	cp	r20, r1
    1642:	51 05       	cpc	r21, r1
    1644:	61 05       	cpc	r22, r1
    1646:	71 05       	cpc	r23, r1
    1648:	49 f4       	brne	.+18     	; 0x165c <dir_next+0x94>
    164a:	ed 91       	ld	r30, X+
    164c:	fc 91       	ld	r31, X
    164e:	80 85       	ldd	r24, Z+8	; 0x08
    1650:	91 85       	ldd	r25, Z+9	; 0x09
    1652:	c8 17       	cp	r28, r24
    1654:	d9 07       	cpc	r29, r25
    1656:	08 f0       	brcs	.+2      	; 0x165a <dir_next+0x92>
    1658:	d1 c0       	rjmp	.+418    	; 0x17fc <dir_next+0x234>
    165a:	b6 c0       	rjmp	.+364    	; 0x17c8 <dir_next+0x200>
    165c:	dc 01       	movw	r26, r24
    165e:	ed 91       	ld	r30, X+
    1660:	fc 91       	ld	r31, X
    1662:	22 81       	ldd	r18, Z+2	; 0x02
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	21 50       	subi	r18, 0x01	; 1
    1668:	31 09       	sbc	r19, r1
    166a:	ce 01       	movw	r24, r28
    166c:	92 95       	swap	r25
    166e:	82 95       	swap	r24
    1670:	8f 70       	andi	r24, 0x0F	; 15
    1672:	89 27       	eor	r24, r25
    1674:	9f 70       	andi	r25, 0x0F	; 15
    1676:	89 27       	eor	r24, r25
    1678:	28 23       	and	r18, r24
    167a:	39 23       	and	r19, r25
    167c:	23 2b       	or	r18, r19
    167e:	09 f0       	breq	.+2      	; 0x1682 <dir_next+0xba>
    1680:	a3 c0       	rjmp	.+326    	; 0x17c8 <dir_next+0x200>
    1682:	cf 01       	movw	r24, r30
    1684:	0e 94 32 07 	call	0xe64	; 0xe64 <get_fat>
    1688:	4b 01       	movw	r8, r22
    168a:	5c 01       	movw	r10, r24
    168c:	62 30       	cpi	r22, 0x02	; 2
    168e:	71 05       	cpc	r23, r1
    1690:	81 05       	cpc	r24, r1
    1692:	91 05       	cpc	r25, r1
    1694:	08 f4       	brcc	.+2      	; 0x1698 <dir_next+0xd0>
    1696:	b4 c0       	rjmp	.+360    	; 0x1800 <dir_next+0x238>
    1698:	6f 3f       	cpi	r22, 0xFF	; 255
    169a:	7f 4f       	sbci	r23, 0xFF	; 255
    169c:	8f 4f       	sbci	r24, 0xFF	; 255
    169e:	9f 4f       	sbci	r25, 0xFF	; 255
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <dir_next+0xdc>
    16a2:	b0 c0       	rjmp	.+352    	; 0x1804 <dir_next+0x23c>
    16a4:	d8 01       	movw	r26, r16
    16a6:	ed 91       	ld	r30, X+
    16a8:	fc 91       	ld	r31, X
    16aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    16ac:	93 8d       	ldd	r25, Z+27	; 0x1b
    16ae:	a4 8d       	ldd	r26, Z+28	; 0x1c
    16b0:	b5 8d       	ldd	r27, Z+29	; 0x1d
    16b2:	88 16       	cp	r8, r24
    16b4:	99 06       	cpc	r9, r25
    16b6:	aa 06       	cpc	r10, r26
    16b8:	bb 06       	cpc	r11, r27
    16ba:	08 f4       	brcc	.+2      	; 0x16be <dir_next+0xf6>
    16bc:	73 c0       	rjmp	.+230    	; 0x17a4 <dir_next+0x1dc>
    16be:	ef 28       	or	r14, r15
    16c0:	09 f4       	brne	.+2      	; 0x16c4 <dir_next+0xfc>
    16c2:	a2 c0       	rjmp	.+324    	; 0x1808 <dir_next+0x240>
    16c4:	d8 01       	movw	r26, r16
    16c6:	1a 96       	adiw	r26, 0x0a	; 10
    16c8:	4d 91       	ld	r20, X+
    16ca:	5d 91       	ld	r21, X+
    16cc:	6d 91       	ld	r22, X+
    16ce:	7c 91       	ld	r23, X
    16d0:	1d 97       	sbiw	r26, 0x0d	; 13
    16d2:	cf 01       	movw	r24, r30
    16d4:	0e 94 ed 09 	call	0x13da	; 0x13da <create_chain>
    16d8:	4b 01       	movw	r8, r22
    16da:	5c 01       	movw	r10, r24
    16dc:	61 15       	cp	r22, r1
    16de:	71 05       	cpc	r23, r1
    16e0:	81 05       	cpc	r24, r1
    16e2:	91 05       	cpc	r25, r1
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <dir_next+0x120>
    16e6:	92 c0       	rjmp	.+292    	; 0x180c <dir_next+0x244>
    16e8:	61 30       	cpi	r22, 0x01	; 1
    16ea:	71 05       	cpc	r23, r1
    16ec:	81 05       	cpc	r24, r1
    16ee:	91 05       	cpc	r25, r1
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <dir_next+0x12c>
    16f2:	8e c0       	rjmp	.+284    	; 0x1810 <dir_next+0x248>
    16f4:	6f 3f       	cpi	r22, 0xFF	; 255
    16f6:	7f 4f       	sbci	r23, 0xFF	; 255
    16f8:	8f 4f       	sbci	r24, 0xFF	; 255
    16fa:	9f 4f       	sbci	r25, 0xFF	; 255
    16fc:	09 f4       	brne	.+2      	; 0x1700 <dir_next+0x138>
    16fe:	8a c0       	rjmp	.+276    	; 0x1814 <dir_next+0x24c>
    1700:	40 e0       	ldi	r20, 0x00	; 0
    1702:	50 e0       	ldi	r21, 0x00	; 0
    1704:	ba 01       	movw	r22, r20
    1706:	d8 01       	movw	r26, r16
    1708:	8d 91       	ld	r24, X+
    170a:	9c 91       	ld	r25, X
    170c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <move_window>
    1710:	81 11       	cpse	r24, r1
    1712:	82 c0       	rjmp	.+260    	; 0x1818 <dir_next+0x250>
    1714:	f8 01       	movw	r30, r16
    1716:	80 81       	ld	r24, Z
    1718:	91 81       	ldd	r25, Z+1	; 0x01
    171a:	fc 01       	movw	r30, r24
    171c:	f2 96       	adiw	r30, 0x32	; 50
    171e:	8e 5c       	subi	r24, 0xCE	; 206
    1720:	9d 4f       	sbci	r25, 0xFD	; 253
    1722:	11 92       	st	Z+, r1
    1724:	e8 17       	cp	r30, r24
    1726:	f9 07       	cpc	r31, r25
    1728:	e1 f7       	brne	.-8      	; 0x1722 <dir_next+0x15a>
    172a:	d8 01       	movw	r26, r16
    172c:	ed 90       	ld	r14, X+
    172e:	fc 90       	ld	r15, X
    1730:	b5 01       	movw	r22, r10
    1732:	a4 01       	movw	r20, r8
    1734:	c7 01       	movw	r24, r14
    1736:	0e 94 0a 07 	call	0xe14	; 0xe14 <clust2sect>
    173a:	f7 01       	movw	r30, r14
    173c:	66 a7       	std	Z+46, r22	; 0x2e
    173e:	77 a7       	std	Z+47, r23	; 0x2f
    1740:	80 ab       	std	Z+48, r24	; 0x30
    1742:	91 ab       	std	Z+49, r25	; 0x31
    1744:	f1 2c       	mov	r15, r1
    1746:	ee 24       	eor	r14, r14
    1748:	e3 94       	inc	r14
    174a:	1a c0       	rjmp	.+52     	; 0x1780 <dir_next+0x1b8>
    174c:	e4 82       	std	Z+4, r14	; 0x04
    174e:	40 e0       	ldi	r20, 0x00	; 0
    1750:	50 e0       	ldi	r21, 0x00	; 0
    1752:	ba 01       	movw	r22, r20
    1754:	d8 01       	movw	r26, r16
    1756:	8d 91       	ld	r24, X+
    1758:	9c 91       	ld	r25, X
    175a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <move_window>
    175e:	81 11       	cpse	r24, r1
    1760:	5d c0       	rjmp	.+186    	; 0x181c <dir_next+0x254>
    1762:	d8 01       	movw	r26, r16
    1764:	ed 91       	ld	r30, X+
    1766:	fc 91       	ld	r31, X
    1768:	86 a5       	ldd	r24, Z+46	; 0x2e
    176a:	97 a5       	ldd	r25, Z+47	; 0x2f
    176c:	a0 a9       	ldd	r26, Z+48	; 0x30
    176e:	b1 a9       	ldd	r27, Z+49	; 0x31
    1770:	01 96       	adiw	r24, 0x01	; 1
    1772:	a1 1d       	adc	r26, r1
    1774:	b1 1d       	adc	r27, r1
    1776:	86 a7       	std	Z+46, r24	; 0x2e
    1778:	97 a7       	std	Z+47, r25	; 0x2f
    177a:	a0 ab       	std	Z+48, r26	; 0x30
    177c:	b1 ab       	std	Z+49, r27	; 0x31
    177e:	f3 94       	inc	r15
    1780:	d8 01       	movw	r26, r16
    1782:	ed 91       	ld	r30, X+
    1784:	fc 91       	ld	r31, X
    1786:	82 81       	ldd	r24, Z+2	; 0x02
    1788:	f8 16       	cp	r15, r24
    178a:	00 f3       	brcs	.-64     	; 0x174c <dir_next+0x184>
    178c:	86 a5       	ldd	r24, Z+46	; 0x2e
    178e:	97 a5       	ldd	r25, Z+47	; 0x2f
    1790:	a0 a9       	ldd	r26, Z+48	; 0x30
    1792:	b1 a9       	ldd	r27, Z+49	; 0x31
    1794:	8f 19       	sub	r24, r15
    1796:	91 09       	sbc	r25, r1
    1798:	a1 09       	sbc	r26, r1
    179a:	b1 09       	sbc	r27, r1
    179c:	86 a7       	std	Z+46, r24	; 0x2e
    179e:	97 a7       	std	Z+47, r25	; 0x2f
    17a0:	a0 ab       	std	Z+48, r26	; 0x30
    17a2:	b1 ab       	std	Z+49, r27	; 0x31
    17a4:	f8 01       	movw	r30, r16
    17a6:	82 86       	std	Z+10, r8	; 0x0a
    17a8:	93 86       	std	Z+11, r9	; 0x0b
    17aa:	a4 86       	std	Z+12, r10	; 0x0c
    17ac:	b5 86       	std	Z+13, r11	; 0x0d
    17ae:	b5 01       	movw	r22, r10
    17b0:	a4 01       	movw	r20, r8
    17b2:	80 81       	ld	r24, Z
    17b4:	91 81       	ldd	r25, Z+1	; 0x01
    17b6:	0e 94 0a 07 	call	0xe14	; 0xe14 <clust2sect>
    17ba:	d8 01       	movw	r26, r16
    17bc:	1e 96       	adiw	r26, 0x0e	; 14
    17be:	6d 93       	st	X+, r22
    17c0:	7d 93       	st	X+, r23
    17c2:	8d 93       	st	X+, r24
    17c4:	9c 93       	st	X, r25
    17c6:	51 97       	sbiw	r26, 0x11	; 17
    17c8:	f8 01       	movw	r30, r16
    17ca:	d5 83       	std	Z+5, r29	; 0x05
    17cc:	c4 83       	std	Z+4, r28	; 0x04
    17ce:	80 81       	ld	r24, Z
    17d0:	91 81       	ldd	r25, Z+1	; 0x01
    17d2:	c2 96       	adiw	r24, 0x32	; 50
    17d4:	cc 0c       	add	r12, r12
    17d6:	dd 1c       	adc	r13, r13
    17d8:	cc 0c       	add	r12, r12
    17da:	dd 1c       	adc	r13, r13
    17dc:	cc 0c       	add	r12, r12
    17de:	dd 1c       	adc	r13, r13
    17e0:	cc 0c       	add	r12, r12
    17e2:	dd 1c       	adc	r13, r13
    17e4:	cc 0c       	add	r12, r12
    17e6:	dd 1c       	adc	r13, r13
    17e8:	c8 0e       	add	r12, r24
    17ea:	d9 1e       	adc	r13, r25
    17ec:	d3 8a       	std	Z+19, r13	; 0x13
    17ee:	c2 8a       	std	Z+18, r12	; 0x12
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	15 c0       	rjmp	.+42     	; 0x181e <dir_next+0x256>
    17f4:	84 e0       	ldi	r24, 0x04	; 4
    17f6:	13 c0       	rjmp	.+38     	; 0x181e <dir_next+0x256>
    17f8:	84 e0       	ldi	r24, 0x04	; 4
    17fa:	11 c0       	rjmp	.+34     	; 0x181e <dir_next+0x256>
    17fc:	84 e0       	ldi	r24, 0x04	; 4
    17fe:	0f c0       	rjmp	.+30     	; 0x181e <dir_next+0x256>
    1800:	82 e0       	ldi	r24, 0x02	; 2
    1802:	0d c0       	rjmp	.+26     	; 0x181e <dir_next+0x256>
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	0b c0       	rjmp	.+22     	; 0x181e <dir_next+0x256>
    1808:	84 e0       	ldi	r24, 0x04	; 4
    180a:	09 c0       	rjmp	.+18     	; 0x181e <dir_next+0x256>
    180c:	87 e0       	ldi	r24, 0x07	; 7
    180e:	07 c0       	rjmp	.+14     	; 0x181e <dir_next+0x256>
    1810:	82 e0       	ldi	r24, 0x02	; 2
    1812:	05 c0       	rjmp	.+10     	; 0x181e <dir_next+0x256>
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	03 c0       	rjmp	.+6      	; 0x181e <dir_next+0x256>
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	01 c0       	rjmp	.+2      	; 0x181e <dir_next+0x256>
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	1f 91       	pop	r17
    1824:	0f 91       	pop	r16
    1826:	ff 90       	pop	r15
    1828:	ef 90       	pop	r14
    182a:	df 90       	pop	r13
    182c:	cf 90       	pop	r12
    182e:	bf 90       	pop	r11
    1830:	af 90       	pop	r10
    1832:	9f 90       	pop	r9
    1834:	8f 90       	pop	r8
    1836:	08 95       	ret

00001838 <follow_path>:
    1838:	2f 92       	push	r2
    183a:	3f 92       	push	r3
    183c:	4f 92       	push	r4
    183e:	5f 92       	push	r5
    1840:	6f 92       	push	r6
    1842:	7f 92       	push	r7
    1844:	8f 92       	push	r8
    1846:	9f 92       	push	r9
    1848:	af 92       	push	r10
    184a:	bf 92       	push	r11
    184c:	cf 92       	push	r12
    184e:	df 92       	push	r13
    1850:	ef 92       	push	r14
    1852:	ff 92       	push	r15
    1854:	0f 93       	push	r16
    1856:	1f 93       	push	r17
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
    185c:	00 d0       	rcall	.+0      	; 0x185e <follow_path+0x26>
    185e:	00 d0       	rcall	.+0      	; 0x1860 <follow_path+0x28>
    1860:	1f 92       	push	r1
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	9a 83       	std	Y+2, r25	; 0x02
    1868:	89 83       	std	Y+1, r24	; 0x01
    186a:	4b 01       	movw	r8, r22
    186c:	db 01       	movw	r26, r22
    186e:	8c 91       	ld	r24, X
    1870:	8f 32       	cpi	r24, 0x2F	; 47
    1872:	11 f0       	breq	.+4      	; 0x1878 <follow_path+0x40>
    1874:	8c 35       	cpi	r24, 0x5C	; 92
    1876:	51 f4       	brne	.+20     	; 0x188c <follow_path+0x54>
    1878:	bf ef       	ldi	r27, 0xFF	; 255
    187a:	8b 1a       	sub	r8, r27
    187c:	9b 0a       	sbc	r9, r27
    187e:	e9 81       	ldd	r30, Y+1	; 0x01
    1880:	fa 81       	ldd	r31, Y+2	; 0x02
    1882:	16 82       	std	Z+6, r1	; 0x06
    1884:	17 82       	std	Z+7, r1	; 0x07
    1886:	10 86       	std	Z+8, r1	; 0x08
    1888:	11 86       	std	Z+9, r1	; 0x09
    188a:	0e c0       	rjmp	.+28     	; 0x18a8 <follow_path+0x70>
    188c:	a9 81       	ldd	r26, Y+1	; 0x01
    188e:	ba 81       	ldd	r27, Y+2	; 0x02
    1890:	ed 91       	ld	r30, X+
    1892:	fc 91       	ld	r31, X
    1894:	86 89       	ldd	r24, Z+22	; 0x16
    1896:	97 89       	ldd	r25, Z+23	; 0x17
    1898:	a0 8d       	ldd	r26, Z+24	; 0x18
    189a:	b1 8d       	ldd	r27, Z+25	; 0x19
    189c:	e9 81       	ldd	r30, Y+1	; 0x01
    189e:	fa 81       	ldd	r31, Y+2	; 0x02
    18a0:	86 83       	std	Z+6, r24	; 0x06
    18a2:	97 83       	std	Z+7, r25	; 0x07
    18a4:	a0 87       	std	Z+8, r26	; 0x08
    18a6:	b1 87       	std	Z+9, r27	; 0x09
    18a8:	d4 01       	movw	r26, r8
    18aa:	8c 91       	ld	r24, X
    18ac:	80 32       	cpi	r24, 0x20	; 32
    18ae:	58 f4       	brcc	.+22     	; 0x18c6 <follow_path+0x8e>
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	9a 81       	ldd	r25, Y+2	; 0x02
    18b8:	0e 94 15 08 	call	0x102a	; 0x102a <dir_sdi>
    18bc:	e9 81       	ldd	r30, Y+1	; 0x01
    18be:	fa 81       	ldd	r31, Y+2	; 0x02
    18c0:	13 8a       	std	Z+19, r1	; 0x13
    18c2:	12 8a       	std	Z+18, r1	; 0x12
    18c4:	6b c1       	rjmp	.+726    	; 0x1b9c <follow_path+0x364>
    18c6:	10 e2       	ldi	r17, 0x20	; 32
    18c8:	0f 2e       	mov	r0, r31
    18ca:	fe e2       	ldi	r31, 0x2E	; 46
    18cc:	7f 2e       	mov	r7, r31
    18ce:	f0 2d       	mov	r31, r0
    18d0:	00 e0       	ldi	r16, 0x00	; 0
    18d2:	b1 2c       	mov	r11, r1
    18d4:	68 94       	set
    18d6:	66 24       	eor	r6, r6
    18d8:	63 f8       	bld	r6, 3
    18da:	51 2c       	mov	r5, r1
    18dc:	36 2c       	mov	r3, r6
    18de:	25 2c       	mov	r2, r5
    18e0:	0f 2e       	mov	r0, r31
    18e2:	fb e0       	ldi	r31, 0x0B	; 11
    18e4:	4f 2e       	mov	r4, r31
    18e6:	f0 2d       	mov	r31, r0
    18e8:	29 81       	ldd	r18, Y+1	; 0x01
    18ea:	3a 81       	ldd	r19, Y+2	; 0x02
    18ec:	3c 83       	std	Y+4, r19	; 0x04
    18ee:	2b 83       	std	Y+3, r18	; 0x03
    18f0:	eb 81       	ldd	r30, Y+3	; 0x03
    18f2:	fc 81       	ldd	r31, Y+4	; 0x04
    18f4:	a4 89       	ldd	r26, Z+20	; 0x14
    18f6:	b5 89       	ldd	r27, Z+21	; 0x15
    18f8:	fd 01       	movw	r30, r26
    18fa:	cd 01       	movw	r24, r26
    18fc:	0b 96       	adiw	r24, 0x0b	; 11
    18fe:	11 93       	st	Z+, r17
    1900:	e8 17       	cp	r30, r24
    1902:	f9 07       	cpc	r31, r25
    1904:	e1 f7       	brne	.-8      	; 0x18fe <follow_path+0xc6>
    1906:	f4 01       	movw	r30, r8
    1908:	80 81       	ld	r24, Z
    190a:	8e 32       	cpi	r24, 0x2E	; 46
    190c:	61 f0       	breq	.+24     	; 0x1926 <follow_path+0xee>
    190e:	74 01       	movw	r14, r8
    1910:	40 2f       	mov	r20, r16
    1912:	5b 2d       	mov	r21, r11
    1914:	60 e0       	ldi	r22, 0x00	; 0
    1916:	70 e0       	ldi	r23, 0x00	; 0
    1918:	c6 2c       	mov	r12, r6
    191a:	d5 2c       	mov	r13, r5
    191c:	a1 2c       	mov	r10, r1
    191e:	ba 83       	std	Y+2, r27	; 0x02
    1920:	a9 83       	std	Y+1, r26	; 0x01
    1922:	ad 82       	std	Y+5, r10	; 0x05
    1924:	1e c0       	rjmp	.+60     	; 0x1962 <follow_path+0x12a>
    1926:	7c 92       	st	X, r7
    1928:	f4 01       	movw	r30, r8
    192a:	81 81       	ldd	r24, Z+1	; 0x01
    192c:	8e 32       	cpi	r24, 0x2E	; 46
    192e:	51 f4       	brne	.+20     	; 0x1944 <follow_path+0x10c>
    1930:	11 96       	adiw	r26, 0x01	; 1
    1932:	7c 92       	st	X, r7
    1934:	11 97       	sbiw	r26, 0x01	; 1
    1936:	82 81       	ldd	r24, Z+2	; 0x02
    1938:	8e 32       	cpi	r24, 0x2E	; 46
    193a:	09 f4       	brne	.+2      	; 0x193e <follow_path+0x106>
    193c:	75 c0       	rjmp	.+234    	; 0x1a28 <follow_path+0x1f0>
    193e:	23 e0       	ldi	r18, 0x03	; 3
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <follow_path+0x110>
    1944:	22 e0       	ldi	r18, 0x02	; 2
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	8f 32       	cpi	r24, 0x2F	; 47
    194a:	09 f4       	brne	.+2      	; 0x194e <follow_path+0x116>
    194c:	d6 c0       	rjmp	.+428    	; 0x1afa <follow_path+0x2c2>
    194e:	8c 35       	cpi	r24, 0x5C	; 92
    1950:	09 f4       	brne	.+2      	; 0x1954 <follow_path+0x11c>
    1952:	d3 c0       	rjmp	.+422    	; 0x1afa <follow_path+0x2c2>
    1954:	81 32       	cpi	r24, 0x21	; 33
    1956:	08 f4       	brcc	.+2      	; 0x195a <follow_path+0x122>
    1958:	d4 c0       	rjmp	.+424    	; 0x1b02 <follow_path+0x2ca>
    195a:	f4 c0       	rjmp	.+488    	; 0x1b44 <follow_path+0x30c>
    195c:	1b 96       	adiw	r26, 0x0b	; 11
    195e:	8c 93       	st	X, r24
    1960:	f3 c0       	rjmp	.+486    	; 0x1b48 <follow_path+0x310>
    1962:	6f 5f       	subi	r22, 0xFF	; 255
    1964:	7f 4f       	sbci	r23, 0xFF	; 255
    1966:	f7 01       	movw	r30, r14
    1968:	b1 91       	ld	r27, Z+
    196a:	7f 01       	movw	r14, r30
    196c:	b1 32       	cpi	r27, 0x21	; 33
    196e:	08 f4       	brcc	.+2      	; 0x1972 <follow_path+0x13a>
    1970:	e2 c0       	rjmp	.+452    	; 0x1b36 <follow_path+0x2fe>
    1972:	bf 32       	cpi	r27, 0x2F	; 47
    1974:	09 f4       	brne	.+2      	; 0x1978 <follow_path+0x140>
    1976:	d8 c0       	rjmp	.+432    	; 0x1b28 <follow_path+0x2f0>
    1978:	bc 35       	cpi	r27, 0x5C	; 92
    197a:	09 f4       	brne	.+2      	; 0x197e <follow_path+0x146>
    197c:	d5 c0       	rjmp	.+426    	; 0x1b28 <follow_path+0x2f0>
    197e:	be 32       	cpi	r27, 0x2E	; 46
    1980:	09 f4       	brne	.+2      	; 0x1984 <follow_path+0x14c>
    1982:	06 c1       	rjmp	.+524    	; 0x1b90 <follow_path+0x358>
    1984:	4c 15       	cp	r20, r12
    1986:	5d 05       	cpc	r21, r13
    1988:	08 f0       	brcs	.+2      	; 0x198c <follow_path+0x154>
    198a:	dc c0       	rjmp	.+440    	; 0x1b44 <follow_path+0x30c>
    198c:	09 c0       	rjmp	.+18     	; 0x19a0 <follow_path+0x168>
    198e:	fd 81       	ldd	r31, Y+5	; 0x05
    1990:	ff 0f       	add	r31, r31
    1992:	ff 0f       	add	r31, r31
    1994:	fd 83       	std	Y+5, r31	; 0x05
    1996:	43 2d       	mov	r20, r3
    1998:	52 2d       	mov	r21, r2
    199a:	c4 2c       	mov	r12, r4
    199c:	d1 2c       	mov	r13, r1
    199e:	e1 cf       	rjmp	.-62     	; 0x1962 <follow_path+0x12a>
    19a0:	bb 23       	and	r27, r27
    19a2:	0c f0       	brlt	.+2      	; 0x19a6 <follow_path+0x16e>
    19a4:	b2 c0       	rjmp	.+356    	; 0x1b0a <follow_path+0x2d2>
    19a6:	2d 81       	ldd	r18, Y+5	; 0x05
    19a8:	23 60       	ori	r18, 0x03	; 3
    19aa:	2d 83       	std	Y+5, r18	; 0x05
    19ac:	eb 2f       	mov	r30, r27
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	ed 5c       	subi	r30, 0xCD	; 205
    19b2:	ff 4f       	sbci	r31, 0xFF	; 255
    19b4:	b0 81       	ld	r27, Z
    19b6:	a9 c0       	rjmp	.+338    	; 0x1b0a <follow_path+0x2d2>
    19b8:	81 91       	ld	r24, Z+
    19ba:	88 23       	and	r24, r24
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <follow_path+0x188>
    19be:	ae c0       	rjmp	.+348    	; 0x1b1c <follow_path+0x2e4>
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	28 17       	cp	r18, r24
    19c4:	39 07       	cpc	r19, r25
    19c6:	c1 f7       	brne	.-16     	; 0x19b8 <follow_path+0x180>
    19c8:	2f c0       	rjmp	.+94     	; 0x1a28 <follow_path+0x1f0>
    19ca:	3d 81       	ldd	r19, Y+5	; 0x05
    19cc:	32 60       	ori	r19, 0x02	; 2
    19ce:	3d 83       	std	Y+5, r19	; 0x05
    19d0:	08 c0       	rjmp	.+16     	; 0x19e2 <follow_path+0x1aa>
    19d2:	8f e9       	ldi	r24, 0x9F	; 159
    19d4:	8b 0f       	add	r24, r27
    19d6:	8a 31       	cpi	r24, 0x1A	; 26
    19d8:	20 f4       	brcc	.+8      	; 0x19e2 <follow_path+0x1aa>
    19da:	8d 81       	ldd	r24, Y+5	; 0x05
    19dc:	81 60       	ori	r24, 0x01	; 1
    19de:	8d 83       	std	Y+5, r24	; 0x05
    19e0:	b0 52       	subi	r27, 0x20	; 32
    19e2:	e9 81       	ldd	r30, Y+1	; 0x01
    19e4:	fa 81       	ldd	r31, Y+2	; 0x02
    19e6:	e4 0f       	add	r30, r20
    19e8:	f5 1f       	adc	r31, r21
    19ea:	b0 83       	st	Z, r27
    19ec:	4f 5f       	subi	r20, 0xFF	; 255
    19ee:	5f 4f       	sbci	r21, 0xFF	; 255
    19f0:	b8 cf       	rjmp	.-144    	; 0x1962 <follow_path+0x12a>
    19f2:	45 2b       	or	r20, r21
    19f4:	09 f4       	brne	.+2      	; 0x19f8 <follow_path+0x1c0>
    19f6:	a6 c0       	rjmp	.+332    	; 0x1b44 <follow_path+0x30c>
    19f8:	9c 91       	ld	r25, X
    19fa:	95 3e       	cpi	r25, 0xE5	; 229
    19fc:	11 f4       	brne	.+4      	; 0x1a02 <follow_path+0x1ca>
    19fe:	95 e0       	ldi	r25, 0x05	; 5
    1a00:	9c 93       	st	X, r25
    1a02:	e8 e0       	ldi	r30, 0x08	; 8
    1a04:	ce 16       	cp	r12, r30
    1a06:	d1 04       	cpc	r13, r1
    1a08:	11 f4       	brne	.+4      	; 0x1a0e <follow_path+0x1d6>
    1a0a:	aa 0c       	add	r10, r10
    1a0c:	aa 0c       	add	r10, r10
    1a0e:	9a 2d       	mov	r25, r10
    1a10:	93 70       	andi	r25, 0x03	; 3
    1a12:	91 30       	cpi	r25, 0x01	; 1
    1a14:	09 f4       	brne	.+2      	; 0x1a18 <follow_path+0x1e0>
    1a16:	80 61       	ori	r24, 0x10	; 16
    1a18:	9a 2d       	mov	r25, r10
    1a1a:	9c 70       	andi	r25, 0x0C	; 12
    1a1c:	94 30       	cpi	r25, 0x04	; 4
    1a1e:	09 f4       	brne	.+2      	; 0x1a22 <follow_path+0x1ea>
    1a20:	88 60       	ori	r24, 0x08	; 8
    1a22:	1b 96       	adiw	r26, 0x0b	; 11
    1a24:	8c 93       	st	X, r24
    1a26:	90 c0       	rjmp	.+288    	; 0x1b48 <follow_path+0x310>
    1a28:	86 e0       	ldi	r24, 0x06	; 6
    1a2a:	b8 c0       	rjmp	.+368    	; 0x1b9c <follow_path+0x364>
    1a2c:	ab 81       	ldd	r26, Y+3	; 0x03
    1a2e:	bc 81       	ldd	r27, Y+4	; 0x04
    1a30:	1e 96       	adiw	r26, 0x0e	; 14
    1a32:	4d 91       	ld	r20, X+
    1a34:	5d 91       	ld	r21, X+
    1a36:	6d 91       	ld	r22, X+
    1a38:	7c 91       	ld	r23, X
    1a3a:	51 97       	sbiw	r26, 0x11	; 17
    1a3c:	8d 91       	ld	r24, X+
    1a3e:	9c 91       	ld	r25, X
    1a40:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <move_window>
    1a44:	81 11       	cpse	r24, r1
    1a46:	99 c0       	rjmp	.+306    	; 0x1b7a <follow_path+0x342>
    1a48:	eb 81       	ldd	r30, Y+3	; 0x03
    1a4a:	fc 81       	ldd	r31, Y+4	; 0x04
    1a4c:	42 89       	ldd	r20, Z+18	; 0x12
    1a4e:	53 89       	ldd	r21, Z+19	; 0x13
    1a50:	da 01       	movw	r26, r20
    1a52:	9c 91       	ld	r25, X
    1a54:	99 23       	and	r25, r25
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <follow_path+0x222>
    1a58:	81 c0       	rjmp	.+258    	; 0x1b5c <follow_path+0x324>
    1a5a:	1b 96       	adiw	r26, 0x0b	; 11
    1a5c:	ec 90       	ld	r14, X
    1a5e:	e3 fc       	sbrc	r14, 3
    1a60:	11 c0       	rjmp	.+34     	; 0x1a84 <follow_path+0x24c>
    1a62:	64 89       	ldd	r22, Z+20	; 0x14
    1a64:	75 89       	ldd	r23, Z+21	; 0x15
    1a66:	fa 01       	movw	r30, r20
    1a68:	db 01       	movw	r26, r22
    1a6a:	6a 01       	movw	r12, r20
    1a6c:	2b e0       	ldi	r18, 0x0B	; 11
    1a6e:	c2 0e       	add	r12, r18
    1a70:	d1 1c       	adc	r13, r1
    1a72:	04 c0       	rjmp	.+8      	; 0x1a7c <follow_path+0x244>
    1a74:	ec 15       	cp	r30, r12
    1a76:	fd 05       	cpc	r31, r13
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <follow_path+0x244>
    1a7a:	79 c0       	rjmp	.+242    	; 0x1b6e <follow_path+0x336>
    1a7c:	21 91       	ld	r18, Z+
    1a7e:	9d 91       	ld	r25, X+
    1a80:	29 17       	cp	r18, r25
    1a82:	c1 f3       	breq	.-16     	; 0x1a74 <follow_path+0x23c>
    1a84:	60 2f       	mov	r22, r16
    1a86:	7b 2d       	mov	r23, r11
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8c:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <dir_next>
    1a90:	88 23       	and	r24, r24
    1a92:	61 f2       	breq	.-104    	; 0x1a2c <follow_path+0x1f4>
    1a94:	72 c0       	rjmp	.+228    	; 0x1b7a <follow_path+0x342>
    1a96:	95 ff       	sbrs	r25, 5
    1a98:	0c c0       	rjmp	.+24     	; 0x1ab2 <follow_path+0x27a>
    1a9a:	eb 81       	ldd	r30, Y+3	; 0x03
    1a9c:	fc 81       	ldd	r31, Y+4	; 0x04
    1a9e:	16 82       	std	Z+6, r1	; 0x06
    1aa0:	17 82       	std	Z+7, r1	; 0x07
    1aa2:	10 86       	std	Z+8, r1	; 0x08
    1aa4:	11 86       	std	Z+9, r1	; 0x09
    1aa6:	13 8a       	std	Z+19, r1	; 0x13
    1aa8:	12 8a       	std	Z+18, r1	; 0x12
    1aaa:	92 ff       	sbrs	r25, 2
    1aac:	21 cf       	rjmp	.-446    	; 0x18f0 <follow_path+0xb8>
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	75 c0       	rjmp	.+234    	; 0x1b9c <follow_path+0x364>
    1ab2:	92 fd       	sbrc	r25, 2
    1ab4:	1e c0       	rjmp	.+60     	; 0x1af2 <follow_path+0x2ba>
    1ab6:	85 e0       	ldi	r24, 0x05	; 5
    1ab8:	71 c0       	rjmp	.+226    	; 0x1b9c <follow_path+0x364>
    1aba:	e4 fe       	sbrs	r14, 4
    1abc:	1c c0       	rjmp	.+56     	; 0x1af6 <follow_path+0x2be>
    1abe:	da 01       	movw	r26, r20
    1ac0:	54 96       	adiw	r26, 0x14	; 20
    1ac2:	8d 91       	ld	r24, X+
    1ac4:	9c 91       	ld	r25, X
    1ac6:	55 97       	sbiw	r26, 0x15	; 21
    1ac8:	a0 e0       	ldi	r26, 0x00	; 0
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	dc 01       	movw	r26, r24
    1ace:	99 27       	eor	r25, r25
    1ad0:	88 27       	eor	r24, r24
    1ad2:	fa 01       	movw	r30, r20
    1ad4:	42 8d       	ldd	r20, Z+26	; 0x1a
    1ad6:	53 8d       	ldd	r21, Z+27	; 0x1b
    1ad8:	60 e0       	ldi	r22, 0x00	; 0
    1ada:	70 e0       	ldi	r23, 0x00	; 0
    1adc:	84 2b       	or	r24, r20
    1ade:	95 2b       	or	r25, r21
    1ae0:	a6 2b       	or	r26, r22
    1ae2:	b7 2b       	or	r27, r23
    1ae4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ae6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ae8:	86 83       	std	Z+6, r24	; 0x06
    1aea:	97 83       	std	Z+7, r25	; 0x07
    1aec:	a0 87       	std	Z+8, r26	; 0x08
    1aee:	b1 87       	std	Z+9, r27	; 0x09
    1af0:	ff ce       	rjmp	.-514    	; 0x18f0 <follow_path+0xb8>
    1af2:	84 e0       	ldi	r24, 0x04	; 4
    1af4:	53 c0       	rjmp	.+166    	; 0x1b9c <follow_path+0x364>
    1af6:	85 e0       	ldi	r24, 0x05	; 5
    1af8:	51 c0       	rjmp	.+162    	; 0x1b9c <follow_path+0x364>
    1afa:	82 0e       	add	r8, r18
    1afc:	93 1e       	adc	r9, r19
    1afe:	81 2f       	mov	r24, r17
    1b00:	2d cf       	rjmp	.-422    	; 0x195c <follow_path+0x124>
    1b02:	82 0e       	add	r8, r18
    1b04:	93 1e       	adc	r9, r19
    1b06:	84 e2       	ldi	r24, 0x24	; 36
    1b08:	29 cf       	rjmp	.-430    	; 0x195c <follow_path+0x124>
    1b0a:	2b 2f       	mov	r18, r27
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	22 32       	cpi	r18, 0x22	; 34
    1b10:	31 05       	cpc	r19, r1
    1b12:	09 f4       	brne	.+2      	; 0x1b16 <follow_path+0x2de>
    1b14:	89 cf       	rjmp	.-238    	; 0x1a28 <follow_path+0x1f0>
    1b16:	e5 ea       	ldi	r30, 0xA5	; 165
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	4e cf       	rjmp	.-356    	; 0x19b8 <follow_path+0x180>
    1b1c:	8f eb       	ldi	r24, 0xBF	; 191
    1b1e:	8b 0f       	add	r24, r27
    1b20:	8a 31       	cpi	r24, 0x1A	; 26
    1b22:	08 f4       	brcc	.+2      	; 0x1b26 <follow_path+0x2ee>
    1b24:	52 cf       	rjmp	.-348    	; 0x19ca <follow_path+0x192>
    1b26:	55 cf       	rjmp	.-342    	; 0x19d2 <follow_path+0x19a>
    1b28:	a9 81       	ldd	r26, Y+1	; 0x01
    1b2a:	ba 81       	ldd	r27, Y+2	; 0x02
    1b2c:	ad 80       	ldd	r10, Y+5	; 0x05
    1b2e:	86 0e       	add	r8, r22
    1b30:	97 1e       	adc	r9, r23
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	5e cf       	rjmp	.-324    	; 0x19f2 <follow_path+0x1ba>
    1b36:	a9 81       	ldd	r26, Y+1	; 0x01
    1b38:	ba 81       	ldd	r27, Y+2	; 0x02
    1b3a:	ad 80       	ldd	r10, Y+5	; 0x05
    1b3c:	86 0e       	add	r8, r22
    1b3e:	97 1e       	adc	r9, r23
    1b40:	84 e0       	ldi	r24, 0x04	; 4
    1b42:	57 cf       	rjmp	.-338    	; 0x19f2 <follow_path+0x1ba>
    1b44:	86 e0       	ldi	r24, 0x06	; 6
    1b46:	2a c0       	rjmp	.+84     	; 0x1b9c <follow_path+0x364>
    1b48:	60 2f       	mov	r22, r16
    1b4a:	7b 2d       	mov	r23, r11
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b50:	0e 94 15 08 	call	0x102a	; 0x102a <dir_sdi>
    1b54:	88 23       	and	r24, r24
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <follow_path+0x322>
    1b58:	69 cf       	rjmp	.-302    	; 0x1a2c <follow_path+0x1f4>
    1b5a:	0f c0       	rjmp	.+30     	; 0x1b7a <follow_path+0x342>
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b60:	dc 01       	movw	r26, r24
    1b62:	54 96       	adiw	r26, 0x14	; 20
    1b64:	ed 91       	ld	r30, X+
    1b66:	fc 91       	ld	r31, X
    1b68:	55 97       	sbiw	r26, 0x15	; 21
    1b6a:	93 85       	ldd	r25, Z+11	; 0x0b
    1b6c:	94 cf       	rjmp	.-216    	; 0x1a96 <follow_path+0x25e>
    1b6e:	db 01       	movw	r26, r22
    1b70:	1b 96       	adiw	r26, 0x0b	; 11
    1b72:	9c 91       	ld	r25, X
    1b74:	92 ff       	sbrs	r25, 2
    1b76:	a1 cf       	rjmp	.-190    	; 0x1aba <follow_path+0x282>
    1b78:	11 c0       	rjmp	.+34     	; 0x1b9c <follow_path+0x364>
    1b7a:	ab 81       	ldd	r26, Y+3	; 0x03
    1b7c:	bc 81       	ldd	r27, Y+4	; 0x04
    1b7e:	54 96       	adiw	r26, 0x14	; 20
    1b80:	ed 91       	ld	r30, X+
    1b82:	fc 91       	ld	r31, X
    1b84:	55 97       	sbiw	r26, 0x15	; 21
    1b86:	93 85       	ldd	r25, Z+11	; 0x0b
    1b88:	84 30       	cpi	r24, 0x04	; 4
    1b8a:	09 f4       	brne	.+2      	; 0x1b8e <follow_path+0x356>
    1b8c:	84 cf       	rjmp	.-248    	; 0x1a96 <follow_path+0x25e>
    1b8e:	06 c0       	rjmp	.+12     	; 0x1b9c <follow_path+0x364>
    1b90:	b8 e0       	ldi	r27, 0x08	; 8
    1b92:	cb 16       	cp	r12, r27
    1b94:	d1 04       	cpc	r13, r1
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <follow_path+0x362>
    1b98:	fa ce       	rjmp	.-524    	; 0x198e <follow_path+0x156>
    1b9a:	d4 cf       	rjmp	.-88     	; 0x1b44 <follow_path+0x30c>
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	df 91       	pop	r29
    1ba8:	cf 91       	pop	r28
    1baa:	1f 91       	pop	r17
    1bac:	0f 91       	pop	r16
    1bae:	ff 90       	pop	r15
    1bb0:	ef 90       	pop	r14
    1bb2:	df 90       	pop	r13
    1bb4:	cf 90       	pop	r12
    1bb6:	bf 90       	pop	r11
    1bb8:	af 90       	pop	r10
    1bba:	9f 90       	pop	r9
    1bbc:	8f 90       	pop	r8
    1bbe:	7f 90       	pop	r7
    1bc0:	6f 90       	pop	r6
    1bc2:	5f 90       	pop	r5
    1bc4:	4f 90       	pop	r4
    1bc6:	3f 90       	pop	r3
    1bc8:	2f 90       	pop	r2
    1bca:	08 95       	ret

00001bcc <dir_register>:
    1bcc:	0f 93       	push	r16
    1bce:	1f 93       	push	r17
    1bd0:	cf 93       	push	r28
    1bd2:	8c 01       	movw	r16, r24
    1bd4:	60 e0       	ldi	r22, 0x00	; 0
    1bd6:	70 e0       	ldi	r23, 0x00	; 0
    1bd8:	0e 94 15 08 	call	0x102a	; 0x102a <dir_sdi>
    1bdc:	c8 2f       	mov	r28, r24
    1bde:	81 11       	cpse	r24, r1
    1be0:	47 c0       	rjmp	.+142    	; 0x1c70 <dir_register+0xa4>
    1be2:	d8 01       	movw	r26, r16
    1be4:	1e 96       	adiw	r26, 0x0e	; 14
    1be6:	4d 91       	ld	r20, X+
    1be8:	5d 91       	ld	r21, X+
    1bea:	6d 91       	ld	r22, X+
    1bec:	7c 91       	ld	r23, X
    1bee:	51 97       	sbiw	r26, 0x11	; 17
    1bf0:	8d 91       	ld	r24, X+
    1bf2:	9c 91       	ld	r25, X
    1bf4:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <move_window>
    1bf8:	c8 2f       	mov	r28, r24
    1bfa:	81 11       	cpse	r24, r1
    1bfc:	39 c0       	rjmp	.+114    	; 0x1c70 <dir_register+0xa4>
    1bfe:	d8 01       	movw	r26, r16
    1c00:	52 96       	adiw	r26, 0x12	; 18
    1c02:	ed 91       	ld	r30, X+
    1c04:	fc 91       	ld	r31, X
    1c06:	53 97       	sbiw	r26, 0x13	; 19
    1c08:	80 81       	ld	r24, Z
    1c0a:	85 3e       	cpi	r24, 0xE5	; 229
    1c0c:	29 f1       	breq	.+74     	; 0x1c58 <dir_register+0x8c>
    1c0e:	88 23       	and	r24, r24
    1c10:	19 f1       	breq	.+70     	; 0x1c58 <dir_register+0x8c>
    1c12:	61 e0       	ldi	r22, 0x01	; 1
    1c14:	70 e0       	ldi	r23, 0x00	; 0
    1c16:	c8 01       	movw	r24, r16
    1c18:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <dir_next>
    1c1c:	c8 2f       	mov	r28, r24
    1c1e:	88 23       	and	r24, r24
    1c20:	01 f3       	breq	.-64     	; 0x1be2 <dir_register+0x16>
    1c22:	26 c0       	rjmp	.+76     	; 0x1c70 <dir_register+0xa4>
    1c24:	f8 01       	movw	r30, r16
    1c26:	82 89       	ldd	r24, Z+18	; 0x12
    1c28:	93 89       	ldd	r25, Z+19	; 0x13
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	9c 01       	movw	r18, r24
    1c2e:	20 5e       	subi	r18, 0xE0	; 224
    1c30:	3f 4f       	sbci	r19, 0xFF	; 255
    1c32:	11 92       	st	Z+, r1
    1c34:	e2 17       	cp	r30, r18
    1c36:	f3 07       	cpc	r31, r19
    1c38:	e1 f7       	brne	.-8      	; 0x1c32 <dir_register+0x66>
    1c3a:	d8 01       	movw	r26, r16
    1c3c:	54 96       	adiw	r26, 0x14	; 20
    1c3e:	6d 91       	ld	r22, X+
    1c40:	7c 91       	ld	r23, X
    1c42:	55 97       	sbiw	r26, 0x15	; 21
    1c44:	4b e0       	ldi	r20, 0x0B	; 11
    1c46:	50 e0       	ldi	r21, 0x00	; 0
    1c48:	0e 94 45 02 	call	0x48a	; 0x48a <mem_cpy>
    1c4c:	d8 01       	movw	r26, r16
    1c4e:	ed 91       	ld	r30, X+
    1c50:	fc 91       	ld	r31, X
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	84 83       	std	Z+4, r24	; 0x04
    1c56:	0c c0       	rjmp	.+24     	; 0x1c70 <dir_register+0xa4>
    1c58:	f8 01       	movw	r30, r16
    1c5a:	46 85       	ldd	r20, Z+14	; 0x0e
    1c5c:	57 85       	ldd	r21, Z+15	; 0x0f
    1c5e:	60 89       	ldd	r22, Z+16	; 0x10
    1c60:	71 89       	ldd	r23, Z+17	; 0x11
    1c62:	80 81       	ld	r24, Z
    1c64:	91 81       	ldd	r25, Z+1	; 0x01
    1c66:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <move_window>
    1c6a:	c8 2f       	mov	r28, r24
    1c6c:	88 23       	and	r24, r24
    1c6e:	d1 f2       	breq	.-76     	; 0x1c24 <dir_register+0x58>
    1c70:	8c 2f       	mov	r24, r28
    1c72:	cf 91       	pop	r28
    1c74:	1f 91       	pop	r17
    1c76:	0f 91       	pop	r16
    1c78:	08 95       	ret

00001c7a <dir_read>:
    1c7a:	cf 93       	push	r28
    1c7c:	df 93       	push	r29
    1c7e:	ec 01       	movw	r28, r24
    1c80:	84 e0       	ldi	r24, 0x04	; 4
    1c82:	17 c0       	rjmp	.+46     	; 0x1cb2 <dir_read+0x38>
    1c84:	88 81       	ld	r24, Y
    1c86:	99 81       	ldd	r25, Y+1	; 0x01
    1c88:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <move_window>
    1c8c:	81 11       	cpse	r24, r1
    1c8e:	1c c0       	rjmp	.+56     	; 0x1cc8 <dir_read+0x4e>
    1c90:	ea 89       	ldd	r30, Y+18	; 0x12
    1c92:	fb 89       	ldd	r31, Y+19	; 0x13
    1c94:	90 81       	ld	r25, Z
    1c96:	99 23       	and	r25, r25
    1c98:	e1 f0       	breq	.+56     	; 0x1cd2 <dir_read+0x58>
    1c9a:	95 3e       	cpi	r25, 0xE5	; 229
    1c9c:	19 f0       	breq	.+6      	; 0x1ca4 <dir_read+0x2a>
    1c9e:	93 85       	ldd	r25, Z+11	; 0x0b
    1ca0:	93 ff       	sbrs	r25, 3
    1ca2:	19 c0       	rjmp	.+50     	; 0x1cd6 <dir_read+0x5c>
    1ca4:	60 e0       	ldi	r22, 0x00	; 0
    1ca6:	70 e0       	ldi	r23, 0x00	; 0
    1ca8:	ce 01       	movw	r24, r28
    1caa:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <dir_next>
    1cae:	81 11       	cpse	r24, r1
    1cb0:	0b c0       	rjmp	.+22     	; 0x1cc8 <dir_read+0x4e>
    1cb2:	4e 85       	ldd	r20, Y+14	; 0x0e
    1cb4:	5f 85       	ldd	r21, Y+15	; 0x0f
    1cb6:	68 89       	ldd	r22, Y+16	; 0x10
    1cb8:	79 89       	ldd	r23, Y+17	; 0x11
    1cba:	41 15       	cp	r20, r1
    1cbc:	51 05       	cpc	r21, r1
    1cbe:	61 05       	cpc	r22, r1
    1cc0:	71 05       	cpc	r23, r1
    1cc2:	01 f7       	brne	.-64     	; 0x1c84 <dir_read+0xa>
    1cc4:	88 23       	and	r24, r24
    1cc6:	39 f0       	breq	.+14     	; 0x1cd6 <dir_read+0x5c>
    1cc8:	1e 86       	std	Y+14, r1	; 0x0e
    1cca:	1f 86       	std	Y+15, r1	; 0x0f
    1ccc:	18 8a       	std	Y+16, r1	; 0x10
    1cce:	19 8a       	std	Y+17, r1	; 0x11
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <dir_read+0x5c>
    1cd2:	84 e0       	ldi	r24, 0x04	; 4
    1cd4:	f9 cf       	rjmp	.-14     	; 0x1cc8 <dir_read+0x4e>
    1cd6:	df 91       	pop	r29
    1cd8:	cf 91       	pop	r28
    1cda:	08 95       	ret

00001cdc <remove_chain>:
    1cdc:	7f 92       	push	r7
    1cde:	8f 92       	push	r8
    1ce0:	9f 92       	push	r9
    1ce2:	af 92       	push	r10
    1ce4:	bf 92       	push	r11
    1ce6:	cf 92       	push	r12
    1ce8:	df 92       	push	r13
    1cea:	ef 92       	push	r14
    1cec:	ff 92       	push	r15
    1cee:	0f 93       	push	r16
    1cf0:	1f 93       	push	r17
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	ec 01       	movw	r28, r24
    1cf8:	6a 01       	movw	r12, r20
    1cfa:	7b 01       	movw	r14, r22
    1cfc:	42 30       	cpi	r20, 0x02	; 2
    1cfe:	51 05       	cpc	r21, r1
    1d00:	61 05       	cpc	r22, r1
    1d02:	71 05       	cpc	r23, r1
    1d04:	08 f4       	brcc	.+2      	; 0x1d08 <remove_chain+0x2c>
    1d06:	4c c0       	rjmp	.+152    	; 0x1da0 <remove_chain+0xc4>
    1d08:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d0a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d0c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1d0e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1d10:	48 17       	cp	r20, r24
    1d12:	59 07       	cpc	r21, r25
    1d14:	6a 07       	cpc	r22, r26
    1d16:	7b 07       	cpc	r23, r27
    1d18:	08 f0       	brcs	.+2      	; 0x1d1c <remove_chain+0x40>
    1d1a:	44 c0       	rjmp	.+136    	; 0x1da4 <remove_chain+0xc8>
    1d1c:	77 24       	eor	r7, r7
    1d1e:	73 94       	inc	r7
    1d20:	b7 01       	movw	r22, r14
    1d22:	a6 01       	movw	r20, r12
    1d24:	ce 01       	movw	r24, r28
    1d26:	0e 94 32 07 	call	0xe64	; 0xe64 <get_fat>
    1d2a:	4b 01       	movw	r8, r22
    1d2c:	5c 01       	movw	r10, r24
    1d2e:	67 2b       	or	r22, r23
    1d30:	68 2b       	or	r22, r24
    1d32:	69 2b       	or	r22, r25
    1d34:	c9 f1       	breq	.+114    	; 0x1da8 <remove_chain+0xcc>
    1d36:	91 e0       	ldi	r25, 0x01	; 1
    1d38:	89 16       	cp	r8, r25
    1d3a:	91 04       	cpc	r9, r1
    1d3c:	a1 04       	cpc	r10, r1
    1d3e:	b1 04       	cpc	r11, r1
    1d40:	a9 f1       	breq	.+106    	; 0x1dac <remove_chain+0xd0>
    1d42:	8f ef       	ldi	r24, 0xFF	; 255
    1d44:	88 16       	cp	r8, r24
    1d46:	98 06       	cpc	r9, r24
    1d48:	a8 06       	cpc	r10, r24
    1d4a:	b8 06       	cpc	r11, r24
    1d4c:	89 f1       	breq	.+98     	; 0x1db0 <remove_chain+0xd4>
    1d4e:	00 e0       	ldi	r16, 0x00	; 0
    1d50:	10 e0       	ldi	r17, 0x00	; 0
    1d52:	98 01       	movw	r18, r16
    1d54:	b7 01       	movw	r22, r14
    1d56:	a6 01       	movw	r20, r12
    1d58:	ce 01       	movw	r24, r28
    1d5a:	0e 94 cd 08 	call	0x119a	; 0x119a <put_fat>
    1d5e:	81 11       	cpse	r24, r1
    1d60:	28 c0       	rjmp	.+80     	; 0x1db2 <remove_chain+0xd6>
    1d62:	4e 85       	ldd	r20, Y+14	; 0x0e
    1d64:	5f 85       	ldd	r21, Y+15	; 0x0f
    1d66:	68 89       	ldd	r22, Y+16	; 0x10
    1d68:	79 89       	ldd	r23, Y+17	; 0x11
    1d6a:	4f 3f       	cpi	r20, 0xFF	; 255
    1d6c:	9f ef       	ldi	r25, 0xFF	; 255
    1d6e:	59 07       	cpc	r21, r25
    1d70:	69 07       	cpc	r22, r25
    1d72:	79 07       	cpc	r23, r25
    1d74:	49 f0       	breq	.+18     	; 0x1d88 <remove_chain+0xac>
    1d76:	4f 5f       	subi	r20, 0xFF	; 255
    1d78:	5f 4f       	sbci	r21, 0xFF	; 255
    1d7a:	6f 4f       	sbci	r22, 0xFF	; 255
    1d7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d7e:	4e 87       	std	Y+14, r20	; 0x0e
    1d80:	5f 87       	std	Y+15, r21	; 0x0f
    1d82:	68 8b       	std	Y+16, r22	; 0x10
    1d84:	79 8b       	std	Y+17, r23	; 0x11
    1d86:	7d 82       	std	Y+5, r7	; 0x05
    1d88:	75 01       	movw	r14, r10
    1d8a:	64 01       	movw	r12, r8
    1d8c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1d8e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1d90:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1d92:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1d94:	84 16       	cp	r8, r20
    1d96:	95 06       	cpc	r9, r21
    1d98:	a6 06       	cpc	r10, r22
    1d9a:	b7 06       	cpc	r11, r23
    1d9c:	08 f2       	brcs	.-126    	; 0x1d20 <remove_chain+0x44>
    1d9e:	09 c0       	rjmp	.+18     	; 0x1db2 <remove_chain+0xd6>
    1da0:	82 e0       	ldi	r24, 0x02	; 2
    1da2:	07 c0       	rjmp	.+14     	; 0x1db2 <remove_chain+0xd6>
    1da4:	82 e0       	ldi	r24, 0x02	; 2
    1da6:	05 c0       	rjmp	.+10     	; 0x1db2 <remove_chain+0xd6>
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	03 c0       	rjmp	.+6      	; 0x1db2 <remove_chain+0xd6>
    1dac:	82 e0       	ldi	r24, 0x02	; 2
    1dae:	01 c0       	rjmp	.+2      	; 0x1db2 <remove_chain+0xd6>
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	df 91       	pop	r29
    1db4:	cf 91       	pop	r28
    1db6:	1f 91       	pop	r17
    1db8:	0f 91       	pop	r16
    1dba:	ff 90       	pop	r15
    1dbc:	ef 90       	pop	r14
    1dbe:	df 90       	pop	r13
    1dc0:	cf 90       	pop	r12
    1dc2:	bf 90       	pop	r11
    1dc4:	af 90       	pop	r10
    1dc6:	9f 90       	pop	r9
    1dc8:	8f 90       	pop	r8
    1dca:	7f 90       	pop	r7
    1dcc:	08 95       	ret

00001dce <f_mount>:
    1dce:	81 11       	cpse	r24, r1
    1dd0:	12 c0       	rjmp	.+36     	; 0x1df6 <f_mount+0x28>
    1dd2:	e0 91 7f 01 	lds	r30, 0x017F	; 0x80017f <FatFs>
    1dd6:	f0 91 80 01 	lds	r31, 0x0180	; 0x800180 <FatFs+0x1>
    1dda:	30 97       	sbiw	r30, 0x00	; 0
    1ddc:	09 f0       	breq	.+2      	; 0x1de0 <f_mount+0x12>
    1dde:	10 82       	st	Z, r1
    1de0:	61 15       	cp	r22, r1
    1de2:	71 05       	cpc	r23, r1
    1de4:	11 f0       	breq	.+4      	; 0x1dea <f_mount+0x1c>
    1de6:	fb 01       	movw	r30, r22
    1de8:	10 82       	st	Z, r1
    1dea:	70 93 80 01 	sts	0x0180, r23	; 0x800180 <FatFs+0x1>
    1dee:	60 93 7f 01 	sts	0x017F, r22	; 0x80017f <FatFs>
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	08 95       	ret
    1df6:	8b e0       	ldi	r24, 0x0B	; 11
    1df8:	08 95       	ret

00001dfa <f_open>:
    1dfa:	4f 92       	push	r4
    1dfc:	5f 92       	push	r5
    1dfe:	6f 92       	push	r6
    1e00:	7f 92       	push	r7
    1e02:	8f 92       	push	r8
    1e04:	9f 92       	push	r9
    1e06:	af 92       	push	r10
    1e08:	bf 92       	push	r11
    1e0a:	cf 92       	push	r12
    1e0c:	df 92       	push	r13
    1e0e:	ef 92       	push	r14
    1e10:	ff 92       	push	r15
    1e12:	0f 93       	push	r16
    1e14:	1f 93       	push	r17
    1e16:	cf 93       	push	r28
    1e18:	df 93       	push	r29
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	a4 97       	sbiw	r28, 0x24	; 36
    1e20:	0f b6       	in	r0, 0x3f	; 63
    1e22:	f8 94       	cli
    1e24:	de bf       	out	0x3e, r29	; 62
    1e26:	0f be       	out	0x3f, r0	; 63
    1e28:	cd bf       	out	0x3d, r28	; 61
    1e2a:	8c 01       	movw	r16, r24
    1e2c:	7c a3       	std	Y+36, r23	; 0x24
    1e2e:	6b a3       	std	Y+35, r22	; 0x23
    1e30:	f4 2e       	mov	r15, r20
    1e32:	dc 01       	movw	r26, r24
    1e34:	1d 92       	st	X+, r1
    1e36:	1c 92       	st	X, r1
    1e38:	b4 2f       	mov	r27, r20
    1e3a:	bf 71       	andi	r27, 0x1F	; 31
    1e3c:	eb 2e       	mov	r14, r27
    1e3e:	4e 71       	andi	r20, 0x1E	; 30
    1e40:	be 01       	movw	r22, r28
    1e42:	6f 5f       	subi	r22, 0xFF	; 255
    1e44:	7f 4f       	sbci	r23, 0xFF	; 255
    1e46:	ce 01       	movw	r24, r28
    1e48:	83 96       	adiw	r24, 0x23	; 35
    1e4a:	0e 94 bf 03 	call	0x77e	; 0x77e <chk_mounted>
    1e4e:	9e 01       	movw	r18, r28
    1e50:	29 5e       	subi	r18, 0xE9	; 233
    1e52:	3f 4f       	sbci	r19, 0xFF	; 255
    1e54:	3e 8b       	std	Y+22, r19	; 0x16
    1e56:	2d 8b       	std	Y+21, r18	; 0x15
    1e58:	81 11       	cpse	r24, r1
    1e5a:	bd c0       	rjmp	.+378    	; 0x1fd6 <f_open+0x1dc>
    1e5c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e5e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e60:	ce 01       	movw	r24, r28
    1e62:	01 96       	adiw	r24, 0x01	; 1
    1e64:	0e 94 1c 0c 	call	0x1838	; 0x1838 <follow_path>
    1e68:	cb 88       	ldd	r12, Y+19	; 0x13
    1e6a:	dc 88       	ldd	r13, Y+20	; 0x14
    1e6c:	81 11       	cpse	r24, r1
    1e6e:	ba c0       	rjmp	.+372    	; 0x1fe4 <f_open+0x1ea>
    1e70:	c1 14       	cp	r12, r1
    1e72:	d1 04       	cpc	r13, r1
    1e74:	09 f0       	breq	.+2      	; 0x1e78 <f_open+0x7e>
    1e76:	c0 c0       	rjmp	.+384    	; 0x1ff8 <f_open+0x1fe>
    1e78:	ba c0       	rjmp	.+372    	; 0x1fee <f_open+0x1f4>
    1e7a:	84 30       	cpi	r24, 0x04	; 4
    1e7c:	21 f4       	brne	.+8      	; 0x1e86 <f_open+0x8c>
    1e7e:	ce 01       	movw	r24, r28
    1e80:	01 96       	adiw	r24, 0x01	; 1
    1e82:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <dir_register>
    1e86:	ee 2d       	mov	r30, r14
    1e88:	e8 60       	ori	r30, 0x08	; 8
    1e8a:	ee 2e       	mov	r14, r30
    1e8c:	cb 88       	ldd	r12, Y+19	; 0x13
    1e8e:	dc 88       	ldd	r13, Y+20	; 0x14
    1e90:	88 23       	and	r24, r24
    1e92:	49 f0       	breq	.+18     	; 0x1ea6 <f_open+0xac>
    1e94:	cc c0       	rjmp	.+408    	; 0x202e <f_open+0x234>
    1e96:	f2 fc       	sbrc	r15, 2
    1e98:	c3 c0       	rjmp	.+390    	; 0x2020 <f_open+0x226>
    1e9a:	d6 01       	movw	r26, r12
    1e9c:	1b 96       	adiw	r26, 0x0b	; 11
    1e9e:	8c 91       	ld	r24, X
    1ea0:	81 71       	andi	r24, 0x11	; 17
    1ea2:	09 f0       	breq	.+2      	; 0x1ea6 <f_open+0xac>
    1ea4:	bf c0       	rjmp	.+382    	; 0x2024 <f_open+0x22a>
    1ea6:	e3 fe       	sbrs	r14, 3
    1ea8:	51 c0       	rjmp	.+162    	; 0x1f4c <f_open+0x152>
    1eaa:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <get_fattime>
    1eae:	f6 01       	movw	r30, r12
    1eb0:	66 87       	std	Z+14, r22	; 0x0e
    1eb2:	77 87       	std	Z+15, r23	; 0x0f
    1eb4:	80 8b       	std	Z+16, r24	; 0x10
    1eb6:	91 8b       	std	Z+17, r25	; 0x11
    1eb8:	13 86       	std	Z+11, r1	; 0x0b
    1eba:	14 8e       	std	Z+28, r1	; 0x1c
    1ebc:	15 8e       	std	Z+29, r1	; 0x1d
    1ebe:	16 8e       	std	Z+30, r1	; 0x1e
    1ec0:	17 8e       	std	Z+31, r1	; 0x1f
    1ec2:	84 88       	ldd	r8, Z+20	; 0x14
    1ec4:	95 88       	ldd	r9, Z+21	; 0x15
    1ec6:	a1 2c       	mov	r10, r1
    1ec8:	b1 2c       	mov	r11, r1
    1eca:	d4 01       	movw	r26, r8
    1ecc:	99 27       	eor	r25, r25
    1ece:	88 27       	eor	r24, r24
    1ed0:	82 8c       	ldd	r8, Z+26	; 0x1a
    1ed2:	93 8c       	ldd	r9, Z+27	; 0x1b
    1ed4:	a1 2c       	mov	r10, r1
    1ed6:	b1 2c       	mov	r11, r1
    1ed8:	88 2a       	or	r8, r24
    1eda:	99 2a       	or	r9, r25
    1edc:	aa 2a       	or	r10, r26
    1ede:	bb 2a       	or	r11, r27
    1ee0:	13 8e       	std	Z+27, r1	; 0x1b
    1ee2:	12 8e       	std	Z+26, r1	; 0x1a
    1ee4:	15 8a       	std	Z+21, r1	; 0x15
    1ee6:	14 8a       	std	Z+20, r1	; 0x14
    1ee8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eea:	fa 81       	ldd	r31, Y+2	; 0x02
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	84 83       	std	Z+4, r24	; 0x04
    1ef0:	81 14       	cp	r8, r1
    1ef2:	91 04       	cpc	r9, r1
    1ef4:	a1 04       	cpc	r10, r1
    1ef6:	b1 04       	cpc	r11, r1
    1ef8:	31 f1       	breq	.+76     	; 0x1f46 <f_open+0x14c>
    1efa:	46 a4       	ldd	r4, Z+46	; 0x2e
    1efc:	57 a4       	ldd	r5, Z+47	; 0x2f
    1efe:	60 a8       	ldd	r6, Z+48	; 0x30
    1f00:	71 a8       	ldd	r7, Z+49	; 0x31
    1f02:	b5 01       	movw	r22, r10
    1f04:	a4 01       	movw	r20, r8
    1f06:	cf 01       	movw	r24, r30
    1f08:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <remove_chain>
    1f0c:	81 11       	cpse	r24, r1
    1f0e:	8f c0       	rjmp	.+286    	; 0x202e <f_open+0x234>
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	9a 81       	ldd	r25, Y+2	; 0x02
    1f14:	f1 e0       	ldi	r31, 0x01	; 1
    1f16:	8f 1a       	sub	r8, r31
    1f18:	91 08       	sbc	r9, r1
    1f1a:	a1 08       	sbc	r10, r1
    1f1c:	b1 08       	sbc	r11, r1
    1f1e:	dc 01       	movw	r26, r24
    1f20:	1a 96       	adiw	r26, 0x0a	; 10
    1f22:	8d 92       	st	X+, r8
    1f24:	9d 92       	st	X+, r9
    1f26:	ad 92       	st	X+, r10
    1f28:	bc 92       	st	X, r11
    1f2a:	1d 97       	sbiw	r26, 0x0d	; 13
    1f2c:	b3 01       	movw	r22, r6
    1f2e:	a2 01       	movw	r20, r4
    1f30:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <move_window>
    1f34:	88 23       	and	r24, r24
    1f36:	39 f0       	breq	.+14     	; 0x1f46 <f_open+0x14c>
    1f38:	7a c0       	rjmp	.+244    	; 0x202e <f_open+0x234>
    1f3a:	f1 fe       	sbrs	r15, 1
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <f_open+0x148>
    1f3e:	80 fd       	sbrc	r24, 0
    1f40:	73 c0       	rjmp	.+230    	; 0x2028 <f_open+0x22e>
    1f42:	f3 fe       	sbrs	r15, 3
    1f44:	03 c0       	rjmp	.+6      	; 0x1f4c <f_open+0x152>
    1f46:	be 2d       	mov	r27, r14
    1f48:	b0 62       	ori	r27, 0x20	; 32
    1f4a:	eb 2e       	mov	r14, r27
    1f4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f50:	86 a5       	ldd	r24, Z+46	; 0x2e
    1f52:	97 a5       	ldd	r25, Z+47	; 0x2f
    1f54:	a0 a9       	ldd	r26, Z+48	; 0x30
    1f56:	b1 a9       	ldd	r27, Z+49	; 0x31
    1f58:	f8 01       	movw	r30, r16
    1f5a:	82 8f       	std	Z+26, r24	; 0x1a
    1f5c:	93 8f       	std	Z+27, r25	; 0x1b
    1f5e:	a4 8f       	std	Z+28, r26	; 0x1c
    1f60:	b5 8f       	std	Z+29, r27	; 0x1d
    1f62:	d7 8e       	std	Z+31, r13	; 0x1f
    1f64:	c6 8e       	std	Z+30, r12	; 0x1e
    1f66:	d8 01       	movw	r26, r16
    1f68:	14 96       	adiw	r26, 0x04	; 4
    1f6a:	ec 92       	st	X, r14
    1f6c:	f6 01       	movw	r30, r12
    1f6e:	84 89       	ldd	r24, Z+20	; 0x14
    1f70:	95 89       	ldd	r25, Z+21	; 0x15
    1f72:	a0 e0       	ldi	r26, 0x00	; 0
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	dc 01       	movw	r26, r24
    1f78:	99 27       	eor	r25, r25
    1f7a:	88 27       	eor	r24, r24
    1f7c:	42 8d       	ldd	r20, Z+26	; 0x1a
    1f7e:	53 8d       	ldd	r21, Z+27	; 0x1b
    1f80:	60 e0       	ldi	r22, 0x00	; 0
    1f82:	70 e0       	ldi	r23, 0x00	; 0
    1f84:	84 2b       	or	r24, r20
    1f86:	95 2b       	or	r25, r21
    1f88:	a6 2b       	or	r26, r22
    1f8a:	b7 2b       	or	r27, r23
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	86 87       	std	Z+14, r24	; 0x0e
    1f90:	97 87       	std	Z+15, r25	; 0x0f
    1f92:	a0 8b       	std	Z+16, r26	; 0x10
    1f94:	b1 8b       	std	Z+17, r27	; 0x11
    1f96:	f6 01       	movw	r30, r12
    1f98:	84 8d       	ldd	r24, Z+28	; 0x1c
    1f9a:	95 8d       	ldd	r25, Z+29	; 0x1d
    1f9c:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1f9e:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1fa0:	f8 01       	movw	r30, r16
    1fa2:	82 87       	std	Z+10, r24	; 0x0a
    1fa4:	93 87       	std	Z+11, r25	; 0x0b
    1fa6:	a4 87       	std	Z+12, r26	; 0x0c
    1fa8:	b5 87       	std	Z+13, r27	; 0x0d
    1faa:	d8 01       	movw	r26, r16
    1fac:	16 82       	std	Z+6, r1	; 0x06
    1fae:	17 82       	std	Z+7, r1	; 0x07
    1fb0:	10 86       	std	Z+8, r1	; 0x08
    1fb2:	11 86       	std	Z+9, r1	; 0x09
    1fb4:	16 8a       	std	Z+22, r1	; 0x16
    1fb6:	17 8a       	std	Z+23, r1	; 0x17
    1fb8:	10 8e       	std	Z+24, r1	; 0x18
    1fba:	11 8e       	std	Z+25, r1	; 0x19
    1fbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1fbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc0:	11 96       	adiw	r26, 0x01	; 1
    1fc2:	fc 93       	st	X, r31
    1fc4:	ee 93       	st	-X, r30
    1fc6:	86 81       	ldd	r24, Z+6	; 0x06
    1fc8:	97 81       	ldd	r25, Z+7	; 0x07
    1fca:	13 96       	adiw	r26, 0x03	; 3
    1fcc:	9c 93       	st	X, r25
    1fce:	8e 93       	st	-X, r24
    1fd0:	12 97       	sbiw	r26, 0x02	; 2
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	2c c0       	rjmp	.+88     	; 0x202e <f_open+0x234>
    1fd6:	cb 88       	ldd	r12, Y+19	; 0x13
    1fd8:	dc 88       	ldd	r13, Y+20	; 0x14
    1fda:	9f 2d       	mov	r25, r15
    1fdc:	9c 71       	andi	r25, 0x1C	; 28
    1fde:	09 f0       	breq	.+2      	; 0x1fe2 <f_open+0x1e8>
    1fe0:	4c cf       	rjmp	.-360    	; 0x1e7a <f_open+0x80>
    1fe2:	0f c0       	rjmp	.+30     	; 0x2002 <f_open+0x208>
    1fe4:	9f 2d       	mov	r25, r15
    1fe6:	9c 71       	andi	r25, 0x1C	; 28
    1fe8:	09 f0       	breq	.+2      	; 0x1fec <f_open+0x1f2>
    1fea:	47 cf       	rjmp	.-370    	; 0x1e7a <f_open+0x80>
    1fec:	0a c0       	rjmp	.+20     	; 0x2002 <f_open+0x208>
    1fee:	8f 2d       	mov	r24, r15
    1ff0:	8c 71       	andi	r24, 0x1C	; 28
    1ff2:	51 f4       	brne	.+20     	; 0x2008 <f_open+0x20e>
    1ff4:	86 e0       	ldi	r24, 0x06	; 6
    1ff6:	05 c0       	rjmp	.+10     	; 0x2002 <f_open+0x208>
    1ff8:	8f 2d       	mov	r24, r15
    1ffa:	8c 71       	andi	r24, 0x1C	; 28
    1ffc:	09 f0       	breq	.+2      	; 0x2000 <f_open+0x206>
    1ffe:	4b cf       	rjmp	.-362    	; 0x1e96 <f_open+0x9c>
    2000:	0a c0       	rjmp	.+20     	; 0x2016 <f_open+0x21c>
    2002:	81 11       	cpse	r24, r1
    2004:	14 c0       	rjmp	.+40     	; 0x202e <f_open+0x234>
    2006:	af cf       	rjmp	.-162    	; 0x1f66 <f_open+0x16c>
    2008:	be 2d       	mov	r27, r14
    200a:	b8 60       	ori	r27, 0x08	; 8
    200c:	eb 2e       	mov	r14, r27
    200e:	cb 88       	ldd	r12, Y+19	; 0x13
    2010:	dc 88       	ldd	r13, Y+20	; 0x14
    2012:	86 e0       	ldi	r24, 0x06	; 6
    2014:	f6 cf       	rjmp	.-20     	; 0x2002 <f_open+0x208>
    2016:	f6 01       	movw	r30, r12
    2018:	83 85       	ldd	r24, Z+11	; 0x0b
    201a:	84 fd       	sbrc	r24, 4
    201c:	07 c0       	rjmp	.+14     	; 0x202c <f_open+0x232>
    201e:	8d cf       	rjmp	.-230    	; 0x1f3a <f_open+0x140>
    2020:	88 e0       	ldi	r24, 0x08	; 8
    2022:	05 c0       	rjmp	.+10     	; 0x202e <f_open+0x234>
    2024:	87 e0       	ldi	r24, 0x07	; 7
    2026:	03 c0       	rjmp	.+6      	; 0x202e <f_open+0x234>
    2028:	87 e0       	ldi	r24, 0x07	; 7
    202a:	01 c0       	rjmp	.+2      	; 0x202e <f_open+0x234>
    202c:	84 e0       	ldi	r24, 0x04	; 4
    202e:	a4 96       	adiw	r28, 0x24	; 36
    2030:	0f b6       	in	r0, 0x3f	; 63
    2032:	f8 94       	cli
    2034:	de bf       	out	0x3e, r29	; 62
    2036:	0f be       	out	0x3f, r0	; 63
    2038:	cd bf       	out	0x3d, r28	; 61
    203a:	df 91       	pop	r29
    203c:	cf 91       	pop	r28
    203e:	1f 91       	pop	r17
    2040:	0f 91       	pop	r16
    2042:	ff 90       	pop	r15
    2044:	ef 90       	pop	r14
    2046:	df 90       	pop	r13
    2048:	cf 90       	pop	r12
    204a:	bf 90       	pop	r11
    204c:	af 90       	pop	r10
    204e:	9f 90       	pop	r9
    2050:	8f 90       	pop	r8
    2052:	7f 90       	pop	r7
    2054:	6f 90       	pop	r6
    2056:	5f 90       	pop	r5
    2058:	4f 90       	pop	r4
    205a:	08 95       	ret

0000205c <f_read>:
    205c:	2f 92       	push	r2
    205e:	3f 92       	push	r3
    2060:	4f 92       	push	r4
    2062:	5f 92       	push	r5
    2064:	6f 92       	push	r6
    2066:	7f 92       	push	r7
    2068:	8f 92       	push	r8
    206a:	9f 92       	push	r9
    206c:	af 92       	push	r10
    206e:	bf 92       	push	r11
    2070:	cf 92       	push	r12
    2072:	df 92       	push	r13
    2074:	ef 92       	push	r14
    2076:	ff 92       	push	r15
    2078:	0f 93       	push	r16
    207a:	1f 93       	push	r17
    207c:	cf 93       	push	r28
    207e:	df 93       	push	r29
    2080:	ec 01       	movw	r28, r24
    2082:	4b 01       	movw	r8, r22
    2084:	6a 01       	movw	r12, r20
    2086:	59 01       	movw	r10, r18
    2088:	f9 01       	movw	r30, r18
    208a:	11 82       	std	Z+1, r1	; 0x01
    208c:	10 82       	st	Z, r1
    208e:	6a 81       	ldd	r22, Y+2	; 0x02
    2090:	7b 81       	ldd	r23, Y+3	; 0x03
    2092:	88 81       	ld	r24, Y
    2094:	99 81       	ldd	r25, Y+1	; 0x01
    2096:	0e 94 a5 03 	call	0x74a	; 0x74a <validate>
    209a:	81 11       	cpse	r24, r1
    209c:	18 c1       	rjmp	.+560    	; 0x22ce <f_read+0x272>
    209e:	8c 81       	ldd	r24, Y+4	; 0x04
    20a0:	88 23       	and	r24, r24
    20a2:	0c f4       	brge	.+2      	; 0x20a6 <f_read+0x4a>
    20a4:	0f c1       	rjmp	.+542    	; 0x22c4 <f_read+0x268>
    20a6:	80 ff       	sbrs	r24, 0
    20a8:	0f c1       	rjmp	.+542    	; 0x22c8 <f_read+0x26c>
    20aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    20ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ae:	ac 85       	ldd	r26, Y+12	; 0x0c
    20b0:	bd 85       	ldd	r27, Y+13	; 0x0d
    20b2:	4e 81       	ldd	r20, Y+6	; 0x06
    20b4:	5f 81       	ldd	r21, Y+7	; 0x07
    20b6:	68 85       	ldd	r22, Y+8	; 0x08
    20b8:	79 85       	ldd	r23, Y+9	; 0x09
    20ba:	84 1b       	sub	r24, r20
    20bc:	95 0b       	sbc	r25, r21
    20be:	a6 0b       	sbc	r26, r22
    20c0:	b7 0b       	sbc	r27, r23
    20c2:	a6 01       	movw	r20, r12
    20c4:	60 e0       	ldi	r22, 0x00	; 0
    20c6:	70 e0       	ldi	r23, 0x00	; 0
    20c8:	84 17       	cp	r24, r20
    20ca:	95 07       	cpc	r25, r21
    20cc:	a6 07       	cpc	r26, r22
    20ce:	b7 07       	cpc	r27, r23
    20d0:	08 f4       	brcc	.+2      	; 0x20d4 <f_read+0x78>
    20d2:	6c 01       	movw	r12, r24
    20d4:	c1 14       	cp	r12, r1
    20d6:	d1 04       	cpc	r13, r1
    20d8:	09 f4       	brne	.+2      	; 0x20dc <f_read+0x80>
    20da:	f8 c0       	rjmp	.+496    	; 0x22cc <f_read+0x270>
    20dc:	4e 81       	ldd	r20, Y+6	; 0x06
    20de:	5f 81       	ldd	r21, Y+7	; 0x07
    20e0:	68 85       	ldd	r22, Y+8	; 0x08
    20e2:	79 85       	ldd	r23, Y+9	; 0x09
    20e4:	db 01       	movw	r26, r22
    20e6:	ca 01       	movw	r24, r20
    20e8:	91 70       	andi	r25, 0x01	; 1
    20ea:	aa 27       	eor	r26, r26
    20ec:	bb 27       	eor	r27, r27
    20ee:	89 2b       	or	r24, r25
    20f0:	8a 2b       	or	r24, r26
    20f2:	8b 2b       	or	r24, r27
    20f4:	09 f0       	breq	.+2      	; 0x20f8 <f_read+0x9c>
    20f6:	a0 c0       	rjmp	.+320    	; 0x2238 <f_read+0x1dc>
    20f8:	e8 81       	ld	r30, Y
    20fa:	f9 81       	ldd	r31, Y+1	; 0x01
    20fc:	12 81       	ldd	r17, Z+2	; 0x02
    20fe:	11 50       	subi	r17, 0x01	; 1
    2100:	db 01       	movw	r26, r22
    2102:	ca 01       	movw	r24, r20
    2104:	07 2e       	mov	r0, r23
    2106:	79 e0       	ldi	r23, 0x09	; 9
    2108:	b6 95       	lsr	r27
    210a:	a7 95       	ror	r26
    210c:	97 95       	ror	r25
    210e:	87 95       	ror	r24
    2110:	7a 95       	dec	r23
    2112:	d1 f7       	brne	.-12     	; 0x2108 <f_read+0xac>
    2114:	70 2d       	mov	r23, r0
    2116:	18 23       	and	r17, r24
    2118:	49 f5       	brne	.+82     	; 0x216c <f_read+0x110>
    211a:	45 2b       	or	r20, r21
    211c:	46 2b       	or	r20, r22
    211e:	47 2b       	or	r20, r23
    2120:	29 f4       	brne	.+10     	; 0x212c <f_read+0xd0>
    2122:	6e 85       	ldd	r22, Y+14	; 0x0e
    2124:	7f 85       	ldd	r23, Y+15	; 0x0f
    2126:	88 89       	ldd	r24, Y+16	; 0x10
    2128:	99 89       	ldd	r25, Y+17	; 0x11
    212a:	07 c0       	rjmp	.+14     	; 0x213a <f_read+0xde>
    212c:	4a 89       	ldd	r20, Y+18	; 0x12
    212e:	5b 89       	ldd	r21, Y+19	; 0x13
    2130:	6c 89       	ldd	r22, Y+20	; 0x14
    2132:	7d 89       	ldd	r23, Y+21	; 0x15
    2134:	cf 01       	movw	r24, r30
    2136:	0e 94 32 07 	call	0xe64	; 0xe64 <get_fat>
    213a:	62 30       	cpi	r22, 0x02	; 2
    213c:	71 05       	cpc	r23, r1
    213e:	81 05       	cpc	r24, r1
    2140:	91 05       	cpc	r25, r1
    2142:	28 f4       	brcc	.+10     	; 0x214e <f_read+0xf2>
    2144:	8c 81       	ldd	r24, Y+4	; 0x04
    2146:	80 68       	ori	r24, 0x80	; 128
    2148:	8c 83       	std	Y+4, r24	; 0x04
    214a:	82 e0       	ldi	r24, 0x02	; 2
    214c:	c0 c0       	rjmp	.+384    	; 0x22ce <f_read+0x272>
    214e:	6f 3f       	cpi	r22, 0xFF	; 255
    2150:	ff ef       	ldi	r31, 0xFF	; 255
    2152:	7f 07       	cpc	r23, r31
    2154:	8f 07       	cpc	r24, r31
    2156:	9f 07       	cpc	r25, r31
    2158:	29 f4       	brne	.+10     	; 0x2164 <f_read+0x108>
    215a:	8c 81       	ldd	r24, Y+4	; 0x04
    215c:	80 68       	ori	r24, 0x80	; 128
    215e:	8c 83       	std	Y+4, r24	; 0x04
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	b5 c0       	rjmp	.+362    	; 0x22ce <f_read+0x272>
    2164:	6a 8b       	std	Y+18, r22	; 0x12
    2166:	7b 8b       	std	Y+19, r23	; 0x13
    2168:	8c 8b       	std	Y+20, r24	; 0x14
    216a:	9d 8b       	std	Y+21, r25	; 0x15
    216c:	28 80       	ld	r2, Y
    216e:	39 80       	ldd	r3, Y+1	; 0x01
    2170:	4a 89       	ldd	r20, Y+18	; 0x12
    2172:	5b 89       	ldd	r21, Y+19	; 0x13
    2174:	6c 89       	ldd	r22, Y+20	; 0x14
    2176:	7d 89       	ldd	r23, Y+21	; 0x15
    2178:	c1 01       	movw	r24, r2
    217a:	0e 94 0a 07 	call	0xe14	; 0xe14 <clust2sect>
    217e:	61 15       	cp	r22, r1
    2180:	71 05       	cpc	r23, r1
    2182:	81 05       	cpc	r24, r1
    2184:	91 05       	cpc	r25, r1
    2186:	29 f4       	brne	.+10     	; 0x2192 <f_read+0x136>
    2188:	8c 81       	ldd	r24, Y+4	; 0x04
    218a:	80 68       	ori	r24, 0x80	; 128
    218c:	8c 83       	std	Y+4, r24	; 0x04
    218e:	82 e0       	ldi	r24, 0x02	; 2
    2190:	9e c0       	rjmp	.+316    	; 0x22ce <f_read+0x272>
    2192:	2b 01       	movw	r4, r22
    2194:	3c 01       	movw	r6, r24
    2196:	41 0e       	add	r4, r17
    2198:	51 1c       	adc	r5, r1
    219a:	61 1c       	adc	r6, r1
    219c:	71 1c       	adc	r7, r1
    219e:	76 01       	movw	r14, r12
    21a0:	ef 2c       	mov	r14, r15
    21a2:	ff 24       	eor	r15, r15
    21a4:	e6 94       	lsr	r14
    21a6:	e1 14       	cp	r14, r1
    21a8:	f1 04       	cpc	r15, r1
    21aa:	09 f4       	brne	.+2      	; 0x21ae <f_read+0x152>
    21ac:	41 c0       	rjmp	.+130    	; 0x2230 <f_read+0x1d4>
    21ae:	f1 01       	movw	r30, r2
    21b0:	42 81       	ldd	r20, Z+2	; 0x02
    21b2:	24 2f       	mov	r18, r20
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	c7 01       	movw	r24, r14
    21b8:	81 0f       	add	r24, r17
    21ba:	91 1d       	adc	r25, r1
    21bc:	28 17       	cp	r18, r24
    21be:	39 07       	cpc	r19, r25
    21c0:	18 f4       	brcc	.+6      	; 0x21c8 <f_read+0x16c>
    21c2:	79 01       	movw	r14, r18
    21c4:	e1 1a       	sub	r14, r17
    21c6:	f1 08       	sbc	r15, r1
    21c8:	0e 2d       	mov	r16, r14
    21ca:	a3 01       	movw	r20, r6
    21cc:	92 01       	movw	r18, r4
    21ce:	b4 01       	movw	r22, r8
    21d0:	f1 01       	movw	r30, r2
    21d2:	81 81       	ldd	r24, Z+1	; 0x01
    21d4:	0e 94 40 2b 	call	0x5680	; 0x5680 <disk_read>
    21d8:	88 23       	and	r24, r24
    21da:	29 f0       	breq	.+10     	; 0x21e6 <f_read+0x18a>
    21dc:	8c 81       	ldd	r24, Y+4	; 0x04
    21de:	80 68       	ori	r24, 0x80	; 128
    21e0:	8c 83       	std	Y+4, r24	; 0x04
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	74 c0       	rjmp	.+232    	; 0x22ce <f_read+0x272>
    21e6:	e8 81       	ld	r30, Y
    21e8:	f9 81       	ldd	r31, Y+1	; 0x01
    21ea:	84 81       	ldd	r24, Z+4	; 0x04
    21ec:	88 23       	and	r24, r24
    21ee:	e1 f0       	breq	.+56     	; 0x2228 <f_read+0x1cc>
    21f0:	86 a5       	ldd	r24, Z+46	; 0x2e
    21f2:	97 a5       	ldd	r25, Z+47	; 0x2f
    21f4:	a0 a9       	ldd	r26, Z+48	; 0x30
    21f6:	b1 a9       	ldd	r27, Z+49	; 0x31
    21f8:	84 19       	sub	r24, r4
    21fa:	95 09       	sbc	r25, r5
    21fc:	a6 09       	sbc	r26, r6
    21fe:	b7 09       	sbc	r27, r7
    2200:	a7 01       	movw	r20, r14
    2202:	60 e0       	ldi	r22, 0x00	; 0
    2204:	70 e0       	ldi	r23, 0x00	; 0
    2206:	84 17       	cp	r24, r20
    2208:	95 07       	cpc	r25, r21
    220a:	a6 07       	cpc	r26, r22
    220c:	b7 07       	cpc	r27, r23
    220e:	60 f4       	brcc	.+24     	; 0x2228 <f_read+0x1cc>
    2210:	bf 01       	movw	r22, r30
    2212:	6e 5c       	subi	r22, 0xCE	; 206
    2214:	7f 4f       	sbci	r23, 0xFF	; 255
    2216:	98 2f       	mov	r25, r24
    2218:	88 27       	eor	r24, r24
    221a:	99 0f       	add	r25, r25
    221c:	40 e0       	ldi	r20, 0x00	; 0
    221e:	52 e0       	ldi	r21, 0x02	; 2
    2220:	88 0d       	add	r24, r8
    2222:	99 1d       	adc	r25, r9
    2224:	0e 94 45 02 	call	0x48a	; 0x48a <mem_cpy>
    2228:	fe 2c       	mov	r15, r14
    222a:	ee 24       	eor	r14, r14
    222c:	ff 0c       	add	r15, r15
    222e:	2f c0       	rjmp	.+94     	; 0x228e <f_read+0x232>
    2230:	4e 8a       	std	Y+22, r4	; 0x16
    2232:	5f 8a       	std	Y+23, r5	; 0x17
    2234:	68 8e       	std	Y+24, r6	; 0x18
    2236:	79 8e       	std	Y+25, r7	; 0x19
    2238:	8e 81       	ldd	r24, Y+6	; 0x06
    223a:	9f 81       	ldd	r25, Y+7	; 0x07
    223c:	91 70       	andi	r25, 0x01	; 1
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	32 e0       	ldi	r19, 0x02	; 2
    2242:	79 01       	movw	r14, r18
    2244:	e8 1a       	sub	r14, r24
    2246:	f9 0a       	sbc	r15, r25
    2248:	ce 14       	cp	r12, r14
    224a:	df 04       	cpc	r13, r15
    224c:	08 f4       	brcc	.+2      	; 0x2250 <f_read+0x1f4>
    224e:	76 01       	movw	r14, r12
    2250:	4e 89       	ldd	r20, Y+22	; 0x16
    2252:	5f 89       	ldd	r21, Y+23	; 0x17
    2254:	68 8d       	ldd	r22, Y+24	; 0x18
    2256:	79 8d       	ldd	r23, Y+25	; 0x19
    2258:	88 81       	ld	r24, Y
    225a:	99 81       	ldd	r25, Y+1	; 0x01
    225c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <move_window>
    2260:	88 23       	and	r24, r24
    2262:	29 f0       	breq	.+10     	; 0x226e <f_read+0x212>
    2264:	8c 81       	ldd	r24, Y+4	; 0x04
    2266:	80 68       	ori	r24, 0x80	; 128
    2268:	8c 83       	std	Y+4, r24	; 0x04
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	30 c0       	rjmp	.+96     	; 0x22ce <f_read+0x272>
    226e:	8e 81       	ldd	r24, Y+6	; 0x06
    2270:	9f 81       	ldd	r25, Y+7	; 0x07
    2272:	a8 85       	ldd	r26, Y+8	; 0x08
    2274:	b9 85       	ldd	r27, Y+9	; 0x09
    2276:	91 70       	andi	r25, 0x01	; 1
    2278:	aa 27       	eor	r26, r26
    227a:	bb 27       	eor	r27, r27
    227c:	c2 96       	adiw	r24, 0x32	; 50
    227e:	68 81       	ld	r22, Y
    2280:	79 81       	ldd	r23, Y+1	; 0x01
    2282:	68 0f       	add	r22, r24
    2284:	79 1f       	adc	r23, r25
    2286:	a7 01       	movw	r20, r14
    2288:	c4 01       	movw	r24, r8
    228a:	0e 94 45 02 	call	0x48a	; 0x48a <mem_cpy>
    228e:	8e 0c       	add	r8, r14
    2290:	9f 1c       	adc	r9, r15
    2292:	8e 81       	ldd	r24, Y+6	; 0x06
    2294:	9f 81       	ldd	r25, Y+7	; 0x07
    2296:	a8 85       	ldd	r26, Y+8	; 0x08
    2298:	b9 85       	ldd	r27, Y+9	; 0x09
    229a:	8e 0d       	add	r24, r14
    229c:	9f 1d       	adc	r25, r15
    229e:	a1 1d       	adc	r26, r1
    22a0:	b1 1d       	adc	r27, r1
    22a2:	8e 83       	std	Y+6, r24	; 0x06
    22a4:	9f 83       	std	Y+7, r25	; 0x07
    22a6:	a8 87       	std	Y+8, r26	; 0x08
    22a8:	b9 87       	std	Y+9, r27	; 0x09
    22aa:	f5 01       	movw	r30, r10
    22ac:	80 81       	ld	r24, Z
    22ae:	91 81       	ldd	r25, Z+1	; 0x01
    22b0:	8e 0d       	add	r24, r14
    22b2:	9f 1d       	adc	r25, r15
    22b4:	91 83       	std	Z+1, r25	; 0x01
    22b6:	80 83       	st	Z, r24
    22b8:	ce 18       	sub	r12, r14
    22ba:	df 08       	sbc	r13, r15
    22bc:	09 f0       	breq	.+2      	; 0x22c0 <f_read+0x264>
    22be:	0e cf       	rjmp	.-484    	; 0x20dc <f_read+0x80>
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	05 c0       	rjmp	.+10     	; 0x22ce <f_read+0x272>
    22c4:	82 e0       	ldi	r24, 0x02	; 2
    22c6:	03 c0       	rjmp	.+6      	; 0x22ce <f_read+0x272>
    22c8:	87 e0       	ldi	r24, 0x07	; 7
    22ca:	01 c0       	rjmp	.+2      	; 0x22ce <f_read+0x272>
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	1f 91       	pop	r17
    22d4:	0f 91       	pop	r16
    22d6:	ff 90       	pop	r15
    22d8:	ef 90       	pop	r14
    22da:	df 90       	pop	r13
    22dc:	cf 90       	pop	r12
    22de:	bf 90       	pop	r11
    22e0:	af 90       	pop	r10
    22e2:	9f 90       	pop	r9
    22e4:	8f 90       	pop	r8
    22e6:	7f 90       	pop	r7
    22e8:	6f 90       	pop	r6
    22ea:	5f 90       	pop	r5
    22ec:	4f 90       	pop	r4
    22ee:	3f 90       	pop	r3
    22f0:	2f 90       	pop	r2
    22f2:	08 95       	ret

000022f4 <f_write>:
    22f4:	2f 92       	push	r2
    22f6:	3f 92       	push	r3
    22f8:	4f 92       	push	r4
    22fa:	5f 92       	push	r5
    22fc:	6f 92       	push	r6
    22fe:	7f 92       	push	r7
    2300:	8f 92       	push	r8
    2302:	9f 92       	push	r9
    2304:	af 92       	push	r10
    2306:	bf 92       	push	r11
    2308:	cf 92       	push	r12
    230a:	df 92       	push	r13
    230c:	ef 92       	push	r14
    230e:	ff 92       	push	r15
    2310:	0f 93       	push	r16
    2312:	1f 93       	push	r17
    2314:	cf 93       	push	r28
    2316:	df 93       	push	r29
    2318:	ec 01       	movw	r28, r24
    231a:	4b 01       	movw	r8, r22
    231c:	6a 01       	movw	r12, r20
    231e:	59 01       	movw	r10, r18
    2320:	f9 01       	movw	r30, r18
    2322:	11 82       	std	Z+1, r1	; 0x01
    2324:	10 82       	st	Z, r1
    2326:	6a 81       	ldd	r22, Y+2	; 0x02
    2328:	7b 81       	ldd	r23, Y+3	; 0x03
    232a:	88 81       	ld	r24, Y
    232c:	99 81       	ldd	r25, Y+1	; 0x01
    232e:	0e 94 a5 03 	call	0x74a	; 0x74a <validate>
    2332:	81 11       	cpse	r24, r1
    2334:	7a c1       	rjmp	.+756    	; 0x262a <f_write+0x336>
    2336:	8c 81       	ldd	r24, Y+4	; 0x04
    2338:	88 23       	and	r24, r24
    233a:	0c f4       	brge	.+2      	; 0x233e <f_write+0x4a>
    233c:	73 c1       	rjmp	.+742    	; 0x2624 <f_write+0x330>
    233e:	81 ff       	sbrs	r24, 1
    2340:	73 c1       	rjmp	.+742    	; 0x2628 <f_write+0x334>
    2342:	8a 85       	ldd	r24, Y+10	; 0x0a
    2344:	9b 85       	ldd	r25, Y+11	; 0x0b
    2346:	ac 85       	ldd	r26, Y+12	; 0x0c
    2348:	bd 85       	ldd	r27, Y+13	; 0x0d
    234a:	ac 01       	movw	r20, r24
    234c:	bd 01       	movw	r22, r26
    234e:	4c 0d       	add	r20, r12
    2350:	5d 1d       	adc	r21, r13
    2352:	61 1d       	adc	r22, r1
    2354:	71 1d       	adc	r23, r1
    2356:	48 17       	cp	r20, r24
    2358:	59 07       	cpc	r21, r25
    235a:	6a 07       	cpc	r22, r26
    235c:	7b 07       	cpc	r23, r27
    235e:	08 f4       	brcc	.+2      	; 0x2362 <f_write+0x6e>
    2360:	4b c1       	rjmp	.+662    	; 0x25f8 <f_write+0x304>
    2362:	c1 14       	cp	r12, r1
    2364:	d1 04       	cpc	r13, r1
    2366:	09 f4       	brne	.+2      	; 0x236a <f_write+0x76>
    2368:	47 c1       	rjmp	.+654    	; 0x25f8 <f_write+0x304>
    236a:	4e 81       	ldd	r20, Y+6	; 0x06
    236c:	5f 81       	ldd	r21, Y+7	; 0x07
    236e:	68 85       	ldd	r22, Y+8	; 0x08
    2370:	79 85       	ldd	r23, Y+9	; 0x09
    2372:	db 01       	movw	r26, r22
    2374:	ca 01       	movw	r24, r20
    2376:	91 70       	andi	r25, 0x01	; 1
    2378:	aa 27       	eor	r26, r26
    237a:	bb 27       	eor	r27, r27
    237c:	89 2b       	or	r24, r25
    237e:	8a 2b       	or	r24, r26
    2380:	8b 2b       	or	r24, r27
    2382:	09 f0       	breq	.+2      	; 0x2386 <f_write+0x92>
    2384:	f1 c0       	rjmp	.+482    	; 0x2568 <f_write+0x274>
    2386:	e8 81       	ld	r30, Y
    2388:	f9 81       	ldd	r31, Y+1	; 0x01
    238a:	12 81       	ldd	r17, Z+2	; 0x02
    238c:	11 50       	subi	r17, 0x01	; 1
    238e:	db 01       	movw	r26, r22
    2390:	ca 01       	movw	r24, r20
    2392:	07 2e       	mov	r0, r23
    2394:	79 e0       	ldi	r23, 0x09	; 9
    2396:	b6 95       	lsr	r27
    2398:	a7 95       	ror	r26
    239a:	97 95       	ror	r25
    239c:	87 95       	ror	r24
    239e:	7a 95       	dec	r23
    23a0:	d1 f7       	brne	.-12     	; 0x2396 <f_write+0xa2>
    23a2:	70 2d       	mov	r23, r0
    23a4:	18 23       	and	r17, r24
    23a6:	f1 f5       	brne	.+124    	; 0x2424 <f_write+0x130>
    23a8:	45 2b       	or	r20, r21
    23aa:	46 2b       	or	r20, r22
    23ac:	47 2b       	or	r20, r23
    23ae:	a1 f4       	brne	.+40     	; 0x23d8 <f_write+0xe4>
    23b0:	6e 85       	ldd	r22, Y+14	; 0x0e
    23b2:	7f 85       	ldd	r23, Y+15	; 0x0f
    23b4:	88 89       	ldd	r24, Y+16	; 0x10
    23b6:	99 89       	ldd	r25, Y+17	; 0x11
    23b8:	61 15       	cp	r22, r1
    23ba:	71 05       	cpc	r23, r1
    23bc:	81 05       	cpc	r24, r1
    23be:	91 05       	cpc	r25, r1
    23c0:	c1 f4       	brne	.+48     	; 0x23f2 <f_write+0xfe>
    23c2:	40 e0       	ldi	r20, 0x00	; 0
    23c4:	50 e0       	ldi	r21, 0x00	; 0
    23c6:	ba 01       	movw	r22, r20
    23c8:	cf 01       	movw	r24, r30
    23ca:	0e 94 ed 09 	call	0x13da	; 0x13da <create_chain>
    23ce:	6e 87       	std	Y+14, r22	; 0x0e
    23d0:	7f 87       	std	Y+15, r23	; 0x0f
    23d2:	88 8b       	std	Y+16, r24	; 0x10
    23d4:	99 8b       	std	Y+17, r25	; 0x11
    23d6:	07 c0       	rjmp	.+14     	; 0x23e6 <f_write+0xf2>
    23d8:	4a 89       	ldd	r20, Y+18	; 0x12
    23da:	5b 89       	ldd	r21, Y+19	; 0x13
    23dc:	6c 89       	ldd	r22, Y+20	; 0x14
    23de:	7d 89       	ldd	r23, Y+21	; 0x15
    23e0:	cf 01       	movw	r24, r30
    23e2:	0e 94 ed 09 	call	0x13da	; 0x13da <create_chain>
    23e6:	61 15       	cp	r22, r1
    23e8:	71 05       	cpc	r23, r1
    23ea:	81 05       	cpc	r24, r1
    23ec:	91 05       	cpc	r25, r1
    23ee:	09 f4       	brne	.+2      	; 0x23f2 <f_write+0xfe>
    23f0:	03 c1       	rjmp	.+518    	; 0x25f8 <f_write+0x304>
    23f2:	61 30       	cpi	r22, 0x01	; 1
    23f4:	71 05       	cpc	r23, r1
    23f6:	81 05       	cpc	r24, r1
    23f8:	91 05       	cpc	r25, r1
    23fa:	29 f4       	brne	.+10     	; 0x2406 <f_write+0x112>
    23fc:	8c 81       	ldd	r24, Y+4	; 0x04
    23fe:	80 68       	ori	r24, 0x80	; 128
    2400:	8c 83       	std	Y+4, r24	; 0x04
    2402:	82 e0       	ldi	r24, 0x02	; 2
    2404:	12 c1       	rjmp	.+548    	; 0x262a <f_write+0x336>
    2406:	6f 3f       	cpi	r22, 0xFF	; 255
    2408:	ff ef       	ldi	r31, 0xFF	; 255
    240a:	7f 07       	cpc	r23, r31
    240c:	8f 07       	cpc	r24, r31
    240e:	9f 07       	cpc	r25, r31
    2410:	29 f4       	brne	.+10     	; 0x241c <f_write+0x128>
    2412:	8c 81       	ldd	r24, Y+4	; 0x04
    2414:	80 68       	ori	r24, 0x80	; 128
    2416:	8c 83       	std	Y+4, r24	; 0x04
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	07 c1       	rjmp	.+526    	; 0x262a <f_write+0x336>
    241c:	6a 8b       	std	Y+18, r22	; 0x12
    241e:	7b 8b       	std	Y+19, r23	; 0x13
    2420:	8c 8b       	std	Y+20, r24	; 0x14
    2422:	9d 8b       	std	Y+21, r25	; 0x15
    2424:	e8 81       	ld	r30, Y
    2426:	f9 81       	ldd	r31, Y+1	; 0x01
    2428:	46 a5       	ldd	r20, Z+46	; 0x2e
    242a:	57 a5       	ldd	r21, Z+47	; 0x2f
    242c:	60 a9       	ldd	r22, Z+48	; 0x30
    242e:	71 a9       	ldd	r23, Z+49	; 0x31
    2430:	8e 89       	ldd	r24, Y+22	; 0x16
    2432:	9f 89       	ldd	r25, Y+23	; 0x17
    2434:	a8 8d       	ldd	r26, Y+24	; 0x18
    2436:	b9 8d       	ldd	r27, Y+25	; 0x19
    2438:	48 17       	cp	r20, r24
    243a:	59 07       	cpc	r21, r25
    243c:	6a 07       	cpc	r22, r26
    243e:	7b 07       	cpc	r23, r27
    2440:	69 f4       	brne	.+26     	; 0x245c <f_write+0x168>
    2442:	40 e0       	ldi	r20, 0x00	; 0
    2444:	50 e0       	ldi	r21, 0x00	; 0
    2446:	ba 01       	movw	r22, r20
    2448:	cf 01       	movw	r24, r30
    244a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <move_window>
    244e:	88 23       	and	r24, r24
    2450:	29 f0       	breq	.+10     	; 0x245c <f_write+0x168>
    2452:	8c 81       	ldd	r24, Y+4	; 0x04
    2454:	80 68       	ori	r24, 0x80	; 128
    2456:	8c 83       	std	Y+4, r24	; 0x04
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	e7 c0       	rjmp	.+462    	; 0x262a <f_write+0x336>
    245c:	28 80       	ld	r2, Y
    245e:	39 80       	ldd	r3, Y+1	; 0x01
    2460:	4a 89       	ldd	r20, Y+18	; 0x12
    2462:	5b 89       	ldd	r21, Y+19	; 0x13
    2464:	6c 89       	ldd	r22, Y+20	; 0x14
    2466:	7d 89       	ldd	r23, Y+21	; 0x15
    2468:	c1 01       	movw	r24, r2
    246a:	0e 94 0a 07 	call	0xe14	; 0xe14 <clust2sect>
    246e:	61 15       	cp	r22, r1
    2470:	71 05       	cpc	r23, r1
    2472:	81 05       	cpc	r24, r1
    2474:	91 05       	cpc	r25, r1
    2476:	29 f4       	brne	.+10     	; 0x2482 <f_write+0x18e>
    2478:	8c 81       	ldd	r24, Y+4	; 0x04
    247a:	80 68       	ori	r24, 0x80	; 128
    247c:	8c 83       	std	Y+4, r24	; 0x04
    247e:	82 e0       	ldi	r24, 0x02	; 2
    2480:	d4 c0       	rjmp	.+424    	; 0x262a <f_write+0x336>
    2482:	2b 01       	movw	r4, r22
    2484:	3c 01       	movw	r6, r24
    2486:	41 0e       	add	r4, r17
    2488:	51 1c       	adc	r5, r1
    248a:	61 1c       	adc	r6, r1
    248c:	71 1c       	adc	r7, r1
    248e:	76 01       	movw	r14, r12
    2490:	ef 2c       	mov	r14, r15
    2492:	ff 24       	eor	r15, r15
    2494:	e6 94       	lsr	r14
    2496:	e1 14       	cp	r14, r1
    2498:	f1 04       	cpc	r15, r1
    249a:	09 f4       	brne	.+2      	; 0x249e <f_write+0x1aa>
    249c:	41 c0       	rjmp	.+130    	; 0x2520 <f_write+0x22c>
    249e:	f1 01       	movw	r30, r2
    24a0:	42 81       	ldd	r20, Z+2	; 0x02
    24a2:	24 2f       	mov	r18, r20
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	c7 01       	movw	r24, r14
    24a8:	81 0f       	add	r24, r17
    24aa:	91 1d       	adc	r25, r1
    24ac:	28 17       	cp	r18, r24
    24ae:	39 07       	cpc	r19, r25
    24b0:	18 f4       	brcc	.+6      	; 0x24b8 <f_write+0x1c4>
    24b2:	79 01       	movw	r14, r18
    24b4:	e1 1a       	sub	r14, r17
    24b6:	f1 08       	sbc	r15, r1
    24b8:	0e 2d       	mov	r16, r14
    24ba:	a3 01       	movw	r20, r6
    24bc:	92 01       	movw	r18, r4
    24be:	b4 01       	movw	r22, r8
    24c0:	f1 01       	movw	r30, r2
    24c2:	81 81       	ldd	r24, Z+1	; 0x01
    24c4:	0e 94 93 2b 	call	0x5726	; 0x5726 <disk_write>
    24c8:	88 23       	and	r24, r24
    24ca:	29 f0       	breq	.+10     	; 0x24d6 <f_write+0x1e2>
    24cc:	8c 81       	ldd	r24, Y+4	; 0x04
    24ce:	80 68       	ori	r24, 0x80	; 128
    24d0:	8c 83       	std	Y+4, r24	; 0x04
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	aa c0       	rjmp	.+340    	; 0x262a <f_write+0x336>
    24d6:	e8 81       	ld	r30, Y
    24d8:	f9 81       	ldd	r31, Y+1	; 0x01
    24da:	86 a5       	ldd	r24, Z+46	; 0x2e
    24dc:	97 a5       	ldd	r25, Z+47	; 0x2f
    24de:	a0 a9       	ldd	r26, Z+48	; 0x30
    24e0:	b1 a9       	ldd	r27, Z+49	; 0x31
    24e2:	84 19       	sub	r24, r4
    24e4:	95 09       	sbc	r25, r5
    24e6:	a6 09       	sbc	r26, r6
    24e8:	b7 09       	sbc	r27, r7
    24ea:	a7 01       	movw	r20, r14
    24ec:	60 e0       	ldi	r22, 0x00	; 0
    24ee:	70 e0       	ldi	r23, 0x00	; 0
    24f0:	84 17       	cp	r24, r20
    24f2:	95 07       	cpc	r25, r21
    24f4:	a6 07       	cpc	r26, r22
    24f6:	b7 07       	cpc	r27, r23
    24f8:	78 f4       	brcc	.+30     	; 0x2518 <f_write+0x224>
    24fa:	98 2f       	mov	r25, r24
    24fc:	88 27       	eor	r24, r24
    24fe:	99 0f       	add	r25, r25
    2500:	b4 01       	movw	r22, r8
    2502:	68 0f       	add	r22, r24
    2504:	79 1f       	adc	r23, r25
    2506:	40 e0       	ldi	r20, 0x00	; 0
    2508:	52 e0       	ldi	r21, 0x02	; 2
    250a:	cf 01       	movw	r24, r30
    250c:	c2 96       	adiw	r24, 0x32	; 50
    250e:	0e 94 45 02 	call	0x48a	; 0x48a <mem_cpy>
    2512:	e8 81       	ld	r30, Y
    2514:	f9 81       	ldd	r31, Y+1	; 0x01
    2516:	14 82       	std	Z+4, r1	; 0x04
    2518:	fe 2c       	mov	r15, r14
    251a:	ee 24       	eor	r14, r14
    251c:	ff 0c       	add	r15, r15
    251e:	53 c0       	rjmp	.+166    	; 0x25c6 <f_write+0x2d2>
    2520:	4e 81       	ldd	r20, Y+6	; 0x06
    2522:	5f 81       	ldd	r21, Y+7	; 0x07
    2524:	68 85       	ldd	r22, Y+8	; 0x08
    2526:	79 85       	ldd	r23, Y+9	; 0x09
    2528:	8a 85       	ldd	r24, Y+10	; 0x0a
    252a:	9b 85       	ldd	r25, Y+11	; 0x0b
    252c:	ac 85       	ldd	r26, Y+12	; 0x0c
    252e:	bd 85       	ldd	r27, Y+13	; 0x0d
    2530:	48 17       	cp	r20, r24
    2532:	59 07       	cpc	r21, r25
    2534:	6a 07       	cpc	r22, r26
    2536:	7b 07       	cpc	r23, r27
    2538:	98 f0       	brcs	.+38     	; 0x2560 <f_write+0x26c>
    253a:	40 e0       	ldi	r20, 0x00	; 0
    253c:	50 e0       	ldi	r21, 0x00	; 0
    253e:	ba 01       	movw	r22, r20
    2540:	c1 01       	movw	r24, r2
    2542:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <move_window>
    2546:	88 23       	and	r24, r24
    2548:	29 f0       	breq	.+10     	; 0x2554 <f_write+0x260>
    254a:	8c 81       	ldd	r24, Y+4	; 0x04
    254c:	80 68       	ori	r24, 0x80	; 128
    254e:	8c 83       	std	Y+4, r24	; 0x04
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	6b c0       	rjmp	.+214    	; 0x262a <f_write+0x336>
    2554:	e8 81       	ld	r30, Y
    2556:	f9 81       	ldd	r31, Y+1	; 0x01
    2558:	46 a6       	std	Z+46, r4	; 0x2e
    255a:	57 a6       	std	Z+47, r5	; 0x2f
    255c:	60 aa       	std	Z+48, r6	; 0x30
    255e:	71 aa       	std	Z+49, r7	; 0x31
    2560:	4e 8a       	std	Y+22, r4	; 0x16
    2562:	5f 8a       	std	Y+23, r5	; 0x17
    2564:	68 8e       	std	Y+24, r6	; 0x18
    2566:	79 8e       	std	Y+25, r7	; 0x19
    2568:	8e 81       	ldd	r24, Y+6	; 0x06
    256a:	9f 81       	ldd	r25, Y+7	; 0x07
    256c:	91 70       	andi	r25, 0x01	; 1
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	32 e0       	ldi	r19, 0x02	; 2
    2572:	79 01       	movw	r14, r18
    2574:	e8 1a       	sub	r14, r24
    2576:	f9 0a       	sbc	r15, r25
    2578:	ce 14       	cp	r12, r14
    257a:	df 04       	cpc	r13, r15
    257c:	08 f4       	brcc	.+2      	; 0x2580 <f_write+0x28c>
    257e:	76 01       	movw	r14, r12
    2580:	4e 89       	ldd	r20, Y+22	; 0x16
    2582:	5f 89       	ldd	r21, Y+23	; 0x17
    2584:	68 8d       	ldd	r22, Y+24	; 0x18
    2586:	79 8d       	ldd	r23, Y+25	; 0x19
    2588:	88 81       	ld	r24, Y
    258a:	99 81       	ldd	r25, Y+1	; 0x01
    258c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <move_window>
    2590:	88 23       	and	r24, r24
    2592:	29 f0       	breq	.+10     	; 0x259e <f_write+0x2aa>
    2594:	8c 81       	ldd	r24, Y+4	; 0x04
    2596:	80 68       	ori	r24, 0x80	; 128
    2598:	8c 83       	std	Y+4, r24	; 0x04
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	46 c0       	rjmp	.+140    	; 0x262a <f_write+0x336>
    259e:	8e 81       	ldd	r24, Y+6	; 0x06
    25a0:	9f 81       	ldd	r25, Y+7	; 0x07
    25a2:	a8 85       	ldd	r26, Y+8	; 0x08
    25a4:	b9 85       	ldd	r27, Y+9	; 0x09
    25a6:	91 70       	andi	r25, 0x01	; 1
    25a8:	aa 27       	eor	r26, r26
    25aa:	bb 27       	eor	r27, r27
    25ac:	c2 96       	adiw	r24, 0x32	; 50
    25ae:	28 81       	ld	r18, Y
    25b0:	39 81       	ldd	r19, Y+1	; 0x01
    25b2:	a7 01       	movw	r20, r14
    25b4:	b4 01       	movw	r22, r8
    25b6:	82 0f       	add	r24, r18
    25b8:	93 1f       	adc	r25, r19
    25ba:	0e 94 45 02 	call	0x48a	; 0x48a <mem_cpy>
    25be:	e8 81       	ld	r30, Y
    25c0:	f9 81       	ldd	r31, Y+1	; 0x01
    25c2:	21 e0       	ldi	r18, 0x01	; 1
    25c4:	24 83       	std	Z+4, r18	; 0x04
    25c6:	8e 0c       	add	r8, r14
    25c8:	9f 1c       	adc	r9, r15
    25ca:	8e 81       	ldd	r24, Y+6	; 0x06
    25cc:	9f 81       	ldd	r25, Y+7	; 0x07
    25ce:	a8 85       	ldd	r26, Y+8	; 0x08
    25d0:	b9 85       	ldd	r27, Y+9	; 0x09
    25d2:	8e 0d       	add	r24, r14
    25d4:	9f 1d       	adc	r25, r15
    25d6:	a1 1d       	adc	r26, r1
    25d8:	b1 1d       	adc	r27, r1
    25da:	8e 83       	std	Y+6, r24	; 0x06
    25dc:	9f 83       	std	Y+7, r25	; 0x07
    25de:	a8 87       	std	Y+8, r26	; 0x08
    25e0:	b9 87       	std	Y+9, r27	; 0x09
    25e2:	f5 01       	movw	r30, r10
    25e4:	80 81       	ld	r24, Z
    25e6:	91 81       	ldd	r25, Z+1	; 0x01
    25e8:	8e 0d       	add	r24, r14
    25ea:	9f 1d       	adc	r25, r15
    25ec:	91 83       	std	Z+1, r25	; 0x01
    25ee:	80 83       	st	Z, r24
    25f0:	ce 18       	sub	r12, r14
    25f2:	df 08       	sbc	r13, r15
    25f4:	09 f0       	breq	.+2      	; 0x25f8 <f_write+0x304>
    25f6:	b9 ce       	rjmp	.-654    	; 0x236a <f_write+0x76>
    25f8:	8e 81       	ldd	r24, Y+6	; 0x06
    25fa:	9f 81       	ldd	r25, Y+7	; 0x07
    25fc:	a8 85       	ldd	r26, Y+8	; 0x08
    25fe:	b9 85       	ldd	r27, Y+9	; 0x09
    2600:	4a 85       	ldd	r20, Y+10	; 0x0a
    2602:	5b 85       	ldd	r21, Y+11	; 0x0b
    2604:	6c 85       	ldd	r22, Y+12	; 0x0c
    2606:	7d 85       	ldd	r23, Y+13	; 0x0d
    2608:	48 17       	cp	r20, r24
    260a:	59 07       	cpc	r21, r25
    260c:	6a 07       	cpc	r22, r26
    260e:	7b 07       	cpc	r23, r27
    2610:	20 f4       	brcc	.+8      	; 0x261a <f_write+0x326>
    2612:	8a 87       	std	Y+10, r24	; 0x0a
    2614:	9b 87       	std	Y+11, r25	; 0x0b
    2616:	ac 87       	std	Y+12, r26	; 0x0c
    2618:	bd 87       	std	Y+13, r27	; 0x0d
    261a:	8c 81       	ldd	r24, Y+4	; 0x04
    261c:	80 62       	ori	r24, 0x20	; 32
    261e:	8c 83       	std	Y+4, r24	; 0x04
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	03 c0       	rjmp	.+6      	; 0x262a <f_write+0x336>
    2624:	82 e0       	ldi	r24, 0x02	; 2
    2626:	01 c0       	rjmp	.+2      	; 0x262a <f_write+0x336>
    2628:	87 e0       	ldi	r24, 0x07	; 7
    262a:	df 91       	pop	r29
    262c:	cf 91       	pop	r28
    262e:	1f 91       	pop	r17
    2630:	0f 91       	pop	r16
    2632:	ff 90       	pop	r15
    2634:	ef 90       	pop	r14
    2636:	df 90       	pop	r13
    2638:	cf 90       	pop	r12
    263a:	bf 90       	pop	r11
    263c:	af 90       	pop	r10
    263e:	9f 90       	pop	r9
    2640:	8f 90       	pop	r8
    2642:	7f 90       	pop	r7
    2644:	6f 90       	pop	r6
    2646:	5f 90       	pop	r5
    2648:	4f 90       	pop	r4
    264a:	3f 90       	pop	r3
    264c:	2f 90       	pop	r2
    264e:	08 95       	ret

00002650 <f_sync>:
    2650:	0f 93       	push	r16
    2652:	1f 93       	push	r17
    2654:	cf 93       	push	r28
    2656:	df 93       	push	r29
    2658:	ec 01       	movw	r28, r24
    265a:	6a 81       	ldd	r22, Y+2	; 0x02
    265c:	7b 81       	ldd	r23, Y+3	; 0x03
    265e:	88 81       	ld	r24, Y
    2660:	99 81       	ldd	r25, Y+1	; 0x01
    2662:	0e 94 a5 03 	call	0x74a	; 0x74a <validate>
    2666:	81 11       	cpse	r24, r1
    2668:	37 c0       	rjmp	.+110    	; 0x26d8 <f_sync+0x88>
    266a:	9c 81       	ldd	r25, Y+4	; 0x04
    266c:	95 ff       	sbrs	r25, 5
    266e:	34 c0       	rjmp	.+104    	; 0x26d8 <f_sync+0x88>
    2670:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2672:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2674:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2676:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2678:	88 81       	ld	r24, Y
    267a:	99 81       	ldd	r25, Y+1	; 0x01
    267c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <move_window>
    2680:	81 11       	cpse	r24, r1
    2682:	2a c0       	rjmp	.+84     	; 0x26d8 <f_sync+0x88>
    2684:	0e 8d       	ldd	r16, Y+30	; 0x1e
    2686:	1f 8d       	ldd	r17, Y+31	; 0x1f
    2688:	f8 01       	movw	r30, r16
    268a:	83 85       	ldd	r24, Z+11	; 0x0b
    268c:	80 62       	ori	r24, 0x20	; 32
    268e:	83 87       	std	Z+11, r24	; 0x0b
    2690:	8a 85       	ldd	r24, Y+10	; 0x0a
    2692:	9b 85       	ldd	r25, Y+11	; 0x0b
    2694:	ac 85       	ldd	r26, Y+12	; 0x0c
    2696:	bd 85       	ldd	r27, Y+13	; 0x0d
    2698:	84 8f       	std	Z+28, r24	; 0x1c
    269a:	95 8f       	std	Z+29, r25	; 0x1d
    269c:	a6 8f       	std	Z+30, r26	; 0x1e
    269e:	b7 8f       	std	Z+31, r27	; 0x1f
    26a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    26a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    26a4:	93 8f       	std	Z+27, r25	; 0x1b
    26a6:	82 8f       	std	Z+26, r24	; 0x1a
    26a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    26aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    26ac:	a8 89       	ldd	r26, Y+16	; 0x10
    26ae:	b9 89       	ldd	r27, Y+17	; 0x11
    26b0:	b5 8b       	std	Z+21, r27	; 0x15
    26b2:	a4 8b       	std	Z+20, r26	; 0x14
    26b4:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <get_fattime>
    26b8:	f8 01       	movw	r30, r16
    26ba:	66 8b       	std	Z+22, r22	; 0x16
    26bc:	77 8b       	std	Z+23, r23	; 0x17
    26be:	80 8f       	std	Z+24, r24	; 0x18
    26c0:	91 8f       	std	Z+25, r25	; 0x19
    26c2:	8c 81       	ldd	r24, Y+4	; 0x04
    26c4:	8f 7d       	andi	r24, 0xDF	; 223
    26c6:	8c 83       	std	Y+4, r24	; 0x04
    26c8:	e8 81       	ld	r30, Y
    26ca:	f9 81       	ldd	r31, Y+1	; 0x01
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	84 83       	std	Z+4, r24	; 0x04
    26d0:	88 81       	ld	r24, Y
    26d2:	99 81       	ldd	r25, Y+1	; 0x01
    26d4:	0e 94 a5 06 	call	0xd4a	; 0xd4a <sync>
    26d8:	df 91       	pop	r29
    26da:	cf 91       	pop	r28
    26dc:	1f 91       	pop	r17
    26de:	0f 91       	pop	r16
    26e0:	08 95       	ret

000026e2 <f_close>:
    26e2:	cf 93       	push	r28
    26e4:	df 93       	push	r29
    26e6:	ec 01       	movw	r28, r24
    26e8:	0e 94 28 13 	call	0x2650	; 0x2650 <f_sync>
    26ec:	81 11       	cpse	r24, r1
    26ee:	02 c0       	rjmp	.+4      	; 0x26f4 <f_close+0x12>
    26f0:	19 82       	std	Y+1, r1	; 0x01
    26f2:	18 82       	st	Y, r1
    26f4:	df 91       	pop	r29
    26f6:	cf 91       	pop	r28
    26f8:	08 95       	ret

000026fa <f_getcwd>:
#if _FS_RPATH >= 2
FRESULT f_getcwd (
	TCHAR *path,	/* Pointer to the directory path */
	UINT sz_path	/* Size of path */
)
{
    26fa:	4f 92       	push	r4
    26fc:	5f 92       	push	r5
    26fe:	6f 92       	push	r6
    2700:	7f 92       	push	r7
    2702:	9f 92       	push	r9
    2704:	af 92       	push	r10
    2706:	bf 92       	push	r11
    2708:	cf 92       	push	r12
    270a:	df 92       	push	r13
    270c:	ef 92       	push	r14
    270e:	ff 92       	push	r15
    2710:	0f 93       	push	r16
    2712:	1f 93       	push	r17
    2714:	cf 93       	push	r28
    2716:	df 93       	push	r29
    2718:	cd b7       	in	r28, 0x3d	; 61
    271a:	de b7       	in	r29, 0x3e	; 62
    271c:	ea 97       	sbiw	r28, 0x3a	; 58
    271e:	0f b6       	in	r0, 0x3f	; 63
    2720:	f8 94       	cli
    2722:	de bf       	out	0x3e, r29	; 62
    2724:	0f be       	out	0x3f, r0	; 63
    2726:	cd bf       	out	0x3d, r28	; 61
    2728:	9a af       	std	Y+58, r25	; 0x3a
    272a:	89 af       	std	Y+57, r24	; 0x39
    272c:	5b 01       	movw	r10, r22
	TCHAR *tp;
	FILINFO fno;
	DEF_NAMEBUF;


	*path = 0;
    272e:	fc 01       	movw	r30, r24
    2730:	10 82       	st	Z, r1
	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
    2732:	40 e0       	ldi	r20, 0x00	; 0
    2734:	be 01       	movw	r22, r28
    2736:	6f 5f       	subi	r22, 0xFF	; 255
    2738:	7f 4f       	sbci	r23, 0xFF	; 255
    273a:	ce 01       	movw	r24, r28
    273c:	c9 96       	adiw	r24, 0x39	; 57
    273e:	0e 94 bf 03 	call	0x77e	; 0x77e <chk_mounted>
    2742:	98 2e       	mov	r9, r24
	if (res == FR_OK) {
    2744:	81 11       	cpse	r24, r1
    2746:	03 c1       	rjmp	.+518    	; 0x294e <f_getcwd+0x254>
		INIT_BUF(dj);
    2748:	ce 01       	movw	r24, r28
    274a:	8d 96       	adiw	r24, 0x2d	; 45
    274c:	9e 8b       	std	Y+22, r25	; 0x16
    274e:	8d 8b       	std	Y+21, r24	; 0x15
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
    2750:	e9 81       	ldd	r30, Y+1	; 0x01
    2752:	fa 81       	ldd	r31, Y+2	; 0x02
    2754:	46 88       	ldd	r4, Z+22	; 0x16
    2756:	57 88       	ldd	r5, Z+23	; 0x17
    2758:	60 8c       	ldd	r6, Z+24	; 0x18
    275a:	71 8c       	ldd	r7, Z+25	; 0x19
    275c:	4f 82       	std	Y+7, r4	; 0x07
    275e:	58 86       	std	Y+8, r5	; 0x08
    2760:	69 86       	std	Y+9, r6	; 0x09
    2762:	7a 86       	std	Y+10, r7	; 0x0a
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
    2764:	41 14       	cp	r4, r1
    2766:	51 04       	cpc	r5, r1
    2768:	61 04       	cpc	r6, r1
    276a:	71 04       	cpc	r7, r1
    276c:	09 f4       	brne	.+2      	; 0x2770 <f_getcwd+0x76>
    276e:	e6 c0       	rjmp	.+460    	; 0x293c <f_getcwd+0x242>
    2770:	65 01       	movw	r12, r10
    2772:	7e 01       	movw	r14, r28
    2774:	f0 e2       	ldi	r31, 0x20	; 32
    2776:	ef 0e       	add	r14, r31
    2778:	f1 1c       	adc	r15, r1
			for (n = 0; tp[n]; n++) ;
			if (i < n + 3) {
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
    277a:	0f e2       	ldi	r16, 0x2F	; 47
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
			res = dir_sdi(&dj, 1);			/* Get parent dir */
    277c:	61 e0       	ldi	r22, 0x01	; 1
    277e:	70 e0       	ldi	r23, 0x00	; 0
    2780:	ce 01       	movw	r24, r28
    2782:	01 96       	adiw	r24, 0x01	; 1
    2784:	0e 94 15 08 	call	0x102a	; 0x102a <dir_sdi>
			if (res != FR_OK) break;
    2788:	81 11       	cpse	r24, r1
    278a:	b2 c0       	rjmp	.+356    	; 0x28f0 <f_getcwd+0x1f6>
			res = dir_read(&dj);
    278c:	ce 01       	movw	r24, r28
    278e:	01 96       	adiw	r24, 0x01	; 1
    2790:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <dir_read>
			if (res != FR_OK) break;
    2794:	81 11       	cpse	r24, r1
    2796:	ae c0       	rjmp	.+348    	; 0x28f4 <f_getcwd+0x1fa>
			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
    2798:	eb 89       	ldd	r30, Y+19	; 0x13
    279a:	fc 89       	ldd	r31, Y+20	; 0x14
    279c:	84 89       	ldd	r24, Z+20	; 0x14
    279e:	95 89       	ldd	r25, Z+21	; 0x15
    27a0:	a0 e0       	ldi	r26, 0x00	; 0
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	dc 01       	movw	r26, r24
    27a6:	99 27       	eor	r25, r25
    27a8:	88 27       	eor	r24, r24
    27aa:	42 8d       	ldd	r20, Z+26	; 0x1a
    27ac:	53 8d       	ldd	r21, Z+27	; 0x1b
    27ae:	60 e0       	ldi	r22, 0x00	; 0
    27b0:	70 e0       	ldi	r23, 0x00	; 0
    27b2:	84 2b       	or	r24, r20
    27b4:	95 2b       	or	r25, r21
    27b6:	a6 2b       	or	r26, r22
    27b8:	b7 2b       	or	r27, r23
    27ba:	8f 83       	std	Y+7, r24	; 0x07
    27bc:	98 87       	std	Y+8, r25	; 0x08
    27be:	a9 87       	std	Y+9, r26	; 0x09
    27c0:	ba 87       	std	Y+10, r27	; 0x0a
			res = dir_sdi(&dj, 0);
    27c2:	60 e0       	ldi	r22, 0x00	; 0
    27c4:	70 e0       	ldi	r23, 0x00	; 0
    27c6:	ce 01       	movw	r24, r28
    27c8:	01 96       	adiw	r24, 0x01	; 1
    27ca:	0e 94 15 08 	call	0x102a	; 0x102a <dir_sdi>
			if (res != FR_OK) break;
    27ce:	81 11       	cpse	r24, r1
    27d0:	93 c0       	rjmp	.+294    	; 0x28f8 <f_getcwd+0x1fe>
			do {							/* Find the entry links to the child dir */
				res = dir_read(&dj);
    27d2:	ce 01       	movw	r24, r28
    27d4:	01 96       	adiw	r24, 0x01	; 1
    27d6:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <dir_read>
    27da:	18 2f       	mov	r17, r24
				if (res != FR_OK) break;
    27dc:	81 11       	cpse	r24, r1
    27de:	9a c0       	rjmp	.+308    	; 0x2914 <f_getcwd+0x21a>
				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
    27e0:	eb 89       	ldd	r30, Y+19	; 0x13
    27e2:	fc 89       	ldd	r31, Y+20	; 0x14
    27e4:	84 89       	ldd	r24, Z+20	; 0x14
    27e6:	95 89       	ldd	r25, Z+21	; 0x15
    27e8:	a0 e0       	ldi	r26, 0x00	; 0
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	dc 01       	movw	r26, r24
    27ee:	99 27       	eor	r25, r25
    27f0:	88 27       	eor	r24, r24
    27f2:	42 8d       	ldd	r20, Z+26	; 0x1a
    27f4:	53 8d       	ldd	r21, Z+27	; 0x1b
    27f6:	60 e0       	ldi	r22, 0x00	; 0
    27f8:	70 e0       	ldi	r23, 0x00	; 0
    27fa:	84 2b       	or	r24, r20
    27fc:	95 2b       	or	r25, r21
    27fe:	a6 2b       	or	r26, r22
    2800:	b7 2b       	or	r27, r23
    2802:	84 15       	cp	r24, r4
    2804:	95 05       	cpc	r25, r5
    2806:	a6 05       	cpc	r26, r6
    2808:	b7 05       	cpc	r27, r7
    280a:	09 f4       	brne	.+2      	; 0x280e <f_getcwd+0x114>
    280c:	87 c0       	rjmp	.+270    	; 0x291c <f_getcwd+0x222>
				res = dir_next(&dj, 0);	
    280e:	60 e0       	ldi	r22, 0x00	; 0
    2810:	70 e0       	ldi	r23, 0x00	; 0
    2812:	ce 01       	movw	r24, r28
    2814:	01 96       	adiw	r24, 0x01	; 1
    2816:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <dir_next>
    281a:	18 2f       	mov	r17, r24
			} while (res == FR_OK);
    281c:	88 23       	and	r24, r24
    281e:	c9 f2       	breq	.-78     	; 0x27d2 <f_getcwd+0xd8>
    2820:	79 c0       	rjmp	.+242    	; 0x2914 <f_getcwd+0x21a>
    2822:	de 01       	movw	r26, r28
    2824:	91 96       	adiw	r26, 0x21	; 33
			fno.lfsize = i;
#endif
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
    2826:	e0 e0       	ldi	r30, 0x00	; 0
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	01 c0       	rjmp	.+2      	; 0x282e <f_getcwd+0x134>
    282c:	f9 01       	movw	r30, r18
    282e:	9f 01       	movw	r18, r30
    2830:	2f 5f       	subi	r18, 0xFF	; 255
    2832:	3f 4f       	sbci	r19, 0xFF	; 255
    2834:	8d 91       	ld	r24, X+
    2836:	81 11       	cpse	r24, r1
    2838:	f9 cf       	rjmp	.-14     	; 0x282c <f_getcwd+0x132>
			if (i < n + 3) {
    283a:	cf 01       	movw	r24, r30
    283c:	04 96       	adiw	r24, 0x04	; 4
    283e:	c8 16       	cp	r12, r24
    2840:	d9 06       	cpc	r13, r25
    2842:	08 f4       	brcc	.+2      	; 0x2846 <f_getcwd+0x14c>
    2844:	5b c0       	rjmp	.+182    	; 0x28fc <f_getcwd+0x202>
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
    2846:	21 15       	cp	r18, r1
    2848:	31 05       	cpc	r19, r1
    284a:	a1 f0       	breq	.+40     	; 0x2874 <f_getcwd+0x17a>
    284c:	3a 96       	adiw	r30, 0x0a	; 10
    284e:	87 e1       	ldi	r24, 0x17	; 23
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	8c 0f       	add	r24, r28
    2854:	9d 1f       	adc	r25, r29
    2856:	e8 0f       	add	r30, r24
    2858:	f9 1f       	adc	r31, r25
    285a:	c6 01       	movw	r24, r12
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	42 91       	ld	r20, -Z
    2860:	a9 ad       	ldd	r26, Y+57	; 0x39
    2862:	ba ad       	ldd	r27, Y+58	; 0x3a
    2864:	a8 0f       	add	r26, r24
    2866:	b9 1f       	adc	r27, r25
    2868:	4c 93       	st	X, r20
    286a:	ee 15       	cp	r30, r14
    286c:	ff 05       	cpc	r31, r15
    286e:	b1 f7       	brne	.-20     	; 0x285c <f_getcwd+0x162>
    2870:	c2 1a       	sub	r12, r18
    2872:	d3 0a       	sbc	r13, r19
			path[--i] = '/';
    2874:	91 e0       	ldi	r25, 0x01	; 1
    2876:	c9 1a       	sub	r12, r25
    2878:	d1 08       	sbc	r13, r1
    287a:	e9 ad       	ldd	r30, Y+57	; 0x39
    287c:	fa ad       	ldd	r31, Y+58	; 0x3a
    287e:	ec 0d       	add	r30, r12
    2880:	fd 1d       	adc	r31, r13
    2882:	00 83       	st	Z, r16
	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
    2884:	4f 80       	ldd	r4, Y+7	; 0x07
    2886:	58 84       	ldd	r5, Y+8	; 0x08
    2888:	69 84       	ldd	r6, Y+9	; 0x09
    288a:	7a 84       	ldd	r7, Y+10	; 0x0a
    288c:	41 14       	cp	r4, r1
    288e:	51 04       	cpc	r5, r1
    2890:	61 04       	cpc	r6, r1
    2892:	71 04       	cpc	r7, r1
    2894:	09 f0       	breq	.+2      	; 0x2898 <f_getcwd+0x19e>
    2896:	72 cf       	rjmp	.-284    	; 0x277c <f_getcwd+0x82>
    2898:	1d c0       	rjmp	.+58     	; 0x28d4 <f_getcwd+0x1da>
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
    289a:	a9 ad       	ldd	r26, Y+57	; 0x39
    289c:	ba ad       	ldd	r27, Y+58	; 0x3a
				res = dir_read(&dj);
				if (res != FR_OK) break;
				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
				res = dir_next(&dj, 0);	
			} while (res == FR_OK);
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
    289e:	68 94       	set
    28a0:	99 24       	eor	r9, r9
    28a2:	91 f8       	bld	r9, 1
    28a4:	15 c0       	rjmp	.+42     	; 0x28d0 <f_getcwd+0x1d6>
		tp = path;
		if (res == FR_OK) {
			*tp++ = '0' + CurrVol;			/* Put drive number */
			*tp++ = ':';
			if (i == sz_path) {				/* Root-dir */
				*tp++ = '/';
    28a6:	df 01       	movw	r26, r30
    28a8:	13 96       	adiw	r26, 0x03	; 3
    28aa:	8f e2       	ldi	r24, 0x2F	; 47
    28ac:	82 83       	std	Z+2, r24	; 0x02
    28ae:	10 c0       	rjmp	.+32     	; 0x28d0 <f_getcwd+0x1d6>
			} else {						/* Sub-dir */
				do		/* Add stacked path str */
					*tp++ = path[i++];
    28b0:	11 96       	adiw	r26, 0x01	; 1
    28b2:	e9 ad       	ldd	r30, Y+57	; 0x39
    28b4:	fa ad       	ldd	r31, Y+58	; 0x3a
    28b6:	ec 0d       	add	r30, r12
    28b8:	fd 1d       	adc	r31, r13
    28ba:	80 81       	ld	r24, Z
    28bc:	fd 01       	movw	r30, r26
    28be:	31 97       	sbiw	r30, 0x01	; 1
    28c0:	80 83       	st	Z, r24
    28c2:	f6 01       	movw	r30, r12
    28c4:	31 96       	adiw	r30, 0x01	; 1
    28c6:	6f 01       	movw	r12, r30
				while (i < sz_path);
    28c8:	ea 15       	cp	r30, r10
    28ca:	fb 05       	cpc	r31, r11
    28cc:	88 f3       	brcs	.-30     	; 0x28b0 <f_getcwd+0x1b6>
    28ce:	91 2e       	mov	r9, r17
			}
		}
		*tp = 0;
    28d0:	1c 92       	st	X, r1
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
    28d2:	3d c0       	rjmp	.+122    	; 0x294e <f_getcwd+0x254>
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
    28d4:	e9 ad       	ldd	r30, Y+57	; 0x39
    28d6:	fa ad       	ldd	r31, Y+58	; 0x3a
		if (res == FR_OK) {
			*tp++ = '0' + CurrVol;			/* Put drive number */
    28d8:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
    28dc:	80 5d       	subi	r24, 0xD0	; 208
    28de:	80 83       	st	Z, r24
			*tp++ = ':';
    28e0:	8a e3       	ldi	r24, 0x3A	; 58
    28e2:	81 83       	std	Z+1, r24	; 0x01
			if (i == sz_path) {				/* Root-dir */
    28e4:	ac 14       	cp	r10, r12
    28e6:	bd 04       	cpc	r11, r13
    28e8:	f1 f2       	breq	.-68     	; 0x28a6 <f_getcwd+0x1ac>
			path[--i] = '/';
		}
		tp = path;
		if (res == FR_OK) {
			*tp++ = '0' + CurrVol;			/* Put drive number */
			*tp++ = ':';
    28ea:	df 01       	movw	r26, r30
    28ec:	12 96       	adiw	r26, 0x02	; 2
    28ee:	e0 cf       	rjmp	.-64     	; 0x28b0 <f_getcwd+0x1b6>
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
			res = dir_sdi(&dj, 1);			/* Get parent dir */
    28f0:	98 2e       	mov	r9, r24
    28f2:	0d c0       	rjmp	.+26     	; 0x290e <f_getcwd+0x214>
			if (res != FR_OK) break;
			res = dir_read(&dj);
    28f4:	98 2e       	mov	r9, r24
    28f6:	0b c0       	rjmp	.+22     	; 0x290e <f_getcwd+0x214>
			if (res != FR_OK) break;
			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
			res = dir_sdi(&dj, 0);
    28f8:	98 2e       	mov	r9, r24
    28fa:	09 c0       	rjmp	.+18     	; 0x290e <f_getcwd+0x214>
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
			if (i < n + 3) {
				res = FR_NOT_ENOUGH_CORE; break;
    28fc:	0f 2e       	mov	r0, r31
    28fe:	f1 e1       	ldi	r31, 0x11	; 17
    2900:	9f 2e       	mov	r9, r31
    2902:	f0 2d       	mov	r31, r0
    2904:	04 c0       	rjmp	.+8      	; 0x290e <f_getcwd+0x214>
    2906:	0f 2e       	mov	r0, r31
    2908:	f1 e1       	ldi	r31, 0x11	; 17
    290a:	9f 2e       	mov	r9, r31
    290c:	f0 2d       	mov	r31, r0
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
    290e:	a9 ad       	ldd	r26, Y+57	; 0x39
    2910:	ba ad       	ldd	r27, Y+58	; 0x3a
    2912:	de cf       	rjmp	.-68     	; 0x28d0 <f_getcwd+0x1d6>
				res = dir_read(&dj);
				if (res != FR_OK) break;
				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
				res = dir_next(&dj, 0);	
			} while (res == FR_OK);
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
    2914:	14 30       	cpi	r17, 0x04	; 4
    2916:	09 f2       	breq	.-126    	; 0x289a <f_getcwd+0x1a0>
    2918:	91 2e       	mov	r9, r17
    291a:	f9 cf       	rjmp	.-14     	; 0x290e <f_getcwd+0x214>
			if (res != FR_OK) break;
#if _USE_LFN
			fno.lfname = path;
			fno.lfsize = i;
#endif
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
    291c:	be 01       	movw	r22, r28
    291e:	69 5e       	subi	r22, 0xE9	; 233
    2920:	7f 4f       	sbci	r23, 0xFF	; 255
    2922:	ce 01       	movw	r24, r28
    2924:	01 96       	adiw	r24, 0x01	; 1
    2926:	0e 94 71 02 	call	0x4e2	; 0x4e2 <get_fileinfo>
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
    292a:	88 a1       	ldd	r24, Y+32	; 0x20
    292c:	81 11       	cpse	r24, r1
    292e:	79 cf       	rjmp	.-270    	; 0x2822 <f_getcwd+0x128>
			if (i < n + 3) {
    2930:	f3 e0       	ldi	r31, 0x03	; 3
    2932:	cf 16       	cp	r12, r31
    2934:	d1 04       	cpc	r13, r1
    2936:	08 f0       	brcs	.+2      	; 0x293a <f_getcwd+0x240>
    2938:	9d cf       	rjmp	.-198    	; 0x2874 <f_getcwd+0x17a>
    293a:	e5 cf       	rjmp	.-54     	; 0x2906 <f_getcwd+0x20c>
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
    293c:	e9 ad       	ldd	r30, Y+57	; 0x39
    293e:	fa ad       	ldd	r31, Y+58	; 0x3a
		if (res == FR_OK) {
			*tp++ = '0' + CurrVol;			/* Put drive number */
    2940:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
    2944:	80 5d       	subi	r24, 0xD0	; 208
    2946:	80 83       	st	Z, r24
			*tp++ = ':';
    2948:	8a e3       	ldi	r24, 0x3A	; 58
    294a:	81 83       	std	Z+1, r24	; 0x01
    294c:	ac cf       	rjmp	.-168    	; 0x28a6 <f_getcwd+0x1ac>
		*tp = 0;
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    294e:	89 2d       	mov	r24, r9
    2950:	ea 96       	adiw	r28, 0x3a	; 58
    2952:	0f b6       	in	r0, 0x3f	; 63
    2954:	f8 94       	cli
    2956:	de bf       	out	0x3e, r29	; 62
    2958:	0f be       	out	0x3f, r0	; 63
    295a:	cd bf       	out	0x3d, r28	; 61
    295c:	df 91       	pop	r29
    295e:	cf 91       	pop	r28
    2960:	1f 91       	pop	r17
    2962:	0f 91       	pop	r16
    2964:	ff 90       	pop	r15
    2966:	ef 90       	pop	r14
    2968:	df 90       	pop	r13
    296a:	cf 90       	pop	r12
    296c:	bf 90       	pop	r11
    296e:	af 90       	pop	r10
    2970:	9f 90       	pop	r9
    2972:	7f 90       	pop	r7
    2974:	6f 90       	pop	r6
    2976:	5f 90       	pop	r5
    2978:	4f 90       	pop	r4
    297a:	08 95       	ret

0000297c <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    297c:	4f 92       	push	r4
    297e:	5f 92       	push	r5
    2980:	6f 92       	push	r6
    2982:	7f 92       	push	r7
    2984:	8f 92       	push	r8
    2986:	9f 92       	push	r9
    2988:	af 92       	push	r10
    298a:	bf 92       	push	r11
    298c:	cf 92       	push	r12
    298e:	df 92       	push	r13
    2990:	ef 92       	push	r14
    2992:	ff 92       	push	r15
    2994:	0f 93       	push	r16
    2996:	1f 93       	push	r17
    2998:	cf 93       	push	r28
    299a:	df 93       	push	r29
    299c:	00 d0       	rcall	.+0      	; 0x299e <f_lseek+0x22>
    299e:	00 d0       	rcall	.+0      	; 0x29a0 <f_lseek+0x24>
    29a0:	00 d0       	rcall	.+0      	; 0x29a2 <f_lseek+0x26>
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
    29a6:	9e 83       	std	Y+6, r25	; 0x06
    29a8:	8d 83       	std	Y+5, r24	; 0x05
    29aa:	6a 01       	movw	r12, r20
    29ac:	7b 01       	movw	r14, r22
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    29ae:	dc 01       	movw	r26, r24
    29b0:	12 96       	adiw	r26, 0x02	; 2
    29b2:	6d 91       	ld	r22, X+
    29b4:	7c 91       	ld	r23, X
    29b6:	13 97       	sbiw	r26, 0x03	; 3
    29b8:	8d 91       	ld	r24, X+
    29ba:	9c 91       	ld	r25, X
    29bc:	0e 94 a5 03 	call	0x74a	; 0x74a <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    29c0:	81 11       	cpse	r24, r1
    29c2:	9d c1       	rjmp	.+826    	; 0x2cfe <f_lseek+0x382>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    29c4:	ed 81       	ldd	r30, Y+5	; 0x05
    29c6:	fe 81       	ldd	r31, Y+6	; 0x06
    29c8:	84 81       	ldd	r24, Z+4	; 0x04
    29ca:	88 23       	and	r24, r24
    29cc:	0c f4       	brge	.+2      	; 0x29d0 <f_lseek+0x54>
    29ce:	92 c1       	rjmp	.+804    	; 0x2cf4 <f_lseek+0x378>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    29d0:	42 85       	ldd	r20, Z+10	; 0x0a
    29d2:	53 85       	ldd	r21, Z+11	; 0x0b
    29d4:	64 85       	ldd	r22, Z+12	; 0x0c
    29d6:	75 85       	ldd	r23, Z+13	; 0x0d
    29d8:	4c 15       	cp	r20, r12
    29da:	5d 05       	cpc	r21, r13
    29dc:	6e 05       	cpc	r22, r14
    29de:	7f 05       	cpc	r23, r15
    29e0:	20 f4       	brcc	.+8      	; 0x29ea <f_lseek+0x6e>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    29e2:	81 fd       	sbrc	r24, 1
    29e4:	02 c0       	rjmp	.+4      	; 0x29ea <f_lseek+0x6e>
#endif
			) ofs = fp->fsize;
    29e6:	6a 01       	movw	r12, r20
    29e8:	7b 01       	movw	r14, r22

		ifptr = fp->fptr;
    29ea:	ad 81       	ldd	r26, Y+5	; 0x05
    29ec:	be 81       	ldd	r27, Y+6	; 0x06
    29ee:	16 96       	adiw	r26, 0x06	; 6
    29f0:	4d 90       	ld	r4, X+
    29f2:	5d 90       	ld	r5, X+
    29f4:	6d 90       	ld	r6, X+
    29f6:	7c 90       	ld	r7, X
    29f8:	19 97       	sbiw	r26, 0x09	; 9
		fp->fptr = nsect = 0;
    29fa:	fd 01       	movw	r30, r26
    29fc:	16 82       	std	Z+6, r1	; 0x06
    29fe:	17 82       	std	Z+7, r1	; 0x07
    2a00:	10 86       	std	Z+8, r1	; 0x08
    2a02:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    2a04:	c1 14       	cp	r12, r1
    2a06:	d1 04       	cpc	r13, r1
    2a08:	e1 04       	cpc	r14, r1
    2a0a:	f1 04       	cpc	r15, r1
    2a0c:	09 f4       	brne	.+2      	; 0x2a10 <f_lseek+0x94>
    2a0e:	74 c1       	rjmp	.+744    	; 0x2cf8 <f_lseek+0x37c>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    2a10:	00 81       	ld	r16, Z
    2a12:	11 81       	ldd	r17, Z+1	; 0x01
    2a14:	d8 01       	movw	r26, r16
    2a16:	12 96       	adiw	r26, 0x02	; 2
    2a18:	8c 90       	ld	r8, X
    2a1a:	91 2c       	mov	r9, r1
    2a1c:	a1 2c       	mov	r10, r1
    2a1e:	b1 2c       	mov	r11, r1
    2a20:	07 2e       	mov	r0, r23
    2a22:	79 e0       	ldi	r23, 0x09	; 9
    2a24:	88 0c       	add	r8, r8
    2a26:	99 1c       	adc	r9, r9
    2a28:	aa 1c       	adc	r10, r10
    2a2a:	bb 1c       	adc	r11, r11
    2a2c:	7a 95       	dec	r23
    2a2e:	d1 f7       	brne	.-12     	; 0x2a24 <f_lseek+0xa8>
    2a30:	70 2d       	mov	r23, r0
			if (ifptr > 0 &&
    2a32:	41 14       	cp	r4, r1
    2a34:	51 04       	cpc	r5, r1
    2a36:	61 04       	cpc	r6, r1
    2a38:	71 04       	cpc	r7, r1
    2a3a:	09 f4       	brne	.+2      	; 0x2a3e <f_lseek+0xc2>
    2a3c:	40 c0       	rjmp	.+128    	; 0x2abe <f_lseek+0x142>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    2a3e:	b1 e0       	ldi	r27, 0x01	; 1
    2a40:	4b 1a       	sub	r4, r27
    2a42:	51 08       	sbc	r5, r1
    2a44:	61 08       	sbc	r6, r1
    2a46:	71 08       	sbc	r7, r1

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    2a48:	c7 01       	movw	r24, r14
    2a4a:	b6 01       	movw	r22, r12
    2a4c:	61 50       	subi	r22, 0x01	; 1
    2a4e:	71 09       	sbc	r23, r1
    2a50:	81 09       	sbc	r24, r1
    2a52:	91 09       	sbc	r25, r1
    2a54:	a5 01       	movw	r20, r10
    2a56:	94 01       	movw	r18, r8
    2a58:	0e 94 79 37 	call	0x6ef2	; 0x6ef2 <__udivmodsi4>
    2a5c:	29 83       	std	Y+1, r18	; 0x01
    2a5e:	3a 83       	std	Y+2, r19	; 0x02
    2a60:	4b 83       	std	Y+3, r20	; 0x03
    2a62:	5c 83       	std	Y+4, r21	; 0x04
    2a64:	c3 01       	movw	r24, r6
    2a66:	b2 01       	movw	r22, r4
    2a68:	a5 01       	movw	r20, r10
    2a6a:	94 01       	movw	r18, r8
    2a6c:	0e 94 79 37 	call	0x6ef2	; 0x6ef2 <__udivmodsi4>
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	9a 81       	ldd	r25, Y+2	; 0x02
    2a74:	ab 81       	ldd	r26, Y+3	; 0x03
    2a76:	bc 81       	ldd	r27, Y+4	; 0x04
    2a78:	82 17       	cp	r24, r18
    2a7a:	93 07       	cpc	r25, r19
    2a7c:	a4 07       	cpc	r26, r20
    2a7e:	b5 07       	cpc	r27, r21
    2a80:	f0 f0       	brcs	.+60     	; 0x2abe <f_lseek+0x142>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    2a82:	88 27       	eor	r24, r24
    2a84:	99 27       	eor	r25, r25
    2a86:	dc 01       	movw	r26, r24
    2a88:	88 19       	sub	r24, r8
    2a8a:	99 09       	sbc	r25, r9
    2a8c:	aa 09       	sbc	r26, r10
    2a8e:	bb 09       	sbc	r27, r11
    2a90:	48 22       	and	r4, r24
    2a92:	59 22       	and	r5, r25
    2a94:	6a 22       	and	r6, r26
    2a96:	7b 22       	and	r7, r27
    2a98:	ad 81       	ldd	r26, Y+5	; 0x05
    2a9a:	be 81       	ldd	r27, Y+6	; 0x06
    2a9c:	16 96       	adiw	r26, 0x06	; 6
    2a9e:	4d 92       	st	X+, r4
    2aa0:	5d 92       	st	X+, r5
    2aa2:	6d 92       	st	X+, r6
    2aa4:	7c 92       	st	X, r7
    2aa6:	19 97       	sbiw	r26, 0x09	; 9
				ofs -= fp->fptr;
    2aa8:	c4 18       	sub	r12, r4
    2aaa:	d5 08       	sbc	r13, r5
    2aac:	e6 08       	sbc	r14, r6
    2aae:	f7 08       	sbc	r15, r7
				clst = fp->curr_clust;
    2ab0:	52 96       	adiw	r26, 0x12	; 18
    2ab2:	4d 91       	ld	r20, X+
    2ab4:	5d 91       	ld	r21, X+
    2ab6:	6d 91       	ld	r22, X+
    2ab8:	7c 91       	ld	r23, X
    2aba:	55 97       	sbiw	r26, 0x15	; 21
    2abc:	3d c0       	rjmp	.+122    	; 0x2b38 <f_lseek+0x1bc>
			} else {									/* When seek to back cluster, */
				clst = fp->org_clust;					/* start from the first cluster */
    2abe:	ed 81       	ldd	r30, Y+5	; 0x05
    2ac0:	fe 81       	ldd	r31, Y+6	; 0x06
    2ac2:	46 85       	ldd	r20, Z+14	; 0x0e
    2ac4:	57 85       	ldd	r21, Z+15	; 0x0f
    2ac6:	60 89       	ldd	r22, Z+16	; 0x10
    2ac8:	71 89       	ldd	r23, Z+17	; 0x11
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    2aca:	41 15       	cp	r20, r1
    2acc:	51 05       	cpc	r21, r1
    2ace:	61 05       	cpc	r22, r1
    2ad0:	71 05       	cpc	r23, r1
    2ad2:	61 f5       	brne	.+88     	; 0x2b2c <f_lseek+0x1b0>
					clst = create_chain(fp->fs, 0);
    2ad4:	40 e0       	ldi	r20, 0x00	; 0
    2ad6:	50 e0       	ldi	r21, 0x00	; 0
    2ad8:	ba 01       	movw	r22, r20
    2ada:	c8 01       	movw	r24, r16
    2adc:	0e 94 ed 09 	call	0x13da	; 0x13da <create_chain>
    2ae0:	ab 01       	movw	r20, r22
    2ae2:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2ae4:	41 30       	cpi	r20, 0x01	; 1
    2ae6:	51 05       	cpc	r21, r1
    2ae8:	61 05       	cpc	r22, r1
    2aea:	71 05       	cpc	r23, r1
    2aec:	51 f4       	brne	.+20     	; 0x2b02 <f_lseek+0x186>
    2aee:	ad 81       	ldd	r26, Y+5	; 0x05
    2af0:	be 81       	ldd	r27, Y+6	; 0x06
    2af2:	14 96       	adiw	r26, 0x04	; 4
    2af4:	8c 91       	ld	r24, X
    2af6:	14 97       	sbiw	r26, 0x04	; 4
    2af8:	80 68       	ori	r24, 0x80	; 128
    2afa:	14 96       	adiw	r26, 0x04	; 4
    2afc:	8c 93       	st	X, r24
    2afe:	82 e0       	ldi	r24, 0x02	; 2
    2b00:	fe c0       	rjmp	.+508    	; 0x2cfe <f_lseek+0x382>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2b02:	4f 3f       	cpi	r20, 0xFF	; 255
    2b04:	bf ef       	ldi	r27, 0xFF	; 255
    2b06:	5b 07       	cpc	r21, r27
    2b08:	6b 07       	cpc	r22, r27
    2b0a:	7b 07       	cpc	r23, r27
    2b0c:	39 f4       	brne	.+14     	; 0x2b1c <f_lseek+0x1a0>
    2b0e:	ed 81       	ldd	r30, Y+5	; 0x05
    2b10:	fe 81       	ldd	r31, Y+6	; 0x06
    2b12:	84 81       	ldd	r24, Z+4	; 0x04
    2b14:	80 68       	ori	r24, 0x80	; 128
    2b16:	84 83       	std	Z+4, r24	; 0x04
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	f1 c0       	rjmp	.+482    	; 0x2cfe <f_lseek+0x382>
					fp->org_clust = clst;
    2b1c:	ad 81       	ldd	r26, Y+5	; 0x05
    2b1e:	be 81       	ldd	r27, Y+6	; 0x06
    2b20:	1e 96       	adiw	r26, 0x0e	; 14
    2b22:	4d 93       	st	X+, r20
    2b24:	5d 93       	st	X+, r21
    2b26:	6d 93       	st	X+, r22
    2b28:	7c 93       	st	X, r23
    2b2a:	51 97       	sbiw	r26, 0x11	; 17
				}
#endif
				fp->curr_clust = clst;
    2b2c:	ed 81       	ldd	r30, Y+5	; 0x05
    2b2e:	fe 81       	ldd	r31, Y+6	; 0x06
    2b30:	42 8b       	std	Z+18, r20	; 0x12
    2b32:	53 8b       	std	Z+19, r21	; 0x13
    2b34:	64 8b       	std	Z+20, r22	; 0x14
    2b36:	75 8b       	std	Z+21, r23	; 0x15
			}
			if (clst != 0) {
    2b38:	41 15       	cp	r20, r1
    2b3a:	51 05       	cpc	r21, r1
    2b3c:	61 05       	cpc	r22, r1
    2b3e:	71 05       	cpc	r23, r1
    2b40:	09 f4       	brne	.+2      	; 0x2b44 <f_lseek+0x1c8>
    2b42:	a1 c0       	rjmp	.+322    	; 0x2c86 <f_lseek+0x30a>
				while (ofs > bcs) {						/* Cluster following loop */
    2b44:	8c 14       	cp	r8, r12
    2b46:	9d 04       	cpc	r9, r13
    2b48:	ae 04       	cpc	r10, r14
    2b4a:	bf 04       	cpc	r11, r15
    2b4c:	08 f0       	brcs	.+2      	; 0x2b50 <f_lseek+0x1d4>
    2b4e:	63 c0       	rjmp	.+198    	; 0x2c16 <f_lseek+0x29a>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    2b50:	ad 81       	ldd	r26, Y+5	; 0x05
    2b52:	be 81       	ldd	r27, Y+6	; 0x06
    2b54:	14 96       	adiw	r26, 0x04	; 4
    2b56:	8c 91       	ld	r24, X
    2b58:	14 97       	sbiw	r26, 0x04	; 4
    2b5a:	81 ff       	sbrs	r24, 1
    2b5c:	0c c0       	rjmp	.+24     	; 0x2b76 <f_lseek+0x1fa>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    2b5e:	8d 91       	ld	r24, X+
    2b60:	9c 91       	ld	r25, X
    2b62:	0e 94 ed 09 	call	0x13da	; 0x13da <create_chain>
    2b66:	ab 01       	movw	r20, r22
    2b68:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    2b6a:	41 15       	cp	r20, r1
    2b6c:	51 05       	cpc	r21, r1
    2b6e:	61 05       	cpc	r22, r1
    2b70:	71 05       	cpc	r23, r1
    2b72:	49 f4       	brne	.+18     	; 0x2b86 <f_lseek+0x20a>
    2b74:	4e c0       	rjmp	.+156    	; 0x2c12 <f_lseek+0x296>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    2b76:	ad 81       	ldd	r26, Y+5	; 0x05
    2b78:	be 81       	ldd	r27, Y+6	; 0x06
    2b7a:	8d 91       	ld	r24, X+
    2b7c:	9c 91       	ld	r25, X
    2b7e:	0e 94 32 07 	call	0xe64	; 0xe64 <get_fat>
    2b82:	ab 01       	movw	r20, r22
    2b84:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2b86:	4f 3f       	cpi	r20, 0xFF	; 255
    2b88:	bf ef       	ldi	r27, 0xFF	; 255
    2b8a:	5b 07       	cpc	r21, r27
    2b8c:	6b 07       	cpc	r22, r27
    2b8e:	7b 07       	cpc	r23, r27
    2b90:	39 f4       	brne	.+14     	; 0x2ba0 <f_lseek+0x224>
    2b92:	ed 81       	ldd	r30, Y+5	; 0x05
    2b94:	fe 81       	ldd	r31, Y+6	; 0x06
    2b96:	84 81       	ldd	r24, Z+4	; 0x04
    2b98:	80 68       	ori	r24, 0x80	; 128
    2b9a:	84 83       	std	Z+4, r24	; 0x04
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	af c0       	rjmp	.+350    	; 0x2cfe <f_lseek+0x382>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    2ba0:	42 30       	cpi	r20, 0x02	; 2
    2ba2:	51 05       	cpc	r21, r1
    2ba4:	61 05       	cpc	r22, r1
    2ba6:	71 05       	cpc	r23, r1
    2ba8:	68 f0       	brcs	.+26     	; 0x2bc4 <f_lseek+0x248>
    2baa:	ad 81       	ldd	r26, Y+5	; 0x05
    2bac:	be 81       	ldd	r27, Y+6	; 0x06
    2bae:	ed 91       	ld	r30, X+
    2bb0:	fc 91       	ld	r31, X
    2bb2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bb4:	93 8d       	ldd	r25, Z+27	; 0x1b
    2bb6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2bb8:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2bba:	48 17       	cp	r20, r24
    2bbc:	59 07       	cpc	r21, r25
    2bbe:	6a 07       	cpc	r22, r26
    2bc0:	7b 07       	cpc	r23, r27
    2bc2:	38 f0       	brcs	.+14     	; 0x2bd2 <f_lseek+0x256>
    2bc4:	ed 81       	ldd	r30, Y+5	; 0x05
    2bc6:	fe 81       	ldd	r31, Y+6	; 0x06
    2bc8:	84 81       	ldd	r24, Z+4	; 0x04
    2bca:	80 68       	ori	r24, 0x80	; 128
    2bcc:	84 83       	std	Z+4, r24	; 0x04
    2bce:	82 e0       	ldi	r24, 0x02	; 2
    2bd0:	96 c0       	rjmp	.+300    	; 0x2cfe <f_lseek+0x382>
					fp->curr_clust = clst;
    2bd2:	ad 81       	ldd	r26, Y+5	; 0x05
    2bd4:	be 81       	ldd	r27, Y+6	; 0x06
    2bd6:	52 96       	adiw	r26, 0x12	; 18
    2bd8:	4d 93       	st	X+, r20
    2bda:	5d 93       	st	X+, r21
    2bdc:	6d 93       	st	X+, r22
    2bde:	7c 93       	st	X, r23
    2be0:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    2be2:	fd 01       	movw	r30, r26
    2be4:	86 81       	ldd	r24, Z+6	; 0x06
    2be6:	97 81       	ldd	r25, Z+7	; 0x07
    2be8:	a0 85       	ldd	r26, Z+8	; 0x08
    2bea:	b1 85       	ldd	r27, Z+9	; 0x09
    2bec:	88 0d       	add	r24, r8
    2bee:	99 1d       	adc	r25, r9
    2bf0:	aa 1d       	adc	r26, r10
    2bf2:	bb 1d       	adc	r27, r11
    2bf4:	86 83       	std	Z+6, r24	; 0x06
    2bf6:	97 83       	std	Z+7, r25	; 0x07
    2bf8:	a0 87       	std	Z+8, r26	; 0x08
    2bfa:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    2bfc:	c8 18       	sub	r12, r8
    2bfe:	d9 08       	sbc	r13, r9
    2c00:	ea 08       	sbc	r14, r10
    2c02:	fb 08       	sbc	r15, r11
				}
#endif
				fp->curr_clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    2c04:	8c 14       	cp	r8, r12
    2c06:	9d 04       	cpc	r9, r13
    2c08:	ae 04       	cpc	r10, r14
    2c0a:	bf 04       	cpc	r11, r15
    2c0c:	08 f4       	brcc	.+2      	; 0x2c10 <f_lseek+0x294>
    2c0e:	a0 cf       	rjmp	.-192    	; 0x2b50 <f_lseek+0x1d4>
    2c10:	02 c0       	rjmp	.+4      	; 0x2c16 <f_lseek+0x29a>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
    2c12:	75 01       	movw	r14, r10
    2c14:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->curr_clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    2c16:	ed 81       	ldd	r30, Y+5	; 0x05
    2c18:	fe 81       	ldd	r31, Y+6	; 0x06
    2c1a:	86 81       	ldd	r24, Z+6	; 0x06
    2c1c:	97 81       	ldd	r25, Z+7	; 0x07
    2c1e:	a0 85       	ldd	r26, Z+8	; 0x08
    2c20:	b1 85       	ldd	r27, Z+9	; 0x09
    2c22:	8c 0d       	add	r24, r12
    2c24:	9d 1d       	adc	r25, r13
    2c26:	ae 1d       	adc	r26, r14
    2c28:	bf 1d       	adc	r27, r15
    2c2a:	86 83       	std	Z+6, r24	; 0x06
    2c2c:	97 83       	std	Z+7, r25	; 0x07
    2c2e:	a0 87       	std	Z+8, r26	; 0x08
    2c30:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    2c32:	d7 01       	movw	r26, r14
    2c34:	c6 01       	movw	r24, r12
    2c36:	91 70       	andi	r25, 0x01	; 1
    2c38:	aa 27       	eor	r26, r26
    2c3a:	bb 27       	eor	r27, r27
    2c3c:	89 2b       	or	r24, r25
    2c3e:	8a 2b       	or	r24, r26
    2c40:	8b 2b       	or	r24, r27
    2c42:	29 f1       	breq	.+74     	; 0x2c8e <f_lseek+0x312>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    2c44:	80 81       	ld	r24, Z
    2c46:	91 81       	ldd	r25, Z+1	; 0x01
    2c48:	0e 94 0a 07 	call	0xe14	; 0xe14 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    2c4c:	61 15       	cp	r22, r1
    2c4e:	71 05       	cpc	r23, r1
    2c50:	81 05       	cpc	r24, r1
    2c52:	91 05       	cpc	r25, r1
    2c54:	51 f4       	brne	.+20     	; 0x2c6a <f_lseek+0x2ee>
    2c56:	ad 81       	ldd	r26, Y+5	; 0x05
    2c58:	be 81       	ldd	r27, Y+6	; 0x06
    2c5a:	14 96       	adiw	r26, 0x04	; 4
    2c5c:	8c 91       	ld	r24, X
    2c5e:	14 97       	sbiw	r26, 0x04	; 4
    2c60:	80 68       	ori	r24, 0x80	; 128
    2c62:	14 96       	adiw	r26, 0x04	; 4
    2c64:	8c 93       	st	X, r24
    2c66:	82 e0       	ldi	r24, 0x02	; 2
    2c68:	4a c0       	rjmp	.+148    	; 0x2cfe <f_lseek+0x382>
					nsect += ofs / SS(fp->fs);
    2c6a:	0b 2e       	mov	r0, r27
    2c6c:	b9 e0       	ldi	r27, 0x09	; 9
    2c6e:	f6 94       	lsr	r15
    2c70:	e7 94       	ror	r14
    2c72:	d7 94       	ror	r13
    2c74:	c7 94       	ror	r12
    2c76:	ba 95       	dec	r27
    2c78:	d1 f7       	brne	.-12     	; 0x2c6e <f_lseek+0x2f2>
    2c7a:	b0 2d       	mov	r27, r0
    2c7c:	c6 0e       	add	r12, r22
    2c7e:	d7 1e       	adc	r13, r23
    2c80:	e8 1e       	adc	r14, r24
    2c82:	f9 1e       	adc	r15, r25
    2c84:	07 c0       	rjmp	.+14     	; 0x2c94 <f_lseek+0x318>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    2c86:	c1 2c       	mov	r12, r1
    2c88:	d1 2c       	mov	r13, r1
    2c8a:	76 01       	movw	r14, r12
    2c8c:	03 c0       	rjmp	.+6      	; 0x2c94 <f_lseek+0x318>
    2c8e:	c1 2c       	mov	r12, r1
    2c90:	d1 2c       	mov	r13, r1
    2c92:	76 01       	movw	r14, r12
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    2c94:	ed 81       	ldd	r30, Y+5	; 0x05
    2c96:	fe 81       	ldd	r31, Y+6	; 0x06
    2c98:	86 81       	ldd	r24, Z+6	; 0x06
    2c9a:	97 81       	ldd	r25, Z+7	; 0x07
    2c9c:	a0 85       	ldd	r26, Z+8	; 0x08
    2c9e:	b1 85       	ldd	r27, Z+9	; 0x09
    2ca0:	ac 01       	movw	r20, r24
    2ca2:	bd 01       	movw	r22, r26
    2ca4:	51 70       	andi	r21, 0x01	; 1
    2ca6:	66 27       	eor	r22, r22
    2ca8:	77 27       	eor	r23, r23
    2caa:	45 2b       	or	r20, r21
    2cac:	46 2b       	or	r20, r22
    2cae:	47 2b       	or	r20, r23
    2cb0:	69 f0       	breq	.+26     	; 0x2ccc <f_lseek+0x350>
    2cb2:	46 89       	ldd	r20, Z+22	; 0x16
    2cb4:	57 89       	ldd	r21, Z+23	; 0x17
    2cb6:	60 8d       	ldd	r22, Z+24	; 0x18
    2cb8:	71 8d       	ldd	r23, Z+25	; 0x19
    2cba:	c4 16       	cp	r12, r20
    2cbc:	d5 06       	cpc	r13, r21
    2cbe:	e6 06       	cpc	r14, r22
    2cc0:	f7 06       	cpc	r15, r23
    2cc2:	21 f0       	breq	.+8      	; 0x2ccc <f_lseek+0x350>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    2cc4:	c6 8a       	std	Z+22, r12	; 0x16
    2cc6:	d7 8a       	std	Z+23, r13	; 0x17
    2cc8:	e0 8e       	std	Z+24, r14	; 0x18
    2cca:	f1 8e       	std	Z+25, r15	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set change flag if the file size is extended */
    2ccc:	ed 81       	ldd	r30, Y+5	; 0x05
    2cce:	fe 81       	ldd	r31, Y+6	; 0x06
    2cd0:	42 85       	ldd	r20, Z+10	; 0x0a
    2cd2:	53 85       	ldd	r21, Z+11	; 0x0b
    2cd4:	64 85       	ldd	r22, Z+12	; 0x0c
    2cd6:	75 85       	ldd	r23, Z+13	; 0x0d
    2cd8:	48 17       	cp	r20, r24
    2cda:	59 07       	cpc	r21, r25
    2cdc:	6a 07       	cpc	r22, r26
    2cde:	7b 07       	cpc	r23, r27
    2ce0:	68 f4       	brcc	.+26     	; 0x2cfc <f_lseek+0x380>
			fp->fsize = fp->fptr;
    2ce2:	82 87       	std	Z+10, r24	; 0x0a
    2ce4:	93 87       	std	Z+11, r25	; 0x0b
    2ce6:	a4 87       	std	Z+12, r26	; 0x0c
    2ce8:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    2cea:	84 81       	ldd	r24, Z+4	; 0x04
    2cec:	80 62       	ori	r24, 0x20	; 32
    2cee:	84 83       	std	Z+4, r24	; 0x04
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	05 c0       	rjmp	.+10     	; 0x2cfe <f_lseek+0x382>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    2cf4:	82 e0       	ldi	r24, 0x02	; 2
    2cf6:	03 c0       	rjmp	.+6      	; 0x2cfe <f_lseek+0x382>
			fp->flag |= FA__WRITTEN;
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	01 c0       	rjmp	.+2      	; 0x2cfe <f_lseek+0x382>
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
}
    2cfe:	26 96       	adiw	r28, 0x06	; 6
    2d00:	0f b6       	in	r0, 0x3f	; 63
    2d02:	f8 94       	cli
    2d04:	de bf       	out	0x3e, r29	; 62
    2d06:	0f be       	out	0x3f, r0	; 63
    2d08:	cd bf       	out	0x3d, r28	; 61
    2d0a:	df 91       	pop	r29
    2d0c:	cf 91       	pop	r28
    2d0e:	1f 91       	pop	r17
    2d10:	0f 91       	pop	r16
    2d12:	ff 90       	pop	r15
    2d14:	ef 90       	pop	r14
    2d16:	df 90       	pop	r13
    2d18:	cf 90       	pop	r12
    2d1a:	bf 90       	pop	r11
    2d1c:	af 90       	pop	r10
    2d1e:	9f 90       	pop	r9
    2d20:	8f 90       	pop	r8
    2d22:	7f 90       	pop	r7
    2d24:	6f 90       	pop	r6
    2d26:	5f 90       	pop	r5
    2d28:	4f 90       	pop	r4
    2d2a:	08 95       	ret

00002d2c <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
    2d2c:	0f 93       	push	r16
    2d2e:	1f 93       	push	r17
    2d30:	cf 93       	push	r28
    2d32:	df 93       	push	r29
    2d34:	cd b7       	in	r28, 0x3d	; 61
    2d36:	de b7       	in	r29, 0x3e	; 62
    2d38:	2e 97       	sbiw	r28, 0x0e	; 14
    2d3a:	0f b6       	in	r0, 0x3f	; 63
    2d3c:	f8 94       	cli
    2d3e:	de bf       	out	0x3e, r29	; 62
    2d40:	0f be       	out	0x3f, r0	; 63
    2d42:	cd bf       	out	0x3d, r28	; 61
    2d44:	8c 01       	movw	r16, r24
    2d46:	7e 87       	std	Y+14, r23	; 0x0e
    2d48:	6d 87       	std	Y+13, r22	; 0x0d
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
    2d4a:	40 e0       	ldi	r20, 0x00	; 0
    2d4c:	bc 01       	movw	r22, r24
    2d4e:	ce 01       	movw	r24, r28
    2d50:	0d 96       	adiw	r24, 0x0d	; 13
    2d52:	0e 94 bf 03 	call	0x77e	; 0x77e <chk_mounted>
	if (res == FR_OK) {
    2d56:	81 11       	cpse	r24, r1
    2d58:	43 c0       	rjmp	.+134    	; 0x2de0 <f_opendir+0xb4>
		INIT_BUF(*dj);
    2d5a:	ce 01       	movw	r24, r28
    2d5c:	01 96       	adiw	r24, 0x01	; 1
    2d5e:	d8 01       	movw	r26, r16
    2d60:	55 96       	adiw	r26, 0x15	; 21
    2d62:	9c 93       	st	X, r25
    2d64:	8e 93       	st	-X, r24
    2d66:	54 97       	sbiw	r26, 0x14	; 20
		res = follow_path(dj, path);			/* Follow the path to the directory */
    2d68:	6d 85       	ldd	r22, Y+13	; 0x0d
    2d6a:	7e 85       	ldd	r23, Y+14	; 0x0e
    2d6c:	c8 01       	movw	r24, r16
    2d6e:	0e 94 1c 0c 	call	0x1838	; 0x1838 <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
    2d72:	81 11       	cpse	r24, r1
    2d74:	1f c0       	rjmp	.+62     	; 0x2db4 <f_opendir+0x88>
			if (dj->dir) {						/* It is not the root dir */
    2d76:	d8 01       	movw	r26, r16
    2d78:	52 96       	adiw	r26, 0x12	; 18
    2d7a:	ed 91       	ld	r30, X+
    2d7c:	fc 91       	ld	r31, X
    2d7e:	53 97       	sbiw	r26, 0x13	; 19
    2d80:	30 97       	sbiw	r30, 0x00	; 0
    2d82:	f1 f0       	breq	.+60     	; 0x2dc0 <f_opendir+0x94>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    2d84:	83 85       	ldd	r24, Z+11	; 0x0b
    2d86:	84 ff       	sbrs	r24, 4
    2d88:	19 c0       	rjmp	.+50     	; 0x2dbc <f_opendir+0x90>
					dj->sclust = LD_CLUST(dj->dir);
    2d8a:	84 89       	ldd	r24, Z+20	; 0x14
    2d8c:	95 89       	ldd	r25, Z+21	; 0x15
    2d8e:	a0 e0       	ldi	r26, 0x00	; 0
    2d90:	b0 e0       	ldi	r27, 0x00	; 0
    2d92:	dc 01       	movw	r26, r24
    2d94:	99 27       	eor	r25, r25
    2d96:	88 27       	eor	r24, r24
    2d98:	42 8d       	ldd	r20, Z+26	; 0x1a
    2d9a:	53 8d       	ldd	r21, Z+27	; 0x1b
    2d9c:	60 e0       	ldi	r22, 0x00	; 0
    2d9e:	70 e0       	ldi	r23, 0x00	; 0
    2da0:	84 2b       	or	r24, r20
    2da2:	95 2b       	or	r25, r21
    2da4:	a6 2b       	or	r26, r22
    2da6:	b7 2b       	or	r27, r23
    2da8:	f8 01       	movw	r30, r16
    2daa:	86 83       	std	Z+6, r24	; 0x06
    2dac:	97 83       	std	Z+7, r25	; 0x07
    2dae:	a0 87       	std	Z+8, r26	; 0x08
    2db0:	b1 87       	std	Z+9, r27	; 0x09
    2db2:	06 c0       	rjmp	.+12     	; 0x2dc0 <f_opendir+0x94>
			if (res == FR_OK) {
				dj->id = dj->fs->id;
				res = dir_sdi(dj, 0);			/* Rewind dir */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    2db4:	84 30       	cpi	r24, 0x04	; 4
    2db6:	a1 f4       	brne	.+40     	; 0x2de0 <f_opendir+0xb4>
    2db8:	85 e0       	ldi	r24, 0x05	; 5
    2dba:	12 c0       	rjmp	.+36     	; 0x2de0 <f_opendir+0xb4>
		if (res == FR_OK) {						/* Follow completed */
			if (dj->dir) {						/* It is not the root dir */
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
					dj->sclust = LD_CLUST(dj->dir);
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
    2dbc:	85 e0       	ldi	r24, 0x05	; 5
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj->fs, res);
    2dbe:	10 c0       	rjmp	.+32     	; 0x2de0 <f_opendir+0xb4>
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    2dc0:	d8 01       	movw	r26, r16
    2dc2:	ed 91       	ld	r30, X+
    2dc4:	fc 91       	ld	r31, X
    2dc6:	11 97       	sbiw	r26, 0x01	; 1
    2dc8:	86 81       	ldd	r24, Z+6	; 0x06
    2dca:	97 81       	ldd	r25, Z+7	; 0x07
    2dcc:	13 96       	adiw	r26, 0x03	; 3
    2dce:	9c 93       	st	X, r25
    2dd0:	8e 93       	st	-X, r24
    2dd2:	12 97       	sbiw	r26, 0x02	; 2
				res = dir_sdi(dj, 0);			/* Rewind dir */
    2dd4:	60 e0       	ldi	r22, 0x00	; 0
    2dd6:	70 e0       	ldi	r23, 0x00	; 0
    2dd8:	c8 01       	movw	r24, r16
    2dda:	0e 94 15 08 	call	0x102a	; 0x102a <dir_sdi>
    2dde:	ea cf       	rjmp	.-44     	; 0x2db4 <f_opendir+0x88>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj->fs, res);
}
    2de0:	2e 96       	adiw	r28, 0x0e	; 14
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	f8 94       	cli
    2de6:	de bf       	out	0x3e, r29	; 62
    2de8:	0f be       	out	0x3f, r0	; 63
    2dea:	cd bf       	out	0x3d, r28	; 61
    2dec:	df 91       	pop	r29
    2dee:	cf 91       	pop	r28
    2df0:	1f 91       	pop	r17
    2df2:	0f 91       	pop	r16
    2df4:	08 95       	ret

00002df6 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    2df6:	cf 92       	push	r12
    2df8:	df 92       	push	r13
    2dfa:	ff 92       	push	r15
    2dfc:	0f 93       	push	r16
    2dfe:	1f 93       	push	r17
    2e00:	cf 93       	push	r28
    2e02:	df 93       	push	r29
    2e04:	cd b7       	in	r28, 0x3d	; 61
    2e06:	de b7       	in	r29, 0x3e	; 62
    2e08:	2c 97       	sbiw	r28, 0x0c	; 12
    2e0a:	0f b6       	in	r0, 0x3f	; 63
    2e0c:	f8 94       	cli
    2e0e:	de bf       	out	0x3e, r29	; 62
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	cd bf       	out	0x3d, r28	; 61
    2e14:	8c 01       	movw	r16, r24
    2e16:	6b 01       	movw	r12, r22
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    2e18:	fc 01       	movw	r30, r24
    2e1a:	62 81       	ldd	r22, Z+2	; 0x02
    2e1c:	73 81       	ldd	r23, Z+3	; 0x03
    2e1e:	80 81       	ld	r24, Z
    2e20:	91 81       	ldd	r25, Z+1	; 0x01
    2e22:	0e 94 a5 03 	call	0x74a	; 0x74a <validate>
    2e26:	f8 2e       	mov	r15, r24
	if (res == FR_OK) {
    2e28:	81 11       	cpse	r24, r1
    2e2a:	30 c0       	rjmp	.+96     	; 0x2e8c <f_readdir+0x96>
		if (!fno) {
    2e2c:	c1 14       	cp	r12, r1
    2e2e:	d1 04       	cpc	r13, r1
    2e30:	39 f4       	brne	.+14     	; 0x2e40 <f_readdir+0x4a>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
    2e32:	60 e0       	ldi	r22, 0x00	; 0
    2e34:	70 e0       	ldi	r23, 0x00	; 0
    2e36:	c8 01       	movw	r24, r16
    2e38:	0e 94 15 08 	call	0x102a	; 0x102a <dir_sdi>
    2e3c:	f8 2e       	mov	r15, r24
    2e3e:	26 c0       	rjmp	.+76     	; 0x2e8c <f_readdir+0x96>
		} else {
			INIT_BUF(*dj);
    2e40:	ce 01       	movw	r24, r28
    2e42:	01 96       	adiw	r24, 0x01	; 1
    2e44:	f8 01       	movw	r30, r16
    2e46:	95 8b       	std	Z+21, r25	; 0x15
    2e48:	84 8b       	std	Z+20, r24	; 0x14
			res = dir_read(dj);				/* Read an directory item */
    2e4a:	c8 01       	movw	r24, r16
    2e4c:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <dir_read>
			if (res == FR_NO_FILE) {		/* Reached end of dir */
    2e50:	84 30       	cpi	r24, 0x04	; 4
    2e52:	31 f4       	brne	.+12     	; 0x2e60 <f_readdir+0x6a>
				dj->sect = 0;
    2e54:	f8 01       	movw	r30, r16
    2e56:	16 86       	std	Z+14, r1	; 0x0e
    2e58:	17 86       	std	Z+15, r1	; 0x0f
    2e5a:	10 8a       	std	Z+16, r1	; 0x10
    2e5c:	11 8a       	std	Z+17, r1	; 0x11
    2e5e:	02 c0       	rjmp	.+4      	; 0x2e64 <f_readdir+0x6e>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    2e60:	81 11       	cpse	r24, r1
    2e62:	11 c0       	rjmp	.+34     	; 0x2e86 <f_readdir+0x90>
				get_fileinfo(dj, fno);		/* Get the object information */
    2e64:	b6 01       	movw	r22, r12
    2e66:	c8 01       	movw	r24, r16
    2e68:	0e 94 71 02 	call	0x4e2	; 0x4e2 <get_fileinfo>
				res = dir_next(dj, 0);		/* Increment index for next */
    2e6c:	60 e0       	ldi	r22, 0x00	; 0
    2e6e:	70 e0       	ldi	r23, 0x00	; 0
    2e70:	c8 01       	movw	r24, r16
    2e72:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <dir_next>
				if (res == FR_NO_FILE) {
    2e76:	84 30       	cpi	r24, 0x04	; 4
    2e78:	41 f4       	brne	.+16     	; 0x2e8a <f_readdir+0x94>
					dj->sect = 0;
    2e7a:	f8 01       	movw	r30, r16
    2e7c:	16 86       	std	Z+14, r1	; 0x0e
    2e7e:	17 86       	std	Z+15, r1	; 0x0f
    2e80:	10 8a       	std	Z+16, r1	; 0x10
    2e82:	11 8a       	std	Z+17, r1	; 0x11
    2e84:	03 c0       	rjmp	.+6      	; 0x2e8c <f_readdir+0x96>
	if (res == FR_OK) {
		if (!fno) {
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
		} else {
			INIT_BUF(*dj);
			res = dir_read(dj);				/* Read an directory item */
    2e86:	f8 2e       	mov	r15, r24
    2e88:	01 c0       	rjmp	.+2      	; 0x2e8c <f_readdir+0x96>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, 0);		/* Increment index for next */
    2e8a:	f8 2e       	mov	r15, r24
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
    2e8c:	8f 2d       	mov	r24, r15
    2e8e:	2c 96       	adiw	r28, 0x0c	; 12
    2e90:	0f b6       	in	r0, 0x3f	; 63
    2e92:	f8 94       	cli
    2e94:	de bf       	out	0x3e, r29	; 62
    2e96:	0f be       	out	0x3f, r0	; 63
    2e98:	cd bf       	out	0x3d, r28	; 61
    2e9a:	df 91       	pop	r29
    2e9c:	cf 91       	pop	r28
    2e9e:	1f 91       	pop	r17
    2ea0:	0f 91       	pop	r16
    2ea2:	ff 90       	pop	r15
    2ea4:	df 90       	pop	r13
    2ea6:	cf 90       	pop	r12
    2ea8:	08 95       	ret

00002eaa <rx_handler>:
	return res;
}

void createSoundList(FIL *file,unsigned char *num){
	(*num) = file->fsize / sizeof(struct sound_entry); 
}
    2eaa:	8e 3f       	cpi	r24, 0xFE	; 254
    2eac:	49 f0       	breq	.+18     	; 0x2ec0 <rx_handler+0x16>
    2eae:	68 2f       	mov	r22, r24
    2eb0:	87 ea       	ldi	r24, 0xA7	; 167
    2eb2:	94 e0       	ldi	r25, 0x04	; 4
    2eb4:	0e 94 22 02 	call	0x444	; 0x444 <bufferAddToEnd>
    2eb8:	81 11       	cpse	r24, r1
    2eba:	02 c0       	rjmp	.+4      	; 0x2ec0 <rx_handler+0x16>
    2ebc:	0e 94 41 35 	call	0x6a82	; 0x6a82 <uartFlushReceiveBuffer>
    2ec0:	08 95       	ret

00002ec2 <get_fattime>:
    2ec2:	60 e0       	ldi	r22, 0x00	; 0
    2ec4:	70 e0       	ldi	r23, 0x00	; 0
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	08 95       	ret

00002eca <configTimers>:
    2eca:	83 b7       	in	r24, 0x33	; 51
    2ecc:	82 60       	ori	r24, 0x02	; 2
    2ece:	83 bf       	out	0x33, r24	; 51
    2ed0:	83 b7       	in	r24, 0x33	; 51
    2ed2:	81 60       	ori	r24, 0x01	; 1
    2ed4:	83 bf       	out	0x33, r24	; 51
    2ed6:	89 b7       	in	r24, 0x39	; 57
    2ed8:	81 60       	ori	r24, 0x01	; 1
    2eda:	89 bf       	out	0x39, r24	; 57
    2edc:	8c e9       	ldi	r24, 0x9C	; 156
    2ede:	83 bd       	out	0x23, r24	; 35
    2ee0:	85 b5       	in	r24, 0x25	; 37
    2ee2:	88 60       	ori	r24, 0x08	; 8
    2ee4:	85 bd       	out	0x25, r24	; 37
    2ee6:	89 b7       	in	r24, 0x39	; 57
    2ee8:	80 68       	ori	r24, 0x80	; 128
    2eea:	89 bf       	out	0x39, r24	; 57
    2eec:	85 b5       	in	r24, 0x25	; 37
    2eee:	87 60       	ori	r24, 0x07	; 7
    2ef0:	85 bd       	out	0x25, r24	; 37
    2ef2:	08 95       	ret

00002ef4 <setInputs>:
    2ef4:	d8 98       	cbi	0x1b, 0	; 27
    2ef6:	d0 98       	cbi	0x1a, 0	; 26
    2ef8:	b8 98       	cbi	0x17, 0	; 23
    2efa:	b9 98       	cbi	0x17, 1	; 23
    2efc:	ba 98       	cbi	0x17, 2	; 23
    2efe:	bb 98       	cbi	0x17, 3	; 23
    2f00:	c0 9a       	sbi	0x18, 0	; 24
    2f02:	c1 9a       	sbi	0x18, 1	; 24
    2f04:	c2 9a       	sbi	0x18, 2	; 24
    2f06:	c3 9a       	sbi	0x18, 3	; 24
    2f08:	a6 98       	cbi	0x14, 6	; 20
    2f0a:	a7 98       	cbi	0x14, 7	; 20
    2f0c:	d1 98       	cbi	0x1a, 1	; 26
    2f0e:	d2 98       	cbi	0x1a, 2	; 26
    2f10:	d3 98       	cbi	0x1a, 3	; 26
    2f12:	ae 9a       	sbi	0x15, 6	; 21
    2f14:	af 9a       	sbi	0x15, 7	; 21
    2f16:	d9 9a       	sbi	0x1b, 1	; 27
    2f18:	df 9a       	sbi	0x1b, 7	; 27
    2f1a:	db 9a       	sbi	0x1b, 3	; 27
    2f1c:	8f 98       	cbi	0x11, 7	; 17
    2f1e:	97 9a       	sbi	0x12, 7	; 18
    2f20:	08 95       	ret

00002f22 <readInputs>:
    2f22:	cf 93       	push	r28
    2f24:	df 93       	push	r29
    2f26:	ec 01       	movw	r28, r24
    2f28:	80 e0       	ldi	r24, 0x00	; 0
    2f2a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <a2dConvert8bit>
    2f2e:	8a 87       	std	Y+10, r24	; 0x0a
    2f30:	26 b3       	in	r18, 0x16	; 22
    2f32:	91 e0       	ldi	r25, 0x01	; 1
    2f34:	29 27       	eor	r18, r25
    2f36:	21 70       	andi	r18, 0x01	; 1
    2f38:	28 83       	st	Y, r18
    2f3a:	26 b3       	in	r18, 0x16	; 22
    2f3c:	26 95       	lsr	r18
    2f3e:	21 70       	andi	r18, 0x01	; 1
    2f40:	29 27       	eor	r18, r25
    2f42:	29 83       	std	Y+1, r18	; 0x01
    2f44:	26 b3       	in	r18, 0x16	; 22
    2f46:	22 fb       	bst	r18, 2
    2f48:	22 27       	eor	r18, r18
    2f4a:	20 f9       	bld	r18, 0
    2f4c:	29 27       	eor	r18, r25
    2f4e:	2a 83       	std	Y+2, r18	; 0x02
    2f50:	26 b3       	in	r18, 0x16	; 22
    2f52:	23 fb       	bst	r18, 3
    2f54:	22 27       	eor	r18, r18
    2f56:	20 f9       	bld	r18, 0
    2f58:	29 27       	eor	r18, r25
    2f5a:	2b 83       	std	Y+3, r18	; 0x03
    2f5c:	23 b3       	in	r18, 0x13	; 19
    2f5e:	26 fb       	bst	r18, 6
    2f60:	22 27       	eor	r18, r18
    2f62:	20 f9       	bld	r18, 0
    2f64:	29 27       	eor	r18, r25
    2f66:	2c 83       	std	Y+4, r18	; 0x04
    2f68:	23 b3       	in	r18, 0x13	; 19
    2f6a:	20 95       	com	r18
    2f6c:	22 1f       	adc	r18, r18
    2f6e:	22 27       	eor	r18, r18
    2f70:	22 1f       	adc	r18, r18
    2f72:	2d 83       	std	Y+5, r18	; 0x05
    2f74:	29 b3       	in	r18, 0x19	; 25
    2f76:	26 95       	lsr	r18
    2f78:	21 70       	andi	r18, 0x01	; 1
    2f7a:	29 27       	eor	r18, r25
    2f7c:	2e 83       	std	Y+6, r18	; 0x06
    2f7e:	29 b3       	in	r18, 0x19	; 25
    2f80:	22 fb       	bst	r18, 2
    2f82:	22 27       	eor	r18, r18
    2f84:	20 f9       	bld	r18, 0
    2f86:	29 27       	eor	r18, r25
    2f88:	2f 83       	std	Y+7, r18	; 0x07
    2f8a:	29 b3       	in	r18, 0x19	; 25
    2f8c:	23 fb       	bst	r18, 3
    2f8e:	22 27       	eor	r18, r18
    2f90:	20 f9       	bld	r18, 0
    2f92:	92 27       	eor	r25, r18
    2f94:	98 87       	std	Y+8, r25	; 0x08
    2f96:	90 b3       	in	r25, 0x10	; 16
    2f98:	90 95       	com	r25
    2f9a:	99 1f       	adc	r25, r25
    2f9c:	99 27       	eor	r25, r25
    2f9e:	99 1f       	adc	r25, r25
    2fa0:	99 87       	std	Y+9, r25	; 0x09
    2fa2:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <inp_old.2539+0x9>
    2fa6:	92 17       	cp	r25, r18
    2fa8:	21 f0       	breq	.+8      	; 0x2fb2 <readInputs+0x90>
    2faa:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <inp_old.2539+0x9>
    2fae:	89 e0       	ldi	r24, 0x09	; 9
    2fb0:	23 c0       	rjmp	.+70     	; 0x2ff8 <readInputs+0xd6>
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	29 2f       	mov	r18, r25
    2fb6:	09 2e       	mov	r0, r25
    2fb8:	00 0c       	add	r0, r0
    2fba:	33 0b       	sbc	r19, r19
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	e2 0f       	add	r30, r18
    2fc0:	f3 1f       	adc	r31, r19
    2fc2:	40 81       	ld	r20, Z
    2fc4:	f9 01       	movw	r30, r18
    2fc6:	ef 57       	subi	r30, 0x7F	; 127
    2fc8:	fe 4f       	sbci	r31, 0xFE	; 254
    2fca:	50 81       	ld	r21, Z
    2fcc:	45 17       	cp	r20, r21
    2fce:	31 f0       	breq	.+12     	; 0x2fdc <readInputs+0xba>
    2fd0:	f9 01       	movw	r30, r18
    2fd2:	ef 57       	subi	r30, 0x7F	; 127
    2fd4:	fe 4f       	sbci	r31, 0xFE	; 254
    2fd6:	40 83       	st	Z, r20
    2fd8:	41 30       	cpi	r20, 0x01	; 1
    2fda:	59 f0       	breq	.+22     	; 0x2ff2 <readInputs+0xd0>
    2fdc:	9f 5f       	subi	r25, 0xFF	; 255
    2fde:	9a 30       	cpi	r25, 0x0A	; 10
    2fe0:	4c f3       	brlt	.-46     	; 0x2fb4 <readInputs+0x92>
    2fe2:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <inp_old.2539+0xa>
    2fe6:	89 17       	cp	r24, r25
    2fe8:	31 f0       	breq	.+12     	; 0x2ff6 <readInputs+0xd4>
    2fea:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <inp_old.2539+0xa>
    2fee:	8a e0       	ldi	r24, 0x0A	; 10
    2ff0:	03 c0       	rjmp	.+6      	; 0x2ff8 <readInputs+0xd6>
    2ff2:	89 2f       	mov	r24, r25
    2ff4:	01 c0       	rjmp	.+2      	; 0x2ff8 <readInputs+0xd6>
    2ff6:	8f ef       	ldi	r24, 0xFF	; 255
    2ff8:	df 91       	pop	r29
    2ffa:	cf 91       	pop	r28
    2ffc:	08 95       	ret

00002ffe <addMillis>:
    2ffe:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <timer0_millis>
    3002:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <timer0_millis+0x1>
    3006:	a0 91 9f 01 	lds	r26, 0x019F	; 0x80019f <timer0_millis+0x2>
    300a:	b0 91 a0 01 	lds	r27, 0x01A0	; 0x8001a0 <timer0_millis+0x3>
    300e:	30 91 9c 01 	lds	r19, 0x019C	; 0x80019c <timer0_fract>
    3012:	23 e0       	ldi	r18, 0x03	; 3
    3014:	23 0f       	add	r18, r19
    3016:	2d 37       	cpi	r18, 0x7D	; 125
    3018:	20 f4       	brcc	.+8      	; 0x3022 <addMillis+0x24>
    301a:	01 96       	adiw	r24, 0x01	; 1
    301c:	a1 1d       	adc	r26, r1
    301e:	b1 1d       	adc	r27, r1
    3020:	05 c0       	rjmp	.+10     	; 0x302c <addMillis+0x2e>
    3022:	26 e8       	ldi	r18, 0x86	; 134
    3024:	23 0f       	add	r18, r19
    3026:	02 96       	adiw	r24, 0x02	; 2
    3028:	a1 1d       	adc	r26, r1
    302a:	b1 1d       	adc	r27, r1
    302c:	20 93 9c 01 	sts	0x019C, r18	; 0x80019c <timer0_fract>
    3030:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <timer0_millis>
    3034:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <timer0_millis+0x1>
    3038:	a0 93 9f 01 	sts	0x019F, r26	; 0x80019f <timer0_millis+0x2>
    303c:	b0 93 a0 01 	sts	0x01A0, r27	; 0x8001a0 <timer0_millis+0x3>
    3040:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <timer0_overflow_count>
    3044:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <timer0_overflow_count+0x1>
    3048:	a0 91 a3 01 	lds	r26, 0x01A3	; 0x8001a3 <timer0_overflow_count+0x2>
    304c:	b0 91 a4 01 	lds	r27, 0x01A4	; 0x8001a4 <timer0_overflow_count+0x3>
    3050:	01 96       	adiw	r24, 0x01	; 1
    3052:	a1 1d       	adc	r26, r1
    3054:	b1 1d       	adc	r27, r1
    3056:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <timer0_overflow_count>
    305a:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <timer0_overflow_count+0x1>
    305e:	a0 93 a3 01 	sts	0x01A3, r26	; 0x8001a3 <timer0_overflow_count+0x2>
    3062:	b0 93 a4 01 	sts	0x01A4, r27	; 0x8001a4 <timer0_overflow_count+0x3>
    3066:	08 95       	ret

00003068 <getMicros>:
    3068:	3f b7       	in	r19, 0x3f	; 63
    306a:	f8 94       	cli
    306c:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <timer0_overflow_count>
    3070:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <timer0_overflow_count+0x1>
    3074:	a0 91 a3 01 	lds	r26, 0x01A3	; 0x8001a3 <timer0_overflow_count+0x2>
    3078:	b0 91 a4 01 	lds	r27, 0x01A4	; 0x8001a4 <timer0_overflow_count+0x3>
    307c:	22 b7       	in	r18, 0x32	; 50
    307e:	08 b6       	in	r0, 0x38	; 56
    3080:	00 fe       	sbrs	r0, 0
    3082:	05 c0       	rjmp	.+10     	; 0x308e <getMicros+0x26>
    3084:	2f 3f       	cpi	r18, 0xFF	; 255
    3086:	19 f0       	breq	.+6      	; 0x308e <getMicros+0x26>
    3088:	01 96       	adiw	r24, 0x01	; 1
    308a:	a1 1d       	adc	r26, r1
    308c:	b1 1d       	adc	r27, r1
    308e:	3f bf       	out	0x3f, r19	; 63
    3090:	ba 2f       	mov	r27, r26
    3092:	a9 2f       	mov	r26, r25
    3094:	98 2f       	mov	r25, r24
    3096:	88 27       	eor	r24, r24
    3098:	82 0f       	add	r24, r18
    309a:	91 1d       	adc	r25, r1
    309c:	a1 1d       	adc	r26, r1
    309e:	b1 1d       	adc	r27, r1
    30a0:	bc 01       	movw	r22, r24
    30a2:	cd 01       	movw	r24, r26
    30a4:	66 0f       	add	r22, r22
    30a6:	77 1f       	adc	r23, r23
    30a8:	88 1f       	adc	r24, r24
    30aa:	99 1f       	adc	r25, r25
    30ac:	66 0f       	add	r22, r22
    30ae:	77 1f       	adc	r23, r23
    30b0:	88 1f       	adc	r24, r24
    30b2:	99 1f       	adc	r25, r25
    30b4:	08 95       	ret

000030b6 <getLCDString>:
    30b6:	20 e1       	ldi	r18, 0x10	; 16
    30b8:	ec e8       	ldi	r30, 0x8C	; 140
    30ba:	f1 e0       	ldi	r31, 0x01	; 1
    30bc:	df 01       	movw	r26, r30
    30be:	1d 92       	st	X+, r1
    30c0:	2a 95       	dec	r18
    30c2:	e9 f7       	brne	.-6      	; 0x30be <getLCDString+0x8>
    30c4:	46 2f       	mov	r20, r22
    30c6:	50 e0       	ldi	r21, 0x00	; 0
    30c8:	bc 01       	movw	r22, r24
    30ca:	cf 01       	movw	r24, r30
    30cc:	0e 94 34 39 	call	0x7268	; 0x7268 <eeprom_read_block>
    30d0:	8c e8       	ldi	r24, 0x8C	; 140
    30d2:	91 e0       	ldi	r25, 0x01	; 1
    30d4:	08 95       	ret

000030d6 <setMidiFile>:
    30d6:	0f 93       	push	r16
    30d8:	1f 93       	push	r17
    30da:	cf 93       	push	r28
    30dc:	df 93       	push	r29
    30de:	ec 01       	movw	r28, r24
    30e0:	8b 01       	movw	r16, r22
    30e2:	8b ed       	ldi	r24, 0xDB	; 219
    30e4:	91 e0       	ldi	r25, 0x01	; 1
    30e6:	fe 01       	movw	r30, r28
    30e8:	9c 01       	movw	r18, r24
    30ea:	11 92       	st	Z+, r1
    30ec:	21 50       	subi	r18, 0x01	; 1
    30ee:	30 40       	sbci	r19, 0x00	; 0
    30f0:	e1 f7       	brne	.-8      	; 0x30ea <setMidiFile+0x14>
    30f2:	ce 01       	movw	r24, r28
    30f4:	0e 94 ac 20 	call	0x4158	; 0x4158 <initialise>
    30f8:	61 e6       	ldi	r22, 0x61	; 97
    30fa:	79 e2       	ldi	r23, 0x29	; 41
    30fc:	ce 01       	movw	r24, r28
    30fe:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <setMidiHandler>
    3102:	60 e6       	ldi	r22, 0x60	; 96
    3104:	79 e2       	ldi	r23, 0x29	; 41
    3106:	ce 01       	movw	r24, r28
    3108:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <setSysexHandler>
    310c:	6f e5       	ldi	r22, 0x5F	; 95
    310e:	79 e2       	ldi	r23, 0x29	; 41
    3110:	ce 01       	movw	r24, r28
    3112:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <setMetaHandler>
    3116:	b8 01       	movw	r22, r16
    3118:	ce 01       	movw	r24, r28
    311a:	0e 94 0e 23 	call	0x461c	; 0x461c <setFilename>
    311e:	ce 01       	movw	r24, r28
    3120:	0e 94 0a 22 	call	0x4414	; 0x4414 <loadMIDIFile>
    3124:	01 96       	adiw	r24, 0x01	; 1
    3126:	99 f0       	breq	.+38     	; 0x314e <setMidiFile+0x78>
    3128:	6b e0       	ldi	r22, 0x0B	; 11
    312a:	8b e4       	ldi	r24, 0x4B	; 75
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <getLCDString>
    3132:	6b e0       	ldi	r22, 0x0B	; 11
    3134:	0e 94 b7 1c 	call	0x396e	; 0x396e <lcdPrintData>
    3138:	8f ef       	ldi	r24, 0xFF	; 255
    313a:	99 e6       	ldi	r25, 0x69	; 105
    313c:	e8 e1       	ldi	r30, 0x18	; 24
    313e:	81 50       	subi	r24, 0x01	; 1
    3140:	90 40       	sbci	r25, 0x00	; 0
    3142:	e0 40       	sbci	r30, 0x00	; 0
    3144:	e1 f7       	brne	.-8      	; 0x313e <setMidiFile+0x68>
    3146:	00 c0       	rjmp	.+0      	; 0x3148 <setMidiFile+0x72>
    3148:	00 00       	nop
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	0b c0       	rjmp	.+22     	; 0x3164 <setMidiFile+0x8e>
    314e:	fe 01       	movw	r30, r28
    3150:	e6 5b       	subi	r30, 0xB6	; 182
    3152:	ff 4f       	sbci	r31, 0xFF	; 255
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	80 83       	st	Z, r24
    3158:	38 97       	sbiw	r30, 0x08	; 8
    315a:	10 82       	st	Z, r1
    315c:	cd 5b       	subi	r28, 0xBD	; 189
    315e:	df 4f       	sbci	r29, 0xFF	; 255
    3160:	18 82       	st	Y, r1
    3162:	80 e0       	ldi	r24, 0x00	; 0
    3164:	df 91       	pop	r29
    3166:	cf 91       	pop	r28
    3168:	1f 91       	pop	r17
    316a:	0f 91       	pop	r16
    316c:	08 95       	ret

0000316e <checkSD>:
    316e:	cf 93       	push	r28
    3170:	c8 2f       	mov	r28, r24
    3172:	60 e0       	ldi	r22, 0x00	; 0
    3174:	80 e0       	ldi	r24, 0x00	; 0
    3176:	0e 94 27 1c 	call	0x384e	; 0x384e <lcdGotoXY>
    317a:	c1 30       	cpi	r28, 0x01	; 1
    317c:	29 f5       	brne	.+74     	; 0x31c8 <checkSD+0x5a>
    317e:	6f e0       	ldi	r22, 0x0F	; 15
    3180:	80 e1       	ldi	r24, 0x10	; 16
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <getLCDString>
    3188:	6f e0       	ldi	r22, 0x0F	; 15
    318a:	0e 94 b7 1c 	call	0x396e	; 0x396e <lcdPrintData>
    318e:	61 e0       	ldi	r22, 0x01	; 1
    3190:	80 e0       	ldi	r24, 0x00	; 0
    3192:	0e 94 27 1c 	call	0x384e	; 0x384e <lcdGotoXY>
    3196:	60 e0       	ldi	r22, 0x00	; 0
    3198:	70 e0       	ldi	r23, 0x00	; 0
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <f_mount>
    31a0:	88 23       	and	r24, r24
    31a2:	49 f0       	breq	.+18     	; 0x31b6 <checkSD+0x48>
    31a4:	6e e0       	ldi	r22, 0x0E	; 14
    31a6:	8d e3       	ldi	r24, 0x3D	; 61
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <getLCDString>
    31ae:	6e e0       	ldi	r22, 0x0E	; 14
    31b0:	0e 94 b7 1c 	call	0x396e	; 0x396e <lcdPrintData>
    31b4:	2d c0       	rjmp	.+90     	; 0x3210 <checkSD+0xa2>
    31b6:	6a e0       	ldi	r22, 0x0A	; 10
    31b8:	83 e3       	ldi	r24, 0x33	; 51
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <getLCDString>
    31c0:	6a e0       	ldi	r22, 0x0A	; 10
    31c2:	0e 94 b7 1c 	call	0x396e	; 0x396e <lcdPrintData>
    31c6:	24 c0       	rjmp	.+72     	; 0x3210 <checkSD+0xa2>
    31c8:	60 e1       	ldi	r22, 0x10	; 16
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <getLCDString>
    31d2:	60 e1       	ldi	r22, 0x10	; 16
    31d4:	0e 94 b7 1c 	call	0x396e	; 0x396e <lcdPrintData>
    31d8:	61 e0       	ldi	r22, 0x01	; 1
    31da:	80 e0       	ldi	r24, 0x00	; 0
    31dc:	0e 94 27 1c 	call	0x384e	; 0x384e <lcdGotoXY>
    31e0:	67 e5       	ldi	r22, 0x57	; 87
    31e2:	72 e0       	ldi	r23, 0x02	; 2
    31e4:	80 e0       	ldi	r24, 0x00	; 0
    31e6:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <f_mount>
    31ea:	88 23       	and	r24, r24
    31ec:	49 f0       	breq	.+18     	; 0x3200 <checkSD+0x92>
    31ee:	6c e0       	ldi	r22, 0x0C	; 12
    31f0:	87 e2       	ldi	r24, 0x27	; 39
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <getLCDString>
    31f8:	6c e0       	ldi	r22, 0x0C	; 12
    31fa:	0e 94 b7 1c 	call	0x396e	; 0x396e <lcdPrintData>
    31fe:	08 c0       	rjmp	.+16     	; 0x3210 <checkSD+0xa2>
    3200:	68 e0       	ldi	r22, 0x08	; 8
    3202:	8f e1       	ldi	r24, 0x1F	; 31
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <getLCDString>
    320a:	68 e0       	ldi	r22, 0x08	; 8
    320c:	0e 94 b7 1c 	call	0x396e	; 0x396e <lcdPrintData>
    3210:	cf 91       	pop	r28
    3212:	08 95       	ret

00003214 <createFileList>:
    3214:	8f 92       	push	r8
    3216:	9f 92       	push	r9
    3218:	af 92       	push	r10
    321a:	bf 92       	push	r11
    321c:	cf 92       	push	r12
    321e:	df 92       	push	r13
    3220:	ef 92       	push	r14
    3222:	ff 92       	push	r15
    3224:	0f 93       	push	r16
    3226:	1f 93       	push	r17
    3228:	cf 93       	push	r28
    322a:	df 93       	push	r29
    322c:	cd b7       	in	r28, 0x3d	; 61
    322e:	de b7       	in	r29, 0x3e	; 62
    3230:	e5 97       	sbiw	r28, 0x35	; 53
    3232:	0f b6       	in	r0, 0x3f	; 63
    3234:	f8 94       	cli
    3236:	de bf       	out	0x3e, r29	; 62
    3238:	0f be       	out	0x3f, r0	; 63
    323a:	cd bf       	out	0x3d, r28	; 61
    323c:	5c 01       	movw	r10, r24
    323e:	4b 01       	movw	r8, r22
    3240:	6a 01       	movw	r12, r20
    3242:	68 e0       	ldi	r22, 0x08	; 8
    3244:	70 e0       	ldi	r23, 0x00	; 0
    3246:	ce 01       	movw	r24, r28
    3248:	01 96       	adiw	r24, 0x01	; 1
    324a:	0e 94 7d 13 	call	0x26fa	; 0x26fa <f_getcwd>
    324e:	be 01       	movw	r22, r28
    3250:	6f 5f       	subi	r22, 0xFF	; 255
    3252:	7f 4f       	sbci	r23, 0xFF	; 255
    3254:	ce 01       	movw	r24, r28
    3256:	80 96       	adiw	r24, 0x20	; 32
    3258:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <f_opendir>
    325c:	18 2f       	mov	r17, r24
    325e:	81 11       	cpse	r24, r1
    3260:	50 c0       	rjmp	.+160    	; 0x3302 <createFileList+0xee>
    3262:	7e 01       	movw	r14, r28
    3264:	23 e1       	ldi	r18, 0x13	; 19
    3266:	e2 0e       	add	r14, r18
    3268:	f1 1c       	adc	r15, r1
    326a:	00 e1       	ldi	r16, 0x10	; 16
    326c:	be 01       	movw	r22, r28
    326e:	66 5f       	subi	r22, 0xF6	; 246
    3270:	7f 4f       	sbci	r23, 0xFF	; 255
    3272:	ce 01       	movw	r24, r28
    3274:	80 96       	adiw	r24, 0x20	; 32
    3276:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <f_readdir>
    327a:	18 2f       	mov	r17, r24
    327c:	81 11       	cpse	r24, r1
    327e:	41 c0       	rjmp	.+130    	; 0x3302 <createFileList+0xee>
    3280:	8b 89       	ldd	r24, Y+19	; 0x13
    3282:	88 23       	and	r24, r24
    3284:	f1 f1       	breq	.+124    	; 0x3302 <createFileList+0xee>
    3286:	8e 32       	cpi	r24, 0x2E	; 46
    3288:	89 f3       	breq	.-30     	; 0x326c <createFileList+0x58>
    328a:	8a 89       	ldd	r24, Y+18	; 0x12
    328c:	84 fd       	sbrc	r24, 4
    328e:	ee cf       	rjmp	.-36     	; 0x326c <createFileList+0x58>
    3290:	f7 01       	movw	r30, r14
    3292:	01 90       	ld	r0, Z+
    3294:	00 20       	and	r0, r0
    3296:	e9 f7       	brne	.-6      	; 0x3292 <createFileList+0x7e>
    3298:	31 97       	sbiw	r30, 0x01	; 1
    329a:	ee 19       	sub	r30, r14
    329c:	ff 09       	sbc	r31, r15
    329e:	70 97       	sbiw	r30, 0x10	; 16
    32a0:	28 f7       	brcc	.-54     	; 0x326c <createFileList+0x58>
    32a2:	d6 01       	movw	r26, r12
    32a4:	8c 91       	ld	r24, X
    32a6:	f5 01       	movw	r30, r10
    32a8:	b0 e1       	ldi	r27, 0x10	; 16
    32aa:	8b 9f       	mul	r24, r27
    32ac:	e0 0d       	add	r30, r0
    32ae:	f1 1d       	adc	r31, r1
    32b0:	11 24       	eor	r1, r1
    32b2:	df 01       	movw	r26, r30
    32b4:	20 2f       	mov	r18, r16
    32b6:	1d 92       	st	X+, r1
    32b8:	2a 95       	dec	r18
    32ba:	e9 f7       	brne	.-6      	; 0x32b6 <createFileList+0xa2>
    32bc:	b4 01       	movw	r22, r8
    32be:	c7 01       	movw	r24, r14
    32c0:	0e 94 1a 39 	call	0x7234	; 0x7234 <strstr>
    32c4:	89 2b       	or	r24, r25
    32c6:	c1 f0       	breq	.+48     	; 0x32f8 <createFileList+0xe4>
    32c8:	f7 01       	movw	r30, r14
    32ca:	01 90       	ld	r0, Z+
    32cc:	00 20       	and	r0, r0
    32ce:	e9 f7       	brne	.-6      	; 0x32ca <createFileList+0xb6>
    32d0:	31 97       	sbiw	r30, 0x01	; 1
    32d2:	af 01       	movw	r20, r30
    32d4:	4e 19       	sub	r20, r14
    32d6:	5f 09       	sbc	r21, r15
    32d8:	d6 01       	movw	r26, r12
    32da:	8c 91       	ld	r24, X
    32dc:	b7 01       	movw	r22, r14
    32de:	f5 01       	movw	r30, r10
    32e0:	20 e1       	ldi	r18, 0x10	; 16
    32e2:	82 9f       	mul	r24, r18
    32e4:	e0 0d       	add	r30, r0
    32e6:	f1 1d       	adc	r31, r1
    32e8:	11 24       	eor	r1, r1
    32ea:	cf 01       	movw	r24, r30
    32ec:	0e 94 0b 39 	call	0x7216	; 0x7216 <strncpy>
    32f0:	d6 01       	movw	r26, r12
    32f2:	8c 91       	ld	r24, X
    32f4:	8f 5f       	subi	r24, 0xFF	; 255
    32f6:	8c 93       	st	X, r24
    32f8:	f6 01       	movw	r30, r12
    32fa:	80 81       	ld	r24, Z
    32fc:	8a 30       	cpi	r24, 0x0A	; 10
    32fe:	09 f0       	breq	.+2      	; 0x3302 <createFileList+0xee>
    3300:	b5 cf       	rjmp	.-150    	; 0x326c <createFileList+0x58>
    3302:	81 2f       	mov	r24, r17
    3304:	e5 96       	adiw	r28, 0x35	; 53
    3306:	0f b6       	in	r0, 0x3f	; 63
    3308:	f8 94       	cli
    330a:	de bf       	out	0x3e, r29	; 62
    330c:	0f be       	out	0x3f, r0	; 63
    330e:	cd bf       	out	0x3d, r28	; 61
    3310:	df 91       	pop	r29
    3312:	cf 91       	pop	r28
    3314:	1f 91       	pop	r17
    3316:	0f 91       	pop	r16
    3318:	ff 90       	pop	r15
    331a:	ef 90       	pop	r14
    331c:	df 90       	pop	r13
    331e:	cf 90       	pop	r12
    3320:	bf 90       	pop	r11
    3322:	af 90       	pop	r10
    3324:	9f 90       	pop	r9
    3326:	8f 90       	pop	r8
    3328:	08 95       	ret

0000332a <handleFileList>:



void handleFileList(unsigned char currentMode,unsigned char currentAction,struct file_entry_lookup *filentry,char (*list)[MAX_FNAME]){
    332a:	af 92       	push	r10
    332c:	bf 92       	push	r11
    332e:	cf 92       	push	r12
    3330:	df 92       	push	r13
    3332:	ef 92       	push	r14
    3334:	ff 92       	push	r15
    3336:	0f 93       	push	r16
    3338:	1f 93       	push	r17
    333a:	cf 93       	push	r28
    333c:	df 93       	push	r29
    333e:	00 d0       	rcall	.+0      	; 0x3340 <handleFileList+0x16>
    3340:	00 d0       	rcall	.+0      	; 0x3342 <handleFileList+0x18>
    3342:	cd b7       	in	r28, 0x3d	; 61
    3344:	de b7       	in	r29, 0x3e	; 62
    3346:	7a 01       	movw	r14, r20
    3348:	59 01       	movw	r10, r18
	unsigned char tmp = filentry->current_index - (filentry->current_index % 2);
    334a:	fa 01       	movw	r30, r20
    334c:	01 81       	ldd	r16, Z+1	; 0x01
	char *ch[2] = {"*"," "};
    334e:	83 e3       	ldi	r24, 0x33	; 51
    3350:	91 e0       	ldi	r25, 0x01	; 1
    3352:	9a 83       	std	Y+2, r25	; 0x02
    3354:	89 83       	std	Y+1, r24	; 0x01
    3356:	85 e3       	ldi	r24, 0x35	; 53
    3358:	91 e0       	ldi	r25, 0x01	; 1
    335a:	9c 83       	std	Y+4, r25	; 0x04
    335c:	8b 83       	std	Y+3, r24	; 0x03
	
	lcdGotoXY(0,0);
    335e:	60 e0       	ldi	r22, 0x00	; 0
    3360:	80 e0       	ldi	r24, 0x00	; 0
    3362:	0e 94 27 1c 	call	0x384e	; 0x384e <lcdGotoXY>
	if(filentry->current_items == 0){
    3366:	f7 01       	movw	r30, r14
    3368:	80 81       	ld	r24, Z
    336a:	81 11       	cpse	r24, r1
    336c:	09 c0       	rjmp	.+18     	; 0x3380 <handleFileList+0x56>
		lcdPrintData(getLCDString(NO_SND,NO_SND_LEN),NO_SND_LEN);
    336e:	69 e0       	ldi	r22, 0x09	; 9
    3370:	82 e7       	ldi	r24, 0x72	; 114
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <getLCDString>
    3378:	69 e0       	ldi	r22, 0x09	; 9
    337a:	0e 94 b7 1c 	call	0x396e	; 0x396e <lcdPrintData>
    337e:	5b c0       	rjmp	.+182    	; 0x3436 <handleFileList+0x10c>
		return;
	}
	
	lcdGotoXY(1,0);
    3380:	60 e0       	ldi	r22, 0x00	; 0
    3382:	81 e0       	ldi	r24, 0x01	; 1
    3384:	0e 94 27 1c 	call	0x384e	; 0x384e <lcdGotoXY>
	lcdPrintData(list[tmp],strlen(list[tmp]));
    3388:	0e 7f       	andi	r16, 0xFE	; 254
    338a:	f0 e1       	ldi	r31, 0x10	; 16
    338c:	0f 9f       	mul	r16, r31
    338e:	80 01       	movw	r16, r0
    3390:	11 24       	eor	r1, r1
    3392:	c5 01       	movw	r24, r10
    3394:	80 0f       	add	r24, r16
    3396:	91 1f       	adc	r25, r17
    3398:	fc 01       	movw	r30, r24
    339a:	01 90       	ld	r0, Z+
    339c:	00 20       	and	r0, r0
    339e:	e9 f7       	brne	.-6      	; 0x339a <handleFileList+0x70>
    33a0:	31 97       	sbiw	r30, 0x01	; 1
    33a2:	bf 01       	movw	r22, r30
    33a4:	68 1b       	sub	r22, r24
    33a6:	79 0b       	sbc	r23, r25
    33a8:	0e 94 b7 1c 	call	0x396e	; 0x396e <lcdPrintData>
	lcdGotoXY(0,0);
    33ac:	60 e0       	ldi	r22, 0x00	; 0
    33ae:	80 e0       	ldi	r24, 0x00	; 0
    33b0:	0e 94 27 1c 	call	0x384e	; 0x384e <lcdGotoXY>
	lcdPrintData(ch[filentry->current_index % 2],1);
    33b4:	f7 01       	movw	r30, r14
    33b6:	81 81       	ldd	r24, Z+1	; 0x01
    33b8:	80 fb       	bst	r24, 0
    33ba:	cc 24       	eor	r12, r12
    33bc:	c0 f8       	bld	r12, 0
    33be:	d1 2c       	mov	r13, r1
    33c0:	cc 0c       	add	r12, r12
    33c2:	dd 1c       	adc	r13, r13
    33c4:	fe 01       	movw	r30, r28
    33c6:	ec 0d       	add	r30, r12
    33c8:	fd 1d       	adc	r31, r13
    33ca:	61 e0       	ldi	r22, 0x01	; 1
    33cc:	81 81       	ldd	r24, Z+1	; 0x01
    33ce:	92 81       	ldd	r25, Z+2	; 0x02
    33d0:	0e 94 b7 1c 	call	0x396e	; 0x396e <lcdPrintData>
	if(filentry->current_index < filentry->current_items){
    33d4:	f7 01       	movw	r30, r14
    33d6:	91 81       	ldd	r25, Z+1	; 0x01
    33d8:	80 81       	ld	r24, Z
    33da:	98 17       	cp	r25, r24
    33dc:	60 f5       	brcc	.+88     	; 0x3436 <handleFileList+0x10c>
		lcdGotoXY(1,1);
    33de:	61 e0       	ldi	r22, 0x01	; 1
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	0e 94 27 1c 	call	0x384e	; 0x384e <lcdGotoXY>
		lcdPrintData(list[tmp + 1],strlen(list[tmp + 1]));
    33e6:	c8 01       	movw	r24, r16
    33e8:	40 96       	adiw	r24, 0x10	; 16
    33ea:	8a 0d       	add	r24, r10
    33ec:	9b 1d       	adc	r25, r11
    33ee:	fc 01       	movw	r30, r24
    33f0:	01 90       	ld	r0, Z+
    33f2:	00 20       	and	r0, r0
    33f4:	e9 f7       	brne	.-6      	; 0x33f0 <handleFileList+0xc6>
    33f6:	31 97       	sbiw	r30, 0x01	; 1
    33f8:	bf 01       	movw	r22, r30
    33fa:	68 1b       	sub	r22, r24
    33fc:	79 0b       	sbc	r23, r25
    33fe:	0e 94 b7 1c 	call	0x396e	; 0x396e <lcdPrintData>
		lcdGotoXY(0,1);
    3402:	61 e0       	ldi	r22, 0x01	; 1
    3404:	80 e0       	ldi	r24, 0x00	; 0
    3406:	0e 94 27 1c 	call	0x384e	; 0x384e <lcdGotoXY>
		lcdPrintData(ch[(filentry->current_index + 1) % 2],1);
    340a:	f7 01       	movw	r30, r14
    340c:	81 81       	ldd	r24, Z+1	; 0x01
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	01 96       	adiw	r24, 0x01	; 1
    3412:	81 70       	andi	r24, 0x01	; 1
    3414:	90 78       	andi	r25, 0x80	; 128
    3416:	99 23       	and	r25, r25
    3418:	24 f4       	brge	.+8      	; 0x3422 <handleFileList+0xf8>
    341a:	01 97       	sbiw	r24, 0x01	; 1
    341c:	8e 6f       	ori	r24, 0xFE	; 254
    341e:	9f 6f       	ori	r25, 0xFF	; 255
    3420:	01 96       	adiw	r24, 0x01	; 1
    3422:	88 0f       	add	r24, r24
    3424:	99 1f       	adc	r25, r25
    3426:	fe 01       	movw	r30, r28
    3428:	e8 0f       	add	r30, r24
    342a:	f9 1f       	adc	r31, r25
    342c:	61 e0       	ldi	r22, 0x01	; 1
    342e:	81 81       	ldd	r24, Z+1	; 0x01
    3430:	92 81       	ldd	r25, Z+2	; 0x02
    3432:	0e 94 b7 1c 	call	0x396e	; 0x396e <lcdPrintData>
	}
}
    3436:	0f 90       	pop	r0
    3438:	0f 90       	pop	r0
    343a:	0f 90       	pop	r0
    343c:	0f 90       	pop	r0
    343e:	df 91       	pop	r29
    3440:	cf 91       	pop	r28
    3442:	1f 91       	pop	r17
    3444:	0f 91       	pop	r16
    3446:	ff 90       	pop	r15
    3448:	ef 90       	pop	r14
    344a:	df 90       	pop	r13
    344c:	cf 90       	pop	r12
    344e:	bf 90       	pop	r11
    3450:	af 90       	pop	r10
    3452:	08 95       	ret

00003454 <writeMidi>:

void writeMidi(FIL *file){
    3454:	08 95       	ret

00003456 <lcdInitHW>:
}

void lcdHome(void)
{
	// move cursor to home
	lcdControlWrite(1<<LCD_HOME);
    3456:	92 98       	cbi	0x12, 2	; 18
    3458:	93 98       	cbi	0x12, 3	; 18
    345a:	94 98       	cbi	0x12, 4	; 18
    345c:	8a 9a       	sbi	0x11, 2	; 17
    345e:	8b 9a       	sbi	0x11, 3	; 17
    3460:	8c 9a       	sbi	0x11, 4	; 17
    3462:	8a b3       	in	r24, 0x1a	; 26
    3464:	8f 70       	andi	r24, 0x0F	; 15
    3466:	8a bb       	out	0x1a, r24	; 26
    3468:	8b b3       	in	r24, 0x1b	; 27
    346a:	80 6f       	ori	r24, 0xF0	; 240
    346c:	8b bb       	out	0x1b, r24	; 27
    346e:	08 95       	ret

00003470 <lcdBusyWait>:
    3470:	92 98       	cbi	0x12, 2	; 18
    3472:	8a b3       	in	r24, 0x1a	; 26
    3474:	8f 70       	andi	r24, 0x0F	; 15
    3476:	8a bb       	out	0x1a, r24	; 26
    3478:	8b b3       	in	r24, 0x1b	; 27
    347a:	80 6f       	ori	r24, 0xF0	; 240
    347c:	8b bb       	out	0x1b, r24	; 27
    347e:	93 9a       	sbi	0x12, 3	; 18
    3480:	94 9a       	sbi	0x12, 4	; 18
	...
    349e:	cf 9b       	sbis	0x19, 7	; 25
    34a0:	76 c0       	rjmp	.+236    	; 0x358e <lcdBusyWait+0x11e>
    34a2:	94 98       	cbi	0x12, 4	; 18
	...
    34dc:	94 9a       	sbi	0x12, 4	; 18
	...
    3516:	94 98       	cbi	0x12, 4	; 18
	...
    3550:	94 9a       	sbi	0x12, 4	; 18
	...
    358a:	cf 99       	sbic	0x19, 7	; 25
    358c:	8a cf       	rjmp	.-236    	; 0x34a2 <lcdBusyWait+0x32>
    358e:	94 98       	cbi	0x12, 4	; 18
    3590:	08 95       	ret

00003592 <lcdControlWrite>:
    3592:	cf 93       	push	r28
    3594:	c8 2f       	mov	r28, r24
    3596:	0e 94 38 1a 	call	0x3470	; 0x3470 <lcdBusyWait>
    359a:	92 98       	cbi	0x12, 2	; 18
    359c:	93 98       	cbi	0x12, 3	; 18
    359e:	94 9a       	sbi	0x12, 4	; 18
    35a0:	8a b3       	in	r24, 0x1a	; 26
    35a2:	80 6f       	ori	r24, 0xF0	; 240
    35a4:	8a bb       	out	0x1a, r24	; 26
    35a6:	8b b3       	in	r24, 0x1b	; 27
    35a8:	8f 70       	andi	r24, 0x0F	; 15
    35aa:	9c 2f       	mov	r25, r28
    35ac:	90 7f       	andi	r25, 0xF0	; 240
    35ae:	89 2b       	or	r24, r25
    35b0:	8b bb       	out	0x1b, r24	; 27
	...
    35ea:	94 98       	cbi	0x12, 4	; 18
	...
    3624:	94 9a       	sbi	0x12, 4	; 18
    3626:	8b b3       	in	r24, 0x1b	; 27
    3628:	28 2f       	mov	r18, r24
    362a:	2f 70       	andi	r18, 0x0F	; 15
    362c:	30 e1       	ldi	r19, 0x10	; 16
    362e:	c3 9f       	mul	r28, r19
    3630:	c0 01       	movw	r24, r0
    3632:	11 24       	eor	r1, r1
    3634:	82 2b       	or	r24, r18
    3636:	8b bb       	out	0x1b, r24	; 27
	...
    3670:	94 98       	cbi	0x12, 4	; 18
    3672:	8a b3       	in	r24, 0x1a	; 26
    3674:	8f 70       	andi	r24, 0x0F	; 15
    3676:	8a bb       	out	0x1a, r24	; 26
    3678:	8b b3       	in	r24, 0x1b	; 27
    367a:	80 6f       	ori	r24, 0xF0	; 240
    367c:	8b bb       	out	0x1b, r24	; 27
    367e:	cf 91       	pop	r28
    3680:	08 95       	ret

00003682 <lcdControlRead>:
    3682:	0e 94 38 1a 	call	0x3470	; 0x3470 <lcdBusyWait>
    3686:	8a b3       	in	r24, 0x1a	; 26
    3688:	8f 70       	andi	r24, 0x0F	; 15
    368a:	8a bb       	out	0x1a, r24	; 26
    368c:	8b b3       	in	r24, 0x1b	; 27
    368e:	80 6f       	ori	r24, 0xF0	; 240
    3690:	8b bb       	out	0x1b, r24	; 27
    3692:	92 98       	cbi	0x12, 2	; 18
    3694:	93 9a       	sbi	0x12, 3	; 18
    3696:	94 9a       	sbi	0x12, 4	; 18
	...
    36d0:	99 b3       	in	r25, 0x19	; 25
    36d2:	94 98       	cbi	0x12, 4	; 18
	...
    370c:	94 9a       	sbi	0x12, 4	; 18
	...
    3746:	29 b3       	in	r18, 0x19	; 25
    3748:	22 95       	swap	r18
    374a:	2f 70       	andi	r18, 0x0F	; 15
    374c:	89 2f       	mov	r24, r25
    374e:	80 7f       	andi	r24, 0xF0	; 240
    3750:	94 98       	cbi	0x12, 4	; 18
    3752:	82 2b       	or	r24, r18
    3754:	08 95       	ret

00003756 <lcdDataWrite>:
    3756:	cf 93       	push	r28
    3758:	c8 2f       	mov	r28, r24
    375a:	0e 94 38 1a 	call	0x3470	; 0x3470 <lcdBusyWait>
    375e:	92 9a       	sbi	0x12, 2	; 18
    3760:	93 98       	cbi	0x12, 3	; 18
    3762:	94 9a       	sbi	0x12, 4	; 18
    3764:	8a b3       	in	r24, 0x1a	; 26
    3766:	80 6f       	ori	r24, 0xF0	; 240
    3768:	8a bb       	out	0x1a, r24	; 26
    376a:	8b b3       	in	r24, 0x1b	; 27
    376c:	8f 70       	andi	r24, 0x0F	; 15
    376e:	9c 2f       	mov	r25, r28
    3770:	90 7f       	andi	r25, 0xF0	; 240
    3772:	89 2b       	or	r24, r25
    3774:	8b bb       	out	0x1b, r24	; 27
	...
    37ae:	94 98       	cbi	0x12, 4	; 18
	...
    37e8:	94 9a       	sbi	0x12, 4	; 18
    37ea:	8b b3       	in	r24, 0x1b	; 27
    37ec:	28 2f       	mov	r18, r24
    37ee:	2f 70       	andi	r18, 0x0F	; 15
    37f0:	30 e1       	ldi	r19, 0x10	; 16
    37f2:	c3 9f       	mul	r28, r19
    37f4:	c0 01       	movw	r24, r0
    37f6:	11 24       	eor	r1, r1
    37f8:	82 2b       	or	r24, r18
    37fa:	8b bb       	out	0x1b, r24	; 27
	...
    3834:	94 98       	cbi	0x12, 4	; 18
    3836:	8a b3       	in	r24, 0x1a	; 26
    3838:	8f 70       	andi	r24, 0x0F	; 15
    383a:	8a bb       	out	0x1a, r24	; 26
    383c:	8b b3       	in	r24, 0x1b	; 27
    383e:	80 6f       	ori	r24, 0xF0	; 240
    3840:	8b bb       	out	0x1b, r24	; 27
    3842:	cf 91       	pop	r28
    3844:	08 95       	ret

00003846 <lcdClear>:
}

void lcdClear(void)
{
	// clear LCD
	lcdControlWrite(1<<LCD_CLR);
    3846:	81 e0       	ldi	r24, 0x01	; 1
    3848:	0e 94 c9 1a 	call	0x3592	; 0x3592 <lcdControlWrite>
    384c:	08 95       	ret

0000384e <lcdGotoXY>:
void lcdGotoXY(u08 x, u08 y)
{
	register u08 DDRAMAddr;

	// remap lines into proper order
	switch(y)
    384e:	62 30       	cpi	r22, 0x02	; 2
    3850:	31 f0       	breq	.+12     	; 0x385e <lcdGotoXY+0x10>
    3852:	63 30       	cpi	r22, 0x03	; 3
    3854:	31 f0       	breq	.+12     	; 0x3862 <lcdGotoXY+0x14>
    3856:	61 30       	cpi	r22, 0x01	; 1
    3858:	29 f4       	brne	.+10     	; 0x3864 <lcdGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    385a:	80 5c       	subi	r24, 0xC0	; 192
    385c:	03 c0       	rjmp	.+6      	; 0x3864 <lcdGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    385e:	8c 5e       	subi	r24, 0xEC	; 236
    3860:	01 c0       	rjmp	.+2      	; 0x3864 <lcdGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    3862:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}

	// set data address
	lcdControlWrite(1<<LCD_DDRAM | DDRAMAddr);
    3864:	80 68       	ori	r24, 0x80	; 128
    3866:	0e 94 c9 1a 	call	0x3592	; 0x3592 <lcdControlWrite>
    386a:	08 95       	ret

0000386c <lcdLoadCustomChar>:
}

void lcdLoadCustomChar(u08* lcdCustomCharArray, u08 romCharNum, u08 lcdCharNum)
{
    386c:	0f 93       	push	r16
    386e:	1f 93       	push	r17
    3870:	cf 93       	push	r28
    3872:	df 93       	push	r29
    3874:	00 d0       	rcall	.+0      	; 0x3876 <lcdLoadCustomChar+0xa>
    3876:	1f 92       	push	r1
    3878:	cd b7       	in	r28, 0x3d	; 61
    387a:	de b7       	in	r29, 0x3e	; 62
    387c:	8c 01       	movw	r16, r24
    387e:	6b 83       	std	Y+3, r22	; 0x03
    3880:	4a 83       	std	Y+2, r20	; 0x02
	register u08 i;
	u08 saveDDRAMAddr;

	// backup the current cursor position
	saveDDRAMAddr = lcdControlRead() & 0x7F;
    3882:	0e 94 41 1b 	call	0x3682	; 0x3682 <lcdControlRead>
    3886:	8f 77       	andi	r24, 0x7F	; 127
    3888:	89 83       	std	Y+1, r24	; 0x01

	// multiply the character index by 8
	lcdCharNum = (lcdCharNum<<3);	// each character occupies 8 bytes
    388a:	8a 81       	ldd	r24, Y+2	; 0x02
    388c:	88 0f       	add	r24, r24
    388e:	88 0f       	add	r24, r24
    3890:	88 0f       	add	r24, r24
    3892:	8a 83       	std	Y+2, r24	; 0x02
    3894:	9b 81       	ldd	r25, Y+3	; 0x03
    3896:	99 0f       	add	r25, r25
    3898:	99 0f       	add	r25, r25
    389a:	99 0f       	add	r25, r25
    389c:	09 0f       	add	r16, r25
    389e:	11 1d       	adc	r17, r1
    38a0:	88 5f       	subi	r24, 0xF8	; 248
    38a2:	8b 83       	std	Y+3, r24	; 0x03

	// copy the 8 bytes into CG (character generator) RAM
	for(i=0; i<8; i++)
	{
		// set CG RAM address
		lcdControlWrite((1<<LCD_CGRAM) | (lcdCharNum+i));
    38a4:	8a 81       	ldd	r24, Y+2	; 0x02
    38a6:	80 64       	ori	r24, 0x40	; 64
    38a8:	0e 94 c9 1a 	call	0x3592	; 0x3592 <lcdControlWrite>
		// write character data
		lcdDataWrite( pgm_read_byte(lcdCustomCharArray+romCharNum+i) );
    38ac:	f8 01       	movw	r30, r16
    38ae:	84 91       	lpm	r24, Z
    38b0:	0e 94 ab 1b 	call	0x3756	; 0x3756 <lcdDataWrite>
    38b4:	fa 81       	ldd	r31, Y+2	; 0x02
    38b6:	ff 5f       	subi	r31, 0xFF	; 255
    38b8:	fa 83       	std	Y+2, r31	; 0x02
    38ba:	0f 5f       	subi	r16, 0xFF	; 255
    38bc:	1f 4f       	sbci	r17, 0xFF	; 255
	// multiply the character index by 8
	lcdCharNum = (lcdCharNum<<3);	// each character occupies 8 bytes
	romCharNum = (romCharNum<<3);	// each character occupies 8 bytes

	// copy the 8 bytes into CG (character generator) RAM
	for(i=0; i<8; i++)
    38be:	8b 81       	ldd	r24, Y+3	; 0x03
    38c0:	f8 13       	cpse	r31, r24
    38c2:	f0 cf       	rjmp	.-32     	; 0x38a4 <lcdLoadCustomChar+0x38>
		// write character data
		lcdDataWrite( pgm_read_byte(lcdCustomCharArray+romCharNum+i) );
	}

	// restore the previous cursor position
	lcdControlWrite(1<<LCD_DDRAM | saveDDRAMAddr);
    38c4:	89 81       	ldd	r24, Y+1	; 0x01
    38c6:	80 68       	ori	r24, 0x80	; 128
    38c8:	0e 94 c9 1a 	call	0x3592	; 0x3592 <lcdControlWrite>

}
    38cc:	0f 90       	pop	r0
    38ce:	0f 90       	pop	r0
    38d0:	0f 90       	pop	r0
    38d2:	df 91       	pop	r29
    38d4:	cf 91       	pop	r28
    38d6:	1f 91       	pop	r17
    38d8:	0f 91       	pop	r16
    38da:	08 95       	ret

000038dc <lcdInit>:
/*************************************************************/

void lcdInit()
{
	// initialize hardware
	lcdInitHW();
    38dc:	0e 94 2b 1a 	call	0x3456	; 0x3456 <lcdInitHW>
	// LCD function set
	lcdControlWrite(LCD_FUNCTION_DEFAULT);
    38e0:	88 e2       	ldi	r24, 0x28	; 40
    38e2:	0e 94 c9 1a 	call	0x3592	; 0x3592 <lcdControlWrite>
	// clear LCD
	lcdControlWrite(1<<LCD_CLR);
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	0e 94 c9 1a 	call	0x3592	; 0x3592 <lcdControlWrite>
	delay(60000);	// wait 60ms
    38ec:	80 e6       	ldi	r24, 0x60	; 96
    38ee:	9a ee       	ldi	r25, 0xEA	; 234
    38f0:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <delay_us>
	// set entry mode
	lcdControlWrite(1<<LCD_ENTRY_MODE | 1<<LCD_ENTRY_INC);
    38f4:	86 e0       	ldi	r24, 0x06	; 6
    38f6:	0e 94 c9 1a 	call	0x3592	; 0x3592 <lcdControlWrite>
	// set display to on
	//lcdControlWrite(1<<LCD_ON_CTRL | 1<<LCD_ON_DISPLAY | 1<<LCD_ON_BLINK);
	lcdControlWrite(1<<LCD_ON_CTRL | 1<<LCD_ON_DISPLAY );
    38fa:	8c e0       	ldi	r24, 0x0C	; 12
    38fc:	0e 94 c9 1a 	call	0x3592	; 0x3592 <lcdControlWrite>
	// move cursor to home
	lcdControlWrite(1<<LCD_HOME);
    3900:	82 e0       	ldi	r24, 0x02	; 2
    3902:	0e 94 c9 1a 	call	0x3592	; 0x3592 <lcdControlWrite>
	// set data address to 0
	lcdControlWrite(1<<LCD_DDRAM | 0x00);
    3906:	80 e8       	ldi	r24, 0x80	; 128
    3908:	0e 94 c9 1a 	call	0x3592	; 0x3592 <lcdControlWrite>

	// load the first 8 custom characters
	lcdLoadCustomChar((u08*)LcdCustomChar,0,0);
    390c:	40 e0       	ldi	r20, 0x00	; 0
    390e:	60 e0       	ldi	r22, 0x00	; 0
    3910:	86 e8       	ldi	r24, 0x86	; 134
    3912:	92 e0       	ldi	r25, 0x02	; 2
    3914:	0e 94 36 1c 	call	0x386c	; 0x386c <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,1,1);
    3918:	41 e0       	ldi	r20, 0x01	; 1
    391a:	61 e0       	ldi	r22, 0x01	; 1
    391c:	86 e8       	ldi	r24, 0x86	; 134
    391e:	92 e0       	ldi	r25, 0x02	; 2
    3920:	0e 94 36 1c 	call	0x386c	; 0x386c <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,2,2);
    3924:	42 e0       	ldi	r20, 0x02	; 2
    3926:	62 e0       	ldi	r22, 0x02	; 2
    3928:	86 e8       	ldi	r24, 0x86	; 134
    392a:	92 e0       	ldi	r25, 0x02	; 2
    392c:	0e 94 36 1c 	call	0x386c	; 0x386c <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,3,3);
    3930:	43 e0       	ldi	r20, 0x03	; 3
    3932:	63 e0       	ldi	r22, 0x03	; 3
    3934:	86 e8       	ldi	r24, 0x86	; 134
    3936:	92 e0       	ldi	r25, 0x02	; 2
    3938:	0e 94 36 1c 	call	0x386c	; 0x386c <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,4,4);
    393c:	44 e0       	ldi	r20, 0x04	; 4
    393e:	64 e0       	ldi	r22, 0x04	; 4
    3940:	86 e8       	ldi	r24, 0x86	; 134
    3942:	92 e0       	ldi	r25, 0x02	; 2
    3944:	0e 94 36 1c 	call	0x386c	; 0x386c <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,5,5);
    3948:	45 e0       	ldi	r20, 0x05	; 5
    394a:	65 e0       	ldi	r22, 0x05	; 5
    394c:	86 e8       	ldi	r24, 0x86	; 134
    394e:	92 e0       	ldi	r25, 0x02	; 2
    3950:	0e 94 36 1c 	call	0x386c	; 0x386c <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,6,6);
    3954:	46 e0       	ldi	r20, 0x06	; 6
    3956:	66 e0       	ldi	r22, 0x06	; 6
    3958:	86 e8       	ldi	r24, 0x86	; 134
    395a:	92 e0       	ldi	r25, 0x02	; 2
    395c:	0e 94 36 1c 	call	0x386c	; 0x386c <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,7,7);
    3960:	47 e0       	ldi	r20, 0x07	; 7
    3962:	67 e0       	ldi	r22, 0x07	; 7
    3964:	86 e8       	ldi	r24, 0x86	; 134
    3966:	92 e0       	ldi	r25, 0x02	; 2
    3968:	0e 94 36 1c 	call	0x386c	; 0x386c <lcdLoadCustomChar>
    396c:	08 95       	ret

0000396e <lcdPrintData>:
	lcdControlWrite(1<<LCD_DDRAM | saveDDRAMAddr);

}

void lcdPrintData(char* data, u08 nBytes)
{
    396e:	0f 93       	push	r16
    3970:	1f 93       	push	r17
    3972:	cf 93       	push	r28
    3974:	df 93       	push	r29
	register u08 i;

	// check to make sure we have a good pointer
	if (!data) return;
    3976:	00 97       	sbiw	r24, 0x00	; 0
    3978:	81 f0       	breq	.+32     	; 0x399a <lcdPrintData+0x2c>

	// print data
	for(i=0; i<nBytes; i++)
    397a:	66 23       	and	r22, r22
    397c:	71 f0       	breq	.+28     	; 0x399a <lcdPrintData+0x2c>
    397e:	ec 01       	movw	r28, r24
    3980:	61 50       	subi	r22, 0x01	; 1
    3982:	06 2f       	mov	r16, r22
    3984:	10 e0       	ldi	r17, 0x00	; 0
    3986:	0f 5f       	subi	r16, 0xFF	; 255
    3988:	1f 4f       	sbci	r17, 0xFF	; 255
    398a:	08 0f       	add	r16, r24
    398c:	19 1f       	adc	r17, r25
	{
		lcdDataWrite(data[i]);
    398e:	89 91       	ld	r24, Y+
    3990:	0e 94 ab 1b 	call	0x3756	; 0x3756 <lcdDataWrite>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    3994:	c0 17       	cp	r28, r16
    3996:	d1 07       	cpc	r29, r17
    3998:	d1 f7       	brne	.-12     	; 0x398e <lcdPrintData+0x20>
	{
		lcdDataWrite(data[i]);
	}
}
    399a:	df 91       	pop	r29
    399c:	cf 91       	pop	r28
    399e:	1f 91       	pop	r17
    39a0:	0f 91       	pop	r16
    39a2:	08 95       	ret

000039a4 <main>:
#define MIDI_FILE	0
#define SOUND_FILE	1
FATFS Fatfs;

int main(void)
{
    39a4:	cf 93       	push	r28
    39a6:	df 93       	push	r29
    39a8:	cd b7       	in	r28, 0x3d	; 61
    39aa:	de b7       	in	r29, 0x3e	; 62
    39ac:	c0 5a       	subi	r28, 0xA0	; 160
    39ae:	d2 40       	sbci	r29, 0x02	; 2
    39b0:	0f b6       	in	r0, 0x3f	; 63
    39b2:	f8 94       	cli
    39b4:	de bf       	out	0x3e, r29	; 62
    39b6:	0f be       	out	0x3f, r0	; 63
    39b8:	cd bf       	out	0x3d, r28	; 61
    
	FIL open_files[2];
	
	struct midi_time_event mtevent;
	struct SNDFile sf = {0};
    39ba:	fe 01       	movw	r30, r28
    39bc:	e4 5b       	subi	r30, 0xB4	; 180
    39be:	ff 4f       	sbci	r31, 0xFF	; 255
    39c0:	8e e3       	ldi	r24, 0x3E	; 62
    39c2:	df 01       	movw	r26, r30
    39c4:	1d 92       	st	X+, r1
    39c6:	8a 95       	dec	r24
    39c8:	e9 f7       	brne	.-6      	; 0x39c4 <main+0x20>
	struct file_entry_lookup file_entry = {0};
    39ca:	c6 57       	subi	r28, 0x76	; 118
    39cc:	df 4f       	sbci	r29, 0xFF	; 255
    39ce:	19 82       	std	Y+1, r1	; 0x01
    39d0:	18 82       	st	Y, r1
    39d2:	ca 58       	subi	r28, 0x8A	; 138
    39d4:	d0 40       	sbci	r29, 0x00	; 0
	char (*file_list)[MAX_FNAME];
    unsigned char byteValue = 0;
	unsigned char numOfBytes = 0;
    39d6:	c4 57       	subi	r28, 0x74	; 116
    39d8:	df 4f       	sbci	r29, 0xFF	; 255
    39da:	18 82       	st	Y, r1
    39dc:	cc 58       	subi	r28, 0x8C	; 140
    39de:	d0 40       	sbci	r29, 0x00	; 0
	struct MD_MIDIFile mf;
      
	unsigned long microseconds = 0;
	unsigned long delta = 0;
	//DDRA |= (1 << PA1);		// remove
	file_list = malloc(MAX_FNAME * MAX_FILES);
    39e0:	80 ea       	ldi	r24, 0xA0	; 160
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <malloc>
    39e8:	6c 01       	movw	r12, r24
	
	configTimers();	
    39ea:	0e 94 65 17 	call	0x2eca	; 0x2eca <configTimers>
	lcdInit();	
    39ee:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <lcdInit>
	uartInit();
    39f2:	0e 94 b9 34 	call	0x6972	; 0x6972 <uartInit>
	midiInit();	
    39f6:	0e 94 4c 28 	call	0x5098	; 0x5098 <midiInit>
	spiInit();	
    39fa:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <spiInit>
	setInputs();
    39fe:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <setInputs>
	InitSRAM();
    3a02:	0e 94 d9 30 	call	0x61b2	; 0x61b2 <InitSRAM>
	
	// >> ADC
	a2dInit();
    3a06:	0e 94 b4 01 	call	0x368	; 0x368 <a2dInit>
	a2dSetPrescaler(ADC_PRESCALE_DIV32);
    3a0a:	85 e0       	ldi	r24, 0x05	; 5
    3a0c:	0e 94 a6 01 	call	0x34c	; 0x34c <a2dSetPrescaler>
	a2dSetReference(ADC_REFERENCE_AVCC);
    3a10:	81 e0       	ldi	r24, 0x01	; 1
    3a12:	0e 94 ab 01 	call	0x356	; 0x356 <a2dSetReference>
	a2dSetChannel(ADC_CH_ADC0);
    3a16:	80 e0       	ldi	r24, 0x00	; 0
    3a18:	0e 94 c2 01 	call	0x384	; 0x384 <a2dSetChannel>
	a2dStartConvert();		
    3a1c:	0e 94 c8 01 	call	0x390	; 0x390 <a2dStartConvert>
	// << ADC
	 
	timerAttach(TIMER2OUTCOMPARE_INT,disk_timerproc);
    3a20:	67 eb       	ldi	r22, 0xB7	; 183
    3a22:	7d e2       	ldi	r23, 0x2D	; 45
    3a24:	86 e0       	ldi	r24, 0x06	; 6
    3a26:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <timerAttach>
	timerAttach(TIMER0OVERFLOW_INT,addMillis);
    3a2a:	6f ef       	ldi	r22, 0xFF	; 255
    3a2c:	77 e1       	ldi	r23, 0x17	; 23
    3a2e:	80 e0       	ldi	r24, 0x00	; 0
    3a30:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <timerAttach>
	
	uartSetBaudRate(MIDI_BAUD_RATE);
    3a34:	62 e1       	ldi	r22, 0x12	; 18
    3a36:	7a e7       	ldi	r23, 0x7A	; 122
    3a38:	80 e0       	ldi	r24, 0x00	; 0
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	0e 94 d6 34 	call	0x69ac	; 0x69ac <uartSetBaudRate>
	uartSetRxHandler(rx_handler);
    3a40:	85 e5       	ldi	r24, 0x55	; 85
    3a42:	97 e1       	ldi	r25, 0x17	; 23
    3a44:	0e 94 d1 34 	call	0x69a2	; 0x69a2 <uartSetRxHandler>
	uartFlushReceiveBuffer();
    3a48:	0e 94 41 35 	call	0x6a82	; 0x6a82 <uartFlushReceiveBuffer>
	
	lcdGotoXY(0,0);		
    3a4c:	60 e0       	ldi	r22, 0x00	; 0
    3a4e:	80 e0       	ldi	r24, 0x00	; 0
    3a50:	0e 94 27 1c 	call	0x384e	; 0x384e <lcdGotoXY>
		
	checkSD(inputs[SD]);
    3a54:	ca 56       	subi	r28, 0x6A	; 106
    3a56:	df 4f       	sbci	r29, 0xFF	; 255
    3a58:	88 81       	ld	r24, Y
    3a5a:	c6 59       	subi	r28, 0x96	; 150
    3a5c:	d0 40       	sbci	r29, 0x00	; 0
    3a5e:	0e 94 b7 18 	call	0x316e	; 0x316e <checkSD>
		f_close(&file);
	}
	*/
	
	
	midiPlayVolume(inputs[POT]);
    3a62:	c9 56       	subi	r28, 0x69	; 105
    3a64:	df 4f       	sbci	r29, 0xFF	; 255
    3a66:	88 81       	ld	r24, Y
    3a68:	c7 59       	subi	r28, 0x97	; 151
    3a6a:	d0 40       	sbci	r29, 0x00	; 0
    3a6c:	0e 94 75 29 	call	0x52ea	; 0x52ea <midiPlayVolume>
	readInputs(inputs);	
    3a70:	ce 01       	movw	r24, r28
    3a72:	83 57       	subi	r24, 0x73	; 115
    3a74:	9f 4f       	sbci	r25, 0xFF	; 255
    3a76:	0e 94 91 17 	call	0x2f22	; 0x2f22 <readInputs>
	INPUT input = NONE;
    struct family_entry fam;
	struct sound_entry snd;
	struct MD_MIDIFile mf;
      
	unsigned long microseconds = 0;
    3a7a:	21 2c       	mov	r2, r1
    3a7c:	31 2c       	mov	r3, r1
    3a7e:	21 01       	movw	r4, r2
	struct file_entry_lookup file_entry = {0};
	char (*file_list)[MAX_FNAME];
    unsigned char byteValue = 0;
	unsigned char numOfBytes = 0;
	unsigned char currentMode = SOUND_FAMILY,currentAction = NONE;
	BOOL endRecording = TRUE;
    3a80:	77 24       	eor	r7, r7
    3a82:	73 94       	inc	r7
	struct SNDFile sf = {0};
	struct file_entry_lookup file_entry = {0};
	char (*file_list)[MAX_FNAME];
    unsigned char byteValue = 0;
	unsigned char numOfBytes = 0;
	unsigned char currentMode = SOUND_FAMILY,currentAction = NONE;
    3a84:	ee 24       	eor	r14, r14
    3a86:	ea 94       	dec	r14
    3a88:	00 e0       	ldi	r16, 0x00	; 0
					currentAction = NONE;
				}
			}
			else if(currentMode == MIDI_REC && endRecording == TRUE){
				if(getMicros() > microseconds){
					sendMidiBuffer(mtevent.event.data,mtevent.event.size);
    3a8a:	e1 e4       	ldi	r30, 0x41	; 65
    3a8c:	f0 e0       	ldi	r31, 0x00	; 0
    3a8e:	ec 0f       	add	r30, r28
    3a90:	fd 1f       	adc	r31, r29
    3a92:	33 96       	adiw	r30, 0x03	; 3
    3a94:	c1 56       	subi	r28, 0x61	; 97
    3a96:	dd 4f       	sbci	r29, 0xFD	; 253
    3a98:	f9 83       	std	Y+1, r31	; 0x01
    3a9a:	e8 83       	st	Y, r30
    3a9c:	cf 59       	subi	r28, 0x9F	; 159
    3a9e:	d2 40       	sbci	r29, 0x02	; 2
    3aa0:	68 94       	set
    3aa2:	66 24       	eor	r6, r6
    3aa4:	61 f8       	bld	r6, 1
							else if(currentMode == SOUND_SELECTED){
								lcdClear();
								lcdGotoXY(0,0);
								lcdPrintData(getLCDString(SELECTED,SELECTED_LEN),SELECTED_LEN);
								lcdGotoXY(0,1);
								lcdPrintData(fam.name,strlen(fam.name));
    3aa6:	0f 2e       	mov	r0, r31
    3aa8:	f8 e9       	ldi	r31, 0x98	; 152
    3aaa:	8f 2e       	mov	r8, r31
    3aac:	91 2c       	mov	r9, r1
    3aae:	f0 2d       	mov	r31, r0
    3ab0:	8c 0e       	add	r8, r28
    3ab2:	9d 1e       	adc	r9, r29
    3ab4:	f8 e0       	ldi	r31, 0x08	; 8
    3ab6:	8f 0e       	add	r8, r31
    3ab8:	91 1c       	adc	r9, r1
								closeSNDFile(&sf);
    3aba:	5e 01       	movw	r10, r28
    3abc:	8c e4       	ldi	r24, 0x4C	; 76
    3abe:	a8 0e       	add	r10, r24
    3ac0:	b1 1c       	adc	r11, r1
								setSNDFile(&sf,file_list[file_entry.current_index],&fam,&snd);
								//createSoundList(&open_files[SOUND_FILE],&numOfItems);
								lcdClear();
								lcdPrintData(fam.name,strlen(fam.name));
								lcdGotoXY(0,1);
								lcdPrintData(snd.name,strlen(snd.name));
    3ac2:	a0 eb       	ldi	r26, 0xB0	; 176
    3ac4:	b0 e0       	ldi	r27, 0x00	; 0
    3ac6:	ac 0f       	add	r26, r28
    3ac8:	bd 1f       	adc	r27, r29
    3aca:	12 96       	adiw	r26, 0x02	; 2
    3acc:	c3 56       	subi	r28, 0x63	; 99
    3ace:	dd 4f       	sbci	r29, 0xFD	; 253
    3ad0:	b9 83       	std	Y+1, r27	; 0x01
    3ad2:	a8 83       	st	Y, r26
    3ad4:	cd 59       	subi	r28, 0x9D	; 157
    3ad6:	d2 40       	sbci	r29, 0x02	; 2
	
	midiPlayVolume(inputs[POT]);
	readInputs(inputs);	
	
	while(1){						
			if((input = readInputs(inputs)) >= BUTTON0 && input <= SD){	
    3ad8:	ce 01       	movw	r24, r28
    3ada:	83 57       	subi	r24, 0x73	; 115
    3adc:	9f 4f       	sbci	r25, 0xFF	; 255
    3ade:	0e 94 91 17 	call	0x2f22	; 0x2f22 <readInputs>
    3ae2:	18 2f       	mov	r17, r24
    3ae4:	8a 30       	cpi	r24, 0x0A	; 10
    3ae6:	08 f0       	brcs	.+2      	; 0x3aea <main+0x146>
    3ae8:	d7 c1       	rjmp	.+942    	; 0x3e98 <main+0x4f4>
				lcdClear();
    3aea:	0e 94 23 1c 	call	0x3846	; 0x3846 <lcdClear>
				if(input >= BUTTON0 && input <= BUTTON3){
    3aee:	b3 e0       	ldi	r27, 0x03	; 3
    3af0:	b1 17       	cp	r27, r17
    3af2:	70 f0       	brcs	.+28     	; 0x3b10 <main+0x16c>
					currentMode = input;
					currentAction = NONE;
					file_entry.current_index = 0;
    3af4:	c5 57       	subi	r28, 0x75	; 117
    3af6:	df 4f       	sbci	r29, 0xFF	; 255
    3af8:	18 82       	st	Y, r1
    3afa:	cb 58       	subi	r28, 0x8B	; 139
    3afc:	d0 40       	sbci	r29, 0x00	; 0
					file_entry.current_items = 0;					
    3afe:	c6 57       	subi	r28, 0x76	; 118
    3b00:	df 4f       	sbci	r29, 0xFF	; 255
    3b02:	18 82       	st	Y, r1
    3b04:	ca 58       	subi	r28, 0x8A	; 138
    3b06:	d0 40       	sbci	r29, 0x00	; 0
	
	while(1){						
			if((input = readInputs(inputs)) >= BUTTON0 && input <= SD){	
				lcdClear();
				if(input >= BUTTON0 && input <= BUTTON3){
					currentMode = input;
    3b08:	01 2f       	mov	r16, r17
					currentAction = NONE;
    3b0a:	ee 24       	eor	r14, r14
    3b0c:	ea 94       	dec	r14
    3b0e:	05 c0       	rjmp	.+10     	; 0x3b1a <main+0x176>
					file_entry.current_index = 0;
					file_entry.current_items = 0;					
				}
				else if(input >= JOY_UP && input <= JOY_PRESS){
    3b10:	8c ef       	ldi	r24, 0xFC	; 252
    3b12:	81 0f       	add	r24, r17
    3b14:	85 30       	cpi	r24, 0x05	; 5
    3b16:	08 f4       	brcc	.+2      	; 0x3b1a <main+0x176>
					currentAction = input;
    3b18:	e1 2e       	mov	r14, r17
				}
				switch(input){	
    3b1a:	81 2f       	mov	r24, r17
    3b1c:	11 0f       	add	r17, r17
    3b1e:	99 0b       	sbc	r25, r25
    3b20:	aa 0b       	sbc	r26, r26
    3b22:	bb 0b       	sbc	r27, r27
    3b24:	8a 30       	cpi	r24, 0x0A	; 10
    3b26:	91 05       	cpc	r25, r1
    3b28:	08 f0       	brcs	.+2      	; 0x3b2c <main+0x188>
    3b2a:	bf c1       	rjmp	.+894    	; 0x3eaa <main+0x506>
    3b2c:	fc 01       	movw	r30, r24
    3b2e:	e6 5d       	subi	r30, 0xD6	; 214
    3b30:	ff 4f       	sbci	r31, 0xFF	; 255
    3b32:	0c 94 ba 37 	jmp	0x6f74	; 0x6f74 <__tablejump2__>
					case NONE:	break;
					case POT:	break;					
					case SD:	checkSD(inputs[SD]);
    3b36:	ca 56       	subi	r28, 0x6A	; 106
    3b38:	df 4f       	sbci	r29, 0xFF	; 255
    3b3a:	88 81       	ld	r24, Y
    3b3c:	c6 59       	subi	r28, 0x96	; 150
    3b3e:	d0 40       	sbci	r29, 0x00	; 0
    3b40:	0e 94 b7 18 	call	0x316e	; 0x316e <checkSD>
								break; 			
    3b44:	b2 c1       	rjmp	.+868    	; 0x3eaa <main+0x506>
					case BUTTON0:	// select sound family file						
							createFileList(file_list,".FAM",&file_entry);
    3b46:	ae 01       	movw	r20, r28
    3b48:	46 57       	subi	r20, 0x76	; 118
    3b4a:	5f 4f       	sbci	r21, 0xFF	; 255
    3b4c:	67 e3       	ldi	r22, 0x37	; 55
    3b4e:	71 e0       	ldi	r23, 0x01	; 1
    3b50:	c6 01       	movw	r24, r12
    3b52:	0e 94 0a 19 	call	0x3214	; 0x3214 <createFileList>
							handleFileList(currentMode,currentAction,&file_entry,file_list);					
    3b56:	96 01       	movw	r18, r12
    3b58:	ae 01       	movw	r20, r28
    3b5a:	46 57       	subi	r20, 0x76	; 118
    3b5c:	5f 4f       	sbci	r21, 0xFF	; 255
    3b5e:	6e 2d       	mov	r22, r14
    3b60:	80 2f       	mov	r24, r16
    3b62:	0e 94 95 19 	call	0x332a	; 0x332a <handleFileList>
							break;						
    3b66:	a1 c1       	rjmp	.+834    	; 0x3eaa <main+0x506>
					case BUTTON1:	//select sound from file						
							break;						
					case BUTTON2:	// play midi
							createFileList(file_list,".MID",&file_entry);
    3b68:	ae 01       	movw	r20, r28
    3b6a:	46 57       	subi	r20, 0x76	; 118
    3b6c:	5f 4f       	sbci	r21, 0xFF	; 255
    3b6e:	60 e4       	ldi	r22, 0x40	; 64
    3b70:	71 e0       	ldi	r23, 0x01	; 1
    3b72:	c6 01       	movw	r24, r12
    3b74:	0e 94 0a 19 	call	0x3214	; 0x3214 <createFileList>
							handleFileList(currentMode,currentAction,&file_entry,file_list);
    3b78:	96 01       	movw	r18, r12
    3b7a:	ae 01       	movw	r20, r28
    3b7c:	46 57       	subi	r20, 0x76	; 118
    3b7e:	5f 4f       	sbci	r21, 0xFF	; 255
    3b80:	6e 2d       	mov	r22, r14
    3b82:	80 2f       	mov	r24, r16
    3b84:	0e 94 95 19 	call	0x332a	; 0x332a <handleFileList>
							break;
    3b88:	90 c1       	rjmp	.+800    	; 0x3eaa <main+0x506>
					case BUTTON3:	// record midi
							endRecording = !endRecording;
    3b8a:	11 e0       	ldi	r17, 0x01	; 1
    3b8c:	71 10       	cpse	r7, r1
    3b8e:	10 e0       	ldi	r17, 0x00	; 0
									
							if(endRecording == FALSE){
    3b90:	77 20       	and	r7, r7
    3b92:	19 f1       	breq	.+70     	; 0x3bda <main+0x236>
								SRAM_seekWrite(0,SEEK_SET);										
    3b94:	60 e0       	ldi	r22, 0x00	; 0
    3b96:	70 e0       	ldi	r23, 0x00	; 0
    3b98:	80 e0       	ldi	r24, 0x00	; 0
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	0e 94 83 30 	call	0x6106	; 0x6106 <SRAM_seekWrite>
								f_open(&open_files[MIDI_FILE],"SONG.MID",FA_WRITE | FA_CREATE_ALWAYS);
    3ba0:	4a e0       	ldi	r20, 0x0A	; 10
    3ba2:	6c e3       	ldi	r22, 0x3C	; 60
    3ba4:	71 e0       	ldi	r23, 0x01	; 1
    3ba6:	ce 01       	movw	r24, r28
    3ba8:	01 96       	adiw	r24, 0x01	; 1
    3baa:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <f_open>
								writeMidi(&open_files[MIDI_FILE]);
    3bae:	ce 01       	movw	r24, r28
    3bb0:	01 96       	adiw	r24, 0x01	; 1
    3bb2:	0e 94 2a 1a 	call	0x3454	; 0x3454 <writeMidi>
								lcdGotoXY(0,0);
    3bb6:	60 e0       	ldi	r22, 0x00	; 0
    3bb8:	80 e0       	ldi	r24, 0x00	; 0
    3bba:	0e 94 27 1c 	call	0x384e	; 0x384e <lcdGotoXY>
								lcdPrintData(getLCDString(RECORD,RECORD_LEN),RECORD_LEN);
    3bbe:	69 e0       	ldi	r22, 0x09	; 9
    3bc0:	8b e7       	ldi	r24, 0x7B	; 123
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <getLCDString>
    3bc8:	69 e0       	ldi	r22, 0x09	; 9
    3bca:	0e 94 b7 1c 	call	0x396e	; 0x396e <lcdPrintData>
								microseconds = getMicros();
    3bce:	0e 94 34 18 	call	0x3068	; 0x3068 <getMicros>
    3bd2:	1b 01       	movw	r2, r22
    3bd4:	2c 01       	movw	r4, r24
					case BUTTON2:	// play midi
							createFileList(file_list,".MID",&file_entry);
							handleFileList(currentMode,currentAction,&file_entry,file_list);
							break;
					case BUTTON3:	// record midi
							endRecording = !endRecording;
    3bd6:	71 2e       	mov	r7, r17
    3bd8:	68 c1       	rjmp	.+720    	; 0x3eaa <main+0x506>
								lcdGotoXY(0,0);
								lcdPrintData(getLCDString(RECORD,RECORD_LEN),RECORD_LEN);
								microseconds = getMicros();
							}
							else{
								SRAM_seekRead(0,SEEK_SET);
    3bda:	60 e0       	ldi	r22, 0x00	; 0
    3bdc:	70 e0       	ldi	r23, 0x00	; 0
    3bde:	80 e0       	ldi	r24, 0x00	; 0
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	0e 94 10 30 	call	0x6020	; 0x6020 <SRAM_seekRead>
								readSRAM(((unsigned char *)&mtevent),sizeof(struct midi_time_event));
    3be6:	6b e0       	ldi	r22, 0x0B	; 11
    3be8:	70 e0       	ldi	r23, 0x00	; 0
    3bea:	ce 01       	movw	r24, r28
    3bec:	8f 5b       	subi	r24, 0xBF	; 191
    3bee:	9f 4f       	sbci	r25, 0xFF	; 255
    3bf0:	0e 94 47 32 	call	0x648e	; 0x648e <readSRAM>
								microseconds = getMicros() + mtevent.delta;
    3bf4:	0e 94 34 18 	call	0x3068	; 0x3068 <getMicros>
    3bf8:	2c 96       	adiw	r28, 0x0c	; 12
    3bfa:	2c ad       	ldd	r18, Y+60	; 0x3c
    3bfc:	3d ad       	ldd	r19, Y+61	; 0x3d
    3bfe:	4e ad       	ldd	r20, Y+62	; 0x3e
    3c00:	5f ad       	ldd	r21, Y+63	; 0x3f
    3c02:	2c 97       	sbiw	r28, 0x0c	; 12
    3c04:	1b 01       	movw	r2, r22
    3c06:	2c 01       	movw	r4, r24
    3c08:	22 0e       	add	r2, r18
    3c0a:	33 1e       	adc	r3, r19
    3c0c:	44 1e       	adc	r4, r20
    3c0e:	55 1e       	adc	r5, r21
								lcdPrintData(getLCDString(STOPPED,STOPPED_LEN),STOPPED_LEN);
    3c10:	67 e0       	ldi	r22, 0x07	; 7
    3c12:	84 e8       	ldi	r24, 0x84	; 132
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <getLCDString>
    3c1a:	67 e0       	ldi	r22, 0x07	; 7
    3c1c:	0e 94 b7 1c 	call	0x396e	; 0x396e <lcdPrintData>
								f_write(&open_files[MIDI_FILE],"\x01\xFF\x2F\x00",4,(UINT *)&numOfBytes);
    3c20:	9e 01       	movw	r18, r28
    3c22:	24 57       	subi	r18, 0x74	; 116
    3c24:	3f 4f       	sbci	r19, 0xFF	; 255
    3c26:	44 e0       	ldi	r20, 0x04	; 4
    3c28:	50 e0       	ldi	r21, 0x00	; 0
    3c2a:	6b e7       	ldi	r22, 0x7B	; 123
    3c2c:	70 e0       	ldi	r23, 0x00	; 0
    3c2e:	ce 01       	movw	r24, r28
    3c30:	01 96       	adiw	r24, 0x01	; 1
    3c32:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <f_write>
								f_close(&open_files[MIDI_FILE]);
    3c36:	ce 01       	movw	r24, r28
    3c38:	01 96       	adiw	r24, 0x01	; 1
    3c3a:	0e 94 71 13 	call	0x26e2	; 0x26e2 <f_close>
					case BUTTON2:	// play midi
							createFileList(file_list,".MID",&file_entry);
							handleFileList(currentMode,currentAction,&file_entry,file_list);
							break;
					case BUTTON3:	// record midi
							endRecording = !endRecording;
    3c3e:	71 2e       	mov	r7, r17
    3c40:	34 c1       	rjmp	.+616    	; 0x3eaa <main+0x506>
								f_close(&open_files[MIDI_FILE]);
										
							} 
							break;
					case JOY_UP:	
								if(file_entry.current_index > 0) file_entry.current_index--;
    3c42:	c5 57       	subi	r28, 0x75	; 117
    3c44:	df 4f       	sbci	r29, 0xFF	; 255
    3c46:	88 81       	ld	r24, Y
    3c48:	cb 58       	subi	r28, 0x8B	; 139
    3c4a:	d0 40       	sbci	r29, 0x00	; 0
    3c4c:	88 23       	and	r24, r24
    3c4e:	31 f0       	breq	.+12     	; 0x3c5c <main+0x2b8>
    3c50:	81 50       	subi	r24, 0x01	; 1
    3c52:	c5 57       	subi	r28, 0x75	; 117
    3c54:	df 4f       	sbci	r29, 0xFF	; 255
    3c56:	88 83       	st	Y, r24
    3c58:	cb 58       	subi	r28, 0x8B	; 139
    3c5a:	d0 40       	sbci	r29, 0x00	; 0
								if(currentMode == MIDI_PLAY || currentMode == SOUND_FAMILY)	
    3c5c:	80 2f       	mov	r24, r16
    3c5e:	8d 7f       	andi	r24, 0xFD	; 253
    3c60:	49 f4       	brne	.+18     	; 0x3c74 <main+0x2d0>
									handleFileList(currentMode,currentAction,&file_entry,file_list);
    3c62:	96 01       	movw	r18, r12
    3c64:	ae 01       	movw	r20, r28
    3c66:	46 57       	subi	r20, 0x76	; 118
    3c68:	5f 4f       	sbci	r21, 0xFF	; 255
    3c6a:	6e 2d       	mov	r22, r14
    3c6c:	80 2f       	mov	r24, r16
    3c6e:	0e 94 95 19 	call	0x332a	; 0x332a <handleFileList>
    3c72:	1b c1       	rjmp	.+566    	; 0x3eaa <main+0x506>
								else if(currentMode == SOUND_SELECTED){
    3c74:	01 30       	cpi	r16, 0x01	; 1
    3c76:	09 f0       	breq	.+2      	; 0x3c7a <main+0x2d6>
    3c78:	3c c1       	rjmp	.+632    	; 0x3ef2 <main+0x54e>
									scrollSoundList(&sf,JOY_UP,&fam,&snd);
    3c7a:	9e 01       	movw	r18, r28
    3c7c:	20 55       	subi	r18, 0x50	; 80
    3c7e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c80:	ae 01       	movw	r20, r28
    3c82:	48 56       	subi	r20, 0x68	; 104
    3c84:	5f 4f       	sbci	r21, 0xFF	; 255
    3c86:	64 e0       	ldi	r22, 0x04	; 4
    3c88:	c5 01       	movw	r24, r10
    3c8a:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <scrollSoundList>
									sendProgramChange(snd.bank,snd.prog);
    3c8e:	cf 54       	subi	r28, 0x4F	; 79
    3c90:	df 4f       	sbci	r29, 0xFF	; 255
    3c92:	68 81       	ld	r22, Y
    3c94:	c1 5b       	subi	r28, 0xB1	; 177
    3c96:	d0 40       	sbci	r29, 0x00	; 0
    3c98:	c0 55       	subi	r28, 0x50	; 80
    3c9a:	df 4f       	sbci	r29, 0xFF	; 255
    3c9c:	88 81       	ld	r24, Y
    3c9e:	c0 5b       	subi	r28, 0xB0	; 176
    3ca0:	d0 40       	sbci	r29, 0x00	; 0
    3ca2:	0e 94 b9 28 	call	0x5172	; 0x5172 <sendProgramChange>
    3ca6:	7e c1       	rjmp	.+764    	; 0x3fa4 <main+0x600>
								}
								break;
					case JOY_RIGHT:	
								scrollSoundList(&sf,JOY_RIGHT, &fam,&snd);
    3ca8:	9e 01       	movw	r18, r28
    3caa:	20 55       	subi	r18, 0x50	; 80
    3cac:	3f 4f       	sbci	r19, 0xFF	; 255
    3cae:	ae 01       	movw	r20, r28
    3cb0:	48 56       	subi	r20, 0x68	; 104
    3cb2:	5f 4f       	sbci	r21, 0xFF	; 255
    3cb4:	65 e0       	ldi	r22, 0x05	; 5
    3cb6:	c5 01       	movw	r24, r10
    3cb8:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <scrollSoundList>
								sendProgramChange(snd.bank,snd.prog);
    3cbc:	cf 54       	subi	r28, 0x4F	; 79
    3cbe:	df 4f       	sbci	r29, 0xFF	; 255
    3cc0:	68 81       	ld	r22, Y
    3cc2:	c1 5b       	subi	r28, 0xB1	; 177
    3cc4:	d0 40       	sbci	r29, 0x00	; 0
    3cc6:	c0 55       	subi	r28, 0x50	; 80
    3cc8:	df 4f       	sbci	r29, 0xFF	; 255
    3cca:	88 81       	ld	r24, Y
    3ccc:	c0 5b       	subi	r28, 0xB0	; 176
    3cce:	d0 40       	sbci	r29, 0x00	; 0
    3cd0:	0e 94 b9 28 	call	0x5172	; 0x5172 <sendProgramChange>
								break;
    3cd4:	ea c0       	rjmp	.+468    	; 0x3eaa <main+0x506>
					case JOY_DOWN:	
								if(file_entry.current_index < (file_entry.current_items - 1)) file_entry.current_index++;
    3cd6:	c5 57       	subi	r28, 0x75	; 117
    3cd8:	df 4f       	sbci	r29, 0xFF	; 255
    3cda:	28 81       	ld	r18, Y
    3cdc:	cb 58       	subi	r28, 0x8B	; 139
    3cde:	d0 40       	sbci	r29, 0x00	; 0
    3ce0:	42 2f       	mov	r20, r18
    3ce2:	50 e0       	ldi	r21, 0x00	; 0
    3ce4:	c6 57       	subi	r28, 0x76	; 118
    3ce6:	df 4f       	sbci	r29, 0xFF	; 255
    3ce8:	88 81       	ld	r24, Y
    3cea:	ca 58       	subi	r28, 0x8A	; 138
    3cec:	d0 40       	sbci	r29, 0x00	; 0
    3cee:	90 e0       	ldi	r25, 0x00	; 0
    3cf0:	01 97       	sbiw	r24, 0x01	; 1
    3cf2:	48 17       	cp	r20, r24
    3cf4:	59 07       	cpc	r21, r25
    3cf6:	34 f4       	brge	.+12     	; 0x3d04 <main+0x360>
    3cf8:	2f 5f       	subi	r18, 0xFF	; 255
    3cfa:	c5 57       	subi	r28, 0x75	; 117
    3cfc:	df 4f       	sbci	r29, 0xFF	; 255
    3cfe:	28 83       	st	Y, r18
    3d00:	cb 58       	subi	r28, 0x8B	; 139
    3d02:	d0 40       	sbci	r29, 0x00	; 0
								if(currentMode == MIDI_PLAY || currentMode == SOUND_FAMILY) 
    3d04:	80 2f       	mov	r24, r16
    3d06:	8d 7f       	andi	r24, 0xFD	; 253
    3d08:	49 f4       	brne	.+18     	; 0x3d1c <main+0x378>
									handleFileList(currentMode,currentAction,&file_entry,file_list);
    3d0a:	96 01       	movw	r18, r12
    3d0c:	ae 01       	movw	r20, r28
    3d0e:	46 57       	subi	r20, 0x76	; 118
    3d10:	5f 4f       	sbci	r21, 0xFF	; 255
    3d12:	6e 2d       	mov	r22, r14
    3d14:	80 2f       	mov	r24, r16
    3d16:	0e 94 95 19 	call	0x332a	; 0x332a <handleFileList>
    3d1a:	c7 c0       	rjmp	.+398    	; 0x3eaa <main+0x506>
								else if(currentMode == SOUND_SELECTED){
    3d1c:	01 30       	cpi	r16, 0x01	; 1
    3d1e:	09 f0       	breq	.+2      	; 0x3d22 <main+0x37e>
    3d20:	e8 c0       	rjmp	.+464    	; 0x3ef2 <main+0x54e>
									scrollSoundList(&sf,JOY_DOWN, &fam,&snd);
    3d22:	9e 01       	movw	r18, r28
    3d24:	20 55       	subi	r18, 0x50	; 80
    3d26:	3f 4f       	sbci	r19, 0xFF	; 255
    3d28:	ae 01       	movw	r20, r28
    3d2a:	48 56       	subi	r20, 0x68	; 104
    3d2c:	5f 4f       	sbci	r21, 0xFF	; 255
    3d2e:	66 e0       	ldi	r22, 0x06	; 6
    3d30:	c5 01       	movw	r24, r10
    3d32:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <scrollSoundList>
									sendProgramChange(snd.bank,snd.prog);
    3d36:	cf 54       	subi	r28, 0x4F	; 79
    3d38:	df 4f       	sbci	r29, 0xFF	; 255
    3d3a:	68 81       	ld	r22, Y
    3d3c:	c1 5b       	subi	r28, 0xB1	; 177
    3d3e:	d0 40       	sbci	r29, 0x00	; 0
    3d40:	c0 55       	subi	r28, 0x50	; 80
    3d42:	df 4f       	sbci	r29, 0xFF	; 255
    3d44:	88 81       	ld	r24, Y
    3d46:	c0 5b       	subi	r28, 0xB0	; 176
    3d48:	d0 40       	sbci	r29, 0x00	; 0
    3d4a:	0e 94 b9 28 	call	0x5172	; 0x5172 <sendProgramChange>
    3d4e:	2a c1       	rjmp	.+596    	; 0x3fa4 <main+0x600>
								}
								break;
					case JOY_LEFT:	
								scrollSoundList(&sf,JOY_LEFT,&fam,&snd);
    3d50:	9e 01       	movw	r18, r28
    3d52:	20 55       	subi	r18, 0x50	; 80
    3d54:	3f 4f       	sbci	r19, 0xFF	; 255
    3d56:	ae 01       	movw	r20, r28
    3d58:	48 56       	subi	r20, 0x68	; 104
    3d5a:	5f 4f       	sbci	r21, 0xFF	; 255
    3d5c:	67 e0       	ldi	r22, 0x07	; 7
    3d5e:	c5 01       	movw	r24, r10
    3d60:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <scrollSoundList>
								sendProgramChange(snd.bank,snd.prog);
    3d64:	cf 54       	subi	r28, 0x4F	; 79
    3d66:	df 4f       	sbci	r29, 0xFF	; 255
    3d68:	68 81       	ld	r22, Y
    3d6a:	c1 5b       	subi	r28, 0xB1	; 177
    3d6c:	d0 40       	sbci	r29, 0x00	; 0
    3d6e:	c0 55       	subi	r28, 0x50	; 80
    3d70:	df 4f       	sbci	r29, 0xFF	; 255
    3d72:	88 81       	ld	r24, Y
    3d74:	c0 5b       	subi	r28, 0xB0	; 176
    3d76:	d0 40       	sbci	r29, 0x00	; 0
    3d78:	0e 94 b9 28 	call	0x5172	; 0x5172 <sendProgramChange>
								break;
    3d7c:	96 c0       	rjmp	.+300    	; 0x3eaa <main+0x506>
					case JOY_PRESS:	
							if(currentMode == MIDI_PLAY)										
    3d7e:	02 30       	cpi	r16, 0x02	; 2
    3d80:	89 f4       	brne	.+34     	; 0x3da4 <main+0x400>
								setMidiFile(&mf,file_list[file_entry.current_index]);									
    3d82:	c5 57       	subi	r28, 0x75	; 117
    3d84:	df 4f       	sbci	r29, 0xFF	; 255
    3d86:	88 81       	ld	r24, Y
    3d88:	cb 58       	subi	r28, 0x8B	; 139
    3d8a:	d0 40       	sbci	r29, 0x00	; 0
    3d8c:	b6 01       	movw	r22, r12
    3d8e:	e0 e1       	ldi	r30, 0x10	; 16
    3d90:	8e 9f       	mul	r24, r30
    3d92:	60 0d       	add	r22, r0
    3d94:	71 1d       	adc	r23, r1
    3d96:	11 24       	eor	r1, r1
    3d98:	ce 01       	movw	r24, r28
    3d9a:	8e 53       	subi	r24, 0x3E	; 62
    3d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d9e:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <setMidiFile>
    3da2:	85 c0       	rjmp	.+266    	; 0x3eae <main+0x50a>
							else if(currentMode == SOUND_FAMILY){
    3da4:	01 11       	cpse	r16, r1
    3da6:	54 c0       	rjmp	.+168    	; 0x3e50 <main+0x4ac>
								if(sf._fileOpen == TRUE){
    3da8:	d5 01       	movw	r26, r10
    3daa:	90 96       	adiw	r26, 0x20	; 32
    3dac:	8c 91       	ld	r24, X
    3dae:	81 30       	cpi	r24, 0x01	; 1
    3db0:	19 f4       	brne	.+6      	; 0x3db8 <main+0x414>
									closeSNDFile(&sf);
    3db2:	c5 01       	movw	r24, r10
    3db4:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <closeSNDFile>
								}
								memset(&sf,0,sizeof(struct SNDFile));
    3db8:	8e e3       	ldi	r24, 0x3E	; 62
    3dba:	f5 01       	movw	r30, r10
    3dbc:	11 92       	st	Z+, r1
    3dbe:	8a 95       	dec	r24
    3dc0:	e9 f7       	brne	.-6      	; 0x3dbc <main+0x418>
								// open selected file and get first family name and first sound of that family (fam/snd params)
								// f_open
								setSNDFile(&sf,file_list[file_entry.current_index],&fam,&snd);
    3dc2:	c5 57       	subi	r28, 0x75	; 117
    3dc4:	df 4f       	sbci	r29, 0xFF	; 255
    3dc6:	88 81       	ld	r24, Y
    3dc8:	cb 58       	subi	r28, 0x8B	; 139
    3dca:	d0 40       	sbci	r29, 0x00	; 0
    3dcc:	b6 01       	movw	r22, r12
    3dce:	f0 e1       	ldi	r31, 0x10	; 16
    3dd0:	8f 9f       	mul	r24, r31
    3dd2:	60 0d       	add	r22, r0
    3dd4:	71 1d       	adc	r23, r1
    3dd6:	11 24       	eor	r1, r1
    3dd8:	9e 01       	movw	r18, r28
    3dda:	20 55       	subi	r18, 0x50	; 80
    3ddc:	3f 4f       	sbci	r19, 0xFF	; 255
    3dde:	ae 01       	movw	r20, r28
    3de0:	48 56       	subi	r20, 0x68	; 104
    3de2:	5f 4f       	sbci	r21, 0xFF	; 255
    3de4:	c5 01       	movw	r24, r10
    3de6:	0e 94 cb 2d 	call	0x5b96	; 0x5b96 <setSNDFile>
								//createSoundList(&open_files[SOUND_FILE],&numOfItems);
								lcdClear();
    3dea:	0e 94 23 1c 	call	0x3846	; 0x3846 <lcdClear>
								lcdPrintData(fam.name,strlen(fam.name));
    3dee:	f4 01       	movw	r30, r8
    3df0:	01 90       	ld	r0, Z+
    3df2:	00 20       	and	r0, r0
    3df4:	e9 f7       	brne	.-6      	; 0x3df0 <main+0x44c>
    3df6:	31 97       	sbiw	r30, 0x01	; 1
    3df8:	bf 01       	movw	r22, r30
    3dfa:	68 19       	sub	r22, r8
    3dfc:	79 09       	sbc	r23, r9
    3dfe:	c4 01       	movw	r24, r8
    3e00:	0e 94 b7 1c 	call	0x396e	; 0x396e <lcdPrintData>
								lcdGotoXY(0,1);
    3e04:	61 e0       	ldi	r22, 0x01	; 1
    3e06:	80 e0       	ldi	r24, 0x00	; 0
    3e08:	0e 94 27 1c 	call	0x384e	; 0x384e <lcdGotoXY>
								lcdPrintData(snd.name,strlen(snd.name));
    3e0c:	c3 56       	subi	r28, 0x63	; 99
    3e0e:	dd 4f       	sbci	r29, 0xFD	; 253
    3e10:	e8 81       	ld	r30, Y
    3e12:	f9 81       	ldd	r31, Y+1	; 0x01
    3e14:	cd 59       	subi	r28, 0x9D	; 157
    3e16:	d2 40       	sbci	r29, 0x02	; 2
    3e18:	01 90       	ld	r0, Z+
    3e1a:	00 20       	and	r0, r0
    3e1c:	e9 f7       	brne	.-6      	; 0x3e18 <main+0x474>
    3e1e:	31 97       	sbiw	r30, 0x01	; 1
    3e20:	bf 01       	movw	r22, r30
    3e22:	c3 56       	subi	r28, 0x63	; 99
    3e24:	dd 4f       	sbci	r29, 0xFD	; 253
    3e26:	88 81       	ld	r24, Y
    3e28:	99 81       	ldd	r25, Y+1	; 0x01
    3e2a:	cd 59       	subi	r28, 0x9D	; 157
    3e2c:	d2 40       	sbci	r29, 0x02	; 2
    3e2e:	68 1b       	sub	r22, r24
    3e30:	79 0b       	sbc	r23, r25
    3e32:	0e 94 b7 1c 	call	0x396e	; 0x396e <lcdPrintData>
								sendProgramChange(snd.bank,snd.prog);
    3e36:	cf 54       	subi	r28, 0x4F	; 79
    3e38:	df 4f       	sbci	r29, 0xFF	; 255
    3e3a:	68 81       	ld	r22, Y
    3e3c:	c1 5b       	subi	r28, 0xB1	; 177
    3e3e:	d0 40       	sbci	r29, 0x00	; 0
    3e40:	c0 55       	subi	r28, 0x50	; 80
    3e42:	df 4f       	sbci	r29, 0xFF	; 255
    3e44:	88 81       	ld	r24, Y
    3e46:	c0 5b       	subi	r28, 0xB0	; 176
    3e48:	d0 40       	sbci	r29, 0x00	; 0
    3e4a:	0e 94 b9 28 	call	0x5172	; 0x5172 <sendProgramChange>
    3e4e:	aa c0       	rjmp	.+340    	; 0x3fa4 <main+0x600>
								currentMode = SOUND_SELECTED;																				
							}
							else if(currentMode == SOUND_SELECTED){
    3e50:	01 30       	cpi	r16, 0x01	; 1
    3e52:	09 f0       	breq	.+2      	; 0x3e56 <main+0x4b2>
    3e54:	4e c0       	rjmp	.+156    	; 0x3ef2 <main+0x54e>
								lcdClear();
    3e56:	0e 94 23 1c 	call	0x3846	; 0x3846 <lcdClear>
								lcdGotoXY(0,0);
    3e5a:	60 e0       	ldi	r22, 0x00	; 0
    3e5c:	80 e0       	ldi	r24, 0x00	; 0
    3e5e:	0e 94 27 1c 	call	0x384e	; 0x384e <lcdGotoXY>
								lcdPrintData(getLCDString(SELECTED,SELECTED_LEN),SELECTED_LEN);
    3e62:	68 e0       	ldi	r22, 0x08	; 8
    3e64:	83 e9       	ldi	r24, 0x93	; 147
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <getLCDString>
    3e6c:	68 e0       	ldi	r22, 0x08	; 8
    3e6e:	0e 94 b7 1c 	call	0x396e	; 0x396e <lcdPrintData>
								lcdGotoXY(0,1);
    3e72:	61 e0       	ldi	r22, 0x01	; 1
    3e74:	80 e0       	ldi	r24, 0x00	; 0
    3e76:	0e 94 27 1c 	call	0x384e	; 0x384e <lcdGotoXY>
								lcdPrintData(fam.name,strlen(fam.name));
    3e7a:	f4 01       	movw	r30, r8
    3e7c:	01 90       	ld	r0, Z+
    3e7e:	00 20       	and	r0, r0
    3e80:	e9 f7       	brne	.-6      	; 0x3e7c <main+0x4d8>
    3e82:	31 97       	sbiw	r30, 0x01	; 1
    3e84:	bf 01       	movw	r22, r30
    3e86:	68 19       	sub	r22, r8
    3e88:	79 09       	sbc	r23, r9
    3e8a:	c4 01       	movw	r24, r8
    3e8c:	0e 94 b7 1c 	call	0x396e	; 0x396e <lcdPrintData>
								closeSNDFile(&sf);
    3e90:	c5 01       	movw	r24, r10
    3e92:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <closeSNDFile>
    3e96:	86 c0       	rjmp	.+268    	; 0x3fa4 <main+0x600>
				//lcdGotoXY(0,1);
				//lcdPrintData(fam.name,strlen(fam.name));
				
				//_delay_ms(250);
			}
			else if(input == POT){
    3e98:	8a 30       	cpi	r24, 0x0A	; 10
    3e9a:	39 f4       	brne	.+14     	; 0x3eaa <main+0x506>
				midiPlayVolume(inputs[POT]);
    3e9c:	c9 56       	subi	r28, 0x69	; 105
    3e9e:	df 4f       	sbci	r29, 0xFF	; 255
    3ea0:	88 81       	ld	r24, Y
    3ea2:	c7 59       	subi	r28, 0x97	; 151
    3ea4:	d0 40       	sbci	r29, 0x00	; 0
    3ea6:	0e 94 75 29 	call	0x52ea	; 0x52ea <midiPlayVolume>
			}
			
			
			// >> process events
			if(currentMode == MIDI_PLAY && currentAction == JOY_PRESS){
    3eaa:	02 30       	cpi	r16, 0x02	; 2
    3eac:	11 f5       	brne	.+68     	; 0x3ef2 <main+0x54e>
    3eae:	98 e0       	ldi	r25, 0x08	; 8
    3eb0:	e9 12       	cpse	r14, r25
    3eb2:	4c c0       	rjmp	.+152    	; 0x3f4c <main+0x5a8>
				if(!isEOF(&mf)){
    3eb4:	ce 01       	movw	r24, r28
    3eb6:	8e 53       	subi	r24, 0x3E	; 62
    3eb8:	9f 4f       	sbci	r25, 0xFF	; 255
    3eba:	0e 94 1c 21 	call	0x4238	; 0x4238 <isEOF>
    3ebe:	81 11       	cpse	r24, r1
    3ec0:	07 c0       	rjmp	.+14     	; 0x3ed0 <main+0x52c>
					getNextEvent(&mf);
    3ec2:	ce 01       	movw	r24, r28
    3ec4:	8e 53       	subi	r24, 0x3E	; 62
    3ec6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ec8:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <getNextEvent>
    3ecc:	06 2d       	mov	r16, r6
    3ece:	3f c0       	rjmp	.+126    	; 0x3f4e <main+0x5aa>
				}
				else{
					closeMIDIFile(&mf);
    3ed0:	ce 01       	movw	r24, r28
    3ed2:	8e 53       	subi	r24, 0x3E	; 62
    3ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ed6:	0e 94 06 20 	call	0x400c	; 0x400c <closeMIDIFile>
					lcdPrintData(getLCDString(FINISHED,FINISHED_LEN),FINISHED_LEN);
    3eda:	68 e0       	ldi	r22, 0x08	; 8
    3edc:	8b e8       	ldi	r24, 0x8B	; 139
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <getLCDString>
    3ee4:	68 e0       	ldi	r22, 0x08	; 8
    3ee6:	0e 94 b7 1c 	call	0x396e	; 0x396e <lcdPrintData>
    3eea:	06 2d       	mov	r16, r6
					currentAction = NONE;
    3eec:	ee 24       	eor	r14, r14
    3eee:	ea 94       	dec	r14
    3ef0:	2e c0       	rjmp	.+92     	; 0x3f4e <main+0x5aa>
				}
			}
			else if(currentMode == MIDI_REC && endRecording == TRUE){
    3ef2:	03 30       	cpi	r16, 0x03	; 3
    3ef4:	61 f5       	brne	.+88     	; 0x3f4e <main+0x5aa>
    3ef6:	a1 e0       	ldi	r26, 0x01	; 1
    3ef8:	7a 12       	cpse	r7, r26
    3efa:	29 c0       	rjmp	.+82     	; 0x3f4e <main+0x5aa>
				if(getMicros() > microseconds){
    3efc:	0e 94 34 18 	call	0x3068	; 0x3068 <getMicros>
    3f00:	26 16       	cp	r2, r22
    3f02:	37 06       	cpc	r3, r23
    3f04:	48 06       	cpc	r4, r24
    3f06:	59 06       	cpc	r5, r25
    3f08:	10 f5       	brcc	.+68     	; 0x3f4e <main+0x5aa>
					sendMidiBuffer(mtevent.event.data,mtevent.event.size);
    3f0a:	24 96       	adiw	r28, 0x04	; 4
    3f0c:	6f ad       	ldd	r22, Y+63	; 0x3f
    3f0e:	24 97       	sbiw	r28, 0x04	; 4
    3f10:	c1 56       	subi	r28, 0x61	; 97
    3f12:	dd 4f       	sbci	r29, 0xFD	; 253
    3f14:	88 81       	ld	r24, Y
    3f16:	99 81       	ldd	r25, Y+1	; 0x01
    3f18:	cf 59       	subi	r28, 0x9F	; 159
    3f1a:	d2 40       	sbci	r29, 0x02	; 2
    3f1c:	0e 94 a0 28 	call	0x5140	; 0x5140 <sendMidiBuffer>
					readSRAM(((unsigned char *)&mtevent),sizeof(struct midi_time_event));
    3f20:	6b e0       	ldi	r22, 0x0B	; 11
    3f22:	70 e0       	ldi	r23, 0x00	; 0
    3f24:	ce 01       	movw	r24, r28
    3f26:	8f 5b       	subi	r24, 0xBF	; 191
    3f28:	9f 4f       	sbci	r25, 0xFF	; 255
    3f2a:	0e 94 47 32 	call	0x648e	; 0x648e <readSRAM>
					microseconds = getMicros() + mtevent.delta; 
    3f2e:	0e 94 34 18 	call	0x3068	; 0x3068 <getMicros>
    3f32:	2c 96       	adiw	r28, 0x0c	; 12
    3f34:	2c ad       	ldd	r18, Y+60	; 0x3c
    3f36:	3d ad       	ldd	r19, Y+61	; 0x3d
    3f38:	4e ad       	ldd	r20, Y+62	; 0x3e
    3f3a:	5f ad       	ldd	r21, Y+63	; 0x3f
    3f3c:	2c 97       	sbiw	r28, 0x0c	; 12
    3f3e:	1b 01       	movw	r2, r22
    3f40:	2c 01       	movw	r4, r24
    3f42:	22 0e       	add	r2, r18
    3f44:	33 1e       	adc	r3, r19
    3f46:	44 1e       	adc	r4, r20
    3f48:	55 1e       	adc	r5, r21
    3f4a:	01 c0       	rjmp	.+2      	; 0x3f4e <main+0x5aa>
    3f4c:	06 2d       	mov	r16, r6
				}
			}
			if(!uartReceiveBufferIsEmpty()){
    3f4e:	0e 94 46 35 	call	0x6a8c	; 0x6a8c <uartReceiveBufferIsEmpty>
    3f52:	81 11       	cpse	r24, r1
    3f54:	c1 cd       	rjmp	.-1150   	; 0x3ad8 <main+0x134>
				byteValue = (unsigned char)uartGetByte();
    3f56:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <uartGetByte>
				if(readMidiMessage(byteValue,&numOfBytes) == TRUE){
    3f5a:	be 01       	movw	r22, r28
    3f5c:	64 57       	subi	r22, 0x74	; 116
    3f5e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f60:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <readMidiMessage>
    3f64:	81 30       	cpi	r24, 0x01	; 1
    3f66:	09 f0       	breq	.+2      	; 0x3f6a <main+0x5c6>
    3f68:	b7 cd       	rjmp	.-1170   	; 0x3ad8 <main+0x134>
					sendMidiMessage(numOfBytes);
    3f6a:	c4 57       	subi	r28, 0x74	; 116
    3f6c:	df 4f       	sbci	r29, 0xFF	; 255
    3f6e:	88 81       	ld	r24, Y
    3f70:	cc 58       	subi	r28, 0x8C	; 140
    3f72:	d0 40       	sbci	r29, 0x00	; 0
    3f74:	0e 94 5b 28 	call	0x50b6	; 0x50b6 <sendMidiMessage>
					if(currentMode == MIDI_REC && endRecording == FALSE){
    3f78:	03 30       	cpi	r16, 0x03	; 3
    3f7a:	09 f0       	breq	.+2      	; 0x3f7e <main+0x5da>
    3f7c:	ad cd       	rjmp	.-1190   	; 0x3ad8 <main+0x134>
    3f7e:	71 10       	cpse	r7, r1
    3f80:	ab cd       	rjmp	.-1194   	; 0x3ad8 <main+0x134>
						delta = (getMicros() - microseconds);
    3f82:	0e 94 34 18 	call	0x3068	; 0x3068 <getMicros>
						//WriteVarLen(&soundFile,delta);
						writeSRAM((unsigned char *)getMidiStruct(delta),sizeof(struct midi_time_event));						
    3f86:	62 19       	sub	r22, r2
    3f88:	73 09       	sbc	r23, r3
    3f8a:	84 09       	sbc	r24, r4
    3f8c:	95 09       	sbc	r25, r5
    3f8e:	0e 94 50 28 	call	0x50a0	; 0x50a0 <getMidiStruct>
    3f92:	6b e0       	ldi	r22, 0x0B	; 11
    3f94:	70 e0       	ldi	r23, 0x00	; 0
    3f96:	0e 94 6d 31 	call	0x62da	; 0x62da <writeSRAM>
						microseconds = getMicros();
    3f9a:	0e 94 34 18 	call	0x3068	; 0x3068 <getMicros>
    3f9e:	1b 01       	movw	r2, r22
    3fa0:	2c 01       	movw	r4, r24
    3fa2:	9a cd       	rjmp	.-1228   	; 0x3ad8 <main+0x134>
    3fa4:	01 e0       	ldi	r16, 0x01	; 1
    3fa6:	d3 cf       	rjmp	.-90     	; 0x3f4e <main+0x5aa>

00003fa8 <setMidiHandler>:


const char * getFilename(struct MD_MIDIFile *m) 
{ 
	return(m->_fileName); 
}
    3fa8:	fc 01       	movw	r30, r24
    3faa:	71 83       	std	Z+1, r23	; 0x01
    3fac:	60 83       	st	Z, r22
    3fae:	08 95       	ret

00003fb0 <setMetaHandler>:
    3fb0:	fc 01       	movw	r30, r24
    3fb2:	75 83       	std	Z+5, r23	; 0x05
    3fb4:	64 83       	std	Z+4, r22	; 0x04
    3fb6:	08 95       	ret

00003fb8 <setSysexHandler>:
    3fb8:	fc 01       	movw	r30, r24
    3fba:	73 83       	std	Z+3, r23	; 0x03
    3fbc:	62 83       	std	Z+2, r22	; 0x02
    3fbe:	08 95       	ret

00003fc0 <synchTracks>:
    3fc0:	0f 93       	push	r16
    3fc2:	1f 93       	push	r17
    3fc4:	cf 93       	push	r28
    3fc6:	df 93       	push	r29
    3fc8:	8c 01       	movw	r16, r24
    3fca:	fc 01       	movw	r30, r24
    3fcc:	84 a9       	ldd	r24, Z+52	; 0x34
    3fce:	88 23       	and	r24, r24
    3fd0:	81 f0       	breq	.+32     	; 0x3ff2 <synchTracks+0x32>
    3fd2:	c0 e0       	ldi	r28, 0x00	; 0
    3fd4:	d9 e1       	ldi	r29, 0x19	; 25
    3fd6:	c8 01       	movw	r24, r16
    3fd8:	dc 9f       	mul	r29, r28
    3fda:	80 0d       	add	r24, r0
    3fdc:	91 1d       	adc	r25, r1
    3fde:	11 24       	eor	r1, r1
    3fe0:	85 5b       	subi	r24, 0xB5	; 181
    3fe2:	9f 4f       	sbci	r25, 0xFF	; 255
    3fe4:	0e 94 a7 23 	call	0x474e	; 0x474e <syncTime>
    3fe8:	cf 5f       	subi	r28, 0xFF	; 255
    3fea:	f8 01       	movw	r30, r16
    3fec:	84 a9       	ldd	r24, Z+52	; 0x34
    3fee:	c8 17       	cp	r28, r24
    3ff0:	90 f3       	brcs	.-28     	; 0x3fd6 <synchTracks+0x16>
    3ff2:	0e 94 34 18 	call	0x3068	; 0x3068 <getMicros>
    3ff6:	f8 01       	movw	r30, r16
    3ff8:	fd 96       	adiw	r30, 0x3d	; 61
    3ffa:	60 83       	st	Z, r22
    3ffc:	71 83       	std	Z+1, r23	; 0x01
    3ffe:	82 83       	std	Z+2, r24	; 0x02
    4000:	93 83       	std	Z+3, r25	; 0x03
    4002:	df 91       	pop	r29
    4004:	cf 91       	pop	r28
    4006:	1f 91       	pop	r17
    4008:	0f 91       	pop	r16
    400a:	08 95       	ret

0000400c <closeMIDIFile>:
    400c:	0f 93       	push	r16
    400e:	1f 93       	push	r17
    4010:	cf 93       	push	r28
    4012:	df 93       	push	r29
    4014:	8c 01       	movw	r16, r24
    4016:	fc 01       	movw	r30, r24
    4018:	84 a9       	ldd	r24, Z+52	; 0x34
    401a:	88 23       	and	r24, r24
    401c:	81 f0       	breq	.+32     	; 0x403e <closeMIDIFile+0x32>
    401e:	c0 e0       	ldi	r28, 0x00	; 0
    4020:	d9 e1       	ldi	r29, 0x19	; 25
    4022:	c8 01       	movw	r24, r16
    4024:	dc 9f       	mul	r29, r28
    4026:	80 0d       	add	r24, r0
    4028:	91 1d       	adc	r25, r1
    402a:	11 24       	eor	r1, r1
    402c:	85 5b       	subi	r24, 0xB5	; 181
    402e:	9f 4f       	sbci	r25, 0xFF	; 255
    4030:	0e 94 ca 23 	call	0x4794	; 0x4794 <closeTrack>
    4034:	cf 5f       	subi	r28, 0xFF	; 255
    4036:	f8 01       	movw	r30, r16
    4038:	84 a9       	ldd	r24, Z+52	; 0x34
    403a:	c8 17       	cp	r28, r24
    403c:	90 f3       	brcs	.-28     	; 0x4022 <closeMIDIFile+0x16>
    403e:	f8 01       	movw	r30, r16
    4040:	14 aa       	std	Z+52, r1	; 0x34
    4042:	ef 5b       	subi	r30, 0xBF	; 191
    4044:	ff 4f       	sbci	r31, 0xFF	; 255
    4046:	10 82       	st	Z, r1
    4048:	31 96       	adiw	r30, 0x01	; 1
    404a:	10 82       	st	Z, r1
    404c:	f8 01       	movw	r30, r16
    404e:	16 a2       	std	Z+38, r1	; 0x26
    4050:	c8 01       	movw	r24, r16
    4052:	06 96       	adiw	r24, 0x06	; 6
    4054:	0e 94 71 13 	call	0x26e2	; 0x26e2 <f_close>
    4058:	f8 01       	movw	r30, r16
    405a:	e6 5b       	subi	r30, 0xB6	; 182
    405c:	ff 4f       	sbci	r31, 0xFF	; 255
    405e:	10 82       	st	Z, r1
    4060:	df 91       	pop	r29
    4062:	cf 91       	pop	r28
    4064:	1f 91       	pop	r17
    4066:	0f 91       	pop	r16
    4068:	08 95       	ret

0000406a <calcTickTime>:
    406a:	0f 93       	push	r16
    406c:	1f 93       	push	r17
    406e:	cf 93       	push	r28
    4070:	df 93       	push	r29
    4072:	ec 01       	movw	r28, r24
    4074:	dc 01       	movw	r26, r24
    4076:	ac 5b       	subi	r26, 0xBC	; 188
    4078:	bf 4f       	sbci	r27, 0xFF	; 255
    407a:	fc 01       	movw	r30, r24
    407c:	ea 5b       	subi	r30, 0xBA	; 186
    407e:	ff 4f       	sbci	r31, 0xFF	; 255
    4080:	2d 91       	ld	r18, X+
    4082:	3c 91       	ld	r19, X
    4084:	80 81       	ld	r24, Z
    4086:	91 81       	ldd	r25, Z+1	; 0x01
    4088:	28 0f       	add	r18, r24
    408a:	39 1f       	adc	r19, r25
    408c:	21 15       	cp	r18, r1
    408e:	31 05       	cpc	r19, r1
    4090:	e1 f0       	breq	.+56     	; 0x40ca <calcTickTime+0x60>
    4092:	0d a9       	ldd	r16, Y+53	; 0x35
    4094:	1e a9       	ldd	r17, Y+54	; 0x36
    4096:	01 15       	cp	r16, r1
    4098:	11 05       	cpc	r17, r1
    409a:	b9 f0       	breq	.+46     	; 0x40ca <calcTickTime+0x60>
    409c:	33 96       	adiw	r30, 0x03	; 3
    409e:	80 81       	ld	r24, Z
    40a0:	88 23       	and	r24, r24
    40a2:	99 f0       	breq	.+38     	; 0x40ca <calcTickTime+0x60>
    40a4:	40 e0       	ldi	r20, 0x00	; 0
    40a6:	50 e0       	ldi	r21, 0x00	; 0
    40a8:	60 e0       	ldi	r22, 0x00	; 0
    40aa:	77 e8       	ldi	r23, 0x87	; 135
    40ac:	83 e9       	ldi	r24, 0x93	; 147
    40ae:	93 e0       	ldi	r25, 0x03	; 3
    40b0:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <__divmodsi4>
    40b4:	ca 01       	movw	r24, r20
    40b6:	b9 01       	movw	r22, r18
    40b8:	98 01       	movw	r18, r16
    40ba:	40 e0       	ldi	r20, 0x00	; 0
    40bc:	50 e0       	ldi	r21, 0x00	; 0
    40be:	0e 94 79 37 	call	0x6ef2	; 0x6ef2 <__udivmodsi4>
    40c2:	2f ab       	std	Y+55, r18	; 0x37
    40c4:	38 af       	std	Y+56, r19	; 0x38
    40c6:	49 af       	std	Y+57, r20	; 0x39
    40c8:	5a af       	std	Y+58, r21	; 0x3a
    40ca:	df 91       	pop	r29
    40cc:	cf 91       	pop	r28
    40ce:	1f 91       	pop	r17
    40d0:	0f 91       	pop	r16
    40d2:	08 95       	ret

000040d4 <setTempoAdjust>:
    40d4:	fc 01       	movw	r30, r24
    40d6:	ec 5b       	subi	r30, 0xBC	; 188
    40d8:	ff 4f       	sbci	r31, 0xFF	; 255
    40da:	20 81       	ld	r18, Z
    40dc:	31 81       	ldd	r19, Z+1	; 0x01
    40de:	26 0f       	add	r18, r22
    40e0:	37 1f       	adc	r19, r23
    40e2:	23 2b       	or	r18, r19
    40e4:	19 f0       	breq	.+6      	; 0x40ec <setTempoAdjust+0x18>
    40e6:	32 96       	adiw	r30, 0x02	; 2
    40e8:	71 83       	std	Z+1, r23	; 0x01
    40ea:	60 83       	st	Z, r22
    40ec:	0e 94 35 20 	call	0x406a	; 0x406a <calcTickTime>
    40f0:	08 95       	ret

000040f2 <setTempo>:
    40f2:	fc 01       	movw	r30, r24
    40f4:	ea 5b       	subi	r30, 0xBA	; 186
    40f6:	ff 4f       	sbci	r31, 0xFF	; 255
    40f8:	20 81       	ld	r18, Z
    40fa:	31 81       	ldd	r19, Z+1	; 0x01
    40fc:	26 0f       	add	r18, r22
    40fe:	37 1f       	adc	r19, r23
    4100:	23 2b       	or	r18, r19
    4102:	19 f0       	breq	.+6      	; 0x410a <setTempo+0x18>
    4104:	32 97       	sbiw	r30, 0x02	; 2
    4106:	71 83       	std	Z+1, r23	; 0x01
    4108:	60 83       	st	Z, r22
    410a:	0e 94 35 20 	call	0x406a	; 0x406a <calcTickTime>
    410e:	08 95       	ret

00004110 <setTimeSignature>:
    4110:	fc 01       	movw	r30, r24
    4112:	e8 5b       	subi	r30, 0xB8	; 184
    4114:	ff 4f       	sbci	r31, 0xFF	; 255
    4116:	60 83       	st	Z, r22
    4118:	31 96       	adiw	r30, 0x01	; 1
    411a:	40 83       	st	Z, r20
    411c:	0e 94 35 20 	call	0x406a	; 0x406a <calcTickTime>
    4120:	08 95       	ret

00004122 <setMicrosecondPerQuarterNote>:
    4122:	0f 93       	push	r16
    4124:	1f 93       	push	r17
    4126:	cf 93       	push	r28
    4128:	df 93       	push	r29
    412a:	ec 01       	movw	r28, r24
    412c:	9a 01       	movw	r18, r20
    412e:	ab 01       	movw	r20, r22
    4130:	8c 01       	movw	r16, r24
    4132:	0c 5b       	subi	r16, 0xBC	; 188
    4134:	1f 4f       	sbci	r17, 0xFF	; 255
    4136:	60 e0       	ldi	r22, 0x00	; 0
    4138:	77 e8       	ldi	r23, 0x87	; 135
    413a:	83 e9       	ldi	r24, 0x93	; 147
    413c:	93 e0       	ldi	r25, 0x03	; 3
    413e:	0e 94 79 37 	call	0x6ef2	; 0x6ef2 <__udivmodsi4>
    4142:	f8 01       	movw	r30, r16
    4144:	31 83       	std	Z+1, r19	; 0x01
    4146:	20 83       	st	Z, r18
    4148:	ce 01       	movw	r24, r28
    414a:	0e 94 35 20 	call	0x406a	; 0x406a <calcTickTime>
    414e:	df 91       	pop	r29
    4150:	cf 91       	pop	r28
    4152:	1f 91       	pop	r17
    4154:	0f 91       	pop	r16
    4156:	08 95       	ret

00004158 <initialise>:
    4158:	cf 93       	push	r28
    415a:	df 93       	push	r29
    415c:	ec 01       	movw	r28, r24
    415e:	1c aa       	std	Y+52, r1	; 0x34
    4160:	1b aa       	std	Y+51, r1	; 0x33
    4162:	1f aa       	std	Y+55, r1	; 0x37
    4164:	18 ae       	std	Y+56, r1	; 0x38
    4166:	19 ae       	std	Y+57, r1	; 0x39
    4168:	1a ae       	std	Y+58, r1	; 0x3a
    416a:	1c ae       	std	Y+60, r1	; 0x3c
    416c:	1b ae       	std	Y+59, r1	; 0x3b
    416e:	fc 01       	movw	r30, r24
    4170:	ef 5b       	subi	r30, 0xBF	; 191
    4172:	ff 4f       	sbci	r31, 0xFF	; 255
    4174:	10 82       	st	Z, r1
    4176:	32 96       	adiw	r30, 0x02	; 2
    4178:	10 82       	st	Z, r1
    417a:	31 97       	sbiw	r30, 0x01	; 1
    417c:	10 82       	st	Z, r1
    417e:	19 82       	std	Y+1, r1	; 0x01
    4180:	18 82       	st	Y, r1
    4182:	1b 82       	std	Y+3, r1	; 0x03
    4184:	1a 82       	std	Y+2, r1	; 0x02
    4186:	1d 82       	std	Y+5, r1	; 0x05
    4188:	1c 82       	std	Y+4, r1	; 0x04
    418a:	1e a2       	std	Y+38, r1	; 0x26
    418c:	80 e3       	ldi	r24, 0x30	; 48
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	9e ab       	std	Y+54, r25	; 0x36
    4192:	8d ab       	std	Y+53, r24	; 0x35
    4194:	ce 01       	movw	r24, r28
    4196:	0e 94 35 20 	call	0x406a	; 0x406a <calcTickTime>
    419a:	68 e7       	ldi	r22, 0x78	; 120
    419c:	70 e0       	ldi	r23, 0x00	; 0
    419e:	ce 01       	movw	r24, r28
    41a0:	0e 94 79 20 	call	0x40f2	; 0x40f2 <setTempo>
    41a4:	60 e0       	ldi	r22, 0x00	; 0
    41a6:	70 e0       	ldi	r23, 0x00	; 0
    41a8:	ce 01       	movw	r24, r28
    41aa:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <setTempoAdjust>
    41ae:	fe 01       	movw	r30, r28
    41b0:	ec 5b       	subi	r30, 0xBC	; 188
    41b2:	ff 4f       	sbci	r31, 0xFF	; 255
    41b4:	88 e7       	ldi	r24, 0x78	; 120
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    41b8:	91 83       	std	Z+1, r25	; 0x01
    41ba:	80 83       	st	Z, r24
    41bc:	ce 01       	movw	r24, r28
    41be:	0e 94 35 20 	call	0x406a	; 0x406a <calcTickTime>
    41c2:	fe 01       	movw	r30, r28
    41c4:	e8 5b       	subi	r30, 0xB8	; 184
    41c6:	ff 4f       	sbci	r31, 0xFF	; 255
    41c8:	84 e0       	ldi	r24, 0x04	; 4
    41ca:	80 83       	st	Z, r24
    41cc:	31 96       	adiw	r30, 0x01	; 1
    41ce:	80 83       	st	Z, r24
    41d0:	ce 01       	movw	r24, r28
    41d2:	0e 94 35 20 	call	0x406a	; 0x406a <calcTickTime>
    41d6:	df 91       	pop	r29
    41d8:	cf 91       	pop	r28
    41da:	08 95       	ret

000041dc <restart>:
    41dc:	0f 93       	push	r16
    41de:	1f 93       	push	r17
    41e0:	cf 93       	push	r28
    41e2:	df 93       	push	r29
    41e4:	8c 01       	movw	r16, r24
    41e6:	fc 01       	movw	r30, r24
    41e8:	ed 5b       	subi	r30, 0xBD	; 189
    41ea:	ff 4f       	sbci	r31, 0xFF	; 255
    41ec:	80 81       	ld	r24, Z
    41ee:	88 23       	and	r24, r24
    41f0:	21 f0       	breq	.+8      	; 0x41fa <restart+0x1e>
    41f2:	f8 01       	movw	r30, r16
    41f4:	84 a9       	ldd	r24, Z+52	; 0x34
    41f6:	82 30       	cpi	r24, 0x02	; 2
    41f8:	30 f4       	brcc	.+12     	; 0x4206 <restart+0x2a>
    41fa:	f8 01       	movw	r30, r16
    41fc:	84 a9       	ldd	r24, Z+52	; 0x34
    41fe:	88 23       	and	r24, r24
    4200:	91 f0       	breq	.+36     	; 0x4226 <restart+0x4a>
    4202:	c0 e0       	ldi	r28, 0x00	; 0
    4204:	01 c0       	rjmp	.+2      	; 0x4208 <restart+0x2c>
    4206:	c1 e0       	ldi	r28, 0x01	; 1
    4208:	d9 e1       	ldi	r29, 0x19	; 25
    420a:	c8 01       	movw	r24, r16
    420c:	dc 9f       	mul	r29, r28
    420e:	80 0d       	add	r24, r0
    4210:	91 1d       	adc	r25, r1
    4212:	11 24       	eor	r1, r1
    4214:	85 5b       	subi	r24, 0xB5	; 181
    4216:	9f 4f       	sbci	r25, 0xFF	; 255
    4218:	0e 94 ad 23 	call	0x475a	; 0x475a <restartTrack>
    421c:	cf 5f       	subi	r28, 0xFF	; 255
    421e:	f8 01       	movw	r30, r16
    4220:	84 a9       	ldd	r24, Z+52	; 0x34
    4222:	c8 17       	cp	r28, r24
    4224:	90 f3       	brcs	.-28     	; 0x420a <restart+0x2e>
    4226:	f8 01       	movw	r30, r16
    4228:	ef 5b       	subi	r30, 0xBF	; 191
    422a:	ff 4f       	sbci	r31, 0xFF	; 255
    422c:	10 82       	st	Z, r1
    422e:	df 91       	pop	r29
    4230:	cf 91       	pop	r28
    4232:	1f 91       	pop	r17
    4234:	0f 91       	pop	r16
    4236:	08 95       	ret

00004238 <isEOF>:
    4238:	0f 93       	push	r16
    423a:	1f 93       	push	r17
    423c:	cf 93       	push	r28
    423e:	df 93       	push	r29
    4240:	8c 01       	movw	r16, r24
    4242:	fc 01       	movw	r30, r24
    4244:	84 a9       	ldd	r24, Z+52	; 0x34
    4246:	88 23       	and	r24, r24
    4248:	71 f0       	breq	.+28     	; 0x4266 <isEOF+0x2e>
    424a:	c0 e0       	ldi	r28, 0x00	; 0
    424c:	d9 e1       	ldi	r29, 0x19	; 25
    424e:	c8 01       	movw	r24, r16
    4250:	dc 9f       	mul	r29, r28
    4252:	80 0d       	add	r24, r0
    4254:	91 1d       	adc	r25, r1
    4256:	11 24       	eor	r1, r1
    4258:	85 5b       	subi	r24, 0xB5	; 181
    425a:	9f 4f       	sbci	r25, 0xFF	; 255
    425c:	0e 94 a4 23 	call	0x4748	; 0x4748 <getEndOfTrack>
    4260:	81 11       	cpse	r24, r1
    4262:	0e c0       	rjmp	.+28     	; 0x4280 <isEOF+0x48>
    4264:	13 c0       	rjmp	.+38     	; 0x428c <isEOF+0x54>
    4266:	f8 01       	movw	r30, r16
    4268:	ed 5b       	subi	r30, 0xBD	; 189
    426a:	ff 4f       	sbci	r31, 0xFF	; 255
    426c:	80 81       	ld	r24, Z
    426e:	88 23       	and	r24, r24
    4270:	29 f0       	breq	.+10     	; 0x427c <isEOF+0x44>
    4272:	c8 01       	movw	r24, r16
    4274:	0e 94 ee 20 	call	0x41dc	; 0x41dc <restart>
    4278:	80 e0       	ldi	r24, 0x00	; 0
    427a:	08 c0       	rjmp	.+16     	; 0x428c <isEOF+0x54>
    427c:	81 e0       	ldi	r24, 0x01	; 1
    427e:	06 c0       	rjmp	.+12     	; 0x428c <isEOF+0x54>
    4280:	cf 5f       	subi	r28, 0xFF	; 255
    4282:	f8 01       	movw	r30, r16
    4284:	84 a9       	ldd	r24, Z+52	; 0x34
    4286:	c8 17       	cp	r28, r24
    4288:	10 f3       	brcs	.-60     	; 0x424e <isEOF+0x16>
    428a:	ed cf       	rjmp	.-38     	; 0x4266 <isEOF+0x2e>
    428c:	df 91       	pop	r29
    428e:	cf 91       	pop	r28
    4290:	1f 91       	pop	r17
    4292:	0f 91       	pop	r16
    4294:	08 95       	ret

00004296 <tickClock>:
    4296:	8f 92       	push	r8
    4298:	9f 92       	push	r9
    429a:	af 92       	push	r10
    429c:	bf 92       	push	r11
    429e:	cf 92       	push	r12
    42a0:	df 92       	push	r13
    42a2:	ef 92       	push	r14
    42a4:	ff 92       	push	r15
    42a6:	0f 93       	push	r16
    42a8:	1f 93       	push	r17
    42aa:	cf 93       	push	r28
    42ac:	df 93       	push	r29
    42ae:	ec 01       	movw	r28, r24
    42b0:	0e 94 34 18 	call	0x3068	; 0x3068 <getMicros>
    42b4:	2b ad       	ldd	r18, Y+59	; 0x3b
    42b6:	3c ad       	ldd	r19, Y+60	; 0x3c
    42b8:	69 01       	movw	r12, r18
    42ba:	e1 2c       	mov	r14, r1
    42bc:	f1 2c       	mov	r15, r1
    42be:	fe 01       	movw	r30, r28
    42c0:	fd 96       	adiw	r30, 0x3d	; 61
    42c2:	00 81       	ld	r16, Z
    42c4:	11 81       	ldd	r17, Z+1	; 0x01
    42c6:	22 81       	ldd	r18, Z+2	; 0x02
    42c8:	33 81       	ldd	r19, Z+3	; 0x03
    42ca:	46 01       	movw	r8, r12
    42cc:	57 01       	movw	r10, r14
    42ce:	80 1a       	sub	r8, r16
    42d0:	91 0a       	sbc	r9, r17
    42d2:	a2 0a       	sbc	r10, r18
    42d4:	b3 0a       	sbc	r11, r19
    42d6:	75 01       	movw	r14, r10
    42d8:	64 01       	movw	r12, r8
    42da:	c6 0e       	add	r12, r22
    42dc:	d7 1e       	adc	r13, r23
    42de:	e8 1e       	adc	r14, r24
    42e0:	f9 1e       	adc	r15, r25
    42e2:	8f a8       	ldd	r8, Y+55	; 0x37
    42e4:	98 ac       	ldd	r9, Y+56	; 0x38
    42e6:	a9 ac       	ldd	r10, Y+57	; 0x39
    42e8:	ba ac       	ldd	r11, Y+58	; 0x3a
    42ea:	c8 14       	cp	r12, r8
    42ec:	d9 04       	cpc	r13, r9
    42ee:	ea 04       	cpc	r14, r10
    42f0:	fb 04       	cpc	r15, r11
    42f2:	d8 f0       	brcs	.+54     	; 0x432a <tickClock+0x94>
    42f4:	c7 01       	movw	r24, r14
    42f6:	b6 01       	movw	r22, r12
    42f8:	a5 01       	movw	r20, r10
    42fa:	94 01       	movw	r18, r8
    42fc:	0e 94 79 37 	call	0x6ef2	; 0x6ef2 <__udivmodsi4>
    4300:	89 01       	movw	r16, r18
    4302:	28 9d       	mul	r18, r8
    4304:	c0 01       	movw	r24, r0
    4306:	29 9d       	mul	r18, r9
    4308:	90 0d       	add	r25, r0
    430a:	38 9d       	mul	r19, r8
    430c:	90 0d       	add	r25, r0
    430e:	11 24       	eor	r1, r1
    4310:	56 01       	movw	r10, r12
    4312:	a8 1a       	sub	r10, r24
    4314:	b9 0a       	sbc	r11, r25
    4316:	bc ae       	std	Y+60, r11	; 0x3c
    4318:	ab ae       	std	Y+59, r10	; 0x3b
    431a:	0e 94 34 18 	call	0x3068	; 0x3068 <getMicros>
    431e:	ed 96       	adiw	r28, 0x3d	; 61
    4320:	68 83       	st	Y, r22
    4322:	79 83       	std	Y+1, r23	; 0x01
    4324:	8a 83       	std	Y+2, r24	; 0x02
    4326:	9b 83       	std	Y+3, r25	; 0x03
    4328:	02 c0       	rjmp	.+4      	; 0x432e <tickClock+0x98>
    432a:	00 e0       	ldi	r16, 0x00	; 0
    432c:	10 e0       	ldi	r17, 0x00	; 0
    432e:	c8 01       	movw	r24, r16
    4330:	df 91       	pop	r29
    4332:	cf 91       	pop	r28
    4334:	1f 91       	pop	r17
    4336:	0f 91       	pop	r16
    4338:	ff 90       	pop	r15
    433a:	ef 90       	pop	r14
    433c:	df 90       	pop	r13
    433e:	cf 90       	pop	r12
    4340:	bf 90       	pop	r11
    4342:	af 90       	pop	r10
    4344:	9f 90       	pop	r9
    4346:	8f 90       	pop	r8
    4348:	08 95       	ret

0000434a <processEvents>:
    434a:	af 92       	push	r10
    434c:	bf 92       	push	r11
    434e:	cf 92       	push	r12
    4350:	df 92       	push	r13
    4352:	ef 92       	push	r14
    4354:	ff 92       	push	r15
    4356:	0f 93       	push	r16
    4358:	1f 93       	push	r17
    435a:	cf 93       	push	r28
    435c:	df 93       	push	r29
    435e:	c0 e0       	ldi	r28, 0x00	; 0
    4360:	fc 01       	movw	r30, r24
    4362:	24 a9       	ldd	r18, Z+52	; 0x34
    4364:	22 23       	and	r18, r18
    4366:	21 f1       	breq	.+72     	; 0x43b0 <processEvents+0x66>
    4368:	7b 01       	movw	r14, r22
    436a:	8c 01       	movw	r16, r24
    436c:	d0 e0       	ldi	r29, 0x00	; 0
    436e:	0f 2e       	mov	r0, r31
    4370:	f9 e1       	ldi	r31, 0x19	; 25
    4372:	df 2e       	mov	r13, r31
    4374:	f0 2d       	mov	r31, r0
    4376:	bb 24       	eor	r11, r11
    4378:	b3 94       	inc	r11
    437a:	cc 24       	eor	r12, r12
    437c:	c3 94       	inc	r12
    437e:	a1 2c       	mov	r10, r1
    4380:	b8 01       	movw	r22, r16
    4382:	dd 9e       	mul	r13, r29
    4384:	60 0d       	add	r22, r0
    4386:	71 1d       	adc	r23, r1
    4388:	11 24       	eor	r1, r1
    438a:	65 5b       	subi	r22, 0xB5	; 181
    438c:	7f 4f       	sbci	r23, 0xFF	; 255
    438e:	a7 01       	movw	r20, r14
    4390:	c8 01       	movw	r24, r16
    4392:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <getNextTrackEvent>
    4396:	c1 11       	cpse	r28, r1
    4398:	05 c0       	rjmp	.+10     	; 0x43a4 <processEvents+0x5a>
    439a:	cc 2d       	mov	r28, r12
    439c:	81 11       	cpse	r24, r1
    439e:	03 c0       	rjmp	.+6      	; 0x43a6 <processEvents+0x5c>
    43a0:	ca 2d       	mov	r28, r10
    43a2:	01 c0       	rjmp	.+2      	; 0x43a6 <processEvents+0x5c>
    43a4:	cb 2d       	mov	r28, r11
    43a6:	df 5f       	subi	r29, 0xFF	; 255
    43a8:	f8 01       	movw	r30, r16
    43aa:	84 a9       	ldd	r24, Z+52	; 0x34
    43ac:	d8 17       	cp	r29, r24
    43ae:	40 f3       	brcs	.-48     	; 0x4380 <processEvents+0x36>
    43b0:	df 91       	pop	r29
    43b2:	cf 91       	pop	r28
    43b4:	1f 91       	pop	r17
    43b6:	0f 91       	pop	r16
    43b8:	ff 90       	pop	r15
    43ba:	ef 90       	pop	r14
    43bc:	df 90       	pop	r13
    43be:	cf 90       	pop	r12
    43c0:	bf 90       	pop	r11
    43c2:	af 90       	pop	r10
    43c4:	08 95       	ret

000043c6 <getNextEvent>:
    43c6:	0f 93       	push	r16
    43c8:	1f 93       	push	r17
    43ca:	cf 93       	push	r28
    43cc:	fc 01       	movw	r30, r24
    43ce:	ee 5b       	subi	r30, 0xBE	; 190
    43d0:	ff 4f       	sbci	r31, 0xFF	; 255
    43d2:	c0 81       	ld	r28, Z
    43d4:	c1 11       	cpse	r28, r1
    43d6:	18 c0       	rjmp	.+48     	; 0x4408 <getNextEvent+0x42>
    43d8:	8c 01       	movw	r16, r24
    43da:	31 97       	sbiw	r30, 0x01	; 1
    43dc:	80 81       	ld	r24, Z
    43de:	81 11       	cpse	r24, r1
    43e0:	08 c0       	rjmp	.+16     	; 0x43f2 <getNextEvent+0x2c>
    43e2:	c8 01       	movw	r24, r16
    43e4:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <synchTracks>
    43e8:	81 e0       	ldi	r24, 0x01	; 1
    43ea:	f8 01       	movw	r30, r16
    43ec:	ef 5b       	subi	r30, 0xBF	; 191
    43ee:	ff 4f       	sbci	r31, 0xFF	; 255
    43f0:	80 83       	st	Z, r24
    43f2:	c8 01       	movw	r24, r16
    43f4:	0e 94 4b 21 	call	0x4296	; 0x4296 <tickClock>
    43f8:	00 97       	sbiw	r24, 0x00	; 0
    43fa:	39 f0       	breq	.+14     	; 0x440a <getNextEvent+0x44>
    43fc:	bc 01       	movw	r22, r24
    43fe:	c8 01       	movw	r24, r16
    4400:	0e 94 a5 21 	call	0x434a	; 0x434a <processEvents>
    4404:	c1 e0       	ldi	r28, 0x01	; 1
    4406:	01 c0       	rjmp	.+2      	; 0x440a <getNextEvent+0x44>
    4408:	c0 e0       	ldi	r28, 0x00	; 0
    440a:	8c 2f       	mov	r24, r28
    440c:	cf 91       	pop	r28
    440e:	1f 91       	pop	r17
    4410:	0f 91       	pop	r16
    4412:	08 95       	ret

00004414 <loadMIDIFile>:
    4414:	8f 92       	push	r8
    4416:	9f 92       	push	r9
    4418:	af 92       	push	r10
    441a:	bf 92       	push	r11
    441c:	cf 92       	push	r12
    441e:	df 92       	push	r13
    4420:	ef 92       	push	r14
    4422:	ff 92       	push	r15
    4424:	0f 93       	push	r16
    4426:	1f 93       	push	r17
    4428:	cf 93       	push	r28
    442a:	df 93       	push	r29
    442c:	cd b7       	in	r28, 0x3d	; 61
    442e:	de b7       	in	r29, 0x3e	; 62
    4430:	29 97       	sbiw	r28, 0x09	; 9
    4432:	0f b6       	in	r0, 0x3f	; 63
    4434:	f8 94       	cli
    4436:	de bf       	out	0x3e, r29	; 62
    4438:	0f be       	out	0x3f, r0	; 63
    443a:	cd bf       	out	0x3d, r28	; 61
    443c:	fc 01       	movw	r30, r24
    443e:	26 a1       	ldd	r18, Z+38	; 0x26
    4440:	22 23       	and	r18, r18
    4442:	09 f4       	brne	.+2      	; 0x4446 <loadMIDIFile+0x32>
    4444:	d0 c0       	rjmp	.+416    	; 0x45e6 <loadMIDIFile+0x1d2>
    4446:	8c 01       	movw	r16, r24
    4448:	6c 01       	movw	r12, r24
    444a:	f6 e0       	ldi	r31, 0x06	; 6
    444c:	cf 0e       	add	r12, r31
    444e:	d1 1c       	adc	r13, r1
    4450:	bc 01       	movw	r22, r24
    4452:	6a 5d       	subi	r22, 0xDA	; 218
    4454:	7f 4f       	sbci	r23, 0xFF	; 255
    4456:	41 e0       	ldi	r20, 0x01	; 1
    4458:	c6 01       	movw	r24, r12
    445a:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <f_open>
    445e:	81 11       	cpse	r24, r1
    4460:	c5 c0       	rjmp	.+394    	; 0x45ec <loadMIDIFile+0x1d8>
    4462:	9e 01       	movw	r18, r28
    4464:	2f 5f       	subi	r18, 0xFF	; 255
    4466:	3f 4f       	sbci	r19, 0xFF	; 255
    4468:	44 e0       	ldi	r20, 0x04	; 4
    446a:	50 e0       	ldi	r21, 0x00	; 0
    446c:	be 01       	movw	r22, r28
    446e:	6b 5f       	subi	r22, 0xFB	; 251
    4470:	7f 4f       	sbci	r23, 0xFF	; 255
    4472:	c6 01       	movw	r24, r12
    4474:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
    4478:	19 86       	std	Y+9, r1	; 0x09
    447a:	65 e4       	ldi	r22, 0x45	; 69
    447c:	71 e0       	ldi	r23, 0x01	; 1
    447e:	ce 01       	movw	r24, r28
    4480:	05 96       	adiw	r24, 0x05	; 5
    4482:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <strcmp>
    4486:	89 2b       	or	r24, r25
    4488:	31 f0       	breq	.+12     	; 0x4496 <loadMIDIFile+0x82>
    448a:	c6 01       	movw	r24, r12
    448c:	0e 94 71 13 	call	0x26e2	; 0x26e2 <f_close>
    4490:	83 e0       	ldi	r24, 0x03	; 3
    4492:	90 e0       	ldi	r25, 0x00	; 0
    4494:	b0 c0       	rjmp	.+352    	; 0x45f6 <loadMIDIFile+0x1e2>
    4496:	64 e0       	ldi	r22, 0x04	; 4
    4498:	c6 01       	movw	r24, r12
    449a:	0e 94 15 23 	call	0x462a	; 0x462a <readMultiByte>
    449e:	69 83       	std	Y+1, r22	; 0x01
    44a0:	7a 83       	std	Y+2, r23	; 0x02
    44a2:	8b 83       	std	Y+3, r24	; 0x03
    44a4:	9c 83       	std	Y+4, r25	; 0x04
    44a6:	66 30       	cpi	r22, 0x06	; 6
    44a8:	71 05       	cpc	r23, r1
    44aa:	81 05       	cpc	r24, r1
    44ac:	91 05       	cpc	r25, r1
    44ae:	31 f0       	breq	.+12     	; 0x44bc <loadMIDIFile+0xa8>
    44b0:	c6 01       	movw	r24, r12
    44b2:	0e 94 71 13 	call	0x26e2	; 0x26e2 <f_close>
    44b6:	84 e0       	ldi	r24, 0x04	; 4
    44b8:	90 e0       	ldi	r25, 0x00	; 0
    44ba:	9d c0       	rjmp	.+314    	; 0x45f6 <loadMIDIFile+0x1e2>
    44bc:	62 e0       	ldi	r22, 0x02	; 2
    44be:	c6 01       	movw	r24, r12
    44c0:	0e 94 15 23 	call	0x462a	; 0x462a <readMultiByte>
    44c4:	62 30       	cpi	r22, 0x02	; 2
    44c6:	71 05       	cpc	r23, r1
    44c8:	30 f0       	brcs	.+12     	; 0x44d6 <loadMIDIFile+0xc2>
    44ca:	c6 01       	movw	r24, r12
    44cc:	0e 94 71 13 	call	0x26e2	; 0x26e2 <f_close>
    44d0:	85 e0       	ldi	r24, 0x05	; 5
    44d2:	90 e0       	ldi	r25, 0x00	; 0
    44d4:	90 c0       	rjmp	.+288    	; 0x45f6 <loadMIDIFile+0x1e2>
    44d6:	f8 01       	movw	r30, r16
    44d8:	63 ab       	std	Z+51, r22	; 0x33
    44da:	62 e0       	ldi	r22, 0x02	; 2
    44dc:	c6 01       	movw	r24, r12
    44de:	0e 94 15 23 	call	0x462a	; 0x462a <readMultiByte>
    44e2:	27 2f       	mov	r18, r23
    44e4:	86 2f       	mov	r24, r22
    44e6:	92 2f       	mov	r25, r18
    44e8:	f8 01       	movw	r30, r16
    44ea:	23 a9       	ldd	r18, Z+51	; 0x33
    44ec:	21 11       	cpse	r18, r1
    44ee:	08 c0       	rjmp	.+16     	; 0x4500 <loadMIDIFile+0xec>
    44f0:	01 97       	sbiw	r24, 0x01	; 1
    44f2:	71 f0       	breq	.+28     	; 0x4510 <loadMIDIFile+0xfc>
    44f4:	c6 01       	movw	r24, r12
    44f6:	0e 94 71 13 	call	0x26e2	; 0x26e2 <f_close>
    44fa:	86 e0       	ldi	r24, 0x06	; 6
    44fc:	90 e0       	ldi	r25, 0x00	; 0
    44fe:	7b c0       	rjmp	.+246    	; 0x45f6 <loadMIDIFile+0x1e2>
    4500:	41 97       	sbiw	r24, 0x11	; 17
    4502:	30 f0       	brcs	.+12     	; 0x4510 <loadMIDIFile+0xfc>
    4504:	c6 01       	movw	r24, r12
    4506:	0e 94 71 13 	call	0x26e2	; 0x26e2 <f_close>
    450a:	87 e0       	ldi	r24, 0x07	; 7
    450c:	90 e0       	ldi	r25, 0x00	; 0
    450e:	73 c0       	rjmp	.+230    	; 0x45f6 <loadMIDIFile+0x1e2>
    4510:	f8 01       	movw	r30, r16
    4512:	64 ab       	std	Z+52, r22	; 0x34
    4514:	62 e0       	ldi	r22, 0x02	; 2
    4516:	c6 01       	movw	r24, r12
    4518:	0e 94 15 23 	call	0x462a	; 0x462a <readMultiByte>
    451c:	ab 01       	movw	r20, r22
    451e:	77 23       	and	r23, r23
    4520:	54 f5       	brge	.+84     	; 0x4576 <loadMIDIFile+0x162>
    4522:	27 2f       	mov	r18, r23
    4524:	33 27       	eor	r19, r19
    4526:	23 3e       	cpi	r18, 0xE3	; 227
    4528:	31 05       	cpc	r19, r1
    452a:	d9 f0       	breq	.+54     	; 0x4562 <loadMIDIFile+0x14e>
    452c:	20 f4       	brcc	.+8      	; 0x4536 <loadMIDIFile+0x122>
    452e:	22 3e       	cpi	r18, 0xE2	; 226
    4530:	31 05       	cpc	r19, r1
    4532:	59 f0       	breq	.+22     	; 0x454a <loadMIDIFile+0x136>
    4534:	0d c0       	rjmp	.+26     	; 0x4550 <loadMIDIFile+0x13c>
    4536:	27 3e       	cpi	r18, 0xE7	; 231
    4538:	31 05       	cpc	r19, r1
    453a:	21 f0       	breq	.+8      	; 0x4544 <loadMIDIFile+0x130>
    453c:	28 3e       	cpi	r18, 0xE8	; 232
    453e:	31 05       	cpc	r19, r1
    4540:	69 f0       	breq	.+26     	; 0x455c <loadMIDIFile+0x148>
    4542:	06 c0       	rjmp	.+12     	; 0x4550 <loadMIDIFile+0x13c>
    4544:	29 e1       	ldi	r18, 0x19	; 25
    4546:	30 e0       	ldi	r19, 0x00	; 0
    4548:	0e c0       	rjmp	.+28     	; 0x4566 <loadMIDIFile+0x152>
    454a:	2e e1       	ldi	r18, 0x1E	; 30
    454c:	30 e0       	ldi	r19, 0x00	; 0
    454e:	0b c0       	rjmp	.+22     	; 0x4566 <loadMIDIFile+0x152>
    4550:	c6 01       	movw	r24, r12
    4552:	0e 94 71 13 	call	0x26e2	; 0x26e2 <f_close>
    4556:	87 e0       	ldi	r24, 0x07	; 7
    4558:	90 e0       	ldi	r25, 0x00	; 0
    455a:	4d c0       	rjmp	.+154    	; 0x45f6 <loadMIDIFile+0x1e2>
    455c:	28 e1       	ldi	r18, 0x18	; 24
    455e:	30 e0       	ldi	r19, 0x00	; 0
    4560:	02 c0       	rjmp	.+4      	; 0x4566 <loadMIDIFile+0x152>
    4562:	2d e1       	ldi	r18, 0x1D	; 29
    4564:	30 e0       	ldi	r19, 0x00	; 0
    4566:	77 27       	eor	r23, r23
    4568:	62 9f       	mul	r22, r18
    456a:	a0 01       	movw	r20, r0
    456c:	63 9f       	mul	r22, r19
    456e:	50 0d       	add	r21, r0
    4570:	72 9f       	mul	r23, r18
    4572:	50 0d       	add	r21, r0
    4574:	11 24       	eor	r1, r1
    4576:	f8 01       	movw	r30, r16
    4578:	56 ab       	std	Z+54, r21	; 0x36
    457a:	45 ab       	std	Z+53, r20	; 0x35
    457c:	c8 01       	movw	r24, r16
    457e:	0e 94 35 20 	call	0x406a	; 0x406a <calcTickTime>
    4582:	f8 01       	movw	r30, r16
    4584:	84 a9       	ldd	r24, Z+52	; 0x34
    4586:	88 23       	and	r24, r24
    4588:	a1 f1       	breq	.+104    	; 0x45f2 <loadMIDIFile+0x1de>
    458a:	b1 2c       	mov	r11, r1
    458c:	0f 2e       	mov	r0, r31
    458e:	f9 e1       	ldi	r31, 0x19	; 25
    4590:	af 2e       	mov	r10, r31
    4592:	f0 2d       	mov	r31, r0
    4594:	8b 2c       	mov	r8, r11
    4596:	91 2c       	mov	r9, r1
    4598:	a8 9c       	mul	r10, r8
    459a:	c0 01       	movw	r24, r0
    459c:	a9 9c       	mul	r10, r9
    459e:	90 0d       	add	r25, r0
    45a0:	11 24       	eor	r1, r1
    45a2:	85 5b       	subi	r24, 0xB5	; 181
    45a4:	9f 4f       	sbci	r25, 0xFF	; 255
    45a6:	a8 01       	movw	r20, r16
    45a8:	6b 2d       	mov	r22, r11
    45aa:	80 0f       	add	r24, r16
    45ac:	91 1f       	adc	r25, r17
    45ae:	0e 94 da 27 	call	0x4fb4	; 0x4fb4 <loadTrack>
    45b2:	7c 01       	movw	r14, r24
    45b4:	01 96       	adiw	r24, 0x01	; 1
    45b6:	79 f0       	breq	.+30     	; 0x45d6 <loadMIDIFile+0x1c2>
    45b8:	c6 01       	movw	r24, r12
    45ba:	0e 94 71 13 	call	0x26e2	; 0x26e2 <f_close>
    45be:	8f ef       	ldi	r24, 0xFF	; 255
    45c0:	88 1a       	sub	r8, r24
    45c2:	98 0a       	sbc	r9, r24
    45c4:	2a e0       	ldi	r18, 0x0A	; 10
    45c6:	28 9d       	mul	r18, r8
    45c8:	c0 01       	movw	r24, r0
    45ca:	29 9d       	mul	r18, r9
    45cc:	90 0d       	add	r25, r0
    45ce:	11 24       	eor	r1, r1
    45d0:	8e 0d       	add	r24, r14
    45d2:	9f 1d       	adc	r25, r15
    45d4:	10 c0       	rjmp	.+32     	; 0x45f6 <loadMIDIFile+0x1e2>
    45d6:	b3 94       	inc	r11
    45d8:	f8 01       	movw	r30, r16
    45da:	84 a9       	ldd	r24, Z+52	; 0x34
    45dc:	b8 16       	cp	r11, r24
    45de:	d0 f2       	brcs	.-76     	; 0x4594 <loadMIDIFile+0x180>
    45e0:	8f ef       	ldi	r24, 0xFF	; 255
    45e2:	9f ef       	ldi	r25, 0xFF	; 255
    45e4:	08 c0       	rjmp	.+16     	; 0x45f6 <loadMIDIFile+0x1e2>
    45e6:	80 e0       	ldi	r24, 0x00	; 0
    45e8:	90 e0       	ldi	r25, 0x00	; 0
    45ea:	05 c0       	rjmp	.+10     	; 0x45f6 <loadMIDIFile+0x1e2>
    45ec:	82 e0       	ldi	r24, 0x02	; 2
    45ee:	90 e0       	ldi	r25, 0x00	; 0
    45f0:	02 c0       	rjmp	.+4      	; 0x45f6 <loadMIDIFile+0x1e2>
    45f2:	8f ef       	ldi	r24, 0xFF	; 255
    45f4:	9f ef       	ldi	r25, 0xFF	; 255
    45f6:	29 96       	adiw	r28, 0x09	; 9
    45f8:	0f b6       	in	r0, 0x3f	; 63
    45fa:	f8 94       	cli
    45fc:	de bf       	out	0x3e, r29	; 62
    45fe:	0f be       	out	0x3f, r0	; 63
    4600:	cd bf       	out	0x3d, r28	; 61
    4602:	df 91       	pop	r29
    4604:	cf 91       	pop	r28
    4606:	1f 91       	pop	r17
    4608:	0f 91       	pop	r16
    460a:	ff 90       	pop	r15
    460c:	ef 90       	pop	r14
    460e:	df 90       	pop	r13
    4610:	cf 90       	pop	r12
    4612:	bf 90       	pop	r11
    4614:	af 90       	pop	r10
    4616:	9f 90       	pop	r9
    4618:	8f 90       	pop	r8
    461a:	08 95       	ret

0000461c <setFilename>:

void setFilename(struct MD_MIDIFile *m,const char* aname) 
{ 
	if (aname != NULL) strcpy(m->_fileName, aname); 
    461c:	61 15       	cp	r22, r1
    461e:	71 05       	cpc	r23, r1
    4620:	19 f0       	breq	.+6      	; 0x4628 <setFilename+0xc>
    4622:	86 96       	adiw	r24, 0x26	; 38
    4624:	0e 94 04 39 	call	0x7208	; 0x7208 <strcpy>
    4628:	08 95       	ret

0000462a <readMultiByte>:
 * \brief Main file for helper functions implementation
 */

uint32_t readMultiByte(FIL *f, uint8_t nLen)
// read fixed length parameter from input
{
    462a:	af 92       	push	r10
    462c:	bf 92       	push	r11
    462e:	cf 92       	push	r12
    4630:	df 92       	push	r13
    4632:	ef 92       	push	r14
    4634:	ff 92       	push	r15
    4636:	0f 93       	push	r16
    4638:	1f 93       	push	r17
    463a:	cf 93       	push	r28
    463c:	df 93       	push	r29
    463e:	00 d0       	rcall	.+0      	; 0x4640 <readMultiByte+0x16>
    4640:	1f 92       	push	r1
    4642:	cd b7       	in	r28, 0x3d	; 61
    4644:	de b7       	in	r29, 0x3e	; 62
  uint32_t  value = 0L;
  uint8_t c;
  UINT d;
  for (uint8_t i=0; i<nLen; i++)
    4646:	66 23       	and	r22, r22
    4648:	f1 f0       	breq	.+60     	; 0x4686 <readMultiByte+0x5c>
    464a:	a6 2e       	mov	r10, r22
    464c:	8c 01       	movw	r16, r24
    464e:	b1 2c       	mov	r11, r1
    4650:	c1 2c       	mov	r12, r1
    4652:	d1 2c       	mov	r13, r1
    4654:	76 01       	movw	r14, r12
  {
    f_read(f,&c,1,&d);
    4656:	9e 01       	movw	r18, r28
    4658:	2e 5f       	subi	r18, 0xFE	; 254
    465a:	3f 4f       	sbci	r19, 0xFF	; 255
    465c:	41 e0       	ldi	r20, 0x01	; 1
    465e:	50 e0       	ldi	r21, 0x00	; 0
    4660:	be 01       	movw	r22, r28
    4662:	6f 5f       	subi	r22, 0xFF	; 255
    4664:	7f 4f       	sbci	r23, 0xFF	; 255
    4666:	c8 01       	movw	r24, r16
    4668:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
	value = (value << 8) + c;
    466c:	fe 2c       	mov	r15, r14
    466e:	ed 2c       	mov	r14, r13
    4670:	dc 2c       	mov	r13, r12
    4672:	cc 24       	eor	r12, r12
    4674:	89 81       	ldd	r24, Y+1	; 0x01
    4676:	c8 0e       	add	r12, r24
    4678:	d1 1c       	adc	r13, r1
    467a:	e1 1c       	adc	r14, r1
    467c:	f1 1c       	adc	r15, r1
// read fixed length parameter from input
{
  uint32_t  value = 0L;
  uint8_t c;
  UINT d;
  for (uint8_t i=0; i<nLen; i++)
    467e:	b3 94       	inc	r11
    4680:	ab 10       	cpse	r10, r11
    4682:	e9 cf       	rjmp	.-46     	; 0x4656 <readMultiByte+0x2c>
    4684:	03 c0       	rjmp	.+6      	; 0x468c <readMultiByte+0x62>
 */

uint32_t readMultiByte(FIL *f, uint8_t nLen)
// read fixed length parameter from input
{
  uint32_t  value = 0L;
    4686:	c1 2c       	mov	r12, r1
    4688:	d1 2c       	mov	r13, r1
    468a:	76 01       	movw	r14, r12
    f_read(f,&c,1,&d);
	value = (value << 8) + c;
  }
  
  return(value);
}
    468c:	c7 01       	movw	r24, r14
    468e:	b6 01       	movw	r22, r12
    4690:	0f 90       	pop	r0
    4692:	0f 90       	pop	r0
    4694:	0f 90       	pop	r0
    4696:	df 91       	pop	r29
    4698:	cf 91       	pop	r28
    469a:	1f 91       	pop	r17
    469c:	0f 91       	pop	r16
    469e:	ff 90       	pop	r15
    46a0:	ef 90       	pop	r14
    46a2:	df 90       	pop	r13
    46a4:	cf 90       	pop	r12
    46a6:	bf 90       	pop	r11
    46a8:	af 90       	pop	r10
    46aa:	08 95       	ret

000046ac <readVarLen>:

uint32_t readVarLen(FIL *f)
// read variable length parameter from input
{
    46ac:	cf 92       	push	r12
    46ae:	df 92       	push	r13
    46b0:	ef 92       	push	r14
    46b2:	ff 92       	push	r15
    46b4:	0f 93       	push	r16
    46b6:	1f 93       	push	r17
    46b8:	cf 93       	push	r28
    46ba:	df 93       	push	r29
    46bc:	00 d0       	rcall	.+0      	; 0x46be <readVarLen+0x12>
    46be:	1f 92       	push	r1
    46c0:	cd b7       	in	r28, 0x3d	; 61
    46c2:	de b7       	in	r29, 0x3e	; 62
    46c4:	8c 01       	movw	r16, r24
  uint32_t  value = 0;
    46c6:	c1 2c       	mov	r12, r1
    46c8:	d1 2c       	mov	r13, r1
    46ca:	76 01       	movw	r14, r12
  uint8_t      c;
  UINT d;

  do
  {
    f_read(f,&c,1,&d);	
    46cc:	9e 01       	movw	r18, r28
    46ce:	2e 5f       	subi	r18, 0xFE	; 254
    46d0:	3f 4f       	sbci	r19, 0xFF	; 255
    46d2:	41 e0       	ldi	r20, 0x01	; 1
    46d4:	50 e0       	ldi	r21, 0x00	; 0
    46d6:	be 01       	movw	r22, r28
    46d8:	6f 5f       	subi	r22, 0xFF	; 255
    46da:	7f 4f       	sbci	r23, 0xFF	; 255
    46dc:	c8 01       	movw	r24, r16
    46de:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
    value = (value << 7) + (c & 0x7f);
    46e2:	cc 0c       	add	r12, r12
    46e4:	dd 1c       	adc	r13, r13
    46e6:	ee 1c       	adc	r14, r14
    46e8:	ff 1c       	adc	r15, r15
    46ea:	cc 0c       	add	r12, r12
    46ec:	dd 1c       	adc	r13, r13
    46ee:	ee 1c       	adc	r14, r14
    46f0:	ff 1c       	adc	r15, r15
    46f2:	cc 0c       	add	r12, r12
    46f4:	dd 1c       	adc	r13, r13
    46f6:	ee 1c       	adc	r14, r14
    46f8:	ff 1c       	adc	r15, r15
    46fa:	cc 0c       	add	r12, r12
    46fc:	dd 1c       	adc	r13, r13
    46fe:	ee 1c       	adc	r14, r14
    4700:	ff 1c       	adc	r15, r15
    4702:	cc 0c       	add	r12, r12
    4704:	dd 1c       	adc	r13, r13
    4706:	ee 1c       	adc	r14, r14
    4708:	ff 1c       	adc	r15, r15
    470a:	cc 0c       	add	r12, r12
    470c:	dd 1c       	adc	r13, r13
    470e:	ee 1c       	adc	r14, r14
    4710:	ff 1c       	adc	r15, r15
    4712:	cc 0c       	add	r12, r12
    4714:	dd 1c       	adc	r13, r13
    4716:	ee 1c       	adc	r14, r14
    4718:	ff 1c       	adc	r15, r15
    471a:	89 81       	ldd	r24, Y+1	; 0x01
    471c:	98 2f       	mov	r25, r24
    471e:	9f 77       	andi	r25, 0x7F	; 127
    4720:	c9 0e       	add	r12, r25
    4722:	d1 1c       	adc	r13, r1
    4724:	e1 1c       	adc	r14, r1
    4726:	f1 1c       	adc	r15, r1
  }  while (c & 0x80);
    4728:	88 23       	and	r24, r24
    472a:	84 f2       	brlt	.-96     	; 0x46cc <readVarLen+0x20>
  
  return(value);
}
    472c:	c7 01       	movw	r24, r14
    472e:	b6 01       	movw	r22, r12
    4730:	0f 90       	pop	r0
    4732:	0f 90       	pop	r0
    4734:	0f 90       	pop	r0
    4736:	df 91       	pop	r29
    4738:	cf 91       	pop	r28
    473a:	1f 91       	pop	r17
    473c:	0f 91       	pop	r16
    473e:	ff 90       	pop	r15
    4740:	ef 90       	pop	r14
    4742:	df 90       	pop	r13
    4744:	cf 90       	pop	r12
    4746:	08 95       	ret

00004748 <getEndOfTrack>:

BOOL getEndOfTrack(struct MD_MFTrack *t)
// true if end of track has been reached
{
  return t->_endOfTrack;
}
    4748:	fc 01       	movw	r30, r24
    474a:	85 85       	ldd	r24, Z+13	; 0x0d
    474c:	08 95       	ret

0000474e <syncTime>:

void syncTime(struct MD_MFTrack *t)
{
  t->_elapsedTicks = 0;
    474e:	fc 01       	movw	r30, r24
    4750:	16 86       	std	Z+14, r1	; 0x0e
    4752:	17 86       	std	Z+15, r1	; 0x0f
    4754:	10 8a       	std	Z+16, r1	; 0x10
    4756:	11 8a       	std	Z+17, r1	; 0x11
    4758:	08 95       	ret

0000475a <restartTrack>:
}

void restartTrack(struct MD_MFTrack *t)
// Start playing the track from the beginning again
{
    475a:	fc 01       	movw	r30, r24
  t->_currOffset = 0;
    475c:	11 86       	std	Z+9, r1	; 0x09
    475e:	12 86       	std	Z+10, r1	; 0x0a
    4760:	13 86       	std	Z+11, r1	; 0x0b
    4762:	14 86       	std	Z+12, r1	; 0x0c
  t->_endOfTrack = FALSE;
    4764:	15 86       	std	Z+13, r1	; 0x0d
  t->_elapsedTicks = 0;
    4766:	16 86       	std	Z+14, r1	; 0x0e
    4768:	17 86       	std	Z+15, r1	; 0x0f
    476a:	10 8a       	std	Z+16, r1	; 0x10
    476c:	11 8a       	std	Z+17, r1	; 0x11
    476e:	08 95       	ret

00004770 <resetTrack>:
 * \file
 * \brief Main file for the MFTrack class implementation
 */

void resetTrack(struct MD_MFTrack *t)
{
    4770:	cf 93       	push	r28
    4772:	df 93       	push	r29
    4774:	ec 01       	movw	r28, r24
  t->_length = 0;        // length of track in bytes
    4776:	19 82       	std	Y+1, r1	; 0x01
    4778:	1a 82       	std	Y+2, r1	; 0x02
    477a:	1b 82       	std	Y+3, r1	; 0x03
    477c:	1c 82       	std	Y+4, r1	; 0x04
  t->_startOffset = 0;   // start of the track in bytes from start of file
    477e:	1d 82       	std	Y+5, r1	; 0x05
    4780:	1e 82       	std	Y+6, r1	; 0x06
    4782:	1f 82       	std	Y+7, r1	; 0x07
    4784:	18 86       	std	Y+8, r1	; 0x08
  restartTrack(t);
    4786:	0e 94 ad 23 	call	0x475a	; 0x475a <restartTrack>
  t->_trackId = 255;
    478a:	8f ef       	ldi	r24, 0xFF	; 255
    478c:	88 83       	st	Y, r24
}
    478e:	df 91       	pop	r29
    4790:	cf 91       	pop	r28
    4792:	08 95       	ret

00004794 <closeTrack>:


void closeTrack(struct MD_MFTrack *t)
{
  resetTrack(t);
    4794:	0e 94 b8 23 	call	0x4770	; 0x4770 <resetTrack>
    4798:	08 95       	ret

0000479a <parseEvent>:
  return(TRUE);
}

void parseEvent(struct MD_MIDIFile *mf,struct MD_MFTrack *t)
// process the event from the physical file
{
    479a:	4f 92       	push	r4
    479c:	5f 92       	push	r5
    479e:	6f 92       	push	r6
    47a0:	7f 92       	push	r7
    47a2:	9f 92       	push	r9
    47a4:	af 92       	push	r10
    47a6:	bf 92       	push	r11
    47a8:	cf 92       	push	r12
    47aa:	df 92       	push	r13
    47ac:	ef 92       	push	r14
    47ae:	ff 92       	push	r15
    47b0:	0f 93       	push	r16
    47b2:	1f 93       	push	r17
    47b4:	cf 93       	push	r28
    47b6:	df 93       	push	r29
    47b8:	cd b7       	in	r28, 0x3d	; 61
    47ba:	de b7       	in	r29, 0x3e	; 62
    47bc:	c0 56       	subi	r28, 0x60	; 96
    47be:	d1 09       	sbc	r29, r1
    47c0:	0f b6       	in	r0, 0x3f	; 63
    47c2:	f8 94       	cli
    47c4:	de bf       	out	0x3e, r29	; 62
    47c6:	0f be       	out	0x3f, r0	; 63
    47c8:	cd bf       	out	0x3d, r28	; 61
    47ca:	6c 01       	movw	r12, r24
    47cc:	7b 01       	movw	r14, r22
  uint8_t eType;
  uint8_t bVal;
  uint32_t mLen;
  UINT bRead;
  // now we have to process this event
  f_read(&mf->_fd,&eType,1,&bRead);
    47ce:	8c 01       	movw	r16, r24
    47d0:	0a 5f       	subi	r16, 0xFA	; 250
    47d2:	1f 4f       	sbci	r17, 0xFF	; 255
    47d4:	9e 01       	movw	r18, r28
    47d6:	2d 5f       	subi	r18, 0xFD	; 253
    47d8:	3f 4f       	sbci	r19, 0xFF	; 255
    47da:	41 e0       	ldi	r20, 0x01	; 1
    47dc:	50 e0       	ldi	r21, 0x00	; 0
    47de:	be 01       	movw	r22, r28
    47e0:	6f 5f       	subi	r22, 0xFF	; 255
    47e2:	7f 4f       	sbci	r23, 0xFF	; 255
    47e4:	c8 01       	movw	r24, r16
    47e6:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>

  switch (eType)
    47ea:	89 81       	ldd	r24, Y+1	; 0x01
    47ec:	80 3e       	cpi	r24, 0xE0	; 224
    47ee:	30 f4       	brcc	.+12     	; 0x47fc <parseEvent+0x62>
    47f0:	80 3c       	cpi	r24, 0xC0	; 192
    47f2:	e0 f5       	brcc	.+120    	; 0x486c <parseEvent+0xd2>
    47f4:	80 38       	cpi	r24, 0x80	; 128
    47f6:	08 f4       	brcc	.+2      	; 0x47fa <parseEvent+0x60>
    47f8:	56 c0       	rjmp	.+172    	; 0x48a6 <parseEvent+0x10c>
    47fa:	0b c0       	rjmp	.+22     	; 0x4812 <parseEvent+0x78>
    47fc:	80 3f       	cpi	r24, 0xF0	; 240
    47fe:	09 f4       	brne	.+2      	; 0x4802 <parseEvent+0x68>
    4800:	7e c0       	rjmp	.+252    	; 0x48fe <parseEvent+0x164>
    4802:	38 f0       	brcs	.+14     	; 0x4812 <parseEvent+0x78>
    4804:	87 3f       	cpi	r24, 0xF7	; 247
    4806:	09 f4       	brne	.+2      	; 0x480a <parseEvent+0x70>
    4808:	7a c0       	rjmp	.+244    	; 0x48fe <parseEvent+0x164>
    480a:	8f 3f       	cpi	r24, 0xFF	; 255
    480c:	09 f4       	brne	.+2      	; 0x4810 <parseEvent+0x76>
    480e:	d3 c0       	rjmp	.+422    	; 0x49b6 <parseEvent+0x21c>
    4810:	39 c3       	rjmp	.+1650   	; 0x4e84 <parseEvent+0x6ea>
    // Midi events (status bytes 0x8n - 0xEn) The standard Channel MIDI messages, where 'n' is the MIDI channel (0 - 15).
    // This status byte will be followed by 1 or 2 data bytes, as is usual for the particular MIDI message. 
    // Any valid Channel MIDI message can be included in a MIDI file.
  case 0x80 ... 0xBf: // MIDI message with 2 parameters
  case 0xe0 ... 0xef:
    t->_mev.size = 3;
    4812:	93 e0       	ldi	r25, 0x03	; 3
    4814:	d7 01       	movw	r26, r14
    4816:	54 96       	adiw	r26, 0x14	; 20
    4818:	9c 93       	st	X, r25
    481a:	54 97       	sbiw	r26, 0x14	; 20
    t->_mev.data[0] = eType;
    t->_mev.channel = t->_mev.data[0] & 0xf;  // mask off the channel
    481c:	98 2f       	mov	r25, r24
    481e:	9f 70       	andi	r25, 0x0F	; 15
    4820:	53 96       	adiw	r26, 0x13	; 19
    4822:	9c 93       	st	X, r25
    4824:	53 97       	sbiw	r26, 0x13	; 19
    t->_mev.data[0] = t->_mev.data[0] & 0xf0; // just the command byte
    4826:	80 7f       	andi	r24, 0xF0	; 240
    4828:	55 96       	adiw	r26, 0x15	; 21
    482a:	8c 93       	st	X, r24
    f_read(&mf->_fd,&t->_mev.data[1],1,&bRead);
    482c:	9e 01       	movw	r18, r28
    482e:	2d 5f       	subi	r18, 0xFD	; 253
    4830:	3f 4f       	sbci	r19, 0xFF	; 255
    4832:	41 e0       	ldi	r20, 0x01	; 1
    4834:	50 e0       	ldi	r21, 0x00	; 0
    4836:	b7 01       	movw	r22, r14
    4838:	6a 5e       	subi	r22, 0xEA	; 234
    483a:	7f 4f       	sbci	r23, 0xFF	; 255
    483c:	c8 01       	movw	r24, r16
    483e:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
    f_read(&mf->_fd,&t->_mev.data[2],1,&bRead);
    4842:	9e 01       	movw	r18, r28
    4844:	2d 5f       	subi	r18, 0xFD	; 253
    4846:	3f 4f       	sbci	r19, 0xFF	; 255
    4848:	41 e0       	ldi	r20, 0x01	; 1
    484a:	50 e0       	ldi	r21, 0x00	; 0
    484c:	b7 01       	movw	r22, r14
    484e:	69 5e       	subi	r22, 0xE9	; 233
    4850:	7f 4f       	sbci	r23, 0xFF	; 255
    4852:	c8 01       	movw	r24, r16
    4854:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
    DUMP("[MID2] Ch: ", _mev.channel);
    DUMPX(" Data: ", _mev.data[0]);
    DUMPX(" ", _mev.data[1]);
    DUMPX(" ", _mev.data[2]);	
#if !DUMP_DATA
    if (mf->_midiHandler != NULL)
    4858:	d6 01       	movw	r26, r12
    485a:	ed 91       	ld	r30, X+
    485c:	fc 91       	ld	r31, X
    485e:	30 97       	sbiw	r30, 0x00	; 0
    4860:	09 f4       	brne	.+2      	; 0x4864 <parseEvent+0xca>
    4862:	13 c3       	rjmp	.+1574   	; 0x4e8a <parseEvent+0x6f0>
      (mf->_midiHandler)(&t->_mev);
    4864:	c7 01       	movw	r24, r14
    4866:	42 96       	adiw	r24, 0x12	; 18
    4868:	09 95       	icall
    486a:	0f c3       	rjmp	.+1566   	; 0x4e8a <parseEvent+0x6f0>
#endif // !DUMP_DATA
  break;

  case 0xc0 ... 0xdf: // MIDI message with 1 parameter
    t->_mev.size = 2;
    486c:	92 e0       	ldi	r25, 0x02	; 2
    486e:	f7 01       	movw	r30, r14
    4870:	94 8b       	std	Z+20, r25	; 0x14
    t->_mev.data[0] = eType;
    t->_mev.channel = t->_mev.data[0] & 0xf;  // mask off the channel
    4872:	98 2f       	mov	r25, r24
    4874:	9f 70       	andi	r25, 0x0F	; 15
    4876:	93 8b       	std	Z+19, r25	; 0x13
    t->_mev.data[0] = t->_mev.data[0] & 0xf0; // just the command byte
    4878:	80 7f       	andi	r24, 0xF0	; 240
    487a:	85 8b       	std	Z+21, r24	; 0x15
    f_read(&mf->_fd,&t->_mev.data[1],1,&bRead);
    487c:	9e 01       	movw	r18, r28
    487e:	2d 5f       	subi	r18, 0xFD	; 253
    4880:	3f 4f       	sbci	r19, 0xFF	; 255
    4882:	41 e0       	ldi	r20, 0x01	; 1
    4884:	50 e0       	ldi	r21, 0x00	; 0
    4886:	b7 01       	movw	r22, r14
    4888:	6a 5e       	subi	r22, 0xEA	; 234
    488a:	7f 4f       	sbci	r23, 0xFF	; 255
    488c:	c8 01       	movw	r24, r16
    488e:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
    DUMP("[MID1] Ch: ", _mev.channel);
    DUMPX(" Data: ", _mev.data[0]);
    DUMPX(" ", _mev.data[1]);

#if !DUMP_DATA
    if (mf->_midiHandler != NULL)
    4892:	d6 01       	movw	r26, r12
    4894:	ed 91       	ld	r30, X+
    4896:	fc 91       	ld	r31, X
    4898:	30 97       	sbiw	r30, 0x00	; 0
    489a:	09 f4       	brne	.+2      	; 0x489e <parseEvent+0x104>
    489c:	f6 c2       	rjmp	.+1516   	; 0x4e8a <parseEvent+0x6f0>
      (mf->_midiHandler)(&t->_mev);
    489e:	c7 01       	movw	r24, r14
    48a0:	42 96       	adiw	r24, 0x12	; 18
    48a2:	09 95       	icall
    48a4:	f2 c2       	rjmp	.+1508   	; 0x4e8a <parseEvent+0x6f0>
    // ie SysEx and Meta events clear running status. This means that the _mev structure 
    // should contain the info from the previous message in the structure's channel member 
    // and data[0] (for the MIDI command). 
    // Hence start saving the data at byte data[1] with the byte we have just read (eType) 
    // and use the size member to determine how large the message is (ie, same as before).
    t->_mev.data[1] = eType;
    48a6:	f7 01       	movw	r30, r14
    48a8:	86 8b       	std	Z+22, r24	; 0x16
    for (uint8_t i = 2; i < t->_mev.size; i++)
    48aa:	84 89       	ldd	r24, Z+20	; 0x14
    48ac:	83 30       	cpi	r24, 0x03	; 3
    48ae:	b8 f0       	brcs	.+46     	; 0x48de <parseEvent+0x144>
    48b0:	68 94       	set
    48b2:	bb 24       	eor	r11, r11
    48b4:	b1 f8       	bld	r11, 1
    {
      f_read(&mf->_fd,&t->_mev.data[i],1,&bRead);  // next byte
    48b6:	6b 2d       	mov	r22, r11
    48b8:	70 e0       	ldi	r23, 0x00	; 0
    48ba:	6b 5e       	subi	r22, 0xEB	; 235
    48bc:	7f 4f       	sbci	r23, 0xFF	; 255
    48be:	6e 0d       	add	r22, r14
    48c0:	7f 1d       	adc	r23, r15
    48c2:	9e 01       	movw	r18, r28
    48c4:	2d 5f       	subi	r18, 0xFD	; 253
    48c6:	3f 4f       	sbci	r19, 0xFF	; 255
    48c8:	41 e0       	ldi	r20, 0x01	; 1
    48ca:	50 e0       	ldi	r21, 0x00	; 0
    48cc:	c8 01       	movw	r24, r16
    48ce:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
    // should contain the info from the previous message in the structure's channel member 
    // and data[0] (for the MIDI command). 
    // Hence start saving the data at byte data[1] with the byte we have just read (eType) 
    // and use the size member to determine how large the message is (ie, same as before).
    t->_mev.data[1] = eType;
    for (uint8_t i = 2; i < t->_mev.size; i++)
    48d2:	b3 94       	inc	r11
    48d4:	d7 01       	movw	r26, r14
    48d6:	54 96       	adiw	r26, 0x14	; 20
    48d8:	8c 91       	ld	r24, X
    48da:	b8 16       	cp	r11, r24
    48dc:	60 f3       	brcs	.-40     	; 0x48b6 <parseEvent+0x11c>
      f_read(&mf->_fd,&t->_mev.data[i],1,&bRead);  // next byte
    } 

    DUMP("[MID+] Ch: ", _mev.channel);
    DUMPS(" Data:");
    for (uint8_t i = 0; i<t->_mev.size; i++)
    48de:	88 23       	and	r24, r24
    48e0:	21 f0       	breq	.+8      	; 0x48ea <parseEvent+0x150>
    48e2:	90 e0       	ldi	r25, 0x00	; 0
    48e4:	9f 5f       	subi	r25, 0xFF	; 255
    48e6:	98 13       	cpse	r25, r24
    48e8:	fd cf       	rjmp	.-6      	; 0x48e4 <parseEvent+0x14a>
    {
      DUMPX(" ", t->_mev.data[i]);
    }

#if !DUMP_DATA
    if (mf->_midiHandler != NULL)
    48ea:	d6 01       	movw	r26, r12
    48ec:	ed 91       	ld	r30, X+
    48ee:	fc 91       	ld	r31, X
    48f0:	30 97       	sbiw	r30, 0x00	; 0
    48f2:	09 f4       	brne	.+2      	; 0x48f6 <parseEvent+0x15c>
    48f4:	ca c2       	rjmp	.+1428   	; 0x4e8a <parseEvent+0x6f0>
      (mf->_midiHandler)(&t->_mev);
    48f6:	c7 01       	movw	r24, r14
    48f8:	42 96       	adiw	r24, 0x12	; 18
    48fa:	09 95       	icall
    48fc:	c6 c2       	rjmp	.+1420   	; 0x4e8a <parseEvent+0x6f0>
  {
    sysex_event sev;
    uint16_t index = 0;

    // collect all the bytes until the 0xf7 - boundaries are included in the message
    sev.track = t->_trackId;
    48fe:	f7 01       	movw	r30, r14
    4900:	80 81       	ld	r24, Z
    4902:	8d 83       	std	Y+5, r24	; 0x05
    mLen = readVarLen(&mf->_fd);
    4904:	c8 01       	movw	r24, r16
    4906:	0e 94 56 23 	call	0x46ac	; 0x46ac <readVarLen>
    sev.size = mLen;
    490a:	7f 83       	std	Y+7, r23	; 0x07
    490c:	6e 83       	std	Y+6, r22	; 0x06
    if (eType==0xF0)       // add space for 0xF0
    490e:	29 81       	ldd	r18, Y+1	; 0x01
    4910:	20 3f       	cpi	r18, 0xF0	; 240
    4912:	49 f4       	brne	.+18     	; 0x4926 <parseEvent+0x18c>
    {
      sev.data[index++] = eType;
    4914:	28 87       	std	Y+8, r18	; 0x08
      sev.size++;
    4916:	6f 5f       	subi	r22, 0xFF	; 255
    4918:	7f 4f       	sbci	r23, 0xFF	; 255
    491a:	7f 83       	std	Y+7, r23	; 0x07
    491c:	6e 83       	std	Y+6, r22	; 0x06
    sev.track = t->_trackId;
    mLen = readVarLen(&mf->_fd);
    sev.size = mLen;
    if (eType==0xF0)       // add space for 0xF0
    {
      sev.data[index++] = eType;
    491e:	ee 24       	eor	r14, r14
    4920:	e3 94       	inc	r14
    4922:	f1 2c       	mov	r15, r1
    4924:	02 c0       	rjmp	.+4      	; 0x492a <parseEvent+0x190>
// ---------------------------- SYSEX
  case 0xf0:  // sysex_event = 0xF0 + <len:1> + <data_bytes> + 0xF7 
  case 0xf7:  // sysex_event = 0xF7 + <len:1> + <data_bytes> + 0xF7 
  {
    sysex_event sev;
    uint16_t index = 0;
    4926:	e1 2c       	mov	r14, r1
    4928:	f1 2c       	mov	r15, r1
    if (eType==0xF0)       // add space for 0xF0
    {
      sev.data[index++] = eType;
      sev.size++;
    }
    uint16_t minLen = min(sev.size, ARRAY_SIZE(sev.data));
    492a:	ae 80       	ldd	r10, Y+6	; 0x06
    492c:	bf 80       	ldd	r11, Y+7	; 0x07
    492e:	f3 e3       	ldi	r31, 0x33	; 51
    4930:	af 16       	cp	r10, r31
    4932:	b1 04       	cpc	r11, r1
    4934:	28 f0       	brcs	.+10     	; 0x4940 <parseEvent+0x1a6>
    4936:	0f 2e       	mov	r0, r31
    4938:	f2 e3       	ldi	r31, 0x32	; 50
    493a:	af 2e       	mov	r10, r31
    493c:	b1 2c       	mov	r11, r1
    493e:	f0 2d       	mov	r31, r0
    // The length parameter includes the 0xF7 but not the start boundary.
    // However, it may be bigger than our buffer will allow us to store.
    for (uint16_t i=index; i<minLen; ++i)
    4940:	ea 14       	cp	r14, r10
    4942:	fb 04       	cpc	r15, r11
    4944:	b8 f4       	brcc	.+46     	; 0x4974 <parseEvent+0x1da>
      f_read(&mf->_fd,&sev.data[i],1,&bRead);
    4946:	b7 01       	movw	r22, r14
    4948:	6d 5f       	subi	r22, 0xFD	; 253
    494a:	7f 4f       	sbci	r23, 0xFF	; 255
    494c:	25 e0       	ldi	r18, 0x05	; 5
    494e:	30 e0       	ldi	r19, 0x00	; 0
    4950:	2c 0f       	add	r18, r28
    4952:	3d 1f       	adc	r19, r29
    4954:	62 0f       	add	r22, r18
    4956:	73 1f       	adc	r23, r19
    4958:	9e 01       	movw	r18, r28
    495a:	2d 5f       	subi	r18, 0xFD	; 253
    495c:	3f 4f       	sbci	r19, 0xFF	; 255
    495e:	41 e0       	ldi	r20, 0x01	; 1
    4960:	50 e0       	ldi	r21, 0x00	; 0
    4962:	c8 01       	movw	r24, r16
    4964:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
      sev.size++;
    }
    uint16_t minLen = min(sev.size, ARRAY_SIZE(sev.data));
    // The length parameter includes the 0xF7 but not the start boundary.
    // However, it may be bigger than our buffer will allow us to store.
    for (uint16_t i=index; i<minLen; ++i)
    4968:	3f ef       	ldi	r19, 0xFF	; 255
    496a:	e3 1a       	sub	r14, r19
    496c:	f3 0a       	sbc	r15, r19
    496e:	ea 14       	cp	r14, r10
    4970:	fb 04       	cpc	r15, r11
    4972:	48 f3       	brcs	.-46     	; 0x4946 <parseEvent+0x1ac>
      f_read(&mf->_fd,&sev.data[i],1,&bRead);
    if (sev.size>minLen)
    4974:	8e 81       	ldd	r24, Y+6	; 0x06
    4976:	9f 81       	ldd	r25, Y+7	; 0x07
    4978:	a8 16       	cp	r10, r24
    497a:	b9 06       	cpc	r11, r25
    497c:	80 f4       	brcc	.+32     	; 0x499e <parseEvent+0x204>
      f_lseek(&mf->_fd,f_tell(&mf->_fd) + (sev.size-minLen));
    497e:	8a 19       	sub	r24, r10
    4980:	9b 09       	sbc	r25, r11
    4982:	d6 01       	movw	r26, r12
    4984:	1c 96       	adiw	r26, 0x0c	; 12
    4986:	4d 91       	ld	r20, X+
    4988:	5d 91       	ld	r21, X+
    498a:	6d 91       	ld	r22, X+
    498c:	7c 91       	ld	r23, X
    498e:	1f 97       	sbiw	r26, 0x0f	; 15
    4990:	48 0f       	add	r20, r24
    4992:	59 1f       	adc	r21, r25
    4994:	61 1d       	adc	r22, r1
    4996:	71 1d       	adc	r23, r1
    4998:	c8 01       	movw	r24, r16
    499a:	0e 94 be 14 	call	0x297c	; 0x297c <f_lseek>
      DUMPX(" ", sev.data[i]);
    }
    if (sev.size>minLen)
      DUMPS("...");
#else
    if (mf->_sysexHandler != NULL)
    499e:	d6 01       	movw	r26, r12
    49a0:	12 96       	adiw	r26, 0x02	; 2
    49a2:	ed 91       	ld	r30, X+
    49a4:	fc 91       	ld	r31, X
    49a6:	13 97       	sbiw	r26, 0x03	; 3
    49a8:	30 97       	sbiw	r30, 0x00	; 0
    49aa:	09 f4       	brne	.+2      	; 0x49ae <parseEvent+0x214>
    49ac:	6e c2       	rjmp	.+1244   	; 0x4e8a <parseEvent+0x6f0>
      (mf->_sysexHandler)(&sev);
    49ae:	ce 01       	movw	r24, r28
    49b0:	05 96       	adiw	r24, 0x05	; 5
    49b2:	09 95       	icall
#endif
  }
  break;
    49b4:	6a c2       	rjmp	.+1236   	; 0x4e8a <parseEvent+0x6f0>
// ---------------------------- META
  case 0xff:  // meta_event = 0xFF + <meta_type:1> + <length:v> + <event_data_bytes>
  {
    meta_event mev;
    
	f_read(&mf->_fd,&eType,1,&bRead);
    49b6:	9e 01       	movw	r18, r28
    49b8:	2d 5f       	subi	r18, 0xFD	; 253
    49ba:	3f 4f       	sbci	r19, 0xFF	; 255
    49bc:	41 e0       	ldi	r20, 0x01	; 1
    49be:	50 e0       	ldi	r21, 0x00	; 0
    49c0:	be 01       	movw	r22, r28
    49c2:	6f 5f       	subi	r22, 0xFF	; 255
    49c4:	7f 4f       	sbci	r23, 0xFF	; 255
    49c6:	c8 01       	movw	r24, r16
    49c8:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
    mLen =  readVarLen(&mf->_fd);
    49cc:	c8 01       	movw	r24, r16
    49ce:	0e 94 56 23 	call	0x46ac	; 0x46ac <readVarLen>
    49d2:	2b 01       	movw	r4, r22
    49d4:	3c 01       	movw	r6, r24

    mev.track = t->_trackId;
    49d6:	f7 01       	movw	r30, r14
    49d8:	80 81       	ld	r24, Z
    49da:	8d 83       	std	Y+5, r24	; 0x05
    mev.size = mLen;
    49dc:	5f 82       	std	Y+7, r5	; 0x07
    49de:	4e 82       	std	Y+6, r4	; 0x06
    mev.type = eType;
    49e0:	e9 81       	ldd	r30, Y+1	; 0x01
    49e2:	e8 87       	std	Y+8, r30	; 0x08

    //DUMPX("[META] Type: 0x", eType);
    //DUMP("\tLen: ", mLen);
   // DUMPS("\t");

    switch (eType)
    49e4:	8e 2f       	mov	r24, r30
    49e6:	90 e0       	ldi	r25, 0x00	; 0
    49e8:	80 38       	cpi	r24, 0x80	; 128
    49ea:	91 05       	cpc	r25, r1
    49ec:	08 f0       	brcs	.+2      	; 0x49f0 <parseEvent+0x256>
    49ee:	fe c1       	rjmp	.+1020   	; 0x4dec <parseEvent+0x652>
    49f0:	fc 01       	movw	r30, r24
    49f2:	ec 5c       	subi	r30, 0xCC	; 204
    49f4:	ff 4f       	sbci	r31, 0xFF	; 255
    49f6:	0c 94 ba 37 	jmp	0x6f74	; 0x6f74 <__tablejump2__>
      }
      break;

      case 0x7F:  // Sequencer Specific Metadata
      //DUMPS("SEQ SPECIFIC");
      for (uint8_t i=0; i<mLen; i++)
    49fa:	41 14       	cp	r4, r1
    49fc:	51 04       	cpc	r5, r1
    49fe:	61 04       	cpc	r6, r1
    4a00:	71 04       	cpc	r7, r1
    4a02:	09 f0       	breq	.+2      	; 0x4a06 <parseEvent+0x26c>
    4a04:	dc c1       	rjmp	.+952    	; 0x4dbe <parseEvent+0x624>
    4a06:	33 c2       	rjmp	.+1126   	; 0x4e6e <parseEvent+0x6d4>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x54:  // SMPTE Offset
      //DUMPS("SMPTE OFFSET");
      for (uint8_t i=0; i<mLen; i++)
    4a08:	41 14       	cp	r4, r1
    4a0a:	51 04       	cpc	r5, r1
    4a0c:	61 04       	cpc	r6, r1
    4a0e:	71 04       	cpc	r7, r1
    4a10:	09 f0       	breq	.+2      	; 0x4a14 <parseEvent+0x27a>
    4a12:	be c1       	rjmp	.+892    	; 0x4d90 <parseEvent+0x5f6>
    4a14:	2c c2       	rjmp	.+1112   	; 0x4e6e <parseEvent+0x6d4>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x07:  // Cue Point
      //DUMPS("CUE POINT ");
      for (uint8_t i=0; i<mLen; i++)
    4a16:	41 14       	cp	r4, r1
    4a18:	51 04       	cpc	r5, r1
    4a1a:	61 04       	cpc	r6, r1
    4a1c:	71 04       	cpc	r7, r1
    4a1e:	09 f0       	breq	.+2      	; 0x4a22 <parseEvent+0x288>
    4a20:	a0 c1       	rjmp	.+832    	; 0x4d62 <parseEvent+0x5c8>
    4a22:	25 c2       	rjmp	.+1098   	; 0x4e6e <parseEvent+0x6d4>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x06:  // Marker
      //DUMPS("MARKER ");
      for (uint8_t i=0; i<mLen; i++)
    4a24:	41 14       	cp	r4, r1
    4a26:	51 04       	cpc	r5, r1
    4a28:	61 04       	cpc	r6, r1
    4a2a:	71 04       	cpc	r7, r1
    4a2c:	09 f0       	breq	.+2      	; 0x4a30 <parseEvent+0x296>
    4a2e:	82 c1       	rjmp	.+772    	; 0x4d34 <parseEvent+0x59a>
    4a30:	1e c2       	rjmp	.+1084   	; 0x4e6e <parseEvent+0x6d4>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x05:  // Lyric
      //DUMPS("LYRIC ");
      for (uint8_t i=0; i<mLen; i++)
    4a32:	41 14       	cp	r4, r1
    4a34:	51 04       	cpc	r5, r1
    4a36:	61 04       	cpc	r6, r1
    4a38:	71 04       	cpc	r7, r1
    4a3a:	09 f0       	breq	.+2      	; 0x4a3e <parseEvent+0x2a4>
    4a3c:	64 c1       	rjmp	.+712    	; 0x4d06 <parseEvent+0x56c>
    4a3e:	17 c2       	rjmp	.+1070   	; 0x4e6e <parseEvent+0x6d4>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x04:  // Instrument Name
      //DUMPS("INSTRUMENT ");
      for (uint8_t i=0; i<mLen; i++)
    4a40:	41 14       	cp	r4, r1
    4a42:	51 04       	cpc	r5, r1
    4a44:	61 04       	cpc	r6, r1
    4a46:	71 04       	cpc	r7, r1
    4a48:	09 f0       	breq	.+2      	; 0x4a4c <parseEvent+0x2b2>
    4a4a:	46 c1       	rjmp	.+652    	; 0x4cd8 <parseEvent+0x53e>
    4a4c:	10 c2       	rjmp	.+1056   	; 0x4e6e <parseEvent+0x6d4>
       f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x03:  // Sequence or Track Name
      //DUMPS("SEQ/TRK NAME ");
      for (uint8_t i=0; i<mLen; i++)
    4a4e:	41 14       	cp	r4, r1
    4a50:	51 04       	cpc	r5, r1
    4a52:	61 04       	cpc	r6, r1
    4a54:	71 04       	cpc	r7, r1
    4a56:	09 f0       	breq	.+2      	; 0x4a5a <parseEvent+0x2c0>
    4a58:	28 c1       	rjmp	.+592    	; 0x4caa <parseEvent+0x510>
    4a5a:	09 c2       	rjmp	.+1042   	; 0x4e6e <parseEvent+0x6d4>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x02:  // Copyright Notice
      //DUMPS("COPYRIGHT ");
      for (uint8_t i=0; i<mLen; i++)
    4a5c:	41 14       	cp	r4, r1
    4a5e:	51 04       	cpc	r5, r1
    4a60:	61 04       	cpc	r6, r1
    4a62:	71 04       	cpc	r7, r1
    4a64:	09 f0       	breq	.+2      	; 0x4a68 <parseEvent+0x2ce>
    4a66:	0a c1       	rjmp	.+532    	; 0x4c7c <parseEvent+0x4e2>
    4a68:	02 c2       	rjmp	.+1028   	; 0x4e6e <parseEvent+0x6d4>
      break;

#if SHOW_UNUSED_META
      case 0x01:  // Text
      //DUMPS("TEXT ");
      for (int i=0; i<mLen; i++)
    4a6a:	41 14       	cp	r4, r1
    4a6c:	51 04       	cpc	r5, r1
    4a6e:	61 04       	cpc	r6, r1
    4a70:	71 04       	cpc	r7, r1
    4a72:	09 f0       	breq	.+2      	; 0x4a76 <parseEvent+0x2dc>
    4a74:	e8 c0       	rjmp	.+464    	; 0x4c46 <parseEvent+0x4ac>
    4a76:	fb c1       	rjmp	.+1014   	; 0x4e6e <parseEvent+0x6d4>

    switch (eType)
    {
      case 0x2f:  // End of track
      {
        t->_endOfTrack = TRUE;
    4a78:	81 e0       	ldi	r24, 0x01	; 1
    4a7a:	d7 01       	movw	r26, r14
    4a7c:	1d 96       	adiw	r26, 0x0d	; 13
    4a7e:	8c 93       	st	X, r24
        //DUMPS("END OF TRACK");
      }
      break;
    4a80:	f6 c1       	rjmp	.+1004   	; 0x4e6e <parseEvent+0x6d4>

      case 0x51:  // set Tempo - really the microseconds per tick
      {
        uint32_t value = readMultiByte(&mf->_fd, MB_TRYTE);
    4a82:	63 e0       	ldi	r22, 0x03	; 3
    4a84:	c8 01       	movw	r24, r16
    4a86:	0e 94 15 23 	call	0x462a	; 0x462a <readMultiByte>
    4a8a:	16 2f       	mov	r17, r22
    4a8c:	07 2f       	mov	r16, r23
    4a8e:	f8 2e       	mov	r15, r24
        
        setMicrosecondPerQuarterNote(mf,value);
    4a90:	46 2f       	mov	r20, r22
    4a92:	57 2f       	mov	r21, r23
    4a94:	68 2f       	mov	r22, r24
    4a96:	79 2f       	mov	r23, r25
    4a98:	c6 01       	movw	r24, r12
    4a9a:	0e 94 91 20 	call	0x4122	; 0x4122 <setMicrosecondPerQuarterNote>
        
        mev.data[0] = (value >> 16) & 0xFF;
    4a9e:	f9 86       	std	Y+9, r15	; 0x09
        mev.data[1] = (value >> 8) & 0xFF;
    4aa0:	0a 87       	std	Y+10, r16	; 0x0a
        mev.data[2] = value & 0xFF;
    4aa2:	1b 87       	std	Y+11, r17	; 0x0b
        
        //DUMP("SET TEMPO to ", getTickTime(mf));
        //DUMP(" us/tick or ", getTempo(mf));
        //DUMPS(" beats/min");
      }
      break;
    4aa4:	e4 c1       	rjmp	.+968    	; 0x4e6e <parseEvent+0x6d4>

      case 0x58:  // time signature
      {
        uint8_t n,d;
		f_read(&mf->_fd,&n,1,&bRead);
    4aa6:	9e 01       	movw	r18, r28
    4aa8:	2d 5f       	subi	r18, 0xFD	; 253
    4aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    4aac:	41 e0       	ldi	r20, 0x01	; 1
    4aae:	50 e0       	ldi	r21, 0x00	; 0
    4ab0:	be 01       	movw	r22, r28
    4ab2:	61 5a       	subi	r22, 0xA1	; 161
    4ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ab6:	c8 01       	movw	r24, r16
    4ab8:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
        f_read(&mf->_fd,&d,1,&bRead);
    4abc:	9e 01       	movw	r18, r28
    4abe:	2d 5f       	subi	r18, 0xFD	; 253
    4ac0:	3f 4f       	sbci	r19, 0xFF	; 255
    4ac2:	41 e0       	ldi	r20, 0x01	; 1
    4ac4:	50 e0       	ldi	r21, 0x00	; 0
    4ac6:	be 01       	movw	r22, r28
    4ac8:	65 5c       	subi	r22, 0xC5	; 197
    4aca:	7f 4f       	sbci	r23, 0xFF	; 255
    4acc:	c8 01       	movw	r24, r16
    4ace:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
        
        setTimeSignature(mf,n, 1 << d);  // denominator is 2^n
    4ad2:	41 e0       	ldi	r20, 0x01	; 1
    4ad4:	50 e0       	ldi	r21, 0x00	; 0
    4ad6:	0b ac       	ldd	r0, Y+59	; 0x3b
    4ad8:	02 c0       	rjmp	.+4      	; 0x4ade <parseEvent+0x344>
    4ada:	44 0f       	add	r20, r20
    4adc:	55 1f       	adc	r21, r21
    4ade:	0a 94       	dec	r0
    4ae0:	e2 f7       	brpl	.-8      	; 0x4ada <parseEvent+0x340>
    4ae2:	a0 96       	adiw	r28, 0x20	; 32
    4ae4:	6f ad       	ldd	r22, Y+63	; 0x3f
    4ae6:	a0 97       	sbiw	r28, 0x20	; 32
    4ae8:	c6 01       	movw	r24, r12
    4aea:	0e 94 88 20 	call	0x4110	; 0x4110 <setTimeSignature>
        f_lseek(&mf->_fd,f_tell(&mf->_fd) + (mLen - 2));
    4aee:	f6 01       	movw	r30, r12
    4af0:	44 85       	ldd	r20, Z+12	; 0x0c
    4af2:	55 85       	ldd	r21, Z+13	; 0x0d
    4af4:	66 85       	ldd	r22, Z+14	; 0x0e
    4af6:	77 85       	ldd	r23, Z+15	; 0x0f
    4af8:	42 50       	subi	r20, 0x02	; 2
    4afa:	51 09       	sbc	r21, r1
    4afc:	61 09       	sbc	r22, r1
    4afe:	71 09       	sbc	r23, r1
    4b00:	44 0d       	add	r20, r4
    4b02:	55 1d       	adc	r21, r5
    4b04:	66 1d       	adc	r22, r6
    4b06:	77 1d       	adc	r23, r7
    4b08:	c8 01       	movw	r24, r16
    4b0a:	0e 94 be 14 	call	0x297c	; 0x297c <f_lseek>

        mev.data[0] = n;
    4b0e:	a0 96       	adiw	r28, 0x20	; 32
    4b10:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b12:	a0 97       	sbiw	r28, 0x20	; 32
    4b14:	89 87       	std	Y+9, r24	; 0x09
        mev.data[1] = d;
    4b16:	8b ad       	ldd	r24, Y+59	; 0x3b
    4b18:	8a 87       	std	Y+10, r24	; 0x0a
        mev.data[2] = 0;
    4b1a:	1b 86       	std	Y+11, r1	; 0x0b
        mev.data[3] = 0;
    4b1c:	1c 86       	std	Y+12, r1	; 0x0c

        //DUMP("SET TIME SIGNATURE to ", getTimeSignature(mf) >> 8);
        //DUMP("/", getTimeSignature(mf) & 0xf);
      }
      break;
    4b1e:	a7 c1       	rjmp	.+846    	; 0x4e6e <parseEvent+0x6d4>

      case 0x59:  // Key Signature
      {
        int8_t sf,mi;
		//DUMPS("KEY SIGNATURE");
        f_read(&mf->_fd,&sf,1,&bRead);
    4b20:	9e 01       	movw	r18, r28
    4b22:	2d 5f       	subi	r18, 0xFD	; 253
    4b24:	3f 4f       	sbci	r19, 0xFF	; 255
    4b26:	41 e0       	ldi	r20, 0x01	; 1
    4b28:	50 e0       	ldi	r21, 0x00	; 0
    4b2a:	be 01       	movw	r22, r28
    4b2c:	60 5a       	subi	r22, 0xA0	; 160
    4b2e:	7f 4f       	sbci	r23, 0xFF	; 255
    4b30:	c8 01       	movw	r24, r16
    4b32:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
        f_read(&mf->_fd,&mi,1,&bRead);
    4b36:	9e 01       	movw	r18, r28
    4b38:	2d 5f       	subi	r18, 0xFD	; 253
    4b3a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b3c:	41 e0       	ldi	r20, 0x01	; 1
    4b3e:	50 e0       	ldi	r21, 0x00	; 0
    4b40:	be 01       	movw	r22, r28
    4b42:	61 5a       	subi	r22, 0xA1	; 161
    4b44:	7f 4f       	sbci	r23, 0xFF	; 255
    4b46:	c8 01       	movw	r24, r16
    4b48:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
        const char* aaa[] = {"Cb", "Gb", "Db", "Ab", "Eb", "Bb", "F", "C", "G", "D", "A", "E", "B", "F#", "C#", "G#", "D#", "A#"};
    4b4c:	84 e2       	ldi	r24, 0x24	; 36
    4b4e:	e0 e8       	ldi	r30, 0x80	; 128
    4b50:	f0 e0       	ldi	r31, 0x00	; 0
    4b52:	de 01       	movw	r26, r28
    4b54:	db 96       	adiw	r26, 0x3b	; 59
    4b56:	01 90       	ld	r0, Z+
    4b58:	0d 92       	st	X+, r0
    4b5a:	8a 95       	dec	r24
    4b5c:	e1 f7       	brne	.-8      	; 0x4b56 <parseEvent+0x3bc>

        if (sf >= -7 && sf <= 7) 
    4b5e:	a1 96       	adiw	r28, 0x21	; 33
    4b60:	ef ad       	ldd	r30, Y+63	; 0x3f
    4b62:	a1 97       	sbiw	r28, 0x21	; 33
    4b64:	87 e0       	ldi	r24, 0x07	; 7
    4b66:	8e 0f       	add	r24, r30
    4b68:	8f 30       	cpi	r24, 0x0F	; 15
    4b6a:	08 f0       	brcs	.+2      	; 0x4b6e <parseEvent+0x3d4>
    4b6c:	45 c0       	rjmp	.+138    	; 0x4bf8 <parseEvent+0x45e>
        {
          switch(mi)
    4b6e:	a0 96       	adiw	r28, 0x20	; 32
    4b70:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b72:	a0 97       	sbiw	r28, 0x20	; 32
    4b74:	88 23       	and	r24, r24
    4b76:	19 f0       	breq	.+6      	; 0x4b7e <parseEvent+0x3e4>
    4b78:	81 30       	cpi	r24, 0x01	; 1
    4b7a:	d9 f0       	breq	.+54     	; 0x4bb2 <parseEvent+0x418>
    4b7c:	34 c0       	rjmp	.+104    	; 0x4be6 <parseEvent+0x44c>
          {
            case 0:
              strcpy(mev.chars, aaa[sf+7]);
    4b7e:	0e 2e       	mov	r0, r30
    4b80:	00 0c       	add	r0, r0
    4b82:	ff 0b       	sbc	r31, r31
    4b84:	37 96       	adiw	r30, 0x07	; 7
    4b86:	ee 0f       	add	r30, r30
    4b88:	ff 1f       	adc	r31, r31
    4b8a:	ec 0f       	add	r30, r28
    4b8c:	fd 1f       	adc	r31, r29
    4b8e:	63 ad       	ldd	r22, Z+59	; 0x3b
    4b90:	74 ad       	ldd	r23, Z+60	; 0x3c
    4b92:	8e 01       	movw	r16, r28
    4b94:	07 5f       	subi	r16, 0xF7	; 247
    4b96:	1f 4f       	sbci	r17, 0xFF	; 255
    4b98:	c8 01       	movw	r24, r16
    4b9a:	0e 94 04 39 	call	0x7208	; 0x7208 <strcpy>
              strcat(mev.chars, "M");
    4b9e:	f8 01       	movw	r30, r16
    4ba0:	01 90       	ld	r0, Z+
    4ba2:	00 20       	and	r0, r0
    4ba4:	e9 f7       	brne	.-6      	; 0x4ba0 <parseEvent+0x406>
    4ba6:	31 97       	sbiw	r30, 0x01	; 1
    4ba8:	8d e4       	ldi	r24, 0x4D	; 77
    4baa:	90 e0       	ldi	r25, 0x00	; 0
    4bac:	91 83       	std	Z+1, r25	; 0x01
    4bae:	80 83       	st	Z, r24
              break;
    4bb0:	2b c0       	rjmp	.+86     	; 0x4c08 <parseEvent+0x46e>
            case 1:
              strcpy(mev.chars, aaa[sf+10]);
    4bb2:	0e 2e       	mov	r0, r30
    4bb4:	00 0c       	add	r0, r0
    4bb6:	ff 0b       	sbc	r31, r31
    4bb8:	3a 96       	adiw	r30, 0x0a	; 10
    4bba:	ee 0f       	add	r30, r30
    4bbc:	ff 1f       	adc	r31, r31
    4bbe:	ec 0f       	add	r30, r28
    4bc0:	fd 1f       	adc	r31, r29
    4bc2:	63 ad       	ldd	r22, Z+59	; 0x3b
    4bc4:	74 ad       	ldd	r23, Z+60	; 0x3c
    4bc6:	8e 01       	movw	r16, r28
    4bc8:	07 5f       	subi	r16, 0xF7	; 247
    4bca:	1f 4f       	sbci	r17, 0xFF	; 255
    4bcc:	c8 01       	movw	r24, r16
    4bce:	0e 94 04 39 	call	0x7208	; 0x7208 <strcpy>
              strcat(mev.chars, "m");
    4bd2:	f8 01       	movw	r30, r16
    4bd4:	01 90       	ld	r0, Z+
    4bd6:	00 20       	and	r0, r0
    4bd8:	e9 f7       	brne	.-6      	; 0x4bd4 <parseEvent+0x43a>
    4bda:	31 97       	sbiw	r30, 0x01	; 1
    4bdc:	8d e6       	ldi	r24, 0x6D	; 109
    4bde:	90 e0       	ldi	r25, 0x00	; 0
    4be0:	91 83       	std	Z+1, r25	; 0x01
    4be2:	80 83       	st	Z, r24
              break;
    4be4:	11 c0       	rjmp	.+34     	; 0x4c08 <parseEvent+0x46e>
            default:
              strcpy(mev.chars, "Err"); // error mi
    4be6:	85 e4       	ldi	r24, 0x45	; 69
    4be8:	92 e7       	ldi	r25, 0x72	; 114
    4bea:	9a 87       	std	Y+10, r25	; 0x0a
    4bec:	89 87       	std	Y+9, r24	; 0x09
    4bee:	82 e7       	ldi	r24, 0x72	; 114
    4bf0:	90 e0       	ldi	r25, 0x00	; 0
    4bf2:	9c 87       	std	Y+12, r25	; 0x0c
    4bf4:	8b 87       	std	Y+11, r24	; 0x0b
    4bf6:	08 c0       	rjmp	.+16     	; 0x4c08 <parseEvent+0x46e>
          }
        } else
          strcpy(mev.chars, "Err"); // error sf
    4bf8:	85 e4       	ldi	r24, 0x45	; 69
    4bfa:	92 e7       	ldi	r25, 0x72	; 114
    4bfc:	9a 87       	std	Y+10, r25	; 0x0a
    4bfe:	89 87       	std	Y+9, r24	; 0x09
    4c00:	82 e7       	ldi	r24, 0x72	; 114
    4c02:	90 e0       	ldi	r25, 0x00	; 0
    4c04:	9c 87       	std	Y+12, r25	; 0x0c
    4c06:	8b 87       	std	Y+11, r24	; 0x0b

        mev.size = strlen(mev.chars); // change META length
    4c08:	de 01       	movw	r26, r28
    4c0a:	19 96       	adiw	r26, 0x09	; 9
    4c0c:	fd 01       	movw	r30, r26
    4c0e:	01 90       	ld	r0, Z+
    4c10:	00 20       	and	r0, r0
    4c12:	e9 f7       	brne	.-6      	; 0x4c0e <parseEvent+0x474>
    4c14:	31 97       	sbiw	r30, 0x01	; 1
    4c16:	ea 1b       	sub	r30, r26
    4c18:	fb 0b       	sbc	r31, r27
    4c1a:	ff 83       	std	Y+7, r31	; 0x07
    4c1c:	ee 83       	std	Y+6, r30	; 0x06
        //DUMP(" ", mev.chars);
      }
      break;
    4c1e:	27 c1       	rjmp	.+590    	; 0x4e6e <parseEvent+0x6d4>

      case 0x00:  // Sequence Number
      {
        uint16_t x = readMultiByte(&mf->_fd, MB_WORD);
    4c20:	62 e0       	ldi	r22, 0x02	; 2
    4c22:	c8 01       	movw	r24, r16
    4c24:	0e 94 15 23 	call	0x462a	; 0x462a <readMultiByte>

        mev.data[0] = (x >> 8) & 0xFF;
    4c28:	79 87       	std	Y+9, r23	; 0x09
        mev.data[1] = x & 0xFF;
    4c2a:	6a 87       	std	Y+10, r22	; 0x0a

        //DUMP("SEQUENCE NUMBER ", mev.data[0]);
        //DUMP(" ", mev.data[1]);
      }
      break;
    4c2c:	20 c1       	rjmp	.+576    	; 0x4e6e <parseEvent+0x6d4>

      case 0x20:  // Channel Prefix
      mev.data[0] = readMultiByte(&mf->_fd, MB_BYTE);
    4c2e:	61 e0       	ldi	r22, 0x01	; 1
    4c30:	c8 01       	movw	r24, r16
    4c32:	0e 94 15 23 	call	0x462a	; 0x462a <readMultiByte>
    4c36:	69 87       	std	Y+9, r22	; 0x09
      //DUMP("CHANNEL PREFIX ", mev.data[0]);
      break;
    4c38:	1a c1       	rjmp	.+564    	; 0x4e6e <parseEvent+0x6d4>

      case 0x21:  // Port Prefix
      mev.data[0] = readMultiByte(&mf->_fd, MB_BYTE);
    4c3a:	61 e0       	ldi	r22, 0x01	; 1
    4c3c:	c8 01       	movw	r24, r16
    4c3e:	0e 94 15 23 	call	0x462a	; 0x462a <readMultiByte>
    4c42:	69 87       	std	Y+9, r22	; 0x09
      //DUMP("PORT PREFIX ", mev.data[0]);
      break;
    4c44:	14 c1       	rjmp	.+552    	; 0x4e6e <parseEvent+0x6d4>

#if SHOW_UNUSED_META
      case 0x01:  // Text
      //DUMPS("TEXT ");
      for (int i=0; i<mLen; i++)
    4c46:	e1 2c       	mov	r14, r1
    4c48:	f1 2c       	mov	r15, r1
        f_read(&mf->_fd,&bVal,1,&bRead);
    4c4a:	9e 01       	movw	r18, r28
    4c4c:	2d 5f       	subi	r18, 0xFD	; 253
    4c4e:	3f 4f       	sbci	r19, 0xFF	; 255
    4c50:	41 e0       	ldi	r20, 0x01	; 1
    4c52:	50 e0       	ldi	r21, 0x00	; 0
    4c54:	be 01       	movw	r22, r28
    4c56:	6e 5f       	subi	r22, 0xFE	; 254
    4c58:	7f 4f       	sbci	r23, 0xFF	; 255
    4c5a:	c8 01       	movw	r24, r16
    4c5c:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
      break;

#if SHOW_UNUSED_META
      case 0x01:  // Text
      //DUMPS("TEXT ");
      for (int i=0; i<mLen; i++)
    4c60:	ff ef       	ldi	r31, 0xFF	; 255
    4c62:	ef 1a       	sub	r14, r31
    4c64:	ff 0a       	sbc	r15, r31
    4c66:	c7 01       	movw	r24, r14
    4c68:	0f 2c       	mov	r0, r15
    4c6a:	00 0c       	add	r0, r0
    4c6c:	aa 0b       	sbc	r26, r26
    4c6e:	bb 0b       	sbc	r27, r27
    4c70:	84 15       	cp	r24, r4
    4c72:	95 05       	cpc	r25, r5
    4c74:	a6 05       	cpc	r26, r6
    4c76:	b7 05       	cpc	r27, r7
    4c78:	40 f3       	brcs	.-48     	; 0x4c4a <parseEvent+0x4b0>
    4c7a:	f9 c0       	rjmp	.+498    	; 0x4e6e <parseEvent+0x6d4>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x02:  // Copyright Notice
      //DUMPS("COPYRIGHT ");
      for (uint8_t i=0; i<mLen; i++)
    4c7c:	f1 2c       	mov	r15, r1
       f_read(&mf->_fd,&bVal,1,&bRead);
    4c7e:	9e 01       	movw	r18, r28
    4c80:	2d 5f       	subi	r18, 0xFD	; 253
    4c82:	3f 4f       	sbci	r19, 0xFF	; 255
    4c84:	41 e0       	ldi	r20, 0x01	; 1
    4c86:	50 e0       	ldi	r21, 0x00	; 0
    4c88:	be 01       	movw	r22, r28
    4c8a:	6e 5f       	subi	r22, 0xFE	; 254
    4c8c:	7f 4f       	sbci	r23, 0xFF	; 255
    4c8e:	c8 01       	movw	r24, r16
    4c90:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x02:  // Copyright Notice
      //DUMPS("COPYRIGHT ");
      for (uint8_t i=0; i<mLen; i++)
    4c94:	f3 94       	inc	r15
    4c96:	8f 2d       	mov	r24, r15
    4c98:	90 e0       	ldi	r25, 0x00	; 0
    4c9a:	a0 e0       	ldi	r26, 0x00	; 0
    4c9c:	b0 e0       	ldi	r27, 0x00	; 0
    4c9e:	84 15       	cp	r24, r4
    4ca0:	95 05       	cpc	r25, r5
    4ca2:	a6 05       	cpc	r26, r6
    4ca4:	b7 05       	cpc	r27, r7
    4ca6:	58 f3       	brcs	.-42     	; 0x4c7e <parseEvent+0x4e4>
    4ca8:	e2 c0       	rjmp	.+452    	; 0x4e6e <parseEvent+0x6d4>
       f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x03:  // Sequence or Track Name
      //DUMPS("SEQ/TRK NAME ");
      for (uint8_t i=0; i<mLen; i++)
    4caa:	f1 2c       	mov	r15, r1
        f_read(&mf->_fd,&bVal,1,&bRead);
    4cac:	9e 01       	movw	r18, r28
    4cae:	2d 5f       	subi	r18, 0xFD	; 253
    4cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    4cb2:	41 e0       	ldi	r20, 0x01	; 1
    4cb4:	50 e0       	ldi	r21, 0x00	; 0
    4cb6:	be 01       	movw	r22, r28
    4cb8:	6e 5f       	subi	r22, 0xFE	; 254
    4cba:	7f 4f       	sbci	r23, 0xFF	; 255
    4cbc:	c8 01       	movw	r24, r16
    4cbe:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
       f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x03:  // Sequence or Track Name
      //DUMPS("SEQ/TRK NAME ");
      for (uint8_t i=0; i<mLen; i++)
    4cc2:	f3 94       	inc	r15
    4cc4:	8f 2d       	mov	r24, r15
    4cc6:	90 e0       	ldi	r25, 0x00	; 0
    4cc8:	a0 e0       	ldi	r26, 0x00	; 0
    4cca:	b0 e0       	ldi	r27, 0x00	; 0
    4ccc:	84 15       	cp	r24, r4
    4cce:	95 05       	cpc	r25, r5
    4cd0:	a6 05       	cpc	r26, r6
    4cd2:	b7 05       	cpc	r27, r7
    4cd4:	58 f3       	brcs	.-42     	; 0x4cac <parseEvent+0x512>
    4cd6:	cb c0       	rjmp	.+406    	; 0x4e6e <parseEvent+0x6d4>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x04:  // Instrument Name
      //DUMPS("INSTRUMENT ");
      for (uint8_t i=0; i<mLen; i++)
    4cd8:	f1 2c       	mov	r15, r1
        f_read(&mf->_fd,&bVal,1,&bRead);
    4cda:	9e 01       	movw	r18, r28
    4cdc:	2d 5f       	subi	r18, 0xFD	; 253
    4cde:	3f 4f       	sbci	r19, 0xFF	; 255
    4ce0:	41 e0       	ldi	r20, 0x01	; 1
    4ce2:	50 e0       	ldi	r21, 0x00	; 0
    4ce4:	be 01       	movw	r22, r28
    4ce6:	6e 5f       	subi	r22, 0xFE	; 254
    4ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    4cea:	c8 01       	movw	r24, r16
    4cec:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x04:  // Instrument Name
      //DUMPS("INSTRUMENT ");
      for (uint8_t i=0; i<mLen; i++)
    4cf0:	f3 94       	inc	r15
    4cf2:	8f 2d       	mov	r24, r15
    4cf4:	90 e0       	ldi	r25, 0x00	; 0
    4cf6:	a0 e0       	ldi	r26, 0x00	; 0
    4cf8:	b0 e0       	ldi	r27, 0x00	; 0
    4cfa:	84 15       	cp	r24, r4
    4cfc:	95 05       	cpc	r25, r5
    4cfe:	a6 05       	cpc	r26, r6
    4d00:	b7 05       	cpc	r27, r7
    4d02:	58 f3       	brcs	.-42     	; 0x4cda <parseEvent+0x540>
    4d04:	b4 c0       	rjmp	.+360    	; 0x4e6e <parseEvent+0x6d4>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x05:  // Lyric
      //DUMPS("LYRIC ");
      for (uint8_t i=0; i<mLen; i++)
    4d06:	f1 2c       	mov	r15, r1
        f_read(&mf->_fd,&bVal,1,&bRead);
    4d08:	9e 01       	movw	r18, r28
    4d0a:	2d 5f       	subi	r18, 0xFD	; 253
    4d0c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d0e:	41 e0       	ldi	r20, 0x01	; 1
    4d10:	50 e0       	ldi	r21, 0x00	; 0
    4d12:	be 01       	movw	r22, r28
    4d14:	6e 5f       	subi	r22, 0xFE	; 254
    4d16:	7f 4f       	sbci	r23, 0xFF	; 255
    4d18:	c8 01       	movw	r24, r16
    4d1a:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x05:  // Lyric
      //DUMPS("LYRIC ");
      for (uint8_t i=0; i<mLen; i++)
    4d1e:	f3 94       	inc	r15
    4d20:	8f 2d       	mov	r24, r15
    4d22:	90 e0       	ldi	r25, 0x00	; 0
    4d24:	a0 e0       	ldi	r26, 0x00	; 0
    4d26:	b0 e0       	ldi	r27, 0x00	; 0
    4d28:	84 15       	cp	r24, r4
    4d2a:	95 05       	cpc	r25, r5
    4d2c:	a6 05       	cpc	r26, r6
    4d2e:	b7 05       	cpc	r27, r7
    4d30:	58 f3       	brcs	.-42     	; 0x4d08 <parseEvent+0x56e>
    4d32:	9d c0       	rjmp	.+314    	; 0x4e6e <parseEvent+0x6d4>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x06:  // Marker
      //DUMPS("MARKER ");
      for (uint8_t i=0; i<mLen; i++)
    4d34:	f1 2c       	mov	r15, r1
        f_read(&mf->_fd,&bVal,1,&bRead);
    4d36:	9e 01       	movw	r18, r28
    4d38:	2d 5f       	subi	r18, 0xFD	; 253
    4d3a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d3c:	41 e0       	ldi	r20, 0x01	; 1
    4d3e:	50 e0       	ldi	r21, 0x00	; 0
    4d40:	be 01       	movw	r22, r28
    4d42:	6e 5f       	subi	r22, 0xFE	; 254
    4d44:	7f 4f       	sbci	r23, 0xFF	; 255
    4d46:	c8 01       	movw	r24, r16
    4d48:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x06:  // Marker
      //DUMPS("MARKER ");
      for (uint8_t i=0; i<mLen; i++)
    4d4c:	f3 94       	inc	r15
    4d4e:	8f 2d       	mov	r24, r15
    4d50:	90 e0       	ldi	r25, 0x00	; 0
    4d52:	a0 e0       	ldi	r26, 0x00	; 0
    4d54:	b0 e0       	ldi	r27, 0x00	; 0
    4d56:	84 15       	cp	r24, r4
    4d58:	95 05       	cpc	r25, r5
    4d5a:	a6 05       	cpc	r26, r6
    4d5c:	b7 05       	cpc	r27, r7
    4d5e:	58 f3       	brcs	.-42     	; 0x4d36 <parseEvent+0x59c>
    4d60:	86 c0       	rjmp	.+268    	; 0x4e6e <parseEvent+0x6d4>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x07:  // Cue Point
      //DUMPS("CUE POINT ");
      for (uint8_t i=0; i<mLen; i++)
    4d62:	f1 2c       	mov	r15, r1
        f_read(&mf->_fd,&bVal,1,&bRead);
    4d64:	9e 01       	movw	r18, r28
    4d66:	2d 5f       	subi	r18, 0xFD	; 253
    4d68:	3f 4f       	sbci	r19, 0xFF	; 255
    4d6a:	41 e0       	ldi	r20, 0x01	; 1
    4d6c:	50 e0       	ldi	r21, 0x00	; 0
    4d6e:	be 01       	movw	r22, r28
    4d70:	6e 5f       	subi	r22, 0xFE	; 254
    4d72:	7f 4f       	sbci	r23, 0xFF	; 255
    4d74:	c8 01       	movw	r24, r16
    4d76:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x07:  // Cue Point
      //DUMPS("CUE POINT ");
      for (uint8_t i=0; i<mLen; i++)
    4d7a:	f3 94       	inc	r15
    4d7c:	8f 2d       	mov	r24, r15
    4d7e:	90 e0       	ldi	r25, 0x00	; 0
    4d80:	a0 e0       	ldi	r26, 0x00	; 0
    4d82:	b0 e0       	ldi	r27, 0x00	; 0
    4d84:	84 15       	cp	r24, r4
    4d86:	95 05       	cpc	r25, r5
    4d88:	a6 05       	cpc	r26, r6
    4d8a:	b7 05       	cpc	r27, r7
    4d8c:	58 f3       	brcs	.-42     	; 0x4d64 <parseEvent+0x5ca>
    4d8e:	6f c0       	rjmp	.+222    	; 0x4e6e <parseEvent+0x6d4>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x54:  // SMPTE Offset
      //DUMPS("SMPTE OFFSET");
      for (uint8_t i=0; i<mLen; i++)
    4d90:	f1 2c       	mov	r15, r1
      {
        f_read(&mf->_fd,&bVal,1,&bRead);
    4d92:	9e 01       	movw	r18, r28
    4d94:	2d 5f       	subi	r18, 0xFD	; 253
    4d96:	3f 4f       	sbci	r19, 0xFF	; 255
    4d98:	41 e0       	ldi	r20, 0x01	; 1
    4d9a:	50 e0       	ldi	r21, 0x00	; 0
    4d9c:	be 01       	movw	r22, r28
    4d9e:	6e 5f       	subi	r22, 0xFE	; 254
    4da0:	7f 4f       	sbci	r23, 0xFF	; 255
    4da2:	c8 01       	movw	r24, r16
    4da4:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x54:  // SMPTE Offset
      //DUMPS("SMPTE OFFSET");
      for (uint8_t i=0; i<mLen; i++)
    4da8:	f3 94       	inc	r15
    4daa:	8f 2d       	mov	r24, r15
    4dac:	90 e0       	ldi	r25, 0x00	; 0
    4dae:	a0 e0       	ldi	r26, 0x00	; 0
    4db0:	b0 e0       	ldi	r27, 0x00	; 0
    4db2:	84 15       	cp	r24, r4
    4db4:	95 05       	cpc	r25, r5
    4db6:	a6 05       	cpc	r26, r6
    4db8:	b7 05       	cpc	r27, r7
    4dba:	58 f3       	brcs	.-42     	; 0x4d92 <parseEvent+0x5f8>
    4dbc:	58 c0       	rjmp	.+176    	; 0x4e6e <parseEvent+0x6d4>
      }
      break;

      case 0x7F:  // Sequencer Specific Metadata
      //DUMPS("SEQ SPECIFIC");
      for (uint8_t i=0; i<mLen; i++)
    4dbe:	f1 2c       	mov	r15, r1
      {
        f_read(&mf->_fd,&bVal,1,&bRead);
    4dc0:	9e 01       	movw	r18, r28
    4dc2:	2d 5f       	subi	r18, 0xFD	; 253
    4dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    4dc6:	41 e0       	ldi	r20, 0x01	; 1
    4dc8:	50 e0       	ldi	r21, 0x00	; 0
    4dca:	be 01       	movw	r22, r28
    4dcc:	6e 5f       	subi	r22, 0xFE	; 254
    4dce:	7f 4f       	sbci	r23, 0xFF	; 255
    4dd0:	c8 01       	movw	r24, r16
    4dd2:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
      }
      break;

      case 0x7F:  // Sequencer Specific Metadata
      //DUMPS("SEQ SPECIFIC");
      for (uint8_t i=0; i<mLen; i++)
    4dd6:	f3 94       	inc	r15
    4dd8:	8f 2d       	mov	r24, r15
    4dda:	90 e0       	ldi	r25, 0x00	; 0
    4ddc:	a0 e0       	ldi	r26, 0x00	; 0
    4dde:	b0 e0       	ldi	r27, 0x00	; 0
    4de0:	84 15       	cp	r24, r4
    4de2:	95 05       	cpc	r25, r5
    4de4:	a6 05       	cpc	r26, r6
    4de6:	b7 05       	cpc	r27, r7
    4de8:	58 f3       	brcs	.-42     	; 0x4dc0 <parseEvent+0x626>
    4dea:	41 c0       	rjmp	.+130    	; 0x4e6e <parseEvent+0x6d4>
      break;
#endif // SHOW_UNUSED_META

      default:
      {
        uint8_t minLen = min(ARRAY_SIZE(mev.data), mLen);
    4dec:	84 2d       	mov	r24, r4
    4dee:	23 e3       	ldi	r18, 0x33	; 51
    4df0:	42 16       	cp	r4, r18
    4df2:	51 04       	cpc	r5, r1
    4df4:	61 04       	cpc	r6, r1
    4df6:	71 04       	cpc	r7, r1
    4df8:	08 f0       	brcs	.+2      	; 0x4dfc <parseEvent+0x662>
    4dfa:	82 e3       	ldi	r24, 0x32	; 50
    4dfc:	98 2e       	mov	r9, r24
        
        for (uint8_t i = 0; i < minLen; ++i)
    4dfe:	88 23       	and	r24, r24
    4e00:	d1 f0       	breq	.+52     	; 0x4e36 <parseEvent+0x69c>
    4e02:	7e 01       	movw	r14, r28
    4e04:	39 e0       	ldi	r19, 0x09	; 9
    4e06:	e3 0e       	add	r14, r19
    4e08:	f1 1c       	adc	r15, r1
    4e0a:	81 50       	subi	r24, 0x01	; 1
    4e0c:	de 01       	movw	r26, r28
    4e0e:	a8 0f       	add	r26, r24
    4e10:	b1 1d       	adc	r27, r1
    4e12:	fd 01       	movw	r30, r26
    4e14:	3a 96       	adiw	r30, 0x0a	; 10
    4e16:	5f 01       	movw	r10, r30
          f_read(&mf->_fd,&mev.data[i],1,&bRead); // read next
    4e18:	9e 01       	movw	r18, r28
    4e1a:	2d 5f       	subi	r18, 0xFD	; 253
    4e1c:	3f 4f       	sbci	r19, 0xFF	; 255
    4e1e:	41 e0       	ldi	r20, 0x01	; 1
    4e20:	50 e0       	ldi	r21, 0x00	; 0
    4e22:	b7 01       	movw	r22, r14
    4e24:	c8 01       	movw	r24, r16
    4e26:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
    4e2a:	ff ef       	ldi	r31, 0xFF	; 255
    4e2c:	ef 1a       	sub	r14, r31
    4e2e:	ff 0a       	sbc	r15, r31

      default:
      {
        uint8_t minLen = min(ARRAY_SIZE(mev.data), mLen);
        
        for (uint8_t i = 0; i < minLen; ++i)
    4e30:	ae 14       	cp	r10, r14
    4e32:	bf 04       	cpc	r11, r15
    4e34:	89 f7       	brne	.-30     	; 0x4e18 <parseEvent+0x67e>
          f_read(&mf->_fd,&mev.data[i],1,&bRead); // read next
		 		  
        mev.chars[minLen] = '\0'; // in case it is a string
    4e36:	fe 01       	movw	r30, r28
    4e38:	e9 0d       	add	r30, r9
    4e3a:	f1 1d       	adc	r31, r1
    4e3c:	11 86       	std	Z+9, r1	; 0x09
        if (mLen > ARRAY_SIZE(mev.data))
    4e3e:	23 e3       	ldi	r18, 0x33	; 51
    4e40:	42 16       	cp	r4, r18
    4e42:	51 04       	cpc	r5, r1
    4e44:	61 04       	cpc	r6, r1
    4e46:	71 04       	cpc	r7, r1
    4e48:	90 f0       	brcs	.+36     	; 0x4e6e <parseEvent+0x6d4>
          f_lseek(&mf->_fd,f_tell(&mf->_fd) + (mLen-ARRAY_SIZE(mev.data)));
    4e4a:	d6 01       	movw	r26, r12
    4e4c:	1c 96       	adiw	r26, 0x0c	; 12
    4e4e:	4d 91       	ld	r20, X+
    4e50:	5d 91       	ld	r21, X+
    4e52:	6d 91       	ld	r22, X+
    4e54:	7c 91       	ld	r23, X
    4e56:	1f 97       	sbiw	r26, 0x0f	; 15
    4e58:	42 53       	subi	r20, 0x32	; 50
    4e5a:	51 09       	sbc	r21, r1
    4e5c:	61 09       	sbc	r22, r1
    4e5e:	71 09       	sbc	r23, r1
    4e60:	44 0d       	add	r20, r4
    4e62:	55 1d       	adc	r21, r5
    4e64:	66 1d       	adc	r22, r6
    4e66:	77 1d       	adc	r23, r7
    4e68:	c8 01       	movw	r24, r16
    4e6a:	0e 94 be 14 	call	0x297c	; 0x297c <f_lseek>
  //    DUMPS("IGNORED");
      }
      break;
    }
    if (mf->_metaHandler != NULL)
    4e6e:	d6 01       	movw	r26, r12
    4e70:	14 96       	adiw	r26, 0x04	; 4
    4e72:	ed 91       	ld	r30, X+
    4e74:	fc 91       	ld	r31, X
    4e76:	15 97       	sbiw	r26, 0x05	; 5
    4e78:	30 97       	sbiw	r30, 0x00	; 0
    4e7a:	39 f0       	breq	.+14     	; 0x4e8a <parseEvent+0x6f0>
      (mf->_metaHandler)(&mev);
    4e7c:	ce 01       	movw	r24, r28
    4e7e:	05 96       	adiw	r24, 0x05	; 5
    4e80:	09 95       	icall
  }
  break;
    4e82:	03 c0       	rjmp	.+6      	; 0x4e8a <parseEvent+0x6f0>
  
// ---------------------------- UNKNOWN
  default:
    // stop playing this track as we cannot identify the eType
    t->_endOfTrack = TRUE;
    4e84:	81 e0       	ldi	r24, 0x01	; 1
    4e86:	f7 01       	movw	r30, r14
    4e88:	85 87       	std	Z+13, r24	; 0x0d
    DUMPX("[UKNOWN 0x", eType);
    DUMPS("] Track aborted");
    break;
  }
}
    4e8a:	c0 5a       	subi	r28, 0xA0	; 160
    4e8c:	df 4f       	sbci	r29, 0xFF	; 255
    4e8e:	0f b6       	in	r0, 0x3f	; 63
    4e90:	f8 94       	cli
    4e92:	de bf       	out	0x3e, r29	; 62
    4e94:	0f be       	out	0x3f, r0	; 63
    4e96:	cd bf       	out	0x3d, r28	; 61
    4e98:	df 91       	pop	r29
    4e9a:	cf 91       	pop	r28
    4e9c:	1f 91       	pop	r17
    4e9e:	0f 91       	pop	r16
    4ea0:	ff 90       	pop	r15
    4ea2:	ef 90       	pop	r14
    4ea4:	df 90       	pop	r13
    4ea6:	cf 90       	pop	r12
    4ea8:	bf 90       	pop	r11
    4eaa:	af 90       	pop	r10
    4eac:	9f 90       	pop	r9
    4eae:	7f 90       	pop	r7
    4eb0:	6f 90       	pop	r6
    4eb2:	5f 90       	pop	r5
    4eb4:	4f 90       	pop	r4
    4eb6:	08 95       	ret

00004eb8 <getNextTrackEvent>:
  t->_elapsedTicks = 0;
}

BOOL getNextTrackEvent(struct MD_MIDIFile *mf,struct MD_MFTrack *t, uint16_t tickCount)
// track_event = <time:v> + [<midi_event> | <meta_event> | <sysex_event>]
{
    4eb8:	8f 92       	push	r8
    4eba:	9f 92       	push	r9
    4ebc:	af 92       	push	r10
    4ebe:	bf 92       	push	r11
    4ec0:	cf 92       	push	r12
    4ec2:	df 92       	push	r13
    4ec4:	ef 92       	push	r14
    4ec6:	ff 92       	push	r15
    4ec8:	1f 93       	push	r17
    4eca:	cf 93       	push	r28
    4ecc:	df 93       	push	r29
  uint32_t deltaT;

  // is there anything to process?
  if (t->_endOfTrack)
    4ece:	fb 01       	movw	r30, r22
    4ed0:	15 85       	ldd	r17, Z+13	; 0x0d
    4ed2:	11 11       	cpse	r17, r1
    4ed4:	61 c0       	rjmp	.+194    	; 0x4f98 <getNextTrackEvent+0xe0>
    4ed6:	6a 01       	movw	r12, r20
    4ed8:	eb 01       	movw	r28, r22
    4eda:	7c 01       	movw	r14, r24
    return(FALSE);

  // move the file pointer to where we left off
  f_lseek(&mf->_fd,t->_startOffset+t->_currOffset);  
    4edc:	5c 01       	movw	r10, r24
    4ede:	f6 e0       	ldi	r31, 0x06	; 6
    4ee0:	af 0e       	add	r10, r31
    4ee2:	b1 1c       	adc	r11, r1
    4ee4:	4d 81       	ldd	r20, Y+5	; 0x05
    4ee6:	5e 81       	ldd	r21, Y+6	; 0x06
    4ee8:	6f 81       	ldd	r22, Y+7	; 0x07
    4eea:	78 85       	ldd	r23, Y+8	; 0x08
    4eec:	89 85       	ldd	r24, Y+9	; 0x09
    4eee:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ef0:	ab 85       	ldd	r26, Y+11	; 0x0b
    4ef2:	bc 85       	ldd	r27, Y+12	; 0x0c
    4ef4:	48 0f       	add	r20, r24
    4ef6:	59 1f       	adc	r21, r25
    4ef8:	6a 1f       	adc	r22, r26
    4efa:	7b 1f       	adc	r23, r27
    4efc:	c5 01       	movw	r24, r10
    4efe:	0e 94 be 14 	call	0x297c	; 0x297c <f_lseek>

  // Work out new total elapsed ticks - include the overshoot from
  // last event.
  t->_elapsedTicks += tickCount;
    4f02:	8e 85       	ldd	r24, Y+14	; 0x0e
    4f04:	9f 85       	ldd	r25, Y+15	; 0x0f
    4f06:	a8 89       	ldd	r26, Y+16	; 0x10
    4f08:	b9 89       	ldd	r27, Y+17	; 0x11
    4f0a:	8c 0d       	add	r24, r12
    4f0c:	9d 1d       	adc	r25, r13
    4f0e:	a1 1d       	adc	r26, r1
    4f10:	b1 1d       	adc	r27, r1
    4f12:	8e 87       	std	Y+14, r24	; 0x0e
    4f14:	9f 87       	std	Y+15, r25	; 0x0f
    4f16:	a8 8b       	std	Y+16, r26	; 0x10
    4f18:	b9 8b       	std	Y+17, r27	; 0x11

  // Get the DeltaT from the file in order to see if enough ticks have
  // passed for the event to be active.
  deltaT = readVarLen(&mf->_fd);
    4f1a:	c5 01       	movw	r24, r10
    4f1c:	0e 94 56 23 	call	0x46ac	; 0x46ac <readVarLen>

  // If not enough ticks, just return without saving the file pointer and 
  // we will go back to the same spot next time.
  if (t->_elapsedTicks < deltaT)
    4f20:	8e 84       	ldd	r8, Y+14	; 0x0e
    4f22:	9f 84       	ldd	r9, Y+15	; 0x0f
    4f24:	a8 88       	ldd	r10, Y+16	; 0x10
    4f26:	b9 88       	ldd	r11, Y+17	; 0x11
    4f28:	86 16       	cp	r8, r22
    4f2a:	97 06       	cpc	r9, r23
    4f2c:	a8 06       	cpc	r10, r24
    4f2e:	b9 06       	cpc	r11, r25
    4f30:	a0 f1       	brcs	.+104    	; 0x4f9a <getNextTrackEvent+0xe2>
    return(FALSE);

  // Adjust the total elapsed time to the error against actual DeltaT to avoid 
  // accumulation of errors, as we only check for _elapsedTicks being >= ticks,
  // giving positive biased errors every time.
  t->_elapsedTicks -= deltaT;
    4f32:	a5 01       	movw	r20, r10
    4f34:	94 01       	movw	r18, r8
    4f36:	26 1b       	sub	r18, r22
    4f38:	37 0b       	sbc	r19, r23
    4f3a:	48 0b       	sbc	r20, r24
    4f3c:	59 0b       	sbc	r21, r25
    4f3e:	2e 87       	std	Y+14, r18	; 0x0e
    4f40:	3f 87       	std	Y+15, r19	; 0x0f
    4f42:	48 8b       	std	Y+16, r20	; 0x10
    4f44:	59 8b       	std	Y+17, r21	; 0x11

  DUMP("\ndT: ", deltaT);
  DUMP(" + ", _elapsedTicks);
  DUMPS("\t");

  parseEvent(mf,t);
    4f46:	be 01       	movw	r22, r28
    4f48:	c7 01       	movw	r24, r14
    4f4a:	0e 94 cd 23 	call	0x479a	; 0x479a <parseEvent>

  // remember the offset for next time
  t->_currOffset = mf->_fd.fptr - t->_startOffset;
    4f4e:	f7 01       	movw	r30, r14
    4f50:	84 85       	ldd	r24, Z+12	; 0x0c
    4f52:	95 85       	ldd	r25, Z+13	; 0x0d
    4f54:	a6 85       	ldd	r26, Z+14	; 0x0e
    4f56:	b7 85       	ldd	r27, Z+15	; 0x0f
    4f58:	4d 81       	ldd	r20, Y+5	; 0x05
    4f5a:	5e 81       	ldd	r21, Y+6	; 0x06
    4f5c:	6f 81       	ldd	r22, Y+7	; 0x07
    4f5e:	78 85       	ldd	r23, Y+8	; 0x08
    4f60:	84 1b       	sub	r24, r20
    4f62:	95 0b       	sbc	r25, r21
    4f64:	a6 0b       	sbc	r26, r22
    4f66:	b7 0b       	sbc	r27, r23
    4f68:	89 87       	std	Y+9, r24	; 0x09
    4f6a:	9a 87       	std	Y+10, r25	; 0x0a
    4f6c:	ab 87       	std	Y+11, r26	; 0x0b
    4f6e:	bc 87       	std	Y+12, r27	; 0x0c

  // catch end of track when there is no META event  
  t->_endOfTrack = t->_endOfTrack || (t->_currOffset >= t->_length);
    4f70:	2d 85       	ldd	r18, Y+13	; 0x0d
    4f72:	21 11       	cpse	r18, r1
    4f74:	0d c0       	rjmp	.+26     	; 0x4f90 <getNextTrackEvent+0xd8>
    4f76:	21 e0       	ldi	r18, 0x01	; 1
    4f78:	49 81       	ldd	r20, Y+1	; 0x01
    4f7a:	5a 81       	ldd	r21, Y+2	; 0x02
    4f7c:	6b 81       	ldd	r22, Y+3	; 0x03
    4f7e:	7c 81       	ldd	r23, Y+4	; 0x04
    4f80:	84 17       	cp	r24, r20
    4f82:	95 07       	cpc	r25, r21
    4f84:	a6 07       	cpc	r26, r22
    4f86:	b7 07       	cpc	r27, r23
    4f88:	08 f4       	brcc	.+2      	; 0x4f8c <getNextTrackEvent+0xd4>
    4f8a:	20 e0       	ldi	r18, 0x00	; 0
    4f8c:	82 2f       	mov	r24, r18
    4f8e:	01 c0       	rjmp	.+2      	; 0x4f92 <getNextTrackEvent+0xda>
    4f90:	81 e0       	ldi	r24, 0x01	; 1
    4f92:	8d 87       	std	Y+13, r24	; 0x0d
  if (t->_endOfTrack) DUMPS(" - OUT OF TRACK");

  return(TRUE);
    4f94:	11 e0       	ldi	r17, 0x01	; 1
    4f96:	01 c0       	rjmp	.+2      	; 0x4f9a <getNextTrackEvent+0xe2>
{
  uint32_t deltaT;

  // is there anything to process?
  if (t->_endOfTrack)
    return(FALSE);
    4f98:	10 e0       	ldi	r17, 0x00	; 0
  // catch end of track when there is no META event  
  t->_endOfTrack = t->_endOfTrack || (t->_currOffset >= t->_length);
  if (t->_endOfTrack) DUMPS(" - OUT OF TRACK");

  return(TRUE);
}
    4f9a:	81 2f       	mov	r24, r17
    4f9c:	df 91       	pop	r29
    4f9e:	cf 91       	pop	r28
    4fa0:	1f 91       	pop	r17
    4fa2:	ff 90       	pop	r15
    4fa4:	ef 90       	pop	r14
    4fa6:	df 90       	pop	r13
    4fa8:	cf 90       	pop	r12
    4faa:	bf 90       	pop	r11
    4fac:	af 90       	pop	r10
    4fae:	9f 90       	pop	r9
    4fb0:	8f 90       	pop	r8
    4fb2:	08 95       	ret

00004fb4 <loadTrack>:
    break;
  }
}

int loadTrack(struct MD_MFTrack *t,uint8_t trackId, struct MD_MIDIFile *mf)
{
    4fb4:	8f 92       	push	r8
    4fb6:	9f 92       	push	r9
    4fb8:	af 92       	push	r10
    4fba:	bf 92       	push	r11
    4fbc:	cf 92       	push	r12
    4fbe:	df 92       	push	r13
    4fc0:	ef 92       	push	r14
    4fc2:	ff 92       	push	r15
    4fc4:	0f 93       	push	r16
    4fc6:	1f 93       	push	r17
    4fc8:	cf 93       	push	r28
    4fca:	df 93       	push	r29
    4fcc:	cd b7       	in	r28, 0x3d	; 61
    4fce:	de b7       	in	r29, 0x3e	; 62
    4fd0:	29 97       	sbiw	r28, 0x09	; 9
    4fd2:	0f b6       	in	r0, 0x3f	; 63
    4fd4:	f8 94       	cli
    4fd6:	de bf       	out	0x3e, r29	; 62
    4fd8:	0f be       	out	0x3f, r0	; 63
    4fda:	cd bf       	out	0x3d, r28	; 61
    4fdc:	8c 01       	movw	r16, r24
    4fde:	6a 01       	movw	r12, r20
  uint32_t  dat32;
  //uint16_t  dat16;

  // save the trackid for use later
  t->_trackId = t->_mev.track = trackId;
    4fe0:	fc 01       	movw	r30, r24
    4fe2:	62 8b       	std	Z+18, r22	; 0x12
    4fe4:	60 83       	st	Z, r22
  // Read the Track header
  // track_chunk = "MTrk" + <length:4> + <track_event> [+ <track_event> ...]
  {
    char    h[MTRK_HDR_SIZE+1]; // Header characters + nul
  
    f_read(&mf->_fd,h,MTRK_HDR_SIZE,(UINT *)&dat32);
    4fe6:	7a 01       	movw	r14, r20
    4fe8:	f6 e0       	ldi	r31, 0x06	; 6
    4fea:	ef 0e       	add	r14, r31
    4fec:	f1 1c       	adc	r15, r1
    4fee:	9e 01       	movw	r18, r28
    4ff0:	2f 5f       	subi	r18, 0xFF	; 255
    4ff2:	3f 4f       	sbci	r19, 0xFF	; 255
    4ff4:	44 e0       	ldi	r20, 0x04	; 4
    4ff6:	50 e0       	ldi	r21, 0x00	; 0
    4ff8:	be 01       	movw	r22, r28
    4ffa:	6b 5f       	subi	r22, 0xFB	; 251
    4ffc:	7f 4f       	sbci	r23, 0xFF	; 255
    4ffe:	c7 01       	movw	r24, r14
    5000:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
    h[MTRK_HDR_SIZE] = '\0';
    5004:	19 86       	std	Y+9, r1	; 0x09

    if (strcmp(h, MTRK_HDR) != 0)
    5006:	67 e7       	ldi	r22, 0x77	; 119
    5008:	71 e0       	ldi	r23, 0x01	; 1
    500a:	ce 01       	movw	r24, r28
    500c:	05 96       	adiw	r24, 0x05	; 5
    500e:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <strcmp>
    5012:	89 2b       	or	r24, r25
    5014:	19 f0       	breq	.+6      	; 0x501c <loadTrack+0x68>
      return(0);
    5016:	80 e0       	ldi	r24, 0x00	; 0
    5018:	90 e0       	ldi	r25, 0x00	; 0
    501a:	2b c0       	rjmp	.+86     	; 0x5072 <loadTrack+0xbe>
  }

  // Row read track chunk size and in bytes. This is not really necessary 
  // since the track MUST end with an end of track meta event.
  dat32 = readMultiByte(&mf->_fd, MB_LONG);
    501c:	64 e0       	ldi	r22, 0x04	; 4
    501e:	c7 01       	movw	r24, r14
    5020:	0e 94 15 23 	call	0x462a	; 0x462a <readMultiByte>
    5024:	69 83       	std	Y+1, r22	; 0x01
    5026:	7a 83       	std	Y+2, r23	; 0x02
    5028:	8b 83       	std	Y+3, r24	; 0x03
    502a:	9c 83       	std	Y+4, r25	; 0x04
  t->_length = dat32;
    502c:	f8 01       	movw	r30, r16
    502e:	61 83       	std	Z+1, r22	; 0x01
    5030:	72 83       	std	Z+2, r23	; 0x02
    5032:	83 83       	std	Z+3, r24	; 0x03
    5034:	94 83       	std	Z+4, r25	; 0x04

  // save where we are in the file as this is the start of offset for this track
  t->_startOffset = mf->_fd.fptr;
    5036:	f6 01       	movw	r30, r12
    5038:	84 84       	ldd	r8, Z+12	; 0x0c
    503a:	95 84       	ldd	r9, Z+13	; 0x0d
    503c:	a6 84       	ldd	r10, Z+14	; 0x0e
    503e:	b7 84       	ldd	r11, Z+15	; 0x0f
    5040:	f8 01       	movw	r30, r16
    5042:	85 82       	std	Z+5, r8	; 0x05
    5044:	96 82       	std	Z+6, r9	; 0x06
    5046:	a7 82       	std	Z+7, r10	; 0x07
    5048:	b0 86       	std	Z+8, r11	; 0x08
  t->_currOffset = 0;
    504a:	11 86       	std	Z+9, r1	; 0x09
    504c:	12 86       	std	Z+10, r1	; 0x0a
    504e:	13 86       	std	Z+11, r1	; 0x0b
    5050:	14 86       	std	Z+12, r1	; 0x0c

  // Advance the file pointer to the start of the next track;
  if (f_lseek(&mf->_fd,(t->_startOffset+t->_length)) != FR_OK)
    5052:	ab 01       	movw	r20, r22
    5054:	bc 01       	movw	r22, r24
    5056:	48 0d       	add	r20, r8
    5058:	59 1d       	adc	r21, r9
    505a:	6a 1d       	adc	r22, r10
    505c:	7b 1d       	adc	r23, r11
    505e:	c7 01       	movw	r24, r14
    5060:	0e 94 be 14 	call	0x297c	; 0x297c <f_lseek>
    5064:	81 11       	cpse	r24, r1
    5066:	03 c0       	rjmp	.+6      	; 0x506e <loadTrack+0xba>
    return(1);

  return(-1);
    5068:	8f ef       	ldi	r24, 0xFF	; 255
    506a:	9f ef       	ldi	r25, 0xFF	; 255
    506c:	02 c0       	rjmp	.+4      	; 0x5072 <loadTrack+0xbe>
  t->_startOffset = mf->_fd.fptr;
  t->_currOffset = 0;

  // Advance the file pointer to the start of the next track;
  if (f_lseek(&mf->_fd,(t->_startOffset+t->_length)) != FR_OK)
    return(1);
    506e:	81 e0       	ldi	r24, 0x01	; 1
    5070:	90 e0       	ldi	r25, 0x00	; 0

  return(-1);
}
    5072:	29 96       	adiw	r28, 0x09	; 9
    5074:	0f b6       	in	r0, 0x3f	; 63
    5076:	f8 94       	cli
    5078:	de bf       	out	0x3e, r29	; 62
    507a:	0f be       	out	0x3f, r0	; 63
    507c:	cd bf       	out	0x3d, r28	; 61
    507e:	df 91       	pop	r29
    5080:	cf 91       	pop	r28
    5082:	1f 91       	pop	r17
    5084:	0f 91       	pop	r16
    5086:	ff 90       	pop	r15
    5088:	ef 90       	pop	r14
    508a:	df 90       	pop	r13
    508c:	cf 90       	pop	r12
    508e:	bf 90       	pop	r11
    5090:	af 90       	pop	r10
    5092:	9f 90       	pop	r9
    5094:	8f 90       	pop	r8
    5096:	08 95       	ret

00005098 <midiInit>:
	else	
		sendMidiBuffer(ev->data,ev->size);
}

void midiFileVolume(unsigned char vol){
	fileVolume = vol;
    5098:	81 e0       	ldi	r24, 0x01	; 1
    509a:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <midiState>
    509e:	08 95       	ret

000050a0 <getMidiStruct>:
    50a0:	ee e8       	ldi	r30, 0x8E	; 142
    50a2:	f4 e0       	ldi	r31, 0x04	; 4
    50a4:	20 91 8b 04 	lds	r18, 0x048B	; 0x80048b <midiReadIndex>
    50a8:	22 83       	std	Z+2, r18	; 0x02
    50aa:	67 83       	std	Z+7, r22	; 0x07
    50ac:	70 87       	std	Z+8, r23	; 0x08
    50ae:	81 87       	std	Z+9, r24	; 0x09
    50b0:	92 87       	std	Z+10, r25	; 0x0a
    50b2:	cf 01       	movw	r24, r30
    50b4:	08 95       	ret

000050b6 <sendMidiMessage>:
    50b6:	cf 92       	push	r12
    50b8:	df 92       	push	r13
    50ba:	ef 92       	push	r14
    50bc:	ff 92       	push	r15
    50be:	0f 93       	push	r16
    50c0:	1f 93       	push	r17
    50c2:	cf 93       	push	r28
    50c4:	df 93       	push	r29
    50c6:	08 2f       	mov	r16, r24
    50c8:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <work_event+0x3>
    50cc:	80 7f       	andi	r24, 0xF0	; 240
    50ce:	80 39       	cpi	r24, 0x90	; 144
    50d0:	01 f5       	brne	.+64     	; 0x5112 <sendMidiMessage+0x5c>
    50d2:	ce e8       	ldi	r28, 0x8E	; 142
    50d4:	d4 e0       	ldi	r29, 0x04	; 4
    50d6:	60 91 8d 04 	lds	r22, 0x048D	; 0x80048d <playVolume>
    50da:	70 e0       	ldi	r23, 0x00	; 0
    50dc:	80 e0       	ldi	r24, 0x00	; 0
    50de:	90 e0       	ldi	r25, 0x00	; 0
    50e0:	0e 94 6a 36 	call	0x6cd4	; 0x6cd4 <__floatunsisf>
    50e4:	20 e0       	ldi	r18, 0x00	; 0
    50e6:	30 e0       	ldi	r19, 0x00	; 0
    50e8:	4f e7       	ldi	r20, 0x7F	; 127
    50ea:	53 e4       	ldi	r21, 0x43	; 67
    50ec:	0e 94 c9 35 	call	0x6b92	; 0x6b92 <__divsf3>
    50f0:	6b 01       	movw	r12, r22
    50f2:	7c 01       	movw	r14, r24
    50f4:	6d 81       	ldd	r22, Y+5	; 0x05
    50f6:	70 e0       	ldi	r23, 0x00	; 0
    50f8:	80 e0       	ldi	r24, 0x00	; 0
    50fa:	90 e0       	ldi	r25, 0x00	; 0
    50fc:	0e 94 6c 36 	call	0x6cd8	; 0x6cd8 <__floatsisf>
    5100:	9b 01       	movw	r18, r22
    5102:	ac 01       	movw	r20, r24
    5104:	c7 01       	movw	r24, r14
    5106:	b6 01       	movw	r22, r12
    5108:	0e 94 f8 36 	call	0x6df0	; 0x6df0 <__mulsf3>
    510c:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <__fixunssfsi>
    5110:	6d 83       	std	Y+5, r22	; 0x05
    5112:	00 23       	and	r16, r16
    5114:	61 f0       	breq	.+24     	; 0x512e <sendMidiMessage+0x78>
    5116:	c1 e9       	ldi	r28, 0x91	; 145
    5118:	d4 e0       	ldi	r29, 0x04	; 4
    511a:	01 50       	subi	r16, 0x01	; 1
    511c:	10 e0       	ldi	r17, 0x00	; 0
    511e:	0e 56       	subi	r16, 0x6E	; 110
    5120:	1b 4f       	sbci	r17, 0xFB	; 251
    5122:	89 91       	ld	r24, Y+
    5124:	0e 94 09 35 	call	0x6a12	; 0x6a12 <uartSendByte>
    5128:	c0 17       	cp	r28, r16
    512a:	d1 07       	cpc	r29, r17
    512c:	d1 f7       	brne	.-12     	; 0x5122 <sendMidiMessage+0x6c>
    512e:	df 91       	pop	r29
    5130:	cf 91       	pop	r28
    5132:	1f 91       	pop	r17
    5134:	0f 91       	pop	r16
    5136:	ff 90       	pop	r15
    5138:	ef 90       	pop	r14
    513a:	df 90       	pop	r13
    513c:	cf 90       	pop	r12
    513e:	08 95       	ret

00005140 <sendMidiBuffer>:
    5140:	0f 93       	push	r16
    5142:	1f 93       	push	r17
    5144:	cf 93       	push	r28
    5146:	df 93       	push	r29
    5148:	66 23       	and	r22, r22
    514a:	71 f0       	breq	.+28     	; 0x5168 <sendMidiBuffer+0x28>
    514c:	ec 01       	movw	r28, r24
    514e:	61 50       	subi	r22, 0x01	; 1
    5150:	06 2f       	mov	r16, r22
    5152:	10 e0       	ldi	r17, 0x00	; 0
    5154:	0f 5f       	subi	r16, 0xFF	; 255
    5156:	1f 4f       	sbci	r17, 0xFF	; 255
    5158:	08 0f       	add	r16, r24
    515a:	19 1f       	adc	r17, r25
    515c:	89 91       	ld	r24, Y+
    515e:	0e 94 09 35 	call	0x6a12	; 0x6a12 <uartSendByte>
    5162:	c0 17       	cp	r28, r16
    5164:	d1 07       	cpc	r29, r17
    5166:	d1 f7       	brne	.-12     	; 0x515c <sendMidiBuffer+0x1c>
    5168:	df 91       	pop	r29
    516a:	cf 91       	pop	r28
    516c:	1f 91       	pop	r17
    516e:	0f 91       	pop	r16
    5170:	08 95       	ret

00005172 <sendProgramChange>:
    5172:	1f 93       	push	r17
    5174:	cf 93       	push	r28
    5176:	df 93       	push	r29
    5178:	16 2f       	mov	r17, r22
    517a:	ce e8       	ldi	r28, 0x8E	; 142
    517c:	d4 e0       	ldi	r29, 0x04	; 4
    517e:	90 eb       	ldi	r25, 0xB0	; 176
    5180:	9b 83       	std	Y+3, r25	; 0x03
    5182:	1c 82       	std	Y+4, r1	; 0x04
    5184:	8d 83       	std	Y+5, r24	; 0x05
    5186:	83 e0       	ldi	r24, 0x03	; 3
    5188:	0e 94 5b 28 	call	0x50b6	; 0x50b6 <sendMidiMessage>
    518c:	80 ec       	ldi	r24, 0xC0	; 192
    518e:	8b 83       	std	Y+3, r24	; 0x03
    5190:	1c 83       	std	Y+4, r17	; 0x04
    5192:	82 e0       	ldi	r24, 0x02	; 2
    5194:	0e 94 5b 28 	call	0x50b6	; 0x50b6 <sendMidiMessage>
    5198:	df 91       	pop	r29
    519a:	cf 91       	pop	r28
    519c:	1f 91       	pop	r17
    519e:	08 95       	ret

000051a0 <commandLen>:
    51a0:	e8 2f       	mov	r30, r24
    51a2:	e0 7f       	andi	r30, 0xF0	; 240
    51a4:	e0 3f       	cpi	r30, 0xF0	; 240
    51a6:	09 f4       	brne	.+2      	; 0x51aa <commandLen+0xa>
    51a8:	e8 2f       	mov	r30, r24
    51aa:	8e 2f       	mov	r24, r30
    51ac:	90 e0       	ldi	r25, 0x00	; 0
    51ae:	fc 01       	movw	r30, r24
    51b0:	e0 58       	subi	r30, 0x80	; 128
    51b2:	f1 09       	sbc	r31, r1
    51b4:	e0 38       	cpi	r30, 0x80	; 128
    51b6:	f1 05       	cpc	r31, r1
    51b8:	40 f4       	brcc	.+16     	; 0x51ca <commandLen+0x2a>
    51ba:	ec 54       	subi	r30, 0x4C	; 76
    51bc:	ff 4f       	sbci	r31, 0xFF	; 255
    51be:	0c 94 ba 37 	jmp	0x6f74	; 0x6f74 <__tablejump2__>
    51c2:	82 e0       	ldi	r24, 0x02	; 2
    51c4:	08 95       	ret
    51c6:	83 e0       	ldi	r24, 0x03	; 3
    51c8:	08 95       	ret
    51ca:	80 e0       	ldi	r24, 0x00	; 0
    51cc:	08 95       	ret
    51ce:	81 e0       	ldi	r24, 0x01	; 1
    51d0:	08 95       	ret

000051d2 <readMidiMessage>:
    51d2:	ff 92       	push	r15
    51d4:	0f 93       	push	r16
    51d6:	1f 93       	push	r17
    51d8:	cf 93       	push	r28
    51da:	df 93       	push	r29
    51dc:	d8 2f       	mov	r29, r24
    51de:	8b 01       	movw	r16, r22
    51e0:	c0 91 8a 04 	lds	r28, 0x048A	; 0x80048a <midiState>
    51e4:	c2 30       	cpi	r28, 0x02	; 2
    51e6:	51 f1       	breq	.+84     	; 0x523c <readMidiMessage+0x6a>
    51e8:	c3 30       	cpi	r28, 0x03	; 3
    51ea:	09 f4       	brne	.+2      	; 0x51ee <readMidiMessage+0x1c>
    51ec:	53 c0       	rjmp	.+166    	; 0x5294 <readMidiMessage+0xc2>
    51ee:	c1 30       	cpi	r28, 0x01	; 1
    51f0:	09 f0       	breq	.+2      	; 0x51f4 <readMidiMessage+0x22>
    51f2:	57 c0       	rjmp	.+174    	; 0x52a2 <readMidiMessage+0xd0>
    51f4:	80 3f       	cpi	r24, 0xF0	; 240
    51f6:	09 f4       	brne	.+2      	; 0x51fa <readMidiMessage+0x28>
    51f8:	56 c0       	rjmp	.+172    	; 0x52a6 <readMidiMessage+0xd4>
    51fa:	0e 94 d0 28 	call	0x51a0	; 0x51a0 <commandLen>
    51fe:	81 30       	cpi	r24, 0x01	; 1
    5200:	39 f4       	brne	.+14     	; 0x5210 <readMidiMessage+0x3e>
    5202:	f8 01       	movw	r30, r16
    5204:	80 83       	st	Z, r24
    5206:	d0 93 91 04 	sts	0x0491, r29	; 0x800491 <work_event+0x3>
    520a:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <noteEvent>
    520e:	50 c0       	rjmp	.+160    	; 0x52b0 <readMidiMessage+0xde>
    5210:	81 11       	cpse	r24, r1
    5212:	0a c0       	rjmp	.+20     	; 0x5228 <readMidiMessage+0x56>
    5214:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <noteEvent>
    5218:	81 30       	cpi	r24, 0x01	; 1
    521a:	59 f4       	brne	.+22     	; 0x5232 <readMidiMessage+0x60>
    521c:	d0 93 92 04 	sts	0x0492, r29	; 0x800492 <work_event+0x4>
    5220:	82 e0       	ldi	r24, 0x02	; 2
    5222:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <midiReadIndex>
    5226:	05 c0       	rjmp	.+10     	; 0x5232 <readMidiMessage+0x60>
    5228:	d0 93 91 04 	sts	0x0491, r29	; 0x800491 <work_event+0x3>
    522c:	81 e0       	ldi	r24, 0x01	; 1
    522e:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <midiReadIndex>
    5232:	82 e0       	ldi	r24, 0x02	; 2
    5234:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <midiState>
    5238:	c0 e0       	ldi	r28, 0x00	; 0
    523a:	3a c0       	rjmp	.+116    	; 0x52b0 <readMidiMessage+0xde>
    523c:	0e 94 d0 28 	call	0x51a0	; 0x51a0 <commandLen>
    5240:	c8 2f       	mov	r28, r24
    5242:	88 23       	and	r24, r24
    5244:	39 f0       	breq	.+14     	; 0x5254 <readMidiMessage+0x82>
    5246:	81 e0       	ldi	r24, 0x01	; 1
    5248:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <midiState>
    524c:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <noteEvent>
    5250:	c0 e0       	ldi	r28, 0x00	; 0
    5252:	2e c0       	rjmp	.+92     	; 0x52b0 <readMidiMessage+0xde>
    5254:	e0 91 8b 04 	lds	r30, 0x048B	; 0x80048b <midiReadIndex>
    5258:	ff 24       	eor	r15, r15
    525a:	f3 94       	inc	r15
    525c:	fe 0e       	add	r15, r30
    525e:	f0 92 8b 04 	sts	0x048B, r15	; 0x80048b <midiReadIndex>
    5262:	f0 e0       	ldi	r31, 0x00	; 0
    5264:	e2 57       	subi	r30, 0x72	; 114
    5266:	fb 4f       	sbci	r31, 0xFB	; 251
    5268:	d3 83       	std	Z+3, r29	; 0x03
    526a:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <work_event+0x3>
    526e:	80 7f       	andi	r24, 0xF0	; 240
    5270:	0e 94 d0 28 	call	0x51a0	; 0x51a0 <commandLen>
    5274:	f8 12       	cpse	r15, r24
    5276:	1c c0       	rjmp	.+56     	; 0x52b0 <readMidiMessage+0xde>
    5278:	81 e0       	ldi	r24, 0x01	; 1
    527a:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <midiState>
    527e:	f8 01       	movw	r30, r16
    5280:	f0 82       	st	Z, r15
    5282:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <work_event+0x3>
    5286:	80 79       	andi	r24, 0x90	; 144
    5288:	81 f0       	breq	.+32     	; 0x52aa <readMidiMessage+0xd8>
    528a:	81 e0       	ldi	r24, 0x01	; 1
    528c:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <noteEvent>
    5290:	c1 e0       	ldi	r28, 0x01	; 1
    5292:	0e c0       	rjmp	.+28     	; 0x52b0 <readMidiMessage+0xde>
    5294:	87 3f       	cpi	r24, 0xF7	; 247
    5296:	59 f4       	brne	.+22     	; 0x52ae <readMidiMessage+0xdc>
    5298:	81 e0       	ldi	r24, 0x01	; 1
    529a:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <midiState>
    529e:	c0 e0       	ldi	r28, 0x00	; 0
    52a0:	07 c0       	rjmp	.+14     	; 0x52b0 <readMidiMessage+0xde>
    52a2:	c0 e0       	ldi	r28, 0x00	; 0
    52a4:	05 c0       	rjmp	.+10     	; 0x52b0 <readMidiMessage+0xde>
    52a6:	c0 e0       	ldi	r28, 0x00	; 0
    52a8:	03 c0       	rjmp	.+6      	; 0x52b0 <readMidiMessage+0xde>
    52aa:	c1 e0       	ldi	r28, 0x01	; 1
    52ac:	01 c0       	rjmp	.+2      	; 0x52b0 <readMidiMessage+0xde>
    52ae:	c0 e0       	ldi	r28, 0x00	; 0
    52b0:	8c 2f       	mov	r24, r28
    52b2:	df 91       	pop	r29
    52b4:	cf 91       	pop	r28
    52b6:	1f 91       	pop	r17
    52b8:	0f 91       	pop	r16
    52ba:	ff 90       	pop	r15
    52bc:	08 95       	ret

000052be <metaFun>:
    52be:	08 95       	ret

000052c0 <sysexFun>:
    52c0:	08 95       	ret

000052c2 <midiFun>:
    52c2:	fc 01       	movw	r30, r24
    52c4:	23 81       	ldd	r18, Z+3	; 0x03
    52c6:	30 e8       	ldi	r19, 0x80	; 128
    52c8:	32 0f       	add	r19, r18
    52ca:	31 36       	cpi	r19, 0x61	; 97
    52cc:	40 f4       	brcc	.+16     	; 0x52de <midiFun+0x1c>
    52ce:	31 81       	ldd	r19, Z+1	; 0x01
    52d0:	23 2b       	or	r18, r19
    52d2:	23 83       	std	Z+3, r18	; 0x03
    52d4:	62 81       	ldd	r22, Z+2	; 0x02
    52d6:	03 96       	adiw	r24, 0x03	; 3
    52d8:	0e 94 a0 28 	call	0x5140	; 0x5140 <sendMidiBuffer>
    52dc:	08 95       	ret
    52de:	fc 01       	movw	r30, r24
    52e0:	62 81       	ldd	r22, Z+2	; 0x02
    52e2:	03 96       	adiw	r24, 0x03	; 3
    52e4:	0e 94 a0 28 	call	0x5140	; 0x5140 <sendMidiBuffer>
    52e8:	08 95       	ret

000052ea <midiPlayVolume>:
}

void midiPlayVolume(unsigned char vol){	
	playVolume = vol;
    52ea:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <playVolume>
    52ee:	08 95       	ret

000052f0 <rcvr_spi>:
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    52f0:	8f ef       	ldi	r24, 0xFF	; 255
    52f2:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    52f4:	77 9b       	sbis	0x0e, 7	; 14
    52f6:	fe cf       	rjmp	.-4      	; 0x52f4 <rcvr_spi+0x4>
	return SPDR;
    52f8:	8f b1       	in	r24, 0x0f	; 15
}
    52fa:	08 95       	ret

000052fc <wait_ready>:
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
    52fc:	82 e3       	ldi	r24, 0x32	; 50
    52fe:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <Timer2>
	rcvr_spi();
    5302:	0e 94 78 29 	call	0x52f0	; 0x52f0 <rcvr_spi>
	do
		if (rcvr_spi() == 0xFF) return 1;
    5306:	0e 94 78 29 	call	0x52f0	; 0x52f0 <rcvr_spi>
    530a:	8f 3f       	cpi	r24, 0xFF	; 255
    530c:	39 f0       	breq	.+14     	; 0x531c <wait_ready+0x20>
	while (Timer2);
    530e:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <Timer2>
    5312:	81 11       	cpse	r24, r1
    5314:	f8 cf       	rjmp	.-16     	; 0x5306 <wait_ready+0xa>

	return 0;
    5316:	80 e0       	ldi	r24, 0x00	; 0
    5318:	90 e0       	ldi	r25, 0x00	; 0
    531a:	08 95       	ret
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		if (rcvr_spi() == 0xFF) return 1;
    531c:	81 e0       	ldi	r24, 0x01	; 1
    531e:	90 e0       	ldi	r25, 0x00	; 0
	while (Timer2);

	return 0;
}
    5320:	08 95       	ret

00005322 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    5322:	c4 9a       	sbi	0x18, 4	; 24
	rcvr_spi();
    5324:	0e 94 78 29 	call	0x52f0	; 0x52f0 <rcvr_spi>
    5328:	08 95       	ret

0000532a <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
    532a:	cf 93       	push	r28
    532c:	df 93       	push	r29
	CS_LOW();
    532e:	c4 98       	cbi	0x18, 4	; 24
	if (!wait_ready()) {
    5330:	0e 94 7e 29 	call	0x52fc	; 0x52fc <wait_ready>
    5334:	ec 01       	movw	r28, r24
    5336:	89 2b       	or	r24, r25
    5338:	19 f4       	brne	.+6      	; 0x5340 <select+0x16>
		deselect();
    533a:	0e 94 91 29 	call	0x5322	; 0x5322 <deselect>
		return 0;
    533e:	02 c0       	rjmp	.+4      	; 0x5344 <select+0x1a>
	}
	return 1;
    5340:	c1 e0       	ldi	r28, 0x01	; 1
    5342:	d0 e0       	ldi	r29, 0x00	; 0
}
    5344:	ce 01       	movw	r24, r28
    5346:	df 91       	pop	r29
    5348:	cf 91       	pop	r28
    534a:	08 95       	ret

0000534c <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    534c:	0f 93       	push	r16
    534e:	1f 93       	push	r17
    5350:	cf 93       	push	r28
    5352:	df 93       	push	r29
    5354:	08 2f       	mov	r16, r24
    5356:	19 2f       	mov	r17, r25
    5358:	eb 01       	movw	r28, r22
	BYTE token;


	Timer1 = 20;
    535a:	84 e1       	ldi	r24, 0x14	; 20
    535c:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <Timer1>
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
    5360:	0e 94 78 29 	call	0x52f0	; 0x52f0 <rcvr_spi>
	} while ((token == 0xFF) && Timer1);
    5364:	8f 3f       	cpi	r24, 0xFF	; 255
    5366:	39 f4       	brne	.+14     	; 0x5376 <rcvr_datablock+0x2a>
    5368:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Timer1>
    536c:	81 11       	cpse	r24, r1
    536e:	f8 cf       	rjmp	.-16     	; 0x5360 <rcvr_datablock+0x14>
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
    5370:	80 e0       	ldi	r24, 0x00	; 0
    5372:	90 e0       	ldi	r25, 0x00	; 0
    5374:	2c c0       	rjmp	.+88     	; 0x53ce <rcvr_datablock+0x82>
    5376:	8e 3f       	cpi	r24, 0xFE	; 254
    5378:	41 f5       	brne	.+80     	; 0x53ca <rcvr_datablock+0x7e>
    537a:	e0 2f       	mov	r30, r16
    537c:	f1 2f       	mov	r31, r17

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
    537e:	8f ef       	ldi	r24, 0xFF	; 255
    5380:	8f b9       	out	0x0f, r24	; 15
    5382:	77 9b       	sbis	0x0e, 7	; 14
    5384:	fe cf       	rjmp	.-4      	; 0x5382 <rcvr_datablock+0x36>
    5386:	9f b1       	in	r25, 0x0f	; 15
    5388:	df 01       	movw	r26, r30
    538a:	90 83       	st	Z, r25
		rcvr_spi_m(buff++);
    538c:	8f b9       	out	0x0f, r24	; 15
    538e:	77 9b       	sbis	0x0e, 7	; 14
    5390:	fe cf       	rjmp	.-4      	; 0x538e <rcvr_datablock+0x42>
    5392:	9f b1       	in	r25, 0x0f	; 15
    5394:	11 96       	adiw	r26, 0x01	; 1
    5396:	9c 93       	st	X, r25
    5398:	11 97       	sbiw	r26, 0x01	; 1
		rcvr_spi_m(buff++);
    539a:	8f b9       	out	0x0f, r24	; 15
    539c:	77 9b       	sbis	0x0e, 7	; 14
    539e:	fe cf       	rjmp	.-4      	; 0x539c <rcvr_datablock+0x50>
    53a0:	9f b1       	in	r25, 0x0f	; 15
    53a2:	12 96       	adiw	r26, 0x02	; 2
    53a4:	9c 93       	st	X, r25
    53a6:	12 97       	sbiw	r26, 0x02	; 2
		rcvr_spi_m(buff++);
    53a8:	8f b9       	out	0x0f, r24	; 15
    53aa:	77 9b       	sbis	0x0e, 7	; 14
    53ac:	fe cf       	rjmp	.-4      	; 0x53aa <rcvr_datablock+0x5e>
    53ae:	9f b1       	in	r25, 0x0f	; 15
    53b0:	13 96       	adiw	r26, 0x03	; 3
    53b2:	9c 93       	st	X, r25
	} while (btr -= 4);
    53b4:	24 97       	sbiw	r28, 0x04	; 4
    53b6:	34 96       	adiw	r30, 0x04	; 4
    53b8:	20 97       	sbiw	r28, 0x00	; 0
    53ba:	11 f7       	brne	.-60     	; 0x5380 <rcvr_datablock+0x34>
	rcvr_spi();						/* Discard CRC */
    53bc:	0e 94 78 29 	call	0x52f0	; 0x52f0 <rcvr_spi>
	rcvr_spi();
    53c0:	0e 94 78 29 	call	0x52f0	; 0x52f0 <rcvr_spi>

	return 1;						/* Return with success */
    53c4:	81 e0       	ldi	r24, 0x01	; 1
    53c6:	90 e0       	ldi	r25, 0x00	; 0
    53c8:	02 c0       	rjmp	.+4      	; 0x53ce <rcvr_datablock+0x82>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
    53ca:	80 e0       	ldi	r24, 0x00	; 0
    53cc:	90 e0       	ldi	r25, 0x00	; 0
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return 1;						/* Return with success */
}
    53ce:	df 91       	pop	r29
    53d0:	cf 91       	pop	r28
    53d2:	1f 91       	pop	r17
    53d4:	0f 91       	pop	r16
    53d6:	08 95       	ret

000053d8 <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    53d8:	0f 93       	push	r16
    53da:	1f 93       	push	r17
    53dc:	cf 93       	push	r28
    53de:	8c 01       	movw	r16, r24
    53e0:	c6 2f       	mov	r28, r22
	BYTE resp, wc;


	if (!wait_ready()) return 0;
    53e2:	0e 94 7e 29 	call	0x52fc	; 0x52fc <wait_ready>
    53e6:	00 97       	sbiw	r24, 0x00	; 0
    53e8:	59 f1       	breq	.+86     	; 0x5440 <xmit_datablock+0x68>

	xmit_spi(token);					/* Xmit data token */
    53ea:	cf b9       	out	0x0f, r28	; 15
    53ec:	77 9b       	sbis	0x0e, 7	; 14
    53ee:	fe cf       	rjmp	.-4      	; 0x53ec <xmit_datablock+0x14>
	if (token != 0xFD) {	/* Is data token */
    53f0:	cd 3f       	cpi	r28, 0xFD	; 253
    53f2:	21 f1       	breq	.+72     	; 0x543c <xmit_datablock+0x64>
    53f4:	f8 01       	movw	r30, r16
    53f6:	98 01       	movw	r18, r16
    53f8:	3e 5f       	subi	r19, 0xFE	; 254
    53fa:	df 01       	movw	r26, r30
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
    53fc:	80 81       	ld	r24, Z
    53fe:	8f b9       	out	0x0f, r24	; 15
    5400:	77 9b       	sbis	0x0e, 7	; 14
    5402:	fe cf       	rjmp	.-4      	; 0x5400 <xmit_datablock+0x28>
			xmit_spi(*buff++);
    5404:	11 96       	adiw	r26, 0x01	; 1
    5406:	8c 91       	ld	r24, X
    5408:	8f b9       	out	0x0f, r24	; 15
    540a:	77 9b       	sbis	0x0e, 7	; 14
    540c:	fe cf       	rjmp	.-4      	; 0x540a <xmit_datablock+0x32>
    540e:	32 96       	adiw	r30, 0x02	; 2
		} while (--wc);
    5410:	e2 17       	cp	r30, r18
    5412:	f3 07       	cpc	r31, r19
    5414:	91 f7       	brne	.-28     	; 0x53fa <xmit_datablock+0x22>
		xmit_spi(0xFF);					/* CRC (Dummy) */
    5416:	8f ef       	ldi	r24, 0xFF	; 255
    5418:	8f b9       	out	0x0f, r24	; 15
    541a:	77 9b       	sbis	0x0e, 7	; 14
    541c:	fe cf       	rjmp	.-4      	; 0x541a <xmit_datablock+0x42>
		xmit_spi(0xFF);
    541e:	8f ef       	ldi	r24, 0xFF	; 255
    5420:	8f b9       	out	0x0f, r24	; 15
    5422:	77 9b       	sbis	0x0e, 7	; 14
    5424:	fe cf       	rjmp	.-4      	; 0x5422 <xmit_datablock+0x4a>
		resp = rcvr_spi();				/* Reveive data response */
    5426:	0e 94 78 29 	call	0x52f0	; 0x52f0 <rcvr_spi>
)
{
	BYTE resp, wc;


	if (!wait_ready()) return 0;
    542a:	8f 71       	andi	r24, 0x1F	; 31
    542c:	31 e0       	ldi	r19, 0x01	; 1
    542e:	20 e0       	ldi	r18, 0x00	; 0
    5430:	85 30       	cpi	r24, 0x05	; 5
    5432:	09 f0       	breq	.+2      	; 0x5436 <xmit_datablock+0x5e>
    5434:	30 e0       	ldi	r19, 0x00	; 0
    5436:	83 2f       	mov	r24, r19
    5438:	92 2f       	mov	r25, r18
    543a:	02 c0       	rjmp	.+4      	; 0x5440 <xmit_datablock+0x68>
		resp = rcvr_spi();				/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
    543c:	81 e0       	ldi	r24, 0x01	; 1
    543e:	90 e0       	ldi	r25, 0x00	; 0
}
    5440:	cf 91       	pop	r28
    5442:	1f 91       	pop	r17
    5444:	0f 91       	pop	r16
    5446:	08 95       	ret

00005448 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    5448:	cf 92       	push	r12
    544a:	df 92       	push	r13
    544c:	ef 92       	push	r14
    544e:	ff 92       	push	r15
    5450:	cf 93       	push	r28
    5452:	c8 2f       	mov	r28, r24
    5454:	6a 01       	movw	r12, r20
    5456:	7b 01       	movw	r14, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    5458:	88 23       	and	r24, r24
    545a:	4c f4       	brge	.+18     	; 0x546e <send_cmd+0x26>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    545c:	40 e0       	ldi	r20, 0x00	; 0
    545e:	50 e0       	ldi	r21, 0x00	; 0
    5460:	ba 01       	movw	r22, r20
    5462:	87 e3       	ldi	r24, 0x37	; 55
    5464:	0e 94 24 2a 	call	0x5448	; 0x5448 <send_cmd>
		if (res > 1) return res;
    5468:	82 30       	cpi	r24, 0x02	; 2
    546a:	e0 f5       	brcc	.+120    	; 0x54e4 <send_cmd+0x9c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    546c:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
    546e:	0e 94 91 29 	call	0x5322	; 0x5322 <deselect>
	if (!select()) return 0xFF;
    5472:	0e 94 95 29 	call	0x532a	; 0x532a <select>
    5476:	89 2b       	or	r24, r25
    5478:	a1 f1       	breq	.+104    	; 0x54e2 <send_cmd+0x9a>

	/* Send command packet */
	xmit_spi(0x40 | cmd);				/* Start + Command index */
    547a:	8c 2f       	mov	r24, r28
    547c:	80 64       	ori	r24, 0x40	; 64
    547e:	8f b9       	out	0x0f, r24	; 15
    5480:	77 9b       	sbis	0x0e, 7	; 14
    5482:	fe cf       	rjmp	.-4      	; 0x5480 <send_cmd+0x38>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    5484:	8f 2d       	mov	r24, r15
    5486:	99 27       	eor	r25, r25
    5488:	aa 27       	eor	r26, r26
    548a:	bb 27       	eor	r27, r27
    548c:	8f b9       	out	0x0f, r24	; 15
    548e:	77 9b       	sbis	0x0e, 7	; 14
    5490:	fe cf       	rjmp	.-4      	; 0x548e <send_cmd+0x46>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    5492:	c7 01       	movw	r24, r14
    5494:	aa 27       	eor	r26, r26
    5496:	bb 27       	eor	r27, r27
    5498:	8f b9       	out	0x0f, r24	; 15
    549a:	77 9b       	sbis	0x0e, 7	; 14
    549c:	fe cf       	rjmp	.-4      	; 0x549a <send_cmd+0x52>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    549e:	bb 27       	eor	r27, r27
    54a0:	af 2d       	mov	r26, r15
    54a2:	9e 2d       	mov	r25, r14
    54a4:	8d 2d       	mov	r24, r13
    54a6:	8f b9       	out	0x0f, r24	; 15
    54a8:	77 9b       	sbis	0x0e, 7	; 14
    54aa:	fe cf       	rjmp	.-4      	; 0x54a8 <send_cmd+0x60>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    54ac:	cf b8       	out	0x0f, r12	; 15
    54ae:	77 9b       	sbis	0x0e, 7	; 14
    54b0:	fe cf       	rjmp	.-4      	; 0x54ae <send_cmd+0x66>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    54b2:	cc 23       	and	r28, r28
    54b4:	21 f0       	breq	.+8      	; 0x54be <send_cmd+0x76>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    54b6:	c8 30       	cpi	r28, 0x08	; 8
    54b8:	21 f4       	brne	.+8      	; 0x54c2 <send_cmd+0x7a>
    54ba:	87 e8       	ldi	r24, 0x87	; 135
    54bc:	03 c0       	rjmp	.+6      	; 0x54c4 <send_cmd+0x7c>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    54be:	85 e9       	ldi	r24, 0x95	; 149
    54c0:	01 c0       	rjmp	.+2      	; 0x54c4 <send_cmd+0x7c>
	xmit_spi(0x40 | cmd);				/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
    54c2:	81 e0       	ldi	r24, 0x01	; 1
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
	xmit_spi(n);
    54c4:	8f b9       	out	0x0f, r24	; 15
    54c6:	77 9b       	sbis	0x0e, 7	; 14
    54c8:	fe cf       	rjmp	.-4      	; 0x54c6 <send_cmd+0x7e>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
    54ca:	cc 30       	cpi	r28, 0x0C	; 12
    54cc:	11 f4       	brne	.+4      	; 0x54d2 <send_cmd+0x8a>
    54ce:	0e 94 78 29 	call	0x52f0	; 0x52f0 <rcvr_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    54d2:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
    54d4:	0e 94 78 29 	call	0x52f0	; 0x52f0 <rcvr_spi>
	while ((res & 0x80) && --n);
    54d8:	88 23       	and	r24, r24
    54da:	24 f4       	brge	.+8      	; 0x54e4 <send_cmd+0x9c>
    54dc:	c1 50       	subi	r28, 0x01	; 1
    54de:	d1 f7       	brne	.-12     	; 0x54d4 <send_cmd+0x8c>
    54e0:	01 c0       	rjmp	.+2      	; 0x54e4 <send_cmd+0x9c>
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
    54e2:	8f ef       	ldi	r24, 0xFF	; 255
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    54e4:	cf 91       	pop	r28
    54e6:	ff 90       	pop	r15
    54e8:	ef 90       	pop	r14
    54ea:	df 90       	pop	r13
    54ec:	cf 90       	pop	r12
    54ee:	08 95       	ret

000054f0 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    54f0:	cf 92       	push	r12
    54f2:	df 92       	push	r13
    54f4:	ef 92       	push	r14
    54f6:	ff 92       	push	r15
    54f8:	0f 93       	push	r16
    54fa:	1f 93       	push	r17
    54fc:	cf 93       	push	r28
    54fe:	df 93       	push	r29
    5500:	00 d0       	rcall	.+0      	; 0x5502 <disk_initialize+0x12>
    5502:	00 d0       	rcall	.+0      	; 0x5504 <disk_initialize+0x14>
    5504:	cd b7       	in	r28, 0x3d	; 61
    5506:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    5508:	81 11       	cpse	r24, r1
    550a:	99 c0       	rjmp	.+306    	; 0x563e <disk_initialize+0x14e>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    550c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    5510:	81 ff       	sbrs	r24, 1
    5512:	03 c0       	rjmp	.+6      	; 0x551a <disk_initialize+0x2a>
    5514:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    5518:	9f c0       	rjmp	.+318    	; 0x5658 <disk_initialize+0x168>

	power_on();							/* Force socket power on */
	FCLK_SLOW();
    551a:	69 9a       	sbi	0x0d, 1	; 13
    551c:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
    551e:	0e 94 78 29 	call	0x52f0	; 0x52f0 <rcvr_spi>
    5522:	11 50       	subi	r17, 0x01	; 1
    5524:	e1 f7       	brne	.-8      	; 0x551e <disk_initialize+0x2e>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    5526:	40 e0       	ldi	r20, 0x00	; 0
    5528:	50 e0       	ldi	r21, 0x00	; 0
    552a:	ba 01       	movw	r22, r20
    552c:	80 e0       	ldi	r24, 0x00	; 0
    552e:	0e 94 24 2a 	call	0x5448	; 0x5448 <send_cmd>
    5532:	81 30       	cpi	r24, 0x01	; 1
    5534:	09 f0       	breq	.+2      	; 0x5538 <disk_initialize+0x48>
    5536:	8b c0       	rjmp	.+278    	; 0x564e <disk_initialize+0x15e>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    5538:	84 e6       	ldi	r24, 0x64	; 100
    553a:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <Timer1>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    553e:	4a ea       	ldi	r20, 0xAA	; 170
    5540:	51 e0       	ldi	r21, 0x01	; 1
    5542:	60 e0       	ldi	r22, 0x00	; 0
    5544:	70 e0       	ldi	r23, 0x00	; 0
    5546:	88 e0       	ldi	r24, 0x08	; 8
    5548:	0e 94 24 2a 	call	0x5448	; 0x5448 <send_cmd>
    554c:	81 30       	cpi	r24, 0x01	; 1
    554e:	09 f0       	breq	.+2      	; 0x5552 <disk_initialize+0x62>
    5550:	3f c0       	rjmp	.+126    	; 0x55d0 <disk_initialize+0xe0>
    5552:	ce 01       	movw	r24, r28
    5554:	01 96       	adiw	r24, 0x01	; 1
    5556:	6c 01       	movw	r12, r24
    5558:	7e 01       	movw	r14, r28
    555a:	95 e0       	ldi	r25, 0x05	; 5
    555c:	e9 0e       	add	r14, r25
    555e:	f1 1c       	adc	r15, r1
    5560:	86 01       	movw	r16, r12
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
    5562:	0e 94 78 29 	call	0x52f0	; 0x52f0 <rcvr_spi>
    5566:	f8 01       	movw	r30, r16
    5568:	81 93       	st	Z+, r24
    556a:	8f 01       	movw	r16, r30
    556c:	ee 16       	cp	r14, r30
    556e:	ff 06       	cpc	r15, r31
    5570:	c1 f7       	brne	.-16     	; 0x5562 <disk_initialize+0x72>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    5572:	8b 81       	ldd	r24, Y+3	; 0x03
    5574:	81 30       	cpi	r24, 0x01	; 1
    5576:	09 f0       	breq	.+2      	; 0x557a <disk_initialize+0x8a>
    5578:	6a c0       	rjmp	.+212    	; 0x564e <disk_initialize+0x15e>
    557a:	8c 81       	ldd	r24, Y+4	; 0x04
    557c:	8a 3a       	cpi	r24, 0xAA	; 170
    557e:	09 f0       	breq	.+2      	; 0x5582 <disk_initialize+0x92>
    5580:	66 c0       	rjmp	.+204    	; 0x564e <disk_initialize+0x15e>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    5582:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Timer1>
    5586:	88 23       	and	r24, r24
    5588:	49 f0       	breq	.+18     	; 0x559c <disk_initialize+0xac>
    558a:	40 e0       	ldi	r20, 0x00	; 0
    558c:	50 e0       	ldi	r21, 0x00	; 0
    558e:	60 e0       	ldi	r22, 0x00	; 0
    5590:	70 e4       	ldi	r23, 0x40	; 64
    5592:	89 ea       	ldi	r24, 0xA9	; 169
    5594:	0e 94 24 2a 	call	0x5448	; 0x5448 <send_cmd>
    5598:	81 11       	cpse	r24, r1
    559a:	f3 cf       	rjmp	.-26     	; 0x5582 <disk_initialize+0x92>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    559c:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Timer1>
    55a0:	88 23       	and	r24, r24
    55a2:	09 f4       	brne	.+2      	; 0x55a6 <disk_initialize+0xb6>
    55a4:	54 c0       	rjmp	.+168    	; 0x564e <disk_initialize+0x15e>
    55a6:	40 e0       	ldi	r20, 0x00	; 0
    55a8:	50 e0       	ldi	r21, 0x00	; 0
    55aa:	ba 01       	movw	r22, r20
    55ac:	8a e3       	ldi	r24, 0x3A	; 58
    55ae:	0e 94 24 2a 	call	0x5448	; 0x5448 <send_cmd>
    55b2:	81 11       	cpse	r24, r1
    55b4:	4c c0       	rjmp	.+152    	; 0x564e <disk_initialize+0x15e>
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
    55b6:	0e 94 78 29 	call	0x52f0	; 0x52f0 <rcvr_spi>
    55ba:	f6 01       	movw	r30, r12
    55bc:	81 93       	st	Z+, r24
    55be:	6f 01       	movw	r12, r30
    55c0:	ee 16       	cp	r14, r30
    55c2:	ff 06       	cpc	r15, r31
    55c4:	c1 f7       	brne	.-16     	; 0x55b6 <disk_initialize+0xc6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    55c6:	89 81       	ldd	r24, Y+1	; 0x01
    55c8:	86 fd       	sbrc	r24, 6
    55ca:	3b c0       	rjmp	.+118    	; 0x5642 <disk_initialize+0x152>
    55cc:	84 e0       	ldi	r24, 0x04	; 4
    55ce:	3a c0       	rjmp	.+116    	; 0x5644 <disk_initialize+0x154>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    55d0:	40 e0       	ldi	r20, 0x00	; 0
    55d2:	50 e0       	ldi	r21, 0x00	; 0
    55d4:	ba 01       	movw	r22, r20
    55d6:	89 ea       	ldi	r24, 0xA9	; 169
    55d8:	0e 94 24 2a 	call	0x5448	; 0x5448 <send_cmd>
    55dc:	82 30       	cpi	r24, 0x02	; 2
    55de:	18 f0       	brcs	.+6      	; 0x55e6 <disk_initialize+0xf6>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    55e0:	01 e0       	ldi	r16, 0x01	; 1
    55e2:	11 e0       	ldi	r17, 0x01	; 1
    55e4:	02 c0       	rjmp	.+4      	; 0x55ea <disk_initialize+0xfa>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    55e6:	02 e0       	ldi	r16, 0x02	; 2
    55e8:	19 ea       	ldi	r17, 0xA9	; 169
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    55ea:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Timer1>
    55ee:	88 23       	and	r24, r24
    55f0:	41 f0       	breq	.+16     	; 0x5602 <disk_initialize+0x112>
    55f2:	40 e0       	ldi	r20, 0x00	; 0
    55f4:	50 e0       	ldi	r21, 0x00	; 0
    55f6:	ba 01       	movw	r22, r20
    55f8:	81 2f       	mov	r24, r17
    55fa:	0e 94 24 2a 	call	0x5448	; 0x5448 <send_cmd>
    55fe:	81 11       	cpse	r24, r1
    5600:	f4 cf       	rjmp	.-24     	; 0x55ea <disk_initialize+0xfa>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    5602:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Timer1>
    5606:	88 23       	and	r24, r24
    5608:	11 f1       	breq	.+68     	; 0x564e <disk_initialize+0x15e>
    560a:	40 e0       	ldi	r20, 0x00	; 0
    560c:	52 e0       	ldi	r21, 0x02	; 2
    560e:	60 e0       	ldi	r22, 0x00	; 0
    5610:	70 e0       	ldi	r23, 0x00	; 0
    5612:	80 e1       	ldi	r24, 0x10	; 16
    5614:	0e 94 24 2a 	call	0x5448	; 0x5448 <send_cmd>
    5618:	81 11       	cpse	r24, r1
    561a:	19 c0       	rjmp	.+50     	; 0x564e <disk_initialize+0x15e>
				ty = 0;
		}
	}
	//blinkWhiteLEDnrazy(ty);
	CardType = ty;
    561c:	00 93 a6 01 	sts	0x01A6, r16	; 0x8001a6 <CardType>
	deselect();
    5620:	0e 94 91 29 	call	0x5322	; 0x5322 <deselect>

	if (ty) {			/* Initialization succeded */
    5624:	00 23       	and	r16, r16
    5626:	41 f0       	breq	.+16     	; 0x5638 <disk_initialize+0x148>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    5628:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    562c:	8e 7f       	andi	r24, 0xFE	; 254
    562e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Stat>
		FCLK_FAST();
    5632:	8d b1       	in	r24, 0x0d	; 13
    5634:	8c 7f       	andi	r24, 0xFC	; 252
    5636:	8d b9       	out	0x0d, r24	; 13
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
    5638:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    563c:	0d c0       	rjmp	.+26     	; 0x5658 <disk_initialize+0x168>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    563e:	81 e0       	ldi	r24, 0x01	; 1
    5640:	0b c0       	rjmp	.+22     	; 0x5658 <disk_initialize+0x168>
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    5642:	8c e0       	ldi	r24, 0x0C	; 12
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	//blinkWhiteLEDnrazy(ty);
	CardType = ty;
    5644:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <CardType>
	deselect();
    5648:	0e 94 91 29 	call	0x5322	; 0x5322 <deselect>
    564c:	ed cf       	rjmp	.-38     	; 0x5628 <disk_initialize+0x138>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	//blinkWhiteLEDnrazy(ty);
	CardType = ty;
    564e:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <CardType>
	deselect();
    5652:	0e 94 91 29 	call	0x5322	; 0x5322 <deselect>
    5656:	f0 cf       	rjmp	.-32     	; 0x5638 <disk_initialize+0x148>
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    5658:	0f 90       	pop	r0
    565a:	0f 90       	pop	r0
    565c:	0f 90       	pop	r0
    565e:	0f 90       	pop	r0
    5660:	df 91       	pop	r29
    5662:	cf 91       	pop	r28
    5664:	1f 91       	pop	r17
    5666:	0f 91       	pop	r16
    5668:	ff 90       	pop	r15
    566a:	ef 90       	pop	r14
    566c:	df 90       	pop	r13
    566e:	cf 90       	pop	r12
    5670:	08 95       	ret

00005672 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    5672:	81 11       	cpse	r24, r1
    5674:	03 c0       	rjmp	.+6      	; 0x567c <disk_status+0xa>
	return Stat;
    5676:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    567a:	08 95       	ret

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    567c:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    567e:	08 95       	ret

00005680 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    5680:	0f 93       	push	r16
    5682:	cf 93       	push	r28
    5684:	df 93       	push	r29
    5686:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
    5688:	81 11       	cpse	r24, r1
    568a:	44 c0       	rjmp	.+136    	; 0x5714 <disk_read+0x94>
    568c:	00 23       	and	r16, r16
    568e:	09 f4       	brne	.+2      	; 0x5692 <disk_read+0x12>
    5690:	43 c0       	rjmp	.+134    	; 0x5718 <disk_read+0x98>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    5692:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    5696:	80 fd       	sbrc	r24, 0
    5698:	41 c0       	rjmp	.+130    	; 0x571c <disk_read+0x9c>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    569a:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <CardType>
    569e:	83 fd       	sbrc	r24, 3
    56a0:	09 c0       	rjmp	.+18     	; 0x56b4 <disk_read+0x34>
    56a2:	01 2e       	mov	r0, r17
    56a4:	19 e0       	ldi	r17, 0x09	; 9
    56a6:	22 0f       	add	r18, r18
    56a8:	33 1f       	adc	r19, r19
    56aa:	44 1f       	adc	r20, r20
    56ac:	55 1f       	adc	r21, r21
    56ae:	1a 95       	dec	r17
    56b0:	d1 f7       	brne	.-12     	; 0x56a6 <disk_read+0x26>
    56b2:	10 2d       	mov	r17, r0

	if (count == 1) {	/* Single block read */
    56b4:	01 30       	cpi	r16, 0x01	; 1
    56b6:	81 f4       	brne	.+32     	; 0x56d8 <disk_read+0x58>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
    56b8:	ba 01       	movw	r22, r20
    56ba:	a9 01       	movw	r20, r18
    56bc:	81 e1       	ldi	r24, 0x11	; 17
    56be:	0e 94 24 2a 	call	0x5448	; 0x5448 <send_cmd>
    56c2:	81 11       	cpse	r24, r1
    56c4:	20 c0       	rjmp	.+64     	; 0x5706 <disk_read+0x86>
			&& rcvr_datablock(buff, 512))
    56c6:	60 e0       	ldi	r22, 0x00	; 0
    56c8:	72 e0       	ldi	r23, 0x02	; 2
    56ca:	ce 01       	movw	r24, r28
    56cc:	0e 94 a6 29 	call	0x534c	; 0x534c <rcvr_datablock>
    56d0:	89 2b       	or	r24, r25
    56d2:	c9 f0       	breq	.+50     	; 0x5706 <disk_read+0x86>
    56d4:	00 e0       	ldi	r16, 0x00	; 0
    56d6:	17 c0       	rjmp	.+46     	; 0x5706 <disk_read+0x86>
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
    56d8:	ba 01       	movw	r22, r20
    56da:	a9 01       	movw	r20, r18
    56dc:	82 e1       	ldi	r24, 0x12	; 18
    56de:	0e 94 24 2a 	call	0x5448	; 0x5448 <send_cmd>
    56e2:	81 11       	cpse	r24, r1
    56e4:	10 c0       	rjmp	.+32     	; 0x5706 <disk_read+0x86>
			do {
				if (!rcvr_datablock(buff, 512)) break;
    56e6:	60 e0       	ldi	r22, 0x00	; 0
    56e8:	72 e0       	ldi	r23, 0x02	; 2
    56ea:	ce 01       	movw	r24, r28
    56ec:	0e 94 a6 29 	call	0x534c	; 0x534c <rcvr_datablock>
    56f0:	89 2b       	or	r24, r25
    56f2:	19 f0       	breq	.+6      	; 0x56fa <disk_read+0x7a>
				buff += 512;
    56f4:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    56f6:	01 50       	subi	r16, 0x01	; 1
    56f8:	b1 f7       	brne	.-20     	; 0x56e6 <disk_read+0x66>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
    56fa:	40 e0       	ldi	r20, 0x00	; 0
    56fc:	50 e0       	ldi	r21, 0x00	; 0
    56fe:	ba 01       	movw	r22, r20
    5700:	8c e0       	ldi	r24, 0x0C	; 12
    5702:	0e 94 24 2a 	call	0x5448	; 0x5448 <send_cmd>
		}
	}
	deselect();
    5706:	0e 94 91 29 	call	0x5322	; 0x5322 <deselect>

	return count ? RES_ERROR : RES_OK;
    570a:	81 e0       	ldi	r24, 0x01	; 1
    570c:	01 11       	cpse	r16, r1
    570e:	07 c0       	rjmp	.+14     	; 0x571e <disk_read+0x9e>
    5710:	80 e0       	ldi	r24, 0x00	; 0
    5712:	05 c0       	rjmp	.+10     	; 0x571e <disk_read+0x9e>
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
    5714:	84 e0       	ldi	r24, 0x04	; 4
    5716:	03 c0       	rjmp	.+6      	; 0x571e <disk_read+0x9e>
    5718:	84 e0       	ldi	r24, 0x04	; 4
    571a:	01 c0       	rjmp	.+2      	; 0x571e <disk_read+0x9e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    571c:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    571e:	df 91       	pop	r29
    5720:	cf 91       	pop	r28
    5722:	0f 91       	pop	r16
    5724:	08 95       	ret

00005726 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    5726:	cf 92       	push	r12
    5728:	df 92       	push	r13
    572a:	ef 92       	push	r14
    572c:	ff 92       	push	r15
    572e:	0f 93       	push	r16
    5730:	cf 93       	push	r28
    5732:	df 93       	push	r29
    5734:	eb 01       	movw	r28, r22
    5736:	69 01       	movw	r12, r18
    5738:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
    573a:	81 11       	cpse	r24, r1
    573c:	51 c0       	rjmp	.+162    	; 0x57e0 <disk_write+0xba>
    573e:	00 23       	and	r16, r16
    5740:	09 f4       	brne	.+2      	; 0x5744 <disk_write+0x1e>
    5742:	50 c0       	rjmp	.+160    	; 0x57e4 <disk_write+0xbe>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    5744:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    5748:	80 fd       	sbrc	r24, 0
    574a:	4e c0       	rjmp	.+156    	; 0x57e8 <disk_write+0xc2>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    574c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    5750:	82 fd       	sbrc	r24, 2
    5752:	4c c0       	rjmp	.+152    	; 0x57ec <disk_write+0xc6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    5754:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <CardType>
    5758:	83 fd       	sbrc	r24, 3
    575a:	09 c0       	rjmp	.+18     	; 0x576e <disk_write+0x48>
    575c:	0b 2e       	mov	r0, r27
    575e:	b9 e0       	ldi	r27, 0x09	; 9
    5760:	cc 0c       	add	r12, r12
    5762:	dd 1c       	adc	r13, r13
    5764:	ee 1c       	adc	r14, r14
    5766:	ff 1c       	adc	r15, r15
    5768:	ba 95       	dec	r27
    576a:	d1 f7       	brne	.-12     	; 0x5760 <disk_write+0x3a>
    576c:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    576e:	01 30       	cpi	r16, 0x01	; 1
    5770:	79 f4       	brne	.+30     	; 0x5790 <disk_write+0x6a>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    5772:	b7 01       	movw	r22, r14
    5774:	a6 01       	movw	r20, r12
    5776:	88 e1       	ldi	r24, 0x18	; 24
    5778:	0e 94 24 2a 	call	0x5448	; 0x5448 <send_cmd>
    577c:	81 11       	cpse	r24, r1
    577e:	29 c0       	rjmp	.+82     	; 0x57d2 <disk_write+0xac>
			&& xmit_datablock(buff, 0xFE))
    5780:	6e ef       	ldi	r22, 0xFE	; 254
    5782:	ce 01       	movw	r24, r28
    5784:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <xmit_datablock>
    5788:	89 2b       	or	r24, r25
    578a:	19 f1       	breq	.+70     	; 0x57d2 <disk_write+0xac>
    578c:	00 e0       	ldi	r16, 0x00	; 0
    578e:	21 c0       	rjmp	.+66     	; 0x57d2 <disk_write+0xac>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    5790:	86 70       	andi	r24, 0x06	; 6
    5792:	39 f0       	breq	.+14     	; 0x57a2 <disk_write+0x7c>
    5794:	40 2f       	mov	r20, r16
    5796:	50 e0       	ldi	r21, 0x00	; 0
    5798:	60 e0       	ldi	r22, 0x00	; 0
    579a:	70 e0       	ldi	r23, 0x00	; 0
    579c:	87 e9       	ldi	r24, 0x97	; 151
    579e:	0e 94 24 2a 	call	0x5448	; 0x5448 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    57a2:	b7 01       	movw	r22, r14
    57a4:	a6 01       	movw	r20, r12
    57a6:	89 e1       	ldi	r24, 0x19	; 25
    57a8:	0e 94 24 2a 	call	0x5448	; 0x5448 <send_cmd>
    57ac:	81 11       	cpse	r24, r1
    57ae:	11 c0       	rjmp	.+34     	; 0x57d2 <disk_write+0xac>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    57b0:	6c ef       	ldi	r22, 0xFC	; 252
    57b2:	ce 01       	movw	r24, r28
    57b4:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <xmit_datablock>
    57b8:	89 2b       	or	r24, r25
    57ba:	19 f0       	breq	.+6      	; 0x57c2 <disk_write+0x9c>
				buff += 512;
    57bc:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    57be:	01 50       	subi	r16, 0x01	; 1
    57c0:	b9 f7       	brne	.-18     	; 0x57b0 <disk_write+0x8a>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    57c2:	6d ef       	ldi	r22, 0xFD	; 253
    57c4:	80 e0       	ldi	r24, 0x00	; 0
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <xmit_datablock>
    57cc:	89 2b       	or	r24, r25
    57ce:	09 f4       	brne	.+2      	; 0x57d2 <disk_write+0xac>
				count = 1;
    57d0:	01 e0       	ldi	r16, 0x01	; 1
		}
	}
	deselect();
    57d2:	0e 94 91 29 	call	0x5322	; 0x5322 <deselect>

	return count ? RES_ERROR : RES_OK;
    57d6:	81 e0       	ldi	r24, 0x01	; 1
    57d8:	01 11       	cpse	r16, r1
    57da:	09 c0       	rjmp	.+18     	; 0x57ee <disk_write+0xc8>
    57dc:	80 e0       	ldi	r24, 0x00	; 0
    57de:	07 c0       	rjmp	.+14     	; 0x57ee <disk_write+0xc8>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
    57e0:	84 e0       	ldi	r24, 0x04	; 4
    57e2:	05 c0       	rjmp	.+10     	; 0x57ee <disk_write+0xc8>
    57e4:	84 e0       	ldi	r24, 0x04	; 4
    57e6:	03 c0       	rjmp	.+6      	; 0x57ee <disk_write+0xc8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    57e8:	83 e0       	ldi	r24, 0x03	; 3
    57ea:	01 c0       	rjmp	.+2      	; 0x57ee <disk_write+0xc8>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    57ec:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    57ee:	df 91       	pop	r29
    57f0:	cf 91       	pop	r28
    57f2:	0f 91       	pop	r16
    57f4:	ff 90       	pop	r15
    57f6:	ef 90       	pop	r14
    57f8:	df 90       	pop	r13
    57fa:	cf 90       	pop	r12
    57fc:	08 95       	ret

000057fe <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    57fe:	ef 92       	push	r14
    5800:	ff 92       	push	r15
    5802:	0f 93       	push	r16
    5804:	1f 93       	push	r17
    5806:	cf 93       	push	r28
    5808:	df 93       	push	r29
    580a:	cd b7       	in	r28, 0x3d	; 61
    580c:	de b7       	in	r29, 0x3e	; 62
    580e:	60 97       	sbiw	r28, 0x10	; 16
    5810:	0f b6       	in	r0, 0x3f	; 63
    5812:	f8 94       	cli
    5814:	de bf       	out	0x3e, r29	; 62
    5816:	0f be       	out	0x3f, r0	; 63
    5818:	cd bf       	out	0x3d, r28	; 61
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
    581a:	81 11       	cpse	r24, r1
    581c:	96 c1       	rjmp	.+812    	; 0x5b4a <disk_ioctl+0x34c>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
    581e:	65 30       	cpi	r22, 0x05	; 5
    5820:	71 f4       	brne	.+28     	; 0x583e <disk_ioctl+0x40>
		switch (ptr[0]) {
    5822:	fa 01       	movw	r30, r20
    5824:	80 81       	ld	r24, Z
    5826:	88 23       	and	r24, r24
    5828:	19 f0       	breq	.+6      	; 0x5830 <disk_ioctl+0x32>
    582a:	81 30       	cpi	r24, 0x01	; 1
    582c:	19 f0       	breq	.+6      	; 0x5834 <disk_ioctl+0x36>
    582e:	8f c1       	rjmp	.+798    	; 0x5b4e <disk_ioctl+0x350>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
			res = RES_OK;
    5830:	80 e0       	ldi	r24, 0x00	; 0
    5832:	90 c1       	rjmp	.+800    	; 0x5b54 <disk_ioctl+0x356>
			break;
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
    5834:	81 e0       	ldi	r24, 0x01	; 1
    5836:	fa 01       	movw	r30, r20
    5838:	81 83       	std	Z+1, r24	; 0x01
			res = RES_OK;
    583a:	80 e0       	ldi	r24, 0x00	; 0
			break;
    583c:	8b c1       	rjmp	.+790    	; 0x5b54 <disk_ioctl+0x356>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    583e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    5842:	80 fd       	sbrc	r24, 0
    5844:	86 c1       	rjmp	.+780    	; 0x5b52 <disk_ioctl+0x354>
    5846:	8a 01       	movw	r16, r20

		switch (ctrl) {
    5848:	86 2f       	mov	r24, r22
    584a:	90 e0       	ldi	r25, 0x00	; 0
    584c:	8f 30       	cpi	r24, 0x0F	; 15
    584e:	91 05       	cpc	r25, r1
    5850:	08 f0       	brcs	.+2      	; 0x5854 <disk_ioctl+0x56>
    5852:	60 c1       	rjmp	.+704    	; 0x5b14 <disk_ioctl+0x316>
    5854:	fc 01       	movw	r30, r24
    5856:	ec 5c       	subi	r30, 0xCC	; 204
    5858:	fe 4f       	sbci	r31, 0xFE	; 254
    585a:	0c 94 ba 37 	jmp	0x6f74	; 0x6f74 <__tablejump2__>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
    585e:	0e 94 95 29 	call	0x532a	; 0x532a <select>
    5862:	89 2b       	or	r24, r25
    5864:	09 f4       	brne	.+2      	; 0x5868 <disk_ioctl+0x6a>
    5866:	58 c1       	rjmp	.+688    	; 0x5b18 <disk_ioctl+0x31a>
				deselect();
    5868:	0e 94 91 29 	call	0x5322	; 0x5322 <deselect>
				res = RES_OK;
    586c:	10 e0       	ldi	r17, 0x00	; 0
    586e:	69 c1       	rjmp	.+722    	; 0x5b42 <disk_ioctl+0x344>
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    5870:	40 e0       	ldi	r20, 0x00	; 0
    5872:	50 e0       	ldi	r21, 0x00	; 0
    5874:	ba 01       	movw	r22, r20
    5876:	89 e0       	ldi	r24, 0x09	; 9
    5878:	0e 94 24 2a 	call	0x5448	; 0x5448 <send_cmd>
    587c:	81 11       	cpse	r24, r1
    587e:	4e c1       	rjmp	.+668    	; 0x5b1c <disk_ioctl+0x31e>
    5880:	60 e1       	ldi	r22, 0x10	; 16
    5882:	70 e0       	ldi	r23, 0x00	; 0
    5884:	ce 01       	movw	r24, r28
    5886:	01 96       	adiw	r24, 0x01	; 1
    5888:	0e 94 a6 29 	call	0x534c	; 0x534c <rcvr_datablock>
    588c:	89 2b       	or	r24, r25
    588e:	09 f4       	brne	.+2      	; 0x5892 <disk_ioctl+0x94>
    5890:	47 c1       	rjmp	.+654    	; 0x5b20 <disk_ioctl+0x322>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    5892:	89 81       	ldd	r24, Y+1	; 0x01
    5894:	82 95       	swap	r24
    5896:	86 95       	lsr	r24
    5898:	86 95       	lsr	r24
    589a:	83 70       	andi	r24, 0x03	; 3
    589c:	81 30       	cpi	r24, 0x01	; 1
    589e:	d9 f4       	brne	.+54     	; 0x58d6 <disk_ioctl+0xd8>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
    58a0:	89 85       	ldd	r24, Y+9	; 0x09
    58a2:	90 e0       	ldi	r25, 0x00	; 0
    58a4:	38 2f       	mov	r19, r24
    58a6:	22 27       	eor	r18, r18
    58a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    58aa:	90 e0       	ldi	r25, 0x00	; 0
    58ac:	01 96       	adiw	r24, 0x01	; 1
    58ae:	82 0f       	add	r24, r18
    58b0:	93 1f       	adc	r25, r19
    58b2:	a0 e0       	ldi	r26, 0x00	; 0
    58b4:	b0 e0       	ldi	r27, 0x00	; 0
    58b6:	07 2e       	mov	r0, r23
    58b8:	7a e0       	ldi	r23, 0x0A	; 10
    58ba:	88 0f       	add	r24, r24
    58bc:	99 1f       	adc	r25, r25
    58be:	aa 1f       	adc	r26, r26
    58c0:	bb 1f       	adc	r27, r27
    58c2:	7a 95       	dec	r23
    58c4:	d1 f7       	brne	.-12     	; 0x58ba <disk_ioctl+0xbc>
    58c6:	70 2d       	mov	r23, r0
    58c8:	f8 01       	movw	r30, r16
    58ca:	80 83       	st	Z, r24
    58cc:	91 83       	std	Z+1, r25	; 0x01
    58ce:	a2 83       	std	Z+2, r26	; 0x02
    58d0:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
				}
				res = RES_OK;
    58d2:	10 e0       	ldi	r17, 0x00	; 0
    58d4:	36 c1       	rjmp	.+620    	; 0x5b42 <disk_ioctl+0x344>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
    58d6:	29 85       	ldd	r18, Y+9	; 0x09
    58d8:	22 95       	swap	r18
    58da:	26 95       	lsr	r18
    58dc:	26 95       	lsr	r18
    58de:	23 70       	andi	r18, 0x03	; 3
    58e0:	88 85       	ldd	r24, Y+8	; 0x08
    58e2:	f4 e0       	ldi	r31, 0x04	; 4
    58e4:	8f 9f       	mul	r24, r31
    58e6:	c0 01       	movw	r24, r0
    58e8:	11 24       	eor	r1, r1
    58ea:	82 0f       	add	r24, r18
    58ec:	91 1d       	adc	r25, r1
    58ee:	9c 01       	movw	r18, r24
    58f0:	2f 5f       	subi	r18, 0xFF	; 255
    58f2:	3f 4f       	sbci	r19, 0xFF	; 255
    58f4:	8f 81       	ldd	r24, Y+7	; 0x07
    58f6:	83 70       	andi	r24, 0x03	; 3
    58f8:	90 e0       	ldi	r25, 0x00	; 0
    58fa:	98 2f       	mov	r25, r24
    58fc:	88 27       	eor	r24, r24
    58fe:	99 0f       	add	r25, r25
    5900:	99 0f       	add	r25, r25
    5902:	82 0f       	add	r24, r18
    5904:	93 1f       	adc	r25, r19
    5906:	a0 e0       	ldi	r26, 0x00	; 0
    5908:	b0 e0       	ldi	r27, 0x00	; 0
    590a:	3e 81       	ldd	r19, Y+6	; 0x06
    590c:	3f 70       	andi	r19, 0x0F	; 15
    590e:	2b 85       	ldd	r18, Y+11	; 0x0b
    5910:	22 1f       	adc	r18, r18
    5912:	22 27       	eor	r18, r18
    5914:	22 1f       	adc	r18, r18
    5916:	32 0f       	add	r19, r18
    5918:	2a 85       	ldd	r18, Y+10	; 0x0a
    591a:	23 70       	andi	r18, 0x03	; 3
    591c:	22 0f       	add	r18, r18
    591e:	23 0f       	add	r18, r19
    5920:	27 50       	subi	r18, 0x07	; 7
    5922:	04 c0       	rjmp	.+8      	; 0x592c <disk_ioctl+0x12e>
    5924:	88 0f       	add	r24, r24
    5926:	99 1f       	adc	r25, r25
    5928:	aa 1f       	adc	r26, r26
    592a:	bb 1f       	adc	r27, r27
    592c:	2a 95       	dec	r18
    592e:	d2 f7       	brpl	.-12     	; 0x5924 <disk_ioctl+0x126>
    5930:	f8 01       	movw	r30, r16
    5932:	80 83       	st	Z, r24
    5934:	91 83       	std	Z+1, r25	; 0x01
    5936:	a2 83       	std	Z+2, r26	; 0x02
    5938:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    593a:	10 e0       	ldi	r17, 0x00	; 0
    593c:	02 c1       	rjmp	.+516    	; 0x5b42 <disk_ioctl+0x344>
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    593e:	80 e0       	ldi	r24, 0x00	; 0
    5940:	92 e0       	ldi	r25, 0x02	; 2
    5942:	fa 01       	movw	r30, r20
    5944:	91 83       	std	Z+1, r25	; 0x01
    5946:	80 83       	st	Z, r24
			res = RES_OK;
    5948:	10 e0       	ldi	r17, 0x00	; 0
			break;
    594a:	fb c0       	rjmp	.+502    	; 0x5b42 <disk_ioctl+0x344>

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
    594c:	f0 90 a6 01 	lds	r15, 0x01A6	; 0x8001a6 <CardType>
    5950:	f2 fe       	sbrs	r15, 2
    5952:	31 c0       	rjmp	.+98     	; 0x59b6 <disk_ioctl+0x1b8>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    5954:	40 e0       	ldi	r20, 0x00	; 0
    5956:	50 e0       	ldi	r21, 0x00	; 0
    5958:	ba 01       	movw	r22, r20
    595a:	8d e8       	ldi	r24, 0x8D	; 141
    595c:	0e 94 24 2a 	call	0x5448	; 0x5448 <send_cmd>
    5960:	81 11       	cpse	r24, r1
    5962:	e0 c0       	rjmp	.+448    	; 0x5b24 <disk_ioctl+0x326>
					rcvr_spi();
    5964:	0e 94 78 29 	call	0x52f0	; 0x52f0 <rcvr_spi>
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    5968:	60 e1       	ldi	r22, 0x10	; 16
    596a:	70 e0       	ldi	r23, 0x00	; 0
    596c:	ce 01       	movw	r24, r28
    596e:	01 96       	adiw	r24, 0x01	; 1
    5970:	0e 94 a6 29 	call	0x534c	; 0x534c <rcvr_datablock>
    5974:	89 2b       	or	r24, r25
    5976:	09 f4       	brne	.+2      	; 0x597a <disk_ioctl+0x17c>
    5978:	d7 c0       	rjmp	.+430    	; 0x5b28 <disk_ioctl+0x32a>
    597a:	0f 2e       	mov	r0, r31
    597c:	f0 e3       	ldi	r31, 0x30	; 48
    597e:	ff 2e       	mov	r15, r31
    5980:	f0 2d       	mov	r31, r0
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
    5982:	0e 94 78 29 	call	0x52f0	; 0x52f0 <rcvr_spi>
    5986:	fa 94       	dec	r15
    5988:	f1 10       	cpse	r15, r1
    598a:	fb cf       	rjmp	.-10     	; 0x5982 <disk_ioctl+0x184>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    598c:	2b 85       	ldd	r18, Y+11	; 0x0b
    598e:	22 95       	swap	r18
    5990:	2f 70       	andi	r18, 0x0F	; 15
    5992:	80 e1       	ldi	r24, 0x10	; 16
    5994:	90 e0       	ldi	r25, 0x00	; 0
    5996:	a0 e0       	ldi	r26, 0x00	; 0
    5998:	b0 e0       	ldi	r27, 0x00	; 0
    599a:	04 c0       	rjmp	.+8      	; 0x59a4 <disk_ioctl+0x1a6>
    599c:	88 0f       	add	r24, r24
    599e:	99 1f       	adc	r25, r25
    59a0:	aa 1f       	adc	r26, r26
    59a2:	bb 1f       	adc	r27, r27
    59a4:	2a 95       	dec	r18
    59a6:	d2 f7       	brpl	.-12     	; 0x599c <disk_ioctl+0x19e>
    59a8:	f8 01       	movw	r30, r16
    59aa:	80 83       	st	Z, r24
    59ac:	91 83       	std	Z+1, r25	; 0x01
    59ae:	a2 83       	std	Z+2, r26	; 0x02
    59b0:	b3 83       	std	Z+3, r27	; 0x03
						res = RES_OK;
    59b2:	10 e0       	ldi	r17, 0x00	; 0
    59b4:	c6 c0       	rjmp	.+396    	; 0x5b42 <disk_ioctl+0x344>
					}
				}
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    59b6:	40 e0       	ldi	r20, 0x00	; 0
    59b8:	50 e0       	ldi	r21, 0x00	; 0
    59ba:	ba 01       	movw	r22, r20
    59bc:	89 e0       	ldi	r24, 0x09	; 9
    59be:	0e 94 24 2a 	call	0x5448	; 0x5448 <send_cmd>
    59c2:	81 11       	cpse	r24, r1
    59c4:	b3 c0       	rjmp	.+358    	; 0x5b2c <disk_ioctl+0x32e>
    59c6:	60 e1       	ldi	r22, 0x10	; 16
    59c8:	70 e0       	ldi	r23, 0x00	; 0
    59ca:	ce 01       	movw	r24, r28
    59cc:	01 96       	adiw	r24, 0x01	; 1
    59ce:	0e 94 a6 29 	call	0x534c	; 0x534c <rcvr_datablock>
    59d2:	89 2b       	or	r24, r25
    59d4:	09 f4       	brne	.+2      	; 0x59d8 <disk_ioctl+0x1da>
    59d6:	ac c0       	rjmp	.+344    	; 0x5b30 <disk_ioctl+0x332>
					if (CardType & CT_SD1) {	/* SDv1 */
    59d8:	f1 fe       	sbrs	r15, 1
    59da:	20 c0       	rjmp	.+64     	; 0x5a1c <disk_ioctl+0x21e>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    59dc:	2b 85       	ldd	r18, Y+11	; 0x0b
    59de:	2f 73       	andi	r18, 0x3F	; 63
    59e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    59e2:	88 1f       	adc	r24, r24
    59e4:	88 27       	eor	r24, r24
    59e6:	88 1f       	adc	r24, r24
    59e8:	90 e0       	ldi	r25, 0x00	; 0
    59ea:	01 96       	adiw	r24, 0x01	; 1
    59ec:	82 0f       	add	r24, r18
    59ee:	91 1d       	adc	r25, r1
    59f0:	82 0f       	add	r24, r18
    59f2:	91 1d       	adc	r25, r1
    59f4:	2e 85       	ldd	r18, Y+14	; 0x0e
    59f6:	22 95       	swap	r18
    59f8:	26 95       	lsr	r18
    59fa:	26 95       	lsr	r18
    59fc:	23 70       	andi	r18, 0x03	; 3
    59fe:	21 50       	subi	r18, 0x01	; 1
    5a00:	02 c0       	rjmp	.+4      	; 0x5a06 <disk_ioctl+0x208>
    5a02:	88 0f       	add	r24, r24
    5a04:	99 1f       	adc	r25, r25
    5a06:	2a 95       	dec	r18
    5a08:	e2 f7       	brpl	.-8      	; 0x5a02 <disk_ioctl+0x204>
    5a0a:	a0 e0       	ldi	r26, 0x00	; 0
    5a0c:	b0 e0       	ldi	r27, 0x00	; 0
    5a0e:	f8 01       	movw	r30, r16
    5a10:	80 83       	st	Z, r24
    5a12:	91 83       	std	Z+1, r25	; 0x01
    5a14:	a2 83       	std	Z+2, r26	; 0x02
    5a16:	b3 83       	std	Z+3, r27	; 0x03
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
					}
					res = RES_OK;
    5a18:	10 e0       	ldi	r17, 0x00	; 0
    5a1a:	93 c0       	rjmp	.+294    	; 0x5b42 <disk_ioctl+0x344>
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
					if (CardType & CT_SD1) {	/* SDv1 */
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    5a1c:	8c 85       	ldd	r24, Y+12	; 0x0c
    5a1e:	28 2f       	mov	r18, r24
    5a20:	23 70       	andi	r18, 0x03	; 3
    5a22:	82 95       	swap	r24
    5a24:	86 95       	lsr	r24
    5a26:	87 70       	andi	r24, 0x07	; 7
    5a28:	90 e0       	ldi	r25, 0x00	; 0
    5a2a:	f8 e0       	ldi	r31, 0x08	; 8
    5a2c:	2f 9f       	mul	r18, r31
    5a2e:	80 0d       	add	r24, r0
    5a30:	91 1d       	adc	r25, r1
    5a32:	11 24       	eor	r1, r1
    5a34:	01 96       	adiw	r24, 0x01	; 1
    5a36:	2b 85       	ldd	r18, Y+11	; 0x0b
    5a38:	2c 77       	andi	r18, 0x7C	; 124
    5a3a:	30 e0       	ldi	r19, 0x00	; 0
    5a3c:	35 95       	asr	r19
    5a3e:	27 95       	ror	r18
    5a40:	35 95       	asr	r19
    5a42:	27 95       	ror	r18
    5a44:	2f 5f       	subi	r18, 0xFF	; 255
    5a46:	3f 4f       	sbci	r19, 0xFF	; 255
    5a48:	82 9f       	mul	r24, r18
    5a4a:	a0 01       	movw	r20, r0
    5a4c:	83 9f       	mul	r24, r19
    5a4e:	50 0d       	add	r21, r0
    5a50:	92 9f       	mul	r25, r18
    5a52:	50 0d       	add	r21, r0
    5a54:	11 24       	eor	r1, r1
    5a56:	ca 01       	movw	r24, r20
    5a58:	a0 e0       	ldi	r26, 0x00	; 0
    5a5a:	b0 e0       	ldi	r27, 0x00	; 0
    5a5c:	f8 01       	movw	r30, r16
    5a5e:	80 83       	st	Z, r24
    5a60:	91 83       	std	Z+1, r25	; 0x01
    5a62:	a2 83       	std	Z+2, r26	; 0x02
    5a64:	b3 83       	std	Z+3, r27	; 0x03
					}
					res = RES_OK;
    5a66:	10 e0       	ldi	r17, 0x00	; 0
    5a68:	6c c0       	rjmp	.+216    	; 0x5b42 <disk_ioctl+0x344>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    5a6a:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <CardType>
    5a6e:	fa 01       	movw	r30, r20
    5a70:	80 83       	st	Z, r24
			res = RES_OK;
    5a72:	10 e0       	ldi	r17, 0x00	; 0
			break;
    5a74:	66 c0       	rjmp	.+204    	; 0x5b42 <disk_ioctl+0x344>

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    5a76:	40 e0       	ldi	r20, 0x00	; 0
    5a78:	50 e0       	ldi	r21, 0x00	; 0
    5a7a:	ba 01       	movw	r22, r20
    5a7c:	89 e0       	ldi	r24, 0x09	; 9
    5a7e:	0e 94 24 2a 	call	0x5448	; 0x5448 <send_cmd>
    5a82:	81 11       	cpse	r24, r1
    5a84:	57 c0       	rjmp	.+174    	; 0x5b34 <disk_ioctl+0x336>
				&& rcvr_datablock(ptr, 16))
    5a86:	60 e1       	ldi	r22, 0x10	; 16
    5a88:	70 e0       	ldi	r23, 0x00	; 0
    5a8a:	c8 01       	movw	r24, r16
    5a8c:	0e 94 a6 29 	call	0x534c	; 0x534c <rcvr_datablock>

		switch (ctrl) {
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
				deselect();
				res = RES_OK;
    5a90:	11 e0       	ldi	r17, 0x01	; 1
    5a92:	89 2b       	or	r24, r25
    5a94:	09 f4       	brne	.+2      	; 0x5a98 <disk_ioctl+0x29a>
    5a96:	55 c0       	rjmp	.+170    	; 0x5b42 <disk_ioctl+0x344>
    5a98:	10 e0       	ldi	r17, 0x00	; 0
    5a9a:	53 c0       	rjmp	.+166    	; 0x5b42 <disk_ioctl+0x344>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    5a9c:	40 e0       	ldi	r20, 0x00	; 0
    5a9e:	50 e0       	ldi	r21, 0x00	; 0
    5aa0:	ba 01       	movw	r22, r20
    5aa2:	8a e0       	ldi	r24, 0x0A	; 10
    5aa4:	0e 94 24 2a 	call	0x5448	; 0x5448 <send_cmd>
    5aa8:	81 11       	cpse	r24, r1
    5aaa:	46 c0       	rjmp	.+140    	; 0x5b38 <disk_ioctl+0x33a>
				&& rcvr_datablock(ptr, 16))
    5aac:	60 e1       	ldi	r22, 0x10	; 16
    5aae:	70 e0       	ldi	r23, 0x00	; 0
    5ab0:	c8 01       	movw	r24, r16
    5ab2:	0e 94 a6 29 	call	0x534c	; 0x534c <rcvr_datablock>

		switch (ctrl) {
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
				deselect();
				res = RES_OK;
    5ab6:	11 e0       	ldi	r17, 0x01	; 1
    5ab8:	89 2b       	or	r24, r25
    5aba:	09 f4       	brne	.+2      	; 0x5abe <disk_ioctl+0x2c0>
    5abc:	42 c0       	rjmp	.+132    	; 0x5b42 <disk_ioctl+0x344>
    5abe:	10 e0       	ldi	r17, 0x00	; 0
    5ac0:	40 c0       	rjmp	.+128    	; 0x5b42 <disk_ioctl+0x344>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    5ac2:	40 e0       	ldi	r20, 0x00	; 0
    5ac4:	50 e0       	ldi	r21, 0x00	; 0
    5ac6:	ba 01       	movw	r22, r20
    5ac8:	8a e3       	ldi	r24, 0x3A	; 58
    5aca:	0e 94 24 2a 	call	0x5448	; 0x5448 <send_cmd>
    5ace:	81 11       	cpse	r24, r1
    5ad0:	35 c0       	rjmp	.+106    	; 0x5b3c <disk_ioctl+0x33e>
    5ad2:	78 01       	movw	r14, r16
    5ad4:	0c 5f       	subi	r16, 0xFC	; 252
    5ad6:	1f 4f       	sbci	r17, 0xFF	; 255
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    5ad8:	0e 94 78 29 	call	0x52f0	; 0x52f0 <rcvr_spi>
    5adc:	f7 01       	movw	r30, r14
    5ade:	81 93       	st	Z+, r24
    5ae0:	7f 01       	movw	r14, r30
    5ae2:	0e 17       	cp	r16, r30
    5ae4:	1f 07       	cpc	r17, r31
    5ae6:	c1 f7       	brne	.-16     	; 0x5ad8 <disk_ioctl+0x2da>
				res = RES_OK;
    5ae8:	10 e0       	ldi	r17, 0x00	; 0
    5aea:	2b c0       	rjmp	.+86     	; 0x5b42 <disk_ioctl+0x344>
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    5aec:	40 e0       	ldi	r20, 0x00	; 0
    5aee:	50 e0       	ldi	r21, 0x00	; 0
    5af0:	ba 01       	movw	r22, r20
    5af2:	8d e8       	ldi	r24, 0x8D	; 141
    5af4:	0e 94 24 2a 	call	0x5448	; 0x5448 <send_cmd>
    5af8:	81 11       	cpse	r24, r1
    5afa:	22 c0       	rjmp	.+68     	; 0x5b40 <disk_ioctl+0x342>
				rcvr_spi();
    5afc:	0e 94 78 29 	call	0x52f0	; 0x52f0 <rcvr_spi>
				if (rcvr_datablock(ptr, 64))
    5b00:	60 e4       	ldi	r22, 0x40	; 64
    5b02:	70 e0       	ldi	r23, 0x00	; 0
    5b04:	c8 01       	movw	r24, r16
    5b06:	0e 94 a6 29 	call	0x534c	; 0x534c <rcvr_datablock>

		switch (ctrl) {
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
				deselect();
				res = RES_OK;
    5b0a:	11 e0       	ldi	r17, 0x01	; 1
    5b0c:	89 2b       	or	r24, r25
    5b0e:	c9 f0       	breq	.+50     	; 0x5b42 <disk_ioctl+0x344>
    5b10:	10 e0       	ldi	r17, 0x00	; 0
    5b12:	17 c0       	rjmp	.+46     	; 0x5b42 <disk_ioctl+0x344>
					res = RES_OK;
			}
			break;

		default:
			res = RES_PARERR;
    5b14:	14 e0       	ldi	r17, 0x04	; 4
    5b16:	15 c0       	rjmp	.+42     	; 0x5b42 <disk_ioctl+0x344>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
    5b18:	11 e0       	ldi	r17, 0x01	; 1
    5b1a:	13 c0       	rjmp	.+38     	; 0x5b42 <disk_ioctl+0x344>
    5b1c:	11 e0       	ldi	r17, 0x01	; 1
    5b1e:	11 c0       	rjmp	.+34     	; 0x5b42 <disk_ioctl+0x344>
    5b20:	11 e0       	ldi	r17, 0x01	; 1
    5b22:	0f c0       	rjmp	.+30     	; 0x5b42 <disk_ioctl+0x344>
    5b24:	11 e0       	ldi	r17, 0x01	; 1
    5b26:	0d c0       	rjmp	.+26     	; 0x5b42 <disk_ioctl+0x344>
    5b28:	11 e0       	ldi	r17, 0x01	; 1
    5b2a:	0b c0       	rjmp	.+22     	; 0x5b42 <disk_ioctl+0x344>
    5b2c:	11 e0       	ldi	r17, 0x01	; 1
    5b2e:	09 c0       	rjmp	.+18     	; 0x5b42 <disk_ioctl+0x344>
    5b30:	11 e0       	ldi	r17, 0x01	; 1
    5b32:	07 c0       	rjmp	.+14     	; 0x5b42 <disk_ioctl+0x344>
    5b34:	11 e0       	ldi	r17, 0x01	; 1
    5b36:	05 c0       	rjmp	.+10     	; 0x5b42 <disk_ioctl+0x344>
    5b38:	11 e0       	ldi	r17, 0x01	; 1
    5b3a:	03 c0       	rjmp	.+6      	; 0x5b42 <disk_ioctl+0x344>
    5b3c:	11 e0       	ldi	r17, 0x01	; 1
    5b3e:	01 c0       	rjmp	.+2      	; 0x5b42 <disk_ioctl+0x344>
    5b40:	11 e0       	ldi	r17, 0x01	; 1

		default:
			res = RES_PARERR;
		}

		deselect();
    5b42:	0e 94 91 29 	call	0x5322	; 0x5322 <deselect>
    5b46:	81 2f       	mov	r24, r17
    5b48:	05 c0       	rjmp	.+10     	; 0x5b54 <disk_ioctl+0x356>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
    5b4a:	84 e0       	ldi	r24, 0x04	; 4
    5b4c:	03 c0       	rjmp	.+6      	; 0x5b54 <disk_ioctl+0x356>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
			res = RES_OK;
			break;
		default :
			res = RES_PARERR;
    5b4e:	84 e0       	ldi	r24, 0x04	; 4
    5b50:	01 c0       	rjmp	.+2      	; 0x5b54 <disk_ioctl+0x356>
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    5b52:	83 e0       	ldi	r24, 0x03	; 3

		deselect();
	}

	return res;
}
    5b54:	60 96       	adiw	r28, 0x10	; 16
    5b56:	0f b6       	in	r0, 0x3f	; 63
    5b58:	f8 94       	cli
    5b5a:	de bf       	out	0x3e, r29	; 62
    5b5c:	0f be       	out	0x3f, r0	; 63
    5b5e:	cd bf       	out	0x3d, r28	; 61
    5b60:	df 91       	pop	r29
    5b62:	cf 91       	pop	r28
    5b64:	1f 91       	pop	r17
    5b66:	0f 91       	pop	r16
    5b68:	ff 90       	pop	r15
    5b6a:	ef 90       	pop	r14
    5b6c:	08 95       	ret

00005b6e <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;						/* 100Hz decrement timer */
    5b6e:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Timer1>
	if (n) Timer1 = --n;
    5b72:	88 23       	and	r24, r24
    5b74:	19 f0       	breq	.+6      	; 0x5b7c <disk_timerproc+0xe>
    5b76:	81 50       	subi	r24, 0x01	; 1
    5b78:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <Timer1>
	n = Timer2;
    5b7c:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <Timer2>
	if (n) Timer2 = --n;
    5b80:	88 23       	and	r24, r24
    5b82:	19 f0       	breq	.+6      	; 0x5b8a <disk_timerproc+0x1c>
    5b84:	81 50       	subi	r24, 0x01	; 1
    5b86:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <Timer2>

	s = Stat;
    5b8a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
	//else					/* Write enabled */
		s &= ~STA_PROTECT;
	//if ( (SOCKINS & SOCKPORT))			/* Card inserted */
	//	s |= (STA_NODISK | STA_NOINIT);
	//else					/* Socket empty */ 
		s &= ~STA_NODISK;
    5b8e:	89 7f       	andi	r24, 0xF9	; 249
	Stat = s;
    5b90:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Stat>
    5b94:	08 95       	ret

00005b96 <setSNDFile>:
 * Created: 12.09.2019 20:59:08
 *  Author: Tomek
 */ 
#include "SNDFile.h"

FRESULT setSNDFile(struct SNDFile *sf,char *name,struct family_entry *fam,struct sound_entry *snd){
    5b96:	8f 92       	push	r8
    5b98:	9f 92       	push	r9
    5b9a:	af 92       	push	r10
    5b9c:	bf 92       	push	r11
    5b9e:	cf 92       	push	r12
    5ba0:	df 92       	push	r13
    5ba2:	ff 92       	push	r15
    5ba4:	0f 93       	push	r16
    5ba6:	1f 93       	push	r17
    5ba8:	cf 93       	push	r28
    5baa:	df 93       	push	r29
    5bac:	00 d0       	rcall	.+0      	; 0x5bae <setSNDFile+0x18>
    5bae:	cd b7       	in	r28, 0x3d	; 61
    5bb0:	de b7       	in	r29, 0x3e	; 62
    5bb2:	8c 01       	movw	r16, r24
    5bb4:	6b 01       	movw	r12, r22
    5bb6:	4a 01       	movw	r8, r20
    5bb8:	59 01       	movw	r10, r18
	FRESULT res;
	UINT numOfBytes;
	if((res = f_open(&sf->_fd,name,FA_READ)) != FR_OK){
    5bba:	41 e0       	ldi	r20, 0x01	; 1
    5bbc:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <f_open>
    5bc0:	f8 2e       	mov	r15, r24
    5bc2:	88 23       	and	r24, r24
    5bc4:	51 f0       	breq	.+20     	; 0x5bda <setSNDFile+0x44>
		lcdPrintData(getLCDString(OPN_NO,OPN_NO_LEN),OPN_NO_LEN);
    5bc6:	6b e0       	ldi	r22, 0x0B	; 11
    5bc8:	8b e4       	ldi	r24, 0x4B	; 75
    5bca:	90 e0       	ldi	r25, 0x00	; 0
    5bcc:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <getLCDString>
    5bd0:	6b e0       	ldi	r22, 0x0B	; 11
    5bd2:	0e 94 b7 1c 	call	0x396e	; 0x396e <lcdPrintData>
		return res;
    5bd6:	8f 2d       	mov	r24, r15
    5bd8:	27 c0       	rjmp	.+78     	; 0x5c28 <setSNDFile+0x92>
	}
	strcpy(sf->_fileName,name);
    5bda:	b6 01       	movw	r22, r12
    5bdc:	c8 01       	movw	r24, r16
    5bde:	81 96       	adiw	r24, 0x21	; 33
    5be0:	0e 94 04 39 	call	0x7208	; 0x7208 <strcpy>
	sf->_fileOpen = TRUE;
    5be4:	81 e0       	ldi	r24, 0x01	; 1
    5be6:	f8 01       	movw	r30, r16
    5be8:	80 a3       	std	Z+32, r24	; 0x20
	// read first sound family and program
	f_lseek(&sf->_fd,0);
    5bea:	40 e0       	ldi	r20, 0x00	; 0
    5bec:	50 e0       	ldi	r21, 0x00	; 0
    5bee:	ba 01       	movw	r22, r20
    5bf0:	c8 01       	movw	r24, r16
    5bf2:	0e 94 be 14 	call	0x297c	; 0x297c <f_lseek>
	f_read(&sf->_fd,fam,sizeof(struct family_entry),&numOfBytes);
    5bf6:	9e 01       	movw	r18, r28
    5bf8:	2f 5f       	subi	r18, 0xFF	; 255
    5bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    5bfc:	48 e1       	ldi	r20, 0x18	; 24
    5bfe:	50 e0       	ldi	r21, 0x00	; 0
    5c00:	b4 01       	movw	r22, r8
    5c02:	c8 01       	movw	r24, r16
    5c04:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
	f_read(&sf->_fd,snd,sizeof(struct sound_entry),&numOfBytes);
    5c08:	9e 01       	movw	r18, r28
    5c0a:	2f 5f       	subi	r18, 0xFF	; 255
    5c0c:	3f 4f       	sbci	r19, 0xFF	; 255
    5c0e:	42 e1       	ldi	r20, 0x12	; 18
    5c10:	50 e0       	ldi	r21, 0x00	; 0
    5c12:	b5 01       	movw	r22, r10
    5c14:	c8 01       	movw	r24, r16
    5c16:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
	f_lseek(&sf->_fd,0);
    5c1a:	40 e0       	ldi	r20, 0x00	; 0
    5c1c:	50 e0       	ldi	r21, 0x00	; 0
    5c1e:	ba 01       	movw	r22, r20
    5c20:	c8 01       	movw	r24, r16
    5c22:	0e 94 be 14 	call	0x297c	; 0x297c <f_lseek>
	return FR_OK;
    5c26:	80 e0       	ldi	r24, 0x00	; 0
}
    5c28:	0f 90       	pop	r0
    5c2a:	0f 90       	pop	r0
    5c2c:	df 91       	pop	r29
    5c2e:	cf 91       	pop	r28
    5c30:	1f 91       	pop	r17
    5c32:	0f 91       	pop	r16
    5c34:	ff 90       	pop	r15
    5c36:	df 90       	pop	r13
    5c38:	cf 90       	pop	r12
    5c3a:	bf 90       	pop	r11
    5c3c:	af 90       	pop	r10
    5c3e:	9f 90       	pop	r9
    5c40:	8f 90       	pop	r8
    5c42:	08 95       	ret

00005c44 <closeSNDFile>:

FRESULT closeSNDFile(struct SNDFile *sf){
    5c44:	cf 93       	push	r28
    5c46:	df 93       	push	r29
	FRESULT res;
	if(sf->_fileOpen == FALSE)
    5c48:	fc 01       	movw	r30, r24
    5c4a:	20 a1       	ldd	r18, Z+32	; 0x20
    5c4c:	22 23       	and	r18, r18
    5c4e:	39 f0       	breq	.+14     	; 0x5c5e <closeSNDFile+0x1a>
    5c50:	ec 01       	movw	r28, r24
		return FR_INVALID_OBJECT;
	if((res = f_close(&sf->_fd)) != FR_OK)
    5c52:	0e 94 71 13 	call	0x26e2	; 0x26e2 <f_close>
    5c56:	81 11       	cpse	r24, r1
    5c58:	03 c0       	rjmp	.+6      	; 0x5c60 <closeSNDFile+0x1c>
		return res;
	sf->_fileOpen = FALSE;
    5c5a:	18 a2       	std	Y+32, r1	; 0x20
	return FR_OK;
    5c5c:	01 c0       	rjmp	.+2      	; 0x5c60 <closeSNDFile+0x1c>
}

FRESULT closeSNDFile(struct SNDFile *sf){
	FRESULT res;
	if(sf->_fileOpen == FALSE)
		return FR_INVALID_OBJECT;
    5c5e:	89 e0       	ldi	r24, 0x09	; 9
	if((res = f_close(&sf->_fd)) != FR_OK)
		return res;
	sf->_fileOpen = FALSE;
	return FR_OK;
}
    5c60:	df 91       	pop	r29
    5c62:	cf 91       	pop	r28
    5c64:	08 95       	ret

00005c66 <scrollSoundList>:

void scrollSoundList(struct SNDFile *sptr,INPUT joy, struct family_entry *fam, struct sound_entry *snd){
    5c66:	4f 92       	push	r4
    5c68:	5f 92       	push	r5
    5c6a:	6f 92       	push	r6
    5c6c:	7f 92       	push	r7
    5c6e:	bf 92       	push	r11
    5c70:	cf 92       	push	r12
    5c72:	df 92       	push	r13
    5c74:	ef 92       	push	r14
    5c76:	ff 92       	push	r15
    5c78:	0f 93       	push	r16
    5c7a:	1f 93       	push	r17
    5c7c:	cf 93       	push	r28
    5c7e:	df 93       	push	r29
    5c80:	00 d0       	rcall	.+0      	; 0x5c82 <scrollSoundList+0x1c>
    5c82:	cd b7       	in	r28, 0x3d	; 61
    5c84:	de b7       	in	r29, 0x3e	; 62
    5c86:	8c 01       	movw	r16, r24
    5c88:	b6 2e       	mov	r11, r22
    5c8a:	7a 01       	movw	r14, r20
    5c8c:	69 01       	movw	r12, r18
	UINT numOfBytes;
	sptr->next_family = sptr->current_family + sizeof(struct family_entry) + fam->current_sounds * sizeof(struct sound_entry);
    5c8e:	fc 01       	movw	r30, r24
    5c90:	42 a9       	ldd	r20, Z+50	; 0x32
    5c92:	53 a9       	ldd	r21, Z+51	; 0x33
    5c94:	64 a9       	ldd	r22, Z+52	; 0x34
    5c96:	75 a9       	ldd	r23, Z+53	; 0x35
    5c98:	f7 01       	movw	r30, r14
    5c9a:	84 81       	ldd	r24, Z+4	; 0x04
    5c9c:	95 81       	ldd	r25, Z+5	; 0x05
    5c9e:	a6 81       	ldd	r26, Z+6	; 0x06
    5ca0:	b7 81       	ldd	r27, Z+7	; 0x07
    5ca2:	2c 01       	movw	r4, r24
    5ca4:	3d 01       	movw	r6, r26
    5ca6:	44 0c       	add	r4, r4
    5ca8:	55 1c       	adc	r5, r5
    5caa:	66 1c       	adc	r6, r6
    5cac:	77 1c       	adc	r7, r7
    5cae:	44 0c       	add	r4, r4
    5cb0:	55 1c       	adc	r5, r5
    5cb2:	66 1c       	adc	r6, r6
    5cb4:	77 1c       	adc	r7, r7
    5cb6:	44 0c       	add	r4, r4
    5cb8:	55 1c       	adc	r5, r5
    5cba:	66 1c       	adc	r6, r6
    5cbc:	77 1c       	adc	r7, r7
    5cbe:	84 0d       	add	r24, r4
    5cc0:	95 1d       	adc	r25, r5
    5cc2:	a6 1d       	adc	r26, r6
    5cc4:	b7 1d       	adc	r27, r7
    5cc6:	88 0f       	add	r24, r24
    5cc8:	99 1f       	adc	r25, r25
    5cca:	aa 1f       	adc	r26, r26
    5ccc:	bb 1f       	adc	r27, r27
    5cce:	2a 01       	movw	r4, r20
    5cd0:	3b 01       	movw	r6, r22
    5cd2:	f8 e1       	ldi	r31, 0x18	; 24
    5cd4:	4f 0e       	add	r4, r31
    5cd6:	51 1c       	adc	r5, r1
    5cd8:	61 1c       	adc	r6, r1
    5cda:	71 1c       	adc	r7, r1
    5cdc:	84 0d       	add	r24, r4
    5cde:	95 1d       	adc	r25, r5
    5ce0:	a6 1d       	adc	r26, r6
    5ce2:	b7 1d       	adc	r27, r7
    5ce4:	f8 01       	movw	r30, r16
    5ce6:	86 ab       	std	Z+54, r24	; 0x36
    5ce8:	97 ab       	std	Z+55, r25	; 0x37
    5cea:	a0 af       	std	Z+56, r26	; 0x38
    5cec:	b1 af       	std	Z+57, r27	; 0x39
	if(fam->previous_sounds != 0)
    5cee:	f7 01       	movw	r30, r14
    5cf0:	80 81       	ld	r24, Z
    5cf2:	91 81       	ldd	r25, Z+1	; 0x01
    5cf4:	a2 81       	ldd	r26, Z+2	; 0x02
    5cf6:	b3 81       	ldd	r27, Z+3	; 0x03
    5cf8:	00 97       	sbiw	r24, 0x00	; 0
    5cfa:	a1 05       	cpc	r26, r1
    5cfc:	b1 05       	cpc	r27, r1
    5cfe:	19 f1       	breq	.+70     	; 0x5d46 <scrollSoundList+0xe0>
	sptr->previous_family = sptr->current_family - fam->previous_sounds * sizeof(struct sound_entry) - sizeof(struct family_entry);
    5d00:	48 51       	subi	r20, 0x18	; 24
    5d02:	51 09       	sbc	r21, r1
    5d04:	61 09       	sbc	r22, r1
    5d06:	71 09       	sbc	r23, r1
    5d08:	2c 01       	movw	r4, r24
    5d0a:	3d 01       	movw	r6, r26
    5d0c:	44 0c       	add	r4, r4
    5d0e:	55 1c       	adc	r5, r5
    5d10:	66 1c       	adc	r6, r6
    5d12:	77 1c       	adc	r7, r7
    5d14:	44 0c       	add	r4, r4
    5d16:	55 1c       	adc	r5, r5
    5d18:	66 1c       	adc	r6, r6
    5d1a:	77 1c       	adc	r7, r7
    5d1c:	44 0c       	add	r4, r4
    5d1e:	55 1c       	adc	r5, r5
    5d20:	66 1c       	adc	r6, r6
    5d22:	77 1c       	adc	r7, r7
    5d24:	84 0d       	add	r24, r4
    5d26:	95 1d       	adc	r25, r5
    5d28:	a6 1d       	adc	r26, r6
    5d2a:	b7 1d       	adc	r27, r7
    5d2c:	88 0f       	add	r24, r24
    5d2e:	99 1f       	adc	r25, r25
    5d30:	aa 1f       	adc	r26, r26
    5d32:	bb 1f       	adc	r27, r27
    5d34:	48 1b       	sub	r20, r24
    5d36:	59 0b       	sbc	r21, r25
    5d38:	6a 0b       	sbc	r22, r26
    5d3a:	7b 0b       	sbc	r23, r27
    5d3c:	f8 01       	movw	r30, r16
    5d3e:	46 a7       	std	Z+46, r20	; 0x2e
    5d40:	57 a7       	std	Z+47, r21	; 0x2f
    5d42:	60 ab       	std	Z+48, r22	; 0x30
    5d44:	71 ab       	std	Z+49, r23	; 0x31
	lcdClear();
    5d46:	0e 94 23 1c 	call	0x3846	; 0x3846 <lcdClear>
	switch(joy){
    5d4a:	f5 e0       	ldi	r31, 0x05	; 5
    5d4c:	bf 16       	cp	r11, r31
    5d4e:	c9 f0       	breq	.+50     	; 0x5d82 <scrollSoundList+0x11c>
    5d50:	fb 15       	cp	r31, r11
    5d52:	24 f0       	brlt	.+8      	; 0x5d5c <scrollSoundList+0xf6>
    5d54:	24 e0       	ldi	r18, 0x04	; 4
    5d56:	b2 16       	cp	r11, r18
    5d58:	51 f1       	breq	.+84     	; 0x5dae <scrollSoundList+0x148>
    5d5a:	55 c0       	rjmp	.+170    	; 0x5e06 <scrollSoundList+0x1a0>
    5d5c:	86 e0       	ldi	r24, 0x06	; 6
    5d5e:	b8 16       	cp	r11, r24
    5d60:	b9 f1       	breq	.+110    	; 0x5dd0 <scrollSoundList+0x16a>
    5d62:	e7 e0       	ldi	r30, 0x07	; 7
    5d64:	be 12       	cpse	r11, r30
    5d66:	4f c0       	rjmp	.+158    	; 0x5e06 <scrollSoundList+0x1a0>
		break;
		case JOY_PRESS:
		break;
		case NONE: break;
		case JOY_LEFT:
		sptr->current_sound = 0;
    5d68:	f8 01       	movw	r30, r16
    5d6a:	12 ae       	std	Z+58, r1	; 0x3a
    5d6c:	13 ae       	std	Z+59, r1	; 0x3b
    5d6e:	14 ae       	std	Z+60, r1	; 0x3c
    5d70:	15 ae       	std	Z+61, r1	; 0x3d
		f_lseek(&sptr->_fd,sptr->previous_family);
    5d72:	46 a5       	ldd	r20, Z+46	; 0x2e
    5d74:	57 a5       	ldd	r21, Z+47	; 0x2f
    5d76:	60 a9       	ldd	r22, Z+48	; 0x30
    5d78:	71 a9       	ldd	r23, Z+49	; 0x31
    5d7a:	c8 01       	movw	r24, r16
    5d7c:	0e 94 be 14 	call	0x297c	; 0x297c <f_lseek>
		break;
    5d80:	42 c0       	rjmp	.+132    	; 0x5e06 <scrollSoundList+0x1a0>
		case JOY_RIGHT:
		sptr->current_sound = 0;
    5d82:	f8 01       	movw	r30, r16
    5d84:	12 ae       	std	Z+58, r1	; 0x3a
    5d86:	13 ae       	std	Z+59, r1	; 0x3b
    5d88:	14 ae       	std	Z+60, r1	; 0x3c
    5d8a:	15 ae       	std	Z+61, r1	; 0x3d
		if(sptr->next_family < sptr->_fd.fsize)
    5d8c:	46 a9       	ldd	r20, Z+54	; 0x36
    5d8e:	57 a9       	ldd	r21, Z+55	; 0x37
    5d90:	60 ad       	ldd	r22, Z+56	; 0x38
    5d92:	71 ad       	ldd	r23, Z+57	; 0x39
    5d94:	82 85       	ldd	r24, Z+10	; 0x0a
    5d96:	93 85       	ldd	r25, Z+11	; 0x0b
    5d98:	a4 85       	ldd	r26, Z+12	; 0x0c
    5d9a:	b5 85       	ldd	r27, Z+13	; 0x0d
    5d9c:	48 17       	cp	r20, r24
    5d9e:	59 07       	cpc	r21, r25
    5da0:	6a 07       	cpc	r22, r26
    5da2:	7b 07       	cpc	r23, r27
    5da4:	80 f5       	brcc	.+96     	; 0x5e06 <scrollSoundList+0x1a0>
		f_lseek(&sptr->_fd,sptr->next_family);
    5da6:	c8 01       	movw	r24, r16
    5da8:	0e 94 be 14 	call	0x297c	; 0x297c <f_lseek>
    5dac:	2c c0       	rjmp	.+88     	; 0x5e06 <scrollSoundList+0x1a0>
		break;
		case JOY_UP:
		if(sptr->current_sound > 0)
    5dae:	f8 01       	movw	r30, r16
    5db0:	82 ad       	ldd	r24, Z+58	; 0x3a
    5db2:	93 ad       	ldd	r25, Z+59	; 0x3b
    5db4:	a4 ad       	ldd	r26, Z+60	; 0x3c
    5db6:	b5 ad       	ldd	r27, Z+61	; 0x3d
    5db8:	00 97       	sbiw	r24, 0x00	; 0
    5dba:	a1 05       	cpc	r26, r1
    5dbc:	b1 05       	cpc	r27, r1
    5dbe:	19 f1       	breq	.+70     	; 0x5e06 <scrollSoundList+0x1a0>
		sptr->current_sound--;
    5dc0:	01 97       	sbiw	r24, 0x01	; 1
    5dc2:	a1 09       	sbc	r26, r1
    5dc4:	b1 09       	sbc	r27, r1
    5dc6:	82 af       	std	Z+58, r24	; 0x3a
    5dc8:	93 af       	std	Z+59, r25	; 0x3b
    5dca:	a4 af       	std	Z+60, r26	; 0x3c
    5dcc:	b5 af       	std	Z+61, r27	; 0x3d
    5dce:	1b c0       	rjmp	.+54     	; 0x5e06 <scrollSoundList+0x1a0>
		break;
		case JOY_DOWN:
		if(sptr->current_sound < (fam->current_sounds - 1))
    5dd0:	f8 01       	movw	r30, r16
    5dd2:	42 ad       	ldd	r20, Z+58	; 0x3a
    5dd4:	53 ad       	ldd	r21, Z+59	; 0x3b
    5dd6:	64 ad       	ldd	r22, Z+60	; 0x3c
    5dd8:	75 ad       	ldd	r23, Z+61	; 0x3d
    5dda:	f7 01       	movw	r30, r14
    5ddc:	84 81       	ldd	r24, Z+4	; 0x04
    5dde:	95 81       	ldd	r25, Z+5	; 0x05
    5de0:	a6 81       	ldd	r26, Z+6	; 0x06
    5de2:	b7 81       	ldd	r27, Z+7	; 0x07
    5de4:	01 97       	sbiw	r24, 0x01	; 1
    5de6:	a1 09       	sbc	r26, r1
    5de8:	b1 09       	sbc	r27, r1
    5dea:	48 17       	cp	r20, r24
    5dec:	59 07       	cpc	r21, r25
    5dee:	6a 07       	cpc	r22, r26
    5df0:	7b 07       	cpc	r23, r27
    5df2:	48 f4       	brcc	.+18     	; 0x5e06 <scrollSoundList+0x1a0>
		sptr->current_sound++;
    5df4:	4f 5f       	subi	r20, 0xFF	; 255
    5df6:	5f 4f       	sbci	r21, 0xFF	; 255
    5df8:	6f 4f       	sbci	r22, 0xFF	; 255
    5dfa:	7f 4f       	sbci	r23, 0xFF	; 255
    5dfc:	f8 01       	movw	r30, r16
    5dfe:	42 af       	std	Z+58, r20	; 0x3a
    5e00:	53 af       	std	Z+59, r21	; 0x3b
    5e02:	64 af       	std	Z+60, r22	; 0x3c
    5e04:	75 af       	std	Z+61, r23	; 0x3d
		break;

	}

	sptr->current_family = f_tell(&sptr->_fd);
    5e06:	f8 01       	movw	r30, r16
    5e08:	86 81       	ldd	r24, Z+6	; 0x06
    5e0a:	97 81       	ldd	r25, Z+7	; 0x07
    5e0c:	a0 85       	ldd	r26, Z+8	; 0x08
    5e0e:	b1 85       	ldd	r27, Z+9	; 0x09
    5e10:	82 ab       	std	Z+50, r24	; 0x32
    5e12:	93 ab       	std	Z+51, r25	; 0x33
    5e14:	a4 ab       	std	Z+52, r26	; 0x34
    5e16:	b5 ab       	std	Z+53, r27	; 0x35
	f_read(&sptr->_fd,fam,sizeof(struct family_entry),&numOfBytes);
    5e18:	9e 01       	movw	r18, r28
    5e1a:	2f 5f       	subi	r18, 0xFF	; 255
    5e1c:	3f 4f       	sbci	r19, 0xFF	; 255
    5e1e:	48 e1       	ldi	r20, 0x18	; 24
    5e20:	50 e0       	ldi	r21, 0x00	; 0
    5e22:	b7 01       	movw	r22, r14
    5e24:	c8 01       	movw	r24, r16
    5e26:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
	lcdGotoXY(0,0);
    5e2a:	60 e0       	ldi	r22, 0x00	; 0
    5e2c:	80 e0       	ldi	r24, 0x00	; 0
    5e2e:	0e 94 27 1c 	call	0x384e	; 0x384e <lcdGotoXY>
	lcdPrintData(fam->name,strlen(fam->name));
    5e32:	c7 01       	movw	r24, r14
    5e34:	08 96       	adiw	r24, 0x08	; 8
    5e36:	fc 01       	movw	r30, r24
    5e38:	01 90       	ld	r0, Z+
    5e3a:	00 20       	and	r0, r0
    5e3c:	e9 f7       	brne	.-6      	; 0x5e38 <scrollSoundList+0x1d2>
    5e3e:	31 97       	sbiw	r30, 0x01	; 1
    5e40:	bf 01       	movw	r22, r30
    5e42:	68 1b       	sub	r22, r24
    5e44:	79 0b       	sbc	r23, r25
    5e46:	0e 94 b7 1c 	call	0x396e	; 0x396e <lcdPrintData>
	f_lseek(&sptr->_fd,sptr->current_family + sizeof(struct family_entry) + sptr->current_sound * sizeof(struct sound_entry));
    5e4a:	f8 01       	movw	r30, r16
    5e4c:	82 ad       	ldd	r24, Z+58	; 0x3a
    5e4e:	93 ad       	ldd	r25, Z+59	; 0x3b
    5e50:	a4 ad       	ldd	r26, Z+60	; 0x3c
    5e52:	b5 ad       	ldd	r27, Z+61	; 0x3d
    5e54:	ac 01       	movw	r20, r24
    5e56:	bd 01       	movw	r22, r26
    5e58:	44 0f       	add	r20, r20
    5e5a:	55 1f       	adc	r21, r21
    5e5c:	66 1f       	adc	r22, r22
    5e5e:	77 1f       	adc	r23, r23
    5e60:	44 0f       	add	r20, r20
    5e62:	55 1f       	adc	r21, r21
    5e64:	66 1f       	adc	r22, r22
    5e66:	77 1f       	adc	r23, r23
    5e68:	44 0f       	add	r20, r20
    5e6a:	55 1f       	adc	r21, r21
    5e6c:	66 1f       	adc	r22, r22
    5e6e:	77 1f       	adc	r23, r23
    5e70:	84 0f       	add	r24, r20
    5e72:	95 1f       	adc	r25, r21
    5e74:	a6 1f       	adc	r26, r22
    5e76:	b7 1f       	adc	r27, r23
    5e78:	88 0f       	add	r24, r24
    5e7a:	99 1f       	adc	r25, r25
    5e7c:	aa 1f       	adc	r26, r26
    5e7e:	bb 1f       	adc	r27, r27
    5e80:	42 a9       	ldd	r20, Z+50	; 0x32
    5e82:	53 a9       	ldd	r21, Z+51	; 0x33
    5e84:	64 a9       	ldd	r22, Z+52	; 0x34
    5e86:	75 a9       	ldd	r23, Z+53	; 0x35
    5e88:	48 5e       	subi	r20, 0xE8	; 232
    5e8a:	5f 4f       	sbci	r21, 0xFF	; 255
    5e8c:	6f 4f       	sbci	r22, 0xFF	; 255
    5e8e:	7f 4f       	sbci	r23, 0xFF	; 255
    5e90:	48 0f       	add	r20, r24
    5e92:	59 1f       	adc	r21, r25
    5e94:	6a 1f       	adc	r22, r26
    5e96:	7b 1f       	adc	r23, r27
    5e98:	c8 01       	movw	r24, r16
    5e9a:	0e 94 be 14 	call	0x297c	; 0x297c <f_lseek>
	f_read(&sptr->_fd,snd,sizeof(struct sound_entry),&numOfBytes);
    5e9e:	9e 01       	movw	r18, r28
    5ea0:	2f 5f       	subi	r18, 0xFF	; 255
    5ea2:	3f 4f       	sbci	r19, 0xFF	; 255
    5ea4:	42 e1       	ldi	r20, 0x12	; 18
    5ea6:	50 e0       	ldi	r21, 0x00	; 0
    5ea8:	b6 01       	movw	r22, r12
    5eaa:	c8 01       	movw	r24, r16
    5eac:	0e 94 2e 10 	call	0x205c	; 0x205c <f_read>
	f_lseek(&sptr->_fd,sptr->current_family);
    5eb0:	f8 01       	movw	r30, r16
    5eb2:	42 a9       	ldd	r20, Z+50	; 0x32
    5eb4:	53 a9       	ldd	r21, Z+51	; 0x33
    5eb6:	64 a9       	ldd	r22, Z+52	; 0x34
    5eb8:	75 a9       	ldd	r23, Z+53	; 0x35
    5eba:	c8 01       	movw	r24, r16
    5ebc:	0e 94 be 14 	call	0x297c	; 0x297c <f_lseek>
	lcdGotoXY(0,1);
    5ec0:	61 e0       	ldi	r22, 0x01	; 1
    5ec2:	80 e0       	ldi	r24, 0x00	; 0
    5ec4:	0e 94 27 1c 	call	0x384e	; 0x384e <lcdGotoXY>
	lcdPrintData(snd->name,strlen(snd->name));
    5ec8:	c6 01       	movw	r24, r12
    5eca:	02 96       	adiw	r24, 0x02	; 2
    5ecc:	fc 01       	movw	r30, r24
    5ece:	01 90       	ld	r0, Z+
    5ed0:	00 20       	and	r0, r0
    5ed2:	e9 f7       	brne	.-6      	; 0x5ece <scrollSoundList+0x268>
    5ed4:	31 97       	sbiw	r30, 0x01	; 1
    5ed6:	bf 01       	movw	r22, r30
    5ed8:	68 1b       	sub	r22, r24
    5eda:	79 0b       	sbc	r23, r25
    5edc:	0e 94 b7 1c 	call	0x396e	; 0x396e <lcdPrintData>
	
    5ee0:	0f 90       	pop	r0
    5ee2:	0f 90       	pop	r0
    5ee4:	df 91       	pop	r29
    5ee6:	cf 91       	pop	r28
    5ee8:	1f 91       	pop	r17
    5eea:	0f 91       	pop	r16
    5eec:	ff 90       	pop	r15
    5eee:	ef 90       	pop	r14
    5ef0:	df 90       	pop	r13
    5ef2:	cf 90       	pop	r12
    5ef4:	bf 90       	pop	r11
    5ef6:	7f 90       	pop	r7
    5ef8:	6f 90       	pop	r6
    5efa:	5f 90       	pop	r5
    5efc:	4f 90       	pop	r4
    5efe:	08 95       	ret

00005f00 <spiInit>:
    cbi(DDRB, 4);   // set MISO as input
    sbi(DDRB, 3);   // set MOSI as output
    sbi(DDRB, 2);   // SS must be output for Master mode to work
#else
	// setup SPI I/O pins
	sbi(PORTB, SCK);	// set SCK hi
    5f00:	c7 9a       	sbi	0x18, 7	; 24
	sbi(PORTB,MISO);	// set pull-up for MISO
    5f02:	c6 9a       	sbi	0x18, 6	; 24
	sbi(DDRB, SCK);	// set SCK as output
    5f04:	bf 9a       	sbi	0x17, 7	; 23
	cbi(DDRB, MISO);	// set MISO as input
    5f06:	be 98       	cbi	0x17, 6	; 23
	sbi(DDRB, MOSI);	// set MOSI as output
    5f08:	bd 9a       	sbi	0x17, 5	; 23
	sbi(DDRB, CS);	// SS must be output for Master mode to work
    5f0a:	bc 9a       	sbi	0x17, 4	; 23
#endif
	
	// setup SPI interface :
	// master mode
	sbi(SPCR, MSTR);
    5f0c:	6c 9a       	sbi	0x0d, 4	; 13
	// clock = f/4
//	cbi(SPCR, SPR0);
//	cbi(SPCR, SPR1);
	// clock = f/16
	sbi(SPCR, SPR0);
    5f0e:	68 9a       	sbi	0x0d, 0	; 13
	sbi(SPCR, SPR1);
    5f10:	69 9a       	sbi	0x0d, 1	; 13
	// select clock phase positive-going in middle of data
	cbi(SPCR, CPOL);
    5f12:	6b 98       	cbi	0x0d, 3	; 13
	// Data order MSB first
	cbi(SPCR,DORD);
    5f14:	6d 98       	cbi	0x0d, 5	; 13
	// enable SPI
	sbi(SPCR, SPE);
    5f16:	6e 9a       	sbi	0x0d, 6	; 13
	//outp((1<<MSTR)|(1<<SPE)|(1<<SPR0), SPCR );
	//outp((1<<CPHA)|(1<<CPOL)|(1<<MSTR)|(1<<SPE)|(1<<SPR0)|(1<<SPR1), SPCR );
	//outp((1<<CPHA)|(1<<MSTR)|(1<<SPE)|(1<<SPR0), SPCR );
	
	// clear status
	inb(SPSR);
    5f18:	8e b1       	in	r24, 0x0e	; 14
	spiTransferComplete = TRUE;
    5f1a:	81 e0       	ldi	r24, 0x01	; 1
    5f1c:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <spiTransferComplete>
    5f20:	08 95       	ret

00005f22 <spiSendByte>:
}
*/
void spiSendByte(u08 data)
{
	// send a byte over SPI and ignore reply
	outb(SPDR, data);
    5f22:	8f b9       	out	0x0f, r24	; 15
	#ifdef SPI_USEINT
		while(!spiTransferComplete);
		spiTransferComplete = FALSE;
	#else
		while(!(inb(SPSR) & (1<<SPIF)));
    5f24:	77 9b       	sbis	0x0e, 7	; 14
    5f26:	fe cf       	rjmp	.-4      	; 0x5f24 <spiSendByte+0x2>
	#endif

	
}
    5f28:	08 95       	ret

00005f2a <spiTransferByte>:
	outb(SPDR, data);
	// wait for transfer to complete
	while(!spiTransferComplete);
	#else
	// send the given data
	outb(SPDR, data);
    5f2a:	8f b9       	out	0x0f, r24	; 15
	// wait for transfer to complete
	while(!(inb(SPSR) & (1<<SPIF)));
    5f2c:	77 9b       	sbis	0x0e, 7	; 14
    5f2e:	fe cf       	rjmp	.-4      	; 0x5f2c <spiTransferByte+0x2>
	#endif
	// return the received data
	return inb(SPDR);
    5f30:	8f b1       	in	r24, 0x0f	; 15
}
    5f32:	08 95       	ret

00005f34 <SRAM_resetReader>:
		//while(!SPI_Rx_Buf_Full);
		*ReadData++ = ReadSPI();
	}
	SRAMDisable(currentSRAM);
	return ReadCnt;			//Return no# of bytes read from SRAM
}
    5f34:	e6 eb       	ldi	r30, 0xB6	; 182
    5f36:	f1 e0       	ldi	r31, 0x01	; 1
    5f38:	10 82       	st	Z, r1
    5f3a:	11 82       	std	Z+1, r1	; 0x01
    5f3c:	12 82       	std	Z+2, r1	; 0x02
    5f3e:	13 82       	std	Z+3, r1	; 0x03
    5f40:	14 82       	std	Z+4, r1	; 0x04
    5f42:	15 82       	std	Z+5, r1	; 0x05
    5f44:	16 82       	std	Z+6, r1	; 0x06
    5f46:	17 82       	std	Z+7, r1	; 0x07
    5f48:	10 86       	std	Z+8, r1	; 0x08
    5f4a:	11 86       	std	Z+9, r1	; 0x09
    5f4c:	12 86       	std	Z+10, r1	; 0x0a
    5f4e:	13 86       	std	Z+11, r1	; 0x0b
    5f50:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <currentSRAM>
    5f54:	08 95       	ret

00005f56 <SRAM_resetWriter>:
    5f56:	e9 ea       	ldi	r30, 0xA9	; 169
    5f58:	f1 e0       	ldi	r31, 0x01	; 1
    5f5a:	10 82       	st	Z, r1
    5f5c:	11 82       	std	Z+1, r1	; 0x01
    5f5e:	12 82       	std	Z+2, r1	; 0x02
    5f60:	13 82       	std	Z+3, r1	; 0x03
    5f62:	14 82       	std	Z+4, r1	; 0x04
    5f64:	15 82       	std	Z+5, r1	; 0x05
    5f66:	16 82       	std	Z+6, r1	; 0x06
    5f68:	17 82       	std	Z+7, r1	; 0x07
    5f6a:	10 86       	std	Z+8, r1	; 0x08
    5f6c:	11 86       	std	Z+9, r1	; 0x09
    5f6e:	12 86       	std	Z+10, r1	; 0x0a
    5f70:	13 86       	std	Z+11, r1	; 0x0b
    5f72:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <currentSRAM>
    5f76:	08 95       	ret

00005f78 <incrementReader>:
    5f78:	09 2e       	mov	r0, r25
    5f7a:	00 0c       	add	r0, r0
    5f7c:	aa 0b       	sbc	r26, r26
    5f7e:	bb 0b       	sbc	r27, r27
    5f80:	40 91 be 01 	lds	r20, 0x01BE	; 0x8001be <currentReader+0x8>
    5f84:	50 91 bf 01 	lds	r21, 0x01BF	; 0x8001bf <currentReader+0x9>
    5f88:	60 91 c0 01 	lds	r22, 0x01C0	; 0x8001c0 <currentReader+0xa>
    5f8c:	70 91 c1 01 	lds	r23, 0x01C1	; 0x8001c1 <currentReader+0xb>
    5f90:	84 0f       	add	r24, r20
    5f92:	95 1f       	adc	r25, r21
    5f94:	a6 1f       	adc	r26, r22
    5f96:	b7 1f       	adc	r27, r23
    5f98:	00 97       	sbiw	r24, 0x00	; 0
    5f9a:	28 e0       	ldi	r18, 0x08	; 8
    5f9c:	a2 07       	cpc	r26, r18
    5f9e:	b1 05       	cpc	r27, r1
    5fa0:	48 f4       	brcc	.+18     	; 0x5fb4 <incrementReader+0x3c>
    5fa2:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <currentReader+0x8>
    5fa6:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <currentReader+0x9>
    5faa:	a0 93 c0 01 	sts	0x01C0, r26	; 0x8001c0 <currentReader+0xa>
    5fae:	b0 93 c1 01 	sts	0x01C1, r27	; 0x8001c1 <currentReader+0xb>
    5fb2:	0a c0       	rjmp	.+20     	; 0x5fc8 <incrementReader+0x50>
    5fb4:	a7 70       	andi	r26, 0x07	; 7
    5fb6:	bb 27       	eor	r27, r27
    5fb8:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <currentReader+0x8>
    5fbc:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <currentReader+0x9>
    5fc0:	a0 93 c0 01 	sts	0x01C0, r26	; 0x8001c0 <currentReader+0xa>
    5fc4:	b0 93 c1 01 	sts	0x01C1, r27	; 0x8001c1 <currentReader+0xb>
    5fc8:	e6 eb       	ldi	r30, 0xB6	; 182
    5fca:	f1 e0       	ldi	r31, 0x01	; 1
    5fcc:	80 85       	ldd	r24, Z+8	; 0x08
    5fce:	91 85       	ldd	r25, Z+9	; 0x09
    5fd0:	a2 85       	ldd	r26, Z+10	; 0x0a
    5fd2:	b3 85       	ldd	r27, Z+11	; 0x0b
    5fd4:	ac 01       	movw	r20, r24
    5fd6:	bd 01       	movw	r22, r26
    5fd8:	61 70       	andi	r22, 0x01	; 1
    5fda:	77 27       	eor	r23, r23
    5fdc:	40 83       	st	Z, r20
    5fde:	51 83       	std	Z+1, r21	; 0x01
    5fe0:	62 83       	std	Z+2, r22	; 0x02
    5fe2:	73 83       	std	Z+3, r23	; 0x03
    5fe4:	ac 01       	movw	r20, r24
    5fe6:	bd 01       	movw	r22, r26
    5fe8:	68 94       	set
    5fea:	14 f8       	bld	r1, 4
    5fec:	76 95       	lsr	r23
    5fee:	67 95       	ror	r22
    5ff0:	57 95       	ror	r21
    5ff2:	47 95       	ror	r20
    5ff4:	16 94       	lsr	r1
    5ff6:	d1 f7       	brne	.-12     	; 0x5fec <incrementReader+0x74>
    5ff8:	5f 70       	andi	r21, 0x0F	; 15
    5ffa:	66 27       	eor	r22, r22
    5ffc:	77 27       	eor	r23, r23
    5ffe:	44 83       	std	Z+4, r20	; 0x04
    6000:	55 83       	std	Z+5, r21	; 0x05
    6002:	66 83       	std	Z+6, r22	; 0x06
    6004:	77 83       	std	Z+7, r23	; 0x07
    6006:	07 2e       	mov	r0, r23
    6008:	71 e1       	ldi	r23, 0x11	; 17
    600a:	b6 95       	lsr	r27
    600c:	a7 95       	ror	r26
    600e:	97 95       	ror	r25
    6010:	87 95       	ror	r24
    6012:	7a 95       	dec	r23
    6014:	d1 f7       	brne	.-12     	; 0x600a <incrementReader+0x92>
    6016:	70 2d       	mov	r23, r0
    6018:	84 87       	std	Z+12, r24	; 0x0c
    601a:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <currentSRAM>
    601e:	08 95       	ret

00006020 <SRAM_seekRead>:
    6020:	cf 93       	push	r28
    6022:	df 93       	push	r29
    6024:	ec 01       	movw	r28, r24
    6026:	61 30       	cpi	r22, 0x01	; 1
    6028:	71 05       	cpc	r23, r1
    602a:	71 f0       	breq	.+28     	; 0x6048 <SRAM_seekRead+0x28>
    602c:	20 f0       	brcs	.+8      	; 0x6036 <SRAM_seekRead+0x16>
    602e:	62 30       	cpi	r22, 0x02	; 2
    6030:	71 05       	cpc	r23, r1
    6032:	39 f0       	breq	.+14     	; 0x6042 <SRAM_seekRead+0x22>
    6034:	11 c0       	rjmp	.+34     	; 0x6058 <SRAM_seekRead+0x38>
    6036:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <SRAM_resetReader>
    603a:	ce 01       	movw	r24, r28
    603c:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <incrementReader>
    6040:	0b c0       	rjmp	.+22     	; 0x6058 <SRAM_seekRead+0x38>
    6042:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <incrementReader>
    6046:	08 c0       	rjmp	.+16     	; 0x6058 <SRAM_seekRead+0x38>
    6048:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <SRAM_resetReader>
    604c:	88 27       	eor	r24, r24
    604e:	99 27       	eor	r25, r25
    6050:	8c 1b       	sub	r24, r28
    6052:	9d 0b       	sbc	r25, r29
    6054:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <incrementReader>
    6058:	df 91       	pop	r29
    605a:	cf 91       	pop	r28
    605c:	08 95       	ret

0000605e <incrementWriter>:
    605e:	09 2e       	mov	r0, r25
    6060:	00 0c       	add	r0, r0
    6062:	aa 0b       	sbc	r26, r26
    6064:	bb 0b       	sbc	r27, r27
    6066:	40 91 b1 01 	lds	r20, 0x01B1	; 0x8001b1 <currentWriter+0x8>
    606a:	50 91 b2 01 	lds	r21, 0x01B2	; 0x8001b2 <currentWriter+0x9>
    606e:	60 91 b3 01 	lds	r22, 0x01B3	; 0x8001b3 <currentWriter+0xa>
    6072:	70 91 b4 01 	lds	r23, 0x01B4	; 0x8001b4 <currentWriter+0xb>
    6076:	84 0f       	add	r24, r20
    6078:	95 1f       	adc	r25, r21
    607a:	a6 1f       	adc	r26, r22
    607c:	b7 1f       	adc	r27, r23
    607e:	00 97       	sbiw	r24, 0x00	; 0
    6080:	28 e0       	ldi	r18, 0x08	; 8
    6082:	a2 07       	cpc	r26, r18
    6084:	b1 05       	cpc	r27, r1
    6086:	48 f4       	brcc	.+18     	; 0x609a <incrementWriter+0x3c>
    6088:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <currentWriter+0x8>
    608c:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <currentWriter+0x9>
    6090:	a0 93 b3 01 	sts	0x01B3, r26	; 0x8001b3 <currentWriter+0xa>
    6094:	b0 93 b4 01 	sts	0x01B4, r27	; 0x8001b4 <currentWriter+0xb>
    6098:	0a c0       	rjmp	.+20     	; 0x60ae <incrementWriter+0x50>
    609a:	a7 70       	andi	r26, 0x07	; 7
    609c:	bb 27       	eor	r27, r27
    609e:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <currentWriter+0x8>
    60a2:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <currentWriter+0x9>
    60a6:	a0 93 b3 01 	sts	0x01B3, r26	; 0x8001b3 <currentWriter+0xa>
    60aa:	b0 93 b4 01 	sts	0x01B4, r27	; 0x8001b4 <currentWriter+0xb>
    60ae:	e9 ea       	ldi	r30, 0xA9	; 169
    60b0:	f1 e0       	ldi	r31, 0x01	; 1
    60b2:	80 85       	ldd	r24, Z+8	; 0x08
    60b4:	91 85       	ldd	r25, Z+9	; 0x09
    60b6:	a2 85       	ldd	r26, Z+10	; 0x0a
    60b8:	b3 85       	ldd	r27, Z+11	; 0x0b
    60ba:	ac 01       	movw	r20, r24
    60bc:	bd 01       	movw	r22, r26
    60be:	61 70       	andi	r22, 0x01	; 1
    60c0:	77 27       	eor	r23, r23
    60c2:	40 83       	st	Z, r20
    60c4:	51 83       	std	Z+1, r21	; 0x01
    60c6:	62 83       	std	Z+2, r22	; 0x02
    60c8:	73 83       	std	Z+3, r23	; 0x03
    60ca:	ac 01       	movw	r20, r24
    60cc:	bd 01       	movw	r22, r26
    60ce:	68 94       	set
    60d0:	14 f8       	bld	r1, 4
    60d2:	76 95       	lsr	r23
    60d4:	67 95       	ror	r22
    60d6:	57 95       	ror	r21
    60d8:	47 95       	ror	r20
    60da:	16 94       	lsr	r1
    60dc:	d1 f7       	brne	.-12     	; 0x60d2 <incrementWriter+0x74>
    60de:	5f 70       	andi	r21, 0x0F	; 15
    60e0:	66 27       	eor	r22, r22
    60e2:	77 27       	eor	r23, r23
    60e4:	44 83       	std	Z+4, r20	; 0x04
    60e6:	55 83       	std	Z+5, r21	; 0x05
    60e8:	66 83       	std	Z+6, r22	; 0x06
    60ea:	77 83       	std	Z+7, r23	; 0x07
    60ec:	07 2e       	mov	r0, r23
    60ee:	71 e1       	ldi	r23, 0x11	; 17
    60f0:	b6 95       	lsr	r27
    60f2:	a7 95       	ror	r26
    60f4:	97 95       	ror	r25
    60f6:	87 95       	ror	r24
    60f8:	7a 95       	dec	r23
    60fa:	d1 f7       	brne	.-12     	; 0x60f0 <incrementWriter+0x92>
    60fc:	70 2d       	mov	r23, r0
    60fe:	84 87       	std	Z+12, r24	; 0x0c
    6100:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <currentSRAM>
    6104:	08 95       	ret

00006106 <SRAM_seekWrite>:
    6106:	cf 93       	push	r28
    6108:	df 93       	push	r29
    610a:	ec 01       	movw	r28, r24
    610c:	61 30       	cpi	r22, 0x01	; 1
    610e:	71 05       	cpc	r23, r1
    6110:	71 f0       	breq	.+28     	; 0x612e <SRAM_seekWrite+0x28>
    6112:	20 f0       	brcs	.+8      	; 0x611c <SRAM_seekWrite+0x16>
    6114:	62 30       	cpi	r22, 0x02	; 2
    6116:	71 05       	cpc	r23, r1
    6118:	39 f0       	breq	.+14     	; 0x6128 <SRAM_seekWrite+0x22>
    611a:	11 c0       	rjmp	.+34     	; 0x613e <SRAM_seekWrite+0x38>
    611c:	0e 94 ab 2f 	call	0x5f56	; 0x5f56 <SRAM_resetWriter>
    6120:	ce 01       	movw	r24, r28
    6122:	0e 94 2f 30 	call	0x605e	; 0x605e <incrementWriter>
    6126:	0b c0       	rjmp	.+22     	; 0x613e <SRAM_seekWrite+0x38>
    6128:	0e 94 2f 30 	call	0x605e	; 0x605e <incrementWriter>
    612c:	08 c0       	rjmp	.+16     	; 0x613e <SRAM_seekWrite+0x38>
    612e:	0e 94 ab 2f 	call	0x5f56	; 0x5f56 <SRAM_resetWriter>
    6132:	88 27       	eor	r24, r24
    6134:	99 27       	eor	r25, r25
    6136:	8c 1b       	sub	r24, r28
    6138:	9d 0b       	sbc	r25, r29
    613a:	0e 94 2f 30 	call	0x605e	; 0x605e <incrementWriter>
    613e:	df 91       	pop	r29
    6140:	cf 91       	pop	r28
    6142:	08 95       	ret

00006144 <ReadSPI>:
    6144:	8f ef       	ldi	r24, 0xFF	; 255
    6146:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <spiTransferByte>
    614a:	08 95       	ret

0000614c <SRAMEnable>:
    614c:	90 e0       	ldi	r25, 0x00	; 0
    614e:	fc 01       	movw	r30, r24
    6150:	ee 0f       	add	r30, r30
    6152:	ff 1f       	adc	r31, r31
    6154:	e5 59       	subi	r30, 0x95	; 149
    6156:	ff 4f       	sbci	r31, 0xFF	; 255
    6158:	01 90       	ld	r0, Z+
    615a:	f0 81       	ld	r31, Z
    615c:	e0 2d       	mov	r30, r0
    615e:	40 81       	ld	r20, Z
    6160:	dc 01       	movw	r26, r24
    6162:	a9 59       	subi	r26, 0x99	; 153
    6164:	bf 4f       	sbci	r27, 0xFF	; 255
    6166:	21 e0       	ldi	r18, 0x01	; 1
    6168:	30 e0       	ldi	r19, 0x00	; 0
    616a:	c9 01       	movw	r24, r18
    616c:	0c 90       	ld	r0, X
    616e:	02 c0       	rjmp	.+4      	; 0x6174 <SRAMEnable+0x28>
    6170:	88 0f       	add	r24, r24
    6172:	99 1f       	adc	r25, r25
    6174:	0a 94       	dec	r0
    6176:	e2 f7       	brpl	.-8      	; 0x6170 <SRAMEnable+0x24>
    6178:	80 95       	com	r24
    617a:	84 23       	and	r24, r20
    617c:	80 83       	st	Z, r24
    617e:	08 95       	ret

00006180 <SRAMDisable>:
    6180:	90 e0       	ldi	r25, 0x00	; 0
    6182:	fc 01       	movw	r30, r24
    6184:	ee 0f       	add	r30, r30
    6186:	ff 1f       	adc	r31, r31
    6188:	e5 59       	subi	r30, 0x95	; 149
    618a:	ff 4f       	sbci	r31, 0xFF	; 255
    618c:	01 90       	ld	r0, Z+
    618e:	f0 81       	ld	r31, Z
    6190:	e0 2d       	mov	r30, r0
    6192:	40 81       	ld	r20, Z
    6194:	dc 01       	movw	r26, r24
    6196:	a9 59       	subi	r26, 0x99	; 153
    6198:	bf 4f       	sbci	r27, 0xFF	; 255
    619a:	21 e0       	ldi	r18, 0x01	; 1
    619c:	30 e0       	ldi	r19, 0x00	; 0
    619e:	c9 01       	movw	r24, r18
    61a0:	0c 90       	ld	r0, X
    61a2:	02 c0       	rjmp	.+4      	; 0x61a8 <SRAMDisable+0x28>
    61a4:	88 0f       	add	r24, r24
    61a6:	99 1f       	adc	r25, r25
    61a8:	0a 94       	dec	r0
    61aa:	e2 f7       	brpl	.-8      	; 0x61a4 <SRAMDisable+0x24>
    61ac:	84 2b       	or	r24, r20
    61ae:	80 83       	st	Z, r24
    61b0:	08 95       	ret

000061b2 <InitSRAM>:
    61b2:	cf 93       	push	r28
    61b4:	df 93       	push	r29
    61b6:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <currentSRAM>
    61ba:	80 e0       	ldi	r24, 0x00	; 0
    61bc:	c1 e0       	ldi	r28, 0x01	; 1
    61be:	d0 e0       	ldi	r29, 0x00	; 0
    61c0:	90 e0       	ldi	r25, 0x00	; 0
    61c2:	fc 01       	movw	r30, r24
    61c4:	ee 0f       	add	r30, r30
    61c6:	ff 1f       	adc	r31, r31
    61c8:	ed 58       	subi	r30, 0x8D	; 141
    61ca:	ff 4f       	sbci	r31, 0xFF	; 255
    61cc:	01 90       	ld	r0, Z+
    61ce:	f0 81       	ld	r31, Z
    61d0:	e0 2d       	mov	r30, r0
    61d2:	20 81       	ld	r18, Z
    61d4:	dc 01       	movw	r26, r24
    61d6:	a9 59       	subi	r26, 0x99	; 153
    61d8:	bf 4f       	sbci	r27, 0xFF	; 255
    61da:	ce 01       	movw	r24, r28
    61dc:	0c 90       	ld	r0, X
    61de:	02 c0       	rjmp	.+4      	; 0x61e4 <InitSRAM+0x32>
    61e0:	88 0f       	add	r24, r24
    61e2:	99 1f       	adc	r25, r25
    61e4:	0a 94       	dec	r0
    61e6:	e2 f7       	brpl	.-8      	; 0x61e0 <InitSRAM+0x2e>
    61e8:	82 2b       	or	r24, r18
    61ea:	80 83       	st	Z, r24
    61ec:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    61f0:	0e 94 c0 30 	call	0x6180	; 0x6180 <SRAMDisable>
    61f4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    61f8:	8f 5f       	subi	r24, 0xFF	; 255
    61fa:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <currentSRAM>
    61fe:	84 30       	cpi	r24, 0x04	; 4
    6200:	f8 f2       	brcs	.-66     	; 0x61c0 <InitSRAM+0xe>
    6202:	df 91       	pop	r29
    6204:	cf 91       	pop	r28
    6206:	08 95       	ret

00006208 <SRAMWriteStatusReg>:
    6208:	cf 93       	push	r28
    620a:	c8 2f       	mov	r28, r24
    620c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    6210:	0e 94 a6 30 	call	0x614c	; 0x614c <SRAMEnable>
    6214:	81 e0       	ldi	r24, 0x01	; 1
    6216:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <spiSendByte>
    621a:	8c 2f       	mov	r24, r28
    621c:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <spiSendByte>
    6220:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    6224:	0e 94 c0 30 	call	0x6180	; 0x6180 <SRAMDisable>
    6228:	80 e0       	ldi	r24, 0x00	; 0
    622a:	cf 91       	pop	r28
    622c:	08 95       	ret

0000622e <SRAMCommand>:
    622e:	1f 93       	push	r17
    6230:	cf 93       	push	r28
    6232:	df 93       	push	r29
    6234:	c8 2f       	mov	r28, r24
    6236:	d6 2f       	mov	r29, r22
    6238:	14 2f       	mov	r17, r20
    623a:	82 2f       	mov	r24, r18
    623c:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <spiSendByte>
    6240:	81 2f       	mov	r24, r17
    6242:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <spiSendByte>
    6246:	8d 2f       	mov	r24, r29
    6248:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <spiSendByte>
    624c:	8c 2f       	mov	r24, r28
    624e:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <spiSendByte>
    6252:	df 91       	pop	r29
    6254:	cf 91       	pop	r28
    6256:	1f 91       	pop	r17
    6258:	08 95       	ret

0000625a <SRAMWriteSeq>:

uint8_t SRAMWriteSeq(uint8_t AddLB, uint8_t AddMB,uint8_t AddHB, uint8_t *WriteData,uint32_t WriteCnt)
{
    625a:	9f 92       	push	r9
    625c:	af 92       	push	r10
    625e:	bf 92       	push	r11
    6260:	cf 92       	push	r12
    6262:	df 92       	push	r13
    6264:	ef 92       	push	r14
    6266:	ff 92       	push	r15
    6268:	0f 93       	push	r16
    626a:	1f 93       	push	r17
    626c:	cf 93       	push	r28
    626e:	df 93       	push	r29
    6270:	c8 2f       	mov	r28, r24
    6272:	d6 2f       	mov	r29, r22
    6274:	b4 2e       	mov	r11, r20
    6276:	92 2e       	mov	r9, r18
    6278:	a3 2e       	mov	r10, r19
    627a:	67 01       	movw	r12, r14
    627c:	78 01       	movw	r14, r16
	SRAMWriteStatusReg(SRAMSeqMode);
    627e:	80 e4       	ldi	r24, 0x40	; 64
    6280:	0e 94 04 31 	call	0x6208	; 0x6208 <SRAMWriteStatusReg>
	//Send Write command to SRAM along with address
	SRAMEnable(currentSRAM);
    6284:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    6288:	0e 94 a6 30 	call	0x614c	; 0x614c <SRAMEnable>
	SRAMCommand(AddLB,AddMB,AddHB,CMD_SRAMWrite);
    628c:	22 e0       	ldi	r18, 0x02	; 2
    628e:	4b 2d       	mov	r20, r11
    6290:	6d 2f       	mov	r22, r29
    6292:	8c 2f       	mov	r24, r28
    6294:	0e 94 17 31 	call	0x622e	; 0x622e <SRAMCommand>
	//Send Data to be written to SRAM
	for(;WriteCnt > 0;WriteCnt--)
    6298:	c1 14       	cp	r12, r1
    629a:	d1 04       	cpc	r13, r1
    629c:	e1 04       	cpc	r14, r1
    629e:	f1 04       	cpc	r15, r1
    62a0:	59 f0       	breq	.+22     	; 0x62b8 <SRAMWriteSeq+0x5e>
    62a2:	c9 2d       	mov	r28, r9
    62a4:	da 2d       	mov	r29, r10
uint8_t ReadSPI(){
	return (uint8_t)spiTransferByte(DummyByte);
}

void WriteSPI(uint8_t byte){
	spiSendByte(byte);
    62a6:	89 91       	ld	r24, Y+
    62a8:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <spiSendByte>
	SRAMWriteStatusReg(SRAMSeqMode);
	//Send Write command to SRAM along with address
	SRAMEnable(currentSRAM);
	SRAMCommand(AddLB,AddMB,AddHB,CMD_SRAMWrite);
	//Send Data to be written to SRAM
	for(;WriteCnt > 0;WriteCnt--)
    62ac:	81 e0       	ldi	r24, 0x01	; 1
    62ae:	c8 1a       	sub	r12, r24
    62b0:	d1 08       	sbc	r13, r1
    62b2:	e1 08       	sbc	r14, r1
    62b4:	f1 08       	sbc	r15, r1
    62b6:	b9 f7       	brne	.-18     	; 0x62a6 <SRAMWriteSeq+0x4c>
	{
		WriteSPI(*WriteData++);
		//while(!SPI_Rx_Buf_Full);
		//DummyRead =ReadSPI();
	}
	SRAMDisable(currentSRAM);
    62b8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    62bc:	0e 94 c0 30 	call	0x6180	; 0x6180 <SRAMDisable>
	return 0;			//Return non -ve nuber indicating success
}
    62c0:	80 e0       	ldi	r24, 0x00	; 0
    62c2:	df 91       	pop	r29
    62c4:	cf 91       	pop	r28
    62c6:	1f 91       	pop	r17
    62c8:	0f 91       	pop	r16
    62ca:	ff 90       	pop	r15
    62cc:	ef 90       	pop	r14
    62ce:	df 90       	pop	r13
    62d0:	cf 90       	pop	r12
    62d2:	bf 90       	pop	r11
    62d4:	af 90       	pop	r10
    62d6:	9f 90       	pop	r9
    62d8:	08 95       	ret

000062da <writeSRAM>:
	currentWriter.currentPage.value = (currentWriter.totalBytes.value / SRAMPageSize) % SRAMPageCount;
	currentWriter.currentSram = currentWriter.totalBytes.value / SRAMChipSize;
	currentSRAM = currentWriter.currentSram;
}

void writeSRAM(unsigned char *buf,unsigned int size){
    62da:	af 92       	push	r10
    62dc:	bf 92       	push	r11
    62de:	cf 92       	push	r12
    62e0:	df 92       	push	r13
    62e2:	ef 92       	push	r14
    62e4:	ff 92       	push	r15
    62e6:	0f 93       	push	r16
    62e8:	1f 93       	push	r17
    62ea:	cf 93       	push	r28
    62ec:	df 93       	push	r29
	unsigned int unaligned = currentWriter.currentByte.value % SRAMPageSize; // byte between start and end of page
    62ee:	40 91 a9 01 	lds	r20, 0x01A9	; 0x8001a9 <currentWriter>
    62f2:	50 91 aa 01 	lds	r21, 0x01AA	; 0x8001aa <currentWriter+0x1>
    62f6:	4f 71       	andi	r20, 0x1F	; 31
    62f8:	55 27       	eor	r21, r21
	unsigned int remainder = (unaligned > 0?(SRAMPageSize - unaligned):0); // bytes remaining to end of page
    62fa:	41 15       	cp	r20, r1
    62fc:	51 05       	cpc	r21, r1
    62fe:	31 f0       	breq	.+12     	; 0x630c <writeSRAM+0x32>
    6300:	20 e2       	ldi	r18, 0x20	; 32
    6302:	30 e0       	ldi	r19, 0x00	; 0
    6304:	59 01       	movw	r10, r18
    6306:	a4 1a       	sub	r10, r20
    6308:	b5 0a       	sbc	r11, r21
    630a:	02 c0       	rjmp	.+4      	; 0x6310 <writeSRAM+0x36>
    630c:	a1 2c       	mov	r10, r1
    630e:	b1 2c       	mov	r11, r1
	if(size == 0)
    6310:	61 15       	cp	r22, r1
    6312:	71 05       	cpc	r23, r1
    6314:	09 f4       	brne	.+2      	; 0x6318 <writeSRAM+0x3e>
    6316:	70 c0       	rjmp	.+224    	; 0x63f8 <writeSRAM+0x11e>
    6318:	6b 01       	movw	r12, r22
    631a:	ec 01       	movw	r28, r24
		return;

	if(size >= SRAMPageSize){
    631c:	60 32       	cpi	r22, 0x20	; 32
    631e:	71 05       	cpc	r23, r1
    6320:	90 f1       	brcs	.+100    	; 0x6386 <writeSRAM+0xac>
		if(unaligned == 0){
    6322:	45 2b       	or	r20, r21
    6324:	c9 f4       	brne	.+50     	; 0x6358 <writeSRAM+0x7e>
			// write page only, pass remaining size to next call
			SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,SRAMPageSize);
    6326:	e9 ea       	ldi	r30, 0xA9	; 169
    6328:	f1 e0       	ldi	r31, 0x01	; 1
    632a:	10 e2       	ldi	r17, 0x20	; 32
    632c:	e1 2e       	mov	r14, r17
    632e:	f1 2c       	mov	r15, r1
    6330:	00 e0       	ldi	r16, 0x00	; 0
    6332:	10 e0       	ldi	r17, 0x00	; 0
    6334:	9e 01       	movw	r18, r28
    6336:	42 81       	ldd	r20, Z+2	; 0x02
    6338:	61 81       	ldd	r22, Z+1	; 0x01
    633a:	80 81       	ld	r24, Z
    633c:	0e 94 2d 31 	call	0x625a	; 0x625a <SRAMWriteSeq>
			incrementWriter(SRAMPageSize);
    6340:	80 e2       	ldi	r24, 0x20	; 32
    6342:	90 e0       	ldi	r25, 0x00	; 0
    6344:	0e 94 2f 30 	call	0x605e	; 0x605e <incrementWriter>
			writeSRAM(buf + SRAMPageSize,size - SRAMPageSize);
    6348:	b6 01       	movw	r22, r12
    634a:	60 52       	subi	r22, 0x20	; 32
    634c:	71 09       	sbc	r23, r1
    634e:	ce 01       	movw	r24, r28
    6350:	80 96       	adiw	r24, 0x20	; 32
    6352:	0e 94 6d 31 	call	0x62da	; 0x62da <writeSRAM>
    6356:	50 c0       	rjmp	.+160    	; 0x63f8 <writeSRAM+0x11e>
		}
		else{
			// write remainder, pass remaining size to next call
			SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,remainder);
    6358:	75 01       	movw	r14, r10
    635a:	00 e0       	ldi	r16, 0x00	; 0
    635c:	10 e0       	ldi	r17, 0x00	; 0
    635e:	e9 ea       	ldi	r30, 0xA9	; 169
    6360:	f1 e0       	ldi	r31, 0x01	; 1
    6362:	9e 01       	movw	r18, r28
    6364:	42 81       	ldd	r20, Z+2	; 0x02
    6366:	61 81       	ldd	r22, Z+1	; 0x01
    6368:	80 81       	ld	r24, Z
    636a:	0e 94 2d 31 	call	0x625a	; 0x625a <SRAMWriteSeq>
			incrementWriter(remainder);
    636e:	c5 01       	movw	r24, r10
    6370:	0e 94 2f 30 	call	0x605e	; 0x605e <incrementWriter>
			writeSRAM(buf + remainder,size - remainder);
    6374:	b6 01       	movw	r22, r12
    6376:	6a 19       	sub	r22, r10
    6378:	7b 09       	sbc	r23, r11
    637a:	ce 01       	movw	r24, r28
    637c:	8a 0d       	add	r24, r10
    637e:	9b 1d       	adc	r25, r11
    6380:	0e 94 6d 31 	call	0x62da	; 0x62da <writeSRAM>
    6384:	39 c0       	rjmp	.+114    	; 0x63f8 <writeSRAM+0x11e>


	}
	else{

		if(unaligned > 0){
    6386:	45 2b       	or	r20, r21
    6388:	49 f1       	breq	.+82     	; 0x63dc <writeSRAM+0x102>
			if(size > remainder){
    638a:	a6 16       	cp	r10, r22
    638c:	b7 06       	cpc	r11, r23
    638e:	b8 f4       	brcc	.+46     	; 0x63be <writeSRAM+0xe4>
				size -= remainder;
    6390:	ca 18       	sub	r12, r10
    6392:	db 08       	sbc	r13, r11
				SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,remainder);
    6394:	75 01       	movw	r14, r10
    6396:	00 e0       	ldi	r16, 0x00	; 0
    6398:	10 e0       	ldi	r17, 0x00	; 0
    639a:	e9 ea       	ldi	r30, 0xA9	; 169
    639c:	f1 e0       	ldi	r31, 0x01	; 1
    639e:	9e 01       	movw	r18, r28
    63a0:	42 81       	ldd	r20, Z+2	; 0x02
    63a2:	61 81       	ldd	r22, Z+1	; 0x01
    63a4:	80 81       	ld	r24, Z
    63a6:	0e 94 2d 31 	call	0x625a	; 0x625a <SRAMWriteSeq>
				incrementWriter(remainder);
    63aa:	c5 01       	movw	r24, r10
    63ac:	0e 94 2f 30 	call	0x605e	; 0x605e <incrementWriter>
				writeSRAM(buf + remainder,size);
    63b0:	b6 01       	movw	r22, r12
    63b2:	ce 01       	movw	r24, r28
    63b4:	8a 0d       	add	r24, r10
    63b6:	9b 1d       	adc	r25, r11
    63b8:	0e 94 6d 31 	call	0x62da	; 0x62da <writeSRAM>
    63bc:	1d c0       	rjmp	.+58     	; 0x63f8 <writeSRAM+0x11e>
			}
			else{
				SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,size);
    63be:	7b 01       	movw	r14, r22
    63c0:	00 e0       	ldi	r16, 0x00	; 0
    63c2:	10 e0       	ldi	r17, 0x00	; 0
    63c4:	e9 ea       	ldi	r30, 0xA9	; 169
    63c6:	f1 e0       	ldi	r31, 0x01	; 1
    63c8:	9e 01       	movw	r18, r28
    63ca:	42 81       	ldd	r20, Z+2	; 0x02
    63cc:	61 81       	ldd	r22, Z+1	; 0x01
    63ce:	80 81       	ld	r24, Z
    63d0:	0e 94 2d 31 	call	0x625a	; 0x625a <SRAMWriteSeq>
				incrementWriter(size);
    63d4:	c6 01       	movw	r24, r12
    63d6:	0e 94 2f 30 	call	0x605e	; 0x605e <incrementWriter>
    63da:	0e c0       	rjmp	.+28     	; 0x63f8 <writeSRAM+0x11e>
			}

		}
		else{
			SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,size);
    63dc:	7b 01       	movw	r14, r22
    63de:	00 e0       	ldi	r16, 0x00	; 0
    63e0:	10 e0       	ldi	r17, 0x00	; 0
    63e2:	e9 ea       	ldi	r30, 0xA9	; 169
    63e4:	f1 e0       	ldi	r31, 0x01	; 1
    63e6:	9e 01       	movw	r18, r28
    63e8:	42 81       	ldd	r20, Z+2	; 0x02
    63ea:	61 81       	ldd	r22, Z+1	; 0x01
    63ec:	80 81       	ld	r24, Z
    63ee:	0e 94 2d 31 	call	0x625a	; 0x625a <SRAMWriteSeq>
			incrementWriter(size);
    63f2:	c6 01       	movw	r24, r12
    63f4:	0e 94 2f 30 	call	0x605e	; 0x605e <incrementWriter>
		}
	}
}
    63f8:	df 91       	pop	r29
    63fa:	cf 91       	pop	r28
    63fc:	1f 91       	pop	r17
    63fe:	0f 91       	pop	r16
    6400:	ff 90       	pop	r15
    6402:	ef 90       	pop	r14
    6404:	df 90       	pop	r13
    6406:	cf 90       	pop	r12
    6408:	bf 90       	pop	r11
    640a:	af 90       	pop	r10
    640c:	08 95       	ret

0000640e <SRAMReadSeq>:
	SRAMDisable(currentSRAM);
	return 0;			//Return non -ve nuber indicating success
}

uint8_t SRAMReadSeq(uint8_t AddLB, uint8_t AddMB,uint8_t AddHB, uint8_t *ReadData,uint32_t ReadCnt)
{
    640e:	9f 92       	push	r9
    6410:	af 92       	push	r10
    6412:	bf 92       	push	r11
    6414:	cf 92       	push	r12
    6416:	df 92       	push	r13
    6418:	ef 92       	push	r14
    641a:	ff 92       	push	r15
    641c:	0f 93       	push	r16
    641e:	1f 93       	push	r17
    6420:	cf 93       	push	r28
    6422:	df 93       	push	r29
    6424:	c8 2f       	mov	r28, r24
    6426:	d6 2f       	mov	r29, r22
    6428:	b4 2e       	mov	r11, r20
    642a:	92 2e       	mov	r9, r18
    642c:	a3 2e       	mov	r10, r19
    642e:	67 01       	movw	r12, r14
    6430:	78 01       	movw	r14, r16
	SRAMWriteStatusReg(SRAMSeqMode);
    6432:	80 e4       	ldi	r24, 0x40	; 64
    6434:	0e 94 04 31 	call	0x6208	; 0x6208 <SRAMWriteStatusReg>
	//Send Read command to SRAM along with address
	SRAMEnable(currentSRAM);
    6438:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    643c:	0e 94 a6 30 	call	0x614c	; 0x614c <SRAMEnable>
	SRAMCommand(AddLB,AddMB,AddHB,CMD_SRAMRead);
    6440:	23 e0       	ldi	r18, 0x03	; 3
    6442:	4b 2d       	mov	r20, r11
    6444:	6d 2f       	mov	r22, r29
    6446:	8c 2f       	mov	r24, r28
    6448:	0e 94 17 31 	call	0x622e	; 0x622e <SRAMCommand>
	//Send dummy data so SRAM can put desired Data read from SRAM
	for(; ReadCnt > 0; ReadCnt--)
    644c:	c1 14       	cp	r12, r1
    644e:	d1 04       	cpc	r13, r1
    6450:	e1 04       	cpc	r14, r1
    6452:	f1 04       	cpc	r15, r1
    6454:	59 f0       	breq	.+22     	; 0x646c <SRAMReadSeq+0x5e>
    6456:	c9 2d       	mov	r28, r9
    6458:	da 2d       	mov	r29, r10
	{
		//while(!SPI_Rx_Buf_Full);
		*ReadData++ = ReadSPI();
    645a:	0e 94 a2 30 	call	0x6144	; 0x6144 <ReadSPI>
    645e:	89 93       	st	Y+, r24
	SRAMWriteStatusReg(SRAMSeqMode);
	//Send Read command to SRAM along with address
	SRAMEnable(currentSRAM);
	SRAMCommand(AddLB,AddMB,AddHB,CMD_SRAMRead);
	//Send dummy data so SRAM can put desired Data read from SRAM
	for(; ReadCnt > 0; ReadCnt--)
    6460:	81 e0       	ldi	r24, 0x01	; 1
    6462:	c8 1a       	sub	r12, r24
    6464:	d1 08       	sbc	r13, r1
    6466:	e1 08       	sbc	r14, r1
    6468:	f1 08       	sbc	r15, r1
    646a:	b9 f7       	brne	.-18     	; 0x645a <SRAMReadSeq+0x4c>
	{
		//while(!SPI_Rx_Buf_Full);
		*ReadData++ = ReadSPI();
	}
	SRAMDisable(currentSRAM);
    646c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    6470:	0e 94 c0 30 	call	0x6180	; 0x6180 <SRAMDisable>
	return 0;			//Return non -ve nuber indicating success
}
    6474:	80 e0       	ldi	r24, 0x00	; 0
    6476:	df 91       	pop	r29
    6478:	cf 91       	pop	r28
    647a:	1f 91       	pop	r17
    647c:	0f 91       	pop	r16
    647e:	ff 90       	pop	r15
    6480:	ef 90       	pop	r14
    6482:	df 90       	pop	r13
    6484:	cf 90       	pop	r12
    6486:	bf 90       	pop	r11
    6488:	af 90       	pop	r10
    648a:	9f 90       	pop	r9
    648c:	08 95       	ret

0000648e <readSRAM>:
		}
	}
}


void readSRAM(unsigned char *buf,unsigned int size){
    648e:	af 92       	push	r10
    6490:	bf 92       	push	r11
    6492:	cf 92       	push	r12
    6494:	df 92       	push	r13
    6496:	ef 92       	push	r14
    6498:	ff 92       	push	r15
    649a:	0f 93       	push	r16
    649c:	1f 93       	push	r17
    649e:	cf 93       	push	r28
    64a0:	df 93       	push	r29
	unsigned int unaligned = currentReader.currentByte.value % SRAMPageSize; // byte between start and end of page
    64a2:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <currentReader>
    64a6:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <currentReader+0x1>
    64aa:	4f 71       	andi	r20, 0x1F	; 31
    64ac:	55 27       	eor	r21, r21
	unsigned int remainder = (unaligned > 0?(SRAMPageSize - unaligned):0); // bytes remaining to end of page
    64ae:	41 15       	cp	r20, r1
    64b0:	51 05       	cpc	r21, r1
    64b2:	31 f0       	breq	.+12     	; 0x64c0 <readSRAM+0x32>
    64b4:	20 e2       	ldi	r18, 0x20	; 32
    64b6:	30 e0       	ldi	r19, 0x00	; 0
    64b8:	59 01       	movw	r10, r18
    64ba:	a4 1a       	sub	r10, r20
    64bc:	b5 0a       	sbc	r11, r21
    64be:	02 c0       	rjmp	.+4      	; 0x64c4 <readSRAM+0x36>
    64c0:	a1 2c       	mov	r10, r1
    64c2:	b1 2c       	mov	r11, r1

	if(size == 0)
    64c4:	61 15       	cp	r22, r1
    64c6:	71 05       	cpc	r23, r1
    64c8:	09 f4       	brne	.+2      	; 0x64cc <readSRAM+0x3e>
    64ca:	70 c0       	rjmp	.+224    	; 0x65ac <readSRAM+0x11e>
    64cc:	6b 01       	movw	r12, r22
    64ce:	ec 01       	movw	r28, r24
		return;

	if(size >= SRAMPageSize){
    64d0:	60 32       	cpi	r22, 0x20	; 32
    64d2:	71 05       	cpc	r23, r1
    64d4:	90 f1       	brcs	.+100    	; 0x653a <readSRAM+0xac>
		if(unaligned == 0){
    64d6:	45 2b       	or	r20, r21
    64d8:	c9 f4       	brne	.+50     	; 0x650c <readSRAM+0x7e>
			// read page only, pass remaining size to next call
			SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,SRAMPageSize);
    64da:	e6 eb       	ldi	r30, 0xB6	; 182
    64dc:	f1 e0       	ldi	r31, 0x01	; 1
    64de:	10 e2       	ldi	r17, 0x20	; 32
    64e0:	e1 2e       	mov	r14, r17
    64e2:	f1 2c       	mov	r15, r1
    64e4:	00 e0       	ldi	r16, 0x00	; 0
    64e6:	10 e0       	ldi	r17, 0x00	; 0
    64e8:	9e 01       	movw	r18, r28
    64ea:	42 81       	ldd	r20, Z+2	; 0x02
    64ec:	61 81       	ldd	r22, Z+1	; 0x01
    64ee:	80 81       	ld	r24, Z
    64f0:	0e 94 07 32 	call	0x640e	; 0x640e <SRAMReadSeq>
			incrementReader(SRAMPageSize);
    64f4:	80 e2       	ldi	r24, 0x20	; 32
    64f6:	90 e0       	ldi	r25, 0x00	; 0
    64f8:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <incrementReader>
			readSRAM(buf + SRAMPageSize,size - SRAMPageSize);
    64fc:	b6 01       	movw	r22, r12
    64fe:	60 52       	subi	r22, 0x20	; 32
    6500:	71 09       	sbc	r23, r1
    6502:	ce 01       	movw	r24, r28
    6504:	80 96       	adiw	r24, 0x20	; 32
    6506:	0e 94 47 32 	call	0x648e	; 0x648e <readSRAM>
    650a:	50 c0       	rjmp	.+160    	; 0x65ac <readSRAM+0x11e>
		}
		else{
			// read remainder, pass remaining size to next call
			SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,remainder);
    650c:	75 01       	movw	r14, r10
    650e:	00 e0       	ldi	r16, 0x00	; 0
    6510:	10 e0       	ldi	r17, 0x00	; 0
    6512:	e6 eb       	ldi	r30, 0xB6	; 182
    6514:	f1 e0       	ldi	r31, 0x01	; 1
    6516:	9e 01       	movw	r18, r28
    6518:	42 81       	ldd	r20, Z+2	; 0x02
    651a:	61 81       	ldd	r22, Z+1	; 0x01
    651c:	80 81       	ld	r24, Z
    651e:	0e 94 07 32 	call	0x640e	; 0x640e <SRAMReadSeq>
			incrementReader(remainder);
    6522:	c5 01       	movw	r24, r10
    6524:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <incrementReader>
			readSRAM(buf + remainder,size - remainder);
    6528:	b6 01       	movw	r22, r12
    652a:	6a 19       	sub	r22, r10
    652c:	7b 09       	sbc	r23, r11
    652e:	ce 01       	movw	r24, r28
    6530:	8a 0d       	add	r24, r10
    6532:	9b 1d       	adc	r25, r11
    6534:	0e 94 47 32 	call	0x648e	; 0x648e <readSRAM>
    6538:	39 c0       	rjmp	.+114    	; 0x65ac <readSRAM+0x11e>


	}
	else{

		if(unaligned > 0){
    653a:	45 2b       	or	r20, r21
    653c:	49 f1       	breq	.+82     	; 0x6590 <readSRAM+0x102>
			if(size > remainder){
    653e:	a6 16       	cp	r10, r22
    6540:	b7 06       	cpc	r11, r23
    6542:	b8 f4       	brcc	.+46     	; 0x6572 <readSRAM+0xe4>
				size -= remainder;
    6544:	ca 18       	sub	r12, r10
    6546:	db 08       	sbc	r13, r11
				SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,remainder);
    6548:	75 01       	movw	r14, r10
    654a:	00 e0       	ldi	r16, 0x00	; 0
    654c:	10 e0       	ldi	r17, 0x00	; 0
    654e:	e6 eb       	ldi	r30, 0xB6	; 182
    6550:	f1 e0       	ldi	r31, 0x01	; 1
    6552:	9e 01       	movw	r18, r28
    6554:	42 81       	ldd	r20, Z+2	; 0x02
    6556:	61 81       	ldd	r22, Z+1	; 0x01
    6558:	80 81       	ld	r24, Z
    655a:	0e 94 07 32 	call	0x640e	; 0x640e <SRAMReadSeq>
				incrementReader(remainder);
    655e:	c5 01       	movw	r24, r10
    6560:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <incrementReader>
				readSRAM(buf + remainder,size);
    6564:	b6 01       	movw	r22, r12
    6566:	ce 01       	movw	r24, r28
    6568:	8a 0d       	add	r24, r10
    656a:	9b 1d       	adc	r25, r11
    656c:	0e 94 47 32 	call	0x648e	; 0x648e <readSRAM>
    6570:	1d c0       	rjmp	.+58     	; 0x65ac <readSRAM+0x11e>
			}
			else{
				SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,size);
    6572:	7b 01       	movw	r14, r22
    6574:	00 e0       	ldi	r16, 0x00	; 0
    6576:	10 e0       	ldi	r17, 0x00	; 0
    6578:	e6 eb       	ldi	r30, 0xB6	; 182
    657a:	f1 e0       	ldi	r31, 0x01	; 1
    657c:	9e 01       	movw	r18, r28
    657e:	42 81       	ldd	r20, Z+2	; 0x02
    6580:	61 81       	ldd	r22, Z+1	; 0x01
    6582:	80 81       	ld	r24, Z
    6584:	0e 94 07 32 	call	0x640e	; 0x640e <SRAMReadSeq>
				incrementReader(size);
    6588:	c6 01       	movw	r24, r12
    658a:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <incrementReader>
    658e:	0e c0       	rjmp	.+28     	; 0x65ac <readSRAM+0x11e>
			}

		}
		else{
			SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,size);
    6590:	7b 01       	movw	r14, r22
    6592:	00 e0       	ldi	r16, 0x00	; 0
    6594:	10 e0       	ldi	r17, 0x00	; 0
    6596:	e6 eb       	ldi	r30, 0xB6	; 182
    6598:	f1 e0       	ldi	r31, 0x01	; 1
    659a:	9e 01       	movw	r18, r28
    659c:	42 81       	ldd	r20, Z+2	; 0x02
    659e:	61 81       	ldd	r22, Z+1	; 0x01
    65a0:	80 81       	ld	r24, Z
    65a2:	0e 94 07 32 	call	0x640e	; 0x640e <SRAMReadSeq>
			incrementReader(size);
    65a6:	c6 01       	movw	r24, r12
    65a8:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <incrementReader>
		}
	}


}
    65ac:	df 91       	pop	r29
    65ae:	cf 91       	pop	r28
    65b0:	1f 91       	pop	r17
    65b2:	0f 91       	pop	r16
    65b4:	ff 90       	pop	r15
    65b6:	ef 90       	pop	r14
    65b8:	df 90       	pop	r13
    65ba:	cf 90       	pop	r12
    65bc:	bf 90       	pop	r11
    65be:	af 90       	pop	r10
    65c0:	08 95       	ret

000065c2 <delay_us>:
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1BH);		// set the high 8bits of OCR1B
	//outp( (pwmDuty&0x00FF), OCR1BL);	// set the low 8bits of OCR1B
	OCR1B = pwmDuty;
    65c2:	9c 01       	movw	r18, r24
    65c4:	2d 5f       	subi	r18, 0xFD	; 253
    65c6:	3f 4f       	sbci	r19, 0xFF	; 255
    65c8:	ad ec       	ldi	r26, 0xCD	; 205
    65ca:	bc ec       	ldi	r27, 0xCC	; 204
    65cc:	0e 94 c0 37 	call	0x6f80	; 0x6f80 <__umulhisi3>
    65d0:	96 95       	lsr	r25
    65d2:	87 95       	ror	r24
    65d4:	96 95       	lsr	r25
    65d6:	87 95       	ror	r24
    65d8:	82 95       	swap	r24
    65da:	92 95       	swap	r25
    65dc:	90 7f       	andi	r25, 0xF0	; 240
    65de:	98 27       	eor	r25, r24
    65e0:	80 7f       	andi	r24, 0xF0	; 240
    65e2:	98 27       	eor	r25, r24
    65e4:	00 97       	sbiw	r24, 0x00	; 0
    65e6:	39 f0       	breq	.+14     	; 0x65f6 <delay_us+0x34>
    65e8:	20 e0       	ldi	r18, 0x00	; 0
    65ea:	30 e0       	ldi	r19, 0x00	; 0
    65ec:	2f 5f       	subi	r18, 0xFF	; 255
    65ee:	3f 4f       	sbci	r19, 0xFF	; 255
    65f0:	82 17       	cp	r24, r18
    65f2:	93 07       	cpc	r25, r19
    65f4:	d9 f7       	brne	.-10     	; 0x65ec <delay_us+0x2a>
    65f6:	08 95       	ret

000065f8 <timerAttach>:
    65f8:	88 30       	cpi	r24, 0x08	; 8
    65fa:	40 f4       	brcc	.+16     	; 0x660c <timerAttach+0x14>
    65fc:	e8 2f       	mov	r30, r24
    65fe:	f0 e0       	ldi	r31, 0x00	; 0
    6600:	ee 0f       	add	r30, r30
    6602:	ff 1f       	adc	r31, r31
    6604:	ec 53       	subi	r30, 0x3C	; 60
    6606:	fe 4f       	sbci	r31, 0xFE	; 254
    6608:	71 83       	std	Z+1, r23	; 0x01
    660a:	60 83       	st	Z, r22
    660c:	08 95       	ret

0000660e <__vector_11>:
}

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect)
{
    660e:	1f 92       	push	r1
    6610:	0f 92       	push	r0
    6612:	0f b6       	in	r0, 0x3f	; 63
    6614:	0f 92       	push	r0
    6616:	11 24       	eor	r1, r1
    6618:	2f 93       	push	r18
    661a:	3f 93       	push	r19
    661c:	4f 93       	push	r20
    661e:	5f 93       	push	r21
    6620:	6f 93       	push	r22
    6622:	7f 93       	push	r23
    6624:	8f 93       	push	r24
    6626:	9f 93       	push	r25
    6628:	af 93       	push	r26
    662a:	bf 93       	push	r27
    662c:	ef 93       	push	r30
    662e:	ff 93       	push	r31
	Timer0Reg0++;			// increment low-order counter
    6630:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <Timer0Reg0>
    6634:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <Timer0Reg0+0x1>
    6638:	a0 91 9c 04 	lds	r26, 0x049C	; 0x80049c <Timer0Reg0+0x2>
    663c:	b0 91 9d 04 	lds	r27, 0x049D	; 0x80049d <Timer0Reg0+0x3>
    6640:	01 96       	adiw	r24, 0x01	; 1
    6642:	a1 1d       	adc	r26, r1
    6644:	b1 1d       	adc	r27, r1
    6646:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <Timer0Reg0>
    664a:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <Timer0Reg0+0x1>
    664e:	a0 93 9c 04 	sts	0x049C, r26	; 0x80049c <Timer0Reg0+0x2>
    6652:	b0 93 9d 04 	sts	0x049D, r27	; 0x80049d <Timer0Reg0+0x3>

	// increment pause counter
	TimerPauseReg++;
    6656:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <TimerPauseReg>
    665a:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <TimerPauseReg+0x1>
    665e:	a0 91 a0 04 	lds	r26, 0x04A0	; 0x8004a0 <TimerPauseReg+0x2>
    6662:	b0 91 a1 04 	lds	r27, 0x04A1	; 0x8004a1 <TimerPauseReg+0x3>
    6666:	01 96       	adiw	r24, 0x01	; 1
    6668:	a1 1d       	adc	r26, r1
    666a:	b1 1d       	adc	r27, r1
    666c:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <TimerPauseReg>
    6670:	90 93 9f 04 	sts	0x049F, r25	; 0x80049f <TimerPauseReg+0x1>
    6674:	a0 93 a0 04 	sts	0x04A0, r26	; 0x8004a0 <TimerPauseReg+0x2>
    6678:	b0 93 a1 04 	sts	0x04A1, r27	; 0x8004a1 <TimerPauseReg+0x3>

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
    667c:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <TimerIntFunc>
    6680:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <TimerIntFunc+0x1>
    6684:	89 2b       	or	r24, r25
    6686:	29 f0       	breq	.+10     	; 0x6692 <__vector_11+0x84>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
    6688:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <TimerIntFunc>
    668c:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <TimerIntFunc+0x1>
    6690:	09 95       	icall
}
    6692:	ff 91       	pop	r31
    6694:	ef 91       	pop	r30
    6696:	bf 91       	pop	r27
    6698:	af 91       	pop	r26
    669a:	9f 91       	pop	r25
    669c:	8f 91       	pop	r24
    669e:	7f 91       	pop	r23
    66a0:	6f 91       	pop	r22
    66a2:	5f 91       	pop	r21
    66a4:	4f 91       	pop	r20
    66a6:	3f 91       	pop	r19
    66a8:	2f 91       	pop	r18
    66aa:	0f 90       	pop	r0
    66ac:	0f be       	out	0x3f, r0	; 63
    66ae:	0f 90       	pop	r0
    66b0:	1f 90       	pop	r1
    66b2:	18 95       	reti

000066b4 <__vector_9>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect)
{
    66b4:	1f 92       	push	r1
    66b6:	0f 92       	push	r0
    66b8:	0f b6       	in	r0, 0x3f	; 63
    66ba:	0f 92       	push	r0
    66bc:	11 24       	eor	r1, r1
    66be:	2f 93       	push	r18
    66c0:	3f 93       	push	r19
    66c2:	4f 93       	push	r20
    66c4:	5f 93       	push	r21
    66c6:	6f 93       	push	r22
    66c8:	7f 93       	push	r23
    66ca:	8f 93       	push	r24
    66cc:	9f 93       	push	r25
    66ce:	af 93       	push	r26
    66d0:	bf 93       	push	r27
    66d2:	ef 93       	push	r30
    66d4:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
    66d6:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <TimerIntFunc+0x2>
    66da:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <TimerIntFunc+0x3>
    66de:	89 2b       	or	r24, r25
    66e0:	29 f0       	breq	.+10     	; 0x66ec <__vector_9+0x38>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
    66e2:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <TimerIntFunc+0x2>
    66e6:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <TimerIntFunc+0x3>
    66ea:	09 95       	icall
}
    66ec:	ff 91       	pop	r31
    66ee:	ef 91       	pop	r30
    66f0:	bf 91       	pop	r27
    66f2:	af 91       	pop	r26
    66f4:	9f 91       	pop	r25
    66f6:	8f 91       	pop	r24
    66f8:	7f 91       	pop	r23
    66fa:	6f 91       	pop	r22
    66fc:	5f 91       	pop	r21
    66fe:	4f 91       	pop	r20
    6700:	3f 91       	pop	r19
    6702:	2f 91       	pop	r18
    6704:	0f 90       	pop	r0
    6706:	0f be       	out	0x3f, r0	; 63
    6708:	0f 90       	pop	r0
    670a:	1f 90       	pop	r1
    670c:	18 95       	reti

0000670e <__vector_5>:

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_OVF_vect)
{
    670e:	1f 92       	push	r1
    6710:	0f 92       	push	r0
    6712:	0f b6       	in	r0, 0x3f	; 63
    6714:	0f 92       	push	r0
    6716:	11 24       	eor	r1, r1
    6718:	2f 93       	push	r18
    671a:	3f 93       	push	r19
    671c:	4f 93       	push	r20
    671e:	5f 93       	push	r21
    6720:	6f 93       	push	r22
    6722:	7f 93       	push	r23
    6724:	8f 93       	push	r24
    6726:	9f 93       	push	r25
    6728:	af 93       	push	r26
    672a:	bf 93       	push	r27
    672c:	ef 93       	push	r30
    672e:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
    6730:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <Timer2Reg0>
    6734:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <Timer2Reg0+0x1>
    6738:	a0 91 a4 04 	lds	r26, 0x04A4	; 0x8004a4 <Timer2Reg0+0x2>
    673c:	b0 91 a5 04 	lds	r27, 0x04A5	; 0x8004a5 <Timer2Reg0+0x3>
    6740:	01 96       	adiw	r24, 0x01	; 1
    6742:	a1 1d       	adc	r26, r1
    6744:	b1 1d       	adc	r27, r1
    6746:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <Timer2Reg0>
    674a:	90 93 a3 04 	sts	0x04A3, r25	; 0x8004a3 <Timer2Reg0+0x1>
    674e:	a0 93 a4 04 	sts	0x04A4, r26	; 0x8004a4 <Timer2Reg0+0x2>
    6752:	b0 93 a5 04 	sts	0x04A5, r27	; 0x8004a5 <Timer2Reg0+0x3>

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
    6756:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <TimerIntFunc+0xa>
    675a:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <TimerIntFunc+0xb>
    675e:	89 2b       	or	r24, r25
    6760:	29 f0       	breq	.+10     	; 0x676c <__vector_5+0x5e>
		TimerIntFunc[TIMER2OVERFLOW_INT]();
    6762:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <TimerIntFunc+0xa>
    6766:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <TimerIntFunc+0xb>
    676a:	09 95       	icall
}
    676c:	ff 91       	pop	r31
    676e:	ef 91       	pop	r30
    6770:	bf 91       	pop	r27
    6772:	af 91       	pop	r26
    6774:	9f 91       	pop	r25
    6776:	8f 91       	pop	r24
    6778:	7f 91       	pop	r23
    677a:	6f 91       	pop	r22
    677c:	5f 91       	pop	r21
    677e:	4f 91       	pop	r20
    6780:	3f 91       	pop	r19
    6782:	2f 91       	pop	r18
    6784:	0f 90       	pop	r0
    6786:	0f be       	out	0x3f, r0	; 63
    6788:	0f 90       	pop	r0
    678a:	1f 90       	pop	r1
    678c:	18 95       	reti

0000678e <__vector_10>:

#ifdef OCR0
// include support for Output Compare 0 for new AVR processors that support it
//! Interrupt handler for OutputCompare0 match (OC0) interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_COMP_vect)
{
    678e:	1f 92       	push	r1
    6790:	0f 92       	push	r0
    6792:	0f b6       	in	r0, 0x3f	; 63
    6794:	0f 92       	push	r0
    6796:	11 24       	eor	r1, r1
    6798:	2f 93       	push	r18
    679a:	3f 93       	push	r19
    679c:	4f 93       	push	r20
    679e:	5f 93       	push	r21
    67a0:	6f 93       	push	r22
    67a2:	7f 93       	push	r23
    67a4:	8f 93       	push	r24
    67a6:	9f 93       	push	r25
    67a8:	af 93       	push	r26
    67aa:	bf 93       	push	r27
    67ac:	ef 93       	push	r30
    67ae:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER0OUTCOMPARE_INT])
    67b0:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <TimerIntFunc+0xe>
    67b4:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <TimerIntFunc+0xf>
    67b8:	89 2b       	or	r24, r25
    67ba:	29 f0       	breq	.+10     	; 0x67c6 <__vector_10+0x38>
		TimerIntFunc[TIMER0OUTCOMPARE_INT]();
    67bc:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <TimerIntFunc+0xe>
    67c0:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <TimerIntFunc+0xf>
    67c4:	09 95       	icall
}
    67c6:	ff 91       	pop	r31
    67c8:	ef 91       	pop	r30
    67ca:	bf 91       	pop	r27
    67cc:	af 91       	pop	r26
    67ce:	9f 91       	pop	r25
    67d0:	8f 91       	pop	r24
    67d2:	7f 91       	pop	r23
    67d4:	6f 91       	pop	r22
    67d6:	5f 91       	pop	r21
    67d8:	4f 91       	pop	r20
    67da:	3f 91       	pop	r19
    67dc:	2f 91       	pop	r18
    67de:	0f 90       	pop	r0
    67e0:	0f be       	out	0x3f, r0	; 63
    67e2:	0f 90       	pop	r0
    67e4:	1f 90       	pop	r1
    67e6:	18 95       	reti

000067e8 <__vector_7>:
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect)
{
    67e8:	1f 92       	push	r1
    67ea:	0f 92       	push	r0
    67ec:	0f b6       	in	r0, 0x3f	; 63
    67ee:	0f 92       	push	r0
    67f0:	11 24       	eor	r1, r1
    67f2:	2f 93       	push	r18
    67f4:	3f 93       	push	r19
    67f6:	4f 93       	push	r20
    67f8:	5f 93       	push	r21
    67fa:	6f 93       	push	r22
    67fc:	7f 93       	push	r23
    67fe:	8f 93       	push	r24
    6800:	9f 93       	push	r25
    6802:	af 93       	push	r26
    6804:	bf 93       	push	r27
    6806:	ef 93       	push	r30
    6808:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
    680a:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <TimerIntFunc+0x4>
    680e:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <TimerIntFunc+0x5>
    6812:	89 2b       	or	r24, r25
    6814:	29 f0       	breq	.+10     	; 0x6820 <__vector_7+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
    6816:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <TimerIntFunc+0x4>
    681a:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <TimerIntFunc+0x5>
    681e:	09 95       	icall
}
    6820:	ff 91       	pop	r31
    6822:	ef 91       	pop	r30
    6824:	bf 91       	pop	r27
    6826:	af 91       	pop	r26
    6828:	9f 91       	pop	r25
    682a:	8f 91       	pop	r24
    682c:	7f 91       	pop	r23
    682e:	6f 91       	pop	r22
    6830:	5f 91       	pop	r21
    6832:	4f 91       	pop	r20
    6834:	3f 91       	pop	r19
    6836:	2f 91       	pop	r18
    6838:	0f 90       	pop	r0
    683a:	0f be       	out	0x3f, r0	; 63
    683c:	0f 90       	pop	r0
    683e:	1f 90       	pop	r1
    6840:	18 95       	reti

00006842 <__vector_8>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect)
{
    6842:	1f 92       	push	r1
    6844:	0f 92       	push	r0
    6846:	0f b6       	in	r0, 0x3f	; 63
    6848:	0f 92       	push	r0
    684a:	11 24       	eor	r1, r1
    684c:	2f 93       	push	r18
    684e:	3f 93       	push	r19
    6850:	4f 93       	push	r20
    6852:	5f 93       	push	r21
    6854:	6f 93       	push	r22
    6856:	7f 93       	push	r23
    6858:	8f 93       	push	r24
    685a:	9f 93       	push	r25
    685c:	af 93       	push	r26
    685e:	bf 93       	push	r27
    6860:	ef 93       	push	r30
    6862:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
    6864:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <TimerIntFunc+0x6>
    6868:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <TimerIntFunc+0x7>
    686c:	89 2b       	or	r24, r25
    686e:	29 f0       	breq	.+10     	; 0x687a <__vector_8+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
    6870:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <TimerIntFunc+0x6>
    6874:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <TimerIntFunc+0x7>
    6878:	09 95       	icall
}
    687a:	ff 91       	pop	r31
    687c:	ef 91       	pop	r30
    687e:	bf 91       	pop	r27
    6880:	af 91       	pop	r26
    6882:	9f 91       	pop	r25
    6884:	8f 91       	pop	r24
    6886:	7f 91       	pop	r23
    6888:	6f 91       	pop	r22
    688a:	5f 91       	pop	r21
    688c:	4f 91       	pop	r20
    688e:	3f 91       	pop	r19
    6890:	2f 91       	pop	r18
    6892:	0f 90       	pop	r0
    6894:	0f be       	out	0x3f, r0	; 63
    6896:	0f 90       	pop	r0
    6898:	1f 90       	pop	r1
    689a:	18 95       	reti

0000689c <__vector_6>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect)
{
    689c:	1f 92       	push	r1
    689e:	0f 92       	push	r0
    68a0:	0f b6       	in	r0, 0x3f	; 63
    68a2:	0f 92       	push	r0
    68a4:	11 24       	eor	r1, r1
    68a6:	2f 93       	push	r18
    68a8:	3f 93       	push	r19
    68aa:	4f 93       	push	r20
    68ac:	5f 93       	push	r21
    68ae:	6f 93       	push	r22
    68b0:	7f 93       	push	r23
    68b2:	8f 93       	push	r24
    68b4:	9f 93       	push	r25
    68b6:	af 93       	push	r26
    68b8:	bf 93       	push	r27
    68ba:	ef 93       	push	r30
    68bc:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
    68be:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <TimerIntFunc+0x8>
    68c2:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <TimerIntFunc+0x9>
    68c6:	89 2b       	or	r24, r25
    68c8:	29 f0       	breq	.+10     	; 0x68d4 <__vector_6+0x38>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
    68ca:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <TimerIntFunc+0x8>
    68ce:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <TimerIntFunc+0x9>
    68d2:	09 95       	icall
}
    68d4:	ff 91       	pop	r31
    68d6:	ef 91       	pop	r30
    68d8:	bf 91       	pop	r27
    68da:	af 91       	pop	r26
    68dc:	9f 91       	pop	r25
    68de:	8f 91       	pop	r24
    68e0:	7f 91       	pop	r23
    68e2:	6f 91       	pop	r22
    68e4:	5f 91       	pop	r21
    68e6:	4f 91       	pop	r20
    68e8:	3f 91       	pop	r19
    68ea:	2f 91       	pop	r18
    68ec:	0f 90       	pop	r0
    68ee:	0f be       	out	0x3f, r0	; 63
    68f0:	0f 90       	pop	r0
    68f2:	1f 90       	pop	r1
    68f4:	18 95       	reti

000068f6 <__vector_4>:

//! Interrupt handler for OutputCompare2 match (OC2) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMP_vect)
{
    68f6:	1f 92       	push	r1
    68f8:	0f 92       	push	r0
    68fa:	0f b6       	in	r0, 0x3f	; 63
    68fc:	0f 92       	push	r0
    68fe:	11 24       	eor	r1, r1
    6900:	2f 93       	push	r18
    6902:	3f 93       	push	r19
    6904:	4f 93       	push	r20
    6906:	5f 93       	push	r21
    6908:	6f 93       	push	r22
    690a:	7f 93       	push	r23
    690c:	8f 93       	push	r24
    690e:	9f 93       	push	r25
    6910:	af 93       	push	r26
    6912:	bf 93       	push	r27
    6914:	ef 93       	push	r30
    6916:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
    6918:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <TimerIntFunc+0xc>
    691c:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <TimerIntFunc+0xd>
    6920:	89 2b       	or	r24, r25
    6922:	29 f0       	breq	.+10     	; 0x692e <__vector_4+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
    6924:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <TimerIntFunc+0xc>
    6928:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <TimerIntFunc+0xd>
    692c:	09 95       	icall
}
    692e:	ff 91       	pop	r31
    6930:	ef 91       	pop	r30
    6932:	bf 91       	pop	r27
    6934:	af 91       	pop	r26
    6936:	9f 91       	pop	r25
    6938:	8f 91       	pop	r24
    693a:	7f 91       	pop	r23
    693c:	6f 91       	pop	r22
    693e:	5f 91       	pop	r21
    6940:	4f 91       	pop	r20
    6942:	3f 91       	pop	r19
    6944:	2f 91       	pop	r18
    6946:	0f 90       	pop	r0
    6948:	0f be       	out	0x3f, r0	; 63
    694a:	0f 90       	pop	r0
    694c:	1f 90       	pop	r1
    694e:	18 95       	reti

00006950 <uartInitBuffers>:
	else
	{
		// return failure
		return FALSE;
	}
}
    6950:	40 e4       	ldi	r20, 0x40	; 64
    6952:	50 e0       	ldi	r21, 0x00	; 0
    6954:	66 e1       	ldi	r22, 0x16	; 22
    6956:	72 e0       	ldi	r23, 0x02	; 2
    6958:	87 ea       	ldi	r24, 0xA7	; 167
    695a:	94 e0       	ldi	r25, 0x04	; 4
    695c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <bufferInit>
    6960:	40 e4       	ldi	r20, 0x40	; 64
    6962:	50 e0       	ldi	r21, 0x00	; 0
    6964:	66 ed       	ldi	r22, 0xD6	; 214
    6966:	71 e0       	ldi	r23, 0x01	; 1
    6968:	81 eb       	ldi	r24, 0xB1	; 177
    696a:	94 e0       	ldi	r25, 0x04	; 4
    696c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <bufferInit>
    6970:	08 95       	ret

00006972 <uartInit>:
    6972:	0e 94 a8 34 	call	0x6950	; 0x6950 <uartInitBuffers>
    6976:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <UartRxFunc+0x1>
    697a:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <UartRxFunc>
    697e:	88 ed       	ldi	r24, 0xD8	; 216
    6980:	8a b9       	out	0x0a, r24	; 10
    6982:	86 e8       	ldi	r24, 0x86	; 134
    6984:	80 bd       	out	0x20, r24	; 32
    6986:	87 e6       	ldi	r24, 0x67	; 103
    6988:	89 b9       	out	0x09, r24	; 9
    698a:	10 bc       	out	0x20, r1	; 32
    698c:	81 e0       	ldi	r24, 0x01	; 1
    698e:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <uartReadyTx>
    6992:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <uartBufferedTx>
    6996:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <uartRxOverflow+0x1>
    699a:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <uartRxOverflow>
    699e:	78 94       	sei
    69a0:	08 95       	ret

000069a2 <uartSetRxHandler>:
    69a2:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <UartRxFunc+0x1>
    69a6:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <UartRxFunc>
    69aa:	08 95       	ret

000069ac <uartSetBaudRate>:
    69ac:	0f 93       	push	r16
    69ae:	1f 93       	push	r17
    69b0:	8b 01       	movw	r16, r22
    69b2:	9c 01       	movw	r18, r24
    69b4:	dc 01       	movw	r26, r24
    69b6:	cb 01       	movw	r24, r22
    69b8:	80 58       	subi	r24, 0x80	; 128
    69ba:	9b 47       	sbci	r25, 0x7B	; 123
    69bc:	a1 4e       	sbci	r26, 0xE1	; 225
    69be:	bf 4f       	sbci	r27, 0xFF	; 255
    69c0:	88 0f       	add	r24, r24
    69c2:	99 1f       	adc	r25, r25
    69c4:	aa 1f       	adc	r26, r26
    69c6:	bb 1f       	adc	r27, r27
    69c8:	88 0f       	add	r24, r24
    69ca:	99 1f       	adc	r25, r25
    69cc:	aa 1f       	adc	r26, r26
    69ce:	bb 1f       	adc	r27, r27
    69d0:	bc 01       	movw	r22, r24
    69d2:	cd 01       	movw	r24, r26
    69d4:	66 0f       	add	r22, r22
    69d6:	77 1f       	adc	r23, r23
    69d8:	88 1f       	adc	r24, r24
    69da:	99 1f       	adc	r25, r25
    69dc:	00 0f       	add	r16, r16
    69de:	11 1f       	adc	r17, r17
    69e0:	22 1f       	adc	r18, r18
    69e2:	33 1f       	adc	r19, r19
    69e4:	00 0f       	add	r16, r16
    69e6:	11 1f       	adc	r17, r17
    69e8:	22 1f       	adc	r18, r18
    69ea:	33 1f       	adc	r19, r19
    69ec:	a9 01       	movw	r20, r18
    69ee:	98 01       	movw	r18, r16
    69f0:	22 0f       	add	r18, r18
    69f2:	33 1f       	adc	r19, r19
    69f4:	44 1f       	adc	r20, r20
    69f6:	55 1f       	adc	r21, r21
    69f8:	22 0f       	add	r18, r18
    69fa:	33 1f       	adc	r19, r19
    69fc:	44 1f       	adc	r20, r20
    69fe:	55 1f       	adc	r21, r21
    6a00:	0e 94 79 37 	call	0x6ef2	; 0x6ef2 <__udivmodsi4>
    6a04:	21 50       	subi	r18, 0x01	; 1
    6a06:	31 09       	sbc	r19, r1
    6a08:	29 b9       	out	0x09, r18	; 9
    6a0a:	30 bd       	out	0x20, r19	; 32
    6a0c:	1f 91       	pop	r17
    6a0e:	0f 91       	pop	r16
    6a10:	08 95       	ret

00006a12 <uartSendByte>:
    6a12:	90 91 a6 04 	lds	r25, 0x04A6	; 0x8004a6 <uartReadyTx>
    6a16:	99 23       	and	r25, r25
    6a18:	e1 f3       	breq	.-8      	; 0x6a12 <uartSendByte>
    6a1a:	8c b9       	out	0x0c, r24	; 12
    6a1c:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <uartReadyTx>
    6a20:	08 95       	ret

00006a22 <uartReceiveByte>:
    6a22:	cf 93       	push	r28
    6a24:	df 93       	push	r29
    6a26:	20 91 a9 04 	lds	r18, 0x04A9	; 0x8004a9 <uartRxBuffer+0x2>
    6a2a:	30 91 aa 04 	lds	r19, 0x04AA	; 0x8004aa <uartRxBuffer+0x3>
    6a2e:	23 2b       	or	r18, r19
    6a30:	71 f0       	breq	.+28     	; 0x6a4e <uartReceiveByte+0x2c>
    6a32:	20 91 ab 04 	lds	r18, 0x04AB	; 0x8004ab <uartRxBuffer+0x4>
    6a36:	30 91 ac 04 	lds	r19, 0x04AC	; 0x8004ac <uartRxBuffer+0x5>
    6a3a:	23 2b       	or	r18, r19
    6a3c:	51 f0       	breq	.+20     	; 0x6a52 <uartReceiveByte+0x30>
    6a3e:	ec 01       	movw	r28, r24
    6a40:	87 ea       	ldi	r24, 0xA7	; 167
    6a42:	94 e0       	ldi	r25, 0x04	; 4
    6a44:	0e 94 fe 01 	call	0x3fc	; 0x3fc <bufferGetFromFront>
    6a48:	88 83       	st	Y, r24
    6a4a:	81 e0       	ldi	r24, 0x01	; 1
    6a4c:	03 c0       	rjmp	.+6      	; 0x6a54 <uartReceiveByte+0x32>
    6a4e:	80 e0       	ldi	r24, 0x00	; 0
    6a50:	01 c0       	rjmp	.+2      	; 0x6a54 <uartReceiveByte+0x32>
    6a52:	80 e0       	ldi	r24, 0x00	; 0
    6a54:	df 91       	pop	r29
    6a56:	cf 91       	pop	r28
    6a58:	08 95       	ret

00006a5a <uartGetByte>:
    6a5a:	cf 93       	push	r28
    6a5c:	df 93       	push	r29
    6a5e:	1f 92       	push	r1
    6a60:	cd b7       	in	r28, 0x3d	; 61
    6a62:	de b7       	in	r29, 0x3e	; 62
    6a64:	ce 01       	movw	r24, r28
    6a66:	01 96       	adiw	r24, 0x01	; 1
    6a68:	0e 94 11 35 	call	0x6a22	; 0x6a22 <uartReceiveByte>
    6a6c:	88 23       	and	r24, r24
    6a6e:	19 f0       	breq	.+6      	; 0x6a76 <uartGetByte+0x1c>
    6a70:	89 81       	ldd	r24, Y+1	; 0x01
    6a72:	90 e0       	ldi	r25, 0x00	; 0
    6a74:	02 c0       	rjmp	.+4      	; 0x6a7a <uartGetByte+0x20>
    6a76:	8f ef       	ldi	r24, 0xFF	; 255
    6a78:	9f ef       	ldi	r25, 0xFF	; 255
    6a7a:	0f 90       	pop	r0
    6a7c:	df 91       	pop	r29
    6a7e:	cf 91       	pop	r28
    6a80:	08 95       	ret

00006a82 <uartFlushReceiveBuffer>:
    6a82:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <uartRxBuffer+0x5>
    6a86:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <uartRxBuffer+0x4>
    6a8a:	08 95       	ret

00006a8c <uartReceiveBufferIsEmpty>:
    6a8c:	81 e0       	ldi	r24, 0x01	; 1
    6a8e:	20 91 ab 04 	lds	r18, 0x04AB	; 0x8004ab <uartRxBuffer+0x4>
    6a92:	30 91 ac 04 	lds	r19, 0x04AC	; 0x8004ac <uartRxBuffer+0x5>
    6a96:	23 2b       	or	r18, r19
    6a98:	09 f0       	breq	.+2      	; 0x6a9c <uartReceiveBufferIsEmpty+0x10>
    6a9a:	80 e0       	ldi	r24, 0x00	; 0
    6a9c:	08 95       	ret

00006a9e <__vector_15>:

// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(USART_TXC_vect)
{
    6a9e:	1f 92       	push	r1
    6aa0:	0f 92       	push	r0
    6aa2:	0f b6       	in	r0, 0x3f	; 63
    6aa4:	0f 92       	push	r0
    6aa6:	11 24       	eor	r1, r1
    6aa8:	2f 93       	push	r18
    6aaa:	3f 93       	push	r19
    6aac:	4f 93       	push	r20
    6aae:	5f 93       	push	r21
    6ab0:	6f 93       	push	r22
    6ab2:	7f 93       	push	r23
    6ab4:	8f 93       	push	r24
    6ab6:	9f 93       	push	r25
    6ab8:	af 93       	push	r26
    6aba:	bf 93       	push	r27
    6abc:	ef 93       	push	r30
    6abe:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
    6ac0:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <uartBufferedTx>
    6ac4:	88 23       	and	r24, r24
    6ac6:	91 f0       	breq	.+36     	; 0x6aec <__vector_15+0x4e>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
    6ac8:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <uartTxBuffer+0x4>
    6acc:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <uartTxBuffer+0x5>
    6ad0:	89 2b       	or	r24, r25
    6ad2:	31 f0       	breq	.+12     	; 0x6ae0 <__vector_15+0x42>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
    6ad4:	81 eb       	ldi	r24, 0xB1	; 177
    6ad6:	94 e0       	ldi	r25, 0x04	; 4
    6ad8:	0e 94 fe 01 	call	0x3fc	; 0x3fc <bufferGetFromFront>
    6adc:	8c b9       	out	0x0c, r24	; 12
    6ade:	09 c0       	rjmp	.+18     	; 0x6af2 <__vector_15+0x54>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
    6ae0:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <uartBufferedTx>
			// return to ready state
			uartReadyTx = TRUE;
    6ae4:	81 e0       	ldi	r24, 0x01	; 1
    6ae6:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <uartReadyTx>
    6aea:	03 c0       	rjmp	.+6      	; 0x6af2 <__vector_15+0x54>
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
    6aec:	81 e0       	ldi	r24, 0x01	; 1
    6aee:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <uartReadyTx>
	}
}
    6af2:	ff 91       	pop	r31
    6af4:	ef 91       	pop	r30
    6af6:	bf 91       	pop	r27
    6af8:	af 91       	pop	r26
    6afa:	9f 91       	pop	r25
    6afc:	8f 91       	pop	r24
    6afe:	7f 91       	pop	r23
    6b00:	6f 91       	pop	r22
    6b02:	5f 91       	pop	r21
    6b04:	4f 91       	pop	r20
    6b06:	3f 91       	pop	r19
    6b08:	2f 91       	pop	r18
    6b0a:	0f 90       	pop	r0
    6b0c:	0f be       	out	0x3f, r0	; 63
    6b0e:	0f 90       	pop	r0
    6b10:	1f 90       	pop	r1
    6b12:	18 95       	reti

00006b14 <__vector_13>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(USART_RXC_vect)
{
    6b14:	1f 92       	push	r1
    6b16:	0f 92       	push	r0
    6b18:	0f b6       	in	r0, 0x3f	; 63
    6b1a:	0f 92       	push	r0
    6b1c:	11 24       	eor	r1, r1
    6b1e:	2f 93       	push	r18
    6b20:	3f 93       	push	r19
    6b22:	4f 93       	push	r20
    6b24:	5f 93       	push	r21
    6b26:	6f 93       	push	r22
    6b28:	7f 93       	push	r23
    6b2a:	8f 93       	push	r24
    6b2c:	9f 93       	push	r25
    6b2e:	af 93       	push	r26
    6b30:	bf 93       	push	r27
    6b32:	ef 93       	push	r30
    6b34:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
    6b36:	8c b1       	in	r24, 0x0c	; 12
	
	// if there's a user function to handle this receive event
	if(UartRxFunc)
    6b38:	20 91 d4 01 	lds	r18, 0x01D4	; 0x8001d4 <UartRxFunc>
    6b3c:	30 91 d5 01 	lds	r19, 0x01D5	; 0x8001d5 <UartRxFunc+0x1>
    6b40:	23 2b       	or	r18, r19
    6b42:	31 f0       	breq	.+12     	; 0x6b50 <__vector_13+0x3c>
	{
		// call it and pass the received data
		UartRxFunc(c);
    6b44:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <UartRxFunc>
    6b48:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <UartRxFunc+0x1>
    6b4c:	09 95       	icall
    6b4e:	10 c0       	rjmp	.+32     	; 0x6b70 <__vector_13+0x5c>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
    6b50:	68 2f       	mov	r22, r24
    6b52:	87 ea       	ldi	r24, 0xA7	; 167
    6b54:	94 e0       	ldi	r25, 0x04	; 4
    6b56:	0e 94 22 02 	call	0x444	; 0x444 <bufferAddToEnd>
    6b5a:	81 11       	cpse	r24, r1
    6b5c:	09 c0       	rjmp	.+18     	; 0x6b70 <__vector_13+0x5c>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
    6b5e:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <uartRxOverflow>
    6b62:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <uartRxOverflow+0x1>
    6b66:	01 96       	adiw	r24, 0x01	; 1
    6b68:	90 93 ba 04 	sts	0x04BA, r25	; 0x8004ba <uartRxOverflow+0x1>
    6b6c:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <uartRxOverflow>
		}
	}
}
    6b70:	ff 91       	pop	r31
    6b72:	ef 91       	pop	r30
    6b74:	bf 91       	pop	r27
    6b76:	af 91       	pop	r26
    6b78:	9f 91       	pop	r25
    6b7a:	8f 91       	pop	r24
    6b7c:	7f 91       	pop	r23
    6b7e:	6f 91       	pop	r22
    6b80:	5f 91       	pop	r21
    6b82:	4f 91       	pop	r20
    6b84:	3f 91       	pop	r19
    6b86:	2f 91       	pop	r18
    6b88:	0f 90       	pop	r0
    6b8a:	0f be       	out	0x3f, r0	; 63
    6b8c:	0f 90       	pop	r0
    6b8e:	1f 90       	pop	r1
    6b90:	18 95       	reti

00006b92 <__divsf3>:
    6b92:	0e 94 dd 35 	call	0x6bba	; 0x6bba <__divsf3x>
    6b96:	0c 94 be 36 	jmp	0x6d7c	; 0x6d7c <__fp_round>
    6b9a:	0e 94 b7 36 	call	0x6d6e	; 0x6d6e <__fp_pscB>
    6b9e:	58 f0       	brcs	.+22     	; 0x6bb6 <__divsf3+0x24>
    6ba0:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <__fp_pscA>
    6ba4:	40 f0       	brcs	.+16     	; 0x6bb6 <__divsf3+0x24>
    6ba6:	29 f4       	brne	.+10     	; 0x6bb2 <__divsf3+0x20>
    6ba8:	5f 3f       	cpi	r21, 0xFF	; 255
    6baa:	29 f0       	breq	.+10     	; 0x6bb6 <__divsf3+0x24>
    6bac:	0c 94 a7 36 	jmp	0x6d4e	; 0x6d4e <__fp_inf>
    6bb0:	51 11       	cpse	r21, r1
    6bb2:	0c 94 f2 36 	jmp	0x6de4	; 0x6de4 <__fp_szero>
    6bb6:	0c 94 ad 36 	jmp	0x6d5a	; 0x6d5a <__fp_nan>

00006bba <__divsf3x>:
    6bba:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <__fp_split3>
    6bbe:	68 f3       	brcs	.-38     	; 0x6b9a <__divsf3+0x8>

00006bc0 <__divsf3_pse>:
    6bc0:	99 23       	and	r25, r25
    6bc2:	b1 f3       	breq	.-20     	; 0x6bb0 <__divsf3+0x1e>
    6bc4:	55 23       	and	r21, r21
    6bc6:	91 f3       	breq	.-28     	; 0x6bac <__divsf3+0x1a>
    6bc8:	95 1b       	sub	r25, r21
    6bca:	55 0b       	sbc	r21, r21
    6bcc:	bb 27       	eor	r27, r27
    6bce:	aa 27       	eor	r26, r26
    6bd0:	62 17       	cp	r22, r18
    6bd2:	73 07       	cpc	r23, r19
    6bd4:	84 07       	cpc	r24, r20
    6bd6:	38 f0       	brcs	.+14     	; 0x6be6 <__divsf3_pse+0x26>
    6bd8:	9f 5f       	subi	r25, 0xFF	; 255
    6bda:	5f 4f       	sbci	r21, 0xFF	; 255
    6bdc:	22 0f       	add	r18, r18
    6bde:	33 1f       	adc	r19, r19
    6be0:	44 1f       	adc	r20, r20
    6be2:	aa 1f       	adc	r26, r26
    6be4:	a9 f3       	breq	.-22     	; 0x6bd0 <__divsf3_pse+0x10>
    6be6:	35 d0       	rcall	.+106    	; 0x6c52 <__divsf3_pse+0x92>
    6be8:	0e 2e       	mov	r0, r30
    6bea:	3a f0       	brmi	.+14     	; 0x6bfa <__divsf3_pse+0x3a>
    6bec:	e0 e8       	ldi	r30, 0x80	; 128
    6bee:	32 d0       	rcall	.+100    	; 0x6c54 <__divsf3_pse+0x94>
    6bf0:	91 50       	subi	r25, 0x01	; 1
    6bf2:	50 40       	sbci	r21, 0x00	; 0
    6bf4:	e6 95       	lsr	r30
    6bf6:	00 1c       	adc	r0, r0
    6bf8:	ca f7       	brpl	.-14     	; 0x6bec <__divsf3_pse+0x2c>
    6bfa:	2b d0       	rcall	.+86     	; 0x6c52 <__divsf3_pse+0x92>
    6bfc:	fe 2f       	mov	r31, r30
    6bfe:	29 d0       	rcall	.+82     	; 0x6c52 <__divsf3_pse+0x92>
    6c00:	66 0f       	add	r22, r22
    6c02:	77 1f       	adc	r23, r23
    6c04:	88 1f       	adc	r24, r24
    6c06:	bb 1f       	adc	r27, r27
    6c08:	26 17       	cp	r18, r22
    6c0a:	37 07       	cpc	r19, r23
    6c0c:	48 07       	cpc	r20, r24
    6c0e:	ab 07       	cpc	r26, r27
    6c10:	b0 e8       	ldi	r27, 0x80	; 128
    6c12:	09 f0       	breq	.+2      	; 0x6c16 <__divsf3_pse+0x56>
    6c14:	bb 0b       	sbc	r27, r27
    6c16:	80 2d       	mov	r24, r0
    6c18:	bf 01       	movw	r22, r30
    6c1a:	ff 27       	eor	r31, r31
    6c1c:	93 58       	subi	r25, 0x83	; 131
    6c1e:	5f 4f       	sbci	r21, 0xFF	; 255
    6c20:	3a f0       	brmi	.+14     	; 0x6c30 <__divsf3_pse+0x70>
    6c22:	9e 3f       	cpi	r25, 0xFE	; 254
    6c24:	51 05       	cpc	r21, r1
    6c26:	78 f0       	brcs	.+30     	; 0x6c46 <__divsf3_pse+0x86>
    6c28:	0c 94 a7 36 	jmp	0x6d4e	; 0x6d4e <__fp_inf>
    6c2c:	0c 94 f2 36 	jmp	0x6de4	; 0x6de4 <__fp_szero>
    6c30:	5f 3f       	cpi	r21, 0xFF	; 255
    6c32:	e4 f3       	brlt	.-8      	; 0x6c2c <__divsf3_pse+0x6c>
    6c34:	98 3e       	cpi	r25, 0xE8	; 232
    6c36:	d4 f3       	brlt	.-12     	; 0x6c2c <__divsf3_pse+0x6c>
    6c38:	86 95       	lsr	r24
    6c3a:	77 95       	ror	r23
    6c3c:	67 95       	ror	r22
    6c3e:	b7 95       	ror	r27
    6c40:	f7 95       	ror	r31
    6c42:	9f 5f       	subi	r25, 0xFF	; 255
    6c44:	c9 f7       	brne	.-14     	; 0x6c38 <__divsf3_pse+0x78>
    6c46:	88 0f       	add	r24, r24
    6c48:	91 1d       	adc	r25, r1
    6c4a:	96 95       	lsr	r25
    6c4c:	87 95       	ror	r24
    6c4e:	97 f9       	bld	r25, 7
    6c50:	08 95       	ret
    6c52:	e1 e0       	ldi	r30, 0x01	; 1
    6c54:	66 0f       	add	r22, r22
    6c56:	77 1f       	adc	r23, r23
    6c58:	88 1f       	adc	r24, r24
    6c5a:	bb 1f       	adc	r27, r27
    6c5c:	62 17       	cp	r22, r18
    6c5e:	73 07       	cpc	r23, r19
    6c60:	84 07       	cpc	r24, r20
    6c62:	ba 07       	cpc	r27, r26
    6c64:	20 f0       	brcs	.+8      	; 0x6c6e <__divsf3_pse+0xae>
    6c66:	62 1b       	sub	r22, r18
    6c68:	73 0b       	sbc	r23, r19
    6c6a:	84 0b       	sbc	r24, r20
    6c6c:	ba 0b       	sbc	r27, r26
    6c6e:	ee 1f       	adc	r30, r30
    6c70:	88 f7       	brcc	.-30     	; 0x6c54 <__divsf3_pse+0x94>
    6c72:	e0 95       	com	r30
    6c74:	08 95       	ret

00006c76 <__fixunssfsi>:
    6c76:	0e 94 d7 36 	call	0x6dae	; 0x6dae <__fp_splitA>
    6c7a:	88 f0       	brcs	.+34     	; 0x6c9e <__fixunssfsi+0x28>
    6c7c:	9f 57       	subi	r25, 0x7F	; 127
    6c7e:	98 f0       	brcs	.+38     	; 0x6ca6 <__fixunssfsi+0x30>
    6c80:	b9 2f       	mov	r27, r25
    6c82:	99 27       	eor	r25, r25
    6c84:	b7 51       	subi	r27, 0x17	; 23
    6c86:	b0 f0       	brcs	.+44     	; 0x6cb4 <__fixunssfsi+0x3e>
    6c88:	e1 f0       	breq	.+56     	; 0x6cc2 <__fixunssfsi+0x4c>
    6c8a:	66 0f       	add	r22, r22
    6c8c:	77 1f       	adc	r23, r23
    6c8e:	88 1f       	adc	r24, r24
    6c90:	99 1f       	adc	r25, r25
    6c92:	1a f0       	brmi	.+6      	; 0x6c9a <__fixunssfsi+0x24>
    6c94:	ba 95       	dec	r27
    6c96:	c9 f7       	brne	.-14     	; 0x6c8a <__fixunssfsi+0x14>
    6c98:	14 c0       	rjmp	.+40     	; 0x6cc2 <__fixunssfsi+0x4c>
    6c9a:	b1 30       	cpi	r27, 0x01	; 1
    6c9c:	91 f0       	breq	.+36     	; 0x6cc2 <__fixunssfsi+0x4c>
    6c9e:	0e 94 f1 36 	call	0x6de2	; 0x6de2 <__fp_zero>
    6ca2:	b1 e0       	ldi	r27, 0x01	; 1
    6ca4:	08 95       	ret
    6ca6:	0c 94 f1 36 	jmp	0x6de2	; 0x6de2 <__fp_zero>
    6caa:	67 2f       	mov	r22, r23
    6cac:	78 2f       	mov	r23, r24
    6cae:	88 27       	eor	r24, r24
    6cb0:	b8 5f       	subi	r27, 0xF8	; 248
    6cb2:	39 f0       	breq	.+14     	; 0x6cc2 <__fixunssfsi+0x4c>
    6cb4:	b9 3f       	cpi	r27, 0xF9	; 249
    6cb6:	cc f3       	brlt	.-14     	; 0x6caa <__fixunssfsi+0x34>
    6cb8:	86 95       	lsr	r24
    6cba:	77 95       	ror	r23
    6cbc:	67 95       	ror	r22
    6cbe:	b3 95       	inc	r27
    6cc0:	d9 f7       	brne	.-10     	; 0x6cb8 <__fixunssfsi+0x42>
    6cc2:	3e f4       	brtc	.+14     	; 0x6cd2 <__fixunssfsi+0x5c>
    6cc4:	90 95       	com	r25
    6cc6:	80 95       	com	r24
    6cc8:	70 95       	com	r23
    6cca:	61 95       	neg	r22
    6ccc:	7f 4f       	sbci	r23, 0xFF	; 255
    6cce:	8f 4f       	sbci	r24, 0xFF	; 255
    6cd0:	9f 4f       	sbci	r25, 0xFF	; 255
    6cd2:	08 95       	ret

00006cd4 <__floatunsisf>:
    6cd4:	e8 94       	clt
    6cd6:	09 c0       	rjmp	.+18     	; 0x6cea <__floatsisf+0x12>

00006cd8 <__floatsisf>:
    6cd8:	97 fb       	bst	r25, 7
    6cda:	3e f4       	brtc	.+14     	; 0x6cea <__floatsisf+0x12>
    6cdc:	90 95       	com	r25
    6cde:	80 95       	com	r24
    6ce0:	70 95       	com	r23
    6ce2:	61 95       	neg	r22
    6ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    6ce6:	8f 4f       	sbci	r24, 0xFF	; 255
    6ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    6cea:	99 23       	and	r25, r25
    6cec:	a9 f0       	breq	.+42     	; 0x6d18 <__floatsisf+0x40>
    6cee:	f9 2f       	mov	r31, r25
    6cf0:	96 e9       	ldi	r25, 0x96	; 150
    6cf2:	bb 27       	eor	r27, r27
    6cf4:	93 95       	inc	r25
    6cf6:	f6 95       	lsr	r31
    6cf8:	87 95       	ror	r24
    6cfa:	77 95       	ror	r23
    6cfc:	67 95       	ror	r22
    6cfe:	b7 95       	ror	r27
    6d00:	f1 11       	cpse	r31, r1
    6d02:	f8 cf       	rjmp	.-16     	; 0x6cf4 <__floatsisf+0x1c>
    6d04:	fa f4       	brpl	.+62     	; 0x6d44 <__floatsisf+0x6c>
    6d06:	bb 0f       	add	r27, r27
    6d08:	11 f4       	brne	.+4      	; 0x6d0e <__floatsisf+0x36>
    6d0a:	60 ff       	sbrs	r22, 0
    6d0c:	1b c0       	rjmp	.+54     	; 0x6d44 <__floatsisf+0x6c>
    6d0e:	6f 5f       	subi	r22, 0xFF	; 255
    6d10:	7f 4f       	sbci	r23, 0xFF	; 255
    6d12:	8f 4f       	sbci	r24, 0xFF	; 255
    6d14:	9f 4f       	sbci	r25, 0xFF	; 255
    6d16:	16 c0       	rjmp	.+44     	; 0x6d44 <__floatsisf+0x6c>
    6d18:	88 23       	and	r24, r24
    6d1a:	11 f0       	breq	.+4      	; 0x6d20 <__floatsisf+0x48>
    6d1c:	96 e9       	ldi	r25, 0x96	; 150
    6d1e:	11 c0       	rjmp	.+34     	; 0x6d42 <__floatsisf+0x6a>
    6d20:	77 23       	and	r23, r23
    6d22:	21 f0       	breq	.+8      	; 0x6d2c <__floatsisf+0x54>
    6d24:	9e e8       	ldi	r25, 0x8E	; 142
    6d26:	87 2f       	mov	r24, r23
    6d28:	76 2f       	mov	r23, r22
    6d2a:	05 c0       	rjmp	.+10     	; 0x6d36 <__floatsisf+0x5e>
    6d2c:	66 23       	and	r22, r22
    6d2e:	71 f0       	breq	.+28     	; 0x6d4c <__floatsisf+0x74>
    6d30:	96 e8       	ldi	r25, 0x86	; 134
    6d32:	86 2f       	mov	r24, r22
    6d34:	70 e0       	ldi	r23, 0x00	; 0
    6d36:	60 e0       	ldi	r22, 0x00	; 0
    6d38:	2a f0       	brmi	.+10     	; 0x6d44 <__floatsisf+0x6c>
    6d3a:	9a 95       	dec	r25
    6d3c:	66 0f       	add	r22, r22
    6d3e:	77 1f       	adc	r23, r23
    6d40:	88 1f       	adc	r24, r24
    6d42:	da f7       	brpl	.-10     	; 0x6d3a <__floatsisf+0x62>
    6d44:	88 0f       	add	r24, r24
    6d46:	96 95       	lsr	r25
    6d48:	87 95       	ror	r24
    6d4a:	97 f9       	bld	r25, 7
    6d4c:	08 95       	ret

00006d4e <__fp_inf>:
    6d4e:	97 f9       	bld	r25, 7
    6d50:	9f 67       	ori	r25, 0x7F	; 127
    6d52:	80 e8       	ldi	r24, 0x80	; 128
    6d54:	70 e0       	ldi	r23, 0x00	; 0
    6d56:	60 e0       	ldi	r22, 0x00	; 0
    6d58:	08 95       	ret

00006d5a <__fp_nan>:
    6d5a:	9f ef       	ldi	r25, 0xFF	; 255
    6d5c:	80 ec       	ldi	r24, 0xC0	; 192
    6d5e:	08 95       	ret

00006d60 <__fp_pscA>:
    6d60:	00 24       	eor	r0, r0
    6d62:	0a 94       	dec	r0
    6d64:	16 16       	cp	r1, r22
    6d66:	17 06       	cpc	r1, r23
    6d68:	18 06       	cpc	r1, r24
    6d6a:	09 06       	cpc	r0, r25
    6d6c:	08 95       	ret

00006d6e <__fp_pscB>:
    6d6e:	00 24       	eor	r0, r0
    6d70:	0a 94       	dec	r0
    6d72:	12 16       	cp	r1, r18
    6d74:	13 06       	cpc	r1, r19
    6d76:	14 06       	cpc	r1, r20
    6d78:	05 06       	cpc	r0, r21
    6d7a:	08 95       	ret

00006d7c <__fp_round>:
    6d7c:	09 2e       	mov	r0, r25
    6d7e:	03 94       	inc	r0
    6d80:	00 0c       	add	r0, r0
    6d82:	11 f4       	brne	.+4      	; 0x6d88 <__fp_round+0xc>
    6d84:	88 23       	and	r24, r24
    6d86:	52 f0       	brmi	.+20     	; 0x6d9c <__fp_round+0x20>
    6d88:	bb 0f       	add	r27, r27
    6d8a:	40 f4       	brcc	.+16     	; 0x6d9c <__fp_round+0x20>
    6d8c:	bf 2b       	or	r27, r31
    6d8e:	11 f4       	brne	.+4      	; 0x6d94 <__fp_round+0x18>
    6d90:	60 ff       	sbrs	r22, 0
    6d92:	04 c0       	rjmp	.+8      	; 0x6d9c <__fp_round+0x20>
    6d94:	6f 5f       	subi	r22, 0xFF	; 255
    6d96:	7f 4f       	sbci	r23, 0xFF	; 255
    6d98:	8f 4f       	sbci	r24, 0xFF	; 255
    6d9a:	9f 4f       	sbci	r25, 0xFF	; 255
    6d9c:	08 95       	ret

00006d9e <__fp_split3>:
    6d9e:	57 fd       	sbrc	r21, 7
    6da0:	90 58       	subi	r25, 0x80	; 128
    6da2:	44 0f       	add	r20, r20
    6da4:	55 1f       	adc	r21, r21
    6da6:	59 f0       	breq	.+22     	; 0x6dbe <__fp_splitA+0x10>
    6da8:	5f 3f       	cpi	r21, 0xFF	; 255
    6daa:	71 f0       	breq	.+28     	; 0x6dc8 <__fp_splitA+0x1a>
    6dac:	47 95       	ror	r20

00006dae <__fp_splitA>:
    6dae:	88 0f       	add	r24, r24
    6db0:	97 fb       	bst	r25, 7
    6db2:	99 1f       	adc	r25, r25
    6db4:	61 f0       	breq	.+24     	; 0x6dce <__fp_splitA+0x20>
    6db6:	9f 3f       	cpi	r25, 0xFF	; 255
    6db8:	79 f0       	breq	.+30     	; 0x6dd8 <__fp_splitA+0x2a>
    6dba:	87 95       	ror	r24
    6dbc:	08 95       	ret
    6dbe:	12 16       	cp	r1, r18
    6dc0:	13 06       	cpc	r1, r19
    6dc2:	14 06       	cpc	r1, r20
    6dc4:	55 1f       	adc	r21, r21
    6dc6:	f2 cf       	rjmp	.-28     	; 0x6dac <__fp_split3+0xe>
    6dc8:	46 95       	lsr	r20
    6dca:	f1 df       	rcall	.-30     	; 0x6dae <__fp_splitA>
    6dcc:	08 c0       	rjmp	.+16     	; 0x6dde <__fp_splitA+0x30>
    6dce:	16 16       	cp	r1, r22
    6dd0:	17 06       	cpc	r1, r23
    6dd2:	18 06       	cpc	r1, r24
    6dd4:	99 1f       	adc	r25, r25
    6dd6:	f1 cf       	rjmp	.-30     	; 0x6dba <__fp_splitA+0xc>
    6dd8:	86 95       	lsr	r24
    6dda:	71 05       	cpc	r23, r1
    6ddc:	61 05       	cpc	r22, r1
    6dde:	08 94       	sec
    6de0:	08 95       	ret

00006de2 <__fp_zero>:
    6de2:	e8 94       	clt

00006de4 <__fp_szero>:
    6de4:	bb 27       	eor	r27, r27
    6de6:	66 27       	eor	r22, r22
    6de8:	77 27       	eor	r23, r23
    6dea:	cb 01       	movw	r24, r22
    6dec:	97 f9       	bld	r25, 7
    6dee:	08 95       	ret

00006df0 <__mulsf3>:
    6df0:	0e 94 0b 37 	call	0x6e16	; 0x6e16 <__mulsf3x>
    6df4:	0c 94 be 36 	jmp	0x6d7c	; 0x6d7c <__fp_round>
    6df8:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <__fp_pscA>
    6dfc:	38 f0       	brcs	.+14     	; 0x6e0c <__mulsf3+0x1c>
    6dfe:	0e 94 b7 36 	call	0x6d6e	; 0x6d6e <__fp_pscB>
    6e02:	20 f0       	brcs	.+8      	; 0x6e0c <__mulsf3+0x1c>
    6e04:	95 23       	and	r25, r21
    6e06:	11 f0       	breq	.+4      	; 0x6e0c <__mulsf3+0x1c>
    6e08:	0c 94 a7 36 	jmp	0x6d4e	; 0x6d4e <__fp_inf>
    6e0c:	0c 94 ad 36 	jmp	0x6d5a	; 0x6d5a <__fp_nan>
    6e10:	11 24       	eor	r1, r1
    6e12:	0c 94 f2 36 	jmp	0x6de4	; 0x6de4 <__fp_szero>

00006e16 <__mulsf3x>:
    6e16:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <__fp_split3>
    6e1a:	70 f3       	brcs	.-36     	; 0x6df8 <__mulsf3+0x8>

00006e1c <__mulsf3_pse>:
    6e1c:	95 9f       	mul	r25, r21
    6e1e:	c1 f3       	breq	.-16     	; 0x6e10 <__mulsf3+0x20>
    6e20:	95 0f       	add	r25, r21
    6e22:	50 e0       	ldi	r21, 0x00	; 0
    6e24:	55 1f       	adc	r21, r21
    6e26:	62 9f       	mul	r22, r18
    6e28:	f0 01       	movw	r30, r0
    6e2a:	72 9f       	mul	r23, r18
    6e2c:	bb 27       	eor	r27, r27
    6e2e:	f0 0d       	add	r31, r0
    6e30:	b1 1d       	adc	r27, r1
    6e32:	63 9f       	mul	r22, r19
    6e34:	aa 27       	eor	r26, r26
    6e36:	f0 0d       	add	r31, r0
    6e38:	b1 1d       	adc	r27, r1
    6e3a:	aa 1f       	adc	r26, r26
    6e3c:	64 9f       	mul	r22, r20
    6e3e:	66 27       	eor	r22, r22
    6e40:	b0 0d       	add	r27, r0
    6e42:	a1 1d       	adc	r26, r1
    6e44:	66 1f       	adc	r22, r22
    6e46:	82 9f       	mul	r24, r18
    6e48:	22 27       	eor	r18, r18
    6e4a:	b0 0d       	add	r27, r0
    6e4c:	a1 1d       	adc	r26, r1
    6e4e:	62 1f       	adc	r22, r18
    6e50:	73 9f       	mul	r23, r19
    6e52:	b0 0d       	add	r27, r0
    6e54:	a1 1d       	adc	r26, r1
    6e56:	62 1f       	adc	r22, r18
    6e58:	83 9f       	mul	r24, r19
    6e5a:	a0 0d       	add	r26, r0
    6e5c:	61 1d       	adc	r22, r1
    6e5e:	22 1f       	adc	r18, r18
    6e60:	74 9f       	mul	r23, r20
    6e62:	33 27       	eor	r19, r19
    6e64:	a0 0d       	add	r26, r0
    6e66:	61 1d       	adc	r22, r1
    6e68:	23 1f       	adc	r18, r19
    6e6a:	84 9f       	mul	r24, r20
    6e6c:	60 0d       	add	r22, r0
    6e6e:	21 1d       	adc	r18, r1
    6e70:	82 2f       	mov	r24, r18
    6e72:	76 2f       	mov	r23, r22
    6e74:	6a 2f       	mov	r22, r26
    6e76:	11 24       	eor	r1, r1
    6e78:	9f 57       	subi	r25, 0x7F	; 127
    6e7a:	50 40       	sbci	r21, 0x00	; 0
    6e7c:	9a f0       	brmi	.+38     	; 0x6ea4 <__mulsf3_pse+0x88>
    6e7e:	f1 f0       	breq	.+60     	; 0x6ebc <__mulsf3_pse+0xa0>
    6e80:	88 23       	and	r24, r24
    6e82:	4a f0       	brmi	.+18     	; 0x6e96 <__mulsf3_pse+0x7a>
    6e84:	ee 0f       	add	r30, r30
    6e86:	ff 1f       	adc	r31, r31
    6e88:	bb 1f       	adc	r27, r27
    6e8a:	66 1f       	adc	r22, r22
    6e8c:	77 1f       	adc	r23, r23
    6e8e:	88 1f       	adc	r24, r24
    6e90:	91 50       	subi	r25, 0x01	; 1
    6e92:	50 40       	sbci	r21, 0x00	; 0
    6e94:	a9 f7       	brne	.-22     	; 0x6e80 <__mulsf3_pse+0x64>
    6e96:	9e 3f       	cpi	r25, 0xFE	; 254
    6e98:	51 05       	cpc	r21, r1
    6e9a:	80 f0       	brcs	.+32     	; 0x6ebc <__mulsf3_pse+0xa0>
    6e9c:	0c 94 a7 36 	jmp	0x6d4e	; 0x6d4e <__fp_inf>
    6ea0:	0c 94 f2 36 	jmp	0x6de4	; 0x6de4 <__fp_szero>
    6ea4:	5f 3f       	cpi	r21, 0xFF	; 255
    6ea6:	e4 f3       	brlt	.-8      	; 0x6ea0 <__mulsf3_pse+0x84>
    6ea8:	98 3e       	cpi	r25, 0xE8	; 232
    6eaa:	d4 f3       	brlt	.-12     	; 0x6ea0 <__mulsf3_pse+0x84>
    6eac:	86 95       	lsr	r24
    6eae:	77 95       	ror	r23
    6eb0:	67 95       	ror	r22
    6eb2:	b7 95       	ror	r27
    6eb4:	f7 95       	ror	r31
    6eb6:	e7 95       	ror	r30
    6eb8:	9f 5f       	subi	r25, 0xFF	; 255
    6eba:	c1 f7       	brne	.-16     	; 0x6eac <__mulsf3_pse+0x90>
    6ebc:	fe 2b       	or	r31, r30
    6ebe:	88 0f       	add	r24, r24
    6ec0:	91 1d       	adc	r25, r1
    6ec2:	96 95       	lsr	r25
    6ec4:	87 95       	ror	r24
    6ec6:	97 f9       	bld	r25, 7
    6ec8:	08 95       	ret

00006eca <__udivmodhi4>:
    6eca:	aa 1b       	sub	r26, r26
    6ecc:	bb 1b       	sub	r27, r27
    6ece:	51 e1       	ldi	r21, 0x11	; 17
    6ed0:	07 c0       	rjmp	.+14     	; 0x6ee0 <__udivmodhi4_ep>

00006ed2 <__udivmodhi4_loop>:
    6ed2:	aa 1f       	adc	r26, r26
    6ed4:	bb 1f       	adc	r27, r27
    6ed6:	a6 17       	cp	r26, r22
    6ed8:	b7 07       	cpc	r27, r23
    6eda:	10 f0       	brcs	.+4      	; 0x6ee0 <__udivmodhi4_ep>
    6edc:	a6 1b       	sub	r26, r22
    6ede:	b7 0b       	sbc	r27, r23

00006ee0 <__udivmodhi4_ep>:
    6ee0:	88 1f       	adc	r24, r24
    6ee2:	99 1f       	adc	r25, r25
    6ee4:	5a 95       	dec	r21
    6ee6:	a9 f7       	brne	.-22     	; 0x6ed2 <__udivmodhi4_loop>
    6ee8:	80 95       	com	r24
    6eea:	90 95       	com	r25
    6eec:	bc 01       	movw	r22, r24
    6eee:	cd 01       	movw	r24, r26
    6ef0:	08 95       	ret

00006ef2 <__udivmodsi4>:
    6ef2:	a1 e2       	ldi	r26, 0x21	; 33
    6ef4:	1a 2e       	mov	r1, r26
    6ef6:	aa 1b       	sub	r26, r26
    6ef8:	bb 1b       	sub	r27, r27
    6efa:	fd 01       	movw	r30, r26
    6efc:	0d c0       	rjmp	.+26     	; 0x6f18 <__udivmodsi4_ep>

00006efe <__udivmodsi4_loop>:
    6efe:	aa 1f       	adc	r26, r26
    6f00:	bb 1f       	adc	r27, r27
    6f02:	ee 1f       	adc	r30, r30
    6f04:	ff 1f       	adc	r31, r31
    6f06:	a2 17       	cp	r26, r18
    6f08:	b3 07       	cpc	r27, r19
    6f0a:	e4 07       	cpc	r30, r20
    6f0c:	f5 07       	cpc	r31, r21
    6f0e:	20 f0       	brcs	.+8      	; 0x6f18 <__udivmodsi4_ep>
    6f10:	a2 1b       	sub	r26, r18
    6f12:	b3 0b       	sbc	r27, r19
    6f14:	e4 0b       	sbc	r30, r20
    6f16:	f5 0b       	sbc	r31, r21

00006f18 <__udivmodsi4_ep>:
    6f18:	66 1f       	adc	r22, r22
    6f1a:	77 1f       	adc	r23, r23
    6f1c:	88 1f       	adc	r24, r24
    6f1e:	99 1f       	adc	r25, r25
    6f20:	1a 94       	dec	r1
    6f22:	69 f7       	brne	.-38     	; 0x6efe <__udivmodsi4_loop>
    6f24:	60 95       	com	r22
    6f26:	70 95       	com	r23
    6f28:	80 95       	com	r24
    6f2a:	90 95       	com	r25
    6f2c:	9b 01       	movw	r18, r22
    6f2e:	ac 01       	movw	r20, r24
    6f30:	bd 01       	movw	r22, r26
    6f32:	cf 01       	movw	r24, r30
    6f34:	08 95       	ret

00006f36 <__divmodsi4>:
    6f36:	05 2e       	mov	r0, r21
    6f38:	97 fb       	bst	r25, 7
    6f3a:	1e f4       	brtc	.+6      	; 0x6f42 <__divmodsi4+0xc>
    6f3c:	00 94       	com	r0
    6f3e:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <__negsi2>
    6f42:	57 fd       	sbrc	r21, 7
    6f44:	07 d0       	rcall	.+14     	; 0x6f54 <__divmodsi4_neg2>
    6f46:	0e 94 79 37 	call	0x6ef2	; 0x6ef2 <__udivmodsi4>
    6f4a:	07 fc       	sbrc	r0, 7
    6f4c:	03 d0       	rcall	.+6      	; 0x6f54 <__divmodsi4_neg2>
    6f4e:	4e f4       	brtc	.+18     	; 0x6f62 <__divmodsi4_exit>
    6f50:	0c 94 b2 37 	jmp	0x6f64	; 0x6f64 <__negsi2>

00006f54 <__divmodsi4_neg2>:
    6f54:	50 95       	com	r21
    6f56:	40 95       	com	r20
    6f58:	30 95       	com	r19
    6f5a:	21 95       	neg	r18
    6f5c:	3f 4f       	sbci	r19, 0xFF	; 255
    6f5e:	4f 4f       	sbci	r20, 0xFF	; 255
    6f60:	5f 4f       	sbci	r21, 0xFF	; 255

00006f62 <__divmodsi4_exit>:
    6f62:	08 95       	ret

00006f64 <__negsi2>:
    6f64:	90 95       	com	r25
    6f66:	80 95       	com	r24
    6f68:	70 95       	com	r23
    6f6a:	61 95       	neg	r22
    6f6c:	7f 4f       	sbci	r23, 0xFF	; 255
    6f6e:	8f 4f       	sbci	r24, 0xFF	; 255
    6f70:	9f 4f       	sbci	r25, 0xFF	; 255
    6f72:	08 95       	ret

00006f74 <__tablejump2__>:
    6f74:	ee 0f       	add	r30, r30
    6f76:	ff 1f       	adc	r31, r31
    6f78:	05 90       	lpm	r0, Z+
    6f7a:	f4 91       	lpm	r31, Z
    6f7c:	e0 2d       	mov	r30, r0
    6f7e:	09 94       	ijmp

00006f80 <__umulhisi3>:
    6f80:	a2 9f       	mul	r26, r18
    6f82:	b0 01       	movw	r22, r0
    6f84:	b3 9f       	mul	r27, r19
    6f86:	c0 01       	movw	r24, r0
    6f88:	a3 9f       	mul	r26, r19
    6f8a:	70 0d       	add	r23, r0
    6f8c:	81 1d       	adc	r24, r1
    6f8e:	11 24       	eor	r1, r1
    6f90:	91 1d       	adc	r25, r1
    6f92:	b2 9f       	mul	r27, r18
    6f94:	70 0d       	add	r23, r0
    6f96:	81 1d       	adc	r24, r1
    6f98:	11 24       	eor	r1, r1
    6f9a:	91 1d       	adc	r25, r1
    6f9c:	08 95       	ret

00006f9e <__muluhisi3>:
    6f9e:	0e 94 c0 37 	call	0x6f80	; 0x6f80 <__umulhisi3>
    6fa2:	a5 9f       	mul	r26, r21
    6fa4:	90 0d       	add	r25, r0
    6fa6:	b4 9f       	mul	r27, r20
    6fa8:	90 0d       	add	r25, r0
    6faa:	a4 9f       	mul	r26, r20
    6fac:	80 0d       	add	r24, r0
    6fae:	91 1d       	adc	r25, r1
    6fb0:	11 24       	eor	r1, r1
    6fb2:	08 95       	ret

00006fb4 <malloc>:
    6fb4:	0f 93       	push	r16
    6fb6:	1f 93       	push	r17
    6fb8:	cf 93       	push	r28
    6fba:	df 93       	push	r29
    6fbc:	82 30       	cpi	r24, 0x02	; 2
    6fbe:	91 05       	cpc	r25, r1
    6fc0:	10 f4       	brcc	.+4      	; 0x6fc6 <malloc+0x12>
    6fc2:	82 e0       	ldi	r24, 0x02	; 2
    6fc4:	90 e0       	ldi	r25, 0x00	; 0
    6fc6:	e0 91 bd 04 	lds	r30, 0x04BD	; 0x8004bd <__flp>
    6fca:	f0 91 be 04 	lds	r31, 0x04BE	; 0x8004be <__flp+0x1>
    6fce:	20 e0       	ldi	r18, 0x00	; 0
    6fd0:	30 e0       	ldi	r19, 0x00	; 0
    6fd2:	a0 e0       	ldi	r26, 0x00	; 0
    6fd4:	b0 e0       	ldi	r27, 0x00	; 0
    6fd6:	30 97       	sbiw	r30, 0x00	; 0
    6fd8:	19 f1       	breq	.+70     	; 0x7020 <malloc+0x6c>
    6fda:	40 81       	ld	r20, Z
    6fdc:	51 81       	ldd	r21, Z+1	; 0x01
    6fde:	02 81       	ldd	r16, Z+2	; 0x02
    6fe0:	13 81       	ldd	r17, Z+3	; 0x03
    6fe2:	48 17       	cp	r20, r24
    6fe4:	59 07       	cpc	r21, r25
    6fe6:	c8 f0       	brcs	.+50     	; 0x701a <malloc+0x66>
    6fe8:	84 17       	cp	r24, r20
    6fea:	95 07       	cpc	r25, r21
    6fec:	69 f4       	brne	.+26     	; 0x7008 <malloc+0x54>
    6fee:	10 97       	sbiw	r26, 0x00	; 0
    6ff0:	31 f0       	breq	.+12     	; 0x6ffe <malloc+0x4a>
    6ff2:	12 96       	adiw	r26, 0x02	; 2
    6ff4:	0c 93       	st	X, r16
    6ff6:	12 97       	sbiw	r26, 0x02	; 2
    6ff8:	13 96       	adiw	r26, 0x03	; 3
    6ffa:	1c 93       	st	X, r17
    6ffc:	27 c0       	rjmp	.+78     	; 0x704c <malloc+0x98>
    6ffe:	00 93 bd 04 	sts	0x04BD, r16	; 0x8004bd <__flp>
    7002:	10 93 be 04 	sts	0x04BE, r17	; 0x8004be <__flp+0x1>
    7006:	22 c0       	rjmp	.+68     	; 0x704c <malloc+0x98>
    7008:	21 15       	cp	r18, r1
    700a:	31 05       	cpc	r19, r1
    700c:	19 f0       	breq	.+6      	; 0x7014 <malloc+0x60>
    700e:	42 17       	cp	r20, r18
    7010:	53 07       	cpc	r21, r19
    7012:	18 f4       	brcc	.+6      	; 0x701a <malloc+0x66>
    7014:	9a 01       	movw	r18, r20
    7016:	bd 01       	movw	r22, r26
    7018:	ef 01       	movw	r28, r30
    701a:	df 01       	movw	r26, r30
    701c:	f8 01       	movw	r30, r16
    701e:	db cf       	rjmp	.-74     	; 0x6fd6 <malloc+0x22>
    7020:	21 15       	cp	r18, r1
    7022:	31 05       	cpc	r19, r1
    7024:	f9 f0       	breq	.+62     	; 0x7064 <malloc+0xb0>
    7026:	28 1b       	sub	r18, r24
    7028:	39 0b       	sbc	r19, r25
    702a:	24 30       	cpi	r18, 0x04	; 4
    702c:	31 05       	cpc	r19, r1
    702e:	80 f4       	brcc	.+32     	; 0x7050 <malloc+0x9c>
    7030:	8a 81       	ldd	r24, Y+2	; 0x02
    7032:	9b 81       	ldd	r25, Y+3	; 0x03
    7034:	61 15       	cp	r22, r1
    7036:	71 05       	cpc	r23, r1
    7038:	21 f0       	breq	.+8      	; 0x7042 <malloc+0x8e>
    703a:	fb 01       	movw	r30, r22
    703c:	93 83       	std	Z+3, r25	; 0x03
    703e:	82 83       	std	Z+2, r24	; 0x02
    7040:	04 c0       	rjmp	.+8      	; 0x704a <malloc+0x96>
    7042:	90 93 be 04 	sts	0x04BE, r25	; 0x8004be <__flp+0x1>
    7046:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <__flp>
    704a:	fe 01       	movw	r30, r28
    704c:	32 96       	adiw	r30, 0x02	; 2
    704e:	44 c0       	rjmp	.+136    	; 0x70d8 <malloc+0x124>
    7050:	fe 01       	movw	r30, r28
    7052:	e2 0f       	add	r30, r18
    7054:	f3 1f       	adc	r31, r19
    7056:	81 93       	st	Z+, r24
    7058:	91 93       	st	Z+, r25
    705a:	22 50       	subi	r18, 0x02	; 2
    705c:	31 09       	sbc	r19, r1
    705e:	39 83       	std	Y+1, r19	; 0x01
    7060:	28 83       	st	Y, r18
    7062:	3a c0       	rjmp	.+116    	; 0x70d8 <malloc+0x124>
    7064:	20 91 bb 04 	lds	r18, 0x04BB	; 0x8004bb <__brkval>
    7068:	30 91 bc 04 	lds	r19, 0x04BC	; 0x8004bc <__brkval+0x1>
    706c:	23 2b       	or	r18, r19
    706e:	41 f4       	brne	.+16     	; 0x7080 <malloc+0xcc>
    7070:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    7074:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    7078:	30 93 bc 04 	sts	0x04BC, r19	; 0x8004bc <__brkval+0x1>
    707c:	20 93 bb 04 	sts	0x04BB, r18	; 0x8004bb <__brkval>
    7080:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
    7084:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
    7088:	21 15       	cp	r18, r1
    708a:	31 05       	cpc	r19, r1
    708c:	41 f4       	brne	.+16     	; 0x709e <malloc+0xea>
    708e:	2d b7       	in	r18, 0x3d	; 61
    7090:	3e b7       	in	r19, 0x3e	; 62
    7092:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    7096:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    709a:	24 1b       	sub	r18, r20
    709c:	35 0b       	sbc	r19, r21
    709e:	e0 91 bb 04 	lds	r30, 0x04BB	; 0x8004bb <__brkval>
    70a2:	f0 91 bc 04 	lds	r31, 0x04BC	; 0x8004bc <__brkval+0x1>
    70a6:	e2 17       	cp	r30, r18
    70a8:	f3 07       	cpc	r31, r19
    70aa:	a0 f4       	brcc	.+40     	; 0x70d4 <malloc+0x120>
    70ac:	2e 1b       	sub	r18, r30
    70ae:	3f 0b       	sbc	r19, r31
    70b0:	28 17       	cp	r18, r24
    70b2:	39 07       	cpc	r19, r25
    70b4:	78 f0       	brcs	.+30     	; 0x70d4 <malloc+0x120>
    70b6:	ac 01       	movw	r20, r24
    70b8:	4e 5f       	subi	r20, 0xFE	; 254
    70ba:	5f 4f       	sbci	r21, 0xFF	; 255
    70bc:	24 17       	cp	r18, r20
    70be:	35 07       	cpc	r19, r21
    70c0:	48 f0       	brcs	.+18     	; 0x70d4 <malloc+0x120>
    70c2:	4e 0f       	add	r20, r30
    70c4:	5f 1f       	adc	r21, r31
    70c6:	50 93 bc 04 	sts	0x04BC, r21	; 0x8004bc <__brkval+0x1>
    70ca:	40 93 bb 04 	sts	0x04BB, r20	; 0x8004bb <__brkval>
    70ce:	81 93       	st	Z+, r24
    70d0:	91 93       	st	Z+, r25
    70d2:	02 c0       	rjmp	.+4      	; 0x70d8 <malloc+0x124>
    70d4:	e0 e0       	ldi	r30, 0x00	; 0
    70d6:	f0 e0       	ldi	r31, 0x00	; 0
    70d8:	cf 01       	movw	r24, r30
    70da:	df 91       	pop	r29
    70dc:	cf 91       	pop	r28
    70de:	1f 91       	pop	r17
    70e0:	0f 91       	pop	r16
    70e2:	08 95       	ret

000070e4 <free>:
    70e4:	cf 93       	push	r28
    70e6:	df 93       	push	r29
    70e8:	00 97       	sbiw	r24, 0x00	; 0
    70ea:	09 f4       	brne	.+2      	; 0x70ee <free+0xa>
    70ec:	81 c0       	rjmp	.+258    	; 0x71f0 <free+0x10c>
    70ee:	fc 01       	movw	r30, r24
    70f0:	32 97       	sbiw	r30, 0x02	; 2
    70f2:	13 82       	std	Z+3, r1	; 0x03
    70f4:	12 82       	std	Z+2, r1	; 0x02
    70f6:	a0 91 bd 04 	lds	r26, 0x04BD	; 0x8004bd <__flp>
    70fa:	b0 91 be 04 	lds	r27, 0x04BE	; 0x8004be <__flp+0x1>
    70fe:	10 97       	sbiw	r26, 0x00	; 0
    7100:	81 f4       	brne	.+32     	; 0x7122 <free+0x3e>
    7102:	20 81       	ld	r18, Z
    7104:	31 81       	ldd	r19, Z+1	; 0x01
    7106:	82 0f       	add	r24, r18
    7108:	93 1f       	adc	r25, r19
    710a:	20 91 bb 04 	lds	r18, 0x04BB	; 0x8004bb <__brkval>
    710e:	30 91 bc 04 	lds	r19, 0x04BC	; 0x8004bc <__brkval+0x1>
    7112:	28 17       	cp	r18, r24
    7114:	39 07       	cpc	r19, r25
    7116:	51 f5       	brne	.+84     	; 0x716c <free+0x88>
    7118:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <__brkval+0x1>
    711c:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <__brkval>
    7120:	67 c0       	rjmp	.+206    	; 0x71f0 <free+0x10c>
    7122:	ed 01       	movw	r28, r26
    7124:	20 e0       	ldi	r18, 0x00	; 0
    7126:	30 e0       	ldi	r19, 0x00	; 0
    7128:	ce 17       	cp	r28, r30
    712a:	df 07       	cpc	r29, r31
    712c:	40 f4       	brcc	.+16     	; 0x713e <free+0x5a>
    712e:	4a 81       	ldd	r20, Y+2	; 0x02
    7130:	5b 81       	ldd	r21, Y+3	; 0x03
    7132:	9e 01       	movw	r18, r28
    7134:	41 15       	cp	r20, r1
    7136:	51 05       	cpc	r21, r1
    7138:	f1 f0       	breq	.+60     	; 0x7176 <free+0x92>
    713a:	ea 01       	movw	r28, r20
    713c:	f5 cf       	rjmp	.-22     	; 0x7128 <free+0x44>
    713e:	d3 83       	std	Z+3, r29	; 0x03
    7140:	c2 83       	std	Z+2, r28	; 0x02
    7142:	40 81       	ld	r20, Z
    7144:	51 81       	ldd	r21, Z+1	; 0x01
    7146:	84 0f       	add	r24, r20
    7148:	95 1f       	adc	r25, r21
    714a:	c8 17       	cp	r28, r24
    714c:	d9 07       	cpc	r29, r25
    714e:	59 f4       	brne	.+22     	; 0x7166 <free+0x82>
    7150:	88 81       	ld	r24, Y
    7152:	99 81       	ldd	r25, Y+1	; 0x01
    7154:	84 0f       	add	r24, r20
    7156:	95 1f       	adc	r25, r21
    7158:	02 96       	adiw	r24, 0x02	; 2
    715a:	91 83       	std	Z+1, r25	; 0x01
    715c:	80 83       	st	Z, r24
    715e:	8a 81       	ldd	r24, Y+2	; 0x02
    7160:	9b 81       	ldd	r25, Y+3	; 0x03
    7162:	93 83       	std	Z+3, r25	; 0x03
    7164:	82 83       	std	Z+2, r24	; 0x02
    7166:	21 15       	cp	r18, r1
    7168:	31 05       	cpc	r19, r1
    716a:	29 f4       	brne	.+10     	; 0x7176 <free+0x92>
    716c:	f0 93 be 04 	sts	0x04BE, r31	; 0x8004be <__flp+0x1>
    7170:	e0 93 bd 04 	sts	0x04BD, r30	; 0x8004bd <__flp>
    7174:	3d c0       	rjmp	.+122    	; 0x71f0 <free+0x10c>
    7176:	e9 01       	movw	r28, r18
    7178:	fb 83       	std	Y+3, r31	; 0x03
    717a:	ea 83       	std	Y+2, r30	; 0x02
    717c:	49 91       	ld	r20, Y+
    717e:	59 91       	ld	r21, Y+
    7180:	c4 0f       	add	r28, r20
    7182:	d5 1f       	adc	r29, r21
    7184:	ec 17       	cp	r30, r28
    7186:	fd 07       	cpc	r31, r29
    7188:	61 f4       	brne	.+24     	; 0x71a2 <free+0xbe>
    718a:	80 81       	ld	r24, Z
    718c:	91 81       	ldd	r25, Z+1	; 0x01
    718e:	84 0f       	add	r24, r20
    7190:	95 1f       	adc	r25, r21
    7192:	02 96       	adiw	r24, 0x02	; 2
    7194:	e9 01       	movw	r28, r18
    7196:	99 83       	std	Y+1, r25	; 0x01
    7198:	88 83       	st	Y, r24
    719a:	82 81       	ldd	r24, Z+2	; 0x02
    719c:	93 81       	ldd	r25, Z+3	; 0x03
    719e:	9b 83       	std	Y+3, r25	; 0x03
    71a0:	8a 83       	std	Y+2, r24	; 0x02
    71a2:	e0 e0       	ldi	r30, 0x00	; 0
    71a4:	f0 e0       	ldi	r31, 0x00	; 0
    71a6:	12 96       	adiw	r26, 0x02	; 2
    71a8:	8d 91       	ld	r24, X+
    71aa:	9c 91       	ld	r25, X
    71ac:	13 97       	sbiw	r26, 0x03	; 3
    71ae:	00 97       	sbiw	r24, 0x00	; 0
    71b0:	19 f0       	breq	.+6      	; 0x71b8 <free+0xd4>
    71b2:	fd 01       	movw	r30, r26
    71b4:	dc 01       	movw	r26, r24
    71b6:	f7 cf       	rjmp	.-18     	; 0x71a6 <free+0xc2>
    71b8:	8d 91       	ld	r24, X+
    71ba:	9c 91       	ld	r25, X
    71bc:	11 97       	sbiw	r26, 0x01	; 1
    71be:	9d 01       	movw	r18, r26
    71c0:	2e 5f       	subi	r18, 0xFE	; 254
    71c2:	3f 4f       	sbci	r19, 0xFF	; 255
    71c4:	82 0f       	add	r24, r18
    71c6:	93 1f       	adc	r25, r19
    71c8:	20 91 bb 04 	lds	r18, 0x04BB	; 0x8004bb <__brkval>
    71cc:	30 91 bc 04 	lds	r19, 0x04BC	; 0x8004bc <__brkval+0x1>
    71d0:	28 17       	cp	r18, r24
    71d2:	39 07       	cpc	r19, r25
    71d4:	69 f4       	brne	.+26     	; 0x71f0 <free+0x10c>
    71d6:	30 97       	sbiw	r30, 0x00	; 0
    71d8:	29 f4       	brne	.+10     	; 0x71e4 <free+0x100>
    71da:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <__flp+0x1>
    71de:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <__flp>
    71e2:	02 c0       	rjmp	.+4      	; 0x71e8 <free+0x104>
    71e4:	13 82       	std	Z+3, r1	; 0x03
    71e6:	12 82       	std	Z+2, r1	; 0x02
    71e8:	b0 93 bc 04 	sts	0x04BC, r27	; 0x8004bc <__brkval+0x1>
    71ec:	a0 93 bb 04 	sts	0x04BB, r26	; 0x8004bb <__brkval>
    71f0:	df 91       	pop	r29
    71f2:	cf 91       	pop	r28
    71f4:	08 95       	ret

000071f6 <strcmp>:
    71f6:	fb 01       	movw	r30, r22
    71f8:	dc 01       	movw	r26, r24
    71fa:	8d 91       	ld	r24, X+
    71fc:	01 90       	ld	r0, Z+
    71fe:	80 19       	sub	r24, r0
    7200:	01 10       	cpse	r0, r1
    7202:	d9 f3       	breq	.-10     	; 0x71fa <strcmp+0x4>
    7204:	99 0b       	sbc	r25, r25
    7206:	08 95       	ret

00007208 <strcpy>:
    7208:	fb 01       	movw	r30, r22
    720a:	dc 01       	movw	r26, r24
    720c:	01 90       	ld	r0, Z+
    720e:	0d 92       	st	X+, r0
    7210:	00 20       	and	r0, r0
    7212:	e1 f7       	brne	.-8      	; 0x720c <strcpy+0x4>
    7214:	08 95       	ret

00007216 <strncpy>:
    7216:	fb 01       	movw	r30, r22
    7218:	dc 01       	movw	r26, r24
    721a:	41 50       	subi	r20, 0x01	; 1
    721c:	50 40       	sbci	r21, 0x00	; 0
    721e:	48 f0       	brcs	.+18     	; 0x7232 <strncpy+0x1c>
    7220:	01 90       	ld	r0, Z+
    7222:	0d 92       	st	X+, r0
    7224:	00 20       	and	r0, r0
    7226:	c9 f7       	brne	.-14     	; 0x721a <strncpy+0x4>
    7228:	01 c0       	rjmp	.+2      	; 0x722c <strncpy+0x16>
    722a:	1d 92       	st	X+, r1
    722c:	41 50       	subi	r20, 0x01	; 1
    722e:	50 40       	sbci	r21, 0x00	; 0
    7230:	e0 f7       	brcc	.-8      	; 0x722a <strncpy+0x14>
    7232:	08 95       	ret

00007234 <strstr>:
    7234:	fb 01       	movw	r30, r22
    7236:	51 91       	ld	r21, Z+
    7238:	55 23       	and	r21, r21
    723a:	a9 f0       	breq	.+42     	; 0x7266 <strstr+0x32>
    723c:	bf 01       	movw	r22, r30
    723e:	dc 01       	movw	r26, r24
    7240:	4d 91       	ld	r20, X+
    7242:	45 17       	cp	r20, r21
    7244:	41 11       	cpse	r20, r1
    7246:	e1 f7       	brne	.-8      	; 0x7240 <strstr+0xc>
    7248:	59 f4       	brne	.+22     	; 0x7260 <strstr+0x2c>
    724a:	cd 01       	movw	r24, r26
    724c:	01 90       	ld	r0, Z+
    724e:	00 20       	and	r0, r0
    7250:	49 f0       	breq	.+18     	; 0x7264 <strstr+0x30>
    7252:	4d 91       	ld	r20, X+
    7254:	40 15       	cp	r20, r0
    7256:	41 11       	cpse	r20, r1
    7258:	c9 f3       	breq	.-14     	; 0x724c <strstr+0x18>
    725a:	fb 01       	movw	r30, r22
    725c:	41 11       	cpse	r20, r1
    725e:	ef cf       	rjmp	.-34     	; 0x723e <strstr+0xa>
    7260:	81 e0       	ldi	r24, 0x01	; 1
    7262:	90 e0       	ldi	r25, 0x00	; 0
    7264:	01 97       	sbiw	r24, 0x01	; 1
    7266:	08 95       	ret

00007268 <eeprom_read_block>:
    7268:	dc 01       	movw	r26, r24
    726a:	cb 01       	movw	r24, r22

0000726c <eeprom_read_blraw>:
    726c:	fc 01       	movw	r30, r24
    726e:	e1 99       	sbic	0x1c, 1	; 28
    7270:	fe cf       	rjmp	.-4      	; 0x726e <eeprom_read_blraw+0x2>
    7272:	06 c0       	rjmp	.+12     	; 0x7280 <eeprom_read_blraw+0x14>
    7274:	ff bb       	out	0x1f, r31	; 31
    7276:	ee bb       	out	0x1e, r30	; 30
    7278:	e0 9a       	sbi	0x1c, 0	; 28
    727a:	31 96       	adiw	r30, 0x01	; 1
    727c:	0d b2       	in	r0, 0x1d	; 29
    727e:	0d 92       	st	X+, r0
    7280:	41 50       	subi	r20, 0x01	; 1
    7282:	50 40       	sbci	r21, 0x00	; 0
    7284:	b8 f7       	brcc	.-18     	; 0x7274 <eeprom_read_blraw+0x8>
    7286:	08 95       	ret

00007288 <_exit>:
    7288:	f8 94       	cli

0000728a <__stop_program>:
    728a:	ff cf       	rjmp	.-2      	; 0x728a <__stop_program>
