
Ketron32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006fda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  00006fda  0000706e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000343  0080017c  0080017c  0000718a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000718a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000071bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008f8  00000000  00000000  000071f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c9bc  00000000  00000000  00007af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002795  00000000  00000000  000144ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006520  00000000  00000000  00016c41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000022a0  00000000  00000000  0001d164  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b50  00000000  00000000  0001f404  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c96b  00000000  00000000  00020f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008a8  00000000  00000000  0002d8bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__ctors_end>
       4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
       8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
       c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      10:	0c 94 22 33 	jmp	0x6644	; 0x6644 <__vector_4>
      14:	0c 94 2e 32 	jmp	0x645c	; 0x645c <__vector_5>
      18:	0c 94 f5 32 	jmp	0x65ea	; 0x65ea <__vector_6>
      1c:	0c 94 9b 32 	jmp	0x6536	; 0x6536 <__vector_7>
      20:	0c 94 c8 32 	jmp	0x6590	; 0x6590 <__vector_8>
      24:	0c 94 01 32 	jmp	0x6402	; 0x6402 <__vector_9>
      28:	0c 94 6e 32 	jmp	0x64dc	; 0x64dc <__vector_10>
      2c:	0c 94 ae 31 	jmp	0x635c	; 0x635c <__vector_11>
      30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      34:	0c 94 31 34 	jmp	0x6862	; 0x6862 <__vector_13>
      38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      3c:	0c 94 f6 33 	jmp	0x67ec	; 0x67ec <__vector_15>
      40:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__vector_16>
      44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      54:	23 1d       	adc	r18, r3
      56:	d5 1e       	adc	r13, r21
      58:	34 1d       	adc	r19, r4
      5a:	45 1d       	adc	r20, r5
      5c:	a1 1d       	adc	r26, r1
      5e:	d4 1d       	adc	r29, r4
      60:	eb 1d       	adc	r30, r11
      62:	28 1e       	adc	r2, r24
      64:	3f 1e       	adc	r3, r31
      66:	1b 1d       	adc	r17, r11
      68:	5d 27       	eor	r21, r29
      6a:	5f 27       	eor	r21, r31
      6c:	5f 27       	eor	r21, r31
      6e:	5f 27       	eor	r21, r31
      70:	5f 27       	eor	r21, r31
      72:	5f 27       	eor	r21, r31
      74:	5f 27       	eor	r21, r31
      76:	5f 27       	eor	r21, r31
      78:	5f 27       	eor	r21, r31
      7a:	5f 27       	eor	r21, r31
      7c:	5f 27       	eor	r21, r31
      7e:	5f 27       	eor	r21, r31
      80:	5f 27       	eor	r21, r31
      82:	5f 27       	eor	r21, r31
      84:	5f 27       	eor	r21, r31
      86:	5f 27       	eor	r21, r31
      88:	5d 27       	eor	r21, r29
      8a:	5f 27       	eor	r21, r31
      8c:	5f 27       	eor	r21, r31
      8e:	5f 27       	eor	r21, r31
      90:	5f 27       	eor	r21, r31
      92:	5f 27       	eor	r21, r31
      94:	5f 27       	eor	r21, r31
      96:	5f 27       	eor	r21, r31
      98:	5f 27       	eor	r21, r31
      9a:	5f 27       	eor	r21, r31
      9c:	5f 27       	eor	r21, r31
      9e:	5f 27       	eor	r21, r31
      a0:	5f 27       	eor	r21, r31
      a2:	5f 27       	eor	r21, r31
      a4:	5f 27       	eor	r21, r31
      a6:	5f 27       	eor	r21, r31
      a8:	5d 27       	eor	r21, r29
      aa:	5f 27       	eor	r21, r31
      ac:	5f 27       	eor	r21, r31
      ae:	5f 27       	eor	r21, r31
      b0:	5f 27       	eor	r21, r31
      b2:	5f 27       	eor	r21, r31
      b4:	5f 27       	eor	r21, r31
      b6:	5f 27       	eor	r21, r31
      b8:	5f 27       	eor	r21, r31
      ba:	5f 27       	eor	r21, r31
      bc:	5f 27       	eor	r21, r31
      be:	5f 27       	eor	r21, r31
      c0:	5f 27       	eor	r21, r31
      c2:	5f 27       	eor	r21, r31
      c4:	5f 27       	eor	r21, r31
      c6:	5f 27       	eor	r21, r31
      c8:	5d 27       	eor	r21, r29
      ca:	5f 27       	eor	r21, r31
      cc:	5f 27       	eor	r21, r31
      ce:	5f 27       	eor	r21, r31
      d0:	5f 27       	eor	r21, r31
      d2:	5f 27       	eor	r21, r31
      d4:	5f 27       	eor	r21, r31
      d6:	5f 27       	eor	r21, r31
      d8:	5f 27       	eor	r21, r31
      da:	5f 27       	eor	r21, r31
      dc:	5f 27       	eor	r21, r31
      de:	5f 27       	eor	r21, r31
      e0:	5f 27       	eor	r21, r31
      e2:	5f 27       	eor	r21, r31
      e4:	5f 27       	eor	r21, r31
      e6:	5f 27       	eor	r21, r31
      e8:	5b 27       	eor	r21, r27
      ea:	5f 27       	eor	r21, r31
      ec:	5f 27       	eor	r21, r31
      ee:	5f 27       	eor	r21, r31
      f0:	5f 27       	eor	r21, r31
      f2:	5f 27       	eor	r21, r31
      f4:	5f 27       	eor	r21, r31
      f6:	5f 27       	eor	r21, r31
      f8:	5f 27       	eor	r21, r31
      fa:	5f 27       	eor	r21, r31
      fc:	5f 27       	eor	r21, r31
      fe:	5f 27       	eor	r21, r31
     100:	5f 27       	eor	r21, r31
     102:	5f 27       	eor	r21, r31
     104:	5f 27       	eor	r21, r31
     106:	5f 27       	eor	r21, r31
     108:	5b 27       	eor	r21, r27
     10a:	5f 27       	eor	r21, r31
     10c:	5f 27       	eor	r21, r31
     10e:	5f 27       	eor	r21, r31
     110:	5f 27       	eor	r21, r31
     112:	5f 27       	eor	r21, r31
     114:	5f 27       	eor	r21, r31
     116:	5f 27       	eor	r21, r31
     118:	5f 27       	eor	r21, r31
     11a:	5f 27       	eor	r21, r31
     11c:	5f 27       	eor	r21, r31
     11e:	5f 27       	eor	r21, r31
     120:	5f 27       	eor	r21, r31
     122:	5f 27       	eor	r21, r31
     124:	5f 27       	eor	r21, r31
     126:	5f 27       	eor	r21, r31
     128:	5d 27       	eor	r21, r29
     12a:	5f 27       	eor	r21, r31
     12c:	5f 27       	eor	r21, r31
     12e:	5f 27       	eor	r21, r31
     130:	5f 27       	eor	r21, r31
     132:	5f 27       	eor	r21, r31
     134:	5f 27       	eor	r21, r31
     136:	5f 27       	eor	r21, r31
     138:	5f 27       	eor	r21, r31
     13a:	5f 27       	eor	r21, r31
     13c:	5f 27       	eor	r21, r31
     13e:	5f 27       	eor	r21, r31
     140:	5f 27       	eor	r21, r31
     142:	5f 27       	eor	r21, r31
     144:	5f 27       	eor	r21, r31
     146:	5f 27       	eor	r21, r31
     148:	5f 27       	eor	r21, r31
     14a:	5b 27       	eor	r21, r27
     14c:	5d 27       	eor	r21, r29
     14e:	5b 27       	eor	r21, r27
     150:	5f 27       	eor	r21, r31
     152:	5f 27       	eor	r21, r31
     154:	61 27       	eor	r22, r17
     156:	5f 27       	eor	r21, r31
     158:	61 27       	eor	r22, r17
     15a:	61 27       	eor	r22, r17
     15c:	61 27       	eor	r22, r17
     15e:	61 27       	eor	r22, r17
     160:	61 27       	eor	r22, r17
     162:	5f 27       	eor	r21, r31
     164:	61 27       	eor	r22, r17
     166:	61 27       	eor	r22, r17
     168:	d6 2a       	or	r13, r22
     16a:	df 2a       	or	r13, r31
     16c:	46 2b       	or	r20, r22
     16e:	4d 2b       	or	r20, r29
     170:	31 2c       	mov	r3, r1
     172:	31 2c       	mov	r3, r1
     174:	31 2c       	mov	r3, r1
     176:	31 2c       	mov	r3, r1
     178:	31 2c       	mov	r3, r1
     17a:	31 2c       	mov	r3, r1
     17c:	dc 2b       	or	r29, r28
     17e:	e2 2b       	or	r30, r18
     180:	f5 2b       	or	r31, r21
     182:	08 2c       	mov	r0, r8
     184:	1d 2c       	mov	r1, r13

00000186 <LcdCustomChar>:
     186:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     196:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     1a6:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     1b6:	03 07 0f 1f 0f 07 03 00 00 1f 1f 1f 1f 1f 1f 00     ................
     1c6:	1b 1b 1b 1b 1b 1b 1b 00 18 1c 1e 1f 1e 1c 18 00     ................
     1d6:	00 04 04 0e 0e 1f 1f 00 00 1f 1f 0e 0e 04 04 00     ................
	...
     1ee:	00 0e 19 15 13 0e 00 00 00 0e 15 15 15 0e 00 00     ................
     1fe:	00 0e 13 15 19 0e 00 00 00 0e 11 1f 11 0e 00 00     ................

0000020e <__ctors_end>:
     20e:	11 24       	eor	r1, r1
     210:	1f be       	out	0x3f, r1	; 63
     212:	cf e5       	ldi	r28, 0x5F	; 95
     214:	d8 e0       	ldi	r29, 0x08	; 8
     216:	de bf       	out	0x3e, r29	; 62
     218:	cd bf       	out	0x3d, r28	; 61

0000021a <__do_copy_data>:
     21a:	11 e0       	ldi	r17, 0x01	; 1
     21c:	a0 e6       	ldi	r26, 0x60	; 96
     21e:	b0 e0       	ldi	r27, 0x00	; 0
     220:	ea ed       	ldi	r30, 0xDA	; 218
     222:	ff e6       	ldi	r31, 0x6F	; 111
     224:	02 c0       	rjmp	.+4      	; 0x22a <__do_copy_data+0x10>
     226:	05 90       	lpm	r0, Z+
     228:	0d 92       	st	X+, r0
     22a:	ac 37       	cpi	r26, 0x7C	; 124
     22c:	b1 07       	cpc	r27, r17
     22e:	d9 f7       	brne	.-10     	; 0x226 <__do_copy_data+0xc>

00000230 <__do_clear_bss>:
     230:	24 e0       	ldi	r18, 0x04	; 4
     232:	ac e7       	ldi	r26, 0x7C	; 124
     234:	b1 e0       	ldi	r27, 0x01	; 1
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	af 3b       	cpi	r26, 0xBF	; 191
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <main>
     244:	0c 94 eb 37 	jmp	0x6fd6	; 0x6fd6 <_exit>

00000248 <__bad_interrupt>:
     248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <a2dSetPrescaler>:

// return TRUE if conversion is complete
u08 a2dIsComplete(void)
{
	return bit_is_set(ADCSR, ADSC);
}
     24c:	96 b1       	in	r25, 0x06	; 6
     24e:	98 7f       	andi	r25, 0xF8	; 248
     250:	89 2b       	or	r24, r25
     252:	86 b9       	out	0x06, r24	; 6
     254:	08 95       	ret

00000256 <a2dSetReference>:
     256:	27 b1       	in	r18, 0x07	; 7
     258:	2f 73       	andi	r18, 0x3F	; 63
     25a:	30 e4       	ldi	r19, 0x40	; 64
     25c:	83 9f       	mul	r24, r19
     25e:	c0 01       	movw	r24, r0
     260:	11 24       	eor	r1, r1
     262:	82 2b       	or	r24, r18
     264:	87 b9       	out	0x07, r24	; 7
     266:	08 95       	ret

00000268 <a2dInit>:
     268:	37 9a       	sbi	0x06, 7	; 6
     26a:	35 98       	cbi	0x06, 5	; 6
     26c:	86 e0       	ldi	r24, 0x06	; 6
     26e:	0e 94 26 01 	call	0x24c	; 0x24c <a2dSetPrescaler>
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	0e 94 2b 01 	call	0x256	; 0x256 <a2dSetReference>
     278:	3d 98       	cbi	0x07, 5	; 7
     27a:	33 9a       	sbi	0x06, 3	; 6
     27c:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <a2dCompleteFlag>
     280:	78 94       	sei
     282:	08 95       	ret

00000284 <a2dSetChannel>:
     284:	97 b1       	in	r25, 0x07	; 7
     286:	90 7e       	andi	r25, 0xE0	; 224
     288:	8f 71       	andi	r24, 0x1F	; 31
     28a:	89 2b       	or	r24, r25
     28c:	87 b9       	out	0x07, r24	; 7
     28e:	08 95       	ret

00000290 <a2dStartConvert>:
     290:	34 9a       	sbi	0x06, 4	; 6
     292:	36 9a       	sbi	0x06, 6	; 6
     294:	08 95       	ret

00000296 <a2dConvert10bit>:

// Perform a 10-bit conversion
// starts conversion, waits until conversion is done, and returns result
unsigned short a2dConvert10bit(unsigned char ch)
{
	a2dCompleteFlag = FALSE;				// clear conversion complete flag
     296:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <a2dCompleteFlag>
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
     29a:	97 b1       	in	r25, 0x07	; 7
     29c:	90 7e       	andi	r25, 0xE0	; 224
     29e:	8f 71       	andi	r24, 0x1F	; 31
     2a0:	89 2b       	or	r24, r25
     2a2:	87 b9       	out	0x07, r24	; 7
	sbi(ADCSR, ADIF);						// clear hardware "conversion complete" flag 
     2a4:	34 9a       	sbi	0x06, 4	; 6
	sbi(ADCSR, ADSC);						// start conversion
     2a6:	36 9a       	sbi	0x06, 6	; 6
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSR, ADSC) );		// wait until conversion complete
     2a8:	36 99       	sbic	0x06, 6	; 6
     2aa:	fe cf       	rjmp	.-4      	; 0x2a8 <a2dConvert10bit+0x12>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	return (inb(ADCL) | (inb(ADCH)<<8));	// read ADC (full 10 bits);
     2ac:	84 b1       	in	r24, 0x04	; 4
     2ae:	25 b1       	in	r18, 0x05	; 5
     2b0:	90 e0       	ldi	r25, 0x00	; 0
}
     2b2:	92 2b       	or	r25, r18
     2b4:	08 95       	ret

000002b6 <a2dConvert8bit>:
// Perform a 8-bit conversion.
// starts conversion, waits until conversion is done, and returns result
unsigned char a2dConvert8bit(unsigned char ch)
{
	// do 10-bit conversion and return highest 8 bits
	return a2dConvert10bit(ch)>>2;			// return ADC MSB byte
     2b6:	0e 94 4b 01 	call	0x296	; 0x296 <a2dConvert10bit>
     2ba:	96 95       	lsr	r25
     2bc:	87 95       	ror	r24
     2be:	96 95       	lsr	r25
     2c0:	87 95       	ror	r24
}
     2c2:	08 95       	ret

000002c4 <__vector_16>:

//! Interrupt handler for ADC complete interrupt.
SIGNAL(ADC_vect)
{
     2c4:	1f 92       	push	r1
     2c6:	0f 92       	push	r0
     2c8:	0f b6       	in	r0, 0x3f	; 63
     2ca:	0f 92       	push	r0
     2cc:	11 24       	eor	r1, r1
     2ce:	8f 93       	push	r24
	// set the a2d conversion flag to indicate "complete"
	a2dCompleteFlag = TRUE;
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <a2dCompleteFlag>
	
}
     2d6:	8f 91       	pop	r24
     2d8:	0f 90       	pop	r0
     2da:	0f be       	out	0x3f, r0	; 63
     2dc:	0f 90       	pop	r0
     2de:	1f 90       	pop	r1
     2e0:	18 95       	reti

000002e2 <bufferInit>:
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
	return data;
}
     2e2:	fc 01       	movw	r30, r24
     2e4:	8f b7       	in	r24, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	71 83       	std	Z+1, r23	; 0x01
     2ea:	60 83       	st	Z, r22
     2ec:	53 83       	std	Z+3, r21	; 0x03
     2ee:	42 83       	std	Z+2, r20	; 0x02
     2f0:	17 82       	std	Z+7, r1	; 0x07
     2f2:	16 82       	std	Z+6, r1	; 0x06
     2f4:	15 82       	std	Z+5, r1	; 0x05
     2f6:	14 82       	std	Z+4, r1	; 0x04
     2f8:	8f bf       	out	0x3f, r24	; 63
     2fa:	08 95       	ret

000002fc <bufferGetFromFront>:
     2fc:	fc 01       	movw	r30, r24
     2fe:	9f b7       	in	r25, 0x3f	; 63
     300:	f8 94       	cli
     302:	44 81       	ldd	r20, Z+4	; 0x04
     304:	55 81       	ldd	r21, Z+5	; 0x05
     306:	41 15       	cp	r20, r1
     308:	51 05       	cpc	r21, r1
     30a:	c9 f0       	breq	.+50     	; 0x33e <bufferGetFromFront+0x42>
     30c:	26 81       	ldd	r18, Z+6	; 0x06
     30e:	37 81       	ldd	r19, Z+7	; 0x07
     310:	a0 81       	ld	r26, Z
     312:	b1 81       	ldd	r27, Z+1	; 0x01
     314:	a2 0f       	add	r26, r18
     316:	b3 1f       	adc	r27, r19
     318:	8c 91       	ld	r24, X
     31a:	2f 5f       	subi	r18, 0xFF	; 255
     31c:	3f 4f       	sbci	r19, 0xFF	; 255
     31e:	37 83       	std	Z+7, r19	; 0x07
     320:	26 83       	std	Z+6, r18	; 0x06
     322:	62 81       	ldd	r22, Z+2	; 0x02
     324:	73 81       	ldd	r23, Z+3	; 0x03
     326:	26 17       	cp	r18, r22
     328:	37 07       	cpc	r19, r23
     32a:	20 f0       	brcs	.+8      	; 0x334 <bufferGetFromFront+0x38>
     32c:	26 1b       	sub	r18, r22
     32e:	37 0b       	sbc	r19, r23
     330:	37 83       	std	Z+7, r19	; 0x07
     332:	26 83       	std	Z+6, r18	; 0x06
     334:	41 50       	subi	r20, 0x01	; 1
     336:	51 09       	sbc	r21, r1
     338:	55 83       	std	Z+5, r21	; 0x05
     33a:	44 83       	std	Z+4, r20	; 0x04
     33c:	01 c0       	rjmp	.+2      	; 0x340 <bufferGetFromFront+0x44>
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	9f bf       	out	0x3f, r25	; 63
     342:	08 95       	ret

00000344 <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     344:	cf 93       	push	r28
     346:	fc 01       	movw	r30, r24
     348:	c6 2f       	mov	r28, r22
	// begin critical section
	CRITICAL_SECTION_START;
     34a:	4f b7       	in	r20, 0x3f	; 63
     34c:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     34e:	24 81       	ldd	r18, Z+4	; 0x04
     350:	35 81       	ldd	r19, Z+5	; 0x05
     352:	62 81       	ldd	r22, Z+2	; 0x02
     354:	73 81       	ldd	r23, Z+3	; 0x03
     356:	26 17       	cp	r18, r22
     358:	37 07       	cpc	r19, r23
     35a:	98 f4       	brcc	.+38     	; 0x382 <bufferAddToEnd+0x3e>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     35c:	86 81       	ldd	r24, Z+6	; 0x06
     35e:	97 81       	ldd	r25, Z+7	; 0x07
     360:	82 0f       	add	r24, r18
     362:	93 1f       	adc	r25, r19
     364:	0e 94 0c 36 	call	0x6c18	; 0x6c18 <__udivmodhi4>
     368:	a0 81       	ld	r26, Z
     36a:	b1 81       	ldd	r27, Z+1	; 0x01
     36c:	a8 0f       	add	r26, r24
     36e:	b9 1f       	adc	r27, r25
     370:	cc 93       	st	X, r28
		// increment the length
		buffer->datalength++;
     372:	84 81       	ldd	r24, Z+4	; 0x04
     374:	95 81       	ldd	r25, Z+5	; 0x05
     376:	01 96       	adiw	r24, 0x01	; 1
     378:	95 83       	std	Z+5, r25	; 0x05
     37a:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     37c:	4f bf       	out	0x3f, r20	; 63
		// return success
		return -1;
     37e:	8f ef       	ldi	r24, 0xFF	; 255
     380:	02 c0       	rjmp	.+4      	; 0x386 <bufferAddToEnd+0x42>
	}
	// end critical section
	CRITICAL_SECTION_END;
     382:	4f bf       	out	0x3f, r20	; 63
	// return failure
	return 0;
     384:	80 e0       	ldi	r24, 0x00	; 0
}
     386:	cf 91       	pop	r28
     388:	08 95       	ret

0000038a <mem_cpy>:
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj.fs, res);
}
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	42 30       	cpi	r20, 0x02	; 2
     390:	51 05       	cpc	r21, r1
     392:	c0 f0       	brcs	.+48     	; 0x3c4 <mem_cpy+0x3a>
     394:	db 01       	movw	r26, r22
     396:	fc 01       	movw	r30, r24
     398:	9a 01       	movw	r18, r20
     39a:	cd 91       	ld	r28, X+
     39c:	dd 91       	ld	r29, X+
     39e:	c1 93       	st	Z+, r28
     3a0:	d1 93       	st	Z+, r29
     3a2:	22 50       	subi	r18, 0x02	; 2
     3a4:	31 09       	sbc	r19, r1
     3a6:	22 30       	cpi	r18, 0x02	; 2
     3a8:	31 05       	cpc	r19, r1
     3aa:	b8 f7       	brcc	.-18     	; 0x39a <mem_cpy+0x10>
     3ac:	9a 01       	movw	r18, r20
     3ae:	22 50       	subi	r18, 0x02	; 2
     3b0:	31 09       	sbc	r19, r1
     3b2:	2e 7f       	andi	r18, 0xFE	; 254
     3b4:	2e 5f       	subi	r18, 0xFE	; 254
     3b6:	3f 4f       	sbci	r19, 0xFF	; 255
     3b8:	82 0f       	add	r24, r18
     3ba:	93 1f       	adc	r25, r19
     3bc:	62 0f       	add	r22, r18
     3be:	73 1f       	adc	r23, r19
     3c0:	41 70       	andi	r20, 0x01	; 1
     3c2:	55 27       	eor	r21, r21
     3c4:	41 15       	cp	r20, r1
     3c6:	51 05       	cpc	r21, r1
     3c8:	49 f0       	breq	.+18     	; 0x3dc <mem_cpy+0x52>
     3ca:	db 01       	movw	r26, r22
     3cc:	fc 01       	movw	r30, r24
     3ce:	48 0f       	add	r20, r24
     3d0:	59 1f       	adc	r21, r25
     3d2:	9d 91       	ld	r25, X+
     3d4:	91 93       	st	Z+, r25
     3d6:	e4 17       	cp	r30, r20
     3d8:	f5 07       	cpc	r31, r21
     3da:	d9 f7       	brne	.-10     	; 0x3d2 <mem_cpy+0x48>
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	08 95       	ret

000003e2 <get_fileinfo>:
     3e2:	0f 93       	push	r16
     3e4:	1f 93       	push	r17
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
     3ea:	fb 01       	movw	r30, r22
     3ec:	39 96       	adiw	r30, 0x09	; 9
     3ee:	dc 01       	movw	r26, r24
     3f0:	1e 96       	adiw	r26, 0x0e	; 14
     3f2:	0d 91       	ld	r16, X+
     3f4:	1d 91       	ld	r17, X+
     3f6:	2d 91       	ld	r18, X+
     3f8:	3c 91       	ld	r19, X
     3fa:	51 97       	sbiw	r26, 0x11	; 17
     3fc:	01 2b       	or	r16, r17
     3fe:	02 2b       	or	r16, r18
     400:	03 2b       	or	r16, r19
     402:	09 f4       	brne	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     404:	51 c0       	rjmp	.+162    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     406:	52 96       	adiw	r26, 0x12	; 18
     408:	4d 91       	ld	r20, X+
     40a:	5c 91       	ld	r21, X
     40c:	53 97       	sbiw	r26, 0x13	; 19
     40e:	ea 01       	movw	r28, r20
     410:	88 81       	ld	r24, Y
     412:	80 32       	cpi	r24, 0x20	; 32
     414:	b9 f0       	breq	.+46     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     416:	9a 01       	movw	r18, r20
     418:	2f 5f       	subi	r18, 0xFF	; 255
     41a:	3f 4f       	sbci	r19, 0xFF	; 255
     41c:	db 01       	movw	r26, r22
     41e:	51 96       	adiw	r26, 0x11	; 17
     420:	95 ee       	ldi	r25, 0xE5	; 229
     422:	05 c0       	rjmp	.+10     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     424:	e9 01       	movw	r28, r18
     426:	89 91       	ld	r24, Y+
     428:	9e 01       	movw	r18, r28
     42a:	80 32       	cpi	r24, 0x20	; 32
     42c:	69 f0       	breq	.+26     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     42e:	85 30       	cpi	r24, 0x05	; 5
     430:	09 f4       	brne	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     432:	89 2f       	mov	r24, r25
     434:	31 96       	adiw	r30, 0x01	; 1
     436:	ef 01       	movw	r28, r30
     438:	21 97       	sbiw	r28, 0x01	; 1
     43a:	88 83       	st	Y, r24
     43c:	ea 17       	cp	r30, r26
     43e:	fb 07       	cpc	r31, r27
     440:	89 f7       	brne	.-30     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     442:	03 c0       	rjmp	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     444:	df 01       	movw	r26, r30
     446:	01 c0       	rjmp	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	df 01       	movw	r26, r30
     44a:	fa 01       	movw	r30, r20
     44c:	80 85       	ldd	r24, Z+8	; 0x08
     44e:	80 32       	cpi	r24, 0x20	; 32
     450:	69 f0       	breq	.+26     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     452:	8e e2       	ldi	r24, 0x2E	; 46
     454:	8c 93       	st	X, r24
     456:	80 85       	ldd	r24, Z+8	; 0x08
     458:	80 32       	cpi	r24, 0x20	; 32
     45a:	41 f5       	brne	.+80     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     45c:	fd 01       	movw	r30, r26
     45e:	31 96       	adiw	r30, 0x01	; 1
     460:	06 c0       	rjmp	.+12     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     462:	fd 01       	movw	r30, r26
     464:	34 96       	adiw	r30, 0x04	; 4
     466:	13 96       	adiw	r26, 0x03	; 3
     468:	8c 93       	st	X, r24
     46a:	01 c0       	rjmp	.+2      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     46c:	fd 01       	movw	r30, r26
     46e:	da 01       	movw	r26, r20
     470:	1b 96       	adiw	r26, 0x0b	; 11
     472:	8c 91       	ld	r24, X
     474:	1b 97       	sbiw	r26, 0x0b	; 11
     476:	eb 01       	movw	r28, r22
     478:	88 87       	std	Y+8, r24	; 0x08
     47a:	5c 96       	adiw	r26, 0x1c	; 28
     47c:	8d 91       	ld	r24, X+
     47e:	9d 91       	ld	r25, X+
     480:	0d 90       	ld	r0, X+
     482:	bc 91       	ld	r27, X
     484:	a0 2d       	mov	r26, r0
     486:	88 83       	st	Y, r24
     488:	99 83       	std	Y+1, r25	; 0x01
     48a:	aa 83       	std	Y+2, r26	; 0x02
     48c:	bb 83       	std	Y+3, r27	; 0x03
     48e:	da 01       	movw	r26, r20
     490:	58 96       	adiw	r26, 0x18	; 24
     492:	8d 91       	ld	r24, X+
     494:	9c 91       	ld	r25, X
     496:	59 97       	sbiw	r26, 0x19	; 25
     498:	9d 83       	std	Y+5, r25	; 0x05
     49a:	8c 83       	std	Y+4, r24	; 0x04
     49c:	56 96       	adiw	r26, 0x16	; 22
     49e:	8d 91       	ld	r24, X+
     4a0:	9c 91       	ld	r25, X
     4a2:	57 97       	sbiw	r26, 0x17	; 23
     4a4:	9f 83       	std	Y+7, r25	; 0x07
     4a6:	8e 83       	std	Y+6, r24	; 0x06
     4a8:	10 82       	st	Z, r1
     4aa:	11 c0       	rjmp	.+34     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4ac:	fd 01       	movw	r30, r26
     4ae:	32 96       	adiw	r30, 0x02	; 2
     4b0:	11 96       	adiw	r26, 0x01	; 1
     4b2:	8c 93       	st	X, r24
     4b4:	11 97       	sbiw	r26, 0x01	; 1
     4b6:	ea 01       	movw	r28, r20
     4b8:	89 85       	ldd	r24, Y+9	; 0x09
     4ba:	80 32       	cpi	r24, 0x20	; 32
     4bc:	c1 f2       	breq	.-80     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     4be:	31 96       	adiw	r30, 0x01	; 1
     4c0:	12 96       	adiw	r26, 0x02	; 2
     4c2:	8c 93       	st	X, r24
     4c4:	12 97       	sbiw	r26, 0x02	; 2
     4c6:	8a 85       	ldd	r24, Y+10	; 0x0a
     4c8:	80 32       	cpi	r24, 0x20	; 32
     4ca:	59 f6       	brne	.-106    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     4cc:	d0 cf       	rjmp	.-96     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	1f 91       	pop	r17
     4d4:	0f 91       	pop	r16
     4d6:	08 95       	ret

000004d8 <move_window>:
     4d8:	4f 92       	push	r4
     4da:	5f 92       	push	r5
     4dc:	6f 92       	push	r6
     4de:	7f 92       	push	r7
     4e0:	af 92       	push	r10
     4e2:	bf 92       	push	r11
     4e4:	cf 92       	push	r12
     4e6:	df 92       	push	r13
     4e8:	ef 92       	push	r14
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	fc 01       	movw	r30, r24
     4f6:	c6 a4       	ldd	r12, Z+46	; 0x2e
     4f8:	d7 a4       	ldd	r13, Z+47	; 0x2f
     4fa:	e0 a8       	ldd	r14, Z+48	; 0x30
     4fc:	f1 a8       	ldd	r15, Z+49	; 0x31
     4fe:	c4 16       	cp	r12, r20
     500:	d5 06       	cpc	r13, r21
     502:	e6 06       	cpc	r14, r22
     504:	f7 06       	cpc	r15, r23
     506:	09 f4       	brne	.+2      	; 0x50a <move_window+0x32>
     508:	4f c0       	rjmp	.+158    	; 0x5a8 <move_window+0xd0>
     50a:	2a 01       	movw	r4, r20
     50c:	3b 01       	movw	r6, r22
     50e:	ec 01       	movw	r28, r24
     510:	84 81       	ldd	r24, Z+4	; 0x04
     512:	88 23       	and	r24, r24
     514:	a1 f1       	breq	.+104    	; 0x57e <move_window+0xa6>
     516:	5f 01       	movw	r10, r30
     518:	f2 e3       	ldi	r31, 0x32	; 50
     51a:	af 0e       	add	r10, r31
     51c:	b1 1c       	adc	r11, r1
     51e:	01 e0       	ldi	r16, 0x01	; 1
     520:	a7 01       	movw	r20, r14
     522:	96 01       	movw	r18, r12
     524:	b5 01       	movw	r22, r10
     526:	89 81       	ldd	r24, Y+1	; 0x01
     528:	0e 94 3a 2a 	call	0x5474	; 0x5474 <disk_write>
     52c:	81 11       	cpse	r24, r1
     52e:	3e c0       	rjmp	.+124    	; 0x5ac <move_window+0xd4>
     530:	1c 82       	std	Y+4, r1	; 0x04
     532:	4a a1       	ldd	r20, Y+34	; 0x22
     534:	5b a1       	ldd	r21, Y+35	; 0x23
     536:	6c a1       	ldd	r22, Y+36	; 0x24
     538:	7d a1       	ldd	r23, Y+37	; 0x25
     53a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     53c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     53e:	a8 a1       	ldd	r26, Y+32	; 0x20
     540:	b9 a1       	ldd	r27, Y+33	; 0x21
     542:	84 0f       	add	r24, r20
     544:	95 1f       	adc	r25, r21
     546:	a6 1f       	adc	r26, r22
     548:	b7 1f       	adc	r27, r23
     54a:	c8 16       	cp	r12, r24
     54c:	d9 06       	cpc	r13, r25
     54e:	ea 06       	cpc	r14, r26
     550:	fb 06       	cpc	r15, r27
     552:	a8 f4       	brcc	.+42     	; 0x57e <move_window+0xa6>
     554:	1b 81       	ldd	r17, Y+3	; 0x03
     556:	12 30       	cpi	r17, 0x02	; 2
     558:	90 f0       	brcs	.+36     	; 0x57e <move_window+0xa6>
     55a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     55c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     55e:	a8 a1       	ldd	r26, Y+32	; 0x20
     560:	b9 a1       	ldd	r27, Y+33	; 0x21
     562:	c8 0e       	add	r12, r24
     564:	d9 1e       	adc	r13, r25
     566:	ea 1e       	adc	r14, r26
     568:	fb 1e       	adc	r15, r27
     56a:	01 e0       	ldi	r16, 0x01	; 1
     56c:	a7 01       	movw	r20, r14
     56e:	96 01       	movw	r18, r12
     570:	b5 01       	movw	r22, r10
     572:	89 81       	ldd	r24, Y+1	; 0x01
     574:	0e 94 3a 2a 	call	0x5474	; 0x5474 <disk_write>
     578:	11 50       	subi	r17, 0x01	; 1
     57a:	11 30       	cpi	r17, 0x01	; 1
     57c:	71 f7       	brne	.-36     	; 0x55a <move_window+0x82>
     57e:	41 14       	cp	r4, r1
     580:	51 04       	cpc	r5, r1
     582:	61 04       	cpc	r6, r1
     584:	71 04       	cpc	r7, r1
     586:	a1 f0       	breq	.+40     	; 0x5b0 <move_window+0xd8>
     588:	01 e0       	ldi	r16, 0x01	; 1
     58a:	a3 01       	movw	r20, r6
     58c:	92 01       	movw	r18, r4
     58e:	be 01       	movw	r22, r28
     590:	6e 5c       	subi	r22, 0xCE	; 206
     592:	7f 4f       	sbci	r23, 0xFF	; 255
     594:	89 81       	ldd	r24, Y+1	; 0x01
     596:	0e 94 e7 29 	call	0x53ce	; 0x53ce <disk_read>
     59a:	81 11       	cpse	r24, r1
     59c:	0b c0       	rjmp	.+22     	; 0x5b4 <move_window+0xdc>
     59e:	4e a6       	std	Y+46, r4	; 0x2e
     5a0:	5f a6       	std	Y+47, r5	; 0x2f
     5a2:	68 aa       	std	Y+48, r6	; 0x30
     5a4:	79 aa       	std	Y+49, r7	; 0x31
     5a6:	07 c0       	rjmp	.+14     	; 0x5b6 <move_window+0xde>
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	05 c0       	rjmp	.+10     	; 0x5b6 <move_window+0xde>
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	03 c0       	rjmp	.+6      	; 0x5b6 <move_window+0xde>
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	01 c0       	rjmp	.+2      	; 0x5b6 <move_window+0xde>
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	ff 90       	pop	r15
     5c0:	ef 90       	pop	r14
     5c2:	df 90       	pop	r13
     5c4:	cf 90       	pop	r12
     5c6:	bf 90       	pop	r11
     5c8:	af 90       	pop	r10
     5ca:	7f 90       	pop	r7
     5cc:	6f 90       	pop	r6
     5ce:	5f 90       	pop	r5
     5d0:	4f 90       	pop	r4
     5d2:	08 95       	ret

000005d4 <check_fs>:
     5d4:	0f 93       	push	r16
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	ec 01       	movw	r28, r24
     5dc:	9a 01       	movw	r18, r20
     5de:	ab 01       	movw	r20, r22
     5e0:	bc 01       	movw	r22, r24
     5e2:	6e 5c       	subi	r22, 0xCE	; 206
     5e4:	7f 4f       	sbci	r23, 0xFF	; 255
     5e6:	01 e0       	ldi	r16, 0x01	; 1
     5e8:	89 81       	ldd	r24, Y+1	; 0x01
     5ea:	0e 94 e7 29 	call	0x53ce	; 0x53ce <disk_read>
     5ee:	81 11       	cpse	r24, r1
     5f0:	23 c0       	rjmp	.+70     	; 0x638 <check_fs+0x64>
     5f2:	fe 01       	movw	r30, r28
     5f4:	e0 5d       	subi	r30, 0xD0	; 208
     5f6:	fd 4f       	sbci	r31, 0xFD	; 253
     5f8:	80 81       	ld	r24, Z
     5fa:	91 81       	ldd	r25, Z+1	; 0x01
     5fc:	85 35       	cpi	r24, 0x55	; 85
     5fe:	9a 4a       	sbci	r25, 0xAA	; 170
     600:	e9 f4       	brne	.+58     	; 0x63c <check_fs+0x68>
     602:	e8 5c       	subi	r30, 0xC8	; 200
     604:	f1 40       	sbci	r31, 0x01	; 1
     606:	80 81       	ld	r24, Z
     608:	91 81       	ldd	r25, Z+1	; 0x01
     60a:	a2 81       	ldd	r26, Z+2	; 0x02
     60c:	b3 81       	ldd	r27, Z+3	; 0x03
     60e:	bb 27       	eor	r27, r27
     610:	86 34       	cpi	r24, 0x46	; 70
     612:	91 44       	sbci	r25, 0x41	; 65
     614:	a4 45       	sbci	r26, 0x54	; 84
     616:	b1 05       	cpc	r27, r1
     618:	99 f0       	breq	.+38     	; 0x640 <check_fs+0x6c>
     61a:	cc 57       	subi	r28, 0x7C	; 124
     61c:	df 4f       	sbci	r29, 0xFF	; 255
     61e:	48 81       	ld	r20, Y
     620:	59 81       	ldd	r21, Y+1	; 0x01
     622:	6a 81       	ldd	r22, Y+2	; 0x02
     624:	7b 81       	ldd	r23, Y+3	; 0x03
     626:	77 27       	eor	r23, r23
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	46 34       	cpi	r20, 0x46	; 70
     62c:	51 44       	sbci	r21, 0x41	; 65
     62e:	64 45       	sbci	r22, 0x54	; 84
     630:	71 05       	cpc	r23, r1
     632:	39 f4       	brne	.+14     	; 0x642 <check_fs+0x6e>
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	05 c0       	rjmp	.+10     	; 0x642 <check_fs+0x6e>
     638:	83 e0       	ldi	r24, 0x03	; 3
     63a:	03 c0       	rjmp	.+6      	; 0x642 <check_fs+0x6e>
     63c:	82 e0       	ldi	r24, 0x02	; 2
     63e:	01 c0       	rjmp	.+2      	; 0x642 <check_fs+0x6e>
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	0f 91       	pop	r16
     648:	08 95       	ret

0000064a <validate>:
     64a:	00 97       	sbiw	r24, 0x00	; 0
     64c:	81 f0       	breq	.+32     	; 0x66e <validate+0x24>
     64e:	fc 01       	movw	r30, r24
     650:	20 81       	ld	r18, Z
     652:	22 23       	and	r18, r18
     654:	71 f0       	breq	.+28     	; 0x672 <validate+0x28>
     656:	26 81       	ldd	r18, Z+6	; 0x06
     658:	37 81       	ldd	r19, Z+7	; 0x07
     65a:	26 17       	cp	r18, r22
     65c:	37 07       	cpc	r19, r23
     65e:	59 f4       	brne	.+22     	; 0x676 <validate+0x2c>
     660:	81 81       	ldd	r24, Z+1	; 0x01
     662:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <disk_status>
     666:	80 fd       	sbrc	r24, 0
     668:	08 c0       	rjmp	.+16     	; 0x67a <validate+0x30>
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	08 95       	ret
     66e:	89 e0       	ldi	r24, 0x09	; 9
     670:	08 95       	ret
     672:	89 e0       	ldi	r24, 0x09	; 9
     674:	08 95       	ret
     676:	89 e0       	ldi	r24, 0x09	; 9
     678:	08 95       	ret
     67a:	83 e0       	ldi	r24, 0x03	; 3
     67c:	08 95       	ret

0000067e <chk_mounted>:
     67e:	2f 92       	push	r2
     680:	3f 92       	push	r3
     682:	4f 92       	push	r4
     684:	5f 92       	push	r5
     686:	6f 92       	push	r6
     688:	7f 92       	push	r7
     68a:	8f 92       	push	r8
     68c:	9f 92       	push	r9
     68e:	af 92       	push	r10
     690:	bf 92       	push	r11
     692:	cf 92       	push	r12
     694:	df 92       	push	r13
     696:	ef 92       	push	r14
     698:	ff 92       	push	r15
     69a:	0f 93       	push	r16
     69c:	1f 93       	push	r17
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	cd b7       	in	r28, 0x3d	; 61
     6a4:	de b7       	in	r29, 0x3e	; 62
     6a6:	2e 97       	sbiw	r28, 0x0e	; 14
     6a8:	0f b6       	in	r0, 0x3f	; 63
     6aa:	f8 94       	cli
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	cd bf       	out	0x3d, r28	; 61
     6b2:	dc 01       	movw	r26, r24
     6b4:	ed 91       	ld	r30, X+
     6b6:	fc 91       	ld	r31, X
     6b8:	11 97       	sbiw	r26, 0x01	; 1
     6ba:	20 81       	ld	r18, Z
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	20 53       	subi	r18, 0x30	; 48
     6c0:	31 09       	sbc	r19, r1
     6c2:	2a 30       	cpi	r18, 0x0A	; 10
     6c4:	31 05       	cpc	r19, r1
     6c6:	38 f4       	brcc	.+14     	; 0x6d6 <chk_mounted+0x58>
     6c8:	51 81       	ldd	r21, Z+1	; 0x01
     6ca:	5a 33       	cpi	r21, 0x3A	; 58
     6cc:	21 f4       	brne	.+8      	; 0x6d6 <chk_mounted+0x58>
     6ce:	32 96       	adiw	r30, 0x02	; 2
     6d0:	ed 93       	st	X+, r30
     6d2:	fc 93       	st	X, r31
     6d4:	03 c0       	rjmp	.+6      	; 0x6dc <chk_mounted+0x5e>
     6d6:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <__data_end>
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	23 2b       	or	r18, r19
     6de:	09 f0       	breq	.+2      	; 0x6e2 <chk_mounted+0x64>
     6e0:	c0 c1       	rjmp	.+896    	; 0xa62 <__stack+0x203>
     6e2:	e0 91 7f 01 	lds	r30, 0x017F	; 0x80017f <FatFs>
     6e6:	f0 91 80 01 	lds	r31, 0x0180	; 0x800180 <FatFs+0x1>
     6ea:	fe 87       	std	Y+14, r31	; 0x0e
     6ec:	ed 87       	std	Y+13, r30	; 0x0d
     6ee:	db 01       	movw	r26, r22
     6f0:	ed 93       	st	X+, r30
     6f2:	fc 93       	st	X, r31
     6f4:	30 97       	sbiw	r30, 0x00	; 0
     6f6:	09 f4       	brne	.+2      	; 0x6fa <chk_mounted+0x7c>
     6f8:	b6 c1       	rjmp	.+876    	; 0xa66 <__stack+0x207>
     6fa:	14 2f       	mov	r17, r20
     6fc:	80 81       	ld	r24, Z
     6fe:	88 23       	and	r24, r24
     700:	61 f0       	breq	.+24     	; 0x71a <chk_mounted+0x9c>
     702:	81 81       	ldd	r24, Z+1	; 0x01
     704:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <disk_status>
     708:	80 fd       	sbrc	r24, 0
     70a:	07 c0       	rjmp	.+14     	; 0x71a <chk_mounted+0x9c>
     70c:	11 23       	and	r17, r17
     70e:	09 f4       	brne	.+2      	; 0x712 <chk_mounted+0x94>
     710:	ac c1       	rjmp	.+856    	; 0xa6a <__stack+0x20b>
     712:	82 ff       	sbrs	r24, 2
     714:	ac c1       	rjmp	.+856    	; 0xa6e <__stack+0x20f>
     716:	8a e0       	ldi	r24, 0x0A	; 10
     718:	7f c2       	rjmp	.+1278   	; 0xc18 <__stack+0x3b9>
     71a:	ed 85       	ldd	r30, Y+13	; 0x0d
     71c:	fe 85       	ldd	r31, Y+14	; 0x0e
     71e:	10 82       	st	Z, r1
     720:	11 82       	std	Z+1, r1	; 0x01
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	0e 94 1f 29 	call	0x523e	; 0x523e <disk_initialize>
     728:	80 fd       	sbrc	r24, 0
     72a:	a3 c1       	rjmp	.+838    	; 0xa72 <__stack+0x213>
     72c:	11 23       	and	r17, r17
     72e:	11 f0       	breq	.+4      	; 0x734 <chk_mounted+0xb6>
     730:	82 fd       	sbrc	r24, 2
     732:	a1 c1       	rjmp	.+834    	; 0xa76 <__stack+0x217>
     734:	40 e0       	ldi	r20, 0x00	; 0
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	ba 01       	movw	r22, r20
     73a:	8d 85       	ldd	r24, Y+13	; 0x0d
     73c:	9e 85       	ldd	r25, Y+14	; 0x0e
     73e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <check_fs>
     742:	81 30       	cpi	r24, 0x01	; 1
     744:	b9 f4       	brne	.+46     	; 0x774 <chk_mounted+0xf6>
     746:	ed 85       	ldd	r30, Y+13	; 0x0d
     748:	fe 85       	ldd	r31, Y+14	; 0x0e
     74a:	ec 50       	subi	r30, 0x0C	; 12
     74c:	fe 4f       	sbci	r31, 0xFE	; 254
     74e:	80 81       	ld	r24, Z
     750:	88 23       	and	r24, r24
     752:	09 f4       	brne	.+2      	; 0x756 <chk_mounted+0xd8>
     754:	92 c1       	rjmp	.+804    	; 0xa7a <__stack+0x21b>
     756:	ed 85       	ldd	r30, Y+13	; 0x0d
     758:	fe 85       	ldd	r31, Y+14	; 0x0e
     75a:	e8 50       	subi	r30, 0x08	; 8
     75c:	fe 4f       	sbci	r31, 0xFE	; 254
     75e:	c0 80       	ld	r12, Z
     760:	d1 80       	ldd	r13, Z+1	; 0x01
     762:	e2 80       	ldd	r14, Z+2	; 0x02
     764:	f3 80       	ldd	r15, Z+3	; 0x03
     766:	b7 01       	movw	r22, r14
     768:	a6 01       	movw	r20, r12
     76a:	8d 85       	ldd	r24, Y+13	; 0x0d
     76c:	9e 85       	ldd	r25, Y+14	; 0x0e
     76e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <check_fs>
     772:	03 c0       	rjmp	.+6      	; 0x77a <chk_mounted+0xfc>
     774:	c1 2c       	mov	r12, r1
     776:	d1 2c       	mov	r13, r1
     778:	76 01       	movw	r14, r12
     77a:	83 30       	cpi	r24, 0x03	; 3
     77c:	09 f4       	brne	.+2      	; 0x780 <chk_mounted+0x102>
     77e:	7f c1       	rjmp	.+766    	; 0xa7e <__stack+0x21f>
     780:	81 11       	cpse	r24, r1
     782:	7f c1       	rjmp	.+766    	; 0xa82 <__stack+0x223>
     784:	ad 85       	ldd	r26, Y+13	; 0x0d
     786:	be 85       	ldd	r27, Y+14	; 0x0e
     788:	dd 96       	adiw	r26, 0x3d	; 61
     78a:	8d 91       	ld	r24, X+
     78c:	9c 91       	ld	r25, X
     78e:	de 97       	sbiw	r26, 0x3e	; 62
     790:	81 15       	cp	r24, r1
     792:	92 40       	sbci	r25, 0x02	; 2
     794:	09 f0       	breq	.+2      	; 0x798 <chk_mounted+0x11a>
     796:	77 c1       	rjmp	.+750    	; 0xa86 <__stack+0x227>
     798:	ed 85       	ldd	r30, Y+13	; 0x0d
     79a:	fe 85       	ldd	r31, Y+14	; 0x0e
     79c:	e8 5b       	subi	r30, 0xB8	; 184
     79e:	ff 4f       	sbci	r31, 0xFF	; 255
     7a0:	40 80       	ld	r4, Z
     7a2:	51 80       	ldd	r5, Z+1	; 0x01
     7a4:	61 2c       	mov	r6, r1
     7a6:	71 2c       	mov	r7, r1
     7a8:	41 14       	cp	r4, r1
     7aa:	51 04       	cpc	r5, r1
     7ac:	61 04       	cpc	r6, r1
     7ae:	71 04       	cpc	r7, r1
     7b0:	41 f4       	brne	.+16     	; 0x7c2 <chk_mounted+0x144>
     7b2:	ed 85       	ldd	r30, Y+13	; 0x0d
     7b4:	fe 85       	ldd	r31, Y+14	; 0x0e
     7b6:	ea 5a       	subi	r30, 0xAA	; 170
     7b8:	ff 4f       	sbci	r31, 0xFF	; 255
     7ba:	40 80       	ld	r4, Z
     7bc:	51 80       	ldd	r5, Z+1	; 0x01
     7be:	62 80       	ldd	r6, Z+2	; 0x02
     7c0:	73 80       	ldd	r7, Z+3	; 0x03
     7c2:	ed 85       	ldd	r30, Y+13	; 0x0d
     7c4:	fe 85       	ldd	r31, Y+14	; 0x0e
     7c6:	46 8e       	std	Z+30, r4	; 0x1e
     7c8:	57 8e       	std	Z+31, r5	; 0x1f
     7ca:	60 a2       	std	Z+32, r6	; 0x20
     7cc:	71 a2       	std	Z+33, r7	; 0x21
     7ce:	ee 5b       	subi	r30, 0xBE	; 190
     7d0:	ff 4f       	sbci	r31, 0xFF	; 255
     7d2:	a0 81       	ld	r26, Z
     7d4:	ed 85       	ldd	r30, Y+13	; 0x0d
     7d6:	fe 85       	ldd	r31, Y+14	; 0x0e
     7d8:	a3 83       	std	Z+3, r26	; 0x03
     7da:	8f ef       	ldi	r24, 0xFF	; 255
     7dc:	8a 0f       	add	r24, r26
     7de:	82 30       	cpi	r24, 0x02	; 2
     7e0:	08 f0       	brcs	.+2      	; 0x7e4 <chk_mounted+0x166>
     7e2:	53 c1       	rjmp	.+678    	; 0xa8a <__stack+0x22b>
     7e4:	17 ad       	ldd	r17, Z+63	; 0x3f
     7e6:	12 83       	std	Z+2, r17	; 0x02
     7e8:	11 23       	and	r17, r17
     7ea:	09 f4       	brne	.+2      	; 0x7ee <chk_mounted+0x170>
     7ec:	50 c1       	rjmp	.+672    	; 0xa8e <__stack+0x22f>
     7ee:	81 2f       	mov	r24, r17
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	9c 01       	movw	r18, r24
     7f4:	21 50       	subi	r18, 0x01	; 1
     7f6:	31 09       	sbc	r19, r1
     7f8:	82 23       	and	r24, r18
     7fa:	93 23       	and	r25, r19
     7fc:	89 2b       	or	r24, r25
     7fe:	09 f0       	breq	.+2      	; 0x802 <chk_mounted+0x184>
     800:	48 c1       	rjmp	.+656    	; 0xa92 <__stack+0x233>
     802:	ed 5b       	subi	r30, 0xBD	; 189
     804:	ff 4f       	sbci	r31, 0xFF	; 255
     806:	20 80       	ld	r2, Z
     808:	31 80       	ldd	r3, Z+1	; 0x01
     80a:	ed 85       	ldd	r30, Y+13	; 0x0d
     80c:	fe 85       	ldd	r31, Y+14	; 0x0e
     80e:	31 86       	std	Z+9, r3	; 0x09
     810:	20 86       	std	Z+8, r2	; 0x08
     812:	c1 01       	movw	r24, r2
     814:	8f 70       	andi	r24, 0x0F	; 15
     816:	99 27       	eor	r25, r25
     818:	89 2b       	or	r24, r25
     81a:	09 f0       	breq	.+2      	; 0x81e <chk_mounted+0x1a0>
     81c:	3c c1       	rjmp	.+632    	; 0xa96 <__stack+0x237>
     81e:	eb 5b       	subi	r30, 0xBB	; 187
     820:	ff 4f       	sbci	r31, 0xFF	; 255
     822:	80 80       	ld	r8, Z
     824:	91 80       	ldd	r9, Z+1	; 0x01
     826:	a1 2c       	mov	r10, r1
     828:	b1 2c       	mov	r11, r1
     82a:	81 14       	cp	r8, r1
     82c:	91 04       	cpc	r9, r1
     82e:	a1 04       	cpc	r10, r1
     830:	b1 04       	cpc	r11, r1
     832:	41 f4       	brne	.+16     	; 0x844 <chk_mounted+0x1c6>
     834:	ed 85       	ldd	r30, Y+13	; 0x0d
     836:	fe 85       	ldd	r31, Y+14	; 0x0e
     838:	ee 5a       	subi	r30, 0xAE	; 174
     83a:	ff 4f       	sbci	r31, 0xFF	; 255
     83c:	80 80       	ld	r8, Z
     83e:	91 80       	ldd	r9, Z+1	; 0x01
     840:	a2 80       	ldd	r10, Z+2	; 0x02
     842:	b3 80       	ldd	r11, Z+3	; 0x03
     844:	ed 85       	ldd	r30, Y+13	; 0x0d
     846:	fe 85       	ldd	r31, Y+14	; 0x0e
     848:	e0 5c       	subi	r30, 0xC0	; 192
     84a:	ff 4f       	sbci	r31, 0xFF	; 255
     84c:	01 90       	ld	r0, Z+
     84e:	f0 81       	ld	r31, Z
     850:	e0 2d       	mov	r30, r0
     852:	30 97       	sbiw	r30, 0x00	; 0
     854:	09 f4       	brne	.+2      	; 0x858 <chk_mounted+0x1da>
     856:	21 c1       	rjmp	.+578    	; 0xa9a <__stack+0x23b>
     858:	b0 e0       	ldi	r27, 0x00	; 0
     85a:	a3 01       	movw	r20, r6
     85c:	92 01       	movw	r18, r4
     85e:	0e 94 76 36 	call	0x6cec	; 0x6cec <__muluhisi3>
     862:	69 87       	std	Y+9, r22	; 0x09
     864:	7a 87       	std	Y+10, r23	; 0x0a
     866:	8b 87       	std	Y+11, r24	; 0x0b
     868:	9c 87       	std	Y+12, r25	; 0x0c
     86a:	9f 01       	movw	r18, r30
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	2d 83       	std	Y+5, r18	; 0x05
     872:	3e 83       	std	Y+6, r19	; 0x06
     874:	4f 83       	std	Y+7, r20	; 0x07
     876:	58 87       	std	Y+8, r21	; 0x08
     878:	c1 01       	movw	r24, r2
     87a:	92 95       	swap	r25
     87c:	82 95       	swap	r24
     87e:	8f 70       	andi	r24, 0x0F	; 15
     880:	89 27       	eor	r24, r25
     882:	9f 70       	andi	r25, 0x0F	; 15
     884:	89 27       	eor	r24, r25
     886:	28 0f       	add	r18, r24
     888:	39 1f       	adc	r19, r25
     88a:	41 1d       	adc	r20, r1
     88c:	51 1d       	adc	r21, r1
     88e:	da 01       	movw	r26, r20
     890:	c9 01       	movw	r24, r18
     892:	29 85       	ldd	r18, Y+9	; 0x09
     894:	3a 85       	ldd	r19, Y+10	; 0x0a
     896:	4b 85       	ldd	r20, Y+11	; 0x0b
     898:	5c 85       	ldd	r21, Y+12	; 0x0c
     89a:	28 0f       	add	r18, r24
     89c:	39 1f       	adc	r19, r25
     89e:	4a 1f       	adc	r20, r26
     8a0:	5b 1f       	adc	r21, r27
     8a2:	29 83       	std	Y+1, r18	; 0x01
     8a4:	3a 83       	std	Y+2, r19	; 0x02
     8a6:	4b 83       	std	Y+3, r20	; 0x03
     8a8:	5c 83       	std	Y+4, r21	; 0x04
     8aa:	82 16       	cp	r8, r18
     8ac:	93 06       	cpc	r9, r19
     8ae:	a4 06       	cpc	r10, r20
     8b0:	b5 06       	cpc	r11, r21
     8b2:	08 f4       	brcc	.+2      	; 0x8b6 <__stack+0x57>
     8b4:	f4 c0       	rjmp	.+488    	; 0xa9e <__stack+0x23f>
     8b6:	c5 01       	movw	r24, r10
     8b8:	b4 01       	movw	r22, r8
     8ba:	62 1b       	sub	r22, r18
     8bc:	73 0b       	sbc	r23, r19
     8be:	84 0b       	sbc	r24, r20
     8c0:	95 0b       	sbc	r25, r21
     8c2:	21 2f       	mov	r18, r17
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	40 e0       	ldi	r20, 0x00	; 0
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	0e 94 20 36 	call	0x6c40	; 0x6c40 <__udivmodsi4>
     8ce:	da 01       	movw	r26, r20
     8d0:	c9 01       	movw	r24, r18
     8d2:	21 15       	cp	r18, r1
     8d4:	31 05       	cpc	r19, r1
     8d6:	41 05       	cpc	r20, r1
     8d8:	51 05       	cpc	r21, r1
     8da:	09 f4       	brne	.+2      	; 0x8de <__stack+0x7f>
     8dc:	e2 c0       	rjmp	.+452    	; 0xaa2 <__stack+0x243>
     8de:	26 3f       	cpi	r18, 0xF6	; 246
     8e0:	6f e0       	ldi	r22, 0x0F	; 15
     8e2:	36 07       	cpc	r19, r22
     8e4:	41 05       	cpc	r20, r1
     8e6:	51 05       	cpc	r21, r1
     8e8:	08 f0       	brcs	.+2      	; 0x8ec <__stack+0x8d>
     8ea:	8e c1       	rjmp	.+796    	; 0xc08 <__stack+0x3a9>
     8ec:	f1 e0       	ldi	r31, 0x01	; 1
     8ee:	8d c1       	rjmp	.+794    	; 0xc0a <__stack+0x3ab>
     8f0:	ed 85       	ldd	r30, Y+13	; 0x0d
     8f2:	fe 85       	ldd	r31, Y+14	; 0x0e
     8f4:	e2 5a       	subi	r30, 0xA2	; 162
     8f6:	ff 4f       	sbci	r31, 0xFF	; 255
     8f8:	80 81       	ld	r24, Z
     8fa:	91 81       	ldd	r25, Z+1	; 0x01
     8fc:	a2 81       	ldd	r26, Z+2	; 0x02
     8fe:	b3 81       	ldd	r27, Z+3	; 0x03
     900:	ed 85       	ldd	r30, Y+13	; 0x0d
     902:	fe 85       	ldd	r31, Y+14	; 0x0e
     904:	86 a3       	std	Z+38, r24	; 0x26
     906:	97 a3       	std	Z+39, r25	; 0x27
     908:	a0 a7       	std	Z+40, r26	; 0x28
     90a:	b1 a7       	std	Z+41, r27	; 0x29
     90c:	88 0c       	add	r8, r8
     90e:	99 1c       	adc	r9, r9
     910:	aa 1c       	adc	r10, r10
     912:	bb 1c       	adc	r11, r11
     914:	88 0c       	add	r8, r8
     916:	99 1c       	adc	r9, r9
     918:	aa 1c       	adc	r10, r10
     91a:	bb 1c       	adc	r11, r11
     91c:	ff ef       	ldi	r31, 0xFF	; 255
     91e:	8f 0e       	add	r8, r31
     920:	f1 e0       	ldi	r31, 0x01	; 1
     922:	9f 1e       	adc	r9, r31
     924:	a1 1c       	adc	r10, r1
     926:	b1 1c       	adc	r11, r1
     928:	07 2e       	mov	r0, r23
     92a:	79 e0       	ldi	r23, 0x09	; 9
     92c:	b6 94       	lsr	r11
     92e:	a7 94       	ror	r10
     930:	97 94       	ror	r9
     932:	87 94       	ror	r8
     934:	7a 95       	dec	r23
     936:	d1 f7       	brne	.-12     	; 0x92c <__stack+0xcd>
     938:	70 2d       	mov	r23, r0
     93a:	48 14       	cp	r4, r8
     93c:	59 04       	cpc	r5, r9
     93e:	6a 04       	cpc	r6, r10
     940:	7b 04       	cpc	r7, r11
     942:	08 f4       	brcc	.+2      	; 0x946 <__stack+0xe7>
     944:	b0 c0       	rjmp	.+352    	; 0xaa6 <__stack+0x247>
     946:	07 c1       	rjmp	.+526    	; 0xb56 <__stack+0x2f7>
     948:	29 85       	ldd	r18, Y+9	; 0x09
     94a:	3a 85       	ldd	r19, Y+10	; 0x0a
     94c:	4b 85       	ldd	r20, Y+11	; 0x0b
     94e:	5c 85       	ldd	r21, Y+12	; 0x0c
     950:	c2 0e       	add	r12, r18
     952:	d3 1e       	adc	r13, r19
     954:	e4 1e       	adc	r14, r20
     956:	f5 1e       	adc	r15, r21
     958:	ad 85       	ldd	r26, Y+13	; 0x0d
     95a:	be 85       	ldd	r27, Y+14	; 0x0e
     95c:	96 96       	adiw	r26, 0x26	; 38
     95e:	cd 92       	st	X+, r12
     960:	dd 92       	st	X+, r13
     962:	ed 92       	st	X+, r14
     964:	fc 92       	st	X, r15
     966:	99 97       	sbiw	r26, 0x29	; 41
     968:	f2 30       	cpi	r31, 0x02	; 2
     96a:	29 f4       	brne	.+10     	; 0x976 <__stack+0x117>
     96c:	88 0c       	add	r8, r8
     96e:	99 1c       	adc	r9, r9
     970:	aa 1c       	adc	r10, r10
     972:	bb 1c       	adc	r11, r11
     974:	da c0       	rjmp	.+436    	; 0xb2a <__stack+0x2cb>
     976:	a3 e0       	ldi	r26, 0x03	; 3
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	a5 01       	movw	r20, r10
     97c:	94 01       	movw	r18, r8
     97e:	0e 94 76 36 	call	0x6cec	; 0x6cec <__muluhisi3>
     982:	dc 01       	movw	r26, r24
     984:	cb 01       	movw	r24, r22
     986:	b6 95       	lsr	r27
     988:	a7 95       	ror	r26
     98a:	97 95       	ror	r25
     98c:	87 95       	ror	r24
     98e:	e1 e0       	ldi	r30, 0x01	; 1
     990:	8e 22       	and	r8, r30
     992:	99 24       	eor	r9, r9
     994:	aa 24       	eor	r10, r10
     996:	bb 24       	eor	r11, r11
     998:	88 0e       	add	r8, r24
     99a:	99 1e       	adc	r9, r25
     99c:	aa 1e       	adc	r10, r26
     99e:	bb 1e       	adc	r11, r27
     9a0:	c4 c0       	rjmp	.+392    	; 0xb2a <__stack+0x2cb>
     9a2:	ed 85       	ldd	r30, Y+13	; 0x0d
     9a4:	fe 85       	ldd	r31, Y+14	; 0x0e
     9a6:	e0 5d       	subi	r30, 0xD0	; 208
     9a8:	fd 4f       	sbci	r31, 0xFD	; 253
     9aa:	80 81       	ld	r24, Z
     9ac:	91 81       	ldd	r25, Z+1	; 0x01
     9ae:	85 35       	cpi	r24, 0x55	; 85
     9b0:	9a 4a       	sbci	r25, 0xAA	; 170
     9b2:	a1 f5       	brne	.+104    	; 0xa1c <__stack+0x1bd>
     9b4:	ed 85       	ldd	r30, Y+13	; 0x0d
     9b6:	fe 85       	ldd	r31, Y+14	; 0x0e
     9b8:	82 a9       	ldd	r24, Z+50	; 0x32
     9ba:	93 a9       	ldd	r25, Z+51	; 0x33
     9bc:	a4 a9       	ldd	r26, Z+52	; 0x34
     9be:	b5 a9       	ldd	r27, Z+53	; 0x35
     9c0:	82 35       	cpi	r24, 0x52	; 82
     9c2:	92 45       	sbci	r25, 0x52	; 82
     9c4:	a1 46       	sbci	r26, 0x61	; 97
     9c6:	b1 44       	sbci	r27, 0x41	; 65
     9c8:	59 f5       	brne	.+86     	; 0xa20 <__stack+0x1c1>
     9ca:	ed 85       	ldd	r30, Y+13	; 0x0d
     9cc:	fe 85       	ldd	r31, Y+14	; 0x0e
     9ce:	ea 5e       	subi	r30, 0xEA	; 234
     9d0:	fd 4f       	sbci	r31, 0xFD	; 253
     9d2:	80 81       	ld	r24, Z
     9d4:	91 81       	ldd	r25, Z+1	; 0x01
     9d6:	a2 81       	ldd	r26, Z+2	; 0x02
     9d8:	b3 81       	ldd	r27, Z+3	; 0x03
     9da:	82 37       	cpi	r24, 0x72	; 114
     9dc:	92 47       	sbci	r25, 0x72	; 114
     9de:	a1 44       	sbci	r26, 0x41	; 65
     9e0:	b1 46       	sbci	r27, 0x61	; 97
     9e2:	01 f5       	brne	.+64     	; 0xa24 <__stack+0x1c5>
     9e4:	ed 85       	ldd	r30, Y+13	; 0x0d
     9e6:	fe 85       	ldd	r31, Y+14	; 0x0e
     9e8:	e2 5e       	subi	r30, 0xE2	; 226
     9ea:	fd 4f       	sbci	r31, 0xFD	; 253
     9ec:	80 81       	ld	r24, Z
     9ee:	91 81       	ldd	r25, Z+1	; 0x01
     9f0:	a2 81       	ldd	r26, Z+2	; 0x02
     9f2:	b3 81       	ldd	r27, Z+3	; 0x03
     9f4:	ed 85       	ldd	r30, Y+13	; 0x0d
     9f6:	fe 85       	ldd	r31, Y+14	; 0x0e
     9f8:	82 87       	std	Z+10, r24	; 0x0a
     9fa:	93 87       	std	Z+11, r25	; 0x0b
     9fc:	a4 87       	std	Z+12, r26	; 0x0c
     9fe:	b5 87       	std	Z+13, r27	; 0x0d
     a00:	e6 5e       	subi	r30, 0xE6	; 230
     a02:	fd 4f       	sbci	r31, 0xFD	; 253
     a04:	80 81       	ld	r24, Z
     a06:	91 81       	ldd	r25, Z+1	; 0x01
     a08:	a2 81       	ldd	r26, Z+2	; 0x02
     a0a:	b3 81       	ldd	r27, Z+3	; 0x03
     a0c:	ed 85       	ldd	r30, Y+13	; 0x0d
     a0e:	fe 85       	ldd	r31, Y+14	; 0x0e
     a10:	86 87       	std	Z+14, r24	; 0x0e
     a12:	97 87       	std	Z+15, r25	; 0x0f
     a14:	a0 8b       	std	Z+16, r26	; 0x10
     a16:	b1 8b       	std	Z+17, r27	; 0x11
     a18:	f3 e0       	ldi	r31, 0x03	; 3
     a1a:	05 c0       	rjmp	.+10     	; 0xa26 <__stack+0x1c7>
     a1c:	f3 e0       	ldi	r31, 0x03	; 3
     a1e:	03 c0       	rjmp	.+6      	; 0xa26 <__stack+0x1c7>
     a20:	f3 e0       	ldi	r31, 0x03	; 3
     a22:	01 c0       	rjmp	.+2      	; 0xa26 <__stack+0x1c7>
     a24:	f3 e0       	ldi	r31, 0x03	; 3
     a26:	ad 85       	ldd	r26, Y+13	; 0x0d
     a28:	be 85       	ldd	r27, Y+14	; 0x0e
     a2a:	fc 93       	st	X, r31
     a2c:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <Fsid>
     a30:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <Fsid+0x1>
     a34:	01 96       	adiw	r24, 0x01	; 1
     a36:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <Fsid+0x1>
     a3a:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <Fsid>
     a3e:	17 96       	adiw	r26, 0x07	; 7
     a40:	9c 93       	st	X, r25
     a42:	8e 93       	st	-X, r24
     a44:	16 97       	sbiw	r26, 0x06	; 6
     a46:	fd 01       	movw	r30, r26
     a48:	16 a6       	std	Z+46, r1	; 0x2e
     a4a:	17 a6       	std	Z+47, r1	; 0x2f
     a4c:	10 aa       	std	Z+48, r1	; 0x30
     a4e:	11 aa       	std	Z+49, r1	; 0x31
     a50:	14 82       	std	Z+4, r1	; 0x04
     a52:	56 96       	adiw	r26, 0x16	; 22
     a54:	1d 92       	st	X+, r1
     a56:	1d 92       	st	X+, r1
     a58:	1d 92       	st	X+, r1
     a5a:	1c 92       	st	X, r1
     a5c:	59 97       	sbiw	r26, 0x19	; 25
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	db c0       	rjmp	.+438    	; 0xc18 <__stack+0x3b9>
     a62:	8b e0       	ldi	r24, 0x0B	; 11
     a64:	d9 c0       	rjmp	.+434    	; 0xc18 <__stack+0x3b9>
     a66:	8c e0       	ldi	r24, 0x0C	; 12
     a68:	d7 c0       	rjmp	.+430    	; 0xc18 <__stack+0x3b9>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	d5 c0       	rjmp	.+426    	; 0xc18 <__stack+0x3b9>
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	d3 c0       	rjmp	.+422    	; 0xc18 <__stack+0x3b9>
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	d1 c0       	rjmp	.+418    	; 0xc18 <__stack+0x3b9>
     a76:	8a e0       	ldi	r24, 0x0A	; 10
     a78:	cf c0       	rjmp	.+414    	; 0xc18 <__stack+0x3b9>
     a7a:	8d e0       	ldi	r24, 0x0D	; 13
     a7c:	cd c0       	rjmp	.+410    	; 0xc18 <__stack+0x3b9>
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	cb c0       	rjmp	.+406    	; 0xc18 <__stack+0x3b9>
     a82:	8d e0       	ldi	r24, 0x0D	; 13
     a84:	c9 c0       	rjmp	.+402    	; 0xc18 <__stack+0x3b9>
     a86:	8d e0       	ldi	r24, 0x0D	; 13
     a88:	c7 c0       	rjmp	.+398    	; 0xc18 <__stack+0x3b9>
     a8a:	8d e0       	ldi	r24, 0x0D	; 13
     a8c:	c5 c0       	rjmp	.+394    	; 0xc18 <__stack+0x3b9>
     a8e:	8d e0       	ldi	r24, 0x0D	; 13
     a90:	c3 c0       	rjmp	.+390    	; 0xc18 <__stack+0x3b9>
     a92:	8d e0       	ldi	r24, 0x0D	; 13
     a94:	c1 c0       	rjmp	.+386    	; 0xc18 <__stack+0x3b9>
     a96:	8d e0       	ldi	r24, 0x0D	; 13
     a98:	bf c0       	rjmp	.+382    	; 0xc18 <__stack+0x3b9>
     a9a:	8d e0       	ldi	r24, 0x0D	; 13
     a9c:	bd c0       	rjmp	.+378    	; 0xc18 <__stack+0x3b9>
     a9e:	8d e0       	ldi	r24, 0x0D	; 13
     aa0:	bb c0       	rjmp	.+374    	; 0xc18 <__stack+0x3b9>
     aa2:	8d e0       	ldi	r24, 0x0D	; 13
     aa4:	b9 c0       	rjmp	.+370    	; 0xc18 <__stack+0x3b9>
     aa6:	8d e0       	ldi	r24, 0x0D	; 13
     aa8:	b7 c0       	rjmp	.+366    	; 0xc18 <__stack+0x3b9>
     aaa:	8d e0       	ldi	r24, 0x0D	; 13
     aac:	b5 c0       	rjmp	.+362    	; 0xc18 <__stack+0x3b9>
     aae:	8d e0       	ldi	r24, 0x0D	; 13
     ab0:	b3 c0       	rjmp	.+358    	; 0xc18 <__stack+0x3b9>
     ab2:	8d e0       	ldi	r24, 0x0D	; 13
     ab4:	b1 c0       	rjmp	.+354    	; 0xc18 <__stack+0x3b9>
     ab6:	49 01       	movw	r8, r18
     ab8:	5a 01       	movw	r10, r20
     aba:	b2 e0       	ldi	r27, 0x02	; 2
     abc:	8b 0e       	add	r8, r27
     abe:	91 1c       	adc	r9, r1
     ac0:	a1 1c       	adc	r10, r1
     ac2:	b1 1c       	adc	r11, r1
     ac4:	ed 85       	ldd	r30, Y+13	; 0x0d
     ac6:	fe 85       	ldd	r31, Y+14	; 0x0e
     ac8:	82 8e       	std	Z+26, r8	; 0x1a
     aca:	93 8e       	std	Z+27, r9	; 0x1b
     acc:	a4 8e       	std	Z+28, r10	; 0x1c
     ace:	b5 8e       	std	Z+29, r11	; 0x1d
     ad0:	89 81       	ldd	r24, Y+1	; 0x01
     ad2:	9a 81       	ldd	r25, Y+2	; 0x02
     ad4:	ab 81       	ldd	r26, Y+3	; 0x03
     ad6:	bc 81       	ldd	r27, Y+4	; 0x04
     ad8:	8c 0d       	add	r24, r12
     ada:	9d 1d       	adc	r25, r13
     adc:	ae 1d       	adc	r26, r14
     ade:	bf 1d       	adc	r27, r15
     ae0:	82 a7       	std	Z+42, r24	; 0x2a
     ae2:	93 a7       	std	Z+43, r25	; 0x2b
     ae4:	a4 a7       	std	Z+44, r26	; 0x2c
     ae6:	b5 a7       	std	Z+45, r27	; 0x2d
     ae8:	8d 81       	ldd	r24, Y+5	; 0x05
     aea:	9e 81       	ldd	r25, Y+6	; 0x06
     aec:	af 81       	ldd	r26, Y+7	; 0x07
     aee:	b8 85       	ldd	r27, Y+8	; 0x08
     af0:	8c 0d       	add	r24, r12
     af2:	9d 1d       	adc	r25, r13
     af4:	ae 1d       	adc	r26, r14
     af6:	bf 1d       	adc	r27, r15
     af8:	82 a3       	std	Z+34, r24	; 0x22
     afa:	93 a3       	std	Z+35, r25	; 0x23
     afc:	a4 a3       	std	Z+36, r26	; 0x24
     afe:	b5 a3       	std	Z+37, r27	; 0x25
     b00:	23 28       	or	r2, r3
     b02:	99 f6       	brne	.-90     	; 0xaaa <__stack+0x24b>
     b04:	f5 ce       	rjmp	.-534    	; 0x8f0 <__stack+0x91>
     b06:	4f ef       	ldi	r20, 0xFF	; 255
     b08:	5f ef       	ldi	r21, 0xFF	; 255
     b0a:	ba 01       	movw	r22, r20
     b0c:	ad 85       	ldd	r26, Y+13	; 0x0d
     b0e:	be 85       	ldd	r27, Y+14	; 0x0e
     b10:	1e 96       	adiw	r26, 0x0e	; 14
     b12:	4d 93       	st	X+, r20
     b14:	5d 93       	st	X+, r21
     b16:	6d 93       	st	X+, r22
     b18:	7c 93       	st	X, r23
     b1a:	51 97       	sbiw	r26, 0x11	; 17
     b1c:	1a 96       	adiw	r26, 0x0a	; 10
     b1e:	1d 92       	st	X+, r1
     b20:	1d 92       	st	X+, r1
     b22:	1d 92       	st	X+, r1
     b24:	1c 92       	st	X, r1
     b26:	1d 97       	sbiw	r26, 0x0d	; 13
     b28:	7e cf       	rjmp	.-260    	; 0xa26 <__stack+0x1c7>
     b2a:	bf ef       	ldi	r27, 0xFF	; 255
     b2c:	8b 0e       	add	r8, r27
     b2e:	b1 e0       	ldi	r27, 0x01	; 1
     b30:	9b 1e       	adc	r9, r27
     b32:	a1 1c       	adc	r10, r1
     b34:	b1 1c       	adc	r11, r1
     b36:	07 2e       	mov	r0, r23
     b38:	79 e0       	ldi	r23, 0x09	; 9
     b3a:	b6 94       	lsr	r11
     b3c:	a7 94       	ror	r10
     b3e:	97 94       	ror	r9
     b40:	87 94       	ror	r8
     b42:	7a 95       	dec	r23
     b44:	d1 f7       	brne	.-12     	; 0xb3a <__stack+0x2db>
     b46:	70 2d       	mov	r23, r0
     b48:	48 14       	cp	r4, r8
     b4a:	59 04       	cpc	r5, r9
     b4c:	6a 04       	cpc	r6, r10
     b4e:	7b 04       	cpc	r7, r11
     b50:	08 f4       	brcc	.+2      	; 0xb54 <__stack+0x2f5>
     b52:	ad cf       	rjmp	.-166    	; 0xaae <__stack+0x24f>
     b54:	d8 cf       	rjmp	.-80     	; 0xb06 <__stack+0x2a7>
     b56:	8f ef       	ldi	r24, 0xFF	; 255
     b58:	9f ef       	ldi	r25, 0xFF	; 255
     b5a:	dc 01       	movw	r26, r24
     b5c:	ed 85       	ldd	r30, Y+13	; 0x0d
     b5e:	fe 85       	ldd	r31, Y+14	; 0x0e
     b60:	86 87       	std	Z+14, r24	; 0x0e
     b62:	97 87       	std	Z+15, r25	; 0x0f
     b64:	a0 8b       	std	Z+16, r26	; 0x10
     b66:	b1 8b       	std	Z+17, r27	; 0x11
     b68:	df 01       	movw	r26, r30
     b6a:	12 86       	std	Z+10, r1	; 0x0a
     b6c:	13 86       	std	Z+11, r1	; 0x0b
     b6e:	14 86       	std	Z+12, r1	; 0x0c
     b70:	15 86       	std	Z+13, r1	; 0x0d
     b72:	15 82       	std	Z+5, r1	; 0x05
     b74:	ee 59       	subi	r30, 0x9E	; 158
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	80 81       	ld	r24, Z
     b7a:	91 81       	ldd	r25, Z+1	; 0x01
     b7c:	a7 01       	movw	r20, r14
     b7e:	96 01       	movw	r18, r12
     b80:	28 0f       	add	r18, r24
     b82:	39 1f       	adc	r19, r25
     b84:	41 1d       	adc	r20, r1
     b86:	51 1d       	adc	r21, r1
     b88:	fd 01       	movw	r30, r26
     b8a:	22 8b       	std	Z+18, r18	; 0x12
     b8c:	33 8b       	std	Z+19, r19	; 0x13
     b8e:	44 8b       	std	Z+20, r20	; 0x14
     b90:	55 8b       	std	Z+21, r21	; 0x15
     b92:	01 e0       	ldi	r16, 0x01	; 1
     b94:	bd 01       	movw	r22, r26
     b96:	6e 5c       	subi	r22, 0xCE	; 206
     b98:	7f 4f       	sbci	r23, 0xFF	; 255
     b9a:	81 81       	ldd	r24, Z+1	; 0x01
     b9c:	0e 94 e7 29 	call	0x53ce	; 0x53ce <disk_read>
     ba0:	88 23       	and	r24, r24
     ba2:	09 f4       	brne	.+2      	; 0xba6 <__stack+0x347>
     ba4:	fe ce       	rjmp	.-516    	; 0x9a2 <__stack+0x143>
     ba6:	f3 e0       	ldi	r31, 0x03	; 3
     ba8:	3e cf       	rjmp	.-388    	; 0xa26 <__stack+0x1c7>
     baa:	49 01       	movw	r8, r18
     bac:	5a 01       	movw	r10, r20
     bae:	62 e0       	ldi	r22, 0x02	; 2
     bb0:	86 0e       	add	r8, r22
     bb2:	91 1c       	adc	r9, r1
     bb4:	a1 1c       	adc	r10, r1
     bb6:	b1 1c       	adc	r11, r1
     bb8:	ad 85       	ldd	r26, Y+13	; 0x0d
     bba:	be 85       	ldd	r27, Y+14	; 0x0e
     bbc:	5a 96       	adiw	r26, 0x1a	; 26
     bbe:	8d 92       	st	X+, r8
     bc0:	9d 92       	st	X+, r9
     bc2:	ad 92       	st	X+, r10
     bc4:	bc 92       	st	X, r11
     bc6:	5d 97       	sbiw	r26, 0x1d	; 29
     bc8:	49 81       	ldd	r20, Y+1	; 0x01
     bca:	5a 81       	ldd	r21, Y+2	; 0x02
     bcc:	6b 81       	ldd	r22, Y+3	; 0x03
     bce:	7c 81       	ldd	r23, Y+4	; 0x04
     bd0:	4c 0d       	add	r20, r12
     bd2:	5d 1d       	adc	r21, r13
     bd4:	6e 1d       	adc	r22, r14
     bd6:	7f 1d       	adc	r23, r15
     bd8:	9a 96       	adiw	r26, 0x2a	; 42
     bda:	4d 93       	st	X+, r20
     bdc:	5d 93       	st	X+, r21
     bde:	6d 93       	st	X+, r22
     be0:	7c 93       	st	X, r23
     be2:	9d 97       	sbiw	r26, 0x2d	; 45
     be4:	2d 81       	ldd	r18, Y+5	; 0x05
     be6:	3e 81       	ldd	r19, Y+6	; 0x06
     be8:	4f 81       	ldd	r20, Y+7	; 0x07
     bea:	58 85       	ldd	r21, Y+8	; 0x08
     bec:	c2 0e       	add	r12, r18
     bee:	d3 1e       	adc	r13, r19
     bf0:	e4 1e       	adc	r14, r20
     bf2:	f5 1e       	adc	r15, r21
     bf4:	92 96       	adiw	r26, 0x22	; 34
     bf6:	cd 92       	st	X+, r12
     bf8:	dd 92       	st	X+, r13
     bfa:	ed 92       	st	X+, r14
     bfc:	fc 92       	st	X, r15
     bfe:	95 97       	sbiw	r26, 0x25	; 37
     c00:	23 28       	or	r2, r3
     c02:	09 f4       	brne	.+2      	; 0xc06 <__stack+0x3a7>
     c04:	56 cf       	rjmp	.-340    	; 0xab2 <__stack+0x253>
     c06:	a0 ce       	rjmp	.-704    	; 0x948 <__stack+0xe9>
     c08:	f2 e0       	ldi	r31, 0x02	; 2
     c0a:	86 3f       	cpi	r24, 0xF6	; 246
     c0c:	9f 4f       	sbci	r25, 0xFF	; 255
     c0e:	a1 05       	cpc	r26, r1
     c10:	b1 05       	cpc	r27, r1
     c12:	08 f0       	brcs	.+2      	; 0xc16 <__stack+0x3b7>
     c14:	50 cf       	rjmp	.-352    	; 0xab6 <__stack+0x257>
     c16:	c9 cf       	rjmp	.-110    	; 0xbaa <__stack+0x34b>
     c18:	2e 96       	adiw	r28, 0x0e	; 14
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	de bf       	out	0x3e, r29	; 62
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	cd bf       	out	0x3d, r28	; 61
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	1f 91       	pop	r17
     c2a:	0f 91       	pop	r16
     c2c:	ff 90       	pop	r15
     c2e:	ef 90       	pop	r14
     c30:	df 90       	pop	r13
     c32:	cf 90       	pop	r12
     c34:	bf 90       	pop	r11
     c36:	af 90       	pop	r10
     c38:	9f 90       	pop	r9
     c3a:	8f 90       	pop	r8
     c3c:	7f 90       	pop	r7
     c3e:	6f 90       	pop	r6
     c40:	5f 90       	pop	r5
     c42:	4f 90       	pop	r4
     c44:	3f 90       	pop	r3
     c46:	2f 90       	pop	r2
     c48:	08 95       	ret

00000c4a <sync>:
     c4a:	0f 93       	push	r16
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	ec 01       	movw	r28, r24
     c52:	40 e0       	ldi	r20, 0x00	; 0
     c54:	50 e0       	ldi	r21, 0x00	; 0
     c56:	ba 01       	movw	r22, r20
     c58:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
     c5c:	98 2f       	mov	r25, r24
     c5e:	81 11       	cpse	r24, r1
     c60:	54 c0       	rjmp	.+168    	; 0xd0a <sync+0xc0>
     c62:	88 81       	ld	r24, Y
     c64:	83 30       	cpi	r24, 0x03	; 3
     c66:	09 f0       	breq	.+2      	; 0xc6a <sync+0x20>
     c68:	46 c0       	rjmp	.+140    	; 0xcf6 <sync+0xac>
     c6a:	8d 81       	ldd	r24, Y+5	; 0x05
     c6c:	88 23       	and	r24, r24
     c6e:	09 f4       	brne	.+2      	; 0xc72 <sync+0x28>
     c70:	42 c0       	rjmp	.+132    	; 0xcf6 <sync+0xac>
     c72:	1e a6       	std	Y+46, r1	; 0x2e
     c74:	1f a6       	std	Y+47, r1	; 0x2f
     c76:	18 aa       	std	Y+48, r1	; 0x30
     c78:	19 aa       	std	Y+49, r1	; 0x31
     c7a:	be 01       	movw	r22, r28
     c7c:	6e 5c       	subi	r22, 0xCE	; 206
     c7e:	7f 4f       	sbci	r23, 0xFF	; 255
     c80:	fb 01       	movw	r30, r22
     c82:	ce 01       	movw	r24, r28
     c84:	8e 5c       	subi	r24, 0xCE	; 206
     c86:	9d 4f       	sbci	r25, 0xFD	; 253
     c88:	11 92       	st	Z+, r1
     c8a:	e8 17       	cp	r30, r24
     c8c:	f9 07       	cpc	r31, r25
     c8e:	e1 f7       	brne	.-8      	; 0xc88 <sync+0x3e>
     c90:	85 e5       	ldi	r24, 0x55	; 85
     c92:	9a ea       	ldi	r25, 0xAA	; 170
     c94:	fe 01       	movw	r30, r28
     c96:	e0 5d       	subi	r30, 0xD0	; 208
     c98:	fd 4f       	sbci	r31, 0xFD	; 253
     c9a:	91 83       	std	Z+1, r25	; 0x01
     c9c:	80 83       	st	Z, r24
     c9e:	82 e5       	ldi	r24, 0x52	; 82
     ca0:	92 e5       	ldi	r25, 0x52	; 82
     ca2:	a1 e6       	ldi	r26, 0x61	; 97
     ca4:	b1 e4       	ldi	r27, 0x41	; 65
     ca6:	8a ab       	std	Y+50, r24	; 0x32
     ca8:	9b ab       	std	Y+51, r25	; 0x33
     caa:	ac ab       	std	Y+52, r26	; 0x34
     cac:	bd ab       	std	Y+53, r27	; 0x35
     cae:	82 e7       	ldi	r24, 0x72	; 114
     cb0:	92 e7       	ldi	r25, 0x72	; 114
     cb2:	a1 e4       	ldi	r26, 0x41	; 65
     cb4:	b1 e6       	ldi	r27, 0x61	; 97
     cb6:	7a 97       	sbiw	r30, 0x1a	; 26
     cb8:	80 83       	st	Z, r24
     cba:	91 83       	std	Z+1, r25	; 0x01
     cbc:	a2 83       	std	Z+2, r26	; 0x02
     cbe:	b3 83       	std	Z+3, r27	; 0x03
     cc0:	8e 85       	ldd	r24, Y+14	; 0x0e
     cc2:	9f 85       	ldd	r25, Y+15	; 0x0f
     cc4:	a8 89       	ldd	r26, Y+16	; 0x10
     cc6:	b9 89       	ldd	r27, Y+17	; 0x11
     cc8:	34 96       	adiw	r30, 0x04	; 4
     cca:	80 83       	st	Z, r24
     ccc:	91 83       	std	Z+1, r25	; 0x01
     cce:	a2 83       	std	Z+2, r26	; 0x02
     cd0:	b3 83       	std	Z+3, r27	; 0x03
     cd2:	8a 85       	ldd	r24, Y+10	; 0x0a
     cd4:	9b 85       	ldd	r25, Y+11	; 0x0b
     cd6:	ac 85       	ldd	r26, Y+12	; 0x0c
     cd8:	bd 85       	ldd	r27, Y+13	; 0x0d
     cda:	34 96       	adiw	r30, 0x04	; 4
     cdc:	80 83       	st	Z, r24
     cde:	91 83       	std	Z+1, r25	; 0x01
     ce0:	a2 83       	std	Z+2, r26	; 0x02
     ce2:	b3 83       	std	Z+3, r27	; 0x03
     ce4:	2a 89       	ldd	r18, Y+18	; 0x12
     ce6:	3b 89       	ldd	r19, Y+19	; 0x13
     ce8:	4c 89       	ldd	r20, Y+20	; 0x14
     cea:	5d 89       	ldd	r21, Y+21	; 0x15
     cec:	01 e0       	ldi	r16, 0x01	; 1
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	0e 94 3a 2a 	call	0x5474	; 0x5474 <disk_write>
     cf4:	1d 82       	std	Y+5, r1	; 0x05
     cf6:	40 e0       	ldi	r20, 0x00	; 0
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	0e 94 a6 2a 	call	0x554c	; 0x554c <disk_ioctl>
     d02:	91 e0       	ldi	r25, 0x01	; 1
     d04:	81 11       	cpse	r24, r1
     d06:	01 c0       	rjmp	.+2      	; 0xd0a <sync+0xc0>
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	89 2f       	mov	r24, r25
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	0f 91       	pop	r16
     d12:	08 95       	ret

00000d14 <clust2sect>:
     d14:	0f 93       	push	r16
     d16:	1f 93       	push	r17
     d18:	fc 01       	movw	r30, r24
     d1a:	9a 01       	movw	r18, r20
     d1c:	ab 01       	movw	r20, r22
     d1e:	22 50       	subi	r18, 0x02	; 2
     d20:	31 09       	sbc	r19, r1
     d22:	41 09       	sbc	r20, r1
     d24:	51 09       	sbc	r21, r1
     d26:	82 8d       	ldd	r24, Z+26	; 0x1a
     d28:	93 8d       	ldd	r25, Z+27	; 0x1b
     d2a:	a4 8d       	ldd	r26, Z+28	; 0x1c
     d2c:	b5 8d       	ldd	r27, Z+29	; 0x1d
     d2e:	02 97       	sbiw	r24, 0x02	; 2
     d30:	a1 09       	sbc	r26, r1
     d32:	b1 09       	sbc	r27, r1
     d34:	28 17       	cp	r18, r24
     d36:	39 07       	cpc	r19, r25
     d38:	4a 07       	cpc	r20, r26
     d3a:	5b 07       	cpc	r21, r27
     d3c:	68 f4       	brcc	.+26     	; 0xd58 <clust2sect+0x44>
     d3e:	a2 81       	ldd	r26, Z+2	; 0x02
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	0e 94 76 36 	call	0x6cec	; 0x6cec <__muluhisi3>
     d46:	02 a5       	ldd	r16, Z+42	; 0x2a
     d48:	13 a5       	ldd	r17, Z+43	; 0x2b
     d4a:	24 a5       	ldd	r18, Z+44	; 0x2c
     d4c:	35 a5       	ldd	r19, Z+45	; 0x2d
     d4e:	60 0f       	add	r22, r16
     d50:	71 1f       	adc	r23, r17
     d52:	82 1f       	adc	r24, r18
     d54:	93 1f       	adc	r25, r19
     d56:	03 c0       	rjmp	.+6      	; 0xd5e <clust2sect+0x4a>
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	cb 01       	movw	r24, r22
     d5e:	1f 91       	pop	r17
     d60:	0f 91       	pop	r16
     d62:	08 95       	ret

00000d64 <get_fat>:
     d64:	af 92       	push	r10
     d66:	bf 92       	push	r11
     d68:	cf 92       	push	r12
     d6a:	df 92       	push	r13
     d6c:	ef 92       	push	r14
     d6e:	ff 92       	push	r15
     d70:	1f 93       	push	r17
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	42 30       	cpi	r20, 0x02	; 2
     d78:	51 05       	cpc	r21, r1
     d7a:	61 05       	cpc	r22, r1
     d7c:	71 05       	cpc	r23, r1
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <get_fat+0x1e>
     d80:	ad c0       	rjmp	.+346    	; 0xedc <get_fat+0x178>
     d82:	fc 01       	movw	r30, r24
     d84:	c2 8c       	ldd	r12, Z+26	; 0x1a
     d86:	d3 8c       	ldd	r13, Z+27	; 0x1b
     d88:	e4 8c       	ldd	r14, Z+28	; 0x1c
     d8a:	f5 8c       	ldd	r15, Z+29	; 0x1d
     d8c:	4c 15       	cp	r20, r12
     d8e:	5d 05       	cpc	r21, r13
     d90:	6e 05       	cpc	r22, r14
     d92:	7f 05       	cpc	r23, r15
     d94:	08 f0       	brcs	.+2      	; 0xd98 <get_fat+0x34>
     d96:	a7 c0       	rjmp	.+334    	; 0xee6 <get_fat+0x182>
     d98:	6a 01       	movw	r12, r20
     d9a:	7b 01       	movw	r14, r22
     d9c:	ec 01       	movw	r28, r24
     d9e:	80 81       	ld	r24, Z
     da0:	82 30       	cpi	r24, 0x02	; 2
     da2:	09 f4       	brne	.+2      	; 0xda6 <get_fat+0x42>
     da4:	4c c0       	rjmp	.+152    	; 0xe3e <get_fat+0xda>
     da6:	83 30       	cpi	r24, 0x03	; 3
     da8:	09 f4       	brne	.+2      	; 0xdac <get_fat+0x48>
     daa:	6b c0       	rjmp	.+214    	; 0xe82 <get_fat+0x11e>
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	09 f0       	breq	.+2      	; 0xdb2 <get_fat+0x4e>
     db0:	9f c0       	rjmp	.+318    	; 0xef0 <get_fat+0x18c>
     db2:	5a 01       	movw	r10, r20
     db4:	b6 94       	lsr	r11
     db6:	a7 94       	ror	r10
     db8:	a4 0e       	add	r10, r20
     dba:	b5 1e       	adc	r11, r21
     dbc:	c5 01       	movw	r24, r10
     dbe:	89 2f       	mov	r24, r25
     dc0:	99 27       	eor	r25, r25
     dc2:	86 95       	lsr	r24
     dc4:	42 a1       	ldd	r20, Z+34	; 0x22
     dc6:	53 a1       	ldd	r21, Z+35	; 0x23
     dc8:	64 a1       	ldd	r22, Z+36	; 0x24
     dca:	75 a1       	ldd	r23, Z+37	; 0x25
     dcc:	48 0f       	add	r20, r24
     dce:	59 1f       	adc	r21, r25
     dd0:	61 1d       	adc	r22, r1
     dd2:	71 1d       	adc	r23, r1
     dd4:	cf 01       	movw	r24, r30
     dd6:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
     dda:	81 11       	cpse	r24, r1
     ddc:	8d c0       	rjmp	.+282    	; 0xef8 <get_fat+0x194>
     dde:	f5 01       	movw	r30, r10
     de0:	f1 70       	andi	r31, 0x01	; 1
     de2:	ec 0f       	add	r30, r28
     de4:	fd 1f       	adc	r31, r29
     de6:	12 a9       	ldd	r17, Z+50	; 0x32
     de8:	ff ef       	ldi	r31, 0xFF	; 255
     dea:	af 1a       	sub	r10, r31
     dec:	bf 0a       	sbc	r11, r31
     dee:	c5 01       	movw	r24, r10
     df0:	89 2f       	mov	r24, r25
     df2:	99 27       	eor	r25, r25
     df4:	86 95       	lsr	r24
     df6:	4a a1       	ldd	r20, Y+34	; 0x22
     df8:	5b a1       	ldd	r21, Y+35	; 0x23
     dfa:	6c a1       	ldd	r22, Y+36	; 0x24
     dfc:	7d a1       	ldd	r23, Y+37	; 0x25
     dfe:	48 0f       	add	r20, r24
     e00:	59 1f       	adc	r21, r25
     e02:	61 1d       	adc	r22, r1
     e04:	71 1d       	adc	r23, r1
     e06:	ce 01       	movw	r24, r28
     e08:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
     e0c:	81 11       	cpse	r24, r1
     e0e:	78 c0       	rjmp	.+240    	; 0xf00 <get_fat+0x19c>
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	b8 22       	and	r11, r24
     e14:	ca 0d       	add	r28, r10
     e16:	db 1d       	adc	r29, r11
     e18:	8a a9       	ldd	r24, Y+50	; 0x32
     e1a:	61 2f       	mov	r22, r17
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	78 2b       	or	r23, r24
     e20:	c0 fe       	sbrs	r12, 0
     e22:	09 c0       	rjmp	.+18     	; 0xe36 <get_fat+0xd2>
     e24:	72 95       	swap	r23
     e26:	62 95       	swap	r22
     e28:	6f 70       	andi	r22, 0x0F	; 15
     e2a:	67 27       	eor	r22, r23
     e2c:	7f 70       	andi	r23, 0x0F	; 15
     e2e:	67 27       	eor	r22, r23
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	70 c0       	rjmp	.+224    	; 0xf16 <get_fat+0x1b2>
     e36:	7f 70       	andi	r23, 0x0F	; 15
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	6c c0       	rjmp	.+216    	; 0xf16 <get_fat+0x1b2>
     e3e:	45 2f       	mov	r20, r21
     e40:	56 2f       	mov	r21, r22
     e42:	67 2f       	mov	r22, r23
     e44:	77 27       	eor	r23, r23
     e46:	82 a1       	ldd	r24, Z+34	; 0x22
     e48:	93 a1       	ldd	r25, Z+35	; 0x23
     e4a:	a4 a1       	ldd	r26, Z+36	; 0x24
     e4c:	b5 a1       	ldd	r27, Z+37	; 0x25
     e4e:	48 0f       	add	r20, r24
     e50:	59 1f       	adc	r21, r25
     e52:	6a 1f       	adc	r22, r26
     e54:	7b 1f       	adc	r23, r27
     e56:	cf 01       	movw	r24, r30
     e58:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
     e5c:	81 11       	cpse	r24, r1
     e5e:	54 c0       	rjmp	.+168    	; 0xf08 <get_fat+0x1a4>
     e60:	b7 01       	movw	r22, r14
     e62:	a6 01       	movw	r20, r12
     e64:	44 0f       	add	r20, r20
     e66:	55 1f       	adc	r21, r21
     e68:	66 1f       	adc	r22, r22
     e6a:	77 1f       	adc	r23, r23
     e6c:	4e 7f       	andi	r20, 0xFE	; 254
     e6e:	51 70       	andi	r21, 0x01	; 1
     e70:	66 27       	eor	r22, r22
     e72:	77 27       	eor	r23, r23
     e74:	c4 0f       	add	r28, r20
     e76:	d5 1f       	adc	r29, r21
     e78:	6a a9       	ldd	r22, Y+50	; 0x32
     e7a:	7b a9       	ldd	r23, Y+51	; 0x33
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	4a c0       	rjmp	.+148    	; 0xf16 <get_fat+0x1b2>
     e82:	82 a1       	ldd	r24, Z+34	; 0x22
     e84:	93 a1       	ldd	r25, Z+35	; 0x23
     e86:	a4 a1       	ldd	r26, Z+36	; 0x24
     e88:	b5 a1       	ldd	r27, Z+37	; 0x25
     e8a:	68 94       	set
     e8c:	16 f8       	bld	r1, 6
     e8e:	76 95       	lsr	r23
     e90:	67 95       	ror	r22
     e92:	57 95       	ror	r21
     e94:	47 95       	ror	r20
     e96:	16 94       	lsr	r1
     e98:	d1 f7       	brne	.-12     	; 0xe8e <get_fat+0x12a>
     e9a:	48 0f       	add	r20, r24
     e9c:	59 1f       	adc	r21, r25
     e9e:	6a 1f       	adc	r22, r26
     ea0:	7b 1f       	adc	r23, r27
     ea2:	cf 01       	movw	r24, r30
     ea4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
     ea8:	81 11       	cpse	r24, r1
     eaa:	32 c0       	rjmp	.+100    	; 0xf10 <get_fat+0x1ac>
     eac:	b7 01       	movw	r22, r14
     eae:	a6 01       	movw	r20, r12
     eb0:	44 0f       	add	r20, r20
     eb2:	55 1f       	adc	r21, r21
     eb4:	66 1f       	adc	r22, r22
     eb6:	77 1f       	adc	r23, r23
     eb8:	44 0f       	add	r20, r20
     eba:	55 1f       	adc	r21, r21
     ebc:	66 1f       	adc	r22, r22
     ebe:	77 1f       	adc	r23, r23
     ec0:	4c 7f       	andi	r20, 0xFC	; 252
     ec2:	51 70       	andi	r21, 0x01	; 1
     ec4:	66 27       	eor	r22, r22
     ec6:	77 27       	eor	r23, r23
     ec8:	c4 0f       	add	r28, r20
     eca:	d5 1f       	adc	r29, r21
     ecc:	8a a9       	ldd	r24, Y+50	; 0x32
     ece:	9b a9       	ldd	r25, Y+51	; 0x33
     ed0:	ac a9       	ldd	r26, Y+52	; 0x34
     ed2:	bd a9       	ldd	r27, Y+53	; 0x35
     ed4:	bc 01       	movw	r22, r24
     ed6:	cd 01       	movw	r24, r26
     ed8:	9f 70       	andi	r25, 0x0F	; 15
     eda:	1d c0       	rjmp	.+58     	; 0xf16 <get_fat+0x1b2>
     edc:	61 e0       	ldi	r22, 0x01	; 1
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	18 c0       	rjmp	.+48     	; 0xf16 <get_fat+0x1b2>
     ee6:	61 e0       	ldi	r22, 0x01	; 1
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	13 c0       	rjmp	.+38     	; 0xf16 <get_fat+0x1b2>
     ef0:	6f ef       	ldi	r22, 0xFF	; 255
     ef2:	7f ef       	ldi	r23, 0xFF	; 255
     ef4:	cb 01       	movw	r24, r22
     ef6:	0f c0       	rjmp	.+30     	; 0xf16 <get_fat+0x1b2>
     ef8:	6f ef       	ldi	r22, 0xFF	; 255
     efa:	7f ef       	ldi	r23, 0xFF	; 255
     efc:	cb 01       	movw	r24, r22
     efe:	0b c0       	rjmp	.+22     	; 0xf16 <get_fat+0x1b2>
     f00:	6f ef       	ldi	r22, 0xFF	; 255
     f02:	7f ef       	ldi	r23, 0xFF	; 255
     f04:	cb 01       	movw	r24, r22
     f06:	07 c0       	rjmp	.+14     	; 0xf16 <get_fat+0x1b2>
     f08:	6f ef       	ldi	r22, 0xFF	; 255
     f0a:	7f ef       	ldi	r23, 0xFF	; 255
     f0c:	cb 01       	movw	r24, r22
     f0e:	03 c0       	rjmp	.+6      	; 0xf16 <get_fat+0x1b2>
     f10:	6f ef       	ldi	r22, 0xFF	; 255
     f12:	7f ef       	ldi	r23, 0xFF	; 255
     f14:	cb 01       	movw	r24, r22
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	1f 91       	pop	r17
     f1c:	ff 90       	pop	r15
     f1e:	ef 90       	pop	r14
     f20:	df 90       	pop	r13
     f22:	cf 90       	pop	r12
     f24:	bf 90       	pop	r11
     f26:	af 90       	pop	r10
     f28:	08 95       	ret

00000f2a <dir_sdi>:
     f2a:	ef 92       	push	r14
     f2c:	ff 92       	push	r15
     f2e:	0f 93       	push	r16
     f30:	1f 93       	push	r17
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	ec 01       	movw	r28, r24
     f38:	8b 01       	movw	r16, r22
     f3a:	7d 83       	std	Y+5, r23	; 0x05
     f3c:	6c 83       	std	Y+4, r22	; 0x04
     f3e:	4e 81       	ldd	r20, Y+6	; 0x06
     f40:	5f 81       	ldd	r21, Y+7	; 0x07
     f42:	68 85       	ldd	r22, Y+8	; 0x08
     f44:	79 85       	ldd	r23, Y+9	; 0x09
     f46:	41 30       	cpi	r20, 0x01	; 1
     f48:	51 05       	cpc	r21, r1
     f4a:	61 05       	cpc	r22, r1
     f4c:	71 05       	cpc	r23, r1
     f4e:	09 f4       	brne	.+2      	; 0xf52 <dir_sdi+0x28>
     f50:	92 c0       	rjmp	.+292    	; 0x1076 <dir_sdi+0x14c>
     f52:	e8 81       	ld	r30, Y
     f54:	f9 81       	ldd	r31, Y+1	; 0x01
     f56:	82 8d       	ldd	r24, Z+26	; 0x1a
     f58:	93 8d       	ldd	r25, Z+27	; 0x1b
     f5a:	a4 8d       	ldd	r26, Z+28	; 0x1c
     f5c:	b5 8d       	ldd	r27, Z+29	; 0x1d
     f5e:	48 17       	cp	r20, r24
     f60:	59 07       	cpc	r21, r25
     f62:	6a 07       	cpc	r22, r26
     f64:	7b 07       	cpc	r23, r27
     f66:	08 f0       	brcs	.+2      	; 0xf6a <dir_sdi+0x40>
     f68:	88 c0       	rjmp	.+272    	; 0x107a <dir_sdi+0x150>
     f6a:	41 15       	cp	r20, r1
     f6c:	51 05       	cpc	r21, r1
     f6e:	61 05       	cpc	r22, r1
     f70:	71 05       	cpc	r23, r1
     f72:	51 f5       	brne	.+84     	; 0xfc8 <dir_sdi+0x9e>
     f74:	80 81       	ld	r24, Z
     f76:	83 30       	cpi	r24, 0x03	; 3
     f78:	49 f4       	brne	.+18     	; 0xf8c <dir_sdi+0x62>
     f7a:	46 a1       	ldd	r20, Z+38	; 0x26
     f7c:	57 a1       	ldd	r21, Z+39	; 0x27
     f7e:	60 a5       	ldd	r22, Z+40	; 0x28
     f80:	71 a5       	ldd	r23, Z+41	; 0x29
     f82:	41 15       	cp	r20, r1
     f84:	51 05       	cpc	r21, r1
     f86:	61 05       	cpc	r22, r1
     f88:	71 05       	cpc	r23, r1
     f8a:	f1 f4       	brne	.+60     	; 0xfc8 <dir_sdi+0x9e>
     f8c:	1a 86       	std	Y+10, r1	; 0x0a
     f8e:	1b 86       	std	Y+11, r1	; 0x0b
     f90:	1c 86       	std	Y+12, r1	; 0x0c
     f92:	1d 86       	std	Y+13, r1	; 0x0d
     f94:	80 85       	ldd	r24, Z+8	; 0x08
     f96:	91 85       	ldd	r25, Z+9	; 0x09
     f98:	08 17       	cp	r16, r24
     f9a:	19 07       	cpc	r17, r25
     f9c:	08 f0       	brcs	.+2      	; 0xfa0 <dir_sdi+0x76>
     f9e:	6f c0       	rjmp	.+222    	; 0x107e <dir_sdi+0x154>
     fa0:	86 a1       	ldd	r24, Z+38	; 0x26
     fa2:	97 a1       	ldd	r25, Z+39	; 0x27
     fa4:	a0 a5       	ldd	r26, Z+40	; 0x28
     fa6:	b1 a5       	ldd	r27, Z+41	; 0x29
     fa8:	98 01       	movw	r18, r16
     faa:	32 95       	swap	r19
     fac:	22 95       	swap	r18
     fae:	2f 70       	andi	r18, 0x0F	; 15
     fb0:	23 27       	eor	r18, r19
     fb2:	3f 70       	andi	r19, 0x0F	; 15
     fb4:	23 27       	eor	r18, r19
     fb6:	82 0f       	add	r24, r18
     fb8:	93 1f       	adc	r25, r19
     fba:	a1 1d       	adc	r26, r1
     fbc:	b1 1d       	adc	r27, r1
     fbe:	8e 87       	std	Y+14, r24	; 0x0e
     fc0:	9f 87       	std	Y+15, r25	; 0x0f
     fc2:	a8 8b       	std	Y+16, r26	; 0x10
     fc4:	b9 8b       	std	Y+17, r27	; 0x11
     fc6:	44 c0       	rjmp	.+136    	; 0x1050 <dir_sdi+0x126>
     fc8:	e2 80       	ldd	r14, Z+2	; 0x02
     fca:	80 e1       	ldi	r24, 0x10	; 16
     fcc:	e8 9e       	mul	r14, r24
     fce:	70 01       	movw	r14, r0
     fd0:	11 24       	eor	r1, r1
     fd2:	0e 15       	cp	r16, r14
     fd4:	1f 05       	cpc	r17, r15
     fd6:	18 f1       	brcs	.+70     	; 0x101e <dir_sdi+0xf4>
     fd8:	88 81       	ld	r24, Y
     fda:	99 81       	ldd	r25, Y+1	; 0x01
     fdc:	0e 94 b2 06 	call	0xd64	; 0xd64 <get_fat>
     fe0:	ab 01       	movw	r20, r22
     fe2:	bc 01       	movw	r22, r24
     fe4:	4f 3f       	cpi	r20, 0xFF	; 255
     fe6:	8f ef       	ldi	r24, 0xFF	; 255
     fe8:	58 07       	cpc	r21, r24
     fea:	68 07       	cpc	r22, r24
     fec:	78 07       	cpc	r23, r24
     fee:	09 f4       	brne	.+2      	; 0xff2 <dir_sdi+0xc8>
     ff0:	48 c0       	rjmp	.+144    	; 0x1082 <dir_sdi+0x158>
     ff2:	42 30       	cpi	r20, 0x02	; 2
     ff4:	51 05       	cpc	r21, r1
     ff6:	61 05       	cpc	r22, r1
     ff8:	71 05       	cpc	r23, r1
     ffa:	08 f4       	brcc	.+2      	; 0xffe <dir_sdi+0xd4>
     ffc:	44 c0       	rjmp	.+136    	; 0x1086 <dir_sdi+0x15c>
     ffe:	e8 81       	ld	r30, Y
    1000:	f9 81       	ldd	r31, Y+1	; 0x01
    1002:	82 8d       	ldd	r24, Z+26	; 0x1a
    1004:	93 8d       	ldd	r25, Z+27	; 0x1b
    1006:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1008:	b5 8d       	ldd	r27, Z+29	; 0x1d
    100a:	48 17       	cp	r20, r24
    100c:	59 07       	cpc	r21, r25
    100e:	6a 07       	cpc	r22, r26
    1010:	7b 07       	cpc	r23, r27
    1012:	d8 f5       	brcc	.+118    	; 0x108a <dir_sdi+0x160>
    1014:	0e 19       	sub	r16, r14
    1016:	1f 09       	sbc	r17, r15
    1018:	0e 15       	cp	r16, r14
    101a:	1f 05       	cpc	r17, r15
    101c:	e8 f6       	brcc	.-70     	; 0xfd8 <dir_sdi+0xae>
    101e:	4a 87       	std	Y+10, r20	; 0x0a
    1020:	5b 87       	std	Y+11, r21	; 0x0b
    1022:	6c 87       	std	Y+12, r22	; 0x0c
    1024:	7d 87       	std	Y+13, r23	; 0x0d
    1026:	88 81       	ld	r24, Y
    1028:	99 81       	ldd	r25, Y+1	; 0x01
    102a:	0e 94 8a 06 	call	0xd14	; 0xd14 <clust2sect>
    102e:	98 01       	movw	r18, r16
    1030:	32 95       	swap	r19
    1032:	22 95       	swap	r18
    1034:	2f 70       	andi	r18, 0x0F	; 15
    1036:	23 27       	eor	r18, r19
    1038:	3f 70       	andi	r19, 0x0F	; 15
    103a:	23 27       	eor	r18, r19
    103c:	dc 01       	movw	r26, r24
    103e:	cb 01       	movw	r24, r22
    1040:	82 0f       	add	r24, r18
    1042:	93 1f       	adc	r25, r19
    1044:	a1 1d       	adc	r26, r1
    1046:	b1 1d       	adc	r27, r1
    1048:	8e 87       	std	Y+14, r24	; 0x0e
    104a:	9f 87       	std	Y+15, r25	; 0x0f
    104c:	a8 8b       	std	Y+16, r26	; 0x10
    104e:	b9 8b       	std	Y+17, r27	; 0x11
    1050:	88 81       	ld	r24, Y
    1052:	99 81       	ldd	r25, Y+1	; 0x01
    1054:	c2 96       	adiw	r24, 0x32	; 50
    1056:	0f 70       	andi	r16, 0x0F	; 15
    1058:	11 27       	eor	r17, r17
    105a:	00 0f       	add	r16, r16
    105c:	11 1f       	adc	r17, r17
    105e:	02 95       	swap	r16
    1060:	12 95       	swap	r17
    1062:	10 7f       	andi	r17, 0xF0	; 240
    1064:	10 27       	eor	r17, r16
    1066:	00 7f       	andi	r16, 0xF0	; 240
    1068:	10 27       	eor	r17, r16
    106a:	08 0f       	add	r16, r24
    106c:	19 1f       	adc	r17, r25
    106e:	1b 8b       	std	Y+19, r17	; 0x13
    1070:	0a 8b       	std	Y+18, r16	; 0x12
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	0b c0       	rjmp	.+22     	; 0x108c <dir_sdi+0x162>
    1076:	82 e0       	ldi	r24, 0x02	; 2
    1078:	09 c0       	rjmp	.+18     	; 0x108c <dir_sdi+0x162>
    107a:	82 e0       	ldi	r24, 0x02	; 2
    107c:	07 c0       	rjmp	.+14     	; 0x108c <dir_sdi+0x162>
    107e:	82 e0       	ldi	r24, 0x02	; 2
    1080:	05 c0       	rjmp	.+10     	; 0x108c <dir_sdi+0x162>
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	03 c0       	rjmp	.+6      	; 0x108c <dir_sdi+0x162>
    1086:	82 e0       	ldi	r24, 0x02	; 2
    1088:	01 c0       	rjmp	.+2      	; 0x108c <dir_sdi+0x162>
    108a:	82 e0       	ldi	r24, 0x02	; 2
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	ff 90       	pop	r15
    1096:	ef 90       	pop	r14
    1098:	08 95       	ret

0000109a <put_fat>:
    109a:	6f 92       	push	r6
    109c:	7f 92       	push	r7
    109e:	8f 92       	push	r8
    10a0:	9f 92       	push	r9
    10a2:	af 92       	push	r10
    10a4:	bf 92       	push	r11
    10a6:	cf 92       	push	r12
    10a8:	df 92       	push	r13
    10aa:	ef 92       	push	r14
    10ac:	ff 92       	push	r15
    10ae:	0f 93       	push	r16
    10b0:	1f 93       	push	r17
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	42 30       	cpi	r20, 0x02	; 2
    10b8:	51 05       	cpc	r21, r1
    10ba:	61 05       	cpc	r22, r1
    10bc:	71 05       	cpc	r23, r1
    10be:	08 f4       	brcc	.+2      	; 0x10c2 <put_fat+0x28>
    10c0:	e1 c0       	rjmp	.+450    	; 0x1284 <put_fat+0x1ea>
    10c2:	fc 01       	movw	r30, r24
    10c4:	c2 8c       	ldd	r12, Z+26	; 0x1a
    10c6:	d3 8c       	ldd	r13, Z+27	; 0x1b
    10c8:	e4 8c       	ldd	r14, Z+28	; 0x1c
    10ca:	f5 8c       	ldd	r15, Z+29	; 0x1d
    10cc:	4c 15       	cp	r20, r12
    10ce:	5d 05       	cpc	r21, r13
    10d0:	6e 05       	cpc	r22, r14
    10d2:	7f 05       	cpc	r23, r15
    10d4:	08 f0       	brcs	.+2      	; 0x10d8 <put_fat+0x3e>
    10d6:	d8 c0       	rjmp	.+432    	; 0x1288 <put_fat+0x1ee>
    10d8:	68 01       	movw	r12, r16
    10da:	79 01       	movw	r14, r18
    10dc:	4a 01       	movw	r8, r20
    10de:	5b 01       	movw	r10, r22
    10e0:	ec 01       	movw	r28, r24
    10e2:	80 81       	ld	r24, Z
    10e4:	82 30       	cpi	r24, 0x02	; 2
    10e6:	09 f4       	brne	.+2      	; 0x10ea <put_fat+0x50>
    10e8:	67 c0       	rjmp	.+206    	; 0x11b8 <put_fat+0x11e>
    10ea:	83 30       	cpi	r24, 0x03	; 3
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <put_fat+0x56>
    10ee:	88 c0       	rjmp	.+272    	; 0x1200 <put_fat+0x166>
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <put_fat+0x5c>
    10f4:	bf c0       	rjmp	.+382    	; 0x1274 <put_fat+0x1da>
    10f6:	8a 01       	movw	r16, r20
    10f8:	16 95       	lsr	r17
    10fa:	07 95       	ror	r16
    10fc:	38 01       	movw	r6, r16
    10fe:	64 0e       	add	r6, r20
    1100:	75 1e       	adc	r7, r21
    1102:	c3 01       	movw	r24, r6
    1104:	89 2f       	mov	r24, r25
    1106:	99 27       	eor	r25, r25
    1108:	86 95       	lsr	r24
    110a:	42 a1       	ldd	r20, Z+34	; 0x22
    110c:	53 a1       	ldd	r21, Z+35	; 0x23
    110e:	64 a1       	ldd	r22, Z+36	; 0x24
    1110:	75 a1       	ldd	r23, Z+37	; 0x25
    1112:	48 0f       	add	r20, r24
    1114:	59 1f       	adc	r21, r25
    1116:	61 1d       	adc	r22, r1
    1118:	71 1d       	adc	r23, r1
    111a:	cf 01       	movw	r24, r30
    111c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    1120:	18 2f       	mov	r17, r24
    1122:	81 11       	cpse	r24, r1
    1124:	ac c0       	rjmp	.+344    	; 0x127e <put_fat+0x1e4>
    1126:	c3 01       	movw	r24, r6
    1128:	91 70       	andi	r25, 0x01	; 1
    112a:	80 fe       	sbrs	r8, 0
    112c:	24 c0       	rjmp	.+72     	; 0x1176 <put_fat+0xdc>
    112e:	fe 01       	movw	r30, r28
    1130:	e8 0f       	add	r30, r24
    1132:	f9 1f       	adc	r31, r25
    1134:	82 a9       	ldd	r24, Z+50	; 0x32
    1136:	28 2f       	mov	r18, r24
    1138:	2f 70       	andi	r18, 0x0F	; 15
    113a:	30 e1       	ldi	r19, 0x10	; 16
    113c:	c3 9e       	mul	r12, r19
    113e:	c0 01       	movw	r24, r0
    1140:	11 24       	eor	r1, r1
    1142:	82 2b       	or	r24, r18
    1144:	82 ab       	std	Z+50, r24	; 0x32
    1146:	53 01       	movw	r10, r6
    1148:	8f ef       	ldi	r24, 0xFF	; 255
    114a:	a8 1a       	sub	r10, r24
    114c:	b8 0a       	sbc	r11, r24
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	8c 83       	std	Y+4, r24	; 0x04
    1152:	c5 01       	movw	r24, r10
    1154:	89 2f       	mov	r24, r25
    1156:	99 27       	eor	r25, r25
    1158:	86 95       	lsr	r24
    115a:	4a a1       	ldd	r20, Y+34	; 0x22
    115c:	5b a1       	ldd	r21, Y+35	; 0x23
    115e:	6c a1       	ldd	r22, Y+36	; 0x24
    1160:	7d a1       	ldd	r23, Y+37	; 0x25
    1162:	48 0f       	add	r20, r24
    1164:	59 1f       	adc	r21, r25
    1166:	61 1d       	adc	r22, r1
    1168:	71 1d       	adc	r23, r1
    116a:	ce 01       	movw	r24, r28
    116c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    1170:	81 11       	cpse	r24, r1
    1172:	82 c0       	rjmp	.+260    	; 0x1278 <put_fat+0x1de>
    1174:	8b c0       	rjmp	.+278    	; 0x128c <put_fat+0x1f2>
    1176:	fe 01       	movw	r30, r28
    1178:	e8 0f       	add	r30, r24
    117a:	f9 1f       	adc	r31, r25
    117c:	c2 aa       	std	Z+50, r12	; 0x32
    117e:	53 01       	movw	r10, r6
    1180:	ef ef       	ldi	r30, 0xFF	; 255
    1182:	ae 1a       	sub	r10, r30
    1184:	be 0a       	sbc	r11, r30
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	8c 83       	std	Y+4, r24	; 0x04
    118a:	c5 01       	movw	r24, r10
    118c:	89 2f       	mov	r24, r25
    118e:	99 27       	eor	r25, r25
    1190:	86 95       	lsr	r24
    1192:	4a a1       	ldd	r20, Y+34	; 0x22
    1194:	5b a1       	ldd	r21, Y+35	; 0x23
    1196:	6c a1       	ldd	r22, Y+36	; 0x24
    1198:	7d a1       	ldd	r23, Y+37	; 0x25
    119a:	48 0f       	add	r20, r24
    119c:	59 1f       	adc	r21, r25
    119e:	61 1d       	adc	r22, r1
    11a0:	71 1d       	adc	r23, r1
    11a2:	ce 01       	movw	r24, r28
    11a4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    11a8:	81 11       	cpse	r24, r1
    11aa:	68 c0       	rjmp	.+208    	; 0x127c <put_fat+0x1e2>
    11ac:	7a c0       	rjmp	.+244    	; 0x12a2 <put_fat+0x208>
    11ae:	fe 01       	movw	r30, r28
    11b0:	e8 0f       	add	r30, r24
    11b2:	f9 1f       	adc	r31, r25
    11b4:	c2 aa       	std	Z+50, r12	; 0x32
    11b6:	63 c0       	rjmp	.+198    	; 0x127e <put_fat+0x1e4>
    11b8:	45 2f       	mov	r20, r21
    11ba:	56 2f       	mov	r21, r22
    11bc:	67 2f       	mov	r22, r23
    11be:	77 27       	eor	r23, r23
    11c0:	82 a1       	ldd	r24, Z+34	; 0x22
    11c2:	93 a1       	ldd	r25, Z+35	; 0x23
    11c4:	a4 a1       	ldd	r26, Z+36	; 0x24
    11c6:	b5 a1       	ldd	r27, Z+37	; 0x25
    11c8:	48 0f       	add	r20, r24
    11ca:	59 1f       	adc	r21, r25
    11cc:	6a 1f       	adc	r22, r26
    11ce:	7b 1f       	adc	r23, r27
    11d0:	cf 01       	movw	r24, r30
    11d2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    11d6:	18 2f       	mov	r17, r24
    11d8:	81 11       	cpse	r24, r1
    11da:	51 c0       	rjmp	.+162    	; 0x127e <put_fat+0x1e4>
    11dc:	b5 01       	movw	r22, r10
    11de:	a4 01       	movw	r20, r8
    11e0:	44 0f       	add	r20, r20
    11e2:	55 1f       	adc	r21, r21
    11e4:	66 1f       	adc	r22, r22
    11e6:	77 1f       	adc	r23, r23
    11e8:	4e 7f       	andi	r20, 0xFE	; 254
    11ea:	51 70       	andi	r21, 0x01	; 1
    11ec:	66 27       	eor	r22, r22
    11ee:	77 27       	eor	r23, r23
    11f0:	4e 5c       	subi	r20, 0xCE	; 206
    11f2:	5f 4f       	sbci	r21, 0xFF	; 255
    11f4:	fe 01       	movw	r30, r28
    11f6:	e4 0f       	add	r30, r20
    11f8:	f5 1f       	adc	r31, r21
    11fa:	d1 82       	std	Z+1, r13	; 0x01
    11fc:	c0 82       	st	Z, r12
    11fe:	3f c0       	rjmp	.+126    	; 0x127e <put_fat+0x1e4>
    1200:	82 a1       	ldd	r24, Z+34	; 0x22
    1202:	93 a1       	ldd	r25, Z+35	; 0x23
    1204:	a4 a1       	ldd	r26, Z+36	; 0x24
    1206:	b5 a1       	ldd	r27, Z+37	; 0x25
    1208:	68 94       	set
    120a:	16 f8       	bld	r1, 6
    120c:	76 95       	lsr	r23
    120e:	67 95       	ror	r22
    1210:	57 95       	ror	r21
    1212:	47 95       	ror	r20
    1214:	16 94       	lsr	r1
    1216:	d1 f7       	brne	.-12     	; 0x120c <put_fat+0x172>
    1218:	48 0f       	add	r20, r24
    121a:	59 1f       	adc	r21, r25
    121c:	6a 1f       	adc	r22, r26
    121e:	7b 1f       	adc	r23, r27
    1220:	cf 01       	movw	r24, r30
    1222:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    1226:	18 2f       	mov	r17, r24
    1228:	81 11       	cpse	r24, r1
    122a:	29 c0       	rjmp	.+82     	; 0x127e <put_fat+0x1e4>
    122c:	b5 01       	movw	r22, r10
    122e:	a4 01       	movw	r20, r8
    1230:	44 0f       	add	r20, r20
    1232:	55 1f       	adc	r21, r21
    1234:	66 1f       	adc	r22, r22
    1236:	77 1f       	adc	r23, r23
    1238:	44 0f       	add	r20, r20
    123a:	55 1f       	adc	r21, r21
    123c:	66 1f       	adc	r22, r22
    123e:	77 1f       	adc	r23, r23
    1240:	4c 7f       	andi	r20, 0xFC	; 252
    1242:	51 70       	andi	r21, 0x01	; 1
    1244:	66 27       	eor	r22, r22
    1246:	77 27       	eor	r23, r23
    1248:	4e 5c       	subi	r20, 0xCE	; 206
    124a:	5f 4f       	sbci	r21, 0xFF	; 255
    124c:	fe 01       	movw	r30, r28
    124e:	e4 0f       	add	r30, r20
    1250:	f5 1f       	adc	r31, r21
    1252:	80 81       	ld	r24, Z
    1254:	91 81       	ldd	r25, Z+1	; 0x01
    1256:	a2 81       	ldd	r26, Z+2	; 0x02
    1258:	b3 81       	ldd	r27, Z+3	; 0x03
    125a:	88 27       	eor	r24, r24
    125c:	99 27       	eor	r25, r25
    125e:	aa 27       	eor	r26, r26
    1260:	b0 7f       	andi	r27, 0xF0	; 240
    1262:	c8 2a       	or	r12, r24
    1264:	d9 2a       	or	r13, r25
    1266:	ea 2a       	or	r14, r26
    1268:	fb 2a       	or	r15, r27
    126a:	c0 82       	st	Z, r12
    126c:	d1 82       	std	Z+1, r13	; 0x01
    126e:	e2 82       	std	Z+2, r14	; 0x02
    1270:	f3 82       	std	Z+3, r15	; 0x03
    1272:	05 c0       	rjmp	.+10     	; 0x127e <put_fat+0x1e4>
    1274:	12 e0       	ldi	r17, 0x02	; 2
    1276:	03 c0       	rjmp	.+6      	; 0x127e <put_fat+0x1e4>
    1278:	18 2f       	mov	r17, r24
    127a:	01 c0       	rjmp	.+2      	; 0x127e <put_fat+0x1e4>
    127c:	18 2f       	mov	r17, r24
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	8c 83       	std	Y+4, r24	; 0x04
    1282:	1b c0       	rjmp	.+54     	; 0x12ba <put_fat+0x220>
    1284:	12 e0       	ldi	r17, 0x02	; 2
    1286:	19 c0       	rjmp	.+50     	; 0x12ba <put_fat+0x220>
    1288:	12 e0       	ldi	r17, 0x02	; 2
    128a:	17 c0       	rjmp	.+46     	; 0x12ba <put_fat+0x220>
    128c:	c5 01       	movw	r24, r10
    128e:	91 70       	andi	r25, 0x01	; 1
    1290:	68 94       	set
    1292:	13 f8       	bld	r1, 3
    1294:	f6 94       	lsr	r15
    1296:	e7 94       	ror	r14
    1298:	d7 94       	ror	r13
    129a:	c7 94       	ror	r12
    129c:	16 94       	lsr	r1
    129e:	d1 f7       	brne	.-12     	; 0x1294 <put_fat+0x1fa>
    12a0:	86 cf       	rjmp	.-244    	; 0x11ae <put_fat+0x114>
    12a2:	c5 01       	movw	r24, r10
    12a4:	91 70       	andi	r25, 0x01	; 1
    12a6:	fe 01       	movw	r30, r28
    12a8:	e8 0f       	add	r30, r24
    12aa:	f9 1f       	adc	r31, r25
    12ac:	32 a9       	ldd	r19, Z+50	; 0x32
    12ae:	30 7f       	andi	r19, 0xF0	; 240
    12b0:	2d 2d       	mov	r18, r13
    12b2:	2f 70       	andi	r18, 0x0F	; 15
    12b4:	c3 2e       	mov	r12, r19
    12b6:	c2 2a       	or	r12, r18
    12b8:	7a cf       	rjmp	.-268    	; 0x11ae <put_fat+0x114>
    12ba:	81 2f       	mov	r24, r17
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	1f 91       	pop	r17
    12c2:	0f 91       	pop	r16
    12c4:	ff 90       	pop	r15
    12c6:	ef 90       	pop	r14
    12c8:	df 90       	pop	r13
    12ca:	cf 90       	pop	r12
    12cc:	bf 90       	pop	r11
    12ce:	af 90       	pop	r10
    12d0:	9f 90       	pop	r9
    12d2:	8f 90       	pop	r8
    12d4:	7f 90       	pop	r7
    12d6:	6f 90       	pop	r6
    12d8:	08 95       	ret

000012da <create_chain>:
    12da:	4f 92       	push	r4
    12dc:	5f 92       	push	r5
    12de:	6f 92       	push	r6
    12e0:	7f 92       	push	r7
    12e2:	8f 92       	push	r8
    12e4:	9f 92       	push	r9
    12e6:	af 92       	push	r10
    12e8:	bf 92       	push	r11
    12ea:	cf 92       	push	r12
    12ec:	df 92       	push	r13
    12ee:	ef 92       	push	r14
    12f0:	ff 92       	push	r15
    12f2:	0f 93       	push	r16
    12f4:	1f 93       	push	r17
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	ec 01       	movw	r28, r24
    12fc:	2a 01       	movw	r4, r20
    12fe:	3b 01       	movw	r6, r22
    1300:	41 15       	cp	r20, r1
    1302:	51 05       	cpc	r21, r1
    1304:	61 05       	cpc	r22, r1
    1306:	71 05       	cpc	r23, r1
    1308:	b9 f4       	brne	.+46     	; 0x1338 <create_chain+0x5e>
    130a:	8a 84       	ldd	r8, Y+10	; 0x0a
    130c:	9b 84       	ldd	r9, Y+11	; 0x0b
    130e:	ac 84       	ldd	r10, Y+12	; 0x0c
    1310:	bd 84       	ldd	r11, Y+13	; 0x0d
    1312:	81 14       	cp	r8, r1
    1314:	91 04       	cpc	r9, r1
    1316:	a1 04       	cpc	r10, r1
    1318:	b1 04       	cpc	r11, r1
    131a:	29 f1       	breq	.+74     	; 0x1366 <create_chain+0x8c>
    131c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    131e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1320:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1322:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1324:	88 16       	cp	r8, r24
    1326:	99 06       	cpc	r9, r25
    1328:	aa 06       	cpc	r10, r26
    132a:	bb 06       	cpc	r11, r27
    132c:	00 f1       	brcs	.+64     	; 0x136e <create_chain+0x94>
    132e:	81 2c       	mov	r8, r1
    1330:	91 2c       	mov	r9, r1
    1332:	54 01       	movw	r10, r8
    1334:	83 94       	inc	r8
    1336:	1b c0       	rjmp	.+54     	; 0x136e <create_chain+0x94>
    1338:	0e 94 b2 06 	call	0xd64	; 0xd64 <get_fat>
    133c:	6b 01       	movw	r12, r22
    133e:	7c 01       	movw	r14, r24
    1340:	62 30       	cpi	r22, 0x02	; 2
    1342:	71 05       	cpc	r23, r1
    1344:	81 05       	cpc	r24, r1
    1346:	91 05       	cpc	r25, r1
    1348:	08 f4       	brcc	.+2      	; 0x134c <create_chain+0x72>
    134a:	86 c0       	rjmp	.+268    	; 0x1458 <create_chain+0x17e>
    134c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    134e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1350:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1352:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1354:	c8 16       	cp	r12, r24
    1356:	d9 06       	cpc	r13, r25
    1358:	ea 06       	cpc	r14, r26
    135a:	fb 06       	cpc	r15, r27
    135c:	08 f4       	brcc	.+2      	; 0x1360 <create_chain+0x86>
    135e:	81 c0       	rjmp	.+258    	; 0x1462 <create_chain+0x188>
    1360:	53 01       	movw	r10, r6
    1362:	42 01       	movw	r8, r4
    1364:	04 c0       	rjmp	.+8      	; 0x136e <create_chain+0x94>
    1366:	81 2c       	mov	r8, r1
    1368:	91 2c       	mov	r9, r1
    136a:	54 01       	movw	r10, r8
    136c:	83 94       	inc	r8
    136e:	75 01       	movw	r14, r10
    1370:	64 01       	movw	r12, r8
    1372:	8f ef       	ldi	r24, 0xFF	; 255
    1374:	c8 1a       	sub	r12, r24
    1376:	d8 0a       	sbc	r13, r24
    1378:	e8 0a       	sbc	r14, r24
    137a:	f8 0a       	sbc	r15, r24
    137c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    137e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1380:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1382:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1384:	c8 16       	cp	r12, r24
    1386:	d9 06       	cpc	r13, r25
    1388:	ea 06       	cpc	r14, r26
    138a:	fb 06       	cpc	r15, r27
    138c:	60 f0       	brcs	.+24     	; 0x13a6 <create_chain+0xcc>
    138e:	22 e0       	ldi	r18, 0x02	; 2
    1390:	82 16       	cp	r8, r18
    1392:	91 04       	cpc	r9, r1
    1394:	a1 04       	cpc	r10, r1
    1396:	b1 04       	cpc	r11, r1
    1398:	08 f4       	brcc	.+2      	; 0x139c <create_chain+0xc2>
    139a:	68 c0       	rjmp	.+208    	; 0x146c <create_chain+0x192>
    139c:	c1 2c       	mov	r12, r1
    139e:	d1 2c       	mov	r13, r1
    13a0:	76 01       	movw	r14, r12
    13a2:	68 94       	set
    13a4:	c1 f8       	bld	r12, 1
    13a6:	b7 01       	movw	r22, r14
    13a8:	a6 01       	movw	r20, r12
    13aa:	ce 01       	movw	r24, r28
    13ac:	0e 94 b2 06 	call	0xd64	; 0xd64 <get_fat>
    13b0:	61 15       	cp	r22, r1
    13b2:	71 05       	cpc	r23, r1
    13b4:	81 05       	cpc	r24, r1
    13b6:	91 05       	cpc	r25, r1
    13b8:	99 f0       	breq	.+38     	; 0x13e0 <create_chain+0x106>
    13ba:	6f 3f       	cpi	r22, 0xFF	; 255
    13bc:	2f ef       	ldi	r18, 0xFF	; 255
    13be:	72 07       	cpc	r23, r18
    13c0:	82 07       	cpc	r24, r18
    13c2:	92 07       	cpc	r25, r18
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <create_chain+0xee>
    13c6:	57 c0       	rjmp	.+174    	; 0x1476 <create_chain+0x19c>
    13c8:	61 30       	cpi	r22, 0x01	; 1
    13ca:	71 05       	cpc	r23, r1
    13cc:	81 05       	cpc	r24, r1
    13ce:	91 05       	cpc	r25, r1
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <create_chain+0xfa>
    13d2:	56 c0       	rjmp	.+172    	; 0x1480 <create_chain+0x1a6>
    13d4:	c8 14       	cp	r12, r8
    13d6:	d9 04       	cpc	r13, r9
    13d8:	ea 04       	cpc	r14, r10
    13da:	fb 04       	cpc	r15, r11
    13dc:	51 f6       	brne	.-108    	; 0x1372 <create_chain+0x98>
    13de:	55 c0       	rjmp	.+170    	; 0x148a <create_chain+0x1b0>
    13e0:	0f ef       	ldi	r16, 0xFF	; 255
    13e2:	1f ef       	ldi	r17, 0xFF	; 255
    13e4:	2f ef       	ldi	r18, 0xFF	; 255
    13e6:	3f e0       	ldi	r19, 0x0F	; 15
    13e8:	b7 01       	movw	r22, r14
    13ea:	a6 01       	movw	r20, r12
    13ec:	ce 01       	movw	r24, r28
    13ee:	0e 94 4d 08 	call	0x109a	; 0x109a <put_fat>
    13f2:	81 11       	cpse	r24, r1
    13f4:	2a c0       	rjmp	.+84     	; 0x144a <create_chain+0x170>
    13f6:	41 14       	cp	r4, r1
    13f8:	51 04       	cpc	r5, r1
    13fa:	61 04       	cpc	r6, r1
    13fc:	71 04       	cpc	r7, r1
    13fe:	49 f0       	breq	.+18     	; 0x1412 <create_chain+0x138>
    1400:	97 01       	movw	r18, r14
    1402:	86 01       	movw	r16, r12
    1404:	b3 01       	movw	r22, r6
    1406:	a2 01       	movw	r20, r4
    1408:	ce 01       	movw	r24, r28
    140a:	0e 94 4d 08 	call	0x109a	; 0x109a <put_fat>
    140e:	81 11       	cpse	r24, r1
    1410:	1c c0       	rjmp	.+56     	; 0x144a <create_chain+0x170>
    1412:	ca 86       	std	Y+10, r12	; 0x0a
    1414:	db 86       	std	Y+11, r13	; 0x0b
    1416:	ec 86       	std	Y+12, r14	; 0x0c
    1418:	fd 86       	std	Y+13, r15	; 0x0d
    141a:	8e 85       	ldd	r24, Y+14	; 0x0e
    141c:	9f 85       	ldd	r25, Y+15	; 0x0f
    141e:	a8 89       	ldd	r26, Y+16	; 0x10
    1420:	b9 89       	ldd	r27, Y+17	; 0x11
    1422:	8f 3f       	cpi	r24, 0xFF	; 255
    1424:	2f ef       	ldi	r18, 0xFF	; 255
    1426:	92 07       	cpc	r25, r18
    1428:	a2 07       	cpc	r26, r18
    142a:	b2 07       	cpc	r27, r18
    142c:	99 f1       	breq	.+102    	; 0x1494 <create_chain+0x1ba>
    142e:	01 97       	sbiw	r24, 0x01	; 1
    1430:	a1 09       	sbc	r26, r1
    1432:	b1 09       	sbc	r27, r1
    1434:	8e 87       	std	Y+14, r24	; 0x0e
    1436:	9f 87       	std	Y+15, r25	; 0x0f
    1438:	a8 8b       	std	Y+16, r26	; 0x10
    143a:	b9 8b       	std	Y+17, r27	; 0x11
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	8d 83       	std	Y+5, r24	; 0x05
    1440:	6c 2d       	mov	r22, r12
    1442:	7d 2d       	mov	r23, r13
    1444:	8e 2d       	mov	r24, r14
    1446:	9f 2d       	mov	r25, r15
    1448:	2e c0       	rjmp	.+92     	; 0x14a6 <create_chain+0x1cc>
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	41 f1       	breq	.+80     	; 0x149e <create_chain+0x1c4>
    144e:	61 e0       	ldi	r22, 0x01	; 1
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	27 c0       	rjmp	.+78     	; 0x14a6 <create_chain+0x1cc>
    1458:	61 e0       	ldi	r22, 0x01	; 1
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	22 c0       	rjmp	.+68     	; 0x14a6 <create_chain+0x1cc>
    1462:	6c 2d       	mov	r22, r12
    1464:	7d 2d       	mov	r23, r13
    1466:	8e 2d       	mov	r24, r14
    1468:	9f 2d       	mov	r25, r15
    146a:	1d c0       	rjmp	.+58     	; 0x14a6 <create_chain+0x1cc>
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	70 e0       	ldi	r23, 0x00	; 0
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	18 c0       	rjmp	.+48     	; 0x14a6 <create_chain+0x1cc>
    1476:	6f ef       	ldi	r22, 0xFF	; 255
    1478:	7f ef       	ldi	r23, 0xFF	; 255
    147a:	8f ef       	ldi	r24, 0xFF	; 255
    147c:	9f ef       	ldi	r25, 0xFF	; 255
    147e:	13 c0       	rjmp	.+38     	; 0x14a6 <create_chain+0x1cc>
    1480:	61 e0       	ldi	r22, 0x01	; 1
    1482:	70 e0       	ldi	r23, 0x00	; 0
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e c0       	rjmp	.+28     	; 0x14a6 <create_chain+0x1cc>
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	70 e0       	ldi	r23, 0x00	; 0
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	09 c0       	rjmp	.+18     	; 0x14a6 <create_chain+0x1cc>
    1494:	6c 2d       	mov	r22, r12
    1496:	7d 2d       	mov	r23, r13
    1498:	8e 2d       	mov	r24, r14
    149a:	9f 2d       	mov	r25, r15
    149c:	04 c0       	rjmp	.+8      	; 0x14a6 <create_chain+0x1cc>
    149e:	6f ef       	ldi	r22, 0xFF	; 255
    14a0:	7f ef       	ldi	r23, 0xFF	; 255
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	9f ef       	ldi	r25, 0xFF	; 255
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	1f 91       	pop	r17
    14ac:	0f 91       	pop	r16
    14ae:	ff 90       	pop	r15
    14b0:	ef 90       	pop	r14
    14b2:	df 90       	pop	r13
    14b4:	cf 90       	pop	r12
    14b6:	bf 90       	pop	r11
    14b8:	af 90       	pop	r10
    14ba:	9f 90       	pop	r9
    14bc:	8f 90       	pop	r8
    14be:	7f 90       	pop	r7
    14c0:	6f 90       	pop	r6
    14c2:	5f 90       	pop	r5
    14c4:	4f 90       	pop	r4
    14c6:	08 95       	ret

000014c8 <dir_next>:
    14c8:	8f 92       	push	r8
    14ca:	9f 92       	push	r9
    14cc:	af 92       	push	r10
    14ce:	bf 92       	push	r11
    14d0:	cf 92       	push	r12
    14d2:	df 92       	push	r13
    14d4:	ef 92       	push	r14
    14d6:	ff 92       	push	r15
    14d8:	0f 93       	push	r16
    14da:	1f 93       	push	r17
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	dc 01       	movw	r26, r24
    14e2:	14 96       	adiw	r26, 0x04	; 4
    14e4:	cd 91       	ld	r28, X+
    14e6:	dc 91       	ld	r29, X
    14e8:	15 97       	sbiw	r26, 0x05	; 5
    14ea:	21 96       	adiw	r28, 0x01	; 1
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <dir_next+0x28>
    14ee:	02 c1       	rjmp	.+516    	; 0x16f4 <dir_next+0x22c>
    14f0:	1e 96       	adiw	r26, 0x0e	; 14
    14f2:	8d 90       	ld	r8, X+
    14f4:	9d 90       	ld	r9, X+
    14f6:	ad 90       	ld	r10, X+
    14f8:	bc 90       	ld	r11, X
    14fa:	51 97       	sbiw	r26, 0x11	; 17
    14fc:	81 14       	cp	r8, r1
    14fe:	91 04       	cpc	r9, r1
    1500:	a1 04       	cpc	r10, r1
    1502:	b1 04       	cpc	r11, r1
    1504:	09 f4       	brne	.+2      	; 0x1508 <dir_next+0x40>
    1506:	f8 c0       	rjmp	.+496    	; 0x16f8 <dir_next+0x230>
    1508:	7b 01       	movw	r14, r22
    150a:	8c 01       	movw	r16, r24
    150c:	6e 01       	movw	r12, r28
    150e:	bf e0       	ldi	r27, 0x0F	; 15
    1510:	cb 22       	and	r12, r27
    1512:	dd 24       	eor	r13, r13
    1514:	c1 14       	cp	r12, r1
    1516:	d1 04       	cpc	r13, r1
    1518:	09 f0       	breq	.+2      	; 0x151c <dir_next+0x54>
    151a:	d6 c0       	rjmp	.+428    	; 0x16c8 <dir_next+0x200>
    151c:	ef ef       	ldi	r30, 0xFF	; 255
    151e:	8e 1a       	sub	r8, r30
    1520:	9e 0a       	sbc	r9, r30
    1522:	ae 0a       	sbc	r10, r30
    1524:	be 0a       	sbc	r11, r30
    1526:	dc 01       	movw	r26, r24
    1528:	1e 96       	adiw	r26, 0x0e	; 14
    152a:	8d 92       	st	X+, r8
    152c:	9d 92       	st	X+, r9
    152e:	ad 92       	st	X+, r10
    1530:	bc 92       	st	X, r11
    1532:	51 97       	sbiw	r26, 0x11	; 17
    1534:	1a 96       	adiw	r26, 0x0a	; 10
    1536:	4d 91       	ld	r20, X+
    1538:	5d 91       	ld	r21, X+
    153a:	6d 91       	ld	r22, X+
    153c:	7c 91       	ld	r23, X
    153e:	1d 97       	sbiw	r26, 0x0d	; 13
    1540:	41 15       	cp	r20, r1
    1542:	51 05       	cpc	r21, r1
    1544:	61 05       	cpc	r22, r1
    1546:	71 05       	cpc	r23, r1
    1548:	49 f4       	brne	.+18     	; 0x155c <dir_next+0x94>
    154a:	ed 91       	ld	r30, X+
    154c:	fc 91       	ld	r31, X
    154e:	80 85       	ldd	r24, Z+8	; 0x08
    1550:	91 85       	ldd	r25, Z+9	; 0x09
    1552:	c8 17       	cp	r28, r24
    1554:	d9 07       	cpc	r29, r25
    1556:	08 f0       	brcs	.+2      	; 0x155a <dir_next+0x92>
    1558:	d1 c0       	rjmp	.+418    	; 0x16fc <dir_next+0x234>
    155a:	b6 c0       	rjmp	.+364    	; 0x16c8 <dir_next+0x200>
    155c:	dc 01       	movw	r26, r24
    155e:	ed 91       	ld	r30, X+
    1560:	fc 91       	ld	r31, X
    1562:	22 81       	ldd	r18, Z+2	; 0x02
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	21 50       	subi	r18, 0x01	; 1
    1568:	31 09       	sbc	r19, r1
    156a:	ce 01       	movw	r24, r28
    156c:	92 95       	swap	r25
    156e:	82 95       	swap	r24
    1570:	8f 70       	andi	r24, 0x0F	; 15
    1572:	89 27       	eor	r24, r25
    1574:	9f 70       	andi	r25, 0x0F	; 15
    1576:	89 27       	eor	r24, r25
    1578:	28 23       	and	r18, r24
    157a:	39 23       	and	r19, r25
    157c:	23 2b       	or	r18, r19
    157e:	09 f0       	breq	.+2      	; 0x1582 <dir_next+0xba>
    1580:	a3 c0       	rjmp	.+326    	; 0x16c8 <dir_next+0x200>
    1582:	cf 01       	movw	r24, r30
    1584:	0e 94 b2 06 	call	0xd64	; 0xd64 <get_fat>
    1588:	4b 01       	movw	r8, r22
    158a:	5c 01       	movw	r10, r24
    158c:	62 30       	cpi	r22, 0x02	; 2
    158e:	71 05       	cpc	r23, r1
    1590:	81 05       	cpc	r24, r1
    1592:	91 05       	cpc	r25, r1
    1594:	08 f4       	brcc	.+2      	; 0x1598 <dir_next+0xd0>
    1596:	b4 c0       	rjmp	.+360    	; 0x1700 <dir_next+0x238>
    1598:	6f 3f       	cpi	r22, 0xFF	; 255
    159a:	7f 4f       	sbci	r23, 0xFF	; 255
    159c:	8f 4f       	sbci	r24, 0xFF	; 255
    159e:	9f 4f       	sbci	r25, 0xFF	; 255
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <dir_next+0xdc>
    15a2:	b0 c0       	rjmp	.+352    	; 0x1704 <dir_next+0x23c>
    15a4:	d8 01       	movw	r26, r16
    15a6:	ed 91       	ld	r30, X+
    15a8:	fc 91       	ld	r31, X
    15aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    15ac:	93 8d       	ldd	r25, Z+27	; 0x1b
    15ae:	a4 8d       	ldd	r26, Z+28	; 0x1c
    15b0:	b5 8d       	ldd	r27, Z+29	; 0x1d
    15b2:	88 16       	cp	r8, r24
    15b4:	99 06       	cpc	r9, r25
    15b6:	aa 06       	cpc	r10, r26
    15b8:	bb 06       	cpc	r11, r27
    15ba:	08 f4       	brcc	.+2      	; 0x15be <dir_next+0xf6>
    15bc:	73 c0       	rjmp	.+230    	; 0x16a4 <dir_next+0x1dc>
    15be:	ef 28       	or	r14, r15
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <dir_next+0xfc>
    15c2:	a2 c0       	rjmp	.+324    	; 0x1708 <dir_next+0x240>
    15c4:	d8 01       	movw	r26, r16
    15c6:	1a 96       	adiw	r26, 0x0a	; 10
    15c8:	4d 91       	ld	r20, X+
    15ca:	5d 91       	ld	r21, X+
    15cc:	6d 91       	ld	r22, X+
    15ce:	7c 91       	ld	r23, X
    15d0:	1d 97       	sbiw	r26, 0x0d	; 13
    15d2:	cf 01       	movw	r24, r30
    15d4:	0e 94 6d 09 	call	0x12da	; 0x12da <create_chain>
    15d8:	4b 01       	movw	r8, r22
    15da:	5c 01       	movw	r10, r24
    15dc:	61 15       	cp	r22, r1
    15de:	71 05       	cpc	r23, r1
    15e0:	81 05       	cpc	r24, r1
    15e2:	91 05       	cpc	r25, r1
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <dir_next+0x120>
    15e6:	92 c0       	rjmp	.+292    	; 0x170c <dir_next+0x244>
    15e8:	61 30       	cpi	r22, 0x01	; 1
    15ea:	71 05       	cpc	r23, r1
    15ec:	81 05       	cpc	r24, r1
    15ee:	91 05       	cpc	r25, r1
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <dir_next+0x12c>
    15f2:	8e c0       	rjmp	.+284    	; 0x1710 <dir_next+0x248>
    15f4:	6f 3f       	cpi	r22, 0xFF	; 255
    15f6:	7f 4f       	sbci	r23, 0xFF	; 255
    15f8:	8f 4f       	sbci	r24, 0xFF	; 255
    15fa:	9f 4f       	sbci	r25, 0xFF	; 255
    15fc:	09 f4       	brne	.+2      	; 0x1600 <dir_next+0x138>
    15fe:	8a c0       	rjmp	.+276    	; 0x1714 <dir_next+0x24c>
    1600:	40 e0       	ldi	r20, 0x00	; 0
    1602:	50 e0       	ldi	r21, 0x00	; 0
    1604:	ba 01       	movw	r22, r20
    1606:	d8 01       	movw	r26, r16
    1608:	8d 91       	ld	r24, X+
    160a:	9c 91       	ld	r25, X
    160c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    1610:	81 11       	cpse	r24, r1
    1612:	82 c0       	rjmp	.+260    	; 0x1718 <dir_next+0x250>
    1614:	f8 01       	movw	r30, r16
    1616:	80 81       	ld	r24, Z
    1618:	91 81       	ldd	r25, Z+1	; 0x01
    161a:	fc 01       	movw	r30, r24
    161c:	f2 96       	adiw	r30, 0x32	; 50
    161e:	8e 5c       	subi	r24, 0xCE	; 206
    1620:	9d 4f       	sbci	r25, 0xFD	; 253
    1622:	11 92       	st	Z+, r1
    1624:	e8 17       	cp	r30, r24
    1626:	f9 07       	cpc	r31, r25
    1628:	e1 f7       	brne	.-8      	; 0x1622 <dir_next+0x15a>
    162a:	d8 01       	movw	r26, r16
    162c:	ed 90       	ld	r14, X+
    162e:	fc 90       	ld	r15, X
    1630:	b5 01       	movw	r22, r10
    1632:	a4 01       	movw	r20, r8
    1634:	c7 01       	movw	r24, r14
    1636:	0e 94 8a 06 	call	0xd14	; 0xd14 <clust2sect>
    163a:	f7 01       	movw	r30, r14
    163c:	66 a7       	std	Z+46, r22	; 0x2e
    163e:	77 a7       	std	Z+47, r23	; 0x2f
    1640:	80 ab       	std	Z+48, r24	; 0x30
    1642:	91 ab       	std	Z+49, r25	; 0x31
    1644:	f1 2c       	mov	r15, r1
    1646:	ee 24       	eor	r14, r14
    1648:	e3 94       	inc	r14
    164a:	1a c0       	rjmp	.+52     	; 0x1680 <dir_next+0x1b8>
    164c:	e4 82       	std	Z+4, r14	; 0x04
    164e:	40 e0       	ldi	r20, 0x00	; 0
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	ba 01       	movw	r22, r20
    1654:	d8 01       	movw	r26, r16
    1656:	8d 91       	ld	r24, X+
    1658:	9c 91       	ld	r25, X
    165a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    165e:	81 11       	cpse	r24, r1
    1660:	5d c0       	rjmp	.+186    	; 0x171c <dir_next+0x254>
    1662:	d8 01       	movw	r26, r16
    1664:	ed 91       	ld	r30, X+
    1666:	fc 91       	ld	r31, X
    1668:	86 a5       	ldd	r24, Z+46	; 0x2e
    166a:	97 a5       	ldd	r25, Z+47	; 0x2f
    166c:	a0 a9       	ldd	r26, Z+48	; 0x30
    166e:	b1 a9       	ldd	r27, Z+49	; 0x31
    1670:	01 96       	adiw	r24, 0x01	; 1
    1672:	a1 1d       	adc	r26, r1
    1674:	b1 1d       	adc	r27, r1
    1676:	86 a7       	std	Z+46, r24	; 0x2e
    1678:	97 a7       	std	Z+47, r25	; 0x2f
    167a:	a0 ab       	std	Z+48, r26	; 0x30
    167c:	b1 ab       	std	Z+49, r27	; 0x31
    167e:	f3 94       	inc	r15
    1680:	d8 01       	movw	r26, r16
    1682:	ed 91       	ld	r30, X+
    1684:	fc 91       	ld	r31, X
    1686:	82 81       	ldd	r24, Z+2	; 0x02
    1688:	f8 16       	cp	r15, r24
    168a:	00 f3       	brcs	.-64     	; 0x164c <dir_next+0x184>
    168c:	86 a5       	ldd	r24, Z+46	; 0x2e
    168e:	97 a5       	ldd	r25, Z+47	; 0x2f
    1690:	a0 a9       	ldd	r26, Z+48	; 0x30
    1692:	b1 a9       	ldd	r27, Z+49	; 0x31
    1694:	8f 19       	sub	r24, r15
    1696:	91 09       	sbc	r25, r1
    1698:	a1 09       	sbc	r26, r1
    169a:	b1 09       	sbc	r27, r1
    169c:	86 a7       	std	Z+46, r24	; 0x2e
    169e:	97 a7       	std	Z+47, r25	; 0x2f
    16a0:	a0 ab       	std	Z+48, r26	; 0x30
    16a2:	b1 ab       	std	Z+49, r27	; 0x31
    16a4:	f8 01       	movw	r30, r16
    16a6:	82 86       	std	Z+10, r8	; 0x0a
    16a8:	93 86       	std	Z+11, r9	; 0x0b
    16aa:	a4 86       	std	Z+12, r10	; 0x0c
    16ac:	b5 86       	std	Z+13, r11	; 0x0d
    16ae:	b5 01       	movw	r22, r10
    16b0:	a4 01       	movw	r20, r8
    16b2:	80 81       	ld	r24, Z
    16b4:	91 81       	ldd	r25, Z+1	; 0x01
    16b6:	0e 94 8a 06 	call	0xd14	; 0xd14 <clust2sect>
    16ba:	d8 01       	movw	r26, r16
    16bc:	1e 96       	adiw	r26, 0x0e	; 14
    16be:	6d 93       	st	X+, r22
    16c0:	7d 93       	st	X+, r23
    16c2:	8d 93       	st	X+, r24
    16c4:	9c 93       	st	X, r25
    16c6:	51 97       	sbiw	r26, 0x11	; 17
    16c8:	f8 01       	movw	r30, r16
    16ca:	d5 83       	std	Z+5, r29	; 0x05
    16cc:	c4 83       	std	Z+4, r28	; 0x04
    16ce:	80 81       	ld	r24, Z
    16d0:	91 81       	ldd	r25, Z+1	; 0x01
    16d2:	c2 96       	adiw	r24, 0x32	; 50
    16d4:	cc 0c       	add	r12, r12
    16d6:	dd 1c       	adc	r13, r13
    16d8:	cc 0c       	add	r12, r12
    16da:	dd 1c       	adc	r13, r13
    16dc:	cc 0c       	add	r12, r12
    16de:	dd 1c       	adc	r13, r13
    16e0:	cc 0c       	add	r12, r12
    16e2:	dd 1c       	adc	r13, r13
    16e4:	cc 0c       	add	r12, r12
    16e6:	dd 1c       	adc	r13, r13
    16e8:	c8 0e       	add	r12, r24
    16ea:	d9 1e       	adc	r13, r25
    16ec:	d3 8a       	std	Z+19, r13	; 0x13
    16ee:	c2 8a       	std	Z+18, r12	; 0x12
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	15 c0       	rjmp	.+42     	; 0x171e <dir_next+0x256>
    16f4:	84 e0       	ldi	r24, 0x04	; 4
    16f6:	13 c0       	rjmp	.+38     	; 0x171e <dir_next+0x256>
    16f8:	84 e0       	ldi	r24, 0x04	; 4
    16fa:	11 c0       	rjmp	.+34     	; 0x171e <dir_next+0x256>
    16fc:	84 e0       	ldi	r24, 0x04	; 4
    16fe:	0f c0       	rjmp	.+30     	; 0x171e <dir_next+0x256>
    1700:	82 e0       	ldi	r24, 0x02	; 2
    1702:	0d c0       	rjmp	.+26     	; 0x171e <dir_next+0x256>
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	0b c0       	rjmp	.+22     	; 0x171e <dir_next+0x256>
    1708:	84 e0       	ldi	r24, 0x04	; 4
    170a:	09 c0       	rjmp	.+18     	; 0x171e <dir_next+0x256>
    170c:	87 e0       	ldi	r24, 0x07	; 7
    170e:	07 c0       	rjmp	.+14     	; 0x171e <dir_next+0x256>
    1710:	82 e0       	ldi	r24, 0x02	; 2
    1712:	05 c0       	rjmp	.+10     	; 0x171e <dir_next+0x256>
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	03 c0       	rjmp	.+6      	; 0x171e <dir_next+0x256>
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	01 c0       	rjmp	.+2      	; 0x171e <dir_next+0x256>
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	1f 91       	pop	r17
    1724:	0f 91       	pop	r16
    1726:	ff 90       	pop	r15
    1728:	ef 90       	pop	r14
    172a:	df 90       	pop	r13
    172c:	cf 90       	pop	r12
    172e:	bf 90       	pop	r11
    1730:	af 90       	pop	r10
    1732:	9f 90       	pop	r9
    1734:	8f 90       	pop	r8
    1736:	08 95       	ret

00001738 <follow_path>:
    1738:	2f 92       	push	r2
    173a:	3f 92       	push	r3
    173c:	4f 92       	push	r4
    173e:	5f 92       	push	r5
    1740:	6f 92       	push	r6
    1742:	7f 92       	push	r7
    1744:	8f 92       	push	r8
    1746:	9f 92       	push	r9
    1748:	af 92       	push	r10
    174a:	bf 92       	push	r11
    174c:	cf 92       	push	r12
    174e:	df 92       	push	r13
    1750:	ef 92       	push	r14
    1752:	ff 92       	push	r15
    1754:	0f 93       	push	r16
    1756:	1f 93       	push	r17
    1758:	cf 93       	push	r28
    175a:	df 93       	push	r29
    175c:	00 d0       	rcall	.+0      	; 0x175e <follow_path+0x26>
    175e:	00 d0       	rcall	.+0      	; 0x1760 <follow_path+0x28>
    1760:	1f 92       	push	r1
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	9a 83       	std	Y+2, r25	; 0x02
    1768:	89 83       	std	Y+1, r24	; 0x01
    176a:	4b 01       	movw	r8, r22
    176c:	db 01       	movw	r26, r22
    176e:	8c 91       	ld	r24, X
    1770:	8f 32       	cpi	r24, 0x2F	; 47
    1772:	11 f0       	breq	.+4      	; 0x1778 <follow_path+0x40>
    1774:	8c 35       	cpi	r24, 0x5C	; 92
    1776:	51 f4       	brne	.+20     	; 0x178c <follow_path+0x54>
    1778:	bf ef       	ldi	r27, 0xFF	; 255
    177a:	8b 1a       	sub	r8, r27
    177c:	9b 0a       	sbc	r9, r27
    177e:	e9 81       	ldd	r30, Y+1	; 0x01
    1780:	fa 81       	ldd	r31, Y+2	; 0x02
    1782:	16 82       	std	Z+6, r1	; 0x06
    1784:	17 82       	std	Z+7, r1	; 0x07
    1786:	10 86       	std	Z+8, r1	; 0x08
    1788:	11 86       	std	Z+9, r1	; 0x09
    178a:	0e c0       	rjmp	.+28     	; 0x17a8 <follow_path+0x70>
    178c:	a9 81       	ldd	r26, Y+1	; 0x01
    178e:	ba 81       	ldd	r27, Y+2	; 0x02
    1790:	ed 91       	ld	r30, X+
    1792:	fc 91       	ld	r31, X
    1794:	86 89       	ldd	r24, Z+22	; 0x16
    1796:	97 89       	ldd	r25, Z+23	; 0x17
    1798:	a0 8d       	ldd	r26, Z+24	; 0x18
    179a:	b1 8d       	ldd	r27, Z+25	; 0x19
    179c:	e9 81       	ldd	r30, Y+1	; 0x01
    179e:	fa 81       	ldd	r31, Y+2	; 0x02
    17a0:	86 83       	std	Z+6, r24	; 0x06
    17a2:	97 83       	std	Z+7, r25	; 0x07
    17a4:	a0 87       	std	Z+8, r26	; 0x08
    17a6:	b1 87       	std	Z+9, r27	; 0x09
    17a8:	d4 01       	movw	r26, r8
    17aa:	8c 91       	ld	r24, X
    17ac:	80 32       	cpi	r24, 0x20	; 32
    17ae:	58 f4       	brcc	.+22     	; 0x17c6 <follow_path+0x8e>
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	9a 81       	ldd	r25, Y+2	; 0x02
    17b8:	0e 94 95 07 	call	0xf2a	; 0xf2a <dir_sdi>
    17bc:	e9 81       	ldd	r30, Y+1	; 0x01
    17be:	fa 81       	ldd	r31, Y+2	; 0x02
    17c0:	13 8a       	std	Z+19, r1	; 0x13
    17c2:	12 8a       	std	Z+18, r1	; 0x12
    17c4:	6b c1       	rjmp	.+726    	; 0x1a9c <follow_path+0x364>
    17c6:	10 e2       	ldi	r17, 0x20	; 32
    17c8:	0f 2e       	mov	r0, r31
    17ca:	fe e2       	ldi	r31, 0x2E	; 46
    17cc:	7f 2e       	mov	r7, r31
    17ce:	f0 2d       	mov	r31, r0
    17d0:	00 e0       	ldi	r16, 0x00	; 0
    17d2:	b1 2c       	mov	r11, r1
    17d4:	68 94       	set
    17d6:	66 24       	eor	r6, r6
    17d8:	63 f8       	bld	r6, 3
    17da:	51 2c       	mov	r5, r1
    17dc:	36 2c       	mov	r3, r6
    17de:	25 2c       	mov	r2, r5
    17e0:	0f 2e       	mov	r0, r31
    17e2:	fb e0       	ldi	r31, 0x0B	; 11
    17e4:	4f 2e       	mov	r4, r31
    17e6:	f0 2d       	mov	r31, r0
    17e8:	29 81       	ldd	r18, Y+1	; 0x01
    17ea:	3a 81       	ldd	r19, Y+2	; 0x02
    17ec:	3c 83       	std	Y+4, r19	; 0x04
    17ee:	2b 83       	std	Y+3, r18	; 0x03
    17f0:	eb 81       	ldd	r30, Y+3	; 0x03
    17f2:	fc 81       	ldd	r31, Y+4	; 0x04
    17f4:	a4 89       	ldd	r26, Z+20	; 0x14
    17f6:	b5 89       	ldd	r27, Z+21	; 0x15
    17f8:	fd 01       	movw	r30, r26
    17fa:	cd 01       	movw	r24, r26
    17fc:	0b 96       	adiw	r24, 0x0b	; 11
    17fe:	11 93       	st	Z+, r17
    1800:	e8 17       	cp	r30, r24
    1802:	f9 07       	cpc	r31, r25
    1804:	e1 f7       	brne	.-8      	; 0x17fe <follow_path+0xc6>
    1806:	f4 01       	movw	r30, r8
    1808:	80 81       	ld	r24, Z
    180a:	8e 32       	cpi	r24, 0x2E	; 46
    180c:	61 f0       	breq	.+24     	; 0x1826 <follow_path+0xee>
    180e:	74 01       	movw	r14, r8
    1810:	40 2f       	mov	r20, r16
    1812:	5b 2d       	mov	r21, r11
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	70 e0       	ldi	r23, 0x00	; 0
    1818:	c6 2c       	mov	r12, r6
    181a:	d5 2c       	mov	r13, r5
    181c:	a1 2c       	mov	r10, r1
    181e:	ba 83       	std	Y+2, r27	; 0x02
    1820:	a9 83       	std	Y+1, r26	; 0x01
    1822:	ad 82       	std	Y+5, r10	; 0x05
    1824:	1e c0       	rjmp	.+60     	; 0x1862 <follow_path+0x12a>
    1826:	7c 92       	st	X, r7
    1828:	f4 01       	movw	r30, r8
    182a:	81 81       	ldd	r24, Z+1	; 0x01
    182c:	8e 32       	cpi	r24, 0x2E	; 46
    182e:	51 f4       	brne	.+20     	; 0x1844 <follow_path+0x10c>
    1830:	11 96       	adiw	r26, 0x01	; 1
    1832:	7c 92       	st	X, r7
    1834:	11 97       	sbiw	r26, 0x01	; 1
    1836:	82 81       	ldd	r24, Z+2	; 0x02
    1838:	8e 32       	cpi	r24, 0x2E	; 46
    183a:	09 f4       	brne	.+2      	; 0x183e <follow_path+0x106>
    183c:	75 c0       	rjmp	.+234    	; 0x1928 <follow_path+0x1f0>
    183e:	23 e0       	ldi	r18, 0x03	; 3
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <follow_path+0x110>
    1844:	22 e0       	ldi	r18, 0x02	; 2
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	8f 32       	cpi	r24, 0x2F	; 47
    184a:	09 f4       	brne	.+2      	; 0x184e <follow_path+0x116>
    184c:	d6 c0       	rjmp	.+428    	; 0x19fa <follow_path+0x2c2>
    184e:	8c 35       	cpi	r24, 0x5C	; 92
    1850:	09 f4       	brne	.+2      	; 0x1854 <follow_path+0x11c>
    1852:	d3 c0       	rjmp	.+422    	; 0x19fa <follow_path+0x2c2>
    1854:	81 32       	cpi	r24, 0x21	; 33
    1856:	08 f4       	brcc	.+2      	; 0x185a <follow_path+0x122>
    1858:	d4 c0       	rjmp	.+424    	; 0x1a02 <follow_path+0x2ca>
    185a:	f4 c0       	rjmp	.+488    	; 0x1a44 <follow_path+0x30c>
    185c:	1b 96       	adiw	r26, 0x0b	; 11
    185e:	8c 93       	st	X, r24
    1860:	f3 c0       	rjmp	.+486    	; 0x1a48 <follow_path+0x310>
    1862:	6f 5f       	subi	r22, 0xFF	; 255
    1864:	7f 4f       	sbci	r23, 0xFF	; 255
    1866:	f7 01       	movw	r30, r14
    1868:	b1 91       	ld	r27, Z+
    186a:	7f 01       	movw	r14, r30
    186c:	b1 32       	cpi	r27, 0x21	; 33
    186e:	08 f4       	brcc	.+2      	; 0x1872 <follow_path+0x13a>
    1870:	e2 c0       	rjmp	.+452    	; 0x1a36 <follow_path+0x2fe>
    1872:	bf 32       	cpi	r27, 0x2F	; 47
    1874:	09 f4       	brne	.+2      	; 0x1878 <follow_path+0x140>
    1876:	d8 c0       	rjmp	.+432    	; 0x1a28 <follow_path+0x2f0>
    1878:	bc 35       	cpi	r27, 0x5C	; 92
    187a:	09 f4       	brne	.+2      	; 0x187e <follow_path+0x146>
    187c:	d5 c0       	rjmp	.+426    	; 0x1a28 <follow_path+0x2f0>
    187e:	be 32       	cpi	r27, 0x2E	; 46
    1880:	09 f4       	brne	.+2      	; 0x1884 <follow_path+0x14c>
    1882:	06 c1       	rjmp	.+524    	; 0x1a90 <follow_path+0x358>
    1884:	4c 15       	cp	r20, r12
    1886:	5d 05       	cpc	r21, r13
    1888:	08 f0       	brcs	.+2      	; 0x188c <follow_path+0x154>
    188a:	dc c0       	rjmp	.+440    	; 0x1a44 <follow_path+0x30c>
    188c:	09 c0       	rjmp	.+18     	; 0x18a0 <follow_path+0x168>
    188e:	fd 81       	ldd	r31, Y+5	; 0x05
    1890:	ff 0f       	add	r31, r31
    1892:	ff 0f       	add	r31, r31
    1894:	fd 83       	std	Y+5, r31	; 0x05
    1896:	43 2d       	mov	r20, r3
    1898:	52 2d       	mov	r21, r2
    189a:	c4 2c       	mov	r12, r4
    189c:	d1 2c       	mov	r13, r1
    189e:	e1 cf       	rjmp	.-62     	; 0x1862 <follow_path+0x12a>
    18a0:	bb 23       	and	r27, r27
    18a2:	0c f0       	brlt	.+2      	; 0x18a6 <follow_path+0x16e>
    18a4:	b2 c0       	rjmp	.+356    	; 0x1a0a <follow_path+0x2d2>
    18a6:	2d 81       	ldd	r18, Y+5	; 0x05
    18a8:	23 60       	ori	r18, 0x03	; 3
    18aa:	2d 83       	std	Y+5, r18	; 0x05
    18ac:	eb 2f       	mov	r30, r27
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	ed 5c       	subi	r30, 0xCD	; 205
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	b0 81       	ld	r27, Z
    18b6:	a9 c0       	rjmp	.+338    	; 0x1a0a <follow_path+0x2d2>
    18b8:	81 91       	ld	r24, Z+
    18ba:	88 23       	and	r24, r24
    18bc:	09 f4       	brne	.+2      	; 0x18c0 <follow_path+0x188>
    18be:	ae c0       	rjmp	.+348    	; 0x1a1c <follow_path+0x2e4>
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	28 17       	cp	r18, r24
    18c4:	39 07       	cpc	r19, r25
    18c6:	c1 f7       	brne	.-16     	; 0x18b8 <follow_path+0x180>
    18c8:	2f c0       	rjmp	.+94     	; 0x1928 <follow_path+0x1f0>
    18ca:	3d 81       	ldd	r19, Y+5	; 0x05
    18cc:	32 60       	ori	r19, 0x02	; 2
    18ce:	3d 83       	std	Y+5, r19	; 0x05
    18d0:	08 c0       	rjmp	.+16     	; 0x18e2 <follow_path+0x1aa>
    18d2:	8f e9       	ldi	r24, 0x9F	; 159
    18d4:	8b 0f       	add	r24, r27
    18d6:	8a 31       	cpi	r24, 0x1A	; 26
    18d8:	20 f4       	brcc	.+8      	; 0x18e2 <follow_path+0x1aa>
    18da:	8d 81       	ldd	r24, Y+5	; 0x05
    18dc:	81 60       	ori	r24, 0x01	; 1
    18de:	8d 83       	std	Y+5, r24	; 0x05
    18e0:	b0 52       	subi	r27, 0x20	; 32
    18e2:	e9 81       	ldd	r30, Y+1	; 0x01
    18e4:	fa 81       	ldd	r31, Y+2	; 0x02
    18e6:	e4 0f       	add	r30, r20
    18e8:	f5 1f       	adc	r31, r21
    18ea:	b0 83       	st	Z, r27
    18ec:	4f 5f       	subi	r20, 0xFF	; 255
    18ee:	5f 4f       	sbci	r21, 0xFF	; 255
    18f0:	b8 cf       	rjmp	.-144    	; 0x1862 <follow_path+0x12a>
    18f2:	45 2b       	or	r20, r21
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <follow_path+0x1c0>
    18f6:	a6 c0       	rjmp	.+332    	; 0x1a44 <follow_path+0x30c>
    18f8:	9c 91       	ld	r25, X
    18fa:	95 3e       	cpi	r25, 0xE5	; 229
    18fc:	11 f4       	brne	.+4      	; 0x1902 <follow_path+0x1ca>
    18fe:	95 e0       	ldi	r25, 0x05	; 5
    1900:	9c 93       	st	X, r25
    1902:	e8 e0       	ldi	r30, 0x08	; 8
    1904:	ce 16       	cp	r12, r30
    1906:	d1 04       	cpc	r13, r1
    1908:	11 f4       	brne	.+4      	; 0x190e <follow_path+0x1d6>
    190a:	aa 0c       	add	r10, r10
    190c:	aa 0c       	add	r10, r10
    190e:	9a 2d       	mov	r25, r10
    1910:	93 70       	andi	r25, 0x03	; 3
    1912:	91 30       	cpi	r25, 0x01	; 1
    1914:	09 f4       	brne	.+2      	; 0x1918 <follow_path+0x1e0>
    1916:	80 61       	ori	r24, 0x10	; 16
    1918:	9a 2d       	mov	r25, r10
    191a:	9c 70       	andi	r25, 0x0C	; 12
    191c:	94 30       	cpi	r25, 0x04	; 4
    191e:	09 f4       	brne	.+2      	; 0x1922 <follow_path+0x1ea>
    1920:	88 60       	ori	r24, 0x08	; 8
    1922:	1b 96       	adiw	r26, 0x0b	; 11
    1924:	8c 93       	st	X, r24
    1926:	90 c0       	rjmp	.+288    	; 0x1a48 <follow_path+0x310>
    1928:	86 e0       	ldi	r24, 0x06	; 6
    192a:	b8 c0       	rjmp	.+368    	; 0x1a9c <follow_path+0x364>
    192c:	ab 81       	ldd	r26, Y+3	; 0x03
    192e:	bc 81       	ldd	r27, Y+4	; 0x04
    1930:	1e 96       	adiw	r26, 0x0e	; 14
    1932:	4d 91       	ld	r20, X+
    1934:	5d 91       	ld	r21, X+
    1936:	6d 91       	ld	r22, X+
    1938:	7c 91       	ld	r23, X
    193a:	51 97       	sbiw	r26, 0x11	; 17
    193c:	8d 91       	ld	r24, X+
    193e:	9c 91       	ld	r25, X
    1940:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    1944:	81 11       	cpse	r24, r1
    1946:	99 c0       	rjmp	.+306    	; 0x1a7a <follow_path+0x342>
    1948:	eb 81       	ldd	r30, Y+3	; 0x03
    194a:	fc 81       	ldd	r31, Y+4	; 0x04
    194c:	42 89       	ldd	r20, Z+18	; 0x12
    194e:	53 89       	ldd	r21, Z+19	; 0x13
    1950:	da 01       	movw	r26, r20
    1952:	9c 91       	ld	r25, X
    1954:	99 23       	and	r25, r25
    1956:	09 f4       	brne	.+2      	; 0x195a <follow_path+0x222>
    1958:	81 c0       	rjmp	.+258    	; 0x1a5c <follow_path+0x324>
    195a:	1b 96       	adiw	r26, 0x0b	; 11
    195c:	ec 90       	ld	r14, X
    195e:	e3 fc       	sbrc	r14, 3
    1960:	11 c0       	rjmp	.+34     	; 0x1984 <follow_path+0x24c>
    1962:	64 89       	ldd	r22, Z+20	; 0x14
    1964:	75 89       	ldd	r23, Z+21	; 0x15
    1966:	fa 01       	movw	r30, r20
    1968:	db 01       	movw	r26, r22
    196a:	6a 01       	movw	r12, r20
    196c:	2b e0       	ldi	r18, 0x0B	; 11
    196e:	c2 0e       	add	r12, r18
    1970:	d1 1c       	adc	r13, r1
    1972:	04 c0       	rjmp	.+8      	; 0x197c <follow_path+0x244>
    1974:	ec 15       	cp	r30, r12
    1976:	fd 05       	cpc	r31, r13
    1978:	09 f4       	brne	.+2      	; 0x197c <follow_path+0x244>
    197a:	79 c0       	rjmp	.+242    	; 0x1a6e <follow_path+0x336>
    197c:	21 91       	ld	r18, Z+
    197e:	9d 91       	ld	r25, X+
    1980:	29 17       	cp	r18, r25
    1982:	c1 f3       	breq	.-16     	; 0x1974 <follow_path+0x23c>
    1984:	60 2f       	mov	r22, r16
    1986:	7b 2d       	mov	r23, r11
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	9c 81       	ldd	r25, Y+4	; 0x04
    198c:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <dir_next>
    1990:	88 23       	and	r24, r24
    1992:	61 f2       	breq	.-104    	; 0x192c <follow_path+0x1f4>
    1994:	72 c0       	rjmp	.+228    	; 0x1a7a <follow_path+0x342>
    1996:	95 ff       	sbrs	r25, 5
    1998:	0c c0       	rjmp	.+24     	; 0x19b2 <follow_path+0x27a>
    199a:	eb 81       	ldd	r30, Y+3	; 0x03
    199c:	fc 81       	ldd	r31, Y+4	; 0x04
    199e:	16 82       	std	Z+6, r1	; 0x06
    19a0:	17 82       	std	Z+7, r1	; 0x07
    19a2:	10 86       	std	Z+8, r1	; 0x08
    19a4:	11 86       	std	Z+9, r1	; 0x09
    19a6:	13 8a       	std	Z+19, r1	; 0x13
    19a8:	12 8a       	std	Z+18, r1	; 0x12
    19aa:	92 ff       	sbrs	r25, 2
    19ac:	21 cf       	rjmp	.-446    	; 0x17f0 <follow_path+0xb8>
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	75 c0       	rjmp	.+234    	; 0x1a9c <follow_path+0x364>
    19b2:	92 fd       	sbrc	r25, 2
    19b4:	1e c0       	rjmp	.+60     	; 0x19f2 <follow_path+0x2ba>
    19b6:	85 e0       	ldi	r24, 0x05	; 5
    19b8:	71 c0       	rjmp	.+226    	; 0x1a9c <follow_path+0x364>
    19ba:	e4 fe       	sbrs	r14, 4
    19bc:	1c c0       	rjmp	.+56     	; 0x19f6 <follow_path+0x2be>
    19be:	da 01       	movw	r26, r20
    19c0:	54 96       	adiw	r26, 0x14	; 20
    19c2:	8d 91       	ld	r24, X+
    19c4:	9c 91       	ld	r25, X
    19c6:	55 97       	sbiw	r26, 0x15	; 21
    19c8:	a0 e0       	ldi	r26, 0x00	; 0
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	dc 01       	movw	r26, r24
    19ce:	99 27       	eor	r25, r25
    19d0:	88 27       	eor	r24, r24
    19d2:	fa 01       	movw	r30, r20
    19d4:	42 8d       	ldd	r20, Z+26	; 0x1a
    19d6:	53 8d       	ldd	r21, Z+27	; 0x1b
    19d8:	60 e0       	ldi	r22, 0x00	; 0
    19da:	70 e0       	ldi	r23, 0x00	; 0
    19dc:	84 2b       	or	r24, r20
    19de:	95 2b       	or	r25, r21
    19e0:	a6 2b       	or	r26, r22
    19e2:	b7 2b       	or	r27, r23
    19e4:	eb 81       	ldd	r30, Y+3	; 0x03
    19e6:	fc 81       	ldd	r31, Y+4	; 0x04
    19e8:	86 83       	std	Z+6, r24	; 0x06
    19ea:	97 83       	std	Z+7, r25	; 0x07
    19ec:	a0 87       	std	Z+8, r26	; 0x08
    19ee:	b1 87       	std	Z+9, r27	; 0x09
    19f0:	ff ce       	rjmp	.-514    	; 0x17f0 <follow_path+0xb8>
    19f2:	84 e0       	ldi	r24, 0x04	; 4
    19f4:	53 c0       	rjmp	.+166    	; 0x1a9c <follow_path+0x364>
    19f6:	85 e0       	ldi	r24, 0x05	; 5
    19f8:	51 c0       	rjmp	.+162    	; 0x1a9c <follow_path+0x364>
    19fa:	82 0e       	add	r8, r18
    19fc:	93 1e       	adc	r9, r19
    19fe:	81 2f       	mov	r24, r17
    1a00:	2d cf       	rjmp	.-422    	; 0x185c <follow_path+0x124>
    1a02:	82 0e       	add	r8, r18
    1a04:	93 1e       	adc	r9, r19
    1a06:	84 e2       	ldi	r24, 0x24	; 36
    1a08:	29 cf       	rjmp	.-430    	; 0x185c <follow_path+0x124>
    1a0a:	2b 2f       	mov	r18, r27
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	22 32       	cpi	r18, 0x22	; 34
    1a10:	31 05       	cpc	r19, r1
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <follow_path+0x2de>
    1a14:	89 cf       	rjmp	.-238    	; 0x1928 <follow_path+0x1f0>
    1a16:	e5 ea       	ldi	r30, 0xA5	; 165
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	4e cf       	rjmp	.-356    	; 0x18b8 <follow_path+0x180>
    1a1c:	8f eb       	ldi	r24, 0xBF	; 191
    1a1e:	8b 0f       	add	r24, r27
    1a20:	8a 31       	cpi	r24, 0x1A	; 26
    1a22:	08 f4       	brcc	.+2      	; 0x1a26 <follow_path+0x2ee>
    1a24:	52 cf       	rjmp	.-348    	; 0x18ca <follow_path+0x192>
    1a26:	55 cf       	rjmp	.-342    	; 0x18d2 <follow_path+0x19a>
    1a28:	a9 81       	ldd	r26, Y+1	; 0x01
    1a2a:	ba 81       	ldd	r27, Y+2	; 0x02
    1a2c:	ad 80       	ldd	r10, Y+5	; 0x05
    1a2e:	86 0e       	add	r8, r22
    1a30:	97 1e       	adc	r9, r23
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	5e cf       	rjmp	.-324    	; 0x18f2 <follow_path+0x1ba>
    1a36:	a9 81       	ldd	r26, Y+1	; 0x01
    1a38:	ba 81       	ldd	r27, Y+2	; 0x02
    1a3a:	ad 80       	ldd	r10, Y+5	; 0x05
    1a3c:	86 0e       	add	r8, r22
    1a3e:	97 1e       	adc	r9, r23
    1a40:	84 e0       	ldi	r24, 0x04	; 4
    1a42:	57 cf       	rjmp	.-338    	; 0x18f2 <follow_path+0x1ba>
    1a44:	86 e0       	ldi	r24, 0x06	; 6
    1a46:	2a c0       	rjmp	.+84     	; 0x1a9c <follow_path+0x364>
    1a48:	60 2f       	mov	r22, r16
    1a4a:	7b 2d       	mov	r23, r11
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a50:	0e 94 95 07 	call	0xf2a	; 0xf2a <dir_sdi>
    1a54:	88 23       	and	r24, r24
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <follow_path+0x322>
    1a58:	69 cf       	rjmp	.-302    	; 0x192c <follow_path+0x1f4>
    1a5a:	0f c0       	rjmp	.+30     	; 0x1a7a <follow_path+0x342>
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a60:	dc 01       	movw	r26, r24
    1a62:	54 96       	adiw	r26, 0x14	; 20
    1a64:	ed 91       	ld	r30, X+
    1a66:	fc 91       	ld	r31, X
    1a68:	55 97       	sbiw	r26, 0x15	; 21
    1a6a:	93 85       	ldd	r25, Z+11	; 0x0b
    1a6c:	94 cf       	rjmp	.-216    	; 0x1996 <follow_path+0x25e>
    1a6e:	db 01       	movw	r26, r22
    1a70:	1b 96       	adiw	r26, 0x0b	; 11
    1a72:	9c 91       	ld	r25, X
    1a74:	92 ff       	sbrs	r25, 2
    1a76:	a1 cf       	rjmp	.-190    	; 0x19ba <follow_path+0x282>
    1a78:	11 c0       	rjmp	.+34     	; 0x1a9c <follow_path+0x364>
    1a7a:	ab 81       	ldd	r26, Y+3	; 0x03
    1a7c:	bc 81       	ldd	r27, Y+4	; 0x04
    1a7e:	54 96       	adiw	r26, 0x14	; 20
    1a80:	ed 91       	ld	r30, X+
    1a82:	fc 91       	ld	r31, X
    1a84:	55 97       	sbiw	r26, 0x15	; 21
    1a86:	93 85       	ldd	r25, Z+11	; 0x0b
    1a88:	84 30       	cpi	r24, 0x04	; 4
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <follow_path+0x356>
    1a8c:	84 cf       	rjmp	.-248    	; 0x1996 <follow_path+0x25e>
    1a8e:	06 c0       	rjmp	.+12     	; 0x1a9c <follow_path+0x364>
    1a90:	b8 e0       	ldi	r27, 0x08	; 8
    1a92:	cb 16       	cp	r12, r27
    1a94:	d1 04       	cpc	r13, r1
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <follow_path+0x362>
    1a98:	fa ce       	rjmp	.-524    	; 0x188e <follow_path+0x156>
    1a9a:	d4 cf       	rjmp	.-88     	; 0x1a44 <follow_path+0x30c>
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	1f 91       	pop	r17
    1aac:	0f 91       	pop	r16
    1aae:	ff 90       	pop	r15
    1ab0:	ef 90       	pop	r14
    1ab2:	df 90       	pop	r13
    1ab4:	cf 90       	pop	r12
    1ab6:	bf 90       	pop	r11
    1ab8:	af 90       	pop	r10
    1aba:	9f 90       	pop	r9
    1abc:	8f 90       	pop	r8
    1abe:	7f 90       	pop	r7
    1ac0:	6f 90       	pop	r6
    1ac2:	5f 90       	pop	r5
    1ac4:	4f 90       	pop	r4
    1ac6:	3f 90       	pop	r3
    1ac8:	2f 90       	pop	r2
    1aca:	08 95       	ret

00001acc <dir_register>:
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	8c 01       	movw	r16, r24
    1ad4:	60 e0       	ldi	r22, 0x00	; 0
    1ad6:	70 e0       	ldi	r23, 0x00	; 0
    1ad8:	0e 94 95 07 	call	0xf2a	; 0xf2a <dir_sdi>
    1adc:	c8 2f       	mov	r28, r24
    1ade:	81 11       	cpse	r24, r1
    1ae0:	47 c0       	rjmp	.+142    	; 0x1b70 <dir_register+0xa4>
    1ae2:	d8 01       	movw	r26, r16
    1ae4:	1e 96       	adiw	r26, 0x0e	; 14
    1ae6:	4d 91       	ld	r20, X+
    1ae8:	5d 91       	ld	r21, X+
    1aea:	6d 91       	ld	r22, X+
    1aec:	7c 91       	ld	r23, X
    1aee:	51 97       	sbiw	r26, 0x11	; 17
    1af0:	8d 91       	ld	r24, X+
    1af2:	9c 91       	ld	r25, X
    1af4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    1af8:	c8 2f       	mov	r28, r24
    1afa:	81 11       	cpse	r24, r1
    1afc:	39 c0       	rjmp	.+114    	; 0x1b70 <dir_register+0xa4>
    1afe:	d8 01       	movw	r26, r16
    1b00:	52 96       	adiw	r26, 0x12	; 18
    1b02:	ed 91       	ld	r30, X+
    1b04:	fc 91       	ld	r31, X
    1b06:	53 97       	sbiw	r26, 0x13	; 19
    1b08:	80 81       	ld	r24, Z
    1b0a:	85 3e       	cpi	r24, 0xE5	; 229
    1b0c:	29 f1       	breq	.+74     	; 0x1b58 <dir_register+0x8c>
    1b0e:	88 23       	and	r24, r24
    1b10:	19 f1       	breq	.+70     	; 0x1b58 <dir_register+0x8c>
    1b12:	61 e0       	ldi	r22, 0x01	; 1
    1b14:	70 e0       	ldi	r23, 0x00	; 0
    1b16:	c8 01       	movw	r24, r16
    1b18:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <dir_next>
    1b1c:	c8 2f       	mov	r28, r24
    1b1e:	88 23       	and	r24, r24
    1b20:	01 f3       	breq	.-64     	; 0x1ae2 <dir_register+0x16>
    1b22:	26 c0       	rjmp	.+76     	; 0x1b70 <dir_register+0xa4>
    1b24:	f8 01       	movw	r30, r16
    1b26:	82 89       	ldd	r24, Z+18	; 0x12
    1b28:	93 89       	ldd	r25, Z+19	; 0x13
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	9c 01       	movw	r18, r24
    1b2e:	20 5e       	subi	r18, 0xE0	; 224
    1b30:	3f 4f       	sbci	r19, 0xFF	; 255
    1b32:	11 92       	st	Z+, r1
    1b34:	e2 17       	cp	r30, r18
    1b36:	f3 07       	cpc	r31, r19
    1b38:	e1 f7       	brne	.-8      	; 0x1b32 <dir_register+0x66>
    1b3a:	d8 01       	movw	r26, r16
    1b3c:	54 96       	adiw	r26, 0x14	; 20
    1b3e:	6d 91       	ld	r22, X+
    1b40:	7c 91       	ld	r23, X
    1b42:	55 97       	sbiw	r26, 0x15	; 21
    1b44:	4b e0       	ldi	r20, 0x0B	; 11
    1b46:	50 e0       	ldi	r21, 0x00	; 0
    1b48:	0e 94 c5 01 	call	0x38a	; 0x38a <mem_cpy>
    1b4c:	d8 01       	movw	r26, r16
    1b4e:	ed 91       	ld	r30, X+
    1b50:	fc 91       	ld	r31, X
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	84 83       	std	Z+4, r24	; 0x04
    1b56:	0c c0       	rjmp	.+24     	; 0x1b70 <dir_register+0xa4>
    1b58:	f8 01       	movw	r30, r16
    1b5a:	46 85       	ldd	r20, Z+14	; 0x0e
    1b5c:	57 85       	ldd	r21, Z+15	; 0x0f
    1b5e:	60 89       	ldd	r22, Z+16	; 0x10
    1b60:	71 89       	ldd	r23, Z+17	; 0x11
    1b62:	80 81       	ld	r24, Z
    1b64:	91 81       	ldd	r25, Z+1	; 0x01
    1b66:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    1b6a:	c8 2f       	mov	r28, r24
    1b6c:	88 23       	and	r24, r24
    1b6e:	d1 f2       	breq	.-76     	; 0x1b24 <dir_register+0x58>
    1b70:	8c 2f       	mov	r24, r28
    1b72:	cf 91       	pop	r28
    1b74:	1f 91       	pop	r17
    1b76:	0f 91       	pop	r16
    1b78:	08 95       	ret

00001b7a <dir_read>:
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
    1b7e:	ec 01       	movw	r28, r24
    1b80:	84 e0       	ldi	r24, 0x04	; 4
    1b82:	17 c0       	rjmp	.+46     	; 0x1bb2 <dir_read+0x38>
    1b84:	88 81       	ld	r24, Y
    1b86:	99 81       	ldd	r25, Y+1	; 0x01
    1b88:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    1b8c:	81 11       	cpse	r24, r1
    1b8e:	1c c0       	rjmp	.+56     	; 0x1bc8 <dir_read+0x4e>
    1b90:	ea 89       	ldd	r30, Y+18	; 0x12
    1b92:	fb 89       	ldd	r31, Y+19	; 0x13
    1b94:	90 81       	ld	r25, Z
    1b96:	99 23       	and	r25, r25
    1b98:	e1 f0       	breq	.+56     	; 0x1bd2 <dir_read+0x58>
    1b9a:	95 3e       	cpi	r25, 0xE5	; 229
    1b9c:	19 f0       	breq	.+6      	; 0x1ba4 <dir_read+0x2a>
    1b9e:	93 85       	ldd	r25, Z+11	; 0x0b
    1ba0:	93 ff       	sbrs	r25, 3
    1ba2:	19 c0       	rjmp	.+50     	; 0x1bd6 <dir_read+0x5c>
    1ba4:	60 e0       	ldi	r22, 0x00	; 0
    1ba6:	70 e0       	ldi	r23, 0x00	; 0
    1ba8:	ce 01       	movw	r24, r28
    1baa:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <dir_next>
    1bae:	81 11       	cpse	r24, r1
    1bb0:	0b c0       	rjmp	.+22     	; 0x1bc8 <dir_read+0x4e>
    1bb2:	4e 85       	ldd	r20, Y+14	; 0x0e
    1bb4:	5f 85       	ldd	r21, Y+15	; 0x0f
    1bb6:	68 89       	ldd	r22, Y+16	; 0x10
    1bb8:	79 89       	ldd	r23, Y+17	; 0x11
    1bba:	41 15       	cp	r20, r1
    1bbc:	51 05       	cpc	r21, r1
    1bbe:	61 05       	cpc	r22, r1
    1bc0:	71 05       	cpc	r23, r1
    1bc2:	01 f7       	brne	.-64     	; 0x1b84 <dir_read+0xa>
    1bc4:	88 23       	and	r24, r24
    1bc6:	39 f0       	breq	.+14     	; 0x1bd6 <dir_read+0x5c>
    1bc8:	1e 86       	std	Y+14, r1	; 0x0e
    1bca:	1f 86       	std	Y+15, r1	; 0x0f
    1bcc:	18 8a       	std	Y+16, r1	; 0x10
    1bce:	19 8a       	std	Y+17, r1	; 0x11
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <dir_read+0x5c>
    1bd2:	84 e0       	ldi	r24, 0x04	; 4
    1bd4:	f9 cf       	rjmp	.-14     	; 0x1bc8 <dir_read+0x4e>
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	08 95       	ret

00001bdc <remove_chain>:
    1bdc:	7f 92       	push	r7
    1bde:	8f 92       	push	r8
    1be0:	9f 92       	push	r9
    1be2:	af 92       	push	r10
    1be4:	bf 92       	push	r11
    1be6:	cf 92       	push	r12
    1be8:	df 92       	push	r13
    1bea:	ef 92       	push	r14
    1bec:	ff 92       	push	r15
    1bee:	0f 93       	push	r16
    1bf0:	1f 93       	push	r17
    1bf2:	cf 93       	push	r28
    1bf4:	df 93       	push	r29
    1bf6:	ec 01       	movw	r28, r24
    1bf8:	6a 01       	movw	r12, r20
    1bfa:	7b 01       	movw	r14, r22
    1bfc:	42 30       	cpi	r20, 0x02	; 2
    1bfe:	51 05       	cpc	r21, r1
    1c00:	61 05       	cpc	r22, r1
    1c02:	71 05       	cpc	r23, r1
    1c04:	08 f4       	brcc	.+2      	; 0x1c08 <remove_chain+0x2c>
    1c06:	4c c0       	rjmp	.+152    	; 0x1ca0 <remove_chain+0xc4>
    1c08:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c0a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1c0c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1c0e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1c10:	48 17       	cp	r20, r24
    1c12:	59 07       	cpc	r21, r25
    1c14:	6a 07       	cpc	r22, r26
    1c16:	7b 07       	cpc	r23, r27
    1c18:	08 f0       	brcs	.+2      	; 0x1c1c <remove_chain+0x40>
    1c1a:	44 c0       	rjmp	.+136    	; 0x1ca4 <remove_chain+0xc8>
    1c1c:	77 24       	eor	r7, r7
    1c1e:	73 94       	inc	r7
    1c20:	b7 01       	movw	r22, r14
    1c22:	a6 01       	movw	r20, r12
    1c24:	ce 01       	movw	r24, r28
    1c26:	0e 94 b2 06 	call	0xd64	; 0xd64 <get_fat>
    1c2a:	4b 01       	movw	r8, r22
    1c2c:	5c 01       	movw	r10, r24
    1c2e:	67 2b       	or	r22, r23
    1c30:	68 2b       	or	r22, r24
    1c32:	69 2b       	or	r22, r25
    1c34:	c9 f1       	breq	.+114    	; 0x1ca8 <remove_chain+0xcc>
    1c36:	91 e0       	ldi	r25, 0x01	; 1
    1c38:	89 16       	cp	r8, r25
    1c3a:	91 04       	cpc	r9, r1
    1c3c:	a1 04       	cpc	r10, r1
    1c3e:	b1 04       	cpc	r11, r1
    1c40:	a9 f1       	breq	.+106    	; 0x1cac <remove_chain+0xd0>
    1c42:	8f ef       	ldi	r24, 0xFF	; 255
    1c44:	88 16       	cp	r8, r24
    1c46:	98 06       	cpc	r9, r24
    1c48:	a8 06       	cpc	r10, r24
    1c4a:	b8 06       	cpc	r11, r24
    1c4c:	89 f1       	breq	.+98     	; 0x1cb0 <remove_chain+0xd4>
    1c4e:	00 e0       	ldi	r16, 0x00	; 0
    1c50:	10 e0       	ldi	r17, 0x00	; 0
    1c52:	98 01       	movw	r18, r16
    1c54:	b7 01       	movw	r22, r14
    1c56:	a6 01       	movw	r20, r12
    1c58:	ce 01       	movw	r24, r28
    1c5a:	0e 94 4d 08 	call	0x109a	; 0x109a <put_fat>
    1c5e:	81 11       	cpse	r24, r1
    1c60:	28 c0       	rjmp	.+80     	; 0x1cb2 <remove_chain+0xd6>
    1c62:	4e 85       	ldd	r20, Y+14	; 0x0e
    1c64:	5f 85       	ldd	r21, Y+15	; 0x0f
    1c66:	68 89       	ldd	r22, Y+16	; 0x10
    1c68:	79 89       	ldd	r23, Y+17	; 0x11
    1c6a:	4f 3f       	cpi	r20, 0xFF	; 255
    1c6c:	9f ef       	ldi	r25, 0xFF	; 255
    1c6e:	59 07       	cpc	r21, r25
    1c70:	69 07       	cpc	r22, r25
    1c72:	79 07       	cpc	r23, r25
    1c74:	49 f0       	breq	.+18     	; 0x1c88 <remove_chain+0xac>
    1c76:	4f 5f       	subi	r20, 0xFF	; 255
    1c78:	5f 4f       	sbci	r21, 0xFF	; 255
    1c7a:	6f 4f       	sbci	r22, 0xFF	; 255
    1c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7e:	4e 87       	std	Y+14, r20	; 0x0e
    1c80:	5f 87       	std	Y+15, r21	; 0x0f
    1c82:	68 8b       	std	Y+16, r22	; 0x10
    1c84:	79 8b       	std	Y+17, r23	; 0x11
    1c86:	7d 82       	std	Y+5, r7	; 0x05
    1c88:	75 01       	movw	r14, r10
    1c8a:	64 01       	movw	r12, r8
    1c8c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1c8e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1c90:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1c92:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1c94:	84 16       	cp	r8, r20
    1c96:	95 06       	cpc	r9, r21
    1c98:	a6 06       	cpc	r10, r22
    1c9a:	b7 06       	cpc	r11, r23
    1c9c:	08 f2       	brcs	.-126    	; 0x1c20 <remove_chain+0x44>
    1c9e:	09 c0       	rjmp	.+18     	; 0x1cb2 <remove_chain+0xd6>
    1ca0:	82 e0       	ldi	r24, 0x02	; 2
    1ca2:	07 c0       	rjmp	.+14     	; 0x1cb2 <remove_chain+0xd6>
    1ca4:	82 e0       	ldi	r24, 0x02	; 2
    1ca6:	05 c0       	rjmp	.+10     	; 0x1cb2 <remove_chain+0xd6>
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	03 c0       	rjmp	.+6      	; 0x1cb2 <remove_chain+0xd6>
    1cac:	82 e0       	ldi	r24, 0x02	; 2
    1cae:	01 c0       	rjmp	.+2      	; 0x1cb2 <remove_chain+0xd6>
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	1f 91       	pop	r17
    1cb8:	0f 91       	pop	r16
    1cba:	ff 90       	pop	r15
    1cbc:	ef 90       	pop	r14
    1cbe:	df 90       	pop	r13
    1cc0:	cf 90       	pop	r12
    1cc2:	bf 90       	pop	r11
    1cc4:	af 90       	pop	r10
    1cc6:	9f 90       	pop	r9
    1cc8:	8f 90       	pop	r8
    1cca:	7f 90       	pop	r7
    1ccc:	08 95       	ret

00001cce <f_mount>:
    1cce:	81 11       	cpse	r24, r1
    1cd0:	12 c0       	rjmp	.+36     	; 0x1cf6 <f_mount+0x28>
    1cd2:	e0 91 7f 01 	lds	r30, 0x017F	; 0x80017f <FatFs>
    1cd6:	f0 91 80 01 	lds	r31, 0x0180	; 0x800180 <FatFs+0x1>
    1cda:	30 97       	sbiw	r30, 0x00	; 0
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <f_mount+0x12>
    1cde:	10 82       	st	Z, r1
    1ce0:	61 15       	cp	r22, r1
    1ce2:	71 05       	cpc	r23, r1
    1ce4:	11 f0       	breq	.+4      	; 0x1cea <f_mount+0x1c>
    1ce6:	fb 01       	movw	r30, r22
    1ce8:	10 82       	st	Z, r1
    1cea:	70 93 80 01 	sts	0x0180, r23	; 0x800180 <FatFs+0x1>
    1cee:	60 93 7f 01 	sts	0x017F, r22	; 0x80017f <FatFs>
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	08 95       	ret
    1cf6:	8b e0       	ldi	r24, 0x0B	; 11
    1cf8:	08 95       	ret

00001cfa <f_open>:
    1cfa:	4f 92       	push	r4
    1cfc:	5f 92       	push	r5
    1cfe:	6f 92       	push	r6
    1d00:	7f 92       	push	r7
    1d02:	8f 92       	push	r8
    1d04:	9f 92       	push	r9
    1d06:	af 92       	push	r10
    1d08:	bf 92       	push	r11
    1d0a:	cf 92       	push	r12
    1d0c:	df 92       	push	r13
    1d0e:	ef 92       	push	r14
    1d10:	ff 92       	push	r15
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
    1d1e:	a4 97       	sbiw	r28, 0x24	; 36
    1d20:	0f b6       	in	r0, 0x3f	; 63
    1d22:	f8 94       	cli
    1d24:	de bf       	out	0x3e, r29	; 62
    1d26:	0f be       	out	0x3f, r0	; 63
    1d28:	cd bf       	out	0x3d, r28	; 61
    1d2a:	8c 01       	movw	r16, r24
    1d2c:	7c a3       	std	Y+36, r23	; 0x24
    1d2e:	6b a3       	std	Y+35, r22	; 0x23
    1d30:	f4 2e       	mov	r15, r20
    1d32:	dc 01       	movw	r26, r24
    1d34:	1d 92       	st	X+, r1
    1d36:	1c 92       	st	X, r1
    1d38:	b4 2f       	mov	r27, r20
    1d3a:	bf 71       	andi	r27, 0x1F	; 31
    1d3c:	eb 2e       	mov	r14, r27
    1d3e:	4e 71       	andi	r20, 0x1E	; 30
    1d40:	be 01       	movw	r22, r28
    1d42:	6f 5f       	subi	r22, 0xFF	; 255
    1d44:	7f 4f       	sbci	r23, 0xFF	; 255
    1d46:	ce 01       	movw	r24, r28
    1d48:	83 96       	adiw	r24, 0x23	; 35
    1d4a:	0e 94 3f 03 	call	0x67e	; 0x67e <chk_mounted>
    1d4e:	9e 01       	movw	r18, r28
    1d50:	29 5e       	subi	r18, 0xE9	; 233
    1d52:	3f 4f       	sbci	r19, 0xFF	; 255
    1d54:	3e 8b       	std	Y+22, r19	; 0x16
    1d56:	2d 8b       	std	Y+21, r18	; 0x15
    1d58:	81 11       	cpse	r24, r1
    1d5a:	bd c0       	rjmp	.+378    	; 0x1ed6 <f_open+0x1dc>
    1d5c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d5e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d60:	ce 01       	movw	r24, r28
    1d62:	01 96       	adiw	r24, 0x01	; 1
    1d64:	0e 94 9c 0b 	call	0x1738	; 0x1738 <follow_path>
    1d68:	cb 88       	ldd	r12, Y+19	; 0x13
    1d6a:	dc 88       	ldd	r13, Y+20	; 0x14
    1d6c:	81 11       	cpse	r24, r1
    1d6e:	ba c0       	rjmp	.+372    	; 0x1ee4 <f_open+0x1ea>
    1d70:	c1 14       	cp	r12, r1
    1d72:	d1 04       	cpc	r13, r1
    1d74:	09 f0       	breq	.+2      	; 0x1d78 <f_open+0x7e>
    1d76:	c0 c0       	rjmp	.+384    	; 0x1ef8 <f_open+0x1fe>
    1d78:	ba c0       	rjmp	.+372    	; 0x1eee <f_open+0x1f4>
    1d7a:	84 30       	cpi	r24, 0x04	; 4
    1d7c:	21 f4       	brne	.+8      	; 0x1d86 <f_open+0x8c>
    1d7e:	ce 01       	movw	r24, r28
    1d80:	01 96       	adiw	r24, 0x01	; 1
    1d82:	0e 94 66 0d 	call	0x1acc	; 0x1acc <dir_register>
    1d86:	ee 2d       	mov	r30, r14
    1d88:	e8 60       	ori	r30, 0x08	; 8
    1d8a:	ee 2e       	mov	r14, r30
    1d8c:	cb 88       	ldd	r12, Y+19	; 0x13
    1d8e:	dc 88       	ldd	r13, Y+20	; 0x14
    1d90:	88 23       	and	r24, r24
    1d92:	49 f0       	breq	.+18     	; 0x1da6 <f_open+0xac>
    1d94:	cc c0       	rjmp	.+408    	; 0x1f2e <f_open+0x234>
    1d96:	f2 fc       	sbrc	r15, 2
    1d98:	c3 c0       	rjmp	.+390    	; 0x1f20 <f_open+0x226>
    1d9a:	d6 01       	movw	r26, r12
    1d9c:	1b 96       	adiw	r26, 0x0b	; 11
    1d9e:	8c 91       	ld	r24, X
    1da0:	81 71       	andi	r24, 0x11	; 17
    1da2:	09 f0       	breq	.+2      	; 0x1da6 <f_open+0xac>
    1da4:	bf c0       	rjmp	.+382    	; 0x1f24 <f_open+0x22a>
    1da6:	e3 fe       	sbrs	r14, 3
    1da8:	51 c0       	rjmp	.+162    	; 0x1e4c <f_open+0x152>
    1daa:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <get_fattime>
    1dae:	f6 01       	movw	r30, r12
    1db0:	66 87       	std	Z+14, r22	; 0x0e
    1db2:	77 87       	std	Z+15, r23	; 0x0f
    1db4:	80 8b       	std	Z+16, r24	; 0x10
    1db6:	91 8b       	std	Z+17, r25	; 0x11
    1db8:	13 86       	std	Z+11, r1	; 0x0b
    1dba:	14 8e       	std	Z+28, r1	; 0x1c
    1dbc:	15 8e       	std	Z+29, r1	; 0x1d
    1dbe:	16 8e       	std	Z+30, r1	; 0x1e
    1dc0:	17 8e       	std	Z+31, r1	; 0x1f
    1dc2:	84 88       	ldd	r8, Z+20	; 0x14
    1dc4:	95 88       	ldd	r9, Z+21	; 0x15
    1dc6:	a1 2c       	mov	r10, r1
    1dc8:	b1 2c       	mov	r11, r1
    1dca:	d4 01       	movw	r26, r8
    1dcc:	99 27       	eor	r25, r25
    1dce:	88 27       	eor	r24, r24
    1dd0:	82 8c       	ldd	r8, Z+26	; 0x1a
    1dd2:	93 8c       	ldd	r9, Z+27	; 0x1b
    1dd4:	a1 2c       	mov	r10, r1
    1dd6:	b1 2c       	mov	r11, r1
    1dd8:	88 2a       	or	r8, r24
    1dda:	99 2a       	or	r9, r25
    1ddc:	aa 2a       	or	r10, r26
    1dde:	bb 2a       	or	r11, r27
    1de0:	13 8e       	std	Z+27, r1	; 0x1b
    1de2:	12 8e       	std	Z+26, r1	; 0x1a
    1de4:	15 8a       	std	Z+21, r1	; 0x15
    1de6:	14 8a       	std	Z+20, r1	; 0x14
    1de8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dea:	fa 81       	ldd	r31, Y+2	; 0x02
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	84 83       	std	Z+4, r24	; 0x04
    1df0:	81 14       	cp	r8, r1
    1df2:	91 04       	cpc	r9, r1
    1df4:	a1 04       	cpc	r10, r1
    1df6:	b1 04       	cpc	r11, r1
    1df8:	31 f1       	breq	.+76     	; 0x1e46 <f_open+0x14c>
    1dfa:	46 a4       	ldd	r4, Z+46	; 0x2e
    1dfc:	57 a4       	ldd	r5, Z+47	; 0x2f
    1dfe:	60 a8       	ldd	r6, Z+48	; 0x30
    1e00:	71 a8       	ldd	r7, Z+49	; 0x31
    1e02:	b5 01       	movw	r22, r10
    1e04:	a4 01       	movw	r20, r8
    1e06:	cf 01       	movw	r24, r30
    1e08:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <remove_chain>
    1e0c:	81 11       	cpse	r24, r1
    1e0e:	8f c0       	rjmp	.+286    	; 0x1f2e <f_open+0x234>
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	9a 81       	ldd	r25, Y+2	; 0x02
    1e14:	f1 e0       	ldi	r31, 0x01	; 1
    1e16:	8f 1a       	sub	r8, r31
    1e18:	91 08       	sbc	r9, r1
    1e1a:	a1 08       	sbc	r10, r1
    1e1c:	b1 08       	sbc	r11, r1
    1e1e:	dc 01       	movw	r26, r24
    1e20:	1a 96       	adiw	r26, 0x0a	; 10
    1e22:	8d 92       	st	X+, r8
    1e24:	9d 92       	st	X+, r9
    1e26:	ad 92       	st	X+, r10
    1e28:	bc 92       	st	X, r11
    1e2a:	1d 97       	sbiw	r26, 0x0d	; 13
    1e2c:	b3 01       	movw	r22, r6
    1e2e:	a2 01       	movw	r20, r4
    1e30:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    1e34:	88 23       	and	r24, r24
    1e36:	39 f0       	breq	.+14     	; 0x1e46 <f_open+0x14c>
    1e38:	7a c0       	rjmp	.+244    	; 0x1f2e <f_open+0x234>
    1e3a:	f1 fe       	sbrs	r15, 1
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <f_open+0x148>
    1e3e:	80 fd       	sbrc	r24, 0
    1e40:	73 c0       	rjmp	.+230    	; 0x1f28 <f_open+0x22e>
    1e42:	f3 fe       	sbrs	r15, 3
    1e44:	03 c0       	rjmp	.+6      	; 0x1e4c <f_open+0x152>
    1e46:	be 2d       	mov	r27, r14
    1e48:	b0 62       	ori	r27, 0x20	; 32
    1e4a:	eb 2e       	mov	r14, r27
    1e4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e50:	86 a5       	ldd	r24, Z+46	; 0x2e
    1e52:	97 a5       	ldd	r25, Z+47	; 0x2f
    1e54:	a0 a9       	ldd	r26, Z+48	; 0x30
    1e56:	b1 a9       	ldd	r27, Z+49	; 0x31
    1e58:	f8 01       	movw	r30, r16
    1e5a:	82 8f       	std	Z+26, r24	; 0x1a
    1e5c:	93 8f       	std	Z+27, r25	; 0x1b
    1e5e:	a4 8f       	std	Z+28, r26	; 0x1c
    1e60:	b5 8f       	std	Z+29, r27	; 0x1d
    1e62:	d7 8e       	std	Z+31, r13	; 0x1f
    1e64:	c6 8e       	std	Z+30, r12	; 0x1e
    1e66:	d8 01       	movw	r26, r16
    1e68:	14 96       	adiw	r26, 0x04	; 4
    1e6a:	ec 92       	st	X, r14
    1e6c:	f6 01       	movw	r30, r12
    1e6e:	84 89       	ldd	r24, Z+20	; 0x14
    1e70:	95 89       	ldd	r25, Z+21	; 0x15
    1e72:	a0 e0       	ldi	r26, 0x00	; 0
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	dc 01       	movw	r26, r24
    1e78:	99 27       	eor	r25, r25
    1e7a:	88 27       	eor	r24, r24
    1e7c:	42 8d       	ldd	r20, Z+26	; 0x1a
    1e7e:	53 8d       	ldd	r21, Z+27	; 0x1b
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	70 e0       	ldi	r23, 0x00	; 0
    1e84:	84 2b       	or	r24, r20
    1e86:	95 2b       	or	r25, r21
    1e88:	a6 2b       	or	r26, r22
    1e8a:	b7 2b       	or	r27, r23
    1e8c:	f8 01       	movw	r30, r16
    1e8e:	86 87       	std	Z+14, r24	; 0x0e
    1e90:	97 87       	std	Z+15, r25	; 0x0f
    1e92:	a0 8b       	std	Z+16, r26	; 0x10
    1e94:	b1 8b       	std	Z+17, r27	; 0x11
    1e96:	f6 01       	movw	r30, r12
    1e98:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e9a:	95 8d       	ldd	r25, Z+29	; 0x1d
    1e9c:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1e9e:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1ea0:	f8 01       	movw	r30, r16
    1ea2:	82 87       	std	Z+10, r24	; 0x0a
    1ea4:	93 87       	std	Z+11, r25	; 0x0b
    1ea6:	a4 87       	std	Z+12, r26	; 0x0c
    1ea8:	b5 87       	std	Z+13, r27	; 0x0d
    1eaa:	d8 01       	movw	r26, r16
    1eac:	16 82       	std	Z+6, r1	; 0x06
    1eae:	17 82       	std	Z+7, r1	; 0x07
    1eb0:	10 86       	std	Z+8, r1	; 0x08
    1eb2:	11 86       	std	Z+9, r1	; 0x09
    1eb4:	16 8a       	std	Z+22, r1	; 0x16
    1eb6:	17 8a       	std	Z+23, r1	; 0x17
    1eb8:	10 8e       	std	Z+24, r1	; 0x18
    1eba:	11 8e       	std	Z+25, r1	; 0x19
    1ebc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ebe:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec0:	11 96       	adiw	r26, 0x01	; 1
    1ec2:	fc 93       	st	X, r31
    1ec4:	ee 93       	st	-X, r30
    1ec6:	86 81       	ldd	r24, Z+6	; 0x06
    1ec8:	97 81       	ldd	r25, Z+7	; 0x07
    1eca:	13 96       	adiw	r26, 0x03	; 3
    1ecc:	9c 93       	st	X, r25
    1ece:	8e 93       	st	-X, r24
    1ed0:	12 97       	sbiw	r26, 0x02	; 2
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	2c c0       	rjmp	.+88     	; 0x1f2e <f_open+0x234>
    1ed6:	cb 88       	ldd	r12, Y+19	; 0x13
    1ed8:	dc 88       	ldd	r13, Y+20	; 0x14
    1eda:	9f 2d       	mov	r25, r15
    1edc:	9c 71       	andi	r25, 0x1C	; 28
    1ede:	09 f0       	breq	.+2      	; 0x1ee2 <f_open+0x1e8>
    1ee0:	4c cf       	rjmp	.-360    	; 0x1d7a <f_open+0x80>
    1ee2:	0f c0       	rjmp	.+30     	; 0x1f02 <f_open+0x208>
    1ee4:	9f 2d       	mov	r25, r15
    1ee6:	9c 71       	andi	r25, 0x1C	; 28
    1ee8:	09 f0       	breq	.+2      	; 0x1eec <f_open+0x1f2>
    1eea:	47 cf       	rjmp	.-370    	; 0x1d7a <f_open+0x80>
    1eec:	0a c0       	rjmp	.+20     	; 0x1f02 <f_open+0x208>
    1eee:	8f 2d       	mov	r24, r15
    1ef0:	8c 71       	andi	r24, 0x1C	; 28
    1ef2:	51 f4       	brne	.+20     	; 0x1f08 <f_open+0x20e>
    1ef4:	86 e0       	ldi	r24, 0x06	; 6
    1ef6:	05 c0       	rjmp	.+10     	; 0x1f02 <f_open+0x208>
    1ef8:	8f 2d       	mov	r24, r15
    1efa:	8c 71       	andi	r24, 0x1C	; 28
    1efc:	09 f0       	breq	.+2      	; 0x1f00 <f_open+0x206>
    1efe:	4b cf       	rjmp	.-362    	; 0x1d96 <f_open+0x9c>
    1f00:	0a c0       	rjmp	.+20     	; 0x1f16 <f_open+0x21c>
    1f02:	81 11       	cpse	r24, r1
    1f04:	14 c0       	rjmp	.+40     	; 0x1f2e <f_open+0x234>
    1f06:	af cf       	rjmp	.-162    	; 0x1e66 <f_open+0x16c>
    1f08:	be 2d       	mov	r27, r14
    1f0a:	b8 60       	ori	r27, 0x08	; 8
    1f0c:	eb 2e       	mov	r14, r27
    1f0e:	cb 88       	ldd	r12, Y+19	; 0x13
    1f10:	dc 88       	ldd	r13, Y+20	; 0x14
    1f12:	86 e0       	ldi	r24, 0x06	; 6
    1f14:	f6 cf       	rjmp	.-20     	; 0x1f02 <f_open+0x208>
    1f16:	f6 01       	movw	r30, r12
    1f18:	83 85       	ldd	r24, Z+11	; 0x0b
    1f1a:	84 fd       	sbrc	r24, 4
    1f1c:	07 c0       	rjmp	.+14     	; 0x1f2c <f_open+0x232>
    1f1e:	8d cf       	rjmp	.-230    	; 0x1e3a <f_open+0x140>
    1f20:	88 e0       	ldi	r24, 0x08	; 8
    1f22:	05 c0       	rjmp	.+10     	; 0x1f2e <f_open+0x234>
    1f24:	87 e0       	ldi	r24, 0x07	; 7
    1f26:	03 c0       	rjmp	.+6      	; 0x1f2e <f_open+0x234>
    1f28:	87 e0       	ldi	r24, 0x07	; 7
    1f2a:	01 c0       	rjmp	.+2      	; 0x1f2e <f_open+0x234>
    1f2c:	84 e0       	ldi	r24, 0x04	; 4
    1f2e:	a4 96       	adiw	r28, 0x24	; 36
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	de bf       	out	0x3e, r29	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	df 91       	pop	r29
    1f3c:	cf 91       	pop	r28
    1f3e:	1f 91       	pop	r17
    1f40:	0f 91       	pop	r16
    1f42:	ff 90       	pop	r15
    1f44:	ef 90       	pop	r14
    1f46:	df 90       	pop	r13
    1f48:	cf 90       	pop	r12
    1f4a:	bf 90       	pop	r11
    1f4c:	af 90       	pop	r10
    1f4e:	9f 90       	pop	r9
    1f50:	8f 90       	pop	r8
    1f52:	7f 90       	pop	r7
    1f54:	6f 90       	pop	r6
    1f56:	5f 90       	pop	r5
    1f58:	4f 90       	pop	r4
    1f5a:	08 95       	ret

00001f5c <f_read>:
    1f5c:	2f 92       	push	r2
    1f5e:	3f 92       	push	r3
    1f60:	4f 92       	push	r4
    1f62:	5f 92       	push	r5
    1f64:	6f 92       	push	r6
    1f66:	7f 92       	push	r7
    1f68:	8f 92       	push	r8
    1f6a:	9f 92       	push	r9
    1f6c:	af 92       	push	r10
    1f6e:	bf 92       	push	r11
    1f70:	cf 92       	push	r12
    1f72:	df 92       	push	r13
    1f74:	ef 92       	push	r14
    1f76:	ff 92       	push	r15
    1f78:	0f 93       	push	r16
    1f7a:	1f 93       	push	r17
    1f7c:	cf 93       	push	r28
    1f7e:	df 93       	push	r29
    1f80:	ec 01       	movw	r28, r24
    1f82:	4b 01       	movw	r8, r22
    1f84:	6a 01       	movw	r12, r20
    1f86:	59 01       	movw	r10, r18
    1f88:	f9 01       	movw	r30, r18
    1f8a:	11 82       	std	Z+1, r1	; 0x01
    1f8c:	10 82       	st	Z, r1
    1f8e:	6a 81       	ldd	r22, Y+2	; 0x02
    1f90:	7b 81       	ldd	r23, Y+3	; 0x03
    1f92:	88 81       	ld	r24, Y
    1f94:	99 81       	ldd	r25, Y+1	; 0x01
    1f96:	0e 94 25 03 	call	0x64a	; 0x64a <validate>
    1f9a:	81 11       	cpse	r24, r1
    1f9c:	18 c1       	rjmp	.+560    	; 0x21ce <f_read+0x272>
    1f9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa0:	88 23       	and	r24, r24
    1fa2:	0c f4       	brge	.+2      	; 0x1fa6 <f_read+0x4a>
    1fa4:	0f c1       	rjmp	.+542    	; 0x21c4 <f_read+0x268>
    1fa6:	80 ff       	sbrs	r24, 0
    1fa8:	0f c1       	rjmp	.+542    	; 0x21c8 <f_read+0x26c>
    1faa:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fac:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fae:	ac 85       	ldd	r26, Y+12	; 0x0c
    1fb0:	bd 85       	ldd	r27, Y+13	; 0x0d
    1fb2:	4e 81       	ldd	r20, Y+6	; 0x06
    1fb4:	5f 81       	ldd	r21, Y+7	; 0x07
    1fb6:	68 85       	ldd	r22, Y+8	; 0x08
    1fb8:	79 85       	ldd	r23, Y+9	; 0x09
    1fba:	84 1b       	sub	r24, r20
    1fbc:	95 0b       	sbc	r25, r21
    1fbe:	a6 0b       	sbc	r26, r22
    1fc0:	b7 0b       	sbc	r27, r23
    1fc2:	a6 01       	movw	r20, r12
    1fc4:	60 e0       	ldi	r22, 0x00	; 0
    1fc6:	70 e0       	ldi	r23, 0x00	; 0
    1fc8:	84 17       	cp	r24, r20
    1fca:	95 07       	cpc	r25, r21
    1fcc:	a6 07       	cpc	r26, r22
    1fce:	b7 07       	cpc	r27, r23
    1fd0:	08 f4       	brcc	.+2      	; 0x1fd4 <f_read+0x78>
    1fd2:	6c 01       	movw	r12, r24
    1fd4:	c1 14       	cp	r12, r1
    1fd6:	d1 04       	cpc	r13, r1
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <f_read+0x80>
    1fda:	f8 c0       	rjmp	.+496    	; 0x21cc <f_read+0x270>
    1fdc:	4e 81       	ldd	r20, Y+6	; 0x06
    1fde:	5f 81       	ldd	r21, Y+7	; 0x07
    1fe0:	68 85       	ldd	r22, Y+8	; 0x08
    1fe2:	79 85       	ldd	r23, Y+9	; 0x09
    1fe4:	db 01       	movw	r26, r22
    1fe6:	ca 01       	movw	r24, r20
    1fe8:	91 70       	andi	r25, 0x01	; 1
    1fea:	aa 27       	eor	r26, r26
    1fec:	bb 27       	eor	r27, r27
    1fee:	89 2b       	or	r24, r25
    1ff0:	8a 2b       	or	r24, r26
    1ff2:	8b 2b       	or	r24, r27
    1ff4:	09 f0       	breq	.+2      	; 0x1ff8 <f_read+0x9c>
    1ff6:	a0 c0       	rjmp	.+320    	; 0x2138 <f_read+0x1dc>
    1ff8:	e8 81       	ld	r30, Y
    1ffa:	f9 81       	ldd	r31, Y+1	; 0x01
    1ffc:	12 81       	ldd	r17, Z+2	; 0x02
    1ffe:	11 50       	subi	r17, 0x01	; 1
    2000:	db 01       	movw	r26, r22
    2002:	ca 01       	movw	r24, r20
    2004:	07 2e       	mov	r0, r23
    2006:	79 e0       	ldi	r23, 0x09	; 9
    2008:	b6 95       	lsr	r27
    200a:	a7 95       	ror	r26
    200c:	97 95       	ror	r25
    200e:	87 95       	ror	r24
    2010:	7a 95       	dec	r23
    2012:	d1 f7       	brne	.-12     	; 0x2008 <f_read+0xac>
    2014:	70 2d       	mov	r23, r0
    2016:	18 23       	and	r17, r24
    2018:	49 f5       	brne	.+82     	; 0x206c <f_read+0x110>
    201a:	45 2b       	or	r20, r21
    201c:	46 2b       	or	r20, r22
    201e:	47 2b       	or	r20, r23
    2020:	29 f4       	brne	.+10     	; 0x202c <f_read+0xd0>
    2022:	6e 85       	ldd	r22, Y+14	; 0x0e
    2024:	7f 85       	ldd	r23, Y+15	; 0x0f
    2026:	88 89       	ldd	r24, Y+16	; 0x10
    2028:	99 89       	ldd	r25, Y+17	; 0x11
    202a:	07 c0       	rjmp	.+14     	; 0x203a <f_read+0xde>
    202c:	4a 89       	ldd	r20, Y+18	; 0x12
    202e:	5b 89       	ldd	r21, Y+19	; 0x13
    2030:	6c 89       	ldd	r22, Y+20	; 0x14
    2032:	7d 89       	ldd	r23, Y+21	; 0x15
    2034:	cf 01       	movw	r24, r30
    2036:	0e 94 b2 06 	call	0xd64	; 0xd64 <get_fat>
    203a:	62 30       	cpi	r22, 0x02	; 2
    203c:	71 05       	cpc	r23, r1
    203e:	81 05       	cpc	r24, r1
    2040:	91 05       	cpc	r25, r1
    2042:	28 f4       	brcc	.+10     	; 0x204e <f_read+0xf2>
    2044:	8c 81       	ldd	r24, Y+4	; 0x04
    2046:	80 68       	ori	r24, 0x80	; 128
    2048:	8c 83       	std	Y+4, r24	; 0x04
    204a:	82 e0       	ldi	r24, 0x02	; 2
    204c:	c0 c0       	rjmp	.+384    	; 0x21ce <f_read+0x272>
    204e:	6f 3f       	cpi	r22, 0xFF	; 255
    2050:	ff ef       	ldi	r31, 0xFF	; 255
    2052:	7f 07       	cpc	r23, r31
    2054:	8f 07       	cpc	r24, r31
    2056:	9f 07       	cpc	r25, r31
    2058:	29 f4       	brne	.+10     	; 0x2064 <f_read+0x108>
    205a:	8c 81       	ldd	r24, Y+4	; 0x04
    205c:	80 68       	ori	r24, 0x80	; 128
    205e:	8c 83       	std	Y+4, r24	; 0x04
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	b5 c0       	rjmp	.+362    	; 0x21ce <f_read+0x272>
    2064:	6a 8b       	std	Y+18, r22	; 0x12
    2066:	7b 8b       	std	Y+19, r23	; 0x13
    2068:	8c 8b       	std	Y+20, r24	; 0x14
    206a:	9d 8b       	std	Y+21, r25	; 0x15
    206c:	28 80       	ld	r2, Y
    206e:	39 80       	ldd	r3, Y+1	; 0x01
    2070:	4a 89       	ldd	r20, Y+18	; 0x12
    2072:	5b 89       	ldd	r21, Y+19	; 0x13
    2074:	6c 89       	ldd	r22, Y+20	; 0x14
    2076:	7d 89       	ldd	r23, Y+21	; 0x15
    2078:	c1 01       	movw	r24, r2
    207a:	0e 94 8a 06 	call	0xd14	; 0xd14 <clust2sect>
    207e:	61 15       	cp	r22, r1
    2080:	71 05       	cpc	r23, r1
    2082:	81 05       	cpc	r24, r1
    2084:	91 05       	cpc	r25, r1
    2086:	29 f4       	brne	.+10     	; 0x2092 <f_read+0x136>
    2088:	8c 81       	ldd	r24, Y+4	; 0x04
    208a:	80 68       	ori	r24, 0x80	; 128
    208c:	8c 83       	std	Y+4, r24	; 0x04
    208e:	82 e0       	ldi	r24, 0x02	; 2
    2090:	9e c0       	rjmp	.+316    	; 0x21ce <f_read+0x272>
    2092:	2b 01       	movw	r4, r22
    2094:	3c 01       	movw	r6, r24
    2096:	41 0e       	add	r4, r17
    2098:	51 1c       	adc	r5, r1
    209a:	61 1c       	adc	r6, r1
    209c:	71 1c       	adc	r7, r1
    209e:	76 01       	movw	r14, r12
    20a0:	ef 2c       	mov	r14, r15
    20a2:	ff 24       	eor	r15, r15
    20a4:	e6 94       	lsr	r14
    20a6:	e1 14       	cp	r14, r1
    20a8:	f1 04       	cpc	r15, r1
    20aa:	09 f4       	brne	.+2      	; 0x20ae <f_read+0x152>
    20ac:	41 c0       	rjmp	.+130    	; 0x2130 <f_read+0x1d4>
    20ae:	f1 01       	movw	r30, r2
    20b0:	42 81       	ldd	r20, Z+2	; 0x02
    20b2:	24 2f       	mov	r18, r20
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	c7 01       	movw	r24, r14
    20b8:	81 0f       	add	r24, r17
    20ba:	91 1d       	adc	r25, r1
    20bc:	28 17       	cp	r18, r24
    20be:	39 07       	cpc	r19, r25
    20c0:	18 f4       	brcc	.+6      	; 0x20c8 <f_read+0x16c>
    20c2:	79 01       	movw	r14, r18
    20c4:	e1 1a       	sub	r14, r17
    20c6:	f1 08       	sbc	r15, r1
    20c8:	0e 2d       	mov	r16, r14
    20ca:	a3 01       	movw	r20, r6
    20cc:	92 01       	movw	r18, r4
    20ce:	b4 01       	movw	r22, r8
    20d0:	f1 01       	movw	r30, r2
    20d2:	81 81       	ldd	r24, Z+1	; 0x01
    20d4:	0e 94 e7 29 	call	0x53ce	; 0x53ce <disk_read>
    20d8:	88 23       	and	r24, r24
    20da:	29 f0       	breq	.+10     	; 0x20e6 <f_read+0x18a>
    20dc:	8c 81       	ldd	r24, Y+4	; 0x04
    20de:	80 68       	ori	r24, 0x80	; 128
    20e0:	8c 83       	std	Y+4, r24	; 0x04
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	74 c0       	rjmp	.+232    	; 0x21ce <f_read+0x272>
    20e6:	e8 81       	ld	r30, Y
    20e8:	f9 81       	ldd	r31, Y+1	; 0x01
    20ea:	84 81       	ldd	r24, Z+4	; 0x04
    20ec:	88 23       	and	r24, r24
    20ee:	e1 f0       	breq	.+56     	; 0x2128 <f_read+0x1cc>
    20f0:	86 a5       	ldd	r24, Z+46	; 0x2e
    20f2:	97 a5       	ldd	r25, Z+47	; 0x2f
    20f4:	a0 a9       	ldd	r26, Z+48	; 0x30
    20f6:	b1 a9       	ldd	r27, Z+49	; 0x31
    20f8:	84 19       	sub	r24, r4
    20fa:	95 09       	sbc	r25, r5
    20fc:	a6 09       	sbc	r26, r6
    20fe:	b7 09       	sbc	r27, r7
    2100:	a7 01       	movw	r20, r14
    2102:	60 e0       	ldi	r22, 0x00	; 0
    2104:	70 e0       	ldi	r23, 0x00	; 0
    2106:	84 17       	cp	r24, r20
    2108:	95 07       	cpc	r25, r21
    210a:	a6 07       	cpc	r26, r22
    210c:	b7 07       	cpc	r27, r23
    210e:	60 f4       	brcc	.+24     	; 0x2128 <f_read+0x1cc>
    2110:	bf 01       	movw	r22, r30
    2112:	6e 5c       	subi	r22, 0xCE	; 206
    2114:	7f 4f       	sbci	r23, 0xFF	; 255
    2116:	98 2f       	mov	r25, r24
    2118:	88 27       	eor	r24, r24
    211a:	99 0f       	add	r25, r25
    211c:	40 e0       	ldi	r20, 0x00	; 0
    211e:	52 e0       	ldi	r21, 0x02	; 2
    2120:	88 0d       	add	r24, r8
    2122:	99 1d       	adc	r25, r9
    2124:	0e 94 c5 01 	call	0x38a	; 0x38a <mem_cpy>
    2128:	fe 2c       	mov	r15, r14
    212a:	ee 24       	eor	r14, r14
    212c:	ff 0c       	add	r15, r15
    212e:	2f c0       	rjmp	.+94     	; 0x218e <f_read+0x232>
    2130:	4e 8a       	std	Y+22, r4	; 0x16
    2132:	5f 8a       	std	Y+23, r5	; 0x17
    2134:	68 8e       	std	Y+24, r6	; 0x18
    2136:	79 8e       	std	Y+25, r7	; 0x19
    2138:	8e 81       	ldd	r24, Y+6	; 0x06
    213a:	9f 81       	ldd	r25, Y+7	; 0x07
    213c:	91 70       	andi	r25, 0x01	; 1
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	32 e0       	ldi	r19, 0x02	; 2
    2142:	79 01       	movw	r14, r18
    2144:	e8 1a       	sub	r14, r24
    2146:	f9 0a       	sbc	r15, r25
    2148:	ce 14       	cp	r12, r14
    214a:	df 04       	cpc	r13, r15
    214c:	08 f4       	brcc	.+2      	; 0x2150 <f_read+0x1f4>
    214e:	76 01       	movw	r14, r12
    2150:	4e 89       	ldd	r20, Y+22	; 0x16
    2152:	5f 89       	ldd	r21, Y+23	; 0x17
    2154:	68 8d       	ldd	r22, Y+24	; 0x18
    2156:	79 8d       	ldd	r23, Y+25	; 0x19
    2158:	88 81       	ld	r24, Y
    215a:	99 81       	ldd	r25, Y+1	; 0x01
    215c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    2160:	88 23       	and	r24, r24
    2162:	29 f0       	breq	.+10     	; 0x216e <f_read+0x212>
    2164:	8c 81       	ldd	r24, Y+4	; 0x04
    2166:	80 68       	ori	r24, 0x80	; 128
    2168:	8c 83       	std	Y+4, r24	; 0x04
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	30 c0       	rjmp	.+96     	; 0x21ce <f_read+0x272>
    216e:	8e 81       	ldd	r24, Y+6	; 0x06
    2170:	9f 81       	ldd	r25, Y+7	; 0x07
    2172:	a8 85       	ldd	r26, Y+8	; 0x08
    2174:	b9 85       	ldd	r27, Y+9	; 0x09
    2176:	91 70       	andi	r25, 0x01	; 1
    2178:	aa 27       	eor	r26, r26
    217a:	bb 27       	eor	r27, r27
    217c:	c2 96       	adiw	r24, 0x32	; 50
    217e:	68 81       	ld	r22, Y
    2180:	79 81       	ldd	r23, Y+1	; 0x01
    2182:	68 0f       	add	r22, r24
    2184:	79 1f       	adc	r23, r25
    2186:	a7 01       	movw	r20, r14
    2188:	c4 01       	movw	r24, r8
    218a:	0e 94 c5 01 	call	0x38a	; 0x38a <mem_cpy>
    218e:	8e 0c       	add	r8, r14
    2190:	9f 1c       	adc	r9, r15
    2192:	8e 81       	ldd	r24, Y+6	; 0x06
    2194:	9f 81       	ldd	r25, Y+7	; 0x07
    2196:	a8 85       	ldd	r26, Y+8	; 0x08
    2198:	b9 85       	ldd	r27, Y+9	; 0x09
    219a:	8e 0d       	add	r24, r14
    219c:	9f 1d       	adc	r25, r15
    219e:	a1 1d       	adc	r26, r1
    21a0:	b1 1d       	adc	r27, r1
    21a2:	8e 83       	std	Y+6, r24	; 0x06
    21a4:	9f 83       	std	Y+7, r25	; 0x07
    21a6:	a8 87       	std	Y+8, r26	; 0x08
    21a8:	b9 87       	std	Y+9, r27	; 0x09
    21aa:	f5 01       	movw	r30, r10
    21ac:	80 81       	ld	r24, Z
    21ae:	91 81       	ldd	r25, Z+1	; 0x01
    21b0:	8e 0d       	add	r24, r14
    21b2:	9f 1d       	adc	r25, r15
    21b4:	91 83       	std	Z+1, r25	; 0x01
    21b6:	80 83       	st	Z, r24
    21b8:	ce 18       	sub	r12, r14
    21ba:	df 08       	sbc	r13, r15
    21bc:	09 f0       	breq	.+2      	; 0x21c0 <f_read+0x264>
    21be:	0e cf       	rjmp	.-484    	; 0x1fdc <f_read+0x80>
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	05 c0       	rjmp	.+10     	; 0x21ce <f_read+0x272>
    21c4:	82 e0       	ldi	r24, 0x02	; 2
    21c6:	03 c0       	rjmp	.+6      	; 0x21ce <f_read+0x272>
    21c8:	87 e0       	ldi	r24, 0x07	; 7
    21ca:	01 c0       	rjmp	.+2      	; 0x21ce <f_read+0x272>
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	1f 91       	pop	r17
    21d4:	0f 91       	pop	r16
    21d6:	ff 90       	pop	r15
    21d8:	ef 90       	pop	r14
    21da:	df 90       	pop	r13
    21dc:	cf 90       	pop	r12
    21de:	bf 90       	pop	r11
    21e0:	af 90       	pop	r10
    21e2:	9f 90       	pop	r9
    21e4:	8f 90       	pop	r8
    21e6:	7f 90       	pop	r7
    21e8:	6f 90       	pop	r6
    21ea:	5f 90       	pop	r5
    21ec:	4f 90       	pop	r4
    21ee:	3f 90       	pop	r3
    21f0:	2f 90       	pop	r2
    21f2:	08 95       	ret

000021f4 <f_write>:
    21f4:	2f 92       	push	r2
    21f6:	3f 92       	push	r3
    21f8:	4f 92       	push	r4
    21fa:	5f 92       	push	r5
    21fc:	6f 92       	push	r6
    21fe:	7f 92       	push	r7
    2200:	8f 92       	push	r8
    2202:	9f 92       	push	r9
    2204:	af 92       	push	r10
    2206:	bf 92       	push	r11
    2208:	cf 92       	push	r12
    220a:	df 92       	push	r13
    220c:	ef 92       	push	r14
    220e:	ff 92       	push	r15
    2210:	0f 93       	push	r16
    2212:	1f 93       	push	r17
    2214:	cf 93       	push	r28
    2216:	df 93       	push	r29
    2218:	ec 01       	movw	r28, r24
    221a:	4b 01       	movw	r8, r22
    221c:	6a 01       	movw	r12, r20
    221e:	59 01       	movw	r10, r18
    2220:	f9 01       	movw	r30, r18
    2222:	11 82       	std	Z+1, r1	; 0x01
    2224:	10 82       	st	Z, r1
    2226:	6a 81       	ldd	r22, Y+2	; 0x02
    2228:	7b 81       	ldd	r23, Y+3	; 0x03
    222a:	88 81       	ld	r24, Y
    222c:	99 81       	ldd	r25, Y+1	; 0x01
    222e:	0e 94 25 03 	call	0x64a	; 0x64a <validate>
    2232:	81 11       	cpse	r24, r1
    2234:	7a c1       	rjmp	.+756    	; 0x252a <f_write+0x336>
    2236:	8c 81       	ldd	r24, Y+4	; 0x04
    2238:	88 23       	and	r24, r24
    223a:	0c f4       	brge	.+2      	; 0x223e <f_write+0x4a>
    223c:	73 c1       	rjmp	.+742    	; 0x2524 <f_write+0x330>
    223e:	81 ff       	sbrs	r24, 1
    2240:	73 c1       	rjmp	.+742    	; 0x2528 <f_write+0x334>
    2242:	8a 85       	ldd	r24, Y+10	; 0x0a
    2244:	9b 85       	ldd	r25, Y+11	; 0x0b
    2246:	ac 85       	ldd	r26, Y+12	; 0x0c
    2248:	bd 85       	ldd	r27, Y+13	; 0x0d
    224a:	ac 01       	movw	r20, r24
    224c:	bd 01       	movw	r22, r26
    224e:	4c 0d       	add	r20, r12
    2250:	5d 1d       	adc	r21, r13
    2252:	61 1d       	adc	r22, r1
    2254:	71 1d       	adc	r23, r1
    2256:	48 17       	cp	r20, r24
    2258:	59 07       	cpc	r21, r25
    225a:	6a 07       	cpc	r22, r26
    225c:	7b 07       	cpc	r23, r27
    225e:	08 f4       	brcc	.+2      	; 0x2262 <f_write+0x6e>
    2260:	4b c1       	rjmp	.+662    	; 0x24f8 <f_write+0x304>
    2262:	c1 14       	cp	r12, r1
    2264:	d1 04       	cpc	r13, r1
    2266:	09 f4       	brne	.+2      	; 0x226a <f_write+0x76>
    2268:	47 c1       	rjmp	.+654    	; 0x24f8 <f_write+0x304>
    226a:	4e 81       	ldd	r20, Y+6	; 0x06
    226c:	5f 81       	ldd	r21, Y+7	; 0x07
    226e:	68 85       	ldd	r22, Y+8	; 0x08
    2270:	79 85       	ldd	r23, Y+9	; 0x09
    2272:	db 01       	movw	r26, r22
    2274:	ca 01       	movw	r24, r20
    2276:	91 70       	andi	r25, 0x01	; 1
    2278:	aa 27       	eor	r26, r26
    227a:	bb 27       	eor	r27, r27
    227c:	89 2b       	or	r24, r25
    227e:	8a 2b       	or	r24, r26
    2280:	8b 2b       	or	r24, r27
    2282:	09 f0       	breq	.+2      	; 0x2286 <f_write+0x92>
    2284:	f1 c0       	rjmp	.+482    	; 0x2468 <f_write+0x274>
    2286:	e8 81       	ld	r30, Y
    2288:	f9 81       	ldd	r31, Y+1	; 0x01
    228a:	12 81       	ldd	r17, Z+2	; 0x02
    228c:	11 50       	subi	r17, 0x01	; 1
    228e:	db 01       	movw	r26, r22
    2290:	ca 01       	movw	r24, r20
    2292:	07 2e       	mov	r0, r23
    2294:	79 e0       	ldi	r23, 0x09	; 9
    2296:	b6 95       	lsr	r27
    2298:	a7 95       	ror	r26
    229a:	97 95       	ror	r25
    229c:	87 95       	ror	r24
    229e:	7a 95       	dec	r23
    22a0:	d1 f7       	brne	.-12     	; 0x2296 <f_write+0xa2>
    22a2:	70 2d       	mov	r23, r0
    22a4:	18 23       	and	r17, r24
    22a6:	f1 f5       	brne	.+124    	; 0x2324 <f_write+0x130>
    22a8:	45 2b       	or	r20, r21
    22aa:	46 2b       	or	r20, r22
    22ac:	47 2b       	or	r20, r23
    22ae:	a1 f4       	brne	.+40     	; 0x22d8 <f_write+0xe4>
    22b0:	6e 85       	ldd	r22, Y+14	; 0x0e
    22b2:	7f 85       	ldd	r23, Y+15	; 0x0f
    22b4:	88 89       	ldd	r24, Y+16	; 0x10
    22b6:	99 89       	ldd	r25, Y+17	; 0x11
    22b8:	61 15       	cp	r22, r1
    22ba:	71 05       	cpc	r23, r1
    22bc:	81 05       	cpc	r24, r1
    22be:	91 05       	cpc	r25, r1
    22c0:	c1 f4       	brne	.+48     	; 0x22f2 <f_write+0xfe>
    22c2:	40 e0       	ldi	r20, 0x00	; 0
    22c4:	50 e0       	ldi	r21, 0x00	; 0
    22c6:	ba 01       	movw	r22, r20
    22c8:	cf 01       	movw	r24, r30
    22ca:	0e 94 6d 09 	call	0x12da	; 0x12da <create_chain>
    22ce:	6e 87       	std	Y+14, r22	; 0x0e
    22d0:	7f 87       	std	Y+15, r23	; 0x0f
    22d2:	88 8b       	std	Y+16, r24	; 0x10
    22d4:	99 8b       	std	Y+17, r25	; 0x11
    22d6:	07 c0       	rjmp	.+14     	; 0x22e6 <f_write+0xf2>
    22d8:	4a 89       	ldd	r20, Y+18	; 0x12
    22da:	5b 89       	ldd	r21, Y+19	; 0x13
    22dc:	6c 89       	ldd	r22, Y+20	; 0x14
    22de:	7d 89       	ldd	r23, Y+21	; 0x15
    22e0:	cf 01       	movw	r24, r30
    22e2:	0e 94 6d 09 	call	0x12da	; 0x12da <create_chain>
    22e6:	61 15       	cp	r22, r1
    22e8:	71 05       	cpc	r23, r1
    22ea:	81 05       	cpc	r24, r1
    22ec:	91 05       	cpc	r25, r1
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <f_write+0xfe>
    22f0:	03 c1       	rjmp	.+518    	; 0x24f8 <f_write+0x304>
    22f2:	61 30       	cpi	r22, 0x01	; 1
    22f4:	71 05       	cpc	r23, r1
    22f6:	81 05       	cpc	r24, r1
    22f8:	91 05       	cpc	r25, r1
    22fa:	29 f4       	brne	.+10     	; 0x2306 <f_write+0x112>
    22fc:	8c 81       	ldd	r24, Y+4	; 0x04
    22fe:	80 68       	ori	r24, 0x80	; 128
    2300:	8c 83       	std	Y+4, r24	; 0x04
    2302:	82 e0       	ldi	r24, 0x02	; 2
    2304:	12 c1       	rjmp	.+548    	; 0x252a <f_write+0x336>
    2306:	6f 3f       	cpi	r22, 0xFF	; 255
    2308:	ff ef       	ldi	r31, 0xFF	; 255
    230a:	7f 07       	cpc	r23, r31
    230c:	8f 07       	cpc	r24, r31
    230e:	9f 07       	cpc	r25, r31
    2310:	29 f4       	brne	.+10     	; 0x231c <f_write+0x128>
    2312:	8c 81       	ldd	r24, Y+4	; 0x04
    2314:	80 68       	ori	r24, 0x80	; 128
    2316:	8c 83       	std	Y+4, r24	; 0x04
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	07 c1       	rjmp	.+526    	; 0x252a <f_write+0x336>
    231c:	6a 8b       	std	Y+18, r22	; 0x12
    231e:	7b 8b       	std	Y+19, r23	; 0x13
    2320:	8c 8b       	std	Y+20, r24	; 0x14
    2322:	9d 8b       	std	Y+21, r25	; 0x15
    2324:	e8 81       	ld	r30, Y
    2326:	f9 81       	ldd	r31, Y+1	; 0x01
    2328:	46 a5       	ldd	r20, Z+46	; 0x2e
    232a:	57 a5       	ldd	r21, Z+47	; 0x2f
    232c:	60 a9       	ldd	r22, Z+48	; 0x30
    232e:	71 a9       	ldd	r23, Z+49	; 0x31
    2330:	8e 89       	ldd	r24, Y+22	; 0x16
    2332:	9f 89       	ldd	r25, Y+23	; 0x17
    2334:	a8 8d       	ldd	r26, Y+24	; 0x18
    2336:	b9 8d       	ldd	r27, Y+25	; 0x19
    2338:	48 17       	cp	r20, r24
    233a:	59 07       	cpc	r21, r25
    233c:	6a 07       	cpc	r22, r26
    233e:	7b 07       	cpc	r23, r27
    2340:	69 f4       	brne	.+26     	; 0x235c <f_write+0x168>
    2342:	40 e0       	ldi	r20, 0x00	; 0
    2344:	50 e0       	ldi	r21, 0x00	; 0
    2346:	ba 01       	movw	r22, r20
    2348:	cf 01       	movw	r24, r30
    234a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    234e:	88 23       	and	r24, r24
    2350:	29 f0       	breq	.+10     	; 0x235c <f_write+0x168>
    2352:	8c 81       	ldd	r24, Y+4	; 0x04
    2354:	80 68       	ori	r24, 0x80	; 128
    2356:	8c 83       	std	Y+4, r24	; 0x04
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	e7 c0       	rjmp	.+462    	; 0x252a <f_write+0x336>
    235c:	28 80       	ld	r2, Y
    235e:	39 80       	ldd	r3, Y+1	; 0x01
    2360:	4a 89       	ldd	r20, Y+18	; 0x12
    2362:	5b 89       	ldd	r21, Y+19	; 0x13
    2364:	6c 89       	ldd	r22, Y+20	; 0x14
    2366:	7d 89       	ldd	r23, Y+21	; 0x15
    2368:	c1 01       	movw	r24, r2
    236a:	0e 94 8a 06 	call	0xd14	; 0xd14 <clust2sect>
    236e:	61 15       	cp	r22, r1
    2370:	71 05       	cpc	r23, r1
    2372:	81 05       	cpc	r24, r1
    2374:	91 05       	cpc	r25, r1
    2376:	29 f4       	brne	.+10     	; 0x2382 <f_write+0x18e>
    2378:	8c 81       	ldd	r24, Y+4	; 0x04
    237a:	80 68       	ori	r24, 0x80	; 128
    237c:	8c 83       	std	Y+4, r24	; 0x04
    237e:	82 e0       	ldi	r24, 0x02	; 2
    2380:	d4 c0       	rjmp	.+424    	; 0x252a <f_write+0x336>
    2382:	2b 01       	movw	r4, r22
    2384:	3c 01       	movw	r6, r24
    2386:	41 0e       	add	r4, r17
    2388:	51 1c       	adc	r5, r1
    238a:	61 1c       	adc	r6, r1
    238c:	71 1c       	adc	r7, r1
    238e:	76 01       	movw	r14, r12
    2390:	ef 2c       	mov	r14, r15
    2392:	ff 24       	eor	r15, r15
    2394:	e6 94       	lsr	r14
    2396:	e1 14       	cp	r14, r1
    2398:	f1 04       	cpc	r15, r1
    239a:	09 f4       	brne	.+2      	; 0x239e <f_write+0x1aa>
    239c:	41 c0       	rjmp	.+130    	; 0x2420 <f_write+0x22c>
    239e:	f1 01       	movw	r30, r2
    23a0:	42 81       	ldd	r20, Z+2	; 0x02
    23a2:	24 2f       	mov	r18, r20
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	c7 01       	movw	r24, r14
    23a8:	81 0f       	add	r24, r17
    23aa:	91 1d       	adc	r25, r1
    23ac:	28 17       	cp	r18, r24
    23ae:	39 07       	cpc	r19, r25
    23b0:	18 f4       	brcc	.+6      	; 0x23b8 <f_write+0x1c4>
    23b2:	79 01       	movw	r14, r18
    23b4:	e1 1a       	sub	r14, r17
    23b6:	f1 08       	sbc	r15, r1
    23b8:	0e 2d       	mov	r16, r14
    23ba:	a3 01       	movw	r20, r6
    23bc:	92 01       	movw	r18, r4
    23be:	b4 01       	movw	r22, r8
    23c0:	f1 01       	movw	r30, r2
    23c2:	81 81       	ldd	r24, Z+1	; 0x01
    23c4:	0e 94 3a 2a 	call	0x5474	; 0x5474 <disk_write>
    23c8:	88 23       	and	r24, r24
    23ca:	29 f0       	breq	.+10     	; 0x23d6 <f_write+0x1e2>
    23cc:	8c 81       	ldd	r24, Y+4	; 0x04
    23ce:	80 68       	ori	r24, 0x80	; 128
    23d0:	8c 83       	std	Y+4, r24	; 0x04
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	aa c0       	rjmp	.+340    	; 0x252a <f_write+0x336>
    23d6:	e8 81       	ld	r30, Y
    23d8:	f9 81       	ldd	r31, Y+1	; 0x01
    23da:	86 a5       	ldd	r24, Z+46	; 0x2e
    23dc:	97 a5       	ldd	r25, Z+47	; 0x2f
    23de:	a0 a9       	ldd	r26, Z+48	; 0x30
    23e0:	b1 a9       	ldd	r27, Z+49	; 0x31
    23e2:	84 19       	sub	r24, r4
    23e4:	95 09       	sbc	r25, r5
    23e6:	a6 09       	sbc	r26, r6
    23e8:	b7 09       	sbc	r27, r7
    23ea:	a7 01       	movw	r20, r14
    23ec:	60 e0       	ldi	r22, 0x00	; 0
    23ee:	70 e0       	ldi	r23, 0x00	; 0
    23f0:	84 17       	cp	r24, r20
    23f2:	95 07       	cpc	r25, r21
    23f4:	a6 07       	cpc	r26, r22
    23f6:	b7 07       	cpc	r27, r23
    23f8:	78 f4       	brcc	.+30     	; 0x2418 <f_write+0x224>
    23fa:	98 2f       	mov	r25, r24
    23fc:	88 27       	eor	r24, r24
    23fe:	99 0f       	add	r25, r25
    2400:	b4 01       	movw	r22, r8
    2402:	68 0f       	add	r22, r24
    2404:	79 1f       	adc	r23, r25
    2406:	40 e0       	ldi	r20, 0x00	; 0
    2408:	52 e0       	ldi	r21, 0x02	; 2
    240a:	cf 01       	movw	r24, r30
    240c:	c2 96       	adiw	r24, 0x32	; 50
    240e:	0e 94 c5 01 	call	0x38a	; 0x38a <mem_cpy>
    2412:	e8 81       	ld	r30, Y
    2414:	f9 81       	ldd	r31, Y+1	; 0x01
    2416:	14 82       	std	Z+4, r1	; 0x04
    2418:	fe 2c       	mov	r15, r14
    241a:	ee 24       	eor	r14, r14
    241c:	ff 0c       	add	r15, r15
    241e:	53 c0       	rjmp	.+166    	; 0x24c6 <f_write+0x2d2>
    2420:	4e 81       	ldd	r20, Y+6	; 0x06
    2422:	5f 81       	ldd	r21, Y+7	; 0x07
    2424:	68 85       	ldd	r22, Y+8	; 0x08
    2426:	79 85       	ldd	r23, Y+9	; 0x09
    2428:	8a 85       	ldd	r24, Y+10	; 0x0a
    242a:	9b 85       	ldd	r25, Y+11	; 0x0b
    242c:	ac 85       	ldd	r26, Y+12	; 0x0c
    242e:	bd 85       	ldd	r27, Y+13	; 0x0d
    2430:	48 17       	cp	r20, r24
    2432:	59 07       	cpc	r21, r25
    2434:	6a 07       	cpc	r22, r26
    2436:	7b 07       	cpc	r23, r27
    2438:	98 f0       	brcs	.+38     	; 0x2460 <f_write+0x26c>
    243a:	40 e0       	ldi	r20, 0x00	; 0
    243c:	50 e0       	ldi	r21, 0x00	; 0
    243e:	ba 01       	movw	r22, r20
    2440:	c1 01       	movw	r24, r2
    2442:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    2446:	88 23       	and	r24, r24
    2448:	29 f0       	breq	.+10     	; 0x2454 <f_write+0x260>
    244a:	8c 81       	ldd	r24, Y+4	; 0x04
    244c:	80 68       	ori	r24, 0x80	; 128
    244e:	8c 83       	std	Y+4, r24	; 0x04
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	6b c0       	rjmp	.+214    	; 0x252a <f_write+0x336>
    2454:	e8 81       	ld	r30, Y
    2456:	f9 81       	ldd	r31, Y+1	; 0x01
    2458:	46 a6       	std	Z+46, r4	; 0x2e
    245a:	57 a6       	std	Z+47, r5	; 0x2f
    245c:	60 aa       	std	Z+48, r6	; 0x30
    245e:	71 aa       	std	Z+49, r7	; 0x31
    2460:	4e 8a       	std	Y+22, r4	; 0x16
    2462:	5f 8a       	std	Y+23, r5	; 0x17
    2464:	68 8e       	std	Y+24, r6	; 0x18
    2466:	79 8e       	std	Y+25, r7	; 0x19
    2468:	8e 81       	ldd	r24, Y+6	; 0x06
    246a:	9f 81       	ldd	r25, Y+7	; 0x07
    246c:	91 70       	andi	r25, 0x01	; 1
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	32 e0       	ldi	r19, 0x02	; 2
    2472:	79 01       	movw	r14, r18
    2474:	e8 1a       	sub	r14, r24
    2476:	f9 0a       	sbc	r15, r25
    2478:	ce 14       	cp	r12, r14
    247a:	df 04       	cpc	r13, r15
    247c:	08 f4       	brcc	.+2      	; 0x2480 <f_write+0x28c>
    247e:	76 01       	movw	r14, r12
    2480:	4e 89       	ldd	r20, Y+22	; 0x16
    2482:	5f 89       	ldd	r21, Y+23	; 0x17
    2484:	68 8d       	ldd	r22, Y+24	; 0x18
    2486:	79 8d       	ldd	r23, Y+25	; 0x19
    2488:	88 81       	ld	r24, Y
    248a:	99 81       	ldd	r25, Y+1	; 0x01
    248c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    2490:	88 23       	and	r24, r24
    2492:	29 f0       	breq	.+10     	; 0x249e <f_write+0x2aa>
    2494:	8c 81       	ldd	r24, Y+4	; 0x04
    2496:	80 68       	ori	r24, 0x80	; 128
    2498:	8c 83       	std	Y+4, r24	; 0x04
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	46 c0       	rjmp	.+140    	; 0x252a <f_write+0x336>
    249e:	8e 81       	ldd	r24, Y+6	; 0x06
    24a0:	9f 81       	ldd	r25, Y+7	; 0x07
    24a2:	a8 85       	ldd	r26, Y+8	; 0x08
    24a4:	b9 85       	ldd	r27, Y+9	; 0x09
    24a6:	91 70       	andi	r25, 0x01	; 1
    24a8:	aa 27       	eor	r26, r26
    24aa:	bb 27       	eor	r27, r27
    24ac:	c2 96       	adiw	r24, 0x32	; 50
    24ae:	28 81       	ld	r18, Y
    24b0:	39 81       	ldd	r19, Y+1	; 0x01
    24b2:	a7 01       	movw	r20, r14
    24b4:	b4 01       	movw	r22, r8
    24b6:	82 0f       	add	r24, r18
    24b8:	93 1f       	adc	r25, r19
    24ba:	0e 94 c5 01 	call	0x38a	; 0x38a <mem_cpy>
    24be:	e8 81       	ld	r30, Y
    24c0:	f9 81       	ldd	r31, Y+1	; 0x01
    24c2:	21 e0       	ldi	r18, 0x01	; 1
    24c4:	24 83       	std	Z+4, r18	; 0x04
    24c6:	8e 0c       	add	r8, r14
    24c8:	9f 1c       	adc	r9, r15
    24ca:	8e 81       	ldd	r24, Y+6	; 0x06
    24cc:	9f 81       	ldd	r25, Y+7	; 0x07
    24ce:	a8 85       	ldd	r26, Y+8	; 0x08
    24d0:	b9 85       	ldd	r27, Y+9	; 0x09
    24d2:	8e 0d       	add	r24, r14
    24d4:	9f 1d       	adc	r25, r15
    24d6:	a1 1d       	adc	r26, r1
    24d8:	b1 1d       	adc	r27, r1
    24da:	8e 83       	std	Y+6, r24	; 0x06
    24dc:	9f 83       	std	Y+7, r25	; 0x07
    24de:	a8 87       	std	Y+8, r26	; 0x08
    24e0:	b9 87       	std	Y+9, r27	; 0x09
    24e2:	f5 01       	movw	r30, r10
    24e4:	80 81       	ld	r24, Z
    24e6:	91 81       	ldd	r25, Z+1	; 0x01
    24e8:	8e 0d       	add	r24, r14
    24ea:	9f 1d       	adc	r25, r15
    24ec:	91 83       	std	Z+1, r25	; 0x01
    24ee:	80 83       	st	Z, r24
    24f0:	ce 18       	sub	r12, r14
    24f2:	df 08       	sbc	r13, r15
    24f4:	09 f0       	breq	.+2      	; 0x24f8 <f_write+0x304>
    24f6:	b9 ce       	rjmp	.-654    	; 0x226a <f_write+0x76>
    24f8:	8e 81       	ldd	r24, Y+6	; 0x06
    24fa:	9f 81       	ldd	r25, Y+7	; 0x07
    24fc:	a8 85       	ldd	r26, Y+8	; 0x08
    24fe:	b9 85       	ldd	r27, Y+9	; 0x09
    2500:	4a 85       	ldd	r20, Y+10	; 0x0a
    2502:	5b 85       	ldd	r21, Y+11	; 0x0b
    2504:	6c 85       	ldd	r22, Y+12	; 0x0c
    2506:	7d 85       	ldd	r23, Y+13	; 0x0d
    2508:	48 17       	cp	r20, r24
    250a:	59 07       	cpc	r21, r25
    250c:	6a 07       	cpc	r22, r26
    250e:	7b 07       	cpc	r23, r27
    2510:	20 f4       	brcc	.+8      	; 0x251a <f_write+0x326>
    2512:	8a 87       	std	Y+10, r24	; 0x0a
    2514:	9b 87       	std	Y+11, r25	; 0x0b
    2516:	ac 87       	std	Y+12, r26	; 0x0c
    2518:	bd 87       	std	Y+13, r27	; 0x0d
    251a:	8c 81       	ldd	r24, Y+4	; 0x04
    251c:	80 62       	ori	r24, 0x20	; 32
    251e:	8c 83       	std	Y+4, r24	; 0x04
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	03 c0       	rjmp	.+6      	; 0x252a <f_write+0x336>
    2524:	82 e0       	ldi	r24, 0x02	; 2
    2526:	01 c0       	rjmp	.+2      	; 0x252a <f_write+0x336>
    2528:	87 e0       	ldi	r24, 0x07	; 7
    252a:	df 91       	pop	r29
    252c:	cf 91       	pop	r28
    252e:	1f 91       	pop	r17
    2530:	0f 91       	pop	r16
    2532:	ff 90       	pop	r15
    2534:	ef 90       	pop	r14
    2536:	df 90       	pop	r13
    2538:	cf 90       	pop	r12
    253a:	bf 90       	pop	r11
    253c:	af 90       	pop	r10
    253e:	9f 90       	pop	r9
    2540:	8f 90       	pop	r8
    2542:	7f 90       	pop	r7
    2544:	6f 90       	pop	r6
    2546:	5f 90       	pop	r5
    2548:	4f 90       	pop	r4
    254a:	3f 90       	pop	r3
    254c:	2f 90       	pop	r2
    254e:	08 95       	ret

00002550 <f_sync>:
    2550:	0f 93       	push	r16
    2552:	1f 93       	push	r17
    2554:	cf 93       	push	r28
    2556:	df 93       	push	r29
    2558:	ec 01       	movw	r28, r24
    255a:	6a 81       	ldd	r22, Y+2	; 0x02
    255c:	7b 81       	ldd	r23, Y+3	; 0x03
    255e:	88 81       	ld	r24, Y
    2560:	99 81       	ldd	r25, Y+1	; 0x01
    2562:	0e 94 25 03 	call	0x64a	; 0x64a <validate>
    2566:	81 11       	cpse	r24, r1
    2568:	37 c0       	rjmp	.+110    	; 0x25d8 <f_sync+0x88>
    256a:	9c 81       	ldd	r25, Y+4	; 0x04
    256c:	95 ff       	sbrs	r25, 5
    256e:	34 c0       	rjmp	.+104    	; 0x25d8 <f_sync+0x88>
    2570:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2572:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2574:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2576:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2578:	88 81       	ld	r24, Y
    257a:	99 81       	ldd	r25, Y+1	; 0x01
    257c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    2580:	81 11       	cpse	r24, r1
    2582:	2a c0       	rjmp	.+84     	; 0x25d8 <f_sync+0x88>
    2584:	0e 8d       	ldd	r16, Y+30	; 0x1e
    2586:	1f 8d       	ldd	r17, Y+31	; 0x1f
    2588:	f8 01       	movw	r30, r16
    258a:	83 85       	ldd	r24, Z+11	; 0x0b
    258c:	80 62       	ori	r24, 0x20	; 32
    258e:	83 87       	std	Z+11, r24	; 0x0b
    2590:	8a 85       	ldd	r24, Y+10	; 0x0a
    2592:	9b 85       	ldd	r25, Y+11	; 0x0b
    2594:	ac 85       	ldd	r26, Y+12	; 0x0c
    2596:	bd 85       	ldd	r27, Y+13	; 0x0d
    2598:	84 8f       	std	Z+28, r24	; 0x1c
    259a:	95 8f       	std	Z+29, r25	; 0x1d
    259c:	a6 8f       	std	Z+30, r26	; 0x1e
    259e:	b7 8f       	std	Z+31, r27	; 0x1f
    25a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    25a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    25a4:	93 8f       	std	Z+27, r25	; 0x1b
    25a6:	82 8f       	std	Z+26, r24	; 0x1a
    25a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    25aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    25ac:	a8 89       	ldd	r26, Y+16	; 0x10
    25ae:	b9 89       	ldd	r27, Y+17	; 0x11
    25b0:	b5 8b       	std	Z+21, r27	; 0x15
    25b2:	a4 8b       	std	Z+20, r26	; 0x14
    25b4:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <get_fattime>
    25b8:	f8 01       	movw	r30, r16
    25ba:	66 8b       	std	Z+22, r22	; 0x16
    25bc:	77 8b       	std	Z+23, r23	; 0x17
    25be:	80 8f       	std	Z+24, r24	; 0x18
    25c0:	91 8f       	std	Z+25, r25	; 0x19
    25c2:	8c 81       	ldd	r24, Y+4	; 0x04
    25c4:	8f 7d       	andi	r24, 0xDF	; 223
    25c6:	8c 83       	std	Y+4, r24	; 0x04
    25c8:	e8 81       	ld	r30, Y
    25ca:	f9 81       	ldd	r31, Y+1	; 0x01
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	84 83       	std	Z+4, r24	; 0x04
    25d0:	88 81       	ld	r24, Y
    25d2:	99 81       	ldd	r25, Y+1	; 0x01
    25d4:	0e 94 25 06 	call	0xc4a	; 0xc4a <sync>
    25d8:	df 91       	pop	r29
    25da:	cf 91       	pop	r28
    25dc:	1f 91       	pop	r17
    25de:	0f 91       	pop	r16
    25e0:	08 95       	ret

000025e2 <f_close>:
    25e2:	cf 93       	push	r28
    25e4:	df 93       	push	r29
    25e6:	ec 01       	movw	r28, r24
    25e8:	0e 94 a8 12 	call	0x2550	; 0x2550 <f_sync>
    25ec:	81 11       	cpse	r24, r1
    25ee:	02 c0       	rjmp	.+4      	; 0x25f4 <f_close+0x12>
    25f0:	19 82       	std	Y+1, r1	; 0x01
    25f2:	18 82       	st	Y, r1
    25f4:	df 91       	pop	r29
    25f6:	cf 91       	pop	r28
    25f8:	08 95       	ret

000025fa <f_getcwd>:
#if _FS_RPATH >= 2
FRESULT f_getcwd (
	TCHAR *path,	/* Pointer to the directory path */
	UINT sz_path	/* Size of path */
)
{
    25fa:	4f 92       	push	r4
    25fc:	5f 92       	push	r5
    25fe:	6f 92       	push	r6
    2600:	7f 92       	push	r7
    2602:	9f 92       	push	r9
    2604:	af 92       	push	r10
    2606:	bf 92       	push	r11
    2608:	cf 92       	push	r12
    260a:	df 92       	push	r13
    260c:	ef 92       	push	r14
    260e:	ff 92       	push	r15
    2610:	0f 93       	push	r16
    2612:	1f 93       	push	r17
    2614:	cf 93       	push	r28
    2616:	df 93       	push	r29
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
    261c:	ea 97       	sbiw	r28, 0x3a	; 58
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	f8 94       	cli
    2622:	de bf       	out	0x3e, r29	; 62
    2624:	0f be       	out	0x3f, r0	; 63
    2626:	cd bf       	out	0x3d, r28	; 61
    2628:	9a af       	std	Y+58, r25	; 0x3a
    262a:	89 af       	std	Y+57, r24	; 0x39
    262c:	5b 01       	movw	r10, r22
	TCHAR *tp;
	FILINFO fno;
	DEF_NAMEBUF;


	*path = 0;
    262e:	fc 01       	movw	r30, r24
    2630:	10 82       	st	Z, r1
	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
    2632:	40 e0       	ldi	r20, 0x00	; 0
    2634:	be 01       	movw	r22, r28
    2636:	6f 5f       	subi	r22, 0xFF	; 255
    2638:	7f 4f       	sbci	r23, 0xFF	; 255
    263a:	ce 01       	movw	r24, r28
    263c:	c9 96       	adiw	r24, 0x39	; 57
    263e:	0e 94 3f 03 	call	0x67e	; 0x67e <chk_mounted>
    2642:	98 2e       	mov	r9, r24
	if (res == FR_OK) {
    2644:	81 11       	cpse	r24, r1
    2646:	03 c1       	rjmp	.+518    	; 0x284e <f_getcwd+0x254>
		INIT_BUF(dj);
    2648:	ce 01       	movw	r24, r28
    264a:	8d 96       	adiw	r24, 0x2d	; 45
    264c:	9e 8b       	std	Y+22, r25	; 0x16
    264e:	8d 8b       	std	Y+21, r24	; 0x15
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
    2650:	e9 81       	ldd	r30, Y+1	; 0x01
    2652:	fa 81       	ldd	r31, Y+2	; 0x02
    2654:	46 88       	ldd	r4, Z+22	; 0x16
    2656:	57 88       	ldd	r5, Z+23	; 0x17
    2658:	60 8c       	ldd	r6, Z+24	; 0x18
    265a:	71 8c       	ldd	r7, Z+25	; 0x19
    265c:	4f 82       	std	Y+7, r4	; 0x07
    265e:	58 86       	std	Y+8, r5	; 0x08
    2660:	69 86       	std	Y+9, r6	; 0x09
    2662:	7a 86       	std	Y+10, r7	; 0x0a
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
    2664:	41 14       	cp	r4, r1
    2666:	51 04       	cpc	r5, r1
    2668:	61 04       	cpc	r6, r1
    266a:	71 04       	cpc	r7, r1
    266c:	09 f4       	brne	.+2      	; 0x2670 <f_getcwd+0x76>
    266e:	e6 c0       	rjmp	.+460    	; 0x283c <f_getcwd+0x242>
    2670:	65 01       	movw	r12, r10
    2672:	7e 01       	movw	r14, r28
    2674:	f0 e2       	ldi	r31, 0x20	; 32
    2676:	ef 0e       	add	r14, r31
    2678:	f1 1c       	adc	r15, r1
			for (n = 0; tp[n]; n++) ;
			if (i < n + 3) {
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
    267a:	0f e2       	ldi	r16, 0x2F	; 47
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
			res = dir_sdi(&dj, 1);			/* Get parent dir */
    267c:	61 e0       	ldi	r22, 0x01	; 1
    267e:	70 e0       	ldi	r23, 0x00	; 0
    2680:	ce 01       	movw	r24, r28
    2682:	01 96       	adiw	r24, 0x01	; 1
    2684:	0e 94 95 07 	call	0xf2a	; 0xf2a <dir_sdi>
			if (res != FR_OK) break;
    2688:	81 11       	cpse	r24, r1
    268a:	b2 c0       	rjmp	.+356    	; 0x27f0 <f_getcwd+0x1f6>
			res = dir_read(&dj);
    268c:	ce 01       	movw	r24, r28
    268e:	01 96       	adiw	r24, 0x01	; 1
    2690:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <dir_read>
			if (res != FR_OK) break;
    2694:	81 11       	cpse	r24, r1
    2696:	ae c0       	rjmp	.+348    	; 0x27f4 <f_getcwd+0x1fa>
			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
    2698:	eb 89       	ldd	r30, Y+19	; 0x13
    269a:	fc 89       	ldd	r31, Y+20	; 0x14
    269c:	84 89       	ldd	r24, Z+20	; 0x14
    269e:	95 89       	ldd	r25, Z+21	; 0x15
    26a0:	a0 e0       	ldi	r26, 0x00	; 0
    26a2:	b0 e0       	ldi	r27, 0x00	; 0
    26a4:	dc 01       	movw	r26, r24
    26a6:	99 27       	eor	r25, r25
    26a8:	88 27       	eor	r24, r24
    26aa:	42 8d       	ldd	r20, Z+26	; 0x1a
    26ac:	53 8d       	ldd	r21, Z+27	; 0x1b
    26ae:	60 e0       	ldi	r22, 0x00	; 0
    26b0:	70 e0       	ldi	r23, 0x00	; 0
    26b2:	84 2b       	or	r24, r20
    26b4:	95 2b       	or	r25, r21
    26b6:	a6 2b       	or	r26, r22
    26b8:	b7 2b       	or	r27, r23
    26ba:	8f 83       	std	Y+7, r24	; 0x07
    26bc:	98 87       	std	Y+8, r25	; 0x08
    26be:	a9 87       	std	Y+9, r26	; 0x09
    26c0:	ba 87       	std	Y+10, r27	; 0x0a
			res = dir_sdi(&dj, 0);
    26c2:	60 e0       	ldi	r22, 0x00	; 0
    26c4:	70 e0       	ldi	r23, 0x00	; 0
    26c6:	ce 01       	movw	r24, r28
    26c8:	01 96       	adiw	r24, 0x01	; 1
    26ca:	0e 94 95 07 	call	0xf2a	; 0xf2a <dir_sdi>
			if (res != FR_OK) break;
    26ce:	81 11       	cpse	r24, r1
    26d0:	93 c0       	rjmp	.+294    	; 0x27f8 <f_getcwd+0x1fe>
			do {							/* Find the entry links to the child dir */
				res = dir_read(&dj);
    26d2:	ce 01       	movw	r24, r28
    26d4:	01 96       	adiw	r24, 0x01	; 1
    26d6:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <dir_read>
    26da:	18 2f       	mov	r17, r24
				if (res != FR_OK) break;
    26dc:	81 11       	cpse	r24, r1
    26de:	9a c0       	rjmp	.+308    	; 0x2814 <f_getcwd+0x21a>
				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
    26e0:	eb 89       	ldd	r30, Y+19	; 0x13
    26e2:	fc 89       	ldd	r31, Y+20	; 0x14
    26e4:	84 89       	ldd	r24, Z+20	; 0x14
    26e6:	95 89       	ldd	r25, Z+21	; 0x15
    26e8:	a0 e0       	ldi	r26, 0x00	; 0
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	dc 01       	movw	r26, r24
    26ee:	99 27       	eor	r25, r25
    26f0:	88 27       	eor	r24, r24
    26f2:	42 8d       	ldd	r20, Z+26	; 0x1a
    26f4:	53 8d       	ldd	r21, Z+27	; 0x1b
    26f6:	60 e0       	ldi	r22, 0x00	; 0
    26f8:	70 e0       	ldi	r23, 0x00	; 0
    26fa:	84 2b       	or	r24, r20
    26fc:	95 2b       	or	r25, r21
    26fe:	a6 2b       	or	r26, r22
    2700:	b7 2b       	or	r27, r23
    2702:	84 15       	cp	r24, r4
    2704:	95 05       	cpc	r25, r5
    2706:	a6 05       	cpc	r26, r6
    2708:	b7 05       	cpc	r27, r7
    270a:	09 f4       	brne	.+2      	; 0x270e <f_getcwd+0x114>
    270c:	87 c0       	rjmp	.+270    	; 0x281c <f_getcwd+0x222>
				res = dir_next(&dj, 0);	
    270e:	60 e0       	ldi	r22, 0x00	; 0
    2710:	70 e0       	ldi	r23, 0x00	; 0
    2712:	ce 01       	movw	r24, r28
    2714:	01 96       	adiw	r24, 0x01	; 1
    2716:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <dir_next>
    271a:	18 2f       	mov	r17, r24
			} while (res == FR_OK);
    271c:	88 23       	and	r24, r24
    271e:	c9 f2       	breq	.-78     	; 0x26d2 <f_getcwd+0xd8>
    2720:	79 c0       	rjmp	.+242    	; 0x2814 <f_getcwd+0x21a>
    2722:	de 01       	movw	r26, r28
    2724:	91 96       	adiw	r26, 0x21	; 33
			fno.lfsize = i;
#endif
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
    2726:	e0 e0       	ldi	r30, 0x00	; 0
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	01 c0       	rjmp	.+2      	; 0x272e <f_getcwd+0x134>
    272c:	f9 01       	movw	r30, r18
    272e:	9f 01       	movw	r18, r30
    2730:	2f 5f       	subi	r18, 0xFF	; 255
    2732:	3f 4f       	sbci	r19, 0xFF	; 255
    2734:	8d 91       	ld	r24, X+
    2736:	81 11       	cpse	r24, r1
    2738:	f9 cf       	rjmp	.-14     	; 0x272c <f_getcwd+0x132>
			if (i < n + 3) {
    273a:	cf 01       	movw	r24, r30
    273c:	04 96       	adiw	r24, 0x04	; 4
    273e:	c8 16       	cp	r12, r24
    2740:	d9 06       	cpc	r13, r25
    2742:	08 f4       	brcc	.+2      	; 0x2746 <f_getcwd+0x14c>
    2744:	5b c0       	rjmp	.+182    	; 0x27fc <f_getcwd+0x202>
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
    2746:	21 15       	cp	r18, r1
    2748:	31 05       	cpc	r19, r1
    274a:	a1 f0       	breq	.+40     	; 0x2774 <f_getcwd+0x17a>
    274c:	3a 96       	adiw	r30, 0x0a	; 10
    274e:	87 e1       	ldi	r24, 0x17	; 23
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	8c 0f       	add	r24, r28
    2754:	9d 1f       	adc	r25, r29
    2756:	e8 0f       	add	r30, r24
    2758:	f9 1f       	adc	r31, r25
    275a:	c6 01       	movw	r24, r12
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	42 91       	ld	r20, -Z
    2760:	a9 ad       	ldd	r26, Y+57	; 0x39
    2762:	ba ad       	ldd	r27, Y+58	; 0x3a
    2764:	a8 0f       	add	r26, r24
    2766:	b9 1f       	adc	r27, r25
    2768:	4c 93       	st	X, r20
    276a:	ee 15       	cp	r30, r14
    276c:	ff 05       	cpc	r31, r15
    276e:	b1 f7       	brne	.-20     	; 0x275c <f_getcwd+0x162>
    2770:	c2 1a       	sub	r12, r18
    2772:	d3 0a       	sbc	r13, r19
			path[--i] = '/';
    2774:	91 e0       	ldi	r25, 0x01	; 1
    2776:	c9 1a       	sub	r12, r25
    2778:	d1 08       	sbc	r13, r1
    277a:	e9 ad       	ldd	r30, Y+57	; 0x39
    277c:	fa ad       	ldd	r31, Y+58	; 0x3a
    277e:	ec 0d       	add	r30, r12
    2780:	fd 1d       	adc	r31, r13
    2782:	00 83       	st	Z, r16
	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
    2784:	4f 80       	ldd	r4, Y+7	; 0x07
    2786:	58 84       	ldd	r5, Y+8	; 0x08
    2788:	69 84       	ldd	r6, Y+9	; 0x09
    278a:	7a 84       	ldd	r7, Y+10	; 0x0a
    278c:	41 14       	cp	r4, r1
    278e:	51 04       	cpc	r5, r1
    2790:	61 04       	cpc	r6, r1
    2792:	71 04       	cpc	r7, r1
    2794:	09 f0       	breq	.+2      	; 0x2798 <f_getcwd+0x19e>
    2796:	72 cf       	rjmp	.-284    	; 0x267c <f_getcwd+0x82>
    2798:	1d c0       	rjmp	.+58     	; 0x27d4 <f_getcwd+0x1da>
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
    279a:	a9 ad       	ldd	r26, Y+57	; 0x39
    279c:	ba ad       	ldd	r27, Y+58	; 0x3a
				res = dir_read(&dj);
				if (res != FR_OK) break;
				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
				res = dir_next(&dj, 0);	
			} while (res == FR_OK);
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
    279e:	68 94       	set
    27a0:	99 24       	eor	r9, r9
    27a2:	91 f8       	bld	r9, 1
    27a4:	15 c0       	rjmp	.+42     	; 0x27d0 <f_getcwd+0x1d6>
		tp = path;
		if (res == FR_OK) {
			*tp++ = '0' + CurrVol;			/* Put drive number */
			*tp++ = ':';
			if (i == sz_path) {				/* Root-dir */
				*tp++ = '/';
    27a6:	df 01       	movw	r26, r30
    27a8:	13 96       	adiw	r26, 0x03	; 3
    27aa:	8f e2       	ldi	r24, 0x2F	; 47
    27ac:	82 83       	std	Z+2, r24	; 0x02
    27ae:	10 c0       	rjmp	.+32     	; 0x27d0 <f_getcwd+0x1d6>
			} else {						/* Sub-dir */
				do		/* Add stacked path str */
					*tp++ = path[i++];
    27b0:	11 96       	adiw	r26, 0x01	; 1
    27b2:	e9 ad       	ldd	r30, Y+57	; 0x39
    27b4:	fa ad       	ldd	r31, Y+58	; 0x3a
    27b6:	ec 0d       	add	r30, r12
    27b8:	fd 1d       	adc	r31, r13
    27ba:	80 81       	ld	r24, Z
    27bc:	fd 01       	movw	r30, r26
    27be:	31 97       	sbiw	r30, 0x01	; 1
    27c0:	80 83       	st	Z, r24
    27c2:	f6 01       	movw	r30, r12
    27c4:	31 96       	adiw	r30, 0x01	; 1
    27c6:	6f 01       	movw	r12, r30
				while (i < sz_path);
    27c8:	ea 15       	cp	r30, r10
    27ca:	fb 05       	cpc	r31, r11
    27cc:	88 f3       	brcs	.-30     	; 0x27b0 <f_getcwd+0x1b6>
    27ce:	91 2e       	mov	r9, r17
			}
		}
		*tp = 0;
    27d0:	1c 92       	st	X, r1
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
    27d2:	3d c0       	rjmp	.+122    	; 0x284e <f_getcwd+0x254>
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
    27d4:	e9 ad       	ldd	r30, Y+57	; 0x39
    27d6:	fa ad       	ldd	r31, Y+58	; 0x3a
		if (res == FR_OK) {
			*tp++ = '0' + CurrVol;			/* Put drive number */
    27d8:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
    27dc:	80 5d       	subi	r24, 0xD0	; 208
    27de:	80 83       	st	Z, r24
			*tp++ = ':';
    27e0:	8a e3       	ldi	r24, 0x3A	; 58
    27e2:	81 83       	std	Z+1, r24	; 0x01
			if (i == sz_path) {				/* Root-dir */
    27e4:	ac 14       	cp	r10, r12
    27e6:	bd 04       	cpc	r11, r13
    27e8:	f1 f2       	breq	.-68     	; 0x27a6 <f_getcwd+0x1ac>
			path[--i] = '/';
		}
		tp = path;
		if (res == FR_OK) {
			*tp++ = '0' + CurrVol;			/* Put drive number */
			*tp++ = ':';
    27ea:	df 01       	movw	r26, r30
    27ec:	12 96       	adiw	r26, 0x02	; 2
    27ee:	e0 cf       	rjmp	.-64     	; 0x27b0 <f_getcwd+0x1b6>
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
			res = dir_sdi(&dj, 1);			/* Get parent dir */
    27f0:	98 2e       	mov	r9, r24
    27f2:	0d c0       	rjmp	.+26     	; 0x280e <f_getcwd+0x214>
			if (res != FR_OK) break;
			res = dir_read(&dj);
    27f4:	98 2e       	mov	r9, r24
    27f6:	0b c0       	rjmp	.+22     	; 0x280e <f_getcwd+0x214>
			if (res != FR_OK) break;
			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
			res = dir_sdi(&dj, 0);
    27f8:	98 2e       	mov	r9, r24
    27fa:	09 c0       	rjmp	.+18     	; 0x280e <f_getcwd+0x214>
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
			if (i < n + 3) {
				res = FR_NOT_ENOUGH_CORE; break;
    27fc:	0f 2e       	mov	r0, r31
    27fe:	f1 e1       	ldi	r31, 0x11	; 17
    2800:	9f 2e       	mov	r9, r31
    2802:	f0 2d       	mov	r31, r0
    2804:	04 c0       	rjmp	.+8      	; 0x280e <f_getcwd+0x214>
    2806:	0f 2e       	mov	r0, r31
    2808:	f1 e1       	ldi	r31, 0x11	; 17
    280a:	9f 2e       	mov	r9, r31
    280c:	f0 2d       	mov	r31, r0
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
    280e:	a9 ad       	ldd	r26, Y+57	; 0x39
    2810:	ba ad       	ldd	r27, Y+58	; 0x3a
    2812:	de cf       	rjmp	.-68     	; 0x27d0 <f_getcwd+0x1d6>
				res = dir_read(&dj);
				if (res != FR_OK) break;
				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
				res = dir_next(&dj, 0);	
			} while (res == FR_OK);
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
    2814:	14 30       	cpi	r17, 0x04	; 4
    2816:	09 f2       	breq	.-126    	; 0x279a <f_getcwd+0x1a0>
    2818:	91 2e       	mov	r9, r17
    281a:	f9 cf       	rjmp	.-14     	; 0x280e <f_getcwd+0x214>
			if (res != FR_OK) break;
#if _USE_LFN
			fno.lfname = path;
			fno.lfsize = i;
#endif
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
    281c:	be 01       	movw	r22, r28
    281e:	69 5e       	subi	r22, 0xE9	; 233
    2820:	7f 4f       	sbci	r23, 0xFF	; 255
    2822:	ce 01       	movw	r24, r28
    2824:	01 96       	adiw	r24, 0x01	; 1
    2826:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <get_fileinfo>
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
    282a:	88 a1       	ldd	r24, Y+32	; 0x20
    282c:	81 11       	cpse	r24, r1
    282e:	79 cf       	rjmp	.-270    	; 0x2722 <f_getcwd+0x128>
			if (i < n + 3) {
    2830:	f3 e0       	ldi	r31, 0x03	; 3
    2832:	cf 16       	cp	r12, r31
    2834:	d1 04       	cpc	r13, r1
    2836:	08 f0       	brcs	.+2      	; 0x283a <f_getcwd+0x240>
    2838:	9d cf       	rjmp	.-198    	; 0x2774 <f_getcwd+0x17a>
    283a:	e5 cf       	rjmp	.-54     	; 0x2806 <f_getcwd+0x20c>
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
    283c:	e9 ad       	ldd	r30, Y+57	; 0x39
    283e:	fa ad       	ldd	r31, Y+58	; 0x3a
		if (res == FR_OK) {
			*tp++ = '0' + CurrVol;			/* Put drive number */
    2840:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
    2844:	80 5d       	subi	r24, 0xD0	; 208
    2846:	80 83       	st	Z, r24
			*tp++ = ':';
    2848:	8a e3       	ldi	r24, 0x3A	; 58
    284a:	81 83       	std	Z+1, r24	; 0x01
    284c:	ac cf       	rjmp	.-168    	; 0x27a6 <f_getcwd+0x1ac>
		*tp = 0;
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    284e:	89 2d       	mov	r24, r9
    2850:	ea 96       	adiw	r28, 0x3a	; 58
    2852:	0f b6       	in	r0, 0x3f	; 63
    2854:	f8 94       	cli
    2856:	de bf       	out	0x3e, r29	; 62
    2858:	0f be       	out	0x3f, r0	; 63
    285a:	cd bf       	out	0x3d, r28	; 61
    285c:	df 91       	pop	r29
    285e:	cf 91       	pop	r28
    2860:	1f 91       	pop	r17
    2862:	0f 91       	pop	r16
    2864:	ff 90       	pop	r15
    2866:	ef 90       	pop	r14
    2868:	df 90       	pop	r13
    286a:	cf 90       	pop	r12
    286c:	bf 90       	pop	r11
    286e:	af 90       	pop	r10
    2870:	9f 90       	pop	r9
    2872:	7f 90       	pop	r7
    2874:	6f 90       	pop	r6
    2876:	5f 90       	pop	r5
    2878:	4f 90       	pop	r4
    287a:	08 95       	ret

0000287c <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    287c:	4f 92       	push	r4
    287e:	5f 92       	push	r5
    2880:	6f 92       	push	r6
    2882:	7f 92       	push	r7
    2884:	8f 92       	push	r8
    2886:	9f 92       	push	r9
    2888:	af 92       	push	r10
    288a:	bf 92       	push	r11
    288c:	cf 92       	push	r12
    288e:	df 92       	push	r13
    2890:	ef 92       	push	r14
    2892:	ff 92       	push	r15
    2894:	0f 93       	push	r16
    2896:	1f 93       	push	r17
    2898:	cf 93       	push	r28
    289a:	df 93       	push	r29
    289c:	00 d0       	rcall	.+0      	; 0x289e <f_lseek+0x22>
    289e:	00 d0       	rcall	.+0      	; 0x28a0 <f_lseek+0x24>
    28a0:	00 d0       	rcall	.+0      	; 0x28a2 <f_lseek+0x26>
    28a2:	cd b7       	in	r28, 0x3d	; 61
    28a4:	de b7       	in	r29, 0x3e	; 62
    28a6:	9e 83       	std	Y+6, r25	; 0x06
    28a8:	8d 83       	std	Y+5, r24	; 0x05
    28aa:	6a 01       	movw	r12, r20
    28ac:	7b 01       	movw	r14, r22
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    28ae:	dc 01       	movw	r26, r24
    28b0:	12 96       	adiw	r26, 0x02	; 2
    28b2:	6d 91       	ld	r22, X+
    28b4:	7c 91       	ld	r23, X
    28b6:	13 97       	sbiw	r26, 0x03	; 3
    28b8:	8d 91       	ld	r24, X+
    28ba:	9c 91       	ld	r25, X
    28bc:	0e 94 25 03 	call	0x64a	; 0x64a <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    28c0:	81 11       	cpse	r24, r1
    28c2:	9d c1       	rjmp	.+826    	; 0x2bfe <f_lseek+0x382>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    28c4:	ed 81       	ldd	r30, Y+5	; 0x05
    28c6:	fe 81       	ldd	r31, Y+6	; 0x06
    28c8:	84 81       	ldd	r24, Z+4	; 0x04
    28ca:	88 23       	and	r24, r24
    28cc:	0c f4       	brge	.+2      	; 0x28d0 <f_lseek+0x54>
    28ce:	92 c1       	rjmp	.+804    	; 0x2bf4 <f_lseek+0x378>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    28d0:	42 85       	ldd	r20, Z+10	; 0x0a
    28d2:	53 85       	ldd	r21, Z+11	; 0x0b
    28d4:	64 85       	ldd	r22, Z+12	; 0x0c
    28d6:	75 85       	ldd	r23, Z+13	; 0x0d
    28d8:	4c 15       	cp	r20, r12
    28da:	5d 05       	cpc	r21, r13
    28dc:	6e 05       	cpc	r22, r14
    28de:	7f 05       	cpc	r23, r15
    28e0:	20 f4       	brcc	.+8      	; 0x28ea <f_lseek+0x6e>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    28e2:	81 fd       	sbrc	r24, 1
    28e4:	02 c0       	rjmp	.+4      	; 0x28ea <f_lseek+0x6e>
#endif
			) ofs = fp->fsize;
    28e6:	6a 01       	movw	r12, r20
    28e8:	7b 01       	movw	r14, r22

		ifptr = fp->fptr;
    28ea:	ad 81       	ldd	r26, Y+5	; 0x05
    28ec:	be 81       	ldd	r27, Y+6	; 0x06
    28ee:	16 96       	adiw	r26, 0x06	; 6
    28f0:	4d 90       	ld	r4, X+
    28f2:	5d 90       	ld	r5, X+
    28f4:	6d 90       	ld	r6, X+
    28f6:	7c 90       	ld	r7, X
    28f8:	19 97       	sbiw	r26, 0x09	; 9
		fp->fptr = nsect = 0;
    28fa:	fd 01       	movw	r30, r26
    28fc:	16 82       	std	Z+6, r1	; 0x06
    28fe:	17 82       	std	Z+7, r1	; 0x07
    2900:	10 86       	std	Z+8, r1	; 0x08
    2902:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    2904:	c1 14       	cp	r12, r1
    2906:	d1 04       	cpc	r13, r1
    2908:	e1 04       	cpc	r14, r1
    290a:	f1 04       	cpc	r15, r1
    290c:	09 f4       	brne	.+2      	; 0x2910 <f_lseek+0x94>
    290e:	74 c1       	rjmp	.+744    	; 0x2bf8 <f_lseek+0x37c>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    2910:	00 81       	ld	r16, Z
    2912:	11 81       	ldd	r17, Z+1	; 0x01
    2914:	d8 01       	movw	r26, r16
    2916:	12 96       	adiw	r26, 0x02	; 2
    2918:	8c 90       	ld	r8, X
    291a:	91 2c       	mov	r9, r1
    291c:	a1 2c       	mov	r10, r1
    291e:	b1 2c       	mov	r11, r1
    2920:	07 2e       	mov	r0, r23
    2922:	79 e0       	ldi	r23, 0x09	; 9
    2924:	88 0c       	add	r8, r8
    2926:	99 1c       	adc	r9, r9
    2928:	aa 1c       	adc	r10, r10
    292a:	bb 1c       	adc	r11, r11
    292c:	7a 95       	dec	r23
    292e:	d1 f7       	brne	.-12     	; 0x2924 <f_lseek+0xa8>
    2930:	70 2d       	mov	r23, r0
			if (ifptr > 0 &&
    2932:	41 14       	cp	r4, r1
    2934:	51 04       	cpc	r5, r1
    2936:	61 04       	cpc	r6, r1
    2938:	71 04       	cpc	r7, r1
    293a:	09 f4       	brne	.+2      	; 0x293e <f_lseek+0xc2>
    293c:	40 c0       	rjmp	.+128    	; 0x29be <f_lseek+0x142>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    293e:	b1 e0       	ldi	r27, 0x01	; 1
    2940:	4b 1a       	sub	r4, r27
    2942:	51 08       	sbc	r5, r1
    2944:	61 08       	sbc	r6, r1
    2946:	71 08       	sbc	r7, r1

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    2948:	c7 01       	movw	r24, r14
    294a:	b6 01       	movw	r22, r12
    294c:	61 50       	subi	r22, 0x01	; 1
    294e:	71 09       	sbc	r23, r1
    2950:	81 09       	sbc	r24, r1
    2952:	91 09       	sbc	r25, r1
    2954:	a5 01       	movw	r20, r10
    2956:	94 01       	movw	r18, r8
    2958:	0e 94 20 36 	call	0x6c40	; 0x6c40 <__udivmodsi4>
    295c:	29 83       	std	Y+1, r18	; 0x01
    295e:	3a 83       	std	Y+2, r19	; 0x02
    2960:	4b 83       	std	Y+3, r20	; 0x03
    2962:	5c 83       	std	Y+4, r21	; 0x04
    2964:	c3 01       	movw	r24, r6
    2966:	b2 01       	movw	r22, r4
    2968:	a5 01       	movw	r20, r10
    296a:	94 01       	movw	r18, r8
    296c:	0e 94 20 36 	call	0x6c40	; 0x6c40 <__udivmodsi4>
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	9a 81       	ldd	r25, Y+2	; 0x02
    2974:	ab 81       	ldd	r26, Y+3	; 0x03
    2976:	bc 81       	ldd	r27, Y+4	; 0x04
    2978:	82 17       	cp	r24, r18
    297a:	93 07       	cpc	r25, r19
    297c:	a4 07       	cpc	r26, r20
    297e:	b5 07       	cpc	r27, r21
    2980:	f0 f0       	brcs	.+60     	; 0x29be <f_lseek+0x142>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    2982:	88 27       	eor	r24, r24
    2984:	99 27       	eor	r25, r25
    2986:	dc 01       	movw	r26, r24
    2988:	88 19       	sub	r24, r8
    298a:	99 09       	sbc	r25, r9
    298c:	aa 09       	sbc	r26, r10
    298e:	bb 09       	sbc	r27, r11
    2990:	48 22       	and	r4, r24
    2992:	59 22       	and	r5, r25
    2994:	6a 22       	and	r6, r26
    2996:	7b 22       	and	r7, r27
    2998:	ad 81       	ldd	r26, Y+5	; 0x05
    299a:	be 81       	ldd	r27, Y+6	; 0x06
    299c:	16 96       	adiw	r26, 0x06	; 6
    299e:	4d 92       	st	X+, r4
    29a0:	5d 92       	st	X+, r5
    29a2:	6d 92       	st	X+, r6
    29a4:	7c 92       	st	X, r7
    29a6:	19 97       	sbiw	r26, 0x09	; 9
				ofs -= fp->fptr;
    29a8:	c4 18       	sub	r12, r4
    29aa:	d5 08       	sbc	r13, r5
    29ac:	e6 08       	sbc	r14, r6
    29ae:	f7 08       	sbc	r15, r7
				clst = fp->curr_clust;
    29b0:	52 96       	adiw	r26, 0x12	; 18
    29b2:	4d 91       	ld	r20, X+
    29b4:	5d 91       	ld	r21, X+
    29b6:	6d 91       	ld	r22, X+
    29b8:	7c 91       	ld	r23, X
    29ba:	55 97       	sbiw	r26, 0x15	; 21
    29bc:	3d c0       	rjmp	.+122    	; 0x2a38 <f_lseek+0x1bc>
			} else {									/* When seek to back cluster, */
				clst = fp->org_clust;					/* start from the first cluster */
    29be:	ed 81       	ldd	r30, Y+5	; 0x05
    29c0:	fe 81       	ldd	r31, Y+6	; 0x06
    29c2:	46 85       	ldd	r20, Z+14	; 0x0e
    29c4:	57 85       	ldd	r21, Z+15	; 0x0f
    29c6:	60 89       	ldd	r22, Z+16	; 0x10
    29c8:	71 89       	ldd	r23, Z+17	; 0x11
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    29ca:	41 15       	cp	r20, r1
    29cc:	51 05       	cpc	r21, r1
    29ce:	61 05       	cpc	r22, r1
    29d0:	71 05       	cpc	r23, r1
    29d2:	61 f5       	brne	.+88     	; 0x2a2c <f_lseek+0x1b0>
					clst = create_chain(fp->fs, 0);
    29d4:	40 e0       	ldi	r20, 0x00	; 0
    29d6:	50 e0       	ldi	r21, 0x00	; 0
    29d8:	ba 01       	movw	r22, r20
    29da:	c8 01       	movw	r24, r16
    29dc:	0e 94 6d 09 	call	0x12da	; 0x12da <create_chain>
    29e0:	ab 01       	movw	r20, r22
    29e2:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    29e4:	41 30       	cpi	r20, 0x01	; 1
    29e6:	51 05       	cpc	r21, r1
    29e8:	61 05       	cpc	r22, r1
    29ea:	71 05       	cpc	r23, r1
    29ec:	51 f4       	brne	.+20     	; 0x2a02 <f_lseek+0x186>
    29ee:	ad 81       	ldd	r26, Y+5	; 0x05
    29f0:	be 81       	ldd	r27, Y+6	; 0x06
    29f2:	14 96       	adiw	r26, 0x04	; 4
    29f4:	8c 91       	ld	r24, X
    29f6:	14 97       	sbiw	r26, 0x04	; 4
    29f8:	80 68       	ori	r24, 0x80	; 128
    29fa:	14 96       	adiw	r26, 0x04	; 4
    29fc:	8c 93       	st	X, r24
    29fe:	82 e0       	ldi	r24, 0x02	; 2
    2a00:	fe c0       	rjmp	.+508    	; 0x2bfe <f_lseek+0x382>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2a02:	4f 3f       	cpi	r20, 0xFF	; 255
    2a04:	bf ef       	ldi	r27, 0xFF	; 255
    2a06:	5b 07       	cpc	r21, r27
    2a08:	6b 07       	cpc	r22, r27
    2a0a:	7b 07       	cpc	r23, r27
    2a0c:	39 f4       	brne	.+14     	; 0x2a1c <f_lseek+0x1a0>
    2a0e:	ed 81       	ldd	r30, Y+5	; 0x05
    2a10:	fe 81       	ldd	r31, Y+6	; 0x06
    2a12:	84 81       	ldd	r24, Z+4	; 0x04
    2a14:	80 68       	ori	r24, 0x80	; 128
    2a16:	84 83       	std	Z+4, r24	; 0x04
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	f1 c0       	rjmp	.+482    	; 0x2bfe <f_lseek+0x382>
					fp->org_clust = clst;
    2a1c:	ad 81       	ldd	r26, Y+5	; 0x05
    2a1e:	be 81       	ldd	r27, Y+6	; 0x06
    2a20:	1e 96       	adiw	r26, 0x0e	; 14
    2a22:	4d 93       	st	X+, r20
    2a24:	5d 93       	st	X+, r21
    2a26:	6d 93       	st	X+, r22
    2a28:	7c 93       	st	X, r23
    2a2a:	51 97       	sbiw	r26, 0x11	; 17
				}
#endif
				fp->curr_clust = clst;
    2a2c:	ed 81       	ldd	r30, Y+5	; 0x05
    2a2e:	fe 81       	ldd	r31, Y+6	; 0x06
    2a30:	42 8b       	std	Z+18, r20	; 0x12
    2a32:	53 8b       	std	Z+19, r21	; 0x13
    2a34:	64 8b       	std	Z+20, r22	; 0x14
    2a36:	75 8b       	std	Z+21, r23	; 0x15
			}
			if (clst != 0) {
    2a38:	41 15       	cp	r20, r1
    2a3a:	51 05       	cpc	r21, r1
    2a3c:	61 05       	cpc	r22, r1
    2a3e:	71 05       	cpc	r23, r1
    2a40:	09 f4       	brne	.+2      	; 0x2a44 <f_lseek+0x1c8>
    2a42:	a1 c0       	rjmp	.+322    	; 0x2b86 <f_lseek+0x30a>
				while (ofs > bcs) {						/* Cluster following loop */
    2a44:	8c 14       	cp	r8, r12
    2a46:	9d 04       	cpc	r9, r13
    2a48:	ae 04       	cpc	r10, r14
    2a4a:	bf 04       	cpc	r11, r15
    2a4c:	08 f0       	brcs	.+2      	; 0x2a50 <f_lseek+0x1d4>
    2a4e:	63 c0       	rjmp	.+198    	; 0x2b16 <f_lseek+0x29a>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    2a50:	ad 81       	ldd	r26, Y+5	; 0x05
    2a52:	be 81       	ldd	r27, Y+6	; 0x06
    2a54:	14 96       	adiw	r26, 0x04	; 4
    2a56:	8c 91       	ld	r24, X
    2a58:	14 97       	sbiw	r26, 0x04	; 4
    2a5a:	81 ff       	sbrs	r24, 1
    2a5c:	0c c0       	rjmp	.+24     	; 0x2a76 <f_lseek+0x1fa>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    2a5e:	8d 91       	ld	r24, X+
    2a60:	9c 91       	ld	r25, X
    2a62:	0e 94 6d 09 	call	0x12da	; 0x12da <create_chain>
    2a66:	ab 01       	movw	r20, r22
    2a68:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    2a6a:	41 15       	cp	r20, r1
    2a6c:	51 05       	cpc	r21, r1
    2a6e:	61 05       	cpc	r22, r1
    2a70:	71 05       	cpc	r23, r1
    2a72:	49 f4       	brne	.+18     	; 0x2a86 <f_lseek+0x20a>
    2a74:	4e c0       	rjmp	.+156    	; 0x2b12 <f_lseek+0x296>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    2a76:	ad 81       	ldd	r26, Y+5	; 0x05
    2a78:	be 81       	ldd	r27, Y+6	; 0x06
    2a7a:	8d 91       	ld	r24, X+
    2a7c:	9c 91       	ld	r25, X
    2a7e:	0e 94 b2 06 	call	0xd64	; 0xd64 <get_fat>
    2a82:	ab 01       	movw	r20, r22
    2a84:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2a86:	4f 3f       	cpi	r20, 0xFF	; 255
    2a88:	bf ef       	ldi	r27, 0xFF	; 255
    2a8a:	5b 07       	cpc	r21, r27
    2a8c:	6b 07       	cpc	r22, r27
    2a8e:	7b 07       	cpc	r23, r27
    2a90:	39 f4       	brne	.+14     	; 0x2aa0 <f_lseek+0x224>
    2a92:	ed 81       	ldd	r30, Y+5	; 0x05
    2a94:	fe 81       	ldd	r31, Y+6	; 0x06
    2a96:	84 81       	ldd	r24, Z+4	; 0x04
    2a98:	80 68       	ori	r24, 0x80	; 128
    2a9a:	84 83       	std	Z+4, r24	; 0x04
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	af c0       	rjmp	.+350    	; 0x2bfe <f_lseek+0x382>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    2aa0:	42 30       	cpi	r20, 0x02	; 2
    2aa2:	51 05       	cpc	r21, r1
    2aa4:	61 05       	cpc	r22, r1
    2aa6:	71 05       	cpc	r23, r1
    2aa8:	68 f0       	brcs	.+26     	; 0x2ac4 <f_lseek+0x248>
    2aaa:	ad 81       	ldd	r26, Y+5	; 0x05
    2aac:	be 81       	ldd	r27, Y+6	; 0x06
    2aae:	ed 91       	ld	r30, X+
    2ab0:	fc 91       	ld	r31, X
    2ab2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ab4:	93 8d       	ldd	r25, Z+27	; 0x1b
    2ab6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2ab8:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2aba:	48 17       	cp	r20, r24
    2abc:	59 07       	cpc	r21, r25
    2abe:	6a 07       	cpc	r22, r26
    2ac0:	7b 07       	cpc	r23, r27
    2ac2:	38 f0       	brcs	.+14     	; 0x2ad2 <f_lseek+0x256>
    2ac4:	ed 81       	ldd	r30, Y+5	; 0x05
    2ac6:	fe 81       	ldd	r31, Y+6	; 0x06
    2ac8:	84 81       	ldd	r24, Z+4	; 0x04
    2aca:	80 68       	ori	r24, 0x80	; 128
    2acc:	84 83       	std	Z+4, r24	; 0x04
    2ace:	82 e0       	ldi	r24, 0x02	; 2
    2ad0:	96 c0       	rjmp	.+300    	; 0x2bfe <f_lseek+0x382>
					fp->curr_clust = clst;
    2ad2:	ad 81       	ldd	r26, Y+5	; 0x05
    2ad4:	be 81       	ldd	r27, Y+6	; 0x06
    2ad6:	52 96       	adiw	r26, 0x12	; 18
    2ad8:	4d 93       	st	X+, r20
    2ada:	5d 93       	st	X+, r21
    2adc:	6d 93       	st	X+, r22
    2ade:	7c 93       	st	X, r23
    2ae0:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    2ae2:	fd 01       	movw	r30, r26
    2ae4:	86 81       	ldd	r24, Z+6	; 0x06
    2ae6:	97 81       	ldd	r25, Z+7	; 0x07
    2ae8:	a0 85       	ldd	r26, Z+8	; 0x08
    2aea:	b1 85       	ldd	r27, Z+9	; 0x09
    2aec:	88 0d       	add	r24, r8
    2aee:	99 1d       	adc	r25, r9
    2af0:	aa 1d       	adc	r26, r10
    2af2:	bb 1d       	adc	r27, r11
    2af4:	86 83       	std	Z+6, r24	; 0x06
    2af6:	97 83       	std	Z+7, r25	; 0x07
    2af8:	a0 87       	std	Z+8, r26	; 0x08
    2afa:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    2afc:	c8 18       	sub	r12, r8
    2afe:	d9 08       	sbc	r13, r9
    2b00:	ea 08       	sbc	r14, r10
    2b02:	fb 08       	sbc	r15, r11
				}
#endif
				fp->curr_clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    2b04:	8c 14       	cp	r8, r12
    2b06:	9d 04       	cpc	r9, r13
    2b08:	ae 04       	cpc	r10, r14
    2b0a:	bf 04       	cpc	r11, r15
    2b0c:	08 f4       	brcc	.+2      	; 0x2b10 <f_lseek+0x294>
    2b0e:	a0 cf       	rjmp	.-192    	; 0x2a50 <f_lseek+0x1d4>
    2b10:	02 c0       	rjmp	.+4      	; 0x2b16 <f_lseek+0x29a>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
    2b12:	75 01       	movw	r14, r10
    2b14:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->curr_clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    2b16:	ed 81       	ldd	r30, Y+5	; 0x05
    2b18:	fe 81       	ldd	r31, Y+6	; 0x06
    2b1a:	86 81       	ldd	r24, Z+6	; 0x06
    2b1c:	97 81       	ldd	r25, Z+7	; 0x07
    2b1e:	a0 85       	ldd	r26, Z+8	; 0x08
    2b20:	b1 85       	ldd	r27, Z+9	; 0x09
    2b22:	8c 0d       	add	r24, r12
    2b24:	9d 1d       	adc	r25, r13
    2b26:	ae 1d       	adc	r26, r14
    2b28:	bf 1d       	adc	r27, r15
    2b2a:	86 83       	std	Z+6, r24	; 0x06
    2b2c:	97 83       	std	Z+7, r25	; 0x07
    2b2e:	a0 87       	std	Z+8, r26	; 0x08
    2b30:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    2b32:	d7 01       	movw	r26, r14
    2b34:	c6 01       	movw	r24, r12
    2b36:	91 70       	andi	r25, 0x01	; 1
    2b38:	aa 27       	eor	r26, r26
    2b3a:	bb 27       	eor	r27, r27
    2b3c:	89 2b       	or	r24, r25
    2b3e:	8a 2b       	or	r24, r26
    2b40:	8b 2b       	or	r24, r27
    2b42:	29 f1       	breq	.+74     	; 0x2b8e <f_lseek+0x312>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    2b44:	80 81       	ld	r24, Z
    2b46:	91 81       	ldd	r25, Z+1	; 0x01
    2b48:	0e 94 8a 06 	call	0xd14	; 0xd14 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    2b4c:	61 15       	cp	r22, r1
    2b4e:	71 05       	cpc	r23, r1
    2b50:	81 05       	cpc	r24, r1
    2b52:	91 05       	cpc	r25, r1
    2b54:	51 f4       	brne	.+20     	; 0x2b6a <f_lseek+0x2ee>
    2b56:	ad 81       	ldd	r26, Y+5	; 0x05
    2b58:	be 81       	ldd	r27, Y+6	; 0x06
    2b5a:	14 96       	adiw	r26, 0x04	; 4
    2b5c:	8c 91       	ld	r24, X
    2b5e:	14 97       	sbiw	r26, 0x04	; 4
    2b60:	80 68       	ori	r24, 0x80	; 128
    2b62:	14 96       	adiw	r26, 0x04	; 4
    2b64:	8c 93       	st	X, r24
    2b66:	82 e0       	ldi	r24, 0x02	; 2
    2b68:	4a c0       	rjmp	.+148    	; 0x2bfe <f_lseek+0x382>
					nsect += ofs / SS(fp->fs);
    2b6a:	0b 2e       	mov	r0, r27
    2b6c:	b9 e0       	ldi	r27, 0x09	; 9
    2b6e:	f6 94       	lsr	r15
    2b70:	e7 94       	ror	r14
    2b72:	d7 94       	ror	r13
    2b74:	c7 94       	ror	r12
    2b76:	ba 95       	dec	r27
    2b78:	d1 f7       	brne	.-12     	; 0x2b6e <f_lseek+0x2f2>
    2b7a:	b0 2d       	mov	r27, r0
    2b7c:	c6 0e       	add	r12, r22
    2b7e:	d7 1e       	adc	r13, r23
    2b80:	e8 1e       	adc	r14, r24
    2b82:	f9 1e       	adc	r15, r25
    2b84:	07 c0       	rjmp	.+14     	; 0x2b94 <f_lseek+0x318>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    2b86:	c1 2c       	mov	r12, r1
    2b88:	d1 2c       	mov	r13, r1
    2b8a:	76 01       	movw	r14, r12
    2b8c:	03 c0       	rjmp	.+6      	; 0x2b94 <f_lseek+0x318>
    2b8e:	c1 2c       	mov	r12, r1
    2b90:	d1 2c       	mov	r13, r1
    2b92:	76 01       	movw	r14, r12
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    2b94:	ed 81       	ldd	r30, Y+5	; 0x05
    2b96:	fe 81       	ldd	r31, Y+6	; 0x06
    2b98:	86 81       	ldd	r24, Z+6	; 0x06
    2b9a:	97 81       	ldd	r25, Z+7	; 0x07
    2b9c:	a0 85       	ldd	r26, Z+8	; 0x08
    2b9e:	b1 85       	ldd	r27, Z+9	; 0x09
    2ba0:	ac 01       	movw	r20, r24
    2ba2:	bd 01       	movw	r22, r26
    2ba4:	51 70       	andi	r21, 0x01	; 1
    2ba6:	66 27       	eor	r22, r22
    2ba8:	77 27       	eor	r23, r23
    2baa:	45 2b       	or	r20, r21
    2bac:	46 2b       	or	r20, r22
    2bae:	47 2b       	or	r20, r23
    2bb0:	69 f0       	breq	.+26     	; 0x2bcc <f_lseek+0x350>
    2bb2:	46 89       	ldd	r20, Z+22	; 0x16
    2bb4:	57 89       	ldd	r21, Z+23	; 0x17
    2bb6:	60 8d       	ldd	r22, Z+24	; 0x18
    2bb8:	71 8d       	ldd	r23, Z+25	; 0x19
    2bba:	c4 16       	cp	r12, r20
    2bbc:	d5 06       	cpc	r13, r21
    2bbe:	e6 06       	cpc	r14, r22
    2bc0:	f7 06       	cpc	r15, r23
    2bc2:	21 f0       	breq	.+8      	; 0x2bcc <f_lseek+0x350>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    2bc4:	c6 8a       	std	Z+22, r12	; 0x16
    2bc6:	d7 8a       	std	Z+23, r13	; 0x17
    2bc8:	e0 8e       	std	Z+24, r14	; 0x18
    2bca:	f1 8e       	std	Z+25, r15	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set change flag if the file size is extended */
    2bcc:	ed 81       	ldd	r30, Y+5	; 0x05
    2bce:	fe 81       	ldd	r31, Y+6	; 0x06
    2bd0:	42 85       	ldd	r20, Z+10	; 0x0a
    2bd2:	53 85       	ldd	r21, Z+11	; 0x0b
    2bd4:	64 85       	ldd	r22, Z+12	; 0x0c
    2bd6:	75 85       	ldd	r23, Z+13	; 0x0d
    2bd8:	48 17       	cp	r20, r24
    2bda:	59 07       	cpc	r21, r25
    2bdc:	6a 07       	cpc	r22, r26
    2bde:	7b 07       	cpc	r23, r27
    2be0:	68 f4       	brcc	.+26     	; 0x2bfc <f_lseek+0x380>
			fp->fsize = fp->fptr;
    2be2:	82 87       	std	Z+10, r24	; 0x0a
    2be4:	93 87       	std	Z+11, r25	; 0x0b
    2be6:	a4 87       	std	Z+12, r26	; 0x0c
    2be8:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    2bea:	84 81       	ldd	r24, Z+4	; 0x04
    2bec:	80 62       	ori	r24, 0x20	; 32
    2bee:	84 83       	std	Z+4, r24	; 0x04
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	05 c0       	rjmp	.+10     	; 0x2bfe <f_lseek+0x382>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    2bf4:	82 e0       	ldi	r24, 0x02	; 2
    2bf6:	03 c0       	rjmp	.+6      	; 0x2bfe <f_lseek+0x382>
			fp->flag |= FA__WRITTEN;
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	01 c0       	rjmp	.+2      	; 0x2bfe <f_lseek+0x382>
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
}
    2bfe:	26 96       	adiw	r28, 0x06	; 6
    2c00:	0f b6       	in	r0, 0x3f	; 63
    2c02:	f8 94       	cli
    2c04:	de bf       	out	0x3e, r29	; 62
    2c06:	0f be       	out	0x3f, r0	; 63
    2c08:	cd bf       	out	0x3d, r28	; 61
    2c0a:	df 91       	pop	r29
    2c0c:	cf 91       	pop	r28
    2c0e:	1f 91       	pop	r17
    2c10:	0f 91       	pop	r16
    2c12:	ff 90       	pop	r15
    2c14:	ef 90       	pop	r14
    2c16:	df 90       	pop	r13
    2c18:	cf 90       	pop	r12
    2c1a:	bf 90       	pop	r11
    2c1c:	af 90       	pop	r10
    2c1e:	9f 90       	pop	r9
    2c20:	8f 90       	pop	r8
    2c22:	7f 90       	pop	r7
    2c24:	6f 90       	pop	r6
    2c26:	5f 90       	pop	r5
    2c28:	4f 90       	pop	r4
    2c2a:	08 95       	ret

00002c2c <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
    2c2c:	0f 93       	push	r16
    2c2e:	1f 93       	push	r17
    2c30:	cf 93       	push	r28
    2c32:	df 93       	push	r29
    2c34:	cd b7       	in	r28, 0x3d	; 61
    2c36:	de b7       	in	r29, 0x3e	; 62
    2c38:	2e 97       	sbiw	r28, 0x0e	; 14
    2c3a:	0f b6       	in	r0, 0x3f	; 63
    2c3c:	f8 94       	cli
    2c3e:	de bf       	out	0x3e, r29	; 62
    2c40:	0f be       	out	0x3f, r0	; 63
    2c42:	cd bf       	out	0x3d, r28	; 61
    2c44:	8c 01       	movw	r16, r24
    2c46:	7e 87       	std	Y+14, r23	; 0x0e
    2c48:	6d 87       	std	Y+13, r22	; 0x0d
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
    2c4a:	40 e0       	ldi	r20, 0x00	; 0
    2c4c:	bc 01       	movw	r22, r24
    2c4e:	ce 01       	movw	r24, r28
    2c50:	0d 96       	adiw	r24, 0x0d	; 13
    2c52:	0e 94 3f 03 	call	0x67e	; 0x67e <chk_mounted>
	if (res == FR_OK) {
    2c56:	81 11       	cpse	r24, r1
    2c58:	43 c0       	rjmp	.+134    	; 0x2ce0 <f_opendir+0xb4>
		INIT_BUF(*dj);
    2c5a:	ce 01       	movw	r24, r28
    2c5c:	01 96       	adiw	r24, 0x01	; 1
    2c5e:	d8 01       	movw	r26, r16
    2c60:	55 96       	adiw	r26, 0x15	; 21
    2c62:	9c 93       	st	X, r25
    2c64:	8e 93       	st	-X, r24
    2c66:	54 97       	sbiw	r26, 0x14	; 20
		res = follow_path(dj, path);			/* Follow the path to the directory */
    2c68:	6d 85       	ldd	r22, Y+13	; 0x0d
    2c6a:	7e 85       	ldd	r23, Y+14	; 0x0e
    2c6c:	c8 01       	movw	r24, r16
    2c6e:	0e 94 9c 0b 	call	0x1738	; 0x1738 <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
    2c72:	81 11       	cpse	r24, r1
    2c74:	1f c0       	rjmp	.+62     	; 0x2cb4 <f_opendir+0x88>
			if (dj->dir) {						/* It is not the root dir */
    2c76:	d8 01       	movw	r26, r16
    2c78:	52 96       	adiw	r26, 0x12	; 18
    2c7a:	ed 91       	ld	r30, X+
    2c7c:	fc 91       	ld	r31, X
    2c7e:	53 97       	sbiw	r26, 0x13	; 19
    2c80:	30 97       	sbiw	r30, 0x00	; 0
    2c82:	f1 f0       	breq	.+60     	; 0x2cc0 <f_opendir+0x94>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    2c84:	83 85       	ldd	r24, Z+11	; 0x0b
    2c86:	84 ff       	sbrs	r24, 4
    2c88:	19 c0       	rjmp	.+50     	; 0x2cbc <f_opendir+0x90>
					dj->sclust = LD_CLUST(dj->dir);
    2c8a:	84 89       	ldd	r24, Z+20	; 0x14
    2c8c:	95 89       	ldd	r25, Z+21	; 0x15
    2c8e:	a0 e0       	ldi	r26, 0x00	; 0
    2c90:	b0 e0       	ldi	r27, 0x00	; 0
    2c92:	dc 01       	movw	r26, r24
    2c94:	99 27       	eor	r25, r25
    2c96:	88 27       	eor	r24, r24
    2c98:	42 8d       	ldd	r20, Z+26	; 0x1a
    2c9a:	53 8d       	ldd	r21, Z+27	; 0x1b
    2c9c:	60 e0       	ldi	r22, 0x00	; 0
    2c9e:	70 e0       	ldi	r23, 0x00	; 0
    2ca0:	84 2b       	or	r24, r20
    2ca2:	95 2b       	or	r25, r21
    2ca4:	a6 2b       	or	r26, r22
    2ca6:	b7 2b       	or	r27, r23
    2ca8:	f8 01       	movw	r30, r16
    2caa:	86 83       	std	Z+6, r24	; 0x06
    2cac:	97 83       	std	Z+7, r25	; 0x07
    2cae:	a0 87       	std	Z+8, r26	; 0x08
    2cb0:	b1 87       	std	Z+9, r27	; 0x09
    2cb2:	06 c0       	rjmp	.+12     	; 0x2cc0 <f_opendir+0x94>
			if (res == FR_OK) {
				dj->id = dj->fs->id;
				res = dir_sdi(dj, 0);			/* Rewind dir */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    2cb4:	84 30       	cpi	r24, 0x04	; 4
    2cb6:	a1 f4       	brne	.+40     	; 0x2ce0 <f_opendir+0xb4>
    2cb8:	85 e0       	ldi	r24, 0x05	; 5
    2cba:	12 c0       	rjmp	.+36     	; 0x2ce0 <f_opendir+0xb4>
		if (res == FR_OK) {						/* Follow completed */
			if (dj->dir) {						/* It is not the root dir */
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
					dj->sclust = LD_CLUST(dj->dir);
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
    2cbc:	85 e0       	ldi	r24, 0x05	; 5
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj->fs, res);
    2cbe:	10 c0       	rjmp	.+32     	; 0x2ce0 <f_opendir+0xb4>
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    2cc0:	d8 01       	movw	r26, r16
    2cc2:	ed 91       	ld	r30, X+
    2cc4:	fc 91       	ld	r31, X
    2cc6:	11 97       	sbiw	r26, 0x01	; 1
    2cc8:	86 81       	ldd	r24, Z+6	; 0x06
    2cca:	97 81       	ldd	r25, Z+7	; 0x07
    2ccc:	13 96       	adiw	r26, 0x03	; 3
    2cce:	9c 93       	st	X, r25
    2cd0:	8e 93       	st	-X, r24
    2cd2:	12 97       	sbiw	r26, 0x02	; 2
				res = dir_sdi(dj, 0);			/* Rewind dir */
    2cd4:	60 e0       	ldi	r22, 0x00	; 0
    2cd6:	70 e0       	ldi	r23, 0x00	; 0
    2cd8:	c8 01       	movw	r24, r16
    2cda:	0e 94 95 07 	call	0xf2a	; 0xf2a <dir_sdi>
    2cde:	ea cf       	rjmp	.-44     	; 0x2cb4 <f_opendir+0x88>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj->fs, res);
}
    2ce0:	2e 96       	adiw	r28, 0x0e	; 14
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	f8 94       	cli
    2ce6:	de bf       	out	0x3e, r29	; 62
    2ce8:	0f be       	out	0x3f, r0	; 63
    2cea:	cd bf       	out	0x3d, r28	; 61
    2cec:	df 91       	pop	r29
    2cee:	cf 91       	pop	r28
    2cf0:	1f 91       	pop	r17
    2cf2:	0f 91       	pop	r16
    2cf4:	08 95       	ret

00002cf6 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    2cf6:	cf 92       	push	r12
    2cf8:	df 92       	push	r13
    2cfa:	ff 92       	push	r15
    2cfc:	0f 93       	push	r16
    2cfe:	1f 93       	push	r17
    2d00:	cf 93       	push	r28
    2d02:	df 93       	push	r29
    2d04:	cd b7       	in	r28, 0x3d	; 61
    2d06:	de b7       	in	r29, 0x3e	; 62
    2d08:	2c 97       	sbiw	r28, 0x0c	; 12
    2d0a:	0f b6       	in	r0, 0x3f	; 63
    2d0c:	f8 94       	cli
    2d0e:	de bf       	out	0x3e, r29	; 62
    2d10:	0f be       	out	0x3f, r0	; 63
    2d12:	cd bf       	out	0x3d, r28	; 61
    2d14:	8c 01       	movw	r16, r24
    2d16:	6b 01       	movw	r12, r22
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    2d18:	fc 01       	movw	r30, r24
    2d1a:	62 81       	ldd	r22, Z+2	; 0x02
    2d1c:	73 81       	ldd	r23, Z+3	; 0x03
    2d1e:	80 81       	ld	r24, Z
    2d20:	91 81       	ldd	r25, Z+1	; 0x01
    2d22:	0e 94 25 03 	call	0x64a	; 0x64a <validate>
    2d26:	f8 2e       	mov	r15, r24
	if (res == FR_OK) {
    2d28:	81 11       	cpse	r24, r1
    2d2a:	30 c0       	rjmp	.+96     	; 0x2d8c <f_readdir+0x96>
		if (!fno) {
    2d2c:	c1 14       	cp	r12, r1
    2d2e:	d1 04       	cpc	r13, r1
    2d30:	39 f4       	brne	.+14     	; 0x2d40 <f_readdir+0x4a>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
    2d32:	60 e0       	ldi	r22, 0x00	; 0
    2d34:	70 e0       	ldi	r23, 0x00	; 0
    2d36:	c8 01       	movw	r24, r16
    2d38:	0e 94 95 07 	call	0xf2a	; 0xf2a <dir_sdi>
    2d3c:	f8 2e       	mov	r15, r24
    2d3e:	26 c0       	rjmp	.+76     	; 0x2d8c <f_readdir+0x96>
		} else {
			INIT_BUF(*dj);
    2d40:	ce 01       	movw	r24, r28
    2d42:	01 96       	adiw	r24, 0x01	; 1
    2d44:	f8 01       	movw	r30, r16
    2d46:	95 8b       	std	Z+21, r25	; 0x15
    2d48:	84 8b       	std	Z+20, r24	; 0x14
			res = dir_read(dj);				/* Read an directory item */
    2d4a:	c8 01       	movw	r24, r16
    2d4c:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <dir_read>
			if (res == FR_NO_FILE) {		/* Reached end of dir */
    2d50:	84 30       	cpi	r24, 0x04	; 4
    2d52:	31 f4       	brne	.+12     	; 0x2d60 <f_readdir+0x6a>
				dj->sect = 0;
    2d54:	f8 01       	movw	r30, r16
    2d56:	16 86       	std	Z+14, r1	; 0x0e
    2d58:	17 86       	std	Z+15, r1	; 0x0f
    2d5a:	10 8a       	std	Z+16, r1	; 0x10
    2d5c:	11 8a       	std	Z+17, r1	; 0x11
    2d5e:	02 c0       	rjmp	.+4      	; 0x2d64 <f_readdir+0x6e>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    2d60:	81 11       	cpse	r24, r1
    2d62:	11 c0       	rjmp	.+34     	; 0x2d86 <f_readdir+0x90>
				get_fileinfo(dj, fno);		/* Get the object information */
    2d64:	b6 01       	movw	r22, r12
    2d66:	c8 01       	movw	r24, r16
    2d68:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <get_fileinfo>
				res = dir_next(dj, 0);		/* Increment index for next */
    2d6c:	60 e0       	ldi	r22, 0x00	; 0
    2d6e:	70 e0       	ldi	r23, 0x00	; 0
    2d70:	c8 01       	movw	r24, r16
    2d72:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <dir_next>
				if (res == FR_NO_FILE) {
    2d76:	84 30       	cpi	r24, 0x04	; 4
    2d78:	41 f4       	brne	.+16     	; 0x2d8a <f_readdir+0x94>
					dj->sect = 0;
    2d7a:	f8 01       	movw	r30, r16
    2d7c:	16 86       	std	Z+14, r1	; 0x0e
    2d7e:	17 86       	std	Z+15, r1	; 0x0f
    2d80:	10 8a       	std	Z+16, r1	; 0x10
    2d82:	11 8a       	std	Z+17, r1	; 0x11
    2d84:	03 c0       	rjmp	.+6      	; 0x2d8c <f_readdir+0x96>
	if (res == FR_OK) {
		if (!fno) {
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
		} else {
			INIT_BUF(*dj);
			res = dir_read(dj);				/* Read an directory item */
    2d86:	f8 2e       	mov	r15, r24
    2d88:	01 c0       	rjmp	.+2      	; 0x2d8c <f_readdir+0x96>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, 0);		/* Increment index for next */
    2d8a:	f8 2e       	mov	r15, r24
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
    2d8c:	8f 2d       	mov	r24, r15
    2d8e:	2c 96       	adiw	r28, 0x0c	; 12
    2d90:	0f b6       	in	r0, 0x3f	; 63
    2d92:	f8 94       	cli
    2d94:	de bf       	out	0x3e, r29	; 62
    2d96:	0f be       	out	0x3f, r0	; 63
    2d98:	cd bf       	out	0x3d, r28	; 61
    2d9a:	df 91       	pop	r29
    2d9c:	cf 91       	pop	r28
    2d9e:	1f 91       	pop	r17
    2da0:	0f 91       	pop	r16
    2da2:	ff 90       	pop	r15
    2da4:	df 90       	pop	r13
    2da6:	cf 90       	pop	r12
    2da8:	08 95       	ret

00002daa <rx_handler>:
	return res;
}

void createSoundList(FIL *file,unsigned char *num){
	(*num) = file->fsize / sizeof(struct sound_entry); 
}
    2daa:	8e 3f       	cpi	r24, 0xFE	; 254
    2dac:	49 f0       	breq	.+18     	; 0x2dc0 <rx_handler+0x16>
    2dae:	68 2f       	mov	r22, r24
    2db0:	87 ea       	ldi	r24, 0xA7	; 167
    2db2:	94 e0       	ldi	r25, 0x04	; 4
    2db4:	0e 94 a2 01 	call	0x344	; 0x344 <bufferAddToEnd>
    2db8:	81 11       	cpse	r24, r1
    2dba:	02 c0       	rjmp	.+4      	; 0x2dc0 <rx_handler+0x16>
    2dbc:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <uartFlushReceiveBuffer>
    2dc0:	08 95       	ret

00002dc2 <get_fattime>:
    2dc2:	60 e0       	ldi	r22, 0x00	; 0
    2dc4:	70 e0       	ldi	r23, 0x00	; 0
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	08 95       	ret

00002dca <configTimers>:
    2dca:	83 b7       	in	r24, 0x33	; 51
    2dcc:	82 60       	ori	r24, 0x02	; 2
    2dce:	83 bf       	out	0x33, r24	; 51
    2dd0:	83 b7       	in	r24, 0x33	; 51
    2dd2:	81 60       	ori	r24, 0x01	; 1
    2dd4:	83 bf       	out	0x33, r24	; 51
    2dd6:	89 b7       	in	r24, 0x39	; 57
    2dd8:	81 60       	ori	r24, 0x01	; 1
    2dda:	89 bf       	out	0x39, r24	; 57
    2ddc:	8c e9       	ldi	r24, 0x9C	; 156
    2dde:	83 bd       	out	0x23, r24	; 35
    2de0:	85 b5       	in	r24, 0x25	; 37
    2de2:	88 60       	ori	r24, 0x08	; 8
    2de4:	85 bd       	out	0x25, r24	; 37
    2de6:	89 b7       	in	r24, 0x39	; 57
    2de8:	80 68       	ori	r24, 0x80	; 128
    2dea:	89 bf       	out	0x39, r24	; 57
    2dec:	85 b5       	in	r24, 0x25	; 37
    2dee:	87 60       	ori	r24, 0x07	; 7
    2df0:	85 bd       	out	0x25, r24	; 37
    2df2:	08 95       	ret

00002df4 <setInputs>:
    2df4:	d8 98       	cbi	0x1b, 0	; 27
    2df6:	d0 98       	cbi	0x1a, 0	; 26
    2df8:	b8 98       	cbi	0x17, 0	; 23
    2dfa:	b9 98       	cbi	0x17, 1	; 23
    2dfc:	ba 98       	cbi	0x17, 2	; 23
    2dfe:	bb 98       	cbi	0x17, 3	; 23
    2e00:	c0 9a       	sbi	0x18, 0	; 24
    2e02:	c1 9a       	sbi	0x18, 1	; 24
    2e04:	c2 9a       	sbi	0x18, 2	; 24
    2e06:	c3 9a       	sbi	0x18, 3	; 24
    2e08:	a6 98       	cbi	0x14, 6	; 20
    2e0a:	a7 98       	cbi	0x14, 7	; 20
    2e0c:	d1 98       	cbi	0x1a, 1	; 26
    2e0e:	d2 98       	cbi	0x1a, 2	; 26
    2e10:	d3 98       	cbi	0x1a, 3	; 26
    2e12:	ae 9a       	sbi	0x15, 6	; 21
    2e14:	af 9a       	sbi	0x15, 7	; 21
    2e16:	d9 9a       	sbi	0x1b, 1	; 27
    2e18:	df 9a       	sbi	0x1b, 7	; 27
    2e1a:	db 9a       	sbi	0x1b, 3	; 27
    2e1c:	8f 98       	cbi	0x11, 7	; 17
    2e1e:	97 9a       	sbi	0x12, 7	; 18
    2e20:	08 95       	ret

00002e22 <readInputs>:
    2e22:	cf 93       	push	r28
    2e24:	df 93       	push	r29
    2e26:	ec 01       	movw	r28, r24
    2e28:	80 e0       	ldi	r24, 0x00	; 0
    2e2a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <a2dConvert8bit>
    2e2e:	8a 87       	std	Y+10, r24	; 0x0a
    2e30:	26 b3       	in	r18, 0x16	; 22
    2e32:	91 e0       	ldi	r25, 0x01	; 1
    2e34:	29 27       	eor	r18, r25
    2e36:	21 70       	andi	r18, 0x01	; 1
    2e38:	28 83       	st	Y, r18
    2e3a:	26 b3       	in	r18, 0x16	; 22
    2e3c:	26 95       	lsr	r18
    2e3e:	21 70       	andi	r18, 0x01	; 1
    2e40:	29 27       	eor	r18, r25
    2e42:	29 83       	std	Y+1, r18	; 0x01
    2e44:	26 b3       	in	r18, 0x16	; 22
    2e46:	22 fb       	bst	r18, 2
    2e48:	22 27       	eor	r18, r18
    2e4a:	20 f9       	bld	r18, 0
    2e4c:	29 27       	eor	r18, r25
    2e4e:	2a 83       	std	Y+2, r18	; 0x02
    2e50:	26 b3       	in	r18, 0x16	; 22
    2e52:	23 fb       	bst	r18, 3
    2e54:	22 27       	eor	r18, r18
    2e56:	20 f9       	bld	r18, 0
    2e58:	29 27       	eor	r18, r25
    2e5a:	2b 83       	std	Y+3, r18	; 0x03
    2e5c:	23 b3       	in	r18, 0x13	; 19
    2e5e:	26 fb       	bst	r18, 6
    2e60:	22 27       	eor	r18, r18
    2e62:	20 f9       	bld	r18, 0
    2e64:	29 27       	eor	r18, r25
    2e66:	2c 83       	std	Y+4, r18	; 0x04
    2e68:	23 b3       	in	r18, 0x13	; 19
    2e6a:	20 95       	com	r18
    2e6c:	22 1f       	adc	r18, r18
    2e6e:	22 27       	eor	r18, r18
    2e70:	22 1f       	adc	r18, r18
    2e72:	2d 83       	std	Y+5, r18	; 0x05
    2e74:	29 b3       	in	r18, 0x19	; 25
    2e76:	26 95       	lsr	r18
    2e78:	21 70       	andi	r18, 0x01	; 1
    2e7a:	29 27       	eor	r18, r25
    2e7c:	2e 83       	std	Y+6, r18	; 0x06
    2e7e:	29 b3       	in	r18, 0x19	; 25
    2e80:	22 fb       	bst	r18, 2
    2e82:	22 27       	eor	r18, r18
    2e84:	20 f9       	bld	r18, 0
    2e86:	29 27       	eor	r18, r25
    2e88:	2f 83       	std	Y+7, r18	; 0x07
    2e8a:	29 b3       	in	r18, 0x19	; 25
    2e8c:	23 fb       	bst	r18, 3
    2e8e:	22 27       	eor	r18, r18
    2e90:	20 f9       	bld	r18, 0
    2e92:	92 27       	eor	r25, r18
    2e94:	98 87       	std	Y+8, r25	; 0x08
    2e96:	90 b3       	in	r25, 0x10	; 16
    2e98:	90 95       	com	r25
    2e9a:	99 1f       	adc	r25, r25
    2e9c:	99 27       	eor	r25, r25
    2e9e:	99 1f       	adc	r25, r25
    2ea0:	99 87       	std	Y+9, r25	; 0x09
    2ea2:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <inp_old.2539+0x9>
    2ea6:	92 17       	cp	r25, r18
    2ea8:	21 f0       	breq	.+8      	; 0x2eb2 <readInputs+0x90>
    2eaa:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <inp_old.2539+0x9>
    2eae:	89 e0       	ldi	r24, 0x09	; 9
    2eb0:	23 c0       	rjmp	.+70     	; 0x2ef8 <readInputs+0xd6>
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	29 2f       	mov	r18, r25
    2eb6:	09 2e       	mov	r0, r25
    2eb8:	00 0c       	add	r0, r0
    2eba:	33 0b       	sbc	r19, r19
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	e2 0f       	add	r30, r18
    2ec0:	f3 1f       	adc	r31, r19
    2ec2:	40 81       	ld	r20, Z
    2ec4:	f9 01       	movw	r30, r18
    2ec6:	ef 57       	subi	r30, 0x7F	; 127
    2ec8:	fe 4f       	sbci	r31, 0xFE	; 254
    2eca:	50 81       	ld	r21, Z
    2ecc:	45 17       	cp	r20, r21
    2ece:	31 f0       	breq	.+12     	; 0x2edc <readInputs+0xba>
    2ed0:	f9 01       	movw	r30, r18
    2ed2:	ef 57       	subi	r30, 0x7F	; 127
    2ed4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed6:	40 83       	st	Z, r20
    2ed8:	41 30       	cpi	r20, 0x01	; 1
    2eda:	59 f0       	breq	.+22     	; 0x2ef2 <readInputs+0xd0>
    2edc:	9f 5f       	subi	r25, 0xFF	; 255
    2ede:	9a 30       	cpi	r25, 0x0A	; 10
    2ee0:	4c f3       	brlt	.-46     	; 0x2eb4 <readInputs+0x92>
    2ee2:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <inp_old.2539+0xa>
    2ee6:	89 17       	cp	r24, r25
    2ee8:	31 f0       	breq	.+12     	; 0x2ef6 <readInputs+0xd4>
    2eea:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <inp_old.2539+0xa>
    2eee:	8a e0       	ldi	r24, 0x0A	; 10
    2ef0:	03 c0       	rjmp	.+6      	; 0x2ef8 <readInputs+0xd6>
    2ef2:	89 2f       	mov	r24, r25
    2ef4:	01 c0       	rjmp	.+2      	; 0x2ef8 <readInputs+0xd6>
    2ef6:	8f ef       	ldi	r24, 0xFF	; 255
    2ef8:	df 91       	pop	r29
    2efa:	cf 91       	pop	r28
    2efc:	08 95       	ret

00002efe <addMillis>:
    2efe:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <timer0_millis>
    2f02:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <timer0_millis+0x1>
    2f06:	a0 91 9f 01 	lds	r26, 0x019F	; 0x80019f <timer0_millis+0x2>
    2f0a:	b0 91 a0 01 	lds	r27, 0x01A0	; 0x8001a0 <timer0_millis+0x3>
    2f0e:	30 91 9c 01 	lds	r19, 0x019C	; 0x80019c <timer0_fract>
    2f12:	23 e0       	ldi	r18, 0x03	; 3
    2f14:	23 0f       	add	r18, r19
    2f16:	2d 37       	cpi	r18, 0x7D	; 125
    2f18:	20 f4       	brcc	.+8      	; 0x2f22 <addMillis+0x24>
    2f1a:	01 96       	adiw	r24, 0x01	; 1
    2f1c:	a1 1d       	adc	r26, r1
    2f1e:	b1 1d       	adc	r27, r1
    2f20:	05 c0       	rjmp	.+10     	; 0x2f2c <addMillis+0x2e>
    2f22:	26 e8       	ldi	r18, 0x86	; 134
    2f24:	23 0f       	add	r18, r19
    2f26:	02 96       	adiw	r24, 0x02	; 2
    2f28:	a1 1d       	adc	r26, r1
    2f2a:	b1 1d       	adc	r27, r1
    2f2c:	20 93 9c 01 	sts	0x019C, r18	; 0x80019c <timer0_fract>
    2f30:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <timer0_millis>
    2f34:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <timer0_millis+0x1>
    2f38:	a0 93 9f 01 	sts	0x019F, r26	; 0x80019f <timer0_millis+0x2>
    2f3c:	b0 93 a0 01 	sts	0x01A0, r27	; 0x8001a0 <timer0_millis+0x3>
    2f40:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <timer0_overflow_count>
    2f44:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <timer0_overflow_count+0x1>
    2f48:	a0 91 a3 01 	lds	r26, 0x01A3	; 0x8001a3 <timer0_overflow_count+0x2>
    2f4c:	b0 91 a4 01 	lds	r27, 0x01A4	; 0x8001a4 <timer0_overflow_count+0x3>
    2f50:	01 96       	adiw	r24, 0x01	; 1
    2f52:	a1 1d       	adc	r26, r1
    2f54:	b1 1d       	adc	r27, r1
    2f56:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <timer0_overflow_count>
    2f5a:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <timer0_overflow_count+0x1>
    2f5e:	a0 93 a3 01 	sts	0x01A3, r26	; 0x8001a3 <timer0_overflow_count+0x2>
    2f62:	b0 93 a4 01 	sts	0x01A4, r27	; 0x8001a4 <timer0_overflow_count+0x3>
    2f66:	08 95       	ret

00002f68 <getMicros>:
    2f68:	3f b7       	in	r19, 0x3f	; 63
    2f6a:	f8 94       	cli
    2f6c:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <timer0_overflow_count>
    2f70:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <timer0_overflow_count+0x1>
    2f74:	a0 91 a3 01 	lds	r26, 0x01A3	; 0x8001a3 <timer0_overflow_count+0x2>
    2f78:	b0 91 a4 01 	lds	r27, 0x01A4	; 0x8001a4 <timer0_overflow_count+0x3>
    2f7c:	22 b7       	in	r18, 0x32	; 50
    2f7e:	08 b6       	in	r0, 0x38	; 56
    2f80:	00 fe       	sbrs	r0, 0
    2f82:	05 c0       	rjmp	.+10     	; 0x2f8e <getMicros+0x26>
    2f84:	2f 3f       	cpi	r18, 0xFF	; 255
    2f86:	19 f0       	breq	.+6      	; 0x2f8e <getMicros+0x26>
    2f88:	01 96       	adiw	r24, 0x01	; 1
    2f8a:	a1 1d       	adc	r26, r1
    2f8c:	b1 1d       	adc	r27, r1
    2f8e:	3f bf       	out	0x3f, r19	; 63
    2f90:	ba 2f       	mov	r27, r26
    2f92:	a9 2f       	mov	r26, r25
    2f94:	98 2f       	mov	r25, r24
    2f96:	88 27       	eor	r24, r24
    2f98:	82 0f       	add	r24, r18
    2f9a:	91 1d       	adc	r25, r1
    2f9c:	a1 1d       	adc	r26, r1
    2f9e:	b1 1d       	adc	r27, r1
    2fa0:	bc 01       	movw	r22, r24
    2fa2:	cd 01       	movw	r24, r26
    2fa4:	66 0f       	add	r22, r22
    2fa6:	77 1f       	adc	r23, r23
    2fa8:	88 1f       	adc	r24, r24
    2faa:	99 1f       	adc	r25, r25
    2fac:	66 0f       	add	r22, r22
    2fae:	77 1f       	adc	r23, r23
    2fb0:	88 1f       	adc	r24, r24
    2fb2:	99 1f       	adc	r25, r25
    2fb4:	08 95       	ret

00002fb6 <getLCDString>:
    2fb6:	20 e1       	ldi	r18, 0x10	; 16
    2fb8:	ec e8       	ldi	r30, 0x8C	; 140
    2fba:	f1 e0       	ldi	r31, 0x01	; 1
    2fbc:	df 01       	movw	r26, r30
    2fbe:	1d 92       	st	X+, r1
    2fc0:	2a 95       	dec	r18
    2fc2:	e9 f7       	brne	.-6      	; 0x2fbe <getLCDString+0x8>
    2fc4:	46 2f       	mov	r20, r22
    2fc6:	50 e0       	ldi	r21, 0x00	; 0
    2fc8:	bc 01       	movw	r22, r24
    2fca:	cf 01       	movw	r24, r30
    2fcc:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <eeprom_read_block>
    2fd0:	8c e8       	ldi	r24, 0x8C	; 140
    2fd2:	91 e0       	ldi	r25, 0x01	; 1
    2fd4:	08 95       	ret

00002fd6 <setMidiFile>:
    2fd6:	0f 93       	push	r16
    2fd8:	1f 93       	push	r17
    2fda:	cf 93       	push	r28
    2fdc:	df 93       	push	r29
    2fde:	ec 01       	movw	r28, r24
    2fe0:	8b 01       	movw	r16, r22
    2fe2:	8b ed       	ldi	r24, 0xDB	; 219
    2fe4:	91 e0       	ldi	r25, 0x01	; 1
    2fe6:	fe 01       	movw	r30, r28
    2fe8:	9c 01       	movw	r18, r24
    2fea:	11 92       	st	Z+, r1
    2fec:	21 50       	subi	r18, 0x01	; 1
    2fee:	30 40       	sbci	r19, 0x00	; 0
    2ff0:	e1 f7       	brne	.-8      	; 0x2fea <setMidiFile+0x14>
    2ff2:	ce 01       	movw	r24, r28
    2ff4:	0e 94 2c 20 	call	0x4058	; 0x4058 <initialise>
    2ff8:	6b ed       	ldi	r22, 0xDB	; 219
    2ffa:	77 e2       	ldi	r23, 0x27	; 39
    2ffc:	ce 01       	movw	r24, r28
    2ffe:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <setMidiHandler>
    3002:	6a ed       	ldi	r22, 0xDA	; 218
    3004:	77 e2       	ldi	r23, 0x27	; 39
    3006:	ce 01       	movw	r24, r28
    3008:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <setSysexHandler>
    300c:	69 ed       	ldi	r22, 0xD9	; 217
    300e:	77 e2       	ldi	r23, 0x27	; 39
    3010:	ce 01       	movw	r24, r28
    3012:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <setMetaHandler>
    3016:	b8 01       	movw	r22, r16
    3018:	ce 01       	movw	r24, r28
    301a:	0e 94 8e 22 	call	0x451c	; 0x451c <setFilename>
    301e:	ce 01       	movw	r24, r28
    3020:	0e 94 8a 21 	call	0x4314	; 0x4314 <loadMIDIFile>
    3024:	01 96       	adiw	r24, 0x01	; 1
    3026:	99 f0       	breq	.+38     	; 0x304e <setMidiFile+0x78>
    3028:	6b e0       	ldi	r22, 0x0B	; 11
    302a:	8b e4       	ldi	r24, 0x4B	; 75
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    3032:	6b e0       	ldi	r22, 0x0B	; 11
    3034:	0e 94 37 1c 	call	0x386e	; 0x386e <lcdPrintData>
    3038:	8f ef       	ldi	r24, 0xFF	; 255
    303a:	99 e6       	ldi	r25, 0x69	; 105
    303c:	e8 e1       	ldi	r30, 0x18	; 24
    303e:	81 50       	subi	r24, 0x01	; 1
    3040:	90 40       	sbci	r25, 0x00	; 0
    3042:	e0 40       	sbci	r30, 0x00	; 0
    3044:	e1 f7       	brne	.-8      	; 0x303e <setMidiFile+0x68>
    3046:	00 c0       	rjmp	.+0      	; 0x3048 <setMidiFile+0x72>
    3048:	00 00       	nop
    304a:	81 e0       	ldi	r24, 0x01	; 1
    304c:	0b c0       	rjmp	.+22     	; 0x3064 <setMidiFile+0x8e>
    304e:	fe 01       	movw	r30, r28
    3050:	e6 5b       	subi	r30, 0xB6	; 182
    3052:	ff 4f       	sbci	r31, 0xFF	; 255
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	80 83       	st	Z, r24
    3058:	38 97       	sbiw	r30, 0x08	; 8
    305a:	10 82       	st	Z, r1
    305c:	cd 5b       	subi	r28, 0xBD	; 189
    305e:	df 4f       	sbci	r29, 0xFF	; 255
    3060:	18 82       	st	Y, r1
    3062:	80 e0       	ldi	r24, 0x00	; 0
    3064:	df 91       	pop	r29
    3066:	cf 91       	pop	r28
    3068:	1f 91       	pop	r17
    306a:	0f 91       	pop	r16
    306c:	08 95       	ret

0000306e <checkSD>:
    306e:	cf 93       	push	r28
    3070:	c8 2f       	mov	r28, r24
    3072:	60 e0       	ldi	r22, 0x00	; 0
    3074:	80 e0       	ldi	r24, 0x00	; 0
    3076:	0e 94 a7 1b 	call	0x374e	; 0x374e <lcdGotoXY>
    307a:	c1 30       	cpi	r28, 0x01	; 1
    307c:	29 f5       	brne	.+74     	; 0x30c8 <checkSD+0x5a>
    307e:	6f e0       	ldi	r22, 0x0F	; 15
    3080:	80 e1       	ldi	r24, 0x10	; 16
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    3088:	6f e0       	ldi	r22, 0x0F	; 15
    308a:	0e 94 37 1c 	call	0x386e	; 0x386e <lcdPrintData>
    308e:	61 e0       	ldi	r22, 0x01	; 1
    3090:	80 e0       	ldi	r24, 0x00	; 0
    3092:	0e 94 a7 1b 	call	0x374e	; 0x374e <lcdGotoXY>
    3096:	60 e0       	ldi	r22, 0x00	; 0
    3098:	70 e0       	ldi	r23, 0x00	; 0
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	0e 94 67 0e 	call	0x1cce	; 0x1cce <f_mount>
    30a0:	88 23       	and	r24, r24
    30a2:	49 f0       	breq	.+18     	; 0x30b6 <checkSD+0x48>
    30a4:	6e e0       	ldi	r22, 0x0E	; 14
    30a6:	8d e3       	ldi	r24, 0x3D	; 61
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    30ae:	6e e0       	ldi	r22, 0x0E	; 14
    30b0:	0e 94 37 1c 	call	0x386e	; 0x386e <lcdPrintData>
    30b4:	2d c0       	rjmp	.+90     	; 0x3110 <checkSD+0xa2>
    30b6:	6a e0       	ldi	r22, 0x0A	; 10
    30b8:	83 e3       	ldi	r24, 0x33	; 51
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    30c0:	6a e0       	ldi	r22, 0x0A	; 10
    30c2:	0e 94 37 1c 	call	0x386e	; 0x386e <lcdPrintData>
    30c6:	24 c0       	rjmp	.+72     	; 0x3110 <checkSD+0xa2>
    30c8:	60 e1       	ldi	r22, 0x10	; 16
    30ca:	80 e0       	ldi	r24, 0x00	; 0
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    30d2:	60 e1       	ldi	r22, 0x10	; 16
    30d4:	0e 94 37 1c 	call	0x386e	; 0x386e <lcdPrintData>
    30d8:	61 e0       	ldi	r22, 0x01	; 1
    30da:	80 e0       	ldi	r24, 0x00	; 0
    30dc:	0e 94 a7 1b 	call	0x374e	; 0x374e <lcdGotoXY>
    30e0:	67 e5       	ldi	r22, 0x57	; 87
    30e2:	72 e0       	ldi	r23, 0x02	; 2
    30e4:	80 e0       	ldi	r24, 0x00	; 0
    30e6:	0e 94 67 0e 	call	0x1cce	; 0x1cce <f_mount>
    30ea:	88 23       	and	r24, r24
    30ec:	49 f0       	breq	.+18     	; 0x3100 <checkSD+0x92>
    30ee:	6c e0       	ldi	r22, 0x0C	; 12
    30f0:	87 e2       	ldi	r24, 0x27	; 39
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    30f8:	6c e0       	ldi	r22, 0x0C	; 12
    30fa:	0e 94 37 1c 	call	0x386e	; 0x386e <lcdPrintData>
    30fe:	08 c0       	rjmp	.+16     	; 0x3110 <checkSD+0xa2>
    3100:	68 e0       	ldi	r22, 0x08	; 8
    3102:	8f e1       	ldi	r24, 0x1F	; 31
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    310a:	68 e0       	ldi	r22, 0x08	; 8
    310c:	0e 94 37 1c 	call	0x386e	; 0x386e <lcdPrintData>
    3110:	cf 91       	pop	r28
    3112:	08 95       	ret

00003114 <createFileList>:
    3114:	8f 92       	push	r8
    3116:	9f 92       	push	r9
    3118:	af 92       	push	r10
    311a:	bf 92       	push	r11
    311c:	cf 92       	push	r12
    311e:	df 92       	push	r13
    3120:	ef 92       	push	r14
    3122:	ff 92       	push	r15
    3124:	0f 93       	push	r16
    3126:	1f 93       	push	r17
    3128:	cf 93       	push	r28
    312a:	df 93       	push	r29
    312c:	cd b7       	in	r28, 0x3d	; 61
    312e:	de b7       	in	r29, 0x3e	; 62
    3130:	e5 97       	sbiw	r28, 0x35	; 53
    3132:	0f b6       	in	r0, 0x3f	; 63
    3134:	f8 94       	cli
    3136:	de bf       	out	0x3e, r29	; 62
    3138:	0f be       	out	0x3f, r0	; 63
    313a:	cd bf       	out	0x3d, r28	; 61
    313c:	5c 01       	movw	r10, r24
    313e:	4b 01       	movw	r8, r22
    3140:	6a 01       	movw	r12, r20
    3142:	68 e0       	ldi	r22, 0x08	; 8
    3144:	70 e0       	ldi	r23, 0x00	; 0
    3146:	ce 01       	movw	r24, r28
    3148:	01 96       	adiw	r24, 0x01	; 1
    314a:	0e 94 fd 12 	call	0x25fa	; 0x25fa <f_getcwd>
    314e:	be 01       	movw	r22, r28
    3150:	6f 5f       	subi	r22, 0xFF	; 255
    3152:	7f 4f       	sbci	r23, 0xFF	; 255
    3154:	ce 01       	movw	r24, r28
    3156:	80 96       	adiw	r24, 0x20	; 32
    3158:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <f_opendir>
    315c:	18 2f       	mov	r17, r24
    315e:	81 11       	cpse	r24, r1
    3160:	50 c0       	rjmp	.+160    	; 0x3202 <createFileList+0xee>
    3162:	7e 01       	movw	r14, r28
    3164:	23 e1       	ldi	r18, 0x13	; 19
    3166:	e2 0e       	add	r14, r18
    3168:	f1 1c       	adc	r15, r1
    316a:	00 e1       	ldi	r16, 0x10	; 16
    316c:	be 01       	movw	r22, r28
    316e:	66 5f       	subi	r22, 0xF6	; 246
    3170:	7f 4f       	sbci	r23, 0xFF	; 255
    3172:	ce 01       	movw	r24, r28
    3174:	80 96       	adiw	r24, 0x20	; 32
    3176:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <f_readdir>
    317a:	18 2f       	mov	r17, r24
    317c:	81 11       	cpse	r24, r1
    317e:	41 c0       	rjmp	.+130    	; 0x3202 <createFileList+0xee>
    3180:	8b 89       	ldd	r24, Y+19	; 0x13
    3182:	88 23       	and	r24, r24
    3184:	f1 f1       	breq	.+124    	; 0x3202 <createFileList+0xee>
    3186:	8e 32       	cpi	r24, 0x2E	; 46
    3188:	89 f3       	breq	.-30     	; 0x316c <createFileList+0x58>
    318a:	8a 89       	ldd	r24, Y+18	; 0x12
    318c:	84 fd       	sbrc	r24, 4
    318e:	ee cf       	rjmp	.-36     	; 0x316c <createFileList+0x58>
    3190:	f7 01       	movw	r30, r14
    3192:	01 90       	ld	r0, Z+
    3194:	00 20       	and	r0, r0
    3196:	e9 f7       	brne	.-6      	; 0x3192 <createFileList+0x7e>
    3198:	31 97       	sbiw	r30, 0x01	; 1
    319a:	ee 19       	sub	r30, r14
    319c:	ff 09       	sbc	r31, r15
    319e:	70 97       	sbiw	r30, 0x10	; 16
    31a0:	28 f7       	brcc	.-54     	; 0x316c <createFileList+0x58>
    31a2:	d6 01       	movw	r26, r12
    31a4:	8c 91       	ld	r24, X
    31a6:	f5 01       	movw	r30, r10
    31a8:	b0 e1       	ldi	r27, 0x10	; 16
    31aa:	8b 9f       	mul	r24, r27
    31ac:	e0 0d       	add	r30, r0
    31ae:	f1 1d       	adc	r31, r1
    31b0:	11 24       	eor	r1, r1
    31b2:	df 01       	movw	r26, r30
    31b4:	20 2f       	mov	r18, r16
    31b6:	1d 92       	st	X+, r1
    31b8:	2a 95       	dec	r18
    31ba:	e9 f7       	brne	.-6      	; 0x31b6 <createFileList+0xa2>
    31bc:	b4 01       	movw	r22, r8
    31be:	c7 01       	movw	r24, r14
    31c0:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <strstr>
    31c4:	89 2b       	or	r24, r25
    31c6:	c1 f0       	breq	.+48     	; 0x31f8 <createFileList+0xe4>
    31c8:	f7 01       	movw	r30, r14
    31ca:	01 90       	ld	r0, Z+
    31cc:	00 20       	and	r0, r0
    31ce:	e9 f7       	brne	.-6      	; 0x31ca <createFileList+0xb6>
    31d0:	31 97       	sbiw	r30, 0x01	; 1
    31d2:	af 01       	movw	r20, r30
    31d4:	4e 19       	sub	r20, r14
    31d6:	5f 09       	sbc	r21, r15
    31d8:	d6 01       	movw	r26, r12
    31da:	8c 91       	ld	r24, X
    31dc:	b7 01       	movw	r22, r14
    31de:	f5 01       	movw	r30, r10
    31e0:	20 e1       	ldi	r18, 0x10	; 16
    31e2:	82 9f       	mul	r24, r18
    31e4:	e0 0d       	add	r30, r0
    31e6:	f1 1d       	adc	r31, r1
    31e8:	11 24       	eor	r1, r1
    31ea:	cf 01       	movw	r24, r30
    31ec:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <strncpy>
    31f0:	d6 01       	movw	r26, r12
    31f2:	8c 91       	ld	r24, X
    31f4:	8f 5f       	subi	r24, 0xFF	; 255
    31f6:	8c 93       	st	X, r24
    31f8:	f6 01       	movw	r30, r12
    31fa:	80 81       	ld	r24, Z
    31fc:	8a 30       	cpi	r24, 0x0A	; 10
    31fe:	09 f0       	breq	.+2      	; 0x3202 <createFileList+0xee>
    3200:	b5 cf       	rjmp	.-150    	; 0x316c <createFileList+0x58>
    3202:	81 2f       	mov	r24, r17
    3204:	e5 96       	adiw	r28, 0x35	; 53
    3206:	0f b6       	in	r0, 0x3f	; 63
    3208:	f8 94       	cli
    320a:	de bf       	out	0x3e, r29	; 62
    320c:	0f be       	out	0x3f, r0	; 63
    320e:	cd bf       	out	0x3d, r28	; 61
    3210:	df 91       	pop	r29
    3212:	cf 91       	pop	r28
    3214:	1f 91       	pop	r17
    3216:	0f 91       	pop	r16
    3218:	ff 90       	pop	r15
    321a:	ef 90       	pop	r14
    321c:	df 90       	pop	r13
    321e:	cf 90       	pop	r12
    3220:	bf 90       	pop	r11
    3222:	af 90       	pop	r10
    3224:	9f 90       	pop	r9
    3226:	8f 90       	pop	r8
    3228:	08 95       	ret

0000322a <handleFileList>:



void handleFileList(unsigned char currentMode,unsigned char currentAction,struct file_entry_lookup *filentry,char (*list)[MAX_FNAME]){
    322a:	af 92       	push	r10
    322c:	bf 92       	push	r11
    322e:	cf 92       	push	r12
    3230:	df 92       	push	r13
    3232:	ef 92       	push	r14
    3234:	ff 92       	push	r15
    3236:	0f 93       	push	r16
    3238:	1f 93       	push	r17
    323a:	cf 93       	push	r28
    323c:	df 93       	push	r29
    323e:	00 d0       	rcall	.+0      	; 0x3240 <handleFileList+0x16>
    3240:	00 d0       	rcall	.+0      	; 0x3242 <handleFileList+0x18>
    3242:	cd b7       	in	r28, 0x3d	; 61
    3244:	de b7       	in	r29, 0x3e	; 62
    3246:	7a 01       	movw	r14, r20
    3248:	59 01       	movw	r10, r18
	unsigned char tmp = filentry->current_index - (filentry->current_index % 2);
    324a:	fa 01       	movw	r30, r20
    324c:	01 81       	ldd	r16, Z+1	; 0x01
	char *ch[2] = {"*"," "};
    324e:	83 e3       	ldi	r24, 0x33	; 51
    3250:	91 e0       	ldi	r25, 0x01	; 1
    3252:	9a 83       	std	Y+2, r25	; 0x02
    3254:	89 83       	std	Y+1, r24	; 0x01
    3256:	85 e3       	ldi	r24, 0x35	; 53
    3258:	91 e0       	ldi	r25, 0x01	; 1
    325a:	9c 83       	std	Y+4, r25	; 0x04
    325c:	8b 83       	std	Y+3, r24	; 0x03
	
	lcdGotoXY(0,0);
    325e:	60 e0       	ldi	r22, 0x00	; 0
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	0e 94 a7 1b 	call	0x374e	; 0x374e <lcdGotoXY>
	if(filentry->current_items == 0){
    3266:	f7 01       	movw	r30, r14
    3268:	80 81       	ld	r24, Z
    326a:	81 11       	cpse	r24, r1
    326c:	09 c0       	rjmp	.+18     	; 0x3280 <handleFileList+0x56>
		lcdPrintData(getLCDString(NO_SND,NO_SND_LEN),NO_SND_LEN);
    326e:	69 e0       	ldi	r22, 0x09	; 9
    3270:	82 e7       	ldi	r24, 0x72	; 114
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    3278:	69 e0       	ldi	r22, 0x09	; 9
    327a:	0e 94 37 1c 	call	0x386e	; 0x386e <lcdPrintData>
    327e:	5b c0       	rjmp	.+182    	; 0x3336 <handleFileList+0x10c>
		return;
	}
	
	lcdGotoXY(1,0);
    3280:	60 e0       	ldi	r22, 0x00	; 0
    3282:	81 e0       	ldi	r24, 0x01	; 1
    3284:	0e 94 a7 1b 	call	0x374e	; 0x374e <lcdGotoXY>
	lcdPrintData(list[tmp],strlen(list[tmp]));
    3288:	0e 7f       	andi	r16, 0xFE	; 254
    328a:	f0 e1       	ldi	r31, 0x10	; 16
    328c:	0f 9f       	mul	r16, r31
    328e:	80 01       	movw	r16, r0
    3290:	11 24       	eor	r1, r1
    3292:	c5 01       	movw	r24, r10
    3294:	80 0f       	add	r24, r16
    3296:	91 1f       	adc	r25, r17
    3298:	fc 01       	movw	r30, r24
    329a:	01 90       	ld	r0, Z+
    329c:	00 20       	and	r0, r0
    329e:	e9 f7       	brne	.-6      	; 0x329a <handleFileList+0x70>
    32a0:	31 97       	sbiw	r30, 0x01	; 1
    32a2:	bf 01       	movw	r22, r30
    32a4:	68 1b       	sub	r22, r24
    32a6:	79 0b       	sbc	r23, r25
    32a8:	0e 94 37 1c 	call	0x386e	; 0x386e <lcdPrintData>
	lcdGotoXY(0,0);
    32ac:	60 e0       	ldi	r22, 0x00	; 0
    32ae:	80 e0       	ldi	r24, 0x00	; 0
    32b0:	0e 94 a7 1b 	call	0x374e	; 0x374e <lcdGotoXY>
	lcdPrintData(ch[filentry->current_index % 2],1);
    32b4:	f7 01       	movw	r30, r14
    32b6:	81 81       	ldd	r24, Z+1	; 0x01
    32b8:	80 fb       	bst	r24, 0
    32ba:	cc 24       	eor	r12, r12
    32bc:	c0 f8       	bld	r12, 0
    32be:	d1 2c       	mov	r13, r1
    32c0:	cc 0c       	add	r12, r12
    32c2:	dd 1c       	adc	r13, r13
    32c4:	fe 01       	movw	r30, r28
    32c6:	ec 0d       	add	r30, r12
    32c8:	fd 1d       	adc	r31, r13
    32ca:	61 e0       	ldi	r22, 0x01	; 1
    32cc:	81 81       	ldd	r24, Z+1	; 0x01
    32ce:	92 81       	ldd	r25, Z+2	; 0x02
    32d0:	0e 94 37 1c 	call	0x386e	; 0x386e <lcdPrintData>
	if(filentry->current_index < filentry->current_items){
    32d4:	f7 01       	movw	r30, r14
    32d6:	91 81       	ldd	r25, Z+1	; 0x01
    32d8:	80 81       	ld	r24, Z
    32da:	98 17       	cp	r25, r24
    32dc:	60 f5       	brcc	.+88     	; 0x3336 <handleFileList+0x10c>
		lcdGotoXY(1,1);
    32de:	61 e0       	ldi	r22, 0x01	; 1
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	0e 94 a7 1b 	call	0x374e	; 0x374e <lcdGotoXY>
		lcdPrintData(list[tmp + 1],strlen(list[tmp + 1]));
    32e6:	c8 01       	movw	r24, r16
    32e8:	40 96       	adiw	r24, 0x10	; 16
    32ea:	8a 0d       	add	r24, r10
    32ec:	9b 1d       	adc	r25, r11
    32ee:	fc 01       	movw	r30, r24
    32f0:	01 90       	ld	r0, Z+
    32f2:	00 20       	and	r0, r0
    32f4:	e9 f7       	brne	.-6      	; 0x32f0 <handleFileList+0xc6>
    32f6:	31 97       	sbiw	r30, 0x01	; 1
    32f8:	bf 01       	movw	r22, r30
    32fa:	68 1b       	sub	r22, r24
    32fc:	79 0b       	sbc	r23, r25
    32fe:	0e 94 37 1c 	call	0x386e	; 0x386e <lcdPrintData>
		lcdGotoXY(0,1);
    3302:	61 e0       	ldi	r22, 0x01	; 1
    3304:	80 e0       	ldi	r24, 0x00	; 0
    3306:	0e 94 a7 1b 	call	0x374e	; 0x374e <lcdGotoXY>
		lcdPrintData(ch[(filentry->current_index + 1) % 2],1);
    330a:	f7 01       	movw	r30, r14
    330c:	81 81       	ldd	r24, Z+1	; 0x01
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	01 96       	adiw	r24, 0x01	; 1
    3312:	81 70       	andi	r24, 0x01	; 1
    3314:	90 78       	andi	r25, 0x80	; 128
    3316:	99 23       	and	r25, r25
    3318:	24 f4       	brge	.+8      	; 0x3322 <handleFileList+0xf8>
    331a:	01 97       	sbiw	r24, 0x01	; 1
    331c:	8e 6f       	ori	r24, 0xFE	; 254
    331e:	9f 6f       	ori	r25, 0xFF	; 255
    3320:	01 96       	adiw	r24, 0x01	; 1
    3322:	88 0f       	add	r24, r24
    3324:	99 1f       	adc	r25, r25
    3326:	fe 01       	movw	r30, r28
    3328:	e8 0f       	add	r30, r24
    332a:	f9 1f       	adc	r31, r25
    332c:	61 e0       	ldi	r22, 0x01	; 1
    332e:	81 81       	ldd	r24, Z+1	; 0x01
    3330:	92 81       	ldd	r25, Z+2	; 0x02
    3332:	0e 94 37 1c 	call	0x386e	; 0x386e <lcdPrintData>
	}
}
    3336:	0f 90       	pop	r0
    3338:	0f 90       	pop	r0
    333a:	0f 90       	pop	r0
    333c:	0f 90       	pop	r0
    333e:	df 91       	pop	r29
    3340:	cf 91       	pop	r28
    3342:	1f 91       	pop	r17
    3344:	0f 91       	pop	r16
    3346:	ff 90       	pop	r15
    3348:	ef 90       	pop	r14
    334a:	df 90       	pop	r13
    334c:	cf 90       	pop	r12
    334e:	bf 90       	pop	r11
    3350:	af 90       	pop	r10
    3352:	08 95       	ret

00003354 <writeMidi>:

void writeMidi(FIL *file){
    3354:	08 95       	ret

00003356 <lcdInitHW>:
}

void lcdHome(void)
{
	// move cursor to home
	lcdControlWrite(1<<LCD_HOME);
    3356:	92 98       	cbi	0x12, 2	; 18
    3358:	93 98       	cbi	0x12, 3	; 18
    335a:	94 98       	cbi	0x12, 4	; 18
    335c:	8a 9a       	sbi	0x11, 2	; 17
    335e:	8b 9a       	sbi	0x11, 3	; 17
    3360:	8c 9a       	sbi	0x11, 4	; 17
    3362:	8a b3       	in	r24, 0x1a	; 26
    3364:	8f 70       	andi	r24, 0x0F	; 15
    3366:	8a bb       	out	0x1a, r24	; 26
    3368:	8b b3       	in	r24, 0x1b	; 27
    336a:	80 6f       	ori	r24, 0xF0	; 240
    336c:	8b bb       	out	0x1b, r24	; 27
    336e:	08 95       	ret

00003370 <lcdBusyWait>:
    3370:	92 98       	cbi	0x12, 2	; 18
    3372:	8a b3       	in	r24, 0x1a	; 26
    3374:	8f 70       	andi	r24, 0x0F	; 15
    3376:	8a bb       	out	0x1a, r24	; 26
    3378:	8b b3       	in	r24, 0x1b	; 27
    337a:	80 6f       	ori	r24, 0xF0	; 240
    337c:	8b bb       	out	0x1b, r24	; 27
    337e:	93 9a       	sbi	0x12, 3	; 18
    3380:	94 9a       	sbi	0x12, 4	; 18
	...
    339e:	cf 9b       	sbis	0x19, 7	; 25
    33a0:	76 c0       	rjmp	.+236    	; 0x348e <lcdBusyWait+0x11e>
    33a2:	94 98       	cbi	0x12, 4	; 18
	...
    33dc:	94 9a       	sbi	0x12, 4	; 18
	...
    3416:	94 98       	cbi	0x12, 4	; 18
	...
    3450:	94 9a       	sbi	0x12, 4	; 18
	...
    348a:	cf 99       	sbic	0x19, 7	; 25
    348c:	8a cf       	rjmp	.-236    	; 0x33a2 <lcdBusyWait+0x32>
    348e:	94 98       	cbi	0x12, 4	; 18
    3490:	08 95       	ret

00003492 <lcdControlWrite>:
    3492:	cf 93       	push	r28
    3494:	c8 2f       	mov	r28, r24
    3496:	0e 94 b8 19 	call	0x3370	; 0x3370 <lcdBusyWait>
    349a:	92 98       	cbi	0x12, 2	; 18
    349c:	93 98       	cbi	0x12, 3	; 18
    349e:	94 9a       	sbi	0x12, 4	; 18
    34a0:	8a b3       	in	r24, 0x1a	; 26
    34a2:	80 6f       	ori	r24, 0xF0	; 240
    34a4:	8a bb       	out	0x1a, r24	; 26
    34a6:	8b b3       	in	r24, 0x1b	; 27
    34a8:	8f 70       	andi	r24, 0x0F	; 15
    34aa:	9c 2f       	mov	r25, r28
    34ac:	90 7f       	andi	r25, 0xF0	; 240
    34ae:	89 2b       	or	r24, r25
    34b0:	8b bb       	out	0x1b, r24	; 27
	...
    34ea:	94 98       	cbi	0x12, 4	; 18
	...
    3524:	94 9a       	sbi	0x12, 4	; 18
    3526:	8b b3       	in	r24, 0x1b	; 27
    3528:	28 2f       	mov	r18, r24
    352a:	2f 70       	andi	r18, 0x0F	; 15
    352c:	30 e1       	ldi	r19, 0x10	; 16
    352e:	c3 9f       	mul	r28, r19
    3530:	c0 01       	movw	r24, r0
    3532:	11 24       	eor	r1, r1
    3534:	82 2b       	or	r24, r18
    3536:	8b bb       	out	0x1b, r24	; 27
	...
    3570:	94 98       	cbi	0x12, 4	; 18
    3572:	8a b3       	in	r24, 0x1a	; 26
    3574:	8f 70       	andi	r24, 0x0F	; 15
    3576:	8a bb       	out	0x1a, r24	; 26
    3578:	8b b3       	in	r24, 0x1b	; 27
    357a:	80 6f       	ori	r24, 0xF0	; 240
    357c:	8b bb       	out	0x1b, r24	; 27
    357e:	cf 91       	pop	r28
    3580:	08 95       	ret

00003582 <lcdControlRead>:
    3582:	0e 94 b8 19 	call	0x3370	; 0x3370 <lcdBusyWait>
    3586:	8a b3       	in	r24, 0x1a	; 26
    3588:	8f 70       	andi	r24, 0x0F	; 15
    358a:	8a bb       	out	0x1a, r24	; 26
    358c:	8b b3       	in	r24, 0x1b	; 27
    358e:	80 6f       	ori	r24, 0xF0	; 240
    3590:	8b bb       	out	0x1b, r24	; 27
    3592:	92 98       	cbi	0x12, 2	; 18
    3594:	93 9a       	sbi	0x12, 3	; 18
    3596:	94 9a       	sbi	0x12, 4	; 18
	...
    35d0:	99 b3       	in	r25, 0x19	; 25
    35d2:	94 98       	cbi	0x12, 4	; 18
	...
    360c:	94 9a       	sbi	0x12, 4	; 18
	...
    3646:	29 b3       	in	r18, 0x19	; 25
    3648:	22 95       	swap	r18
    364a:	2f 70       	andi	r18, 0x0F	; 15
    364c:	89 2f       	mov	r24, r25
    364e:	80 7f       	andi	r24, 0xF0	; 240
    3650:	94 98       	cbi	0x12, 4	; 18
    3652:	82 2b       	or	r24, r18
    3654:	08 95       	ret

00003656 <lcdDataWrite>:
    3656:	cf 93       	push	r28
    3658:	c8 2f       	mov	r28, r24
    365a:	0e 94 b8 19 	call	0x3370	; 0x3370 <lcdBusyWait>
    365e:	92 9a       	sbi	0x12, 2	; 18
    3660:	93 98       	cbi	0x12, 3	; 18
    3662:	94 9a       	sbi	0x12, 4	; 18
    3664:	8a b3       	in	r24, 0x1a	; 26
    3666:	80 6f       	ori	r24, 0xF0	; 240
    3668:	8a bb       	out	0x1a, r24	; 26
    366a:	8b b3       	in	r24, 0x1b	; 27
    366c:	8f 70       	andi	r24, 0x0F	; 15
    366e:	9c 2f       	mov	r25, r28
    3670:	90 7f       	andi	r25, 0xF0	; 240
    3672:	89 2b       	or	r24, r25
    3674:	8b bb       	out	0x1b, r24	; 27
	...
    36ae:	94 98       	cbi	0x12, 4	; 18
	...
    36e8:	94 9a       	sbi	0x12, 4	; 18
    36ea:	8b b3       	in	r24, 0x1b	; 27
    36ec:	28 2f       	mov	r18, r24
    36ee:	2f 70       	andi	r18, 0x0F	; 15
    36f0:	30 e1       	ldi	r19, 0x10	; 16
    36f2:	c3 9f       	mul	r28, r19
    36f4:	c0 01       	movw	r24, r0
    36f6:	11 24       	eor	r1, r1
    36f8:	82 2b       	or	r24, r18
    36fa:	8b bb       	out	0x1b, r24	; 27
	...
    3734:	94 98       	cbi	0x12, 4	; 18
    3736:	8a b3       	in	r24, 0x1a	; 26
    3738:	8f 70       	andi	r24, 0x0F	; 15
    373a:	8a bb       	out	0x1a, r24	; 26
    373c:	8b b3       	in	r24, 0x1b	; 27
    373e:	80 6f       	ori	r24, 0xF0	; 240
    3740:	8b bb       	out	0x1b, r24	; 27
    3742:	cf 91       	pop	r28
    3744:	08 95       	ret

00003746 <lcdClear>:
}

void lcdClear(void)
{
	// clear LCD
	lcdControlWrite(1<<LCD_CLR);
    3746:	81 e0       	ldi	r24, 0x01	; 1
    3748:	0e 94 49 1a 	call	0x3492	; 0x3492 <lcdControlWrite>
    374c:	08 95       	ret

0000374e <lcdGotoXY>:
void lcdGotoXY(u08 x, u08 y)
{
	register u08 DDRAMAddr;

	// remap lines into proper order
	switch(y)
    374e:	62 30       	cpi	r22, 0x02	; 2
    3750:	31 f0       	breq	.+12     	; 0x375e <lcdGotoXY+0x10>
    3752:	63 30       	cpi	r22, 0x03	; 3
    3754:	31 f0       	breq	.+12     	; 0x3762 <lcdGotoXY+0x14>
    3756:	61 30       	cpi	r22, 0x01	; 1
    3758:	29 f4       	brne	.+10     	; 0x3764 <lcdGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    375a:	80 5c       	subi	r24, 0xC0	; 192
    375c:	03 c0       	rjmp	.+6      	; 0x3764 <lcdGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    375e:	8c 5e       	subi	r24, 0xEC	; 236
    3760:	01 c0       	rjmp	.+2      	; 0x3764 <lcdGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    3762:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}

	// set data address
	lcdControlWrite(1<<LCD_DDRAM | DDRAMAddr);
    3764:	80 68       	ori	r24, 0x80	; 128
    3766:	0e 94 49 1a 	call	0x3492	; 0x3492 <lcdControlWrite>
    376a:	08 95       	ret

0000376c <lcdLoadCustomChar>:
}

void lcdLoadCustomChar(u08* lcdCustomCharArray, u08 romCharNum, u08 lcdCharNum)
{
    376c:	0f 93       	push	r16
    376e:	1f 93       	push	r17
    3770:	cf 93       	push	r28
    3772:	df 93       	push	r29
    3774:	00 d0       	rcall	.+0      	; 0x3776 <lcdLoadCustomChar+0xa>
    3776:	1f 92       	push	r1
    3778:	cd b7       	in	r28, 0x3d	; 61
    377a:	de b7       	in	r29, 0x3e	; 62
    377c:	8c 01       	movw	r16, r24
    377e:	6b 83       	std	Y+3, r22	; 0x03
    3780:	4a 83       	std	Y+2, r20	; 0x02
	register u08 i;
	u08 saveDDRAMAddr;

	// backup the current cursor position
	saveDDRAMAddr = lcdControlRead() & 0x7F;
    3782:	0e 94 c1 1a 	call	0x3582	; 0x3582 <lcdControlRead>
    3786:	8f 77       	andi	r24, 0x7F	; 127
    3788:	89 83       	std	Y+1, r24	; 0x01

	// multiply the character index by 8
	lcdCharNum = (lcdCharNum<<3);	// each character occupies 8 bytes
    378a:	8a 81       	ldd	r24, Y+2	; 0x02
    378c:	88 0f       	add	r24, r24
    378e:	88 0f       	add	r24, r24
    3790:	88 0f       	add	r24, r24
    3792:	8a 83       	std	Y+2, r24	; 0x02
    3794:	9b 81       	ldd	r25, Y+3	; 0x03
    3796:	99 0f       	add	r25, r25
    3798:	99 0f       	add	r25, r25
    379a:	99 0f       	add	r25, r25
    379c:	09 0f       	add	r16, r25
    379e:	11 1d       	adc	r17, r1
    37a0:	88 5f       	subi	r24, 0xF8	; 248
    37a2:	8b 83       	std	Y+3, r24	; 0x03

	// copy the 8 bytes into CG (character generator) RAM
	for(i=0; i<8; i++)
	{
		// set CG RAM address
		lcdControlWrite((1<<LCD_CGRAM) | (lcdCharNum+i));
    37a4:	8a 81       	ldd	r24, Y+2	; 0x02
    37a6:	80 64       	ori	r24, 0x40	; 64
    37a8:	0e 94 49 1a 	call	0x3492	; 0x3492 <lcdControlWrite>
		// write character data
		lcdDataWrite( pgm_read_byte(lcdCustomCharArray+romCharNum+i) );
    37ac:	f8 01       	movw	r30, r16
    37ae:	84 91       	lpm	r24, Z
    37b0:	0e 94 2b 1b 	call	0x3656	; 0x3656 <lcdDataWrite>
    37b4:	fa 81       	ldd	r31, Y+2	; 0x02
    37b6:	ff 5f       	subi	r31, 0xFF	; 255
    37b8:	fa 83       	std	Y+2, r31	; 0x02
    37ba:	0f 5f       	subi	r16, 0xFF	; 255
    37bc:	1f 4f       	sbci	r17, 0xFF	; 255
	// multiply the character index by 8
	lcdCharNum = (lcdCharNum<<3);	// each character occupies 8 bytes
	romCharNum = (romCharNum<<3);	// each character occupies 8 bytes

	// copy the 8 bytes into CG (character generator) RAM
	for(i=0; i<8; i++)
    37be:	8b 81       	ldd	r24, Y+3	; 0x03
    37c0:	f8 13       	cpse	r31, r24
    37c2:	f0 cf       	rjmp	.-32     	; 0x37a4 <lcdLoadCustomChar+0x38>
		// write character data
		lcdDataWrite( pgm_read_byte(lcdCustomCharArray+romCharNum+i) );
	}

	// restore the previous cursor position
	lcdControlWrite(1<<LCD_DDRAM | saveDDRAMAddr);
    37c4:	89 81       	ldd	r24, Y+1	; 0x01
    37c6:	80 68       	ori	r24, 0x80	; 128
    37c8:	0e 94 49 1a 	call	0x3492	; 0x3492 <lcdControlWrite>

}
    37cc:	0f 90       	pop	r0
    37ce:	0f 90       	pop	r0
    37d0:	0f 90       	pop	r0
    37d2:	df 91       	pop	r29
    37d4:	cf 91       	pop	r28
    37d6:	1f 91       	pop	r17
    37d8:	0f 91       	pop	r16
    37da:	08 95       	ret

000037dc <lcdInit>:
/*************************************************************/

void lcdInit()
{
	// initialize hardware
	lcdInitHW();
    37dc:	0e 94 ab 19 	call	0x3356	; 0x3356 <lcdInitHW>
	// LCD function set
	lcdControlWrite(LCD_FUNCTION_DEFAULT);
    37e0:	88 e2       	ldi	r24, 0x28	; 40
    37e2:	0e 94 49 1a 	call	0x3492	; 0x3492 <lcdControlWrite>
	// clear LCD
	lcdControlWrite(1<<LCD_CLR);
    37e6:	81 e0       	ldi	r24, 0x01	; 1
    37e8:	0e 94 49 1a 	call	0x3492	; 0x3492 <lcdControlWrite>
	delay(60000);	// wait 60ms
    37ec:	80 e6       	ldi	r24, 0x60	; 96
    37ee:	9a ee       	ldi	r25, 0xEA	; 234
    37f0:	0e 94 88 31 	call	0x6310	; 0x6310 <delay_us>
	// set entry mode
	lcdControlWrite(1<<LCD_ENTRY_MODE | 1<<LCD_ENTRY_INC);
    37f4:	86 e0       	ldi	r24, 0x06	; 6
    37f6:	0e 94 49 1a 	call	0x3492	; 0x3492 <lcdControlWrite>
	// set display to on
	//lcdControlWrite(1<<LCD_ON_CTRL | 1<<LCD_ON_DISPLAY | 1<<LCD_ON_BLINK);
	lcdControlWrite(1<<LCD_ON_CTRL | 1<<LCD_ON_DISPLAY );
    37fa:	8c e0       	ldi	r24, 0x0C	; 12
    37fc:	0e 94 49 1a 	call	0x3492	; 0x3492 <lcdControlWrite>
	// move cursor to home
	lcdControlWrite(1<<LCD_HOME);
    3800:	82 e0       	ldi	r24, 0x02	; 2
    3802:	0e 94 49 1a 	call	0x3492	; 0x3492 <lcdControlWrite>
	// set data address to 0
	lcdControlWrite(1<<LCD_DDRAM | 0x00);
    3806:	80 e8       	ldi	r24, 0x80	; 128
    3808:	0e 94 49 1a 	call	0x3492	; 0x3492 <lcdControlWrite>

	// load the first 8 custom characters
	lcdLoadCustomChar((u08*)LcdCustomChar,0,0);
    380c:	40 e0       	ldi	r20, 0x00	; 0
    380e:	60 e0       	ldi	r22, 0x00	; 0
    3810:	86 e8       	ldi	r24, 0x86	; 134
    3812:	91 e0       	ldi	r25, 0x01	; 1
    3814:	0e 94 b6 1b 	call	0x376c	; 0x376c <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,1,1);
    3818:	41 e0       	ldi	r20, 0x01	; 1
    381a:	61 e0       	ldi	r22, 0x01	; 1
    381c:	86 e8       	ldi	r24, 0x86	; 134
    381e:	91 e0       	ldi	r25, 0x01	; 1
    3820:	0e 94 b6 1b 	call	0x376c	; 0x376c <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,2,2);
    3824:	42 e0       	ldi	r20, 0x02	; 2
    3826:	62 e0       	ldi	r22, 0x02	; 2
    3828:	86 e8       	ldi	r24, 0x86	; 134
    382a:	91 e0       	ldi	r25, 0x01	; 1
    382c:	0e 94 b6 1b 	call	0x376c	; 0x376c <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,3,3);
    3830:	43 e0       	ldi	r20, 0x03	; 3
    3832:	63 e0       	ldi	r22, 0x03	; 3
    3834:	86 e8       	ldi	r24, 0x86	; 134
    3836:	91 e0       	ldi	r25, 0x01	; 1
    3838:	0e 94 b6 1b 	call	0x376c	; 0x376c <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,4,4);
    383c:	44 e0       	ldi	r20, 0x04	; 4
    383e:	64 e0       	ldi	r22, 0x04	; 4
    3840:	86 e8       	ldi	r24, 0x86	; 134
    3842:	91 e0       	ldi	r25, 0x01	; 1
    3844:	0e 94 b6 1b 	call	0x376c	; 0x376c <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,5,5);
    3848:	45 e0       	ldi	r20, 0x05	; 5
    384a:	65 e0       	ldi	r22, 0x05	; 5
    384c:	86 e8       	ldi	r24, 0x86	; 134
    384e:	91 e0       	ldi	r25, 0x01	; 1
    3850:	0e 94 b6 1b 	call	0x376c	; 0x376c <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,6,6);
    3854:	46 e0       	ldi	r20, 0x06	; 6
    3856:	66 e0       	ldi	r22, 0x06	; 6
    3858:	86 e8       	ldi	r24, 0x86	; 134
    385a:	91 e0       	ldi	r25, 0x01	; 1
    385c:	0e 94 b6 1b 	call	0x376c	; 0x376c <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,7,7);
    3860:	47 e0       	ldi	r20, 0x07	; 7
    3862:	67 e0       	ldi	r22, 0x07	; 7
    3864:	86 e8       	ldi	r24, 0x86	; 134
    3866:	91 e0       	ldi	r25, 0x01	; 1
    3868:	0e 94 b6 1b 	call	0x376c	; 0x376c <lcdLoadCustomChar>
    386c:	08 95       	ret

0000386e <lcdPrintData>:
	lcdControlWrite(1<<LCD_DDRAM | saveDDRAMAddr);

}

void lcdPrintData(char* data, u08 nBytes)
{
    386e:	0f 93       	push	r16
    3870:	1f 93       	push	r17
    3872:	cf 93       	push	r28
    3874:	df 93       	push	r29
	register u08 i;

	// check to make sure we have a good pointer
	if (!data) return;
    3876:	00 97       	sbiw	r24, 0x00	; 0
    3878:	81 f0       	breq	.+32     	; 0x389a <lcdPrintData+0x2c>

	// print data
	for(i=0; i<nBytes; i++)
    387a:	66 23       	and	r22, r22
    387c:	71 f0       	breq	.+28     	; 0x389a <lcdPrintData+0x2c>
    387e:	ec 01       	movw	r28, r24
    3880:	61 50       	subi	r22, 0x01	; 1
    3882:	06 2f       	mov	r16, r22
    3884:	10 e0       	ldi	r17, 0x00	; 0
    3886:	0f 5f       	subi	r16, 0xFF	; 255
    3888:	1f 4f       	sbci	r17, 0xFF	; 255
    388a:	08 0f       	add	r16, r24
    388c:	19 1f       	adc	r17, r25
	{
		lcdDataWrite(data[i]);
    388e:	89 91       	ld	r24, Y+
    3890:	0e 94 2b 1b 	call	0x3656	; 0x3656 <lcdDataWrite>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    3894:	c0 17       	cp	r28, r16
    3896:	d1 07       	cpc	r29, r17
    3898:	d1 f7       	brne	.-12     	; 0x388e <lcdPrintData+0x20>
	{
		lcdDataWrite(data[i]);
	}
}
    389a:	df 91       	pop	r29
    389c:	cf 91       	pop	r28
    389e:	1f 91       	pop	r17
    38a0:	0f 91       	pop	r16
    38a2:	08 95       	ret

000038a4 <main>:
#define MIDI_FILE	0
#define SOUND_FILE	1
FATFS Fatfs;

int main(void)
{
    38a4:	cf 93       	push	r28
    38a6:	df 93       	push	r29
    38a8:	cd b7       	in	r28, 0x3d	; 61
    38aa:	de b7       	in	r29, 0x3e	; 62
    38ac:	c0 5a       	subi	r28, 0xA0	; 160
    38ae:	d2 40       	sbci	r29, 0x02	; 2
    38b0:	0f b6       	in	r0, 0x3f	; 63
    38b2:	f8 94       	cli
    38b4:	de bf       	out	0x3e, r29	; 62
    38b6:	0f be       	out	0x3f, r0	; 63
    38b8:	cd bf       	out	0x3d, r28	; 61
    
	FIL open_files[2];
	
	struct midi_time_event mtevent;
	struct SNDFile sf = {0};
    38ba:	fe 01       	movw	r30, r28
    38bc:	e4 5b       	subi	r30, 0xB4	; 180
    38be:	ff 4f       	sbci	r31, 0xFF	; 255
    38c0:	8e e3       	ldi	r24, 0x3E	; 62
    38c2:	df 01       	movw	r26, r30
    38c4:	1d 92       	st	X+, r1
    38c6:	8a 95       	dec	r24
    38c8:	e9 f7       	brne	.-6      	; 0x38c4 <main+0x20>
	struct file_entry_lookup file_entry = {0};
    38ca:	c6 57       	subi	r28, 0x76	; 118
    38cc:	df 4f       	sbci	r29, 0xFF	; 255
    38ce:	19 82       	std	Y+1, r1	; 0x01
    38d0:	18 82       	st	Y, r1
    38d2:	ca 58       	subi	r28, 0x8A	; 138
    38d4:	d0 40       	sbci	r29, 0x00	; 0
	char (*file_list)[MAX_FNAME];
    unsigned char byteValue = 0;
	unsigned char numOfBytes = 0;
    38d6:	c4 57       	subi	r28, 0x74	; 116
    38d8:	df 4f       	sbci	r29, 0xFF	; 255
    38da:	18 82       	st	Y, r1
    38dc:	cc 58       	subi	r28, 0x8C	; 140
    38de:	d0 40       	sbci	r29, 0x00	; 0
	struct MD_MIDIFile mf;
      
	unsigned long microseconds = 0;
	unsigned long delta = 0;
	//DDRA |= (1 << PA1);		// remove
	file_list = malloc(MAX_FNAME * MAX_FILES);
    38e0:	80 ea       	ldi	r24, 0xA0	; 160
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	0e 94 81 36 	call	0x6d02	; 0x6d02 <malloc>
    38e8:	6c 01       	movw	r12, r24
	
	configTimers();	
    38ea:	0e 94 e5 16 	call	0x2dca	; 0x2dca <configTimers>
	lcdInit();	
    38ee:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <lcdInit>
	uartInit();
    38f2:	0e 94 60 33 	call	0x66c0	; 0x66c0 <uartInit>
	midiInit();	
    38f6:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <midiInit>
	spiInit();	
    38fa:	0e 94 27 2e 	call	0x5c4e	; 0x5c4e <spiInit>
	setInputs();
    38fe:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <setInputs>
	InitSRAM();
    3902:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <InitSRAM>
	
	// >> ADC
	a2dInit();
    3906:	0e 94 34 01 	call	0x268	; 0x268 <a2dInit>
	a2dSetPrescaler(ADC_PRESCALE_DIV32);
    390a:	85 e0       	ldi	r24, 0x05	; 5
    390c:	0e 94 26 01 	call	0x24c	; 0x24c <a2dSetPrescaler>
	a2dSetReference(ADC_REFERENCE_AVCC);
    3910:	81 e0       	ldi	r24, 0x01	; 1
    3912:	0e 94 2b 01 	call	0x256	; 0x256 <a2dSetReference>
	a2dSetChannel(ADC_CH_ADC0);
    3916:	80 e0       	ldi	r24, 0x00	; 0
    3918:	0e 94 42 01 	call	0x284	; 0x284 <a2dSetChannel>
	a2dStartConvert();		
    391c:	0e 94 48 01 	call	0x290	; 0x290 <a2dStartConvert>
	// << ADC
	 
	timerAttach(TIMER2OUTCOMPARE_INT,disk_timerproc);
    3920:	6e e5       	ldi	r22, 0x5E	; 94
    3922:	7c e2       	ldi	r23, 0x2C	; 44
    3924:	86 e0       	ldi	r24, 0x06	; 6
    3926:	0e 94 a3 31 	call	0x6346	; 0x6346 <timerAttach>
	timerAttach(TIMER0OVERFLOW_INT,addMillis);
    392a:	6f e7       	ldi	r22, 0x7F	; 127
    392c:	77 e1       	ldi	r23, 0x17	; 23
    392e:	80 e0       	ldi	r24, 0x00	; 0
    3930:	0e 94 a3 31 	call	0x6346	; 0x6346 <timerAttach>
	
	uartSetBaudRate(MIDI_BAUD_RATE);
    3934:	62 e1       	ldi	r22, 0x12	; 18
    3936:	7a e7       	ldi	r23, 0x7A	; 122
    3938:	80 e0       	ldi	r24, 0x00	; 0
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	0e 94 7d 33 	call	0x66fa	; 0x66fa <uartSetBaudRate>
	uartSetRxHandler(rx_handler);
    3940:	85 ed       	ldi	r24, 0xD5	; 213
    3942:	96 e1       	ldi	r25, 0x16	; 22
    3944:	0e 94 78 33 	call	0x66f0	; 0x66f0 <uartSetRxHandler>
	uartFlushReceiveBuffer();
    3948:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <uartFlushReceiveBuffer>
	
	lcdGotoXY(0,0);		
    394c:	60 e0       	ldi	r22, 0x00	; 0
    394e:	80 e0       	ldi	r24, 0x00	; 0
    3950:	0e 94 a7 1b 	call	0x374e	; 0x374e <lcdGotoXY>
		
	checkSD(inputs[SD]);
    3954:	ca 56       	subi	r28, 0x6A	; 106
    3956:	df 4f       	sbci	r29, 0xFF	; 255
    3958:	88 81       	ld	r24, Y
    395a:	c6 59       	subi	r28, 0x96	; 150
    395c:	d0 40       	sbci	r29, 0x00	; 0
    395e:	0e 94 37 18 	call	0x306e	; 0x306e <checkSD>
		f_close(&file);
	}
	*/
	
	
	midiPlayVolume(inputs[POT]);
    3962:	c9 56       	subi	r28, 0x69	; 105
    3964:	df 4f       	sbci	r29, 0xFF	; 255
    3966:	88 81       	ld	r24, Y
    3968:	c7 59       	subi	r28, 0x97	; 151
    396a:	d0 40       	sbci	r29, 0x00	; 0
    396c:	0e 94 1c 28 	call	0x5038	; 0x5038 <midiPlayVolume>
	readInputs(inputs);	
    3970:	ce 01       	movw	r24, r28
    3972:	83 57       	subi	r24, 0x73	; 115
    3974:	9f 4f       	sbci	r25, 0xFF	; 255
    3976:	0e 94 11 17 	call	0x2e22	; 0x2e22 <readInputs>
	INPUT input = NONE;
    struct family_entry fam;
	struct sound_entry snd;
	struct MD_MIDIFile mf;
      
	unsigned long microseconds = 0;
    397a:	21 2c       	mov	r2, r1
    397c:	31 2c       	mov	r3, r1
    397e:	21 01       	movw	r4, r2
	struct file_entry_lookup file_entry = {0};
	char (*file_list)[MAX_FNAME];
    unsigned char byteValue = 0;
	unsigned char numOfBytes = 0;
	unsigned char currentMode = SOUND_FAMILY,currentAction = NONE;
	BOOL endRecording = TRUE;
    3980:	77 24       	eor	r7, r7
    3982:	73 94       	inc	r7
	struct SNDFile sf = {0};
	struct file_entry_lookup file_entry = {0};
	char (*file_list)[MAX_FNAME];
    unsigned char byteValue = 0;
	unsigned char numOfBytes = 0;
	unsigned char currentMode = SOUND_FAMILY,currentAction = NONE;
    3984:	ee 24       	eor	r14, r14
    3986:	ea 94       	dec	r14
    3988:	00 e0       	ldi	r16, 0x00	; 0
					currentAction = NONE;
				}
			}
			else if(currentMode == MIDI_REC && endRecording == TRUE){
				if(getMicros() > microseconds){
					sendMidiBuffer(mtevent.event.data,mtevent.event.size);
    398a:	e1 e4       	ldi	r30, 0x41	; 65
    398c:	f0 e0       	ldi	r31, 0x00	; 0
    398e:	ec 0f       	add	r30, r28
    3990:	fd 1f       	adc	r31, r29
    3992:	33 96       	adiw	r30, 0x03	; 3
    3994:	c1 56       	subi	r28, 0x61	; 97
    3996:	dd 4f       	sbci	r29, 0xFD	; 253
    3998:	f9 83       	std	Y+1, r31	; 0x01
    399a:	e8 83       	st	Y, r30
    399c:	cf 59       	subi	r28, 0x9F	; 159
    399e:	d2 40       	sbci	r29, 0x02	; 2
    39a0:	68 94       	set
    39a2:	66 24       	eor	r6, r6
    39a4:	61 f8       	bld	r6, 1
							else if(currentMode == SOUND_SELECTED){
								lcdClear();
								lcdGotoXY(0,0);
								lcdPrintData(getLCDString(SELECTED,SELECTED_LEN),SELECTED_LEN);
								lcdGotoXY(0,1);
								lcdPrintData(fam.name,strlen(fam.name));
    39a6:	0f 2e       	mov	r0, r31
    39a8:	f8 e9       	ldi	r31, 0x98	; 152
    39aa:	8f 2e       	mov	r8, r31
    39ac:	91 2c       	mov	r9, r1
    39ae:	f0 2d       	mov	r31, r0
    39b0:	8c 0e       	add	r8, r28
    39b2:	9d 1e       	adc	r9, r29
    39b4:	f8 e0       	ldi	r31, 0x08	; 8
    39b6:	8f 0e       	add	r8, r31
    39b8:	91 1c       	adc	r9, r1
								closeSNDFile(&sf);
    39ba:	5e 01       	movw	r10, r28
    39bc:	8c e4       	ldi	r24, 0x4C	; 76
    39be:	a8 0e       	add	r10, r24
    39c0:	b1 1c       	adc	r11, r1
								setSNDFile(&sf,file_list[file_entry.current_index],&fam,&snd);
								//createSoundList(&open_files[SOUND_FILE],&numOfItems);
								lcdClear();
								lcdPrintData(fam.name,strlen(fam.name));
								lcdGotoXY(0,1);
								lcdPrintData(snd.name,strlen(snd.name));
    39c2:	a0 eb       	ldi	r26, 0xB0	; 176
    39c4:	b0 e0       	ldi	r27, 0x00	; 0
    39c6:	ac 0f       	add	r26, r28
    39c8:	bd 1f       	adc	r27, r29
    39ca:	12 96       	adiw	r26, 0x02	; 2
    39cc:	c3 56       	subi	r28, 0x63	; 99
    39ce:	dd 4f       	sbci	r29, 0xFD	; 253
    39d0:	b9 83       	std	Y+1, r27	; 0x01
    39d2:	a8 83       	st	Y, r26
    39d4:	cd 59       	subi	r28, 0x9D	; 157
    39d6:	d2 40       	sbci	r29, 0x02	; 2
	
	midiPlayVolume(inputs[POT]);
	readInputs(inputs);	
	
	while(1){						
			if((input = readInputs(inputs)) >= BUTTON0 && input <= SD){	
    39d8:	ce 01       	movw	r24, r28
    39da:	83 57       	subi	r24, 0x73	; 115
    39dc:	9f 4f       	sbci	r25, 0xFF	; 255
    39de:	0e 94 11 17 	call	0x2e22	; 0x2e22 <readInputs>
    39e2:	18 2f       	mov	r17, r24
    39e4:	8a 30       	cpi	r24, 0x0A	; 10
    39e6:	08 f0       	brcs	.+2      	; 0x39ea <main+0x146>
    39e8:	d7 c1       	rjmp	.+942    	; 0x3d98 <main+0x4f4>
				lcdClear();
    39ea:	0e 94 a3 1b 	call	0x3746	; 0x3746 <lcdClear>
				if(input >= BUTTON0 && input <= BUTTON3){
    39ee:	b3 e0       	ldi	r27, 0x03	; 3
    39f0:	b1 17       	cp	r27, r17
    39f2:	70 f0       	brcs	.+28     	; 0x3a10 <main+0x16c>
					currentMode = input;
					currentAction = NONE;
					file_entry.current_index = 0;
    39f4:	c5 57       	subi	r28, 0x75	; 117
    39f6:	df 4f       	sbci	r29, 0xFF	; 255
    39f8:	18 82       	st	Y, r1
    39fa:	cb 58       	subi	r28, 0x8B	; 139
    39fc:	d0 40       	sbci	r29, 0x00	; 0
					file_entry.current_items = 0;					
    39fe:	c6 57       	subi	r28, 0x76	; 118
    3a00:	df 4f       	sbci	r29, 0xFF	; 255
    3a02:	18 82       	st	Y, r1
    3a04:	ca 58       	subi	r28, 0x8A	; 138
    3a06:	d0 40       	sbci	r29, 0x00	; 0
	
	while(1){						
			if((input = readInputs(inputs)) >= BUTTON0 && input <= SD){	
				lcdClear();
				if(input >= BUTTON0 && input <= BUTTON3){
					currentMode = input;
    3a08:	01 2f       	mov	r16, r17
					currentAction = NONE;
    3a0a:	ee 24       	eor	r14, r14
    3a0c:	ea 94       	dec	r14
    3a0e:	05 c0       	rjmp	.+10     	; 0x3a1a <main+0x176>
					file_entry.current_index = 0;
					file_entry.current_items = 0;					
				}
				else if(input >= JOY_UP && input <= JOY_PRESS){
    3a10:	8c ef       	ldi	r24, 0xFC	; 252
    3a12:	81 0f       	add	r24, r17
    3a14:	85 30       	cpi	r24, 0x05	; 5
    3a16:	08 f4       	brcc	.+2      	; 0x3a1a <main+0x176>
					currentAction = input;
    3a18:	e1 2e       	mov	r14, r17
				}
				switch(input){	
    3a1a:	81 2f       	mov	r24, r17
    3a1c:	11 0f       	add	r17, r17
    3a1e:	99 0b       	sbc	r25, r25
    3a20:	aa 0b       	sbc	r26, r26
    3a22:	bb 0b       	sbc	r27, r27
    3a24:	8a 30       	cpi	r24, 0x0A	; 10
    3a26:	91 05       	cpc	r25, r1
    3a28:	08 f0       	brcs	.+2      	; 0x3a2c <main+0x188>
    3a2a:	bf c1       	rjmp	.+894    	; 0x3daa <main+0x506>
    3a2c:	fc 01       	movw	r30, r24
    3a2e:	e6 5d       	subi	r30, 0xD6	; 214
    3a30:	ff 4f       	sbci	r31, 0xFF	; 255
    3a32:	0c 94 61 36 	jmp	0x6cc2	; 0x6cc2 <__tablejump2__>
					case NONE:	break;
					case POT:	break;					
					case SD:	checkSD(inputs[SD]);
    3a36:	ca 56       	subi	r28, 0x6A	; 106
    3a38:	df 4f       	sbci	r29, 0xFF	; 255
    3a3a:	88 81       	ld	r24, Y
    3a3c:	c6 59       	subi	r28, 0x96	; 150
    3a3e:	d0 40       	sbci	r29, 0x00	; 0
    3a40:	0e 94 37 18 	call	0x306e	; 0x306e <checkSD>
								break; 			
    3a44:	b2 c1       	rjmp	.+868    	; 0x3daa <main+0x506>
					case BUTTON0:	// select sound family file						
							createFileList(file_list,".FAM",&file_entry);
    3a46:	ae 01       	movw	r20, r28
    3a48:	46 57       	subi	r20, 0x76	; 118
    3a4a:	5f 4f       	sbci	r21, 0xFF	; 255
    3a4c:	67 e3       	ldi	r22, 0x37	; 55
    3a4e:	71 e0       	ldi	r23, 0x01	; 1
    3a50:	c6 01       	movw	r24, r12
    3a52:	0e 94 8a 18 	call	0x3114	; 0x3114 <createFileList>
							handleFileList(currentMode,currentAction,&file_entry,file_list);					
    3a56:	96 01       	movw	r18, r12
    3a58:	ae 01       	movw	r20, r28
    3a5a:	46 57       	subi	r20, 0x76	; 118
    3a5c:	5f 4f       	sbci	r21, 0xFF	; 255
    3a5e:	6e 2d       	mov	r22, r14
    3a60:	80 2f       	mov	r24, r16
    3a62:	0e 94 15 19 	call	0x322a	; 0x322a <handleFileList>
							break;						
    3a66:	a1 c1       	rjmp	.+834    	; 0x3daa <main+0x506>
					case BUTTON1:	//select sound from file						
							break;						
					case BUTTON2:	// play midi
							createFileList(file_list,".MID",&file_entry);
    3a68:	ae 01       	movw	r20, r28
    3a6a:	46 57       	subi	r20, 0x76	; 118
    3a6c:	5f 4f       	sbci	r21, 0xFF	; 255
    3a6e:	60 e4       	ldi	r22, 0x40	; 64
    3a70:	71 e0       	ldi	r23, 0x01	; 1
    3a72:	c6 01       	movw	r24, r12
    3a74:	0e 94 8a 18 	call	0x3114	; 0x3114 <createFileList>
							handleFileList(currentMode,currentAction,&file_entry,file_list);
    3a78:	96 01       	movw	r18, r12
    3a7a:	ae 01       	movw	r20, r28
    3a7c:	46 57       	subi	r20, 0x76	; 118
    3a7e:	5f 4f       	sbci	r21, 0xFF	; 255
    3a80:	6e 2d       	mov	r22, r14
    3a82:	80 2f       	mov	r24, r16
    3a84:	0e 94 15 19 	call	0x322a	; 0x322a <handleFileList>
							break;
    3a88:	90 c1       	rjmp	.+800    	; 0x3daa <main+0x506>
					case BUTTON3:	// record midi
							endRecording = !endRecording;
    3a8a:	11 e0       	ldi	r17, 0x01	; 1
    3a8c:	71 10       	cpse	r7, r1
    3a8e:	10 e0       	ldi	r17, 0x00	; 0
									
							if(endRecording == FALSE){
    3a90:	77 20       	and	r7, r7
    3a92:	19 f1       	breq	.+70     	; 0x3ada <main+0x236>
								SRAM_seekWrite(0,SEEK_SET);										
    3a94:	60 e0       	ldi	r22, 0x00	; 0
    3a96:	70 e0       	ldi	r23, 0x00	; 0
    3a98:	80 e0       	ldi	r24, 0x00	; 0
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <SRAM_seekWrite>
								f_open(&open_files[MIDI_FILE],"SONG.MID",FA_WRITE | FA_CREATE_ALWAYS);
    3aa0:	4a e0       	ldi	r20, 0x0A	; 10
    3aa2:	6c e3       	ldi	r22, 0x3C	; 60
    3aa4:	71 e0       	ldi	r23, 0x01	; 1
    3aa6:	ce 01       	movw	r24, r28
    3aa8:	01 96       	adiw	r24, 0x01	; 1
    3aaa:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <f_open>
								writeMidi(&open_files[MIDI_FILE]);
    3aae:	ce 01       	movw	r24, r28
    3ab0:	01 96       	adiw	r24, 0x01	; 1
    3ab2:	0e 94 aa 19 	call	0x3354	; 0x3354 <writeMidi>
								lcdGotoXY(0,0);
    3ab6:	60 e0       	ldi	r22, 0x00	; 0
    3ab8:	80 e0       	ldi	r24, 0x00	; 0
    3aba:	0e 94 a7 1b 	call	0x374e	; 0x374e <lcdGotoXY>
								lcdPrintData(getLCDString(RECORD,RECORD_LEN),RECORD_LEN);
    3abe:	69 e0       	ldi	r22, 0x09	; 9
    3ac0:	8b e7       	ldi	r24, 0x7B	; 123
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    3ac8:	69 e0       	ldi	r22, 0x09	; 9
    3aca:	0e 94 37 1c 	call	0x386e	; 0x386e <lcdPrintData>
								microseconds = getMicros();
    3ace:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <getMicros>
    3ad2:	1b 01       	movw	r2, r22
    3ad4:	2c 01       	movw	r4, r24
					case BUTTON2:	// play midi
							createFileList(file_list,".MID",&file_entry);
							handleFileList(currentMode,currentAction,&file_entry,file_list);
							break;
					case BUTTON3:	// record midi
							endRecording = !endRecording;
    3ad6:	71 2e       	mov	r7, r17
    3ad8:	68 c1       	rjmp	.+720    	; 0x3daa <main+0x506>
								lcdGotoXY(0,0);
								lcdPrintData(getLCDString(RECORD,RECORD_LEN),RECORD_LEN);
								microseconds = getMicros();
							}
							else{
								SRAM_seekRead(0,SEEK_SET);
    3ada:	60 e0       	ldi	r22, 0x00	; 0
    3adc:	70 e0       	ldi	r23, 0x00	; 0
    3ade:	80 e0       	ldi	r24, 0x00	; 0
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <SRAM_seekRead>
								readSRAM(((unsigned char *)&mtevent),sizeof(struct midi_time_event));
    3ae6:	6b e0       	ldi	r22, 0x0B	; 11
    3ae8:	70 e0       	ldi	r23, 0x00	; 0
    3aea:	ce 01       	movw	r24, r28
    3aec:	8f 5b       	subi	r24, 0xBF	; 191
    3aee:	9f 4f       	sbci	r25, 0xFF	; 255
    3af0:	0e 94 ee 30 	call	0x61dc	; 0x61dc <readSRAM>
								microseconds = getMicros() + mtevent.delta;
    3af4:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <getMicros>
    3af8:	2c 96       	adiw	r28, 0x0c	; 12
    3afa:	2c ad       	ldd	r18, Y+60	; 0x3c
    3afc:	3d ad       	ldd	r19, Y+61	; 0x3d
    3afe:	4e ad       	ldd	r20, Y+62	; 0x3e
    3b00:	5f ad       	ldd	r21, Y+63	; 0x3f
    3b02:	2c 97       	sbiw	r28, 0x0c	; 12
    3b04:	1b 01       	movw	r2, r22
    3b06:	2c 01       	movw	r4, r24
    3b08:	22 0e       	add	r2, r18
    3b0a:	33 1e       	adc	r3, r19
    3b0c:	44 1e       	adc	r4, r20
    3b0e:	55 1e       	adc	r5, r21
								lcdPrintData(getLCDString(STOPPED,STOPPED_LEN),STOPPED_LEN);
    3b10:	67 e0       	ldi	r22, 0x07	; 7
    3b12:	84 e8       	ldi	r24, 0x84	; 132
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    3b1a:	67 e0       	ldi	r22, 0x07	; 7
    3b1c:	0e 94 37 1c 	call	0x386e	; 0x386e <lcdPrintData>
								f_write(&open_files[MIDI_FILE],"\x01\xFF\x2F\x00",4,(UINT *)&numOfBytes);
    3b20:	9e 01       	movw	r18, r28
    3b22:	24 57       	subi	r18, 0x74	; 116
    3b24:	3f 4f       	sbci	r19, 0xFF	; 255
    3b26:	44 e0       	ldi	r20, 0x04	; 4
    3b28:	50 e0       	ldi	r21, 0x00	; 0
    3b2a:	6b e7       	ldi	r22, 0x7B	; 123
    3b2c:	70 e0       	ldi	r23, 0x00	; 0
    3b2e:	ce 01       	movw	r24, r28
    3b30:	01 96       	adiw	r24, 0x01	; 1
    3b32:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <f_write>
								f_close(&open_files[MIDI_FILE]);
    3b36:	ce 01       	movw	r24, r28
    3b38:	01 96       	adiw	r24, 0x01	; 1
    3b3a:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <f_close>
					case BUTTON2:	// play midi
							createFileList(file_list,".MID",&file_entry);
							handleFileList(currentMode,currentAction,&file_entry,file_list);
							break;
					case BUTTON3:	// record midi
							endRecording = !endRecording;
    3b3e:	71 2e       	mov	r7, r17
    3b40:	34 c1       	rjmp	.+616    	; 0x3daa <main+0x506>
								f_close(&open_files[MIDI_FILE]);
										
							} 
							break;
					case JOY_UP:	
								if(file_entry.current_index > 0) file_entry.current_index--;
    3b42:	c5 57       	subi	r28, 0x75	; 117
    3b44:	df 4f       	sbci	r29, 0xFF	; 255
    3b46:	88 81       	ld	r24, Y
    3b48:	cb 58       	subi	r28, 0x8B	; 139
    3b4a:	d0 40       	sbci	r29, 0x00	; 0
    3b4c:	88 23       	and	r24, r24
    3b4e:	31 f0       	breq	.+12     	; 0x3b5c <main+0x2b8>
    3b50:	81 50       	subi	r24, 0x01	; 1
    3b52:	c5 57       	subi	r28, 0x75	; 117
    3b54:	df 4f       	sbci	r29, 0xFF	; 255
    3b56:	88 83       	st	Y, r24
    3b58:	cb 58       	subi	r28, 0x8B	; 139
    3b5a:	d0 40       	sbci	r29, 0x00	; 0
								if(currentMode == MIDI_PLAY || currentMode == SOUND_FAMILY)	
    3b5c:	80 2f       	mov	r24, r16
    3b5e:	8d 7f       	andi	r24, 0xFD	; 253
    3b60:	49 f4       	brne	.+18     	; 0x3b74 <main+0x2d0>
									handleFileList(currentMode,currentAction,&file_entry,file_list);
    3b62:	96 01       	movw	r18, r12
    3b64:	ae 01       	movw	r20, r28
    3b66:	46 57       	subi	r20, 0x76	; 118
    3b68:	5f 4f       	sbci	r21, 0xFF	; 255
    3b6a:	6e 2d       	mov	r22, r14
    3b6c:	80 2f       	mov	r24, r16
    3b6e:	0e 94 15 19 	call	0x322a	; 0x322a <handleFileList>
    3b72:	1b c1       	rjmp	.+566    	; 0x3daa <main+0x506>
								else if(currentMode == SOUND_SELECTED){
    3b74:	01 30       	cpi	r16, 0x01	; 1
    3b76:	09 f0       	breq	.+2      	; 0x3b7a <main+0x2d6>
    3b78:	3c c1       	rjmp	.+632    	; 0x3df2 <main+0x54e>
									scrollSoundList(&sf,JOY_UP,&fam,&snd);
    3b7a:	9e 01       	movw	r18, r28
    3b7c:	20 55       	subi	r18, 0x50	; 80
    3b7e:	3f 4f       	sbci	r19, 0xFF	; 255
    3b80:	ae 01       	movw	r20, r28
    3b82:	48 56       	subi	r20, 0x68	; 104
    3b84:	5f 4f       	sbci	r21, 0xFF	; 255
    3b86:	64 e0       	ldi	r22, 0x04	; 4
    3b88:	c5 01       	movw	r24, r10
    3b8a:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <scrollSoundList>
									sendProgramChange(snd.bank,snd.prog);
    3b8e:	cf 54       	subi	r28, 0x4F	; 79
    3b90:	df 4f       	sbci	r29, 0xFF	; 255
    3b92:	68 81       	ld	r22, Y
    3b94:	c1 5b       	subi	r28, 0xB1	; 177
    3b96:	d0 40       	sbci	r29, 0x00	; 0
    3b98:	c0 55       	subi	r28, 0x50	; 80
    3b9a:	df 4f       	sbci	r29, 0xFF	; 255
    3b9c:	88 81       	ld	r24, Y
    3b9e:	c0 5b       	subi	r28, 0xB0	; 176
    3ba0:	d0 40       	sbci	r29, 0x00	; 0
    3ba2:	0e 94 33 27 	call	0x4e66	; 0x4e66 <sendProgramChange>
    3ba6:	7e c1       	rjmp	.+764    	; 0x3ea4 <main+0x600>
								}
								break;
					case JOY_RIGHT:	
								scrollSoundList(&sf,JOY_RIGHT, &fam,&snd);
    3ba8:	9e 01       	movw	r18, r28
    3baa:	20 55       	subi	r18, 0x50	; 80
    3bac:	3f 4f       	sbci	r19, 0xFF	; 255
    3bae:	ae 01       	movw	r20, r28
    3bb0:	48 56       	subi	r20, 0x68	; 104
    3bb2:	5f 4f       	sbci	r21, 0xFF	; 255
    3bb4:	65 e0       	ldi	r22, 0x05	; 5
    3bb6:	c5 01       	movw	r24, r10
    3bb8:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <scrollSoundList>
								sendProgramChange(snd.bank,snd.prog);
    3bbc:	cf 54       	subi	r28, 0x4F	; 79
    3bbe:	df 4f       	sbci	r29, 0xFF	; 255
    3bc0:	68 81       	ld	r22, Y
    3bc2:	c1 5b       	subi	r28, 0xB1	; 177
    3bc4:	d0 40       	sbci	r29, 0x00	; 0
    3bc6:	c0 55       	subi	r28, 0x50	; 80
    3bc8:	df 4f       	sbci	r29, 0xFF	; 255
    3bca:	88 81       	ld	r24, Y
    3bcc:	c0 5b       	subi	r28, 0xB0	; 176
    3bce:	d0 40       	sbci	r29, 0x00	; 0
    3bd0:	0e 94 33 27 	call	0x4e66	; 0x4e66 <sendProgramChange>
								break;
    3bd4:	ea c0       	rjmp	.+468    	; 0x3daa <main+0x506>
					case JOY_DOWN:	
								if(file_entry.current_index < (file_entry.current_items - 1)) file_entry.current_index++;
    3bd6:	c5 57       	subi	r28, 0x75	; 117
    3bd8:	df 4f       	sbci	r29, 0xFF	; 255
    3bda:	28 81       	ld	r18, Y
    3bdc:	cb 58       	subi	r28, 0x8B	; 139
    3bde:	d0 40       	sbci	r29, 0x00	; 0
    3be0:	42 2f       	mov	r20, r18
    3be2:	50 e0       	ldi	r21, 0x00	; 0
    3be4:	c6 57       	subi	r28, 0x76	; 118
    3be6:	df 4f       	sbci	r29, 0xFF	; 255
    3be8:	88 81       	ld	r24, Y
    3bea:	ca 58       	subi	r28, 0x8A	; 138
    3bec:	d0 40       	sbci	r29, 0x00	; 0
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	01 97       	sbiw	r24, 0x01	; 1
    3bf2:	48 17       	cp	r20, r24
    3bf4:	59 07       	cpc	r21, r25
    3bf6:	34 f4       	brge	.+12     	; 0x3c04 <main+0x360>
    3bf8:	2f 5f       	subi	r18, 0xFF	; 255
    3bfa:	c5 57       	subi	r28, 0x75	; 117
    3bfc:	df 4f       	sbci	r29, 0xFF	; 255
    3bfe:	28 83       	st	Y, r18
    3c00:	cb 58       	subi	r28, 0x8B	; 139
    3c02:	d0 40       	sbci	r29, 0x00	; 0
								if(currentMode == MIDI_PLAY || currentMode == SOUND_FAMILY) 
    3c04:	80 2f       	mov	r24, r16
    3c06:	8d 7f       	andi	r24, 0xFD	; 253
    3c08:	49 f4       	brne	.+18     	; 0x3c1c <main+0x378>
									handleFileList(currentMode,currentAction,&file_entry,file_list);
    3c0a:	96 01       	movw	r18, r12
    3c0c:	ae 01       	movw	r20, r28
    3c0e:	46 57       	subi	r20, 0x76	; 118
    3c10:	5f 4f       	sbci	r21, 0xFF	; 255
    3c12:	6e 2d       	mov	r22, r14
    3c14:	80 2f       	mov	r24, r16
    3c16:	0e 94 15 19 	call	0x322a	; 0x322a <handleFileList>
    3c1a:	c7 c0       	rjmp	.+398    	; 0x3daa <main+0x506>
								else if(currentMode == SOUND_SELECTED){
    3c1c:	01 30       	cpi	r16, 0x01	; 1
    3c1e:	09 f0       	breq	.+2      	; 0x3c22 <main+0x37e>
    3c20:	e8 c0       	rjmp	.+464    	; 0x3df2 <main+0x54e>
									scrollSoundList(&sf,JOY_DOWN, &fam,&snd);
    3c22:	9e 01       	movw	r18, r28
    3c24:	20 55       	subi	r18, 0x50	; 80
    3c26:	3f 4f       	sbci	r19, 0xFF	; 255
    3c28:	ae 01       	movw	r20, r28
    3c2a:	48 56       	subi	r20, 0x68	; 104
    3c2c:	5f 4f       	sbci	r21, 0xFF	; 255
    3c2e:	66 e0       	ldi	r22, 0x06	; 6
    3c30:	c5 01       	movw	r24, r10
    3c32:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <scrollSoundList>
									sendProgramChange(snd.bank,snd.prog);
    3c36:	cf 54       	subi	r28, 0x4F	; 79
    3c38:	df 4f       	sbci	r29, 0xFF	; 255
    3c3a:	68 81       	ld	r22, Y
    3c3c:	c1 5b       	subi	r28, 0xB1	; 177
    3c3e:	d0 40       	sbci	r29, 0x00	; 0
    3c40:	c0 55       	subi	r28, 0x50	; 80
    3c42:	df 4f       	sbci	r29, 0xFF	; 255
    3c44:	88 81       	ld	r24, Y
    3c46:	c0 5b       	subi	r28, 0xB0	; 176
    3c48:	d0 40       	sbci	r29, 0x00	; 0
    3c4a:	0e 94 33 27 	call	0x4e66	; 0x4e66 <sendProgramChange>
    3c4e:	2a c1       	rjmp	.+596    	; 0x3ea4 <main+0x600>
								}
								break;
					case JOY_LEFT:	
								scrollSoundList(&sf,JOY_LEFT,&fam,&snd);
    3c50:	9e 01       	movw	r18, r28
    3c52:	20 55       	subi	r18, 0x50	; 80
    3c54:	3f 4f       	sbci	r19, 0xFF	; 255
    3c56:	ae 01       	movw	r20, r28
    3c58:	48 56       	subi	r20, 0x68	; 104
    3c5a:	5f 4f       	sbci	r21, 0xFF	; 255
    3c5c:	67 e0       	ldi	r22, 0x07	; 7
    3c5e:	c5 01       	movw	r24, r10
    3c60:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <scrollSoundList>
								sendProgramChange(snd.bank,snd.prog);
    3c64:	cf 54       	subi	r28, 0x4F	; 79
    3c66:	df 4f       	sbci	r29, 0xFF	; 255
    3c68:	68 81       	ld	r22, Y
    3c6a:	c1 5b       	subi	r28, 0xB1	; 177
    3c6c:	d0 40       	sbci	r29, 0x00	; 0
    3c6e:	c0 55       	subi	r28, 0x50	; 80
    3c70:	df 4f       	sbci	r29, 0xFF	; 255
    3c72:	88 81       	ld	r24, Y
    3c74:	c0 5b       	subi	r28, 0xB0	; 176
    3c76:	d0 40       	sbci	r29, 0x00	; 0
    3c78:	0e 94 33 27 	call	0x4e66	; 0x4e66 <sendProgramChange>
								break;
    3c7c:	96 c0       	rjmp	.+300    	; 0x3daa <main+0x506>
					case JOY_PRESS:	
							if(currentMode == MIDI_PLAY)										
    3c7e:	02 30       	cpi	r16, 0x02	; 2
    3c80:	89 f4       	brne	.+34     	; 0x3ca4 <main+0x400>
								setMidiFile(&mf,file_list[file_entry.current_index]);									
    3c82:	c5 57       	subi	r28, 0x75	; 117
    3c84:	df 4f       	sbci	r29, 0xFF	; 255
    3c86:	88 81       	ld	r24, Y
    3c88:	cb 58       	subi	r28, 0x8B	; 139
    3c8a:	d0 40       	sbci	r29, 0x00	; 0
    3c8c:	b6 01       	movw	r22, r12
    3c8e:	e0 e1       	ldi	r30, 0x10	; 16
    3c90:	8e 9f       	mul	r24, r30
    3c92:	60 0d       	add	r22, r0
    3c94:	71 1d       	adc	r23, r1
    3c96:	11 24       	eor	r1, r1
    3c98:	ce 01       	movw	r24, r28
    3c9a:	8e 53       	subi	r24, 0x3E	; 62
    3c9c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c9e:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <setMidiFile>
    3ca2:	85 c0       	rjmp	.+266    	; 0x3dae <main+0x50a>
							else if(currentMode == SOUND_FAMILY){
    3ca4:	01 11       	cpse	r16, r1
    3ca6:	54 c0       	rjmp	.+168    	; 0x3d50 <main+0x4ac>
								if(sf._fileOpen == TRUE){
    3ca8:	d5 01       	movw	r26, r10
    3caa:	90 96       	adiw	r26, 0x20	; 32
    3cac:	8c 91       	ld	r24, X
    3cae:	81 30       	cpi	r24, 0x01	; 1
    3cb0:	19 f4       	brne	.+6      	; 0x3cb8 <main+0x414>
									closeSNDFile(&sf);
    3cb2:	c5 01       	movw	r24, r10
    3cb4:	0e 94 c9 2c 	call	0x5992	; 0x5992 <closeSNDFile>
								}
								memset(&sf,0,sizeof(struct SNDFile));
    3cb8:	8e e3       	ldi	r24, 0x3E	; 62
    3cba:	f5 01       	movw	r30, r10
    3cbc:	11 92       	st	Z+, r1
    3cbe:	8a 95       	dec	r24
    3cc0:	e9 f7       	brne	.-6      	; 0x3cbc <main+0x418>
								// open selected file and get first family name and first sound of that family (fam/snd params)
								// f_open
								setSNDFile(&sf,file_list[file_entry.current_index],&fam,&snd);
    3cc2:	c5 57       	subi	r28, 0x75	; 117
    3cc4:	df 4f       	sbci	r29, 0xFF	; 255
    3cc6:	88 81       	ld	r24, Y
    3cc8:	cb 58       	subi	r28, 0x8B	; 139
    3cca:	d0 40       	sbci	r29, 0x00	; 0
    3ccc:	b6 01       	movw	r22, r12
    3cce:	f0 e1       	ldi	r31, 0x10	; 16
    3cd0:	8f 9f       	mul	r24, r31
    3cd2:	60 0d       	add	r22, r0
    3cd4:	71 1d       	adc	r23, r1
    3cd6:	11 24       	eor	r1, r1
    3cd8:	9e 01       	movw	r18, r28
    3cda:	20 55       	subi	r18, 0x50	; 80
    3cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    3cde:	ae 01       	movw	r20, r28
    3ce0:	48 56       	subi	r20, 0x68	; 104
    3ce2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ce4:	c5 01       	movw	r24, r10
    3ce6:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <setSNDFile>
								//createSoundList(&open_files[SOUND_FILE],&numOfItems);
								lcdClear();
    3cea:	0e 94 a3 1b 	call	0x3746	; 0x3746 <lcdClear>
								lcdPrintData(fam.name,strlen(fam.name));
    3cee:	f4 01       	movw	r30, r8
    3cf0:	01 90       	ld	r0, Z+
    3cf2:	00 20       	and	r0, r0
    3cf4:	e9 f7       	brne	.-6      	; 0x3cf0 <main+0x44c>
    3cf6:	31 97       	sbiw	r30, 0x01	; 1
    3cf8:	bf 01       	movw	r22, r30
    3cfa:	68 19       	sub	r22, r8
    3cfc:	79 09       	sbc	r23, r9
    3cfe:	c4 01       	movw	r24, r8
    3d00:	0e 94 37 1c 	call	0x386e	; 0x386e <lcdPrintData>
								lcdGotoXY(0,1);
    3d04:	61 e0       	ldi	r22, 0x01	; 1
    3d06:	80 e0       	ldi	r24, 0x00	; 0
    3d08:	0e 94 a7 1b 	call	0x374e	; 0x374e <lcdGotoXY>
								lcdPrintData(snd.name,strlen(snd.name));
    3d0c:	c3 56       	subi	r28, 0x63	; 99
    3d0e:	dd 4f       	sbci	r29, 0xFD	; 253
    3d10:	e8 81       	ld	r30, Y
    3d12:	f9 81       	ldd	r31, Y+1	; 0x01
    3d14:	cd 59       	subi	r28, 0x9D	; 157
    3d16:	d2 40       	sbci	r29, 0x02	; 2
    3d18:	01 90       	ld	r0, Z+
    3d1a:	00 20       	and	r0, r0
    3d1c:	e9 f7       	brne	.-6      	; 0x3d18 <main+0x474>
    3d1e:	31 97       	sbiw	r30, 0x01	; 1
    3d20:	bf 01       	movw	r22, r30
    3d22:	c3 56       	subi	r28, 0x63	; 99
    3d24:	dd 4f       	sbci	r29, 0xFD	; 253
    3d26:	88 81       	ld	r24, Y
    3d28:	99 81       	ldd	r25, Y+1	; 0x01
    3d2a:	cd 59       	subi	r28, 0x9D	; 157
    3d2c:	d2 40       	sbci	r29, 0x02	; 2
    3d2e:	68 1b       	sub	r22, r24
    3d30:	79 0b       	sbc	r23, r25
    3d32:	0e 94 37 1c 	call	0x386e	; 0x386e <lcdPrintData>
								sendProgramChange(snd.bank,snd.prog);
    3d36:	cf 54       	subi	r28, 0x4F	; 79
    3d38:	df 4f       	sbci	r29, 0xFF	; 255
    3d3a:	68 81       	ld	r22, Y
    3d3c:	c1 5b       	subi	r28, 0xB1	; 177
    3d3e:	d0 40       	sbci	r29, 0x00	; 0
    3d40:	c0 55       	subi	r28, 0x50	; 80
    3d42:	df 4f       	sbci	r29, 0xFF	; 255
    3d44:	88 81       	ld	r24, Y
    3d46:	c0 5b       	subi	r28, 0xB0	; 176
    3d48:	d0 40       	sbci	r29, 0x00	; 0
    3d4a:	0e 94 33 27 	call	0x4e66	; 0x4e66 <sendProgramChange>
    3d4e:	aa c0       	rjmp	.+340    	; 0x3ea4 <main+0x600>
								currentMode = SOUND_SELECTED;																				
							}
							else if(currentMode == SOUND_SELECTED){
    3d50:	01 30       	cpi	r16, 0x01	; 1
    3d52:	09 f0       	breq	.+2      	; 0x3d56 <main+0x4b2>
    3d54:	4e c0       	rjmp	.+156    	; 0x3df2 <main+0x54e>
								lcdClear();
    3d56:	0e 94 a3 1b 	call	0x3746	; 0x3746 <lcdClear>
								lcdGotoXY(0,0);
    3d5a:	60 e0       	ldi	r22, 0x00	; 0
    3d5c:	80 e0       	ldi	r24, 0x00	; 0
    3d5e:	0e 94 a7 1b 	call	0x374e	; 0x374e <lcdGotoXY>
								lcdPrintData(getLCDString(SELECTED,SELECTED_LEN),SELECTED_LEN);
    3d62:	68 e0       	ldi	r22, 0x08	; 8
    3d64:	83 e9       	ldi	r24, 0x93	; 147
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    3d6c:	68 e0       	ldi	r22, 0x08	; 8
    3d6e:	0e 94 37 1c 	call	0x386e	; 0x386e <lcdPrintData>
								lcdGotoXY(0,1);
    3d72:	61 e0       	ldi	r22, 0x01	; 1
    3d74:	80 e0       	ldi	r24, 0x00	; 0
    3d76:	0e 94 a7 1b 	call	0x374e	; 0x374e <lcdGotoXY>
								lcdPrintData(fam.name,strlen(fam.name));
    3d7a:	f4 01       	movw	r30, r8
    3d7c:	01 90       	ld	r0, Z+
    3d7e:	00 20       	and	r0, r0
    3d80:	e9 f7       	brne	.-6      	; 0x3d7c <main+0x4d8>
    3d82:	31 97       	sbiw	r30, 0x01	; 1
    3d84:	bf 01       	movw	r22, r30
    3d86:	68 19       	sub	r22, r8
    3d88:	79 09       	sbc	r23, r9
    3d8a:	c4 01       	movw	r24, r8
    3d8c:	0e 94 37 1c 	call	0x386e	; 0x386e <lcdPrintData>
								closeSNDFile(&sf);
    3d90:	c5 01       	movw	r24, r10
    3d92:	0e 94 c9 2c 	call	0x5992	; 0x5992 <closeSNDFile>
    3d96:	86 c0       	rjmp	.+268    	; 0x3ea4 <main+0x600>
				//lcdGotoXY(0,1);
				//lcdPrintData(fam.name,strlen(fam.name));
				
				//_delay_ms(250);
			}
			else if(input == POT){
    3d98:	8a 30       	cpi	r24, 0x0A	; 10
    3d9a:	39 f4       	brne	.+14     	; 0x3daa <main+0x506>
				midiPlayVolume(inputs[POT]);
    3d9c:	c9 56       	subi	r28, 0x69	; 105
    3d9e:	df 4f       	sbci	r29, 0xFF	; 255
    3da0:	88 81       	ld	r24, Y
    3da2:	c7 59       	subi	r28, 0x97	; 151
    3da4:	d0 40       	sbci	r29, 0x00	; 0
    3da6:	0e 94 1c 28 	call	0x5038	; 0x5038 <midiPlayVolume>
			}
			
			
			// >> process events
			if(currentMode == MIDI_PLAY && currentAction == JOY_PRESS){
    3daa:	02 30       	cpi	r16, 0x02	; 2
    3dac:	11 f5       	brne	.+68     	; 0x3df2 <main+0x54e>
    3dae:	98 e0       	ldi	r25, 0x08	; 8
    3db0:	e9 12       	cpse	r14, r25
    3db2:	4c c0       	rjmp	.+152    	; 0x3e4c <main+0x5a8>
				if(!isEOF(&mf)){
    3db4:	ce 01       	movw	r24, r28
    3db6:	8e 53       	subi	r24, 0x3E	; 62
    3db8:	9f 4f       	sbci	r25, 0xFF	; 255
    3dba:	0e 94 9c 20 	call	0x4138	; 0x4138 <isEOF>
    3dbe:	81 11       	cpse	r24, r1
    3dc0:	07 c0       	rjmp	.+14     	; 0x3dd0 <main+0x52c>
					getNextEvent(&mf);
    3dc2:	ce 01       	movw	r24, r28
    3dc4:	8e 53       	subi	r24, 0x3E	; 62
    3dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    3dc8:	0e 94 63 21 	call	0x42c6	; 0x42c6 <getNextEvent>
    3dcc:	06 2d       	mov	r16, r6
    3dce:	3f c0       	rjmp	.+126    	; 0x3e4e <main+0x5aa>
				}
				else{
					closeMIDIFile(&mf);
    3dd0:	ce 01       	movw	r24, r28
    3dd2:	8e 53       	subi	r24, 0x3E	; 62
    3dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    3dd6:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <closeMIDIFile>
					lcdPrintData(getLCDString(FINISHED,FINISHED_LEN),FINISHED_LEN);
    3dda:	68 e0       	ldi	r22, 0x08	; 8
    3ddc:	8b e8       	ldi	r24, 0x8B	; 139
    3dde:	90 e0       	ldi	r25, 0x00	; 0
    3de0:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    3de4:	68 e0       	ldi	r22, 0x08	; 8
    3de6:	0e 94 37 1c 	call	0x386e	; 0x386e <lcdPrintData>
    3dea:	06 2d       	mov	r16, r6
					currentAction = NONE;
    3dec:	ee 24       	eor	r14, r14
    3dee:	ea 94       	dec	r14
    3df0:	2e c0       	rjmp	.+92     	; 0x3e4e <main+0x5aa>
				}
			}
			else if(currentMode == MIDI_REC && endRecording == TRUE){
    3df2:	03 30       	cpi	r16, 0x03	; 3
    3df4:	61 f5       	brne	.+88     	; 0x3e4e <main+0x5aa>
    3df6:	a1 e0       	ldi	r26, 0x01	; 1
    3df8:	7a 12       	cpse	r7, r26
    3dfa:	29 c0       	rjmp	.+82     	; 0x3e4e <main+0x5aa>
				if(getMicros() > microseconds){
    3dfc:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <getMicros>
    3e00:	26 16       	cp	r2, r22
    3e02:	37 06       	cpc	r3, r23
    3e04:	48 06       	cpc	r4, r24
    3e06:	59 06       	cpc	r5, r25
    3e08:	10 f5       	brcc	.+68     	; 0x3e4e <main+0x5aa>
					sendMidiBuffer(mtevent.event.data,mtevent.event.size);
    3e0a:	24 96       	adiw	r28, 0x04	; 4
    3e0c:	6f ad       	ldd	r22, Y+63	; 0x3f
    3e0e:	24 97       	sbiw	r28, 0x04	; 4
    3e10:	c1 56       	subi	r28, 0x61	; 97
    3e12:	dd 4f       	sbci	r29, 0xFD	; 253
    3e14:	88 81       	ld	r24, Y
    3e16:	99 81       	ldd	r25, Y+1	; 0x01
    3e18:	cf 59       	subi	r28, 0x9F	; 159
    3e1a:	d2 40       	sbci	r29, 0x02	; 2
    3e1c:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <sendMidiBuffer>
					readSRAM(((unsigned char *)&mtevent),sizeof(struct midi_time_event));
    3e20:	6b e0       	ldi	r22, 0x0B	; 11
    3e22:	70 e0       	ldi	r23, 0x00	; 0
    3e24:	ce 01       	movw	r24, r28
    3e26:	8f 5b       	subi	r24, 0xBF	; 191
    3e28:	9f 4f       	sbci	r25, 0xFF	; 255
    3e2a:	0e 94 ee 30 	call	0x61dc	; 0x61dc <readSRAM>
					microseconds = getMicros() + mtevent.delta; 
    3e2e:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <getMicros>
    3e32:	2c 96       	adiw	r28, 0x0c	; 12
    3e34:	2c ad       	ldd	r18, Y+60	; 0x3c
    3e36:	3d ad       	ldd	r19, Y+61	; 0x3d
    3e38:	4e ad       	ldd	r20, Y+62	; 0x3e
    3e3a:	5f ad       	ldd	r21, Y+63	; 0x3f
    3e3c:	2c 97       	sbiw	r28, 0x0c	; 12
    3e3e:	1b 01       	movw	r2, r22
    3e40:	2c 01       	movw	r4, r24
    3e42:	22 0e       	add	r2, r18
    3e44:	33 1e       	adc	r3, r19
    3e46:	44 1e       	adc	r4, r20
    3e48:	55 1e       	adc	r5, r21
    3e4a:	01 c0       	rjmp	.+2      	; 0x3e4e <main+0x5aa>
    3e4c:	06 2d       	mov	r16, r6
				}
			}
			if(!uartReceiveBufferIsEmpty()){
    3e4e:	0e 94 ed 33 	call	0x67da	; 0x67da <uartReceiveBufferIsEmpty>
    3e52:	81 11       	cpse	r24, r1
    3e54:	c1 cd       	rjmp	.-1150   	; 0x39d8 <main+0x134>
				byteValue = (unsigned char)uartGetByte();
    3e56:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <uartGetByte>
				if(readMidiMessage(byteValue,&numOfBytes) == TRUE){
    3e5a:	be 01       	movw	r22, r28
    3e5c:	64 57       	subi	r22, 0x74	; 116
    3e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e60:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <readMidiMessage>
    3e64:	81 30       	cpi	r24, 0x01	; 1
    3e66:	09 f0       	breq	.+2      	; 0x3e6a <main+0x5c6>
    3e68:	b7 cd       	rjmp	.-1170   	; 0x39d8 <main+0x134>
					sendMidiMessage(numOfBytes);
    3e6a:	c4 57       	subi	r28, 0x74	; 116
    3e6c:	df 4f       	sbci	r29, 0xFF	; 255
    3e6e:	88 81       	ld	r24, Y
    3e70:	cc 58       	subi	r28, 0x8C	; 140
    3e72:	d0 40       	sbci	r29, 0x00	; 0
    3e74:	0e 94 d5 26 	call	0x4daa	; 0x4daa <sendMidiMessage>
					if(currentMode == MIDI_REC && endRecording == FALSE){
    3e78:	03 30       	cpi	r16, 0x03	; 3
    3e7a:	09 f0       	breq	.+2      	; 0x3e7e <main+0x5da>
    3e7c:	ad cd       	rjmp	.-1190   	; 0x39d8 <main+0x134>
    3e7e:	71 10       	cpse	r7, r1
    3e80:	ab cd       	rjmp	.-1194   	; 0x39d8 <main+0x134>
						delta = (getMicros() - microseconds);
    3e82:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <getMicros>
						//WriteVarLen(&soundFile,delta);
						writeSRAM((unsigned char *)getMidiStruct(delta),sizeof(struct midi_time_event));						
    3e86:	62 19       	sub	r22, r2
    3e88:	73 09       	sbc	r23, r3
    3e8a:	84 09       	sbc	r24, r4
    3e8c:	95 09       	sbc	r25, r5
    3e8e:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <getMidiStruct>
    3e92:	6b e0       	ldi	r22, 0x0B	; 11
    3e94:	70 e0       	ldi	r23, 0x00	; 0
    3e96:	0e 94 14 30 	call	0x6028	; 0x6028 <writeSRAM>
						microseconds = getMicros();
    3e9a:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <getMicros>
    3e9e:	1b 01       	movw	r2, r22
    3ea0:	2c 01       	movw	r4, r24
    3ea2:	9a cd       	rjmp	.-1228   	; 0x39d8 <main+0x134>
    3ea4:	01 e0       	ldi	r16, 0x01	; 1
    3ea6:	d3 cf       	rjmp	.-90     	; 0x3e4e <main+0x5aa>

00003ea8 <setMidiHandler>:


const char * getFilename(struct MD_MIDIFile *m) 
{ 
	return(m->_fileName); 
}
    3ea8:	fc 01       	movw	r30, r24
    3eaa:	71 83       	std	Z+1, r23	; 0x01
    3eac:	60 83       	st	Z, r22
    3eae:	08 95       	ret

00003eb0 <setMetaHandler>:
    3eb0:	fc 01       	movw	r30, r24
    3eb2:	75 83       	std	Z+5, r23	; 0x05
    3eb4:	64 83       	std	Z+4, r22	; 0x04
    3eb6:	08 95       	ret

00003eb8 <setSysexHandler>:
    3eb8:	fc 01       	movw	r30, r24
    3eba:	73 83       	std	Z+3, r23	; 0x03
    3ebc:	62 83       	std	Z+2, r22	; 0x02
    3ebe:	08 95       	ret

00003ec0 <synchTracks>:
    3ec0:	0f 93       	push	r16
    3ec2:	1f 93       	push	r17
    3ec4:	cf 93       	push	r28
    3ec6:	df 93       	push	r29
    3ec8:	8c 01       	movw	r16, r24
    3eca:	fc 01       	movw	r30, r24
    3ecc:	84 a9       	ldd	r24, Z+52	; 0x34
    3ece:	88 23       	and	r24, r24
    3ed0:	81 f0       	breq	.+32     	; 0x3ef2 <synchTracks+0x32>
    3ed2:	c0 e0       	ldi	r28, 0x00	; 0
    3ed4:	d9 e1       	ldi	r29, 0x19	; 25
    3ed6:	c8 01       	movw	r24, r16
    3ed8:	dc 9f       	mul	r29, r28
    3eda:	80 0d       	add	r24, r0
    3edc:	91 1d       	adc	r25, r1
    3ede:	11 24       	eor	r1, r1
    3ee0:	85 5b       	subi	r24, 0xB5	; 181
    3ee2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ee4:	0e 94 27 23 	call	0x464e	; 0x464e <syncTime>
    3ee8:	cf 5f       	subi	r28, 0xFF	; 255
    3eea:	f8 01       	movw	r30, r16
    3eec:	84 a9       	ldd	r24, Z+52	; 0x34
    3eee:	c8 17       	cp	r28, r24
    3ef0:	90 f3       	brcs	.-28     	; 0x3ed6 <synchTracks+0x16>
    3ef2:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <getMicros>
    3ef6:	f8 01       	movw	r30, r16
    3ef8:	fd 96       	adiw	r30, 0x3d	; 61
    3efa:	60 83       	st	Z, r22
    3efc:	71 83       	std	Z+1, r23	; 0x01
    3efe:	82 83       	std	Z+2, r24	; 0x02
    3f00:	93 83       	std	Z+3, r25	; 0x03
    3f02:	df 91       	pop	r29
    3f04:	cf 91       	pop	r28
    3f06:	1f 91       	pop	r17
    3f08:	0f 91       	pop	r16
    3f0a:	08 95       	ret

00003f0c <closeMIDIFile>:
    3f0c:	0f 93       	push	r16
    3f0e:	1f 93       	push	r17
    3f10:	cf 93       	push	r28
    3f12:	df 93       	push	r29
    3f14:	8c 01       	movw	r16, r24
    3f16:	fc 01       	movw	r30, r24
    3f18:	84 a9       	ldd	r24, Z+52	; 0x34
    3f1a:	88 23       	and	r24, r24
    3f1c:	81 f0       	breq	.+32     	; 0x3f3e <closeMIDIFile+0x32>
    3f1e:	c0 e0       	ldi	r28, 0x00	; 0
    3f20:	d9 e1       	ldi	r29, 0x19	; 25
    3f22:	c8 01       	movw	r24, r16
    3f24:	dc 9f       	mul	r29, r28
    3f26:	80 0d       	add	r24, r0
    3f28:	91 1d       	adc	r25, r1
    3f2a:	11 24       	eor	r1, r1
    3f2c:	85 5b       	subi	r24, 0xB5	; 181
    3f2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f30:	0e 94 4a 23 	call	0x4694	; 0x4694 <closeTrack>
    3f34:	cf 5f       	subi	r28, 0xFF	; 255
    3f36:	f8 01       	movw	r30, r16
    3f38:	84 a9       	ldd	r24, Z+52	; 0x34
    3f3a:	c8 17       	cp	r28, r24
    3f3c:	90 f3       	brcs	.-28     	; 0x3f22 <closeMIDIFile+0x16>
    3f3e:	f8 01       	movw	r30, r16
    3f40:	14 aa       	std	Z+52, r1	; 0x34
    3f42:	ef 5b       	subi	r30, 0xBF	; 191
    3f44:	ff 4f       	sbci	r31, 0xFF	; 255
    3f46:	10 82       	st	Z, r1
    3f48:	31 96       	adiw	r30, 0x01	; 1
    3f4a:	10 82       	st	Z, r1
    3f4c:	f8 01       	movw	r30, r16
    3f4e:	16 a2       	std	Z+38, r1	; 0x26
    3f50:	c8 01       	movw	r24, r16
    3f52:	06 96       	adiw	r24, 0x06	; 6
    3f54:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <f_close>
    3f58:	f8 01       	movw	r30, r16
    3f5a:	e6 5b       	subi	r30, 0xB6	; 182
    3f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5e:	10 82       	st	Z, r1
    3f60:	df 91       	pop	r29
    3f62:	cf 91       	pop	r28
    3f64:	1f 91       	pop	r17
    3f66:	0f 91       	pop	r16
    3f68:	08 95       	ret

00003f6a <calcTickTime>:
    3f6a:	0f 93       	push	r16
    3f6c:	1f 93       	push	r17
    3f6e:	cf 93       	push	r28
    3f70:	df 93       	push	r29
    3f72:	ec 01       	movw	r28, r24
    3f74:	dc 01       	movw	r26, r24
    3f76:	ac 5b       	subi	r26, 0xBC	; 188
    3f78:	bf 4f       	sbci	r27, 0xFF	; 255
    3f7a:	fc 01       	movw	r30, r24
    3f7c:	ea 5b       	subi	r30, 0xBA	; 186
    3f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f80:	2d 91       	ld	r18, X+
    3f82:	3c 91       	ld	r19, X
    3f84:	80 81       	ld	r24, Z
    3f86:	91 81       	ldd	r25, Z+1	; 0x01
    3f88:	28 0f       	add	r18, r24
    3f8a:	39 1f       	adc	r19, r25
    3f8c:	21 15       	cp	r18, r1
    3f8e:	31 05       	cpc	r19, r1
    3f90:	e1 f0       	breq	.+56     	; 0x3fca <calcTickTime+0x60>
    3f92:	0d a9       	ldd	r16, Y+53	; 0x35
    3f94:	1e a9       	ldd	r17, Y+54	; 0x36
    3f96:	01 15       	cp	r16, r1
    3f98:	11 05       	cpc	r17, r1
    3f9a:	b9 f0       	breq	.+46     	; 0x3fca <calcTickTime+0x60>
    3f9c:	33 96       	adiw	r30, 0x03	; 3
    3f9e:	80 81       	ld	r24, Z
    3fa0:	88 23       	and	r24, r24
    3fa2:	99 f0       	breq	.+38     	; 0x3fca <calcTickTime+0x60>
    3fa4:	40 e0       	ldi	r20, 0x00	; 0
    3fa6:	50 e0       	ldi	r21, 0x00	; 0
    3fa8:	60 e0       	ldi	r22, 0x00	; 0
    3faa:	77 e8       	ldi	r23, 0x87	; 135
    3fac:	83 e9       	ldi	r24, 0x93	; 147
    3fae:	93 e0       	ldi	r25, 0x03	; 3
    3fb0:	0e 94 42 36 	call	0x6c84	; 0x6c84 <__divmodsi4>
    3fb4:	ca 01       	movw	r24, r20
    3fb6:	b9 01       	movw	r22, r18
    3fb8:	98 01       	movw	r18, r16
    3fba:	40 e0       	ldi	r20, 0x00	; 0
    3fbc:	50 e0       	ldi	r21, 0x00	; 0
    3fbe:	0e 94 20 36 	call	0x6c40	; 0x6c40 <__udivmodsi4>
    3fc2:	2f ab       	std	Y+55, r18	; 0x37
    3fc4:	38 af       	std	Y+56, r19	; 0x38
    3fc6:	49 af       	std	Y+57, r20	; 0x39
    3fc8:	5a af       	std	Y+58, r21	; 0x3a
    3fca:	df 91       	pop	r29
    3fcc:	cf 91       	pop	r28
    3fce:	1f 91       	pop	r17
    3fd0:	0f 91       	pop	r16
    3fd2:	08 95       	ret

00003fd4 <setTempoAdjust>:
    3fd4:	fc 01       	movw	r30, r24
    3fd6:	ec 5b       	subi	r30, 0xBC	; 188
    3fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fda:	20 81       	ld	r18, Z
    3fdc:	31 81       	ldd	r19, Z+1	; 0x01
    3fde:	26 0f       	add	r18, r22
    3fe0:	37 1f       	adc	r19, r23
    3fe2:	23 2b       	or	r18, r19
    3fe4:	19 f0       	breq	.+6      	; 0x3fec <setTempoAdjust+0x18>
    3fe6:	32 96       	adiw	r30, 0x02	; 2
    3fe8:	71 83       	std	Z+1, r23	; 0x01
    3fea:	60 83       	st	Z, r22
    3fec:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <calcTickTime>
    3ff0:	08 95       	ret

00003ff2 <setTempo>:
    3ff2:	fc 01       	movw	r30, r24
    3ff4:	ea 5b       	subi	r30, 0xBA	; 186
    3ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff8:	20 81       	ld	r18, Z
    3ffa:	31 81       	ldd	r19, Z+1	; 0x01
    3ffc:	26 0f       	add	r18, r22
    3ffe:	37 1f       	adc	r19, r23
    4000:	23 2b       	or	r18, r19
    4002:	19 f0       	breq	.+6      	; 0x400a <setTempo+0x18>
    4004:	32 97       	sbiw	r30, 0x02	; 2
    4006:	71 83       	std	Z+1, r23	; 0x01
    4008:	60 83       	st	Z, r22
    400a:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <calcTickTime>
    400e:	08 95       	ret

00004010 <setTimeSignature>:
    4010:	fc 01       	movw	r30, r24
    4012:	e8 5b       	subi	r30, 0xB8	; 184
    4014:	ff 4f       	sbci	r31, 0xFF	; 255
    4016:	60 83       	st	Z, r22
    4018:	31 96       	adiw	r30, 0x01	; 1
    401a:	40 83       	st	Z, r20
    401c:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <calcTickTime>
    4020:	08 95       	ret

00004022 <setMicrosecondPerQuarterNote>:
    4022:	0f 93       	push	r16
    4024:	1f 93       	push	r17
    4026:	cf 93       	push	r28
    4028:	df 93       	push	r29
    402a:	ec 01       	movw	r28, r24
    402c:	9a 01       	movw	r18, r20
    402e:	ab 01       	movw	r20, r22
    4030:	8c 01       	movw	r16, r24
    4032:	0c 5b       	subi	r16, 0xBC	; 188
    4034:	1f 4f       	sbci	r17, 0xFF	; 255
    4036:	60 e0       	ldi	r22, 0x00	; 0
    4038:	77 e8       	ldi	r23, 0x87	; 135
    403a:	83 e9       	ldi	r24, 0x93	; 147
    403c:	93 e0       	ldi	r25, 0x03	; 3
    403e:	0e 94 20 36 	call	0x6c40	; 0x6c40 <__udivmodsi4>
    4042:	f8 01       	movw	r30, r16
    4044:	31 83       	std	Z+1, r19	; 0x01
    4046:	20 83       	st	Z, r18
    4048:	ce 01       	movw	r24, r28
    404a:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <calcTickTime>
    404e:	df 91       	pop	r29
    4050:	cf 91       	pop	r28
    4052:	1f 91       	pop	r17
    4054:	0f 91       	pop	r16
    4056:	08 95       	ret

00004058 <initialise>:
    4058:	cf 93       	push	r28
    405a:	df 93       	push	r29
    405c:	ec 01       	movw	r28, r24
    405e:	1c aa       	std	Y+52, r1	; 0x34
    4060:	1b aa       	std	Y+51, r1	; 0x33
    4062:	1f aa       	std	Y+55, r1	; 0x37
    4064:	18 ae       	std	Y+56, r1	; 0x38
    4066:	19 ae       	std	Y+57, r1	; 0x39
    4068:	1a ae       	std	Y+58, r1	; 0x3a
    406a:	1c ae       	std	Y+60, r1	; 0x3c
    406c:	1b ae       	std	Y+59, r1	; 0x3b
    406e:	fc 01       	movw	r30, r24
    4070:	ef 5b       	subi	r30, 0xBF	; 191
    4072:	ff 4f       	sbci	r31, 0xFF	; 255
    4074:	10 82       	st	Z, r1
    4076:	32 96       	adiw	r30, 0x02	; 2
    4078:	10 82       	st	Z, r1
    407a:	31 97       	sbiw	r30, 0x01	; 1
    407c:	10 82       	st	Z, r1
    407e:	19 82       	std	Y+1, r1	; 0x01
    4080:	18 82       	st	Y, r1
    4082:	1b 82       	std	Y+3, r1	; 0x03
    4084:	1a 82       	std	Y+2, r1	; 0x02
    4086:	1d 82       	std	Y+5, r1	; 0x05
    4088:	1c 82       	std	Y+4, r1	; 0x04
    408a:	1e a2       	std	Y+38, r1	; 0x26
    408c:	80 e3       	ldi	r24, 0x30	; 48
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	9e ab       	std	Y+54, r25	; 0x36
    4092:	8d ab       	std	Y+53, r24	; 0x35
    4094:	ce 01       	movw	r24, r28
    4096:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <calcTickTime>
    409a:	68 e7       	ldi	r22, 0x78	; 120
    409c:	70 e0       	ldi	r23, 0x00	; 0
    409e:	ce 01       	movw	r24, r28
    40a0:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <setTempo>
    40a4:	60 e0       	ldi	r22, 0x00	; 0
    40a6:	70 e0       	ldi	r23, 0x00	; 0
    40a8:	ce 01       	movw	r24, r28
    40aa:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <setTempoAdjust>
    40ae:	fe 01       	movw	r30, r28
    40b0:	ec 5b       	subi	r30, 0xBC	; 188
    40b2:	ff 4f       	sbci	r31, 0xFF	; 255
    40b4:	88 e7       	ldi	r24, 0x78	; 120
    40b6:	90 e0       	ldi	r25, 0x00	; 0
    40b8:	91 83       	std	Z+1, r25	; 0x01
    40ba:	80 83       	st	Z, r24
    40bc:	ce 01       	movw	r24, r28
    40be:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <calcTickTime>
    40c2:	fe 01       	movw	r30, r28
    40c4:	e8 5b       	subi	r30, 0xB8	; 184
    40c6:	ff 4f       	sbci	r31, 0xFF	; 255
    40c8:	84 e0       	ldi	r24, 0x04	; 4
    40ca:	80 83       	st	Z, r24
    40cc:	31 96       	adiw	r30, 0x01	; 1
    40ce:	80 83       	st	Z, r24
    40d0:	ce 01       	movw	r24, r28
    40d2:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <calcTickTime>
    40d6:	df 91       	pop	r29
    40d8:	cf 91       	pop	r28
    40da:	08 95       	ret

000040dc <restart>:
    40dc:	0f 93       	push	r16
    40de:	1f 93       	push	r17
    40e0:	cf 93       	push	r28
    40e2:	df 93       	push	r29
    40e4:	8c 01       	movw	r16, r24
    40e6:	fc 01       	movw	r30, r24
    40e8:	ed 5b       	subi	r30, 0xBD	; 189
    40ea:	ff 4f       	sbci	r31, 0xFF	; 255
    40ec:	80 81       	ld	r24, Z
    40ee:	88 23       	and	r24, r24
    40f0:	21 f0       	breq	.+8      	; 0x40fa <restart+0x1e>
    40f2:	f8 01       	movw	r30, r16
    40f4:	84 a9       	ldd	r24, Z+52	; 0x34
    40f6:	82 30       	cpi	r24, 0x02	; 2
    40f8:	30 f4       	brcc	.+12     	; 0x4106 <restart+0x2a>
    40fa:	f8 01       	movw	r30, r16
    40fc:	84 a9       	ldd	r24, Z+52	; 0x34
    40fe:	88 23       	and	r24, r24
    4100:	91 f0       	breq	.+36     	; 0x4126 <restart+0x4a>
    4102:	c0 e0       	ldi	r28, 0x00	; 0
    4104:	01 c0       	rjmp	.+2      	; 0x4108 <restart+0x2c>
    4106:	c1 e0       	ldi	r28, 0x01	; 1
    4108:	d9 e1       	ldi	r29, 0x19	; 25
    410a:	c8 01       	movw	r24, r16
    410c:	dc 9f       	mul	r29, r28
    410e:	80 0d       	add	r24, r0
    4110:	91 1d       	adc	r25, r1
    4112:	11 24       	eor	r1, r1
    4114:	85 5b       	subi	r24, 0xB5	; 181
    4116:	9f 4f       	sbci	r25, 0xFF	; 255
    4118:	0e 94 2d 23 	call	0x465a	; 0x465a <restartTrack>
    411c:	cf 5f       	subi	r28, 0xFF	; 255
    411e:	f8 01       	movw	r30, r16
    4120:	84 a9       	ldd	r24, Z+52	; 0x34
    4122:	c8 17       	cp	r28, r24
    4124:	90 f3       	brcs	.-28     	; 0x410a <restart+0x2e>
    4126:	f8 01       	movw	r30, r16
    4128:	ef 5b       	subi	r30, 0xBF	; 191
    412a:	ff 4f       	sbci	r31, 0xFF	; 255
    412c:	10 82       	st	Z, r1
    412e:	df 91       	pop	r29
    4130:	cf 91       	pop	r28
    4132:	1f 91       	pop	r17
    4134:	0f 91       	pop	r16
    4136:	08 95       	ret

00004138 <isEOF>:
    4138:	0f 93       	push	r16
    413a:	1f 93       	push	r17
    413c:	cf 93       	push	r28
    413e:	df 93       	push	r29
    4140:	8c 01       	movw	r16, r24
    4142:	fc 01       	movw	r30, r24
    4144:	84 a9       	ldd	r24, Z+52	; 0x34
    4146:	88 23       	and	r24, r24
    4148:	71 f0       	breq	.+28     	; 0x4166 <isEOF+0x2e>
    414a:	c0 e0       	ldi	r28, 0x00	; 0
    414c:	d9 e1       	ldi	r29, 0x19	; 25
    414e:	c8 01       	movw	r24, r16
    4150:	dc 9f       	mul	r29, r28
    4152:	80 0d       	add	r24, r0
    4154:	91 1d       	adc	r25, r1
    4156:	11 24       	eor	r1, r1
    4158:	85 5b       	subi	r24, 0xB5	; 181
    415a:	9f 4f       	sbci	r25, 0xFF	; 255
    415c:	0e 94 24 23 	call	0x4648	; 0x4648 <getEndOfTrack>
    4160:	81 11       	cpse	r24, r1
    4162:	0e c0       	rjmp	.+28     	; 0x4180 <isEOF+0x48>
    4164:	13 c0       	rjmp	.+38     	; 0x418c <isEOF+0x54>
    4166:	f8 01       	movw	r30, r16
    4168:	ed 5b       	subi	r30, 0xBD	; 189
    416a:	ff 4f       	sbci	r31, 0xFF	; 255
    416c:	80 81       	ld	r24, Z
    416e:	88 23       	and	r24, r24
    4170:	29 f0       	breq	.+10     	; 0x417c <isEOF+0x44>
    4172:	c8 01       	movw	r24, r16
    4174:	0e 94 6e 20 	call	0x40dc	; 0x40dc <restart>
    4178:	80 e0       	ldi	r24, 0x00	; 0
    417a:	08 c0       	rjmp	.+16     	; 0x418c <isEOF+0x54>
    417c:	81 e0       	ldi	r24, 0x01	; 1
    417e:	06 c0       	rjmp	.+12     	; 0x418c <isEOF+0x54>
    4180:	cf 5f       	subi	r28, 0xFF	; 255
    4182:	f8 01       	movw	r30, r16
    4184:	84 a9       	ldd	r24, Z+52	; 0x34
    4186:	c8 17       	cp	r28, r24
    4188:	10 f3       	brcs	.-60     	; 0x414e <isEOF+0x16>
    418a:	ed cf       	rjmp	.-38     	; 0x4166 <isEOF+0x2e>
    418c:	df 91       	pop	r29
    418e:	cf 91       	pop	r28
    4190:	1f 91       	pop	r17
    4192:	0f 91       	pop	r16
    4194:	08 95       	ret

00004196 <tickClock>:
    4196:	8f 92       	push	r8
    4198:	9f 92       	push	r9
    419a:	af 92       	push	r10
    419c:	bf 92       	push	r11
    419e:	cf 92       	push	r12
    41a0:	df 92       	push	r13
    41a2:	ef 92       	push	r14
    41a4:	ff 92       	push	r15
    41a6:	0f 93       	push	r16
    41a8:	1f 93       	push	r17
    41aa:	cf 93       	push	r28
    41ac:	df 93       	push	r29
    41ae:	ec 01       	movw	r28, r24
    41b0:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <getMicros>
    41b4:	2b ad       	ldd	r18, Y+59	; 0x3b
    41b6:	3c ad       	ldd	r19, Y+60	; 0x3c
    41b8:	69 01       	movw	r12, r18
    41ba:	e1 2c       	mov	r14, r1
    41bc:	f1 2c       	mov	r15, r1
    41be:	fe 01       	movw	r30, r28
    41c0:	fd 96       	adiw	r30, 0x3d	; 61
    41c2:	00 81       	ld	r16, Z
    41c4:	11 81       	ldd	r17, Z+1	; 0x01
    41c6:	22 81       	ldd	r18, Z+2	; 0x02
    41c8:	33 81       	ldd	r19, Z+3	; 0x03
    41ca:	46 01       	movw	r8, r12
    41cc:	57 01       	movw	r10, r14
    41ce:	80 1a       	sub	r8, r16
    41d0:	91 0a       	sbc	r9, r17
    41d2:	a2 0a       	sbc	r10, r18
    41d4:	b3 0a       	sbc	r11, r19
    41d6:	75 01       	movw	r14, r10
    41d8:	64 01       	movw	r12, r8
    41da:	c6 0e       	add	r12, r22
    41dc:	d7 1e       	adc	r13, r23
    41de:	e8 1e       	adc	r14, r24
    41e0:	f9 1e       	adc	r15, r25
    41e2:	8f a8       	ldd	r8, Y+55	; 0x37
    41e4:	98 ac       	ldd	r9, Y+56	; 0x38
    41e6:	a9 ac       	ldd	r10, Y+57	; 0x39
    41e8:	ba ac       	ldd	r11, Y+58	; 0x3a
    41ea:	c8 14       	cp	r12, r8
    41ec:	d9 04       	cpc	r13, r9
    41ee:	ea 04       	cpc	r14, r10
    41f0:	fb 04       	cpc	r15, r11
    41f2:	d8 f0       	brcs	.+54     	; 0x422a <tickClock+0x94>
    41f4:	c7 01       	movw	r24, r14
    41f6:	b6 01       	movw	r22, r12
    41f8:	a5 01       	movw	r20, r10
    41fa:	94 01       	movw	r18, r8
    41fc:	0e 94 20 36 	call	0x6c40	; 0x6c40 <__udivmodsi4>
    4200:	89 01       	movw	r16, r18
    4202:	28 9d       	mul	r18, r8
    4204:	c0 01       	movw	r24, r0
    4206:	29 9d       	mul	r18, r9
    4208:	90 0d       	add	r25, r0
    420a:	38 9d       	mul	r19, r8
    420c:	90 0d       	add	r25, r0
    420e:	11 24       	eor	r1, r1
    4210:	56 01       	movw	r10, r12
    4212:	a8 1a       	sub	r10, r24
    4214:	b9 0a       	sbc	r11, r25
    4216:	bc ae       	std	Y+60, r11	; 0x3c
    4218:	ab ae       	std	Y+59, r10	; 0x3b
    421a:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <getMicros>
    421e:	ed 96       	adiw	r28, 0x3d	; 61
    4220:	68 83       	st	Y, r22
    4222:	79 83       	std	Y+1, r23	; 0x01
    4224:	8a 83       	std	Y+2, r24	; 0x02
    4226:	9b 83       	std	Y+3, r25	; 0x03
    4228:	02 c0       	rjmp	.+4      	; 0x422e <tickClock+0x98>
    422a:	00 e0       	ldi	r16, 0x00	; 0
    422c:	10 e0       	ldi	r17, 0x00	; 0
    422e:	c8 01       	movw	r24, r16
    4230:	df 91       	pop	r29
    4232:	cf 91       	pop	r28
    4234:	1f 91       	pop	r17
    4236:	0f 91       	pop	r16
    4238:	ff 90       	pop	r15
    423a:	ef 90       	pop	r14
    423c:	df 90       	pop	r13
    423e:	cf 90       	pop	r12
    4240:	bf 90       	pop	r11
    4242:	af 90       	pop	r10
    4244:	9f 90       	pop	r9
    4246:	8f 90       	pop	r8
    4248:	08 95       	ret

0000424a <processEvents>:
    424a:	af 92       	push	r10
    424c:	bf 92       	push	r11
    424e:	cf 92       	push	r12
    4250:	df 92       	push	r13
    4252:	ef 92       	push	r14
    4254:	ff 92       	push	r15
    4256:	0f 93       	push	r16
    4258:	1f 93       	push	r17
    425a:	cf 93       	push	r28
    425c:	df 93       	push	r29
    425e:	c0 e0       	ldi	r28, 0x00	; 0
    4260:	fc 01       	movw	r30, r24
    4262:	24 a9       	ldd	r18, Z+52	; 0x34
    4264:	22 23       	and	r18, r18
    4266:	21 f1       	breq	.+72     	; 0x42b0 <processEvents+0x66>
    4268:	7b 01       	movw	r14, r22
    426a:	8c 01       	movw	r16, r24
    426c:	d0 e0       	ldi	r29, 0x00	; 0
    426e:	0f 2e       	mov	r0, r31
    4270:	f9 e1       	ldi	r31, 0x19	; 25
    4272:	df 2e       	mov	r13, r31
    4274:	f0 2d       	mov	r31, r0
    4276:	bb 24       	eor	r11, r11
    4278:	b3 94       	inc	r11
    427a:	cc 24       	eor	r12, r12
    427c:	c3 94       	inc	r12
    427e:	a1 2c       	mov	r10, r1
    4280:	b8 01       	movw	r22, r16
    4282:	dd 9e       	mul	r13, r29
    4284:	60 0d       	add	r22, r0
    4286:	71 1d       	adc	r23, r1
    4288:	11 24       	eor	r1, r1
    428a:	65 5b       	subi	r22, 0xB5	; 181
    428c:	7f 4f       	sbci	r23, 0xFF	; 255
    428e:	a7 01       	movw	r20, r14
    4290:	c8 01       	movw	r24, r16
    4292:	0e 94 d6 25 	call	0x4bac	; 0x4bac <getNextTrackEvent>
    4296:	c1 11       	cpse	r28, r1
    4298:	05 c0       	rjmp	.+10     	; 0x42a4 <processEvents+0x5a>
    429a:	cc 2d       	mov	r28, r12
    429c:	81 11       	cpse	r24, r1
    429e:	03 c0       	rjmp	.+6      	; 0x42a6 <processEvents+0x5c>
    42a0:	ca 2d       	mov	r28, r10
    42a2:	01 c0       	rjmp	.+2      	; 0x42a6 <processEvents+0x5c>
    42a4:	cb 2d       	mov	r28, r11
    42a6:	df 5f       	subi	r29, 0xFF	; 255
    42a8:	f8 01       	movw	r30, r16
    42aa:	84 a9       	ldd	r24, Z+52	; 0x34
    42ac:	d8 17       	cp	r29, r24
    42ae:	40 f3       	brcs	.-48     	; 0x4280 <processEvents+0x36>
    42b0:	df 91       	pop	r29
    42b2:	cf 91       	pop	r28
    42b4:	1f 91       	pop	r17
    42b6:	0f 91       	pop	r16
    42b8:	ff 90       	pop	r15
    42ba:	ef 90       	pop	r14
    42bc:	df 90       	pop	r13
    42be:	cf 90       	pop	r12
    42c0:	bf 90       	pop	r11
    42c2:	af 90       	pop	r10
    42c4:	08 95       	ret

000042c6 <getNextEvent>:
    42c6:	0f 93       	push	r16
    42c8:	1f 93       	push	r17
    42ca:	cf 93       	push	r28
    42cc:	fc 01       	movw	r30, r24
    42ce:	ee 5b       	subi	r30, 0xBE	; 190
    42d0:	ff 4f       	sbci	r31, 0xFF	; 255
    42d2:	c0 81       	ld	r28, Z
    42d4:	c1 11       	cpse	r28, r1
    42d6:	18 c0       	rjmp	.+48     	; 0x4308 <getNextEvent+0x42>
    42d8:	8c 01       	movw	r16, r24
    42da:	31 97       	sbiw	r30, 0x01	; 1
    42dc:	80 81       	ld	r24, Z
    42de:	81 11       	cpse	r24, r1
    42e0:	08 c0       	rjmp	.+16     	; 0x42f2 <getNextEvent+0x2c>
    42e2:	c8 01       	movw	r24, r16
    42e4:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <synchTracks>
    42e8:	81 e0       	ldi	r24, 0x01	; 1
    42ea:	f8 01       	movw	r30, r16
    42ec:	ef 5b       	subi	r30, 0xBF	; 191
    42ee:	ff 4f       	sbci	r31, 0xFF	; 255
    42f0:	80 83       	st	Z, r24
    42f2:	c8 01       	movw	r24, r16
    42f4:	0e 94 cb 20 	call	0x4196	; 0x4196 <tickClock>
    42f8:	00 97       	sbiw	r24, 0x00	; 0
    42fa:	39 f0       	breq	.+14     	; 0x430a <getNextEvent+0x44>
    42fc:	bc 01       	movw	r22, r24
    42fe:	c8 01       	movw	r24, r16
    4300:	0e 94 25 21 	call	0x424a	; 0x424a <processEvents>
    4304:	c1 e0       	ldi	r28, 0x01	; 1
    4306:	01 c0       	rjmp	.+2      	; 0x430a <getNextEvent+0x44>
    4308:	c0 e0       	ldi	r28, 0x00	; 0
    430a:	8c 2f       	mov	r24, r28
    430c:	cf 91       	pop	r28
    430e:	1f 91       	pop	r17
    4310:	0f 91       	pop	r16
    4312:	08 95       	ret

00004314 <loadMIDIFile>:
    4314:	8f 92       	push	r8
    4316:	9f 92       	push	r9
    4318:	af 92       	push	r10
    431a:	bf 92       	push	r11
    431c:	cf 92       	push	r12
    431e:	df 92       	push	r13
    4320:	ef 92       	push	r14
    4322:	ff 92       	push	r15
    4324:	0f 93       	push	r16
    4326:	1f 93       	push	r17
    4328:	cf 93       	push	r28
    432a:	df 93       	push	r29
    432c:	cd b7       	in	r28, 0x3d	; 61
    432e:	de b7       	in	r29, 0x3e	; 62
    4330:	29 97       	sbiw	r28, 0x09	; 9
    4332:	0f b6       	in	r0, 0x3f	; 63
    4334:	f8 94       	cli
    4336:	de bf       	out	0x3e, r29	; 62
    4338:	0f be       	out	0x3f, r0	; 63
    433a:	cd bf       	out	0x3d, r28	; 61
    433c:	fc 01       	movw	r30, r24
    433e:	26 a1       	ldd	r18, Z+38	; 0x26
    4340:	22 23       	and	r18, r18
    4342:	09 f4       	brne	.+2      	; 0x4346 <loadMIDIFile+0x32>
    4344:	d0 c0       	rjmp	.+416    	; 0x44e6 <loadMIDIFile+0x1d2>
    4346:	8c 01       	movw	r16, r24
    4348:	6c 01       	movw	r12, r24
    434a:	f6 e0       	ldi	r31, 0x06	; 6
    434c:	cf 0e       	add	r12, r31
    434e:	d1 1c       	adc	r13, r1
    4350:	bc 01       	movw	r22, r24
    4352:	6a 5d       	subi	r22, 0xDA	; 218
    4354:	7f 4f       	sbci	r23, 0xFF	; 255
    4356:	41 e0       	ldi	r20, 0x01	; 1
    4358:	c6 01       	movw	r24, r12
    435a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <f_open>
    435e:	81 11       	cpse	r24, r1
    4360:	c5 c0       	rjmp	.+394    	; 0x44ec <loadMIDIFile+0x1d8>
    4362:	9e 01       	movw	r18, r28
    4364:	2f 5f       	subi	r18, 0xFF	; 255
    4366:	3f 4f       	sbci	r19, 0xFF	; 255
    4368:	44 e0       	ldi	r20, 0x04	; 4
    436a:	50 e0       	ldi	r21, 0x00	; 0
    436c:	be 01       	movw	r22, r28
    436e:	6b 5f       	subi	r22, 0xFB	; 251
    4370:	7f 4f       	sbci	r23, 0xFF	; 255
    4372:	c6 01       	movw	r24, r12
    4374:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
    4378:	19 86       	std	Y+9, r1	; 0x09
    437a:	65 e4       	ldi	r22, 0x45	; 69
    437c:	71 e0       	ldi	r23, 0x01	; 1
    437e:	ce 01       	movw	r24, r28
    4380:	05 96       	adiw	r24, 0x05	; 5
    4382:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <strcmp>
    4386:	89 2b       	or	r24, r25
    4388:	31 f0       	breq	.+12     	; 0x4396 <loadMIDIFile+0x82>
    438a:	c6 01       	movw	r24, r12
    438c:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <f_close>
    4390:	83 e0       	ldi	r24, 0x03	; 3
    4392:	90 e0       	ldi	r25, 0x00	; 0
    4394:	b0 c0       	rjmp	.+352    	; 0x44f6 <loadMIDIFile+0x1e2>
    4396:	64 e0       	ldi	r22, 0x04	; 4
    4398:	c6 01       	movw	r24, r12
    439a:	0e 94 95 22 	call	0x452a	; 0x452a <readMultiByte>
    439e:	69 83       	std	Y+1, r22	; 0x01
    43a0:	7a 83       	std	Y+2, r23	; 0x02
    43a2:	8b 83       	std	Y+3, r24	; 0x03
    43a4:	9c 83       	std	Y+4, r25	; 0x04
    43a6:	66 30       	cpi	r22, 0x06	; 6
    43a8:	71 05       	cpc	r23, r1
    43aa:	81 05       	cpc	r24, r1
    43ac:	91 05       	cpc	r25, r1
    43ae:	31 f0       	breq	.+12     	; 0x43bc <loadMIDIFile+0xa8>
    43b0:	c6 01       	movw	r24, r12
    43b2:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <f_close>
    43b6:	84 e0       	ldi	r24, 0x04	; 4
    43b8:	90 e0       	ldi	r25, 0x00	; 0
    43ba:	9d c0       	rjmp	.+314    	; 0x44f6 <loadMIDIFile+0x1e2>
    43bc:	62 e0       	ldi	r22, 0x02	; 2
    43be:	c6 01       	movw	r24, r12
    43c0:	0e 94 95 22 	call	0x452a	; 0x452a <readMultiByte>
    43c4:	62 30       	cpi	r22, 0x02	; 2
    43c6:	71 05       	cpc	r23, r1
    43c8:	30 f0       	brcs	.+12     	; 0x43d6 <loadMIDIFile+0xc2>
    43ca:	c6 01       	movw	r24, r12
    43cc:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <f_close>
    43d0:	85 e0       	ldi	r24, 0x05	; 5
    43d2:	90 e0       	ldi	r25, 0x00	; 0
    43d4:	90 c0       	rjmp	.+288    	; 0x44f6 <loadMIDIFile+0x1e2>
    43d6:	f8 01       	movw	r30, r16
    43d8:	63 ab       	std	Z+51, r22	; 0x33
    43da:	62 e0       	ldi	r22, 0x02	; 2
    43dc:	c6 01       	movw	r24, r12
    43de:	0e 94 95 22 	call	0x452a	; 0x452a <readMultiByte>
    43e2:	27 2f       	mov	r18, r23
    43e4:	86 2f       	mov	r24, r22
    43e6:	92 2f       	mov	r25, r18
    43e8:	f8 01       	movw	r30, r16
    43ea:	23 a9       	ldd	r18, Z+51	; 0x33
    43ec:	21 11       	cpse	r18, r1
    43ee:	08 c0       	rjmp	.+16     	; 0x4400 <loadMIDIFile+0xec>
    43f0:	01 97       	sbiw	r24, 0x01	; 1
    43f2:	71 f0       	breq	.+28     	; 0x4410 <loadMIDIFile+0xfc>
    43f4:	c6 01       	movw	r24, r12
    43f6:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <f_close>
    43fa:	86 e0       	ldi	r24, 0x06	; 6
    43fc:	90 e0       	ldi	r25, 0x00	; 0
    43fe:	7b c0       	rjmp	.+246    	; 0x44f6 <loadMIDIFile+0x1e2>
    4400:	41 97       	sbiw	r24, 0x11	; 17
    4402:	30 f0       	brcs	.+12     	; 0x4410 <loadMIDIFile+0xfc>
    4404:	c6 01       	movw	r24, r12
    4406:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <f_close>
    440a:	87 e0       	ldi	r24, 0x07	; 7
    440c:	90 e0       	ldi	r25, 0x00	; 0
    440e:	73 c0       	rjmp	.+230    	; 0x44f6 <loadMIDIFile+0x1e2>
    4410:	f8 01       	movw	r30, r16
    4412:	64 ab       	std	Z+52, r22	; 0x34
    4414:	62 e0       	ldi	r22, 0x02	; 2
    4416:	c6 01       	movw	r24, r12
    4418:	0e 94 95 22 	call	0x452a	; 0x452a <readMultiByte>
    441c:	ab 01       	movw	r20, r22
    441e:	77 23       	and	r23, r23
    4420:	54 f5       	brge	.+84     	; 0x4476 <loadMIDIFile+0x162>
    4422:	27 2f       	mov	r18, r23
    4424:	33 27       	eor	r19, r19
    4426:	23 3e       	cpi	r18, 0xE3	; 227
    4428:	31 05       	cpc	r19, r1
    442a:	d9 f0       	breq	.+54     	; 0x4462 <loadMIDIFile+0x14e>
    442c:	20 f4       	brcc	.+8      	; 0x4436 <loadMIDIFile+0x122>
    442e:	22 3e       	cpi	r18, 0xE2	; 226
    4430:	31 05       	cpc	r19, r1
    4432:	59 f0       	breq	.+22     	; 0x444a <loadMIDIFile+0x136>
    4434:	0d c0       	rjmp	.+26     	; 0x4450 <loadMIDIFile+0x13c>
    4436:	27 3e       	cpi	r18, 0xE7	; 231
    4438:	31 05       	cpc	r19, r1
    443a:	21 f0       	breq	.+8      	; 0x4444 <loadMIDIFile+0x130>
    443c:	28 3e       	cpi	r18, 0xE8	; 232
    443e:	31 05       	cpc	r19, r1
    4440:	69 f0       	breq	.+26     	; 0x445c <loadMIDIFile+0x148>
    4442:	06 c0       	rjmp	.+12     	; 0x4450 <loadMIDIFile+0x13c>
    4444:	29 e1       	ldi	r18, 0x19	; 25
    4446:	30 e0       	ldi	r19, 0x00	; 0
    4448:	0e c0       	rjmp	.+28     	; 0x4466 <loadMIDIFile+0x152>
    444a:	2e e1       	ldi	r18, 0x1E	; 30
    444c:	30 e0       	ldi	r19, 0x00	; 0
    444e:	0b c0       	rjmp	.+22     	; 0x4466 <loadMIDIFile+0x152>
    4450:	c6 01       	movw	r24, r12
    4452:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <f_close>
    4456:	87 e0       	ldi	r24, 0x07	; 7
    4458:	90 e0       	ldi	r25, 0x00	; 0
    445a:	4d c0       	rjmp	.+154    	; 0x44f6 <loadMIDIFile+0x1e2>
    445c:	28 e1       	ldi	r18, 0x18	; 24
    445e:	30 e0       	ldi	r19, 0x00	; 0
    4460:	02 c0       	rjmp	.+4      	; 0x4466 <loadMIDIFile+0x152>
    4462:	2d e1       	ldi	r18, 0x1D	; 29
    4464:	30 e0       	ldi	r19, 0x00	; 0
    4466:	77 27       	eor	r23, r23
    4468:	62 9f       	mul	r22, r18
    446a:	a0 01       	movw	r20, r0
    446c:	63 9f       	mul	r22, r19
    446e:	50 0d       	add	r21, r0
    4470:	72 9f       	mul	r23, r18
    4472:	50 0d       	add	r21, r0
    4474:	11 24       	eor	r1, r1
    4476:	f8 01       	movw	r30, r16
    4478:	56 ab       	std	Z+54, r21	; 0x36
    447a:	45 ab       	std	Z+53, r20	; 0x35
    447c:	c8 01       	movw	r24, r16
    447e:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <calcTickTime>
    4482:	f8 01       	movw	r30, r16
    4484:	84 a9       	ldd	r24, Z+52	; 0x34
    4486:	88 23       	and	r24, r24
    4488:	a1 f1       	breq	.+104    	; 0x44f2 <loadMIDIFile+0x1de>
    448a:	b1 2c       	mov	r11, r1
    448c:	0f 2e       	mov	r0, r31
    448e:	f9 e1       	ldi	r31, 0x19	; 25
    4490:	af 2e       	mov	r10, r31
    4492:	f0 2d       	mov	r31, r0
    4494:	8b 2c       	mov	r8, r11
    4496:	91 2c       	mov	r9, r1
    4498:	a8 9c       	mul	r10, r8
    449a:	c0 01       	movw	r24, r0
    449c:	a9 9c       	mul	r10, r9
    449e:	90 0d       	add	r25, r0
    44a0:	11 24       	eor	r1, r1
    44a2:	85 5b       	subi	r24, 0xB5	; 181
    44a4:	9f 4f       	sbci	r25, 0xFF	; 255
    44a6:	a8 01       	movw	r20, r16
    44a8:	6b 2d       	mov	r22, r11
    44aa:	80 0f       	add	r24, r16
    44ac:	91 1f       	adc	r25, r17
    44ae:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <loadTrack>
    44b2:	7c 01       	movw	r14, r24
    44b4:	01 96       	adiw	r24, 0x01	; 1
    44b6:	79 f0       	breq	.+30     	; 0x44d6 <loadMIDIFile+0x1c2>
    44b8:	c6 01       	movw	r24, r12
    44ba:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <f_close>
    44be:	8f ef       	ldi	r24, 0xFF	; 255
    44c0:	88 1a       	sub	r8, r24
    44c2:	98 0a       	sbc	r9, r24
    44c4:	2a e0       	ldi	r18, 0x0A	; 10
    44c6:	28 9d       	mul	r18, r8
    44c8:	c0 01       	movw	r24, r0
    44ca:	29 9d       	mul	r18, r9
    44cc:	90 0d       	add	r25, r0
    44ce:	11 24       	eor	r1, r1
    44d0:	8e 0d       	add	r24, r14
    44d2:	9f 1d       	adc	r25, r15
    44d4:	10 c0       	rjmp	.+32     	; 0x44f6 <loadMIDIFile+0x1e2>
    44d6:	b3 94       	inc	r11
    44d8:	f8 01       	movw	r30, r16
    44da:	84 a9       	ldd	r24, Z+52	; 0x34
    44dc:	b8 16       	cp	r11, r24
    44de:	d0 f2       	brcs	.-76     	; 0x4494 <loadMIDIFile+0x180>
    44e0:	8f ef       	ldi	r24, 0xFF	; 255
    44e2:	9f ef       	ldi	r25, 0xFF	; 255
    44e4:	08 c0       	rjmp	.+16     	; 0x44f6 <loadMIDIFile+0x1e2>
    44e6:	80 e0       	ldi	r24, 0x00	; 0
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	05 c0       	rjmp	.+10     	; 0x44f6 <loadMIDIFile+0x1e2>
    44ec:	82 e0       	ldi	r24, 0x02	; 2
    44ee:	90 e0       	ldi	r25, 0x00	; 0
    44f0:	02 c0       	rjmp	.+4      	; 0x44f6 <loadMIDIFile+0x1e2>
    44f2:	8f ef       	ldi	r24, 0xFF	; 255
    44f4:	9f ef       	ldi	r25, 0xFF	; 255
    44f6:	29 96       	adiw	r28, 0x09	; 9
    44f8:	0f b6       	in	r0, 0x3f	; 63
    44fa:	f8 94       	cli
    44fc:	de bf       	out	0x3e, r29	; 62
    44fe:	0f be       	out	0x3f, r0	; 63
    4500:	cd bf       	out	0x3d, r28	; 61
    4502:	df 91       	pop	r29
    4504:	cf 91       	pop	r28
    4506:	1f 91       	pop	r17
    4508:	0f 91       	pop	r16
    450a:	ff 90       	pop	r15
    450c:	ef 90       	pop	r14
    450e:	df 90       	pop	r13
    4510:	cf 90       	pop	r12
    4512:	bf 90       	pop	r11
    4514:	af 90       	pop	r10
    4516:	9f 90       	pop	r9
    4518:	8f 90       	pop	r8
    451a:	08 95       	ret

0000451c <setFilename>:

void setFilename(struct MD_MIDIFile *m,const char* aname) 
{ 
	if (aname != NULL) strcpy(m->_fileName, aname); 
    451c:	61 15       	cp	r22, r1
    451e:	71 05       	cpc	r23, r1
    4520:	19 f0       	breq	.+6      	; 0x4528 <setFilename+0xc>
    4522:	86 96       	adiw	r24, 0x26	; 38
    4524:	0e 94 ab 37 	call	0x6f56	; 0x6f56 <strcpy>
    4528:	08 95       	ret

0000452a <readMultiByte>:
 * \brief Main file for helper functions implementation
 */

uint32_t readMultiByte(FIL *f, uint8_t nLen)
// read fixed length parameter from input
{
    452a:	af 92       	push	r10
    452c:	bf 92       	push	r11
    452e:	cf 92       	push	r12
    4530:	df 92       	push	r13
    4532:	ef 92       	push	r14
    4534:	ff 92       	push	r15
    4536:	0f 93       	push	r16
    4538:	1f 93       	push	r17
    453a:	cf 93       	push	r28
    453c:	df 93       	push	r29
    453e:	00 d0       	rcall	.+0      	; 0x4540 <readMultiByte+0x16>
    4540:	1f 92       	push	r1
    4542:	cd b7       	in	r28, 0x3d	; 61
    4544:	de b7       	in	r29, 0x3e	; 62
  uint32_t  value = 0L;
  uint8_t c;
  UINT d;
  for (uint8_t i=0; i<nLen; i++)
    4546:	66 23       	and	r22, r22
    4548:	f1 f0       	breq	.+60     	; 0x4586 <readMultiByte+0x5c>
    454a:	a6 2e       	mov	r10, r22
    454c:	8c 01       	movw	r16, r24
    454e:	b1 2c       	mov	r11, r1
    4550:	c1 2c       	mov	r12, r1
    4552:	d1 2c       	mov	r13, r1
    4554:	76 01       	movw	r14, r12
  {
    f_read(f,&c,1,&d);
    4556:	9e 01       	movw	r18, r28
    4558:	2e 5f       	subi	r18, 0xFE	; 254
    455a:	3f 4f       	sbci	r19, 0xFF	; 255
    455c:	41 e0       	ldi	r20, 0x01	; 1
    455e:	50 e0       	ldi	r21, 0x00	; 0
    4560:	be 01       	movw	r22, r28
    4562:	6f 5f       	subi	r22, 0xFF	; 255
    4564:	7f 4f       	sbci	r23, 0xFF	; 255
    4566:	c8 01       	movw	r24, r16
    4568:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
	value = (value << 8) + c;
    456c:	fe 2c       	mov	r15, r14
    456e:	ed 2c       	mov	r14, r13
    4570:	dc 2c       	mov	r13, r12
    4572:	cc 24       	eor	r12, r12
    4574:	89 81       	ldd	r24, Y+1	; 0x01
    4576:	c8 0e       	add	r12, r24
    4578:	d1 1c       	adc	r13, r1
    457a:	e1 1c       	adc	r14, r1
    457c:	f1 1c       	adc	r15, r1
// read fixed length parameter from input
{
  uint32_t  value = 0L;
  uint8_t c;
  UINT d;
  for (uint8_t i=0; i<nLen; i++)
    457e:	b3 94       	inc	r11
    4580:	ab 10       	cpse	r10, r11
    4582:	e9 cf       	rjmp	.-46     	; 0x4556 <readMultiByte+0x2c>
    4584:	03 c0       	rjmp	.+6      	; 0x458c <readMultiByte+0x62>
 */

uint32_t readMultiByte(FIL *f, uint8_t nLen)
// read fixed length parameter from input
{
  uint32_t  value = 0L;
    4586:	c1 2c       	mov	r12, r1
    4588:	d1 2c       	mov	r13, r1
    458a:	76 01       	movw	r14, r12
    f_read(f,&c,1,&d);
	value = (value << 8) + c;
  }
  
  return(value);
}
    458c:	c7 01       	movw	r24, r14
    458e:	b6 01       	movw	r22, r12
    4590:	0f 90       	pop	r0
    4592:	0f 90       	pop	r0
    4594:	0f 90       	pop	r0
    4596:	df 91       	pop	r29
    4598:	cf 91       	pop	r28
    459a:	1f 91       	pop	r17
    459c:	0f 91       	pop	r16
    459e:	ff 90       	pop	r15
    45a0:	ef 90       	pop	r14
    45a2:	df 90       	pop	r13
    45a4:	cf 90       	pop	r12
    45a6:	bf 90       	pop	r11
    45a8:	af 90       	pop	r10
    45aa:	08 95       	ret

000045ac <readVarLen>:

uint32_t readVarLen(FIL *f)
// read variable length parameter from input
{
    45ac:	cf 92       	push	r12
    45ae:	df 92       	push	r13
    45b0:	ef 92       	push	r14
    45b2:	ff 92       	push	r15
    45b4:	0f 93       	push	r16
    45b6:	1f 93       	push	r17
    45b8:	cf 93       	push	r28
    45ba:	df 93       	push	r29
    45bc:	00 d0       	rcall	.+0      	; 0x45be <readVarLen+0x12>
    45be:	1f 92       	push	r1
    45c0:	cd b7       	in	r28, 0x3d	; 61
    45c2:	de b7       	in	r29, 0x3e	; 62
    45c4:	8c 01       	movw	r16, r24
  uint32_t  value = 0;
    45c6:	c1 2c       	mov	r12, r1
    45c8:	d1 2c       	mov	r13, r1
    45ca:	76 01       	movw	r14, r12
  uint8_t      c;
  UINT d;

  do
  {
    f_read(f,&c,1,&d);	
    45cc:	9e 01       	movw	r18, r28
    45ce:	2e 5f       	subi	r18, 0xFE	; 254
    45d0:	3f 4f       	sbci	r19, 0xFF	; 255
    45d2:	41 e0       	ldi	r20, 0x01	; 1
    45d4:	50 e0       	ldi	r21, 0x00	; 0
    45d6:	be 01       	movw	r22, r28
    45d8:	6f 5f       	subi	r22, 0xFF	; 255
    45da:	7f 4f       	sbci	r23, 0xFF	; 255
    45dc:	c8 01       	movw	r24, r16
    45de:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
    value = (value << 7) + (c & 0x7f);
    45e2:	cc 0c       	add	r12, r12
    45e4:	dd 1c       	adc	r13, r13
    45e6:	ee 1c       	adc	r14, r14
    45e8:	ff 1c       	adc	r15, r15
    45ea:	cc 0c       	add	r12, r12
    45ec:	dd 1c       	adc	r13, r13
    45ee:	ee 1c       	adc	r14, r14
    45f0:	ff 1c       	adc	r15, r15
    45f2:	cc 0c       	add	r12, r12
    45f4:	dd 1c       	adc	r13, r13
    45f6:	ee 1c       	adc	r14, r14
    45f8:	ff 1c       	adc	r15, r15
    45fa:	cc 0c       	add	r12, r12
    45fc:	dd 1c       	adc	r13, r13
    45fe:	ee 1c       	adc	r14, r14
    4600:	ff 1c       	adc	r15, r15
    4602:	cc 0c       	add	r12, r12
    4604:	dd 1c       	adc	r13, r13
    4606:	ee 1c       	adc	r14, r14
    4608:	ff 1c       	adc	r15, r15
    460a:	cc 0c       	add	r12, r12
    460c:	dd 1c       	adc	r13, r13
    460e:	ee 1c       	adc	r14, r14
    4610:	ff 1c       	adc	r15, r15
    4612:	cc 0c       	add	r12, r12
    4614:	dd 1c       	adc	r13, r13
    4616:	ee 1c       	adc	r14, r14
    4618:	ff 1c       	adc	r15, r15
    461a:	89 81       	ldd	r24, Y+1	; 0x01
    461c:	98 2f       	mov	r25, r24
    461e:	9f 77       	andi	r25, 0x7F	; 127
    4620:	c9 0e       	add	r12, r25
    4622:	d1 1c       	adc	r13, r1
    4624:	e1 1c       	adc	r14, r1
    4626:	f1 1c       	adc	r15, r1
  }  while (c & 0x80);
    4628:	88 23       	and	r24, r24
    462a:	84 f2       	brlt	.-96     	; 0x45cc <readVarLen+0x20>
  
  return(value);
}
    462c:	c7 01       	movw	r24, r14
    462e:	b6 01       	movw	r22, r12
    4630:	0f 90       	pop	r0
    4632:	0f 90       	pop	r0
    4634:	0f 90       	pop	r0
    4636:	df 91       	pop	r29
    4638:	cf 91       	pop	r28
    463a:	1f 91       	pop	r17
    463c:	0f 91       	pop	r16
    463e:	ff 90       	pop	r15
    4640:	ef 90       	pop	r14
    4642:	df 90       	pop	r13
    4644:	cf 90       	pop	r12
    4646:	08 95       	ret

00004648 <getEndOfTrack>:

BOOL getEndOfTrack(struct MD_MFTrack *t)
// true if end of track has been reached
{
  return t->_endOfTrack;
}
    4648:	fc 01       	movw	r30, r24
    464a:	85 85       	ldd	r24, Z+13	; 0x0d
    464c:	08 95       	ret

0000464e <syncTime>:

void syncTime(struct MD_MFTrack *t)
{
  t->_elapsedTicks = 0;
    464e:	fc 01       	movw	r30, r24
    4650:	16 86       	std	Z+14, r1	; 0x0e
    4652:	17 86       	std	Z+15, r1	; 0x0f
    4654:	10 8a       	std	Z+16, r1	; 0x10
    4656:	11 8a       	std	Z+17, r1	; 0x11
    4658:	08 95       	ret

0000465a <restartTrack>:
}

void restartTrack(struct MD_MFTrack *t)
// Start playing the track from the beginning again
{
    465a:	fc 01       	movw	r30, r24
  t->_currOffset = 0;
    465c:	11 86       	std	Z+9, r1	; 0x09
    465e:	12 86       	std	Z+10, r1	; 0x0a
    4660:	13 86       	std	Z+11, r1	; 0x0b
    4662:	14 86       	std	Z+12, r1	; 0x0c
  t->_endOfTrack = FALSE;
    4664:	15 86       	std	Z+13, r1	; 0x0d
  t->_elapsedTicks = 0;
    4666:	16 86       	std	Z+14, r1	; 0x0e
    4668:	17 86       	std	Z+15, r1	; 0x0f
    466a:	10 8a       	std	Z+16, r1	; 0x10
    466c:	11 8a       	std	Z+17, r1	; 0x11
    466e:	08 95       	ret

00004670 <resetTrack>:
 * \file
 * \brief Main file for the MFTrack class implementation
 */

void resetTrack(struct MD_MFTrack *t)
{
    4670:	cf 93       	push	r28
    4672:	df 93       	push	r29
    4674:	ec 01       	movw	r28, r24
  t->_length = 0;        // length of track in bytes
    4676:	19 82       	std	Y+1, r1	; 0x01
    4678:	1a 82       	std	Y+2, r1	; 0x02
    467a:	1b 82       	std	Y+3, r1	; 0x03
    467c:	1c 82       	std	Y+4, r1	; 0x04
  t->_startOffset = 0;   // start of the track in bytes from start of file
    467e:	1d 82       	std	Y+5, r1	; 0x05
    4680:	1e 82       	std	Y+6, r1	; 0x06
    4682:	1f 82       	std	Y+7, r1	; 0x07
    4684:	18 86       	std	Y+8, r1	; 0x08
  restartTrack(t);
    4686:	0e 94 2d 23 	call	0x465a	; 0x465a <restartTrack>
  t->_trackId = 255;
    468a:	8f ef       	ldi	r24, 0xFF	; 255
    468c:	88 83       	st	Y, r24
}
    468e:	df 91       	pop	r29
    4690:	cf 91       	pop	r28
    4692:	08 95       	ret

00004694 <closeTrack>:


void closeTrack(struct MD_MFTrack *t)
{
  resetTrack(t);
    4694:	0e 94 38 23 	call	0x4670	; 0x4670 <resetTrack>
    4698:	08 95       	ret

0000469a <parseEvent>:
  return(TRUE);
}

void parseEvent(struct MD_MIDIFile *mf,struct MD_MFTrack *t)
// process the event from the physical file
{
    469a:	4f 92       	push	r4
    469c:	5f 92       	push	r5
    469e:	6f 92       	push	r6
    46a0:	7f 92       	push	r7
    46a2:	8f 92       	push	r8
    46a4:	9f 92       	push	r9
    46a6:	af 92       	push	r10
    46a8:	bf 92       	push	r11
    46aa:	cf 92       	push	r12
    46ac:	df 92       	push	r13
    46ae:	ef 92       	push	r14
    46b0:	ff 92       	push	r15
    46b2:	0f 93       	push	r16
    46b4:	1f 93       	push	r17
    46b6:	cf 93       	push	r28
    46b8:	df 93       	push	r29
    46ba:	cd b7       	in	r28, 0x3d	; 61
    46bc:	de b7       	in	r29, 0x3e	; 62
    46be:	cf 55       	subi	r28, 0x5F	; 95
    46c0:	d1 09       	sbc	r29, r1
    46c2:	0f b6       	in	r0, 0x3f	; 63
    46c4:	f8 94       	cli
    46c6:	de bf       	out	0x3e, r29	; 62
    46c8:	0f be       	out	0x3f, r0	; 63
    46ca:	cd bf       	out	0x3d, r28	; 61
    46cc:	6c 01       	movw	r12, r24
    46ce:	8b 01       	movw	r16, r22
  uint8_t eType;
  uint32_t mLen;
  UINT bRead;
  // now we have to process this event
  f_read(&mf->_fd,&eType,1,&bRead);
    46d0:	7c 01       	movw	r14, r24
    46d2:	86 e0       	ldi	r24, 0x06	; 6
    46d4:	e8 0e       	add	r14, r24
    46d6:	f1 1c       	adc	r15, r1
    46d8:	9e 01       	movw	r18, r28
    46da:	2e 5f       	subi	r18, 0xFE	; 254
    46dc:	3f 4f       	sbci	r19, 0xFF	; 255
    46de:	41 e0       	ldi	r20, 0x01	; 1
    46e0:	50 e0       	ldi	r21, 0x00	; 0
    46e2:	be 01       	movw	r22, r28
    46e4:	6f 5f       	subi	r22, 0xFF	; 255
    46e6:	7f 4f       	sbci	r23, 0xFF	; 255
    46e8:	c7 01       	movw	r24, r14
    46ea:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>

  switch (eType)
    46ee:	89 81       	ldd	r24, Y+1	; 0x01
    46f0:	80 3e       	cpi	r24, 0xE0	; 224
    46f2:	30 f4       	brcc	.+12     	; 0x4700 <parseEvent+0x66>
    46f4:	80 3c       	cpi	r24, 0xC0	; 192
    46f6:	e0 f5       	brcc	.+120    	; 0x4770 <parseEvent+0xd6>
    46f8:	80 38       	cpi	r24, 0x80	; 128
    46fa:	08 f4       	brcc	.+2      	; 0x46fe <parseEvent+0x64>
    46fc:	56 c0       	rjmp	.+172    	; 0x47aa <parseEvent+0x110>
    46fe:	0b c0       	rjmp	.+22     	; 0x4716 <parseEvent+0x7c>
    4700:	80 3f       	cpi	r24, 0xF0	; 240
    4702:	09 f4       	brne	.+2      	; 0x4706 <parseEvent+0x6c>
    4704:	7d c0       	rjmp	.+250    	; 0x4800 <parseEvent+0x166>
    4706:	38 f0       	brcs	.+14     	; 0x4716 <parseEvent+0x7c>
    4708:	87 3f       	cpi	r24, 0xF7	; 247
    470a:	09 f4       	brne	.+2      	; 0x470e <parseEvent+0x74>
    470c:	79 c0       	rjmp	.+242    	; 0x4800 <parseEvent+0x166>
    470e:	8f 3f       	cpi	r24, 0xFF	; 255
    4710:	09 f4       	brne	.+2      	; 0x4714 <parseEvent+0x7a>
    4712:	d0 c0       	rjmp	.+416    	; 0x48b4 <parseEvent+0x21a>
    4714:	30 c2       	rjmp	.+1120   	; 0x4b76 <parseEvent+0x4dc>
    // Midi events (status bytes 0x8n - 0xEn) The standard Channel MIDI messages, where 'n' is the MIDI channel (0 - 15).
    // This status byte will be followed by 1 or 2 data bytes, as is usual for the particular MIDI message. 
    // Any valid Channel MIDI message can be included in a MIDI file.
  case 0x80 ... 0xBf: // MIDI message with 2 parameters
  case 0xe0 ... 0xef:
    t->_mev.size = 3;
    4716:	93 e0       	ldi	r25, 0x03	; 3
    4718:	d8 01       	movw	r26, r16
    471a:	54 96       	adiw	r26, 0x14	; 20
    471c:	9c 93       	st	X, r25
    471e:	54 97       	sbiw	r26, 0x14	; 20
    t->_mev.data[0] = eType;
    t->_mev.channel = t->_mev.data[0] & 0xf;  // mask off the channel
    4720:	98 2f       	mov	r25, r24
    4722:	9f 70       	andi	r25, 0x0F	; 15
    4724:	53 96       	adiw	r26, 0x13	; 19
    4726:	9c 93       	st	X, r25
    4728:	53 97       	sbiw	r26, 0x13	; 19
    t->_mev.data[0] = t->_mev.data[0] & 0xf0; // just the command byte
    472a:	80 7f       	andi	r24, 0xF0	; 240
    472c:	55 96       	adiw	r26, 0x15	; 21
    472e:	8c 93       	st	X, r24
    f_read(&mf->_fd,&t->_mev.data[1],1,&bRead);
    4730:	9e 01       	movw	r18, r28
    4732:	2e 5f       	subi	r18, 0xFE	; 254
    4734:	3f 4f       	sbci	r19, 0xFF	; 255
    4736:	41 e0       	ldi	r20, 0x01	; 1
    4738:	50 e0       	ldi	r21, 0x00	; 0
    473a:	b8 01       	movw	r22, r16
    473c:	6a 5e       	subi	r22, 0xEA	; 234
    473e:	7f 4f       	sbci	r23, 0xFF	; 255
    4740:	c7 01       	movw	r24, r14
    4742:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
    f_read(&mf->_fd,&t->_mev.data[2],1,&bRead);
    4746:	9e 01       	movw	r18, r28
    4748:	2e 5f       	subi	r18, 0xFE	; 254
    474a:	3f 4f       	sbci	r19, 0xFF	; 255
    474c:	41 e0       	ldi	r20, 0x01	; 1
    474e:	50 e0       	ldi	r21, 0x00	; 0
    4750:	b8 01       	movw	r22, r16
    4752:	69 5e       	subi	r22, 0xE9	; 233
    4754:	7f 4f       	sbci	r23, 0xFF	; 255
    4756:	c7 01       	movw	r24, r14
    4758:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
    DUMP("[MID2] Ch: ", _mev.channel);
    DUMPX(" Data: ", _mev.data[0]);
    DUMPX(" ", _mev.data[1]);
    DUMPX(" ", _mev.data[2]);	
#if !DUMP_DATA
    if (mf->_midiHandler != NULL)
    475c:	d6 01       	movw	r26, r12
    475e:	ed 91       	ld	r30, X+
    4760:	fc 91       	ld	r31, X
    4762:	30 97       	sbiw	r30, 0x00	; 0
    4764:	09 f4       	brne	.+2      	; 0x4768 <parseEvent+0xce>
    4766:	0a c2       	rjmp	.+1044   	; 0x4b7c <parseEvent+0x4e2>
      (mf->_midiHandler)(&t->_mev);
    4768:	c8 01       	movw	r24, r16
    476a:	42 96       	adiw	r24, 0x12	; 18
    476c:	09 95       	icall
    476e:	06 c2       	rjmp	.+1036   	; 0x4b7c <parseEvent+0x4e2>
#endif // !DUMP_DATA
  break;

  case 0xc0 ... 0xdf: // MIDI message with 1 parameter
    t->_mev.size = 2;
    4770:	92 e0       	ldi	r25, 0x02	; 2
    4772:	f8 01       	movw	r30, r16
    4774:	94 8b       	std	Z+20, r25	; 0x14
    t->_mev.data[0] = eType;
    t->_mev.channel = t->_mev.data[0] & 0xf;  // mask off the channel
    4776:	98 2f       	mov	r25, r24
    4778:	9f 70       	andi	r25, 0x0F	; 15
    477a:	93 8b       	std	Z+19, r25	; 0x13
    t->_mev.data[0] = t->_mev.data[0] & 0xf0; // just the command byte
    477c:	80 7f       	andi	r24, 0xF0	; 240
    477e:	85 8b       	std	Z+21, r24	; 0x15
    f_read(&mf->_fd,&t->_mev.data[1],1,&bRead);
    4780:	9e 01       	movw	r18, r28
    4782:	2e 5f       	subi	r18, 0xFE	; 254
    4784:	3f 4f       	sbci	r19, 0xFF	; 255
    4786:	41 e0       	ldi	r20, 0x01	; 1
    4788:	50 e0       	ldi	r21, 0x00	; 0
    478a:	b8 01       	movw	r22, r16
    478c:	6a 5e       	subi	r22, 0xEA	; 234
    478e:	7f 4f       	sbci	r23, 0xFF	; 255
    4790:	c7 01       	movw	r24, r14
    4792:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
    DUMP("[MID1] Ch: ", _mev.channel);
    DUMPX(" Data: ", _mev.data[0]);
    DUMPX(" ", _mev.data[1]);

#if !DUMP_DATA
    if (mf->_midiHandler != NULL)
    4796:	d6 01       	movw	r26, r12
    4798:	ed 91       	ld	r30, X+
    479a:	fc 91       	ld	r31, X
    479c:	30 97       	sbiw	r30, 0x00	; 0
    479e:	09 f4       	brne	.+2      	; 0x47a2 <parseEvent+0x108>
    47a0:	ed c1       	rjmp	.+986    	; 0x4b7c <parseEvent+0x4e2>
      (mf->_midiHandler)(&t->_mev);
    47a2:	c8 01       	movw	r24, r16
    47a4:	42 96       	adiw	r24, 0x12	; 18
    47a6:	09 95       	icall
    47a8:	e9 c1       	rjmp	.+978    	; 0x4b7c <parseEvent+0x4e2>
    // ie SysEx and Meta events clear running status. This means that the _mev structure 
    // should contain the info from the previous message in the structure's channel member 
    // and data[0] (for the MIDI command). 
    // Hence start saving the data at byte data[1] with the byte we have just read (eType) 
    // and use the size member to determine how large the message is (ie, same as before).
    t->_mev.data[1] = eType;
    47aa:	f8 01       	movw	r30, r16
    47ac:	86 8b       	std	Z+22, r24	; 0x16
    for (uint8_t i = 2; i < t->_mev.size; i++)
    47ae:	84 89       	ldd	r24, Z+20	; 0x14
    47b0:	83 30       	cpi	r24, 0x03	; 3
    47b2:	b0 f0       	brcs	.+44     	; 0x47e0 <parseEvent+0x146>
    47b4:	68 94       	set
    47b6:	bb 24       	eor	r11, r11
    47b8:	b1 f8       	bld	r11, 1
    {
      f_read(&mf->_fd,&t->_mev.data[1],1,&bRead);  // next byte
    47ba:	48 01       	movw	r8, r16
    47bc:	f6 e1       	ldi	r31, 0x16	; 22
    47be:	8f 0e       	add	r8, r31
    47c0:	91 1c       	adc	r9, r1
    47c2:	9e 01       	movw	r18, r28
    47c4:	2e 5f       	subi	r18, 0xFE	; 254
    47c6:	3f 4f       	sbci	r19, 0xFF	; 255
    47c8:	41 e0       	ldi	r20, 0x01	; 1
    47ca:	50 e0       	ldi	r21, 0x00	; 0
    47cc:	b4 01       	movw	r22, r8
    47ce:	c7 01       	movw	r24, r14
    47d0:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
    // should contain the info from the previous message in the structure's channel member 
    // and data[0] (for the MIDI command). 
    // Hence start saving the data at byte data[1] with the byte we have just read (eType) 
    // and use the size member to determine how large the message is (ie, same as before).
    t->_mev.data[1] = eType;
    for (uint8_t i = 2; i < t->_mev.size; i++)
    47d4:	b3 94       	inc	r11
    47d6:	d8 01       	movw	r26, r16
    47d8:	54 96       	adiw	r26, 0x14	; 20
    47da:	8c 91       	ld	r24, X
    47dc:	b8 16       	cp	r11, r24
    47de:	88 f3       	brcs	.-30     	; 0x47c2 <parseEvent+0x128>
      f_read(&mf->_fd,&t->_mev.data[1],1,&bRead);  // next byte
    } 

    DUMP("[MID+] Ch: ", _mev.channel);
    DUMPS(" Data:");
    for (uint8_t i = 0; i<t->_mev.size; i++)
    47e0:	88 23       	and	r24, r24
    47e2:	21 f0       	breq	.+8      	; 0x47ec <parseEvent+0x152>
    47e4:	90 e0       	ldi	r25, 0x00	; 0
    47e6:	9f 5f       	subi	r25, 0xFF	; 255
    47e8:	98 13       	cpse	r25, r24
    47ea:	fd cf       	rjmp	.-6      	; 0x47e6 <parseEvent+0x14c>
    {
      DUMPX(" ", t->_mev.data[i]);
    }

#if !DUMP_DATA
    if (mf->_midiHandler != NULL)
    47ec:	d6 01       	movw	r26, r12
    47ee:	ed 91       	ld	r30, X+
    47f0:	fc 91       	ld	r31, X
    47f2:	30 97       	sbiw	r30, 0x00	; 0
    47f4:	09 f4       	brne	.+2      	; 0x47f8 <parseEvent+0x15e>
    47f6:	c2 c1       	rjmp	.+900    	; 0x4b7c <parseEvent+0x4e2>
      (mf->_midiHandler)(&t->_mev);
    47f8:	c8 01       	movw	r24, r16
    47fa:	42 96       	adiw	r24, 0x12	; 18
    47fc:	09 95       	icall
    47fe:	be c1       	rjmp	.+892    	; 0x4b7c <parseEvent+0x4e2>
  {
    sysex_event sev;
    uint16_t index = 0;

    // collect all the bytes until the 0xf7 - boundaries are included in the message
    sev.track = t->_trackId;
    4800:	f8 01       	movw	r30, r16
    4802:	80 81       	ld	r24, Z
    4804:	8c 83       	std	Y+4, r24	; 0x04
    mLen = readVarLen(&mf->_fd);
    4806:	c7 01       	movw	r24, r14
    4808:	0e 94 d6 22 	call	0x45ac	; 0x45ac <readVarLen>
    sev.size = mLen;
    480c:	7e 83       	std	Y+6, r23	; 0x06
    480e:	6d 83       	std	Y+5, r22	; 0x05
    if (eType==0xF0)       // add space for 0xF0
    4810:	29 81       	ldd	r18, Y+1	; 0x01
    4812:	20 3f       	cpi	r18, 0xF0	; 240
    4814:	41 f4       	brne	.+16     	; 0x4826 <parseEvent+0x18c>
    {
      sev.data[index++] = eType;
    4816:	2f 83       	std	Y+7, r18	; 0x07
      sev.size++;
    4818:	6f 5f       	subi	r22, 0xFF	; 255
    481a:	7f 4f       	sbci	r23, 0xFF	; 255
    481c:	7e 83       	std	Y+6, r23	; 0x06
    481e:	6d 83       	std	Y+5, r22	; 0x05
    sev.track = t->_trackId;
    mLen = readVarLen(&mf->_fd);
    sev.size = mLen;
    if (eType==0xF0)       // add space for 0xF0
    {
      sev.data[index++] = eType;
    4820:	01 e0       	ldi	r16, 0x01	; 1
    4822:	10 e0       	ldi	r17, 0x00	; 0
    4824:	02 c0       	rjmp	.+4      	; 0x482a <parseEvent+0x190>
// ---------------------------- SYSEX
  case 0xf0:  // sysex_event = 0xF0 + <len:1> + <data_bytes> + 0xF7 
  case 0xf7:  // sysex_event = 0xF7 + <len:1> + <data_bytes> + 0xF7 
  {
    sysex_event sev;
    uint16_t index = 0;
    4826:	00 e0       	ldi	r16, 0x00	; 0
    4828:	10 e0       	ldi	r17, 0x00	; 0
    if (eType==0xF0)       // add space for 0xF0
    {
      sev.data[index++] = eType;
      sev.size++;
    }
    uint16_t minLen = min(sev.size, ARRAY_SIZE(sev.data));
    482a:	ad 80       	ldd	r10, Y+5	; 0x05
    482c:	be 80       	ldd	r11, Y+6	; 0x06
    482e:	f3 e3       	ldi	r31, 0x33	; 51
    4830:	af 16       	cp	r10, r31
    4832:	b1 04       	cpc	r11, r1
    4834:	28 f0       	brcs	.+10     	; 0x4840 <parseEvent+0x1a6>
    4836:	0f 2e       	mov	r0, r31
    4838:	f2 e3       	ldi	r31, 0x32	; 50
    483a:	af 2e       	mov	r10, r31
    483c:	b1 2c       	mov	r11, r1
    483e:	f0 2d       	mov	r31, r0
    // The length parameter includes the 0xF7 but not the start boundary.
    // However, it may be bigger than our buffer will allow us to store.
    for (uint16_t i=index; i<minLen; ++i)
    4840:	0a 15       	cp	r16, r10
    4842:	1b 05       	cpc	r17, r11
    4844:	b0 f4       	brcc	.+44     	; 0x4872 <parseEvent+0x1d8>
      f_read(&mf->_fd,&sev.data[i],1,&bRead);
    4846:	b8 01       	movw	r22, r16
    4848:	6d 5f       	subi	r22, 0xFD	; 253
    484a:	7f 4f       	sbci	r23, 0xFF	; 255
    484c:	84 e0       	ldi	r24, 0x04	; 4
    484e:	90 e0       	ldi	r25, 0x00	; 0
    4850:	8c 0f       	add	r24, r28
    4852:	9d 1f       	adc	r25, r29
    4854:	68 0f       	add	r22, r24
    4856:	79 1f       	adc	r23, r25
    4858:	9e 01       	movw	r18, r28
    485a:	2e 5f       	subi	r18, 0xFE	; 254
    485c:	3f 4f       	sbci	r19, 0xFF	; 255
    485e:	41 e0       	ldi	r20, 0x01	; 1
    4860:	50 e0       	ldi	r21, 0x00	; 0
    4862:	c7 01       	movw	r24, r14
    4864:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
      sev.size++;
    }
    uint16_t minLen = min(sev.size, ARRAY_SIZE(sev.data));
    // The length parameter includes the 0xF7 but not the start boundary.
    // However, it may be bigger than our buffer will allow us to store.
    for (uint16_t i=index; i<minLen; ++i)
    4868:	0f 5f       	subi	r16, 0xFF	; 255
    486a:	1f 4f       	sbci	r17, 0xFF	; 255
    486c:	0a 15       	cp	r16, r10
    486e:	1b 05       	cpc	r17, r11
    4870:	50 f3       	brcs	.-44     	; 0x4846 <parseEvent+0x1ac>
      f_read(&mf->_fd,&sev.data[i],1,&bRead);
    if (sev.size>minLen)
    4872:	8d 81       	ldd	r24, Y+5	; 0x05
    4874:	9e 81       	ldd	r25, Y+6	; 0x06
    4876:	a8 16       	cp	r10, r24
    4878:	b9 06       	cpc	r11, r25
    487a:	80 f4       	brcc	.+32     	; 0x489c <parseEvent+0x202>
      f_lseek(&mf->_fd,f_tell(&mf->_fd) + (sev.size-minLen));
    487c:	8a 19       	sub	r24, r10
    487e:	9b 09       	sbc	r25, r11
    4880:	d6 01       	movw	r26, r12
    4882:	1c 96       	adiw	r26, 0x0c	; 12
    4884:	4d 91       	ld	r20, X+
    4886:	5d 91       	ld	r21, X+
    4888:	6d 91       	ld	r22, X+
    488a:	7c 91       	ld	r23, X
    488c:	1f 97       	sbiw	r26, 0x0f	; 15
    488e:	48 0f       	add	r20, r24
    4890:	59 1f       	adc	r21, r25
    4892:	61 1d       	adc	r22, r1
    4894:	71 1d       	adc	r23, r1
    4896:	c7 01       	movw	r24, r14
    4898:	0e 94 3e 14 	call	0x287c	; 0x287c <f_lseek>
      DUMPX(" ", sev.data[i]);
    }
    if (sev.size>minLen)
      DUMPS("...");
#else
    if (mf->_sysexHandler != NULL)
    489c:	d6 01       	movw	r26, r12
    489e:	12 96       	adiw	r26, 0x02	; 2
    48a0:	ed 91       	ld	r30, X+
    48a2:	fc 91       	ld	r31, X
    48a4:	13 97       	sbiw	r26, 0x03	; 3
    48a6:	30 97       	sbiw	r30, 0x00	; 0
    48a8:	09 f4       	brne	.+2      	; 0x48ac <parseEvent+0x212>
    48aa:	68 c1       	rjmp	.+720    	; 0x4b7c <parseEvent+0x4e2>
      (mf->_sysexHandler)(&sev);
    48ac:	ce 01       	movw	r24, r28
    48ae:	04 96       	adiw	r24, 0x04	; 4
    48b0:	09 95       	icall
#endif
  }
  break;
    48b2:	64 c1       	rjmp	.+712    	; 0x4b7c <parseEvent+0x4e2>
  case 0xff:  // meta_event = 0xFF + <meta_type:1> + <length:v> + <event_data_bytes>
  {
    meta_event mev;

    //eType = 
	f_read(&mf->_fd,&eType,1,&bRead);
    48b4:	9e 01       	movw	r18, r28
    48b6:	2e 5f       	subi	r18, 0xFE	; 254
    48b8:	3f 4f       	sbci	r19, 0xFF	; 255
    48ba:	41 e0       	ldi	r20, 0x01	; 1
    48bc:	50 e0       	ldi	r21, 0x00	; 0
    48be:	be 01       	movw	r22, r28
    48c0:	6f 5f       	subi	r22, 0xFF	; 255
    48c2:	7f 4f       	sbci	r23, 0xFF	; 255
    48c4:	c7 01       	movw	r24, r14
    48c6:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
    mLen =  readVarLen(&mf->_fd);
    48ca:	c7 01       	movw	r24, r14
    48cc:	0e 94 d6 22 	call	0x45ac	; 0x45ac <readVarLen>
    48d0:	2b 01       	movw	r4, r22
    48d2:	3c 01       	movw	r6, r24

    mev.track = t->_trackId;
    48d4:	f8 01       	movw	r30, r16
    48d6:	80 81       	ld	r24, Z
    48d8:	8c 83       	std	Y+4, r24	; 0x04
    mev.size = mLen;
    48da:	5e 82       	std	Y+6, r5	; 0x06
    48dc:	4d 82       	std	Y+5, r4	; 0x05
    mev.type = eType;
    48de:	89 81       	ldd	r24, Y+1	; 0x01
    48e0:	8f 83       	std	Y+7, r24	; 0x07

    DUMPX("[META] Type: 0x", eType);
    DUMP("\tLen: ", mLen);
    DUMPS("\t");

    switch (eType)
    48e2:	8f 32       	cpi	r24, 0x2F	; 47
    48e4:	99 f0       	breq	.+38     	; 0x490c <parseEvent+0x272>
    48e6:	48 f4       	brcc	.+18     	; 0x48fa <parseEvent+0x260>
    48e8:	80 32       	cpi	r24, 0x20	; 32
    48ea:	09 f4       	brne	.+2      	; 0x48ee <parseEvent+0x254>
    48ec:	e8 c0       	rjmp	.+464    	; 0x4abe <parseEvent+0x424>
    48ee:	81 32       	cpi	r24, 0x21	; 33
    48f0:	09 f4       	brne	.+2      	; 0x48f4 <parseEvent+0x25a>
    48f2:	eb c0       	rjmp	.+470    	; 0x4aca <parseEvent+0x430>
    48f4:	81 11       	cpse	r24, r1
    48f6:	ef c0       	rjmp	.+478    	; 0x4ad6 <parseEvent+0x43c>
    48f8:	db c0       	rjmp	.+438    	; 0x4ab0 <parseEvent+0x416>
    48fa:	88 35       	cpi	r24, 0x58	; 88
    48fc:	e1 f0       	breq	.+56     	; 0x4936 <parseEvent+0x29c>
    48fe:	89 35       	cpi	r24, 0x59	; 89
    4900:	09 f4       	brne	.+2      	; 0x4904 <parseEvent+0x26a>
    4902:	56 c0       	rjmp	.+172    	; 0x49b0 <parseEvent+0x316>
    4904:	81 35       	cpi	r24, 0x51	; 81
    4906:	09 f0       	breq	.+2      	; 0x490a <parseEvent+0x270>
    4908:	e6 c0       	rjmp	.+460    	; 0x4ad6 <parseEvent+0x43c>
    490a:	03 c0       	rjmp	.+6      	; 0x4912 <parseEvent+0x278>
    {
      case 0x2f:  // End of track
      {
        t->_endOfTrack = TRUE;
    490c:	81 e0       	ldi	r24, 0x01	; 1
    490e:	85 87       	std	Z+13, r24	; 0x0d
        DUMPS("END OF TRACK");
      }
      break;
    4910:	27 c1       	rjmp	.+590    	; 0x4b60 <parseEvent+0x4c6>

      case 0x51:  // set Tempo - really the microseconds per tick
      {
        uint32_t value = readMultiByte(&mf->_fd, MB_TRYTE);
    4912:	63 e0       	ldi	r22, 0x03	; 3
    4914:	c7 01       	movw	r24, r14
    4916:	0e 94 95 22 	call	0x452a	; 0x452a <readMultiByte>
    491a:	16 2f       	mov	r17, r22
    491c:	07 2f       	mov	r16, r23
    491e:	f8 2e       	mov	r15, r24
        
        setMicrosecondPerQuarterNote(mf,value);
    4920:	46 2f       	mov	r20, r22
    4922:	57 2f       	mov	r21, r23
    4924:	68 2f       	mov	r22, r24
    4926:	79 2f       	mov	r23, r25
    4928:	c6 01       	movw	r24, r12
    492a:	0e 94 11 20 	call	0x4022	; 0x4022 <setMicrosecondPerQuarterNote>
        
        mev.data[0] = (value >> 16) & 0xFF;
    492e:	f8 86       	std	Y+8, r15	; 0x08
        mev.data[1] = (value >> 8) & 0xFF;
    4930:	09 87       	std	Y+9, r16	; 0x09
        mev.data[2] = value & 0xFF;
    4932:	1a 87       	std	Y+10, r17	; 0x0a
        
        DUMP("SET TEMPO to ", getTickTime(mf));
        DUMP(" us/tick or ", getTempo(mf));
        DUMPS(" beats/min");
      }
      break;
    4934:	15 c1       	rjmp	.+554    	; 0x4b60 <parseEvent+0x4c6>

      case 0x58:  // time signature
      {
        uint8_t n,d;
		f_read(&mf->_fd,&n,1,&bRead);
    4936:	9e 01       	movw	r18, r28
    4938:	2e 5f       	subi	r18, 0xFE	; 254
    493a:	3f 4f       	sbci	r19, 0xFF	; 255
    493c:	41 e0       	ldi	r20, 0x01	; 1
    493e:	50 e0       	ldi	r21, 0x00	; 0
    4940:	be 01       	movw	r22, r28
    4942:	62 5a       	subi	r22, 0xA2	; 162
    4944:	7f 4f       	sbci	r23, 0xFF	; 255
    4946:	c7 01       	movw	r24, r14
    4948:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
        f_read(&mf->_fd,&d,1,&bRead);
    494c:	9e 01       	movw	r18, r28
    494e:	2e 5f       	subi	r18, 0xFE	; 254
    4950:	3f 4f       	sbci	r19, 0xFF	; 255
    4952:	41 e0       	ldi	r20, 0x01	; 1
    4954:	50 e0       	ldi	r21, 0x00	; 0
    4956:	be 01       	movw	r22, r28
    4958:	66 5c       	subi	r22, 0xC6	; 198
    495a:	7f 4f       	sbci	r23, 0xFF	; 255
    495c:	c7 01       	movw	r24, r14
    495e:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
        
        setTimeSignature(mf,n, 1 << d);  // denominator is 2^n
    4962:	41 e0       	ldi	r20, 0x01	; 1
    4964:	50 e0       	ldi	r21, 0x00	; 0
    4966:	0a ac       	ldd	r0, Y+58	; 0x3a
    4968:	02 c0       	rjmp	.+4      	; 0x496e <parseEvent+0x2d4>
    496a:	44 0f       	add	r20, r20
    496c:	55 1f       	adc	r21, r21
    496e:	0a 94       	dec	r0
    4970:	e2 f7       	brpl	.-8      	; 0x496a <parseEvent+0x2d0>
    4972:	6f 96       	adiw	r28, 0x1f	; 31
    4974:	6f ad       	ldd	r22, Y+63	; 0x3f
    4976:	6f 97       	sbiw	r28, 0x1f	; 31
    4978:	c6 01       	movw	r24, r12
    497a:	0e 94 08 20 	call	0x4010	; 0x4010 <setTimeSignature>
        f_lseek(&mf->_fd,f_tell(&mf->_fd) + (mLen - 2));
    497e:	f6 01       	movw	r30, r12
    4980:	44 85       	ldd	r20, Z+12	; 0x0c
    4982:	55 85       	ldd	r21, Z+13	; 0x0d
    4984:	66 85       	ldd	r22, Z+14	; 0x0e
    4986:	77 85       	ldd	r23, Z+15	; 0x0f
    4988:	42 50       	subi	r20, 0x02	; 2
    498a:	51 09       	sbc	r21, r1
    498c:	61 09       	sbc	r22, r1
    498e:	71 09       	sbc	r23, r1
    4990:	44 0d       	add	r20, r4
    4992:	55 1d       	adc	r21, r5
    4994:	66 1d       	adc	r22, r6
    4996:	77 1d       	adc	r23, r7
    4998:	c7 01       	movw	r24, r14
    499a:	0e 94 3e 14 	call	0x287c	; 0x287c <f_lseek>

        mev.data[0] = n;
    499e:	6f 96       	adiw	r28, 0x1f	; 31
    49a0:	8f ad       	ldd	r24, Y+63	; 0x3f
    49a2:	6f 97       	sbiw	r28, 0x1f	; 31
    49a4:	88 87       	std	Y+8, r24	; 0x08
        mev.data[1] = d;
    49a6:	8a ad       	ldd	r24, Y+58	; 0x3a
    49a8:	89 87       	std	Y+9, r24	; 0x09
        mev.data[2] = 0;
    49aa:	1a 86       	std	Y+10, r1	; 0x0a
        mev.data[3] = 0;
    49ac:	1b 86       	std	Y+11, r1	; 0x0b

        DUMP("SET TIME SIGNATURE to ", getTimeSignature(mf) >> 8);
        DUMP("/", getTimeSignature(mf) & 0xf);
      }
      break;
    49ae:	d8 c0       	rjmp	.+432    	; 0x4b60 <parseEvent+0x4c6>

      case 0x59:  // Key Signature
      {
        int8_t sf,mi;
		DUMPS("KEY SIGNATURE");
        f_read(&mf->_fd,&sf,1,&bRead);
    49b0:	9e 01       	movw	r18, r28
    49b2:	2e 5f       	subi	r18, 0xFE	; 254
    49b4:	3f 4f       	sbci	r19, 0xFF	; 255
    49b6:	41 e0       	ldi	r20, 0x01	; 1
    49b8:	50 e0       	ldi	r21, 0x00	; 0
    49ba:	be 01       	movw	r22, r28
    49bc:	61 5a       	subi	r22, 0xA1	; 161
    49be:	7f 4f       	sbci	r23, 0xFF	; 255
    49c0:	c7 01       	movw	r24, r14
    49c2:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
        f_read(&mf->_fd,&mi,1,&bRead);
    49c6:	9e 01       	movw	r18, r28
    49c8:	2e 5f       	subi	r18, 0xFE	; 254
    49ca:	3f 4f       	sbci	r19, 0xFF	; 255
    49cc:	41 e0       	ldi	r20, 0x01	; 1
    49ce:	50 e0       	ldi	r21, 0x00	; 0
    49d0:	be 01       	movw	r22, r28
    49d2:	62 5a       	subi	r22, 0xA2	; 162
    49d4:	7f 4f       	sbci	r23, 0xFF	; 255
    49d6:	c7 01       	movw	r24, r14
    49d8:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
        const char* aaa[] = {"Cb", "Gb", "Db", "Ab", "Eb", "Bb", "F", "C", "G", "D", "A", "E", "B", "F#", "C#", "G#", "D#", "A#"};
    49dc:	84 e2       	ldi	r24, 0x24	; 36
    49de:	e0 e8       	ldi	r30, 0x80	; 128
    49e0:	f0 e0       	ldi	r31, 0x00	; 0
    49e2:	de 01       	movw	r26, r28
    49e4:	da 96       	adiw	r26, 0x3a	; 58
    49e6:	01 90       	ld	r0, Z+
    49e8:	0d 92       	st	X+, r0
    49ea:	8a 95       	dec	r24
    49ec:	e1 f7       	brne	.-8      	; 0x49e6 <parseEvent+0x34c>

        if (sf >= -7 && sf <= 7) 
    49ee:	a0 96       	adiw	r28, 0x20	; 32
    49f0:	ef ad       	ldd	r30, Y+63	; 0x3f
    49f2:	a0 97       	sbiw	r28, 0x20	; 32
    49f4:	87 e0       	ldi	r24, 0x07	; 7
    49f6:	8e 0f       	add	r24, r30
    49f8:	8f 30       	cpi	r24, 0x0F	; 15
    49fa:	08 f0       	brcs	.+2      	; 0x49fe <parseEvent+0x364>
    49fc:	45 c0       	rjmp	.+138    	; 0x4a88 <parseEvent+0x3ee>
        {
          switch(mi)
    49fe:	6f 96       	adiw	r28, 0x1f	; 31
    4a00:	8f ad       	ldd	r24, Y+63	; 0x3f
    4a02:	6f 97       	sbiw	r28, 0x1f	; 31
    4a04:	88 23       	and	r24, r24
    4a06:	19 f0       	breq	.+6      	; 0x4a0e <parseEvent+0x374>
    4a08:	81 30       	cpi	r24, 0x01	; 1
    4a0a:	d9 f0       	breq	.+54     	; 0x4a42 <parseEvent+0x3a8>
    4a0c:	34 c0       	rjmp	.+104    	; 0x4a76 <parseEvent+0x3dc>
          {
            case 0:
              strcpy(mev.chars, aaa[sf+7]);
    4a0e:	0e 2e       	mov	r0, r30
    4a10:	00 0c       	add	r0, r0
    4a12:	ff 0b       	sbc	r31, r31
    4a14:	37 96       	adiw	r30, 0x07	; 7
    4a16:	ee 0f       	add	r30, r30
    4a18:	ff 1f       	adc	r31, r31
    4a1a:	ec 0f       	add	r30, r28
    4a1c:	fd 1f       	adc	r31, r29
    4a1e:	62 ad       	ldd	r22, Z+58	; 0x3a
    4a20:	73 ad       	ldd	r23, Z+59	; 0x3b
    4a22:	8e 01       	movw	r16, r28
    4a24:	08 5f       	subi	r16, 0xF8	; 248
    4a26:	1f 4f       	sbci	r17, 0xFF	; 255
    4a28:	c8 01       	movw	r24, r16
    4a2a:	0e 94 ab 37 	call	0x6f56	; 0x6f56 <strcpy>
              strcat(mev.chars, "M");
    4a2e:	f8 01       	movw	r30, r16
    4a30:	01 90       	ld	r0, Z+
    4a32:	00 20       	and	r0, r0
    4a34:	e9 f7       	brne	.-6      	; 0x4a30 <parseEvent+0x396>
    4a36:	31 97       	sbiw	r30, 0x01	; 1
    4a38:	8d e4       	ldi	r24, 0x4D	; 77
    4a3a:	90 e0       	ldi	r25, 0x00	; 0
    4a3c:	91 83       	std	Z+1, r25	; 0x01
    4a3e:	80 83       	st	Z, r24
              break;
    4a40:	2b c0       	rjmp	.+86     	; 0x4a98 <parseEvent+0x3fe>
            case 1:
              strcpy(mev.chars, aaa[sf+10]);
    4a42:	0e 2e       	mov	r0, r30
    4a44:	00 0c       	add	r0, r0
    4a46:	ff 0b       	sbc	r31, r31
    4a48:	3a 96       	adiw	r30, 0x0a	; 10
    4a4a:	ee 0f       	add	r30, r30
    4a4c:	ff 1f       	adc	r31, r31
    4a4e:	ec 0f       	add	r30, r28
    4a50:	fd 1f       	adc	r31, r29
    4a52:	62 ad       	ldd	r22, Z+58	; 0x3a
    4a54:	73 ad       	ldd	r23, Z+59	; 0x3b
    4a56:	8e 01       	movw	r16, r28
    4a58:	08 5f       	subi	r16, 0xF8	; 248
    4a5a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a5c:	c8 01       	movw	r24, r16
    4a5e:	0e 94 ab 37 	call	0x6f56	; 0x6f56 <strcpy>
              strcat(mev.chars, "m");
    4a62:	f8 01       	movw	r30, r16
    4a64:	01 90       	ld	r0, Z+
    4a66:	00 20       	and	r0, r0
    4a68:	e9 f7       	brne	.-6      	; 0x4a64 <parseEvent+0x3ca>
    4a6a:	31 97       	sbiw	r30, 0x01	; 1
    4a6c:	8d e6       	ldi	r24, 0x6D	; 109
    4a6e:	90 e0       	ldi	r25, 0x00	; 0
    4a70:	91 83       	std	Z+1, r25	; 0x01
    4a72:	80 83       	st	Z, r24
              break;
    4a74:	11 c0       	rjmp	.+34     	; 0x4a98 <parseEvent+0x3fe>
            default:
              strcpy(mev.chars, "Err"); // error mi
    4a76:	85 e4       	ldi	r24, 0x45	; 69
    4a78:	92 e7       	ldi	r25, 0x72	; 114
    4a7a:	99 87       	std	Y+9, r25	; 0x09
    4a7c:	88 87       	std	Y+8, r24	; 0x08
    4a7e:	82 e7       	ldi	r24, 0x72	; 114
    4a80:	90 e0       	ldi	r25, 0x00	; 0
    4a82:	9b 87       	std	Y+11, r25	; 0x0b
    4a84:	8a 87       	std	Y+10, r24	; 0x0a
    4a86:	08 c0       	rjmp	.+16     	; 0x4a98 <parseEvent+0x3fe>
          }
        } else
          strcpy(mev.chars, "Err"); // error sf
    4a88:	85 e4       	ldi	r24, 0x45	; 69
    4a8a:	92 e7       	ldi	r25, 0x72	; 114
    4a8c:	99 87       	std	Y+9, r25	; 0x09
    4a8e:	88 87       	std	Y+8, r24	; 0x08
    4a90:	82 e7       	ldi	r24, 0x72	; 114
    4a92:	90 e0       	ldi	r25, 0x00	; 0
    4a94:	9b 87       	std	Y+11, r25	; 0x0b
    4a96:	8a 87       	std	Y+10, r24	; 0x0a

        mev.size = strlen(mev.chars); // change META length
    4a98:	de 01       	movw	r26, r28
    4a9a:	18 96       	adiw	r26, 0x08	; 8
    4a9c:	fd 01       	movw	r30, r26
    4a9e:	01 90       	ld	r0, Z+
    4aa0:	00 20       	and	r0, r0
    4aa2:	e9 f7       	brne	.-6      	; 0x4a9e <parseEvent+0x404>
    4aa4:	31 97       	sbiw	r30, 0x01	; 1
    4aa6:	ea 1b       	sub	r30, r26
    4aa8:	fb 0b       	sbc	r31, r27
    4aaa:	fe 83       	std	Y+6, r31	; 0x06
    4aac:	ed 83       	std	Y+5, r30	; 0x05
        DUMP(" ", mev.chars);
      }
      break;
    4aae:	58 c0       	rjmp	.+176    	; 0x4b60 <parseEvent+0x4c6>

      case 0x00:  // Sequence Number
      {
        uint16_t x = readMultiByte(&mf->_fd, MB_WORD);
    4ab0:	62 e0       	ldi	r22, 0x02	; 2
    4ab2:	c7 01       	movw	r24, r14
    4ab4:	0e 94 95 22 	call	0x452a	; 0x452a <readMultiByte>

        mev.data[0] = (x >> 8) & 0xFF;
    4ab8:	78 87       	std	Y+8, r23	; 0x08
        mev.data[1] = x & 0xFF;
    4aba:	69 87       	std	Y+9, r22	; 0x09

        DUMP("SEQUENCE NUMBER ", mev.data[0]);
        DUMP(" ", mev.data[1]);
      }
      break;
    4abc:	51 c0       	rjmp	.+162    	; 0x4b60 <parseEvent+0x4c6>

      case 0x20:  // Channel Prefix
      mev.data[0] = readMultiByte(&mf->_fd, MB_BYTE);
    4abe:	61 e0       	ldi	r22, 0x01	; 1
    4ac0:	c7 01       	movw	r24, r14
    4ac2:	0e 94 95 22 	call	0x452a	; 0x452a <readMultiByte>
    4ac6:	68 87       	std	Y+8, r22	; 0x08
      DUMP("CHANNEL PREFIX ", mev.data[0]);
      break;
    4ac8:	4b c0       	rjmp	.+150    	; 0x4b60 <parseEvent+0x4c6>

      case 0x21:  // Port Prefix
      mev.data[0] = readMultiByte(&mf->_fd, MB_BYTE);
    4aca:	61 e0       	ldi	r22, 0x01	; 1
    4acc:	c7 01       	movw	r24, r14
    4ace:	0e 94 95 22 	call	0x452a	; 0x452a <readMultiByte>
    4ad2:	68 87       	std	Y+8, r22	; 0x08
      DUMP("PORT PREFIX ", mev.data[0]);
      break;
    4ad4:	45 c0       	rjmp	.+138    	; 0x4b60 <parseEvent+0x4c6>
      break;
#endif // SHOW_UNUSED_META

      default:
      {
        uint8_t minLen = min(ARRAY_SIZE(mev.data), mLen);
    4ad6:	84 2d       	mov	r24, r4
    4ad8:	f3 e3       	ldi	r31, 0x33	; 51
    4ada:	4f 16       	cp	r4, r31
    4adc:	51 04       	cpc	r5, r1
    4ade:	61 04       	cpc	r6, r1
    4ae0:	71 04       	cpc	r7, r1
    4ae2:	08 f0       	brcs	.+2      	; 0x4ae6 <parseEvent+0x44c>
    4ae4:	82 e3       	ldi	r24, 0x32	; 50
    4ae6:	98 2e       	mov	r9, r24
        
        for (uint8_t i = 0; i < minLen; ++i)
    4ae8:	88 23       	and	r24, r24
    4aea:	01 f1       	breq	.+64     	; 0x4b2c <parseEvent+0x492>
    4aec:	04 e0       	ldi	r16, 0x04	; 4
    4aee:	10 e0       	ldi	r17, 0x00	; 0
    4af0:	0c 0f       	add	r16, r28
    4af2:	1d 1f       	adc	r17, r29
    4af4:	0c 5f       	subi	r16, 0xFC	; 252
    4af6:	1f 4f       	sbci	r17, 0xFF	; 255
    4af8:	81 50       	subi	r24, 0x01	; 1
    4afa:	a8 2e       	mov	r10, r24
    4afc:	b1 2c       	mov	r11, r1
    4afe:	85 e0       	ldi	r24, 0x05	; 5
    4b00:	a8 0e       	add	r10, r24
    4b02:	b1 1c       	adc	r11, r1
    4b04:	a4 e0       	ldi	r26, 0x04	; 4
    4b06:	b0 e0       	ldi	r27, 0x00	; 0
    4b08:	ac 0f       	add	r26, r28
    4b0a:	bd 1f       	adc	r27, r29
    4b0c:	aa 0e       	add	r10, r26
    4b0e:	bb 1e       	adc	r11, r27
          f_read(&mf->_fd,&mev.data[i],1,&bRead); // read next
    4b10:	9e 01       	movw	r18, r28
    4b12:	2e 5f       	subi	r18, 0xFE	; 254
    4b14:	3f 4f       	sbci	r19, 0xFF	; 255
    4b16:	41 e0       	ldi	r20, 0x01	; 1
    4b18:	50 e0       	ldi	r21, 0x00	; 0
    4b1a:	b8 01       	movw	r22, r16
    4b1c:	c7 01       	movw	r24, r14
    4b1e:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
    4b22:	0f 5f       	subi	r16, 0xFF	; 255
    4b24:	1f 4f       	sbci	r17, 0xFF	; 255

      default:
      {
        uint8_t minLen = min(ARRAY_SIZE(mev.data), mLen);
        
        for (uint8_t i = 0; i < minLen; ++i)
    4b26:	a0 16       	cp	r10, r16
    4b28:	b1 06       	cpc	r11, r17
    4b2a:	91 f7       	brne	.-28     	; 0x4b10 <parseEvent+0x476>
          f_read(&mf->_fd,&mev.data[i],1,&bRead); // read next
		 		  
        mev.chars[minLen] = '\0'; // in case it is a string
    4b2c:	fe 01       	movw	r30, r28
    4b2e:	e9 0d       	add	r30, r9
    4b30:	f1 1d       	adc	r31, r1
    4b32:	10 86       	std	Z+8, r1	; 0x08
        if (mLen > ARRAY_SIZE(mev.data))
    4b34:	b3 e3       	ldi	r27, 0x33	; 51
    4b36:	4b 16       	cp	r4, r27
    4b38:	51 04       	cpc	r5, r1
    4b3a:	61 04       	cpc	r6, r1
    4b3c:	71 04       	cpc	r7, r1
    4b3e:	80 f0       	brcs	.+32     	; 0x4b60 <parseEvent+0x4c6>
          f_lseek(&mf->_fd,f_tell(&mf->_fd) + (mLen-ARRAY_SIZE(mev.data)));
    4b40:	f6 01       	movw	r30, r12
    4b42:	44 85       	ldd	r20, Z+12	; 0x0c
    4b44:	55 85       	ldd	r21, Z+13	; 0x0d
    4b46:	66 85       	ldd	r22, Z+14	; 0x0e
    4b48:	77 85       	ldd	r23, Z+15	; 0x0f
    4b4a:	42 53       	subi	r20, 0x32	; 50
    4b4c:	51 09       	sbc	r21, r1
    4b4e:	61 09       	sbc	r22, r1
    4b50:	71 09       	sbc	r23, r1
    4b52:	44 0d       	add	r20, r4
    4b54:	55 1d       	adc	r21, r5
    4b56:	66 1d       	adc	r22, r6
    4b58:	77 1d       	adc	r23, r7
    4b5a:	c7 01       	movw	r24, r14
    4b5c:	0e 94 3e 14 	call	0x287c	; 0x287c <f_lseek>
  //    DUMPS("IGNORED");
      }
      break;
    }
    if (mf->_metaHandler != NULL)
    4b60:	d6 01       	movw	r26, r12
    4b62:	14 96       	adiw	r26, 0x04	; 4
    4b64:	ed 91       	ld	r30, X+
    4b66:	fc 91       	ld	r31, X
    4b68:	15 97       	sbiw	r26, 0x05	; 5
    4b6a:	30 97       	sbiw	r30, 0x00	; 0
    4b6c:	39 f0       	breq	.+14     	; 0x4b7c <parseEvent+0x4e2>
      (mf->_metaHandler)(&mev);
    4b6e:	ce 01       	movw	r24, r28
    4b70:	04 96       	adiw	r24, 0x04	; 4
    4b72:	09 95       	icall
  }
  break;
    4b74:	03 c0       	rjmp	.+6      	; 0x4b7c <parseEvent+0x4e2>
  
// ---------------------------- UNKNOWN
  default:
    // stop playing this track as we cannot identify the eType
    t->_endOfTrack = TRUE;
    4b76:	81 e0       	ldi	r24, 0x01	; 1
    4b78:	f8 01       	movw	r30, r16
    4b7a:	85 87       	std	Z+13, r24	; 0x0d
    DUMPX("[UKNOWN 0x", eType);
    DUMPS("] Track aborted");
    break;
  }
}
    4b7c:	c1 5a       	subi	r28, 0xA1	; 161
    4b7e:	df 4f       	sbci	r29, 0xFF	; 255
    4b80:	0f b6       	in	r0, 0x3f	; 63
    4b82:	f8 94       	cli
    4b84:	de bf       	out	0x3e, r29	; 62
    4b86:	0f be       	out	0x3f, r0	; 63
    4b88:	cd bf       	out	0x3d, r28	; 61
    4b8a:	df 91       	pop	r29
    4b8c:	cf 91       	pop	r28
    4b8e:	1f 91       	pop	r17
    4b90:	0f 91       	pop	r16
    4b92:	ff 90       	pop	r15
    4b94:	ef 90       	pop	r14
    4b96:	df 90       	pop	r13
    4b98:	cf 90       	pop	r12
    4b9a:	bf 90       	pop	r11
    4b9c:	af 90       	pop	r10
    4b9e:	9f 90       	pop	r9
    4ba0:	8f 90       	pop	r8
    4ba2:	7f 90       	pop	r7
    4ba4:	6f 90       	pop	r6
    4ba6:	5f 90       	pop	r5
    4ba8:	4f 90       	pop	r4
    4baa:	08 95       	ret

00004bac <getNextTrackEvent>:
  t->_elapsedTicks = 0;
}

BOOL getNextTrackEvent(struct MD_MIDIFile *mf,struct MD_MFTrack *t, uint16_t tickCount)
// track_event = <time:v> + [<midi_event> | <meta_event> | <sysex_event>]
{
    4bac:	8f 92       	push	r8
    4bae:	9f 92       	push	r9
    4bb0:	af 92       	push	r10
    4bb2:	bf 92       	push	r11
    4bb4:	cf 92       	push	r12
    4bb6:	df 92       	push	r13
    4bb8:	ef 92       	push	r14
    4bba:	ff 92       	push	r15
    4bbc:	1f 93       	push	r17
    4bbe:	cf 93       	push	r28
    4bc0:	df 93       	push	r29
  uint32_t deltaT;

  // is there anything to process?
  if (t->_endOfTrack)
    4bc2:	fb 01       	movw	r30, r22
    4bc4:	15 85       	ldd	r17, Z+13	; 0x0d
    4bc6:	11 11       	cpse	r17, r1
    4bc8:	61 c0       	rjmp	.+194    	; 0x4c8c <getNextTrackEvent+0xe0>
    4bca:	6a 01       	movw	r12, r20
    4bcc:	eb 01       	movw	r28, r22
    4bce:	7c 01       	movw	r14, r24
    return(FALSE);

  // move the file pointer to where we left off
  f_lseek(&mf->_fd,t->_startOffset+t->_currOffset);  
    4bd0:	5c 01       	movw	r10, r24
    4bd2:	f6 e0       	ldi	r31, 0x06	; 6
    4bd4:	af 0e       	add	r10, r31
    4bd6:	b1 1c       	adc	r11, r1
    4bd8:	4d 81       	ldd	r20, Y+5	; 0x05
    4bda:	5e 81       	ldd	r21, Y+6	; 0x06
    4bdc:	6f 81       	ldd	r22, Y+7	; 0x07
    4bde:	78 85       	ldd	r23, Y+8	; 0x08
    4be0:	89 85       	ldd	r24, Y+9	; 0x09
    4be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4be4:	ab 85       	ldd	r26, Y+11	; 0x0b
    4be6:	bc 85       	ldd	r27, Y+12	; 0x0c
    4be8:	48 0f       	add	r20, r24
    4bea:	59 1f       	adc	r21, r25
    4bec:	6a 1f       	adc	r22, r26
    4bee:	7b 1f       	adc	r23, r27
    4bf0:	c5 01       	movw	r24, r10
    4bf2:	0e 94 3e 14 	call	0x287c	; 0x287c <f_lseek>

  // Work out new total elapsed ticks - include the overshoot from
  // last event.
  t->_elapsedTicks += tickCount;
    4bf6:	8e 85       	ldd	r24, Y+14	; 0x0e
    4bf8:	9f 85       	ldd	r25, Y+15	; 0x0f
    4bfa:	a8 89       	ldd	r26, Y+16	; 0x10
    4bfc:	b9 89       	ldd	r27, Y+17	; 0x11
    4bfe:	8c 0d       	add	r24, r12
    4c00:	9d 1d       	adc	r25, r13
    4c02:	a1 1d       	adc	r26, r1
    4c04:	b1 1d       	adc	r27, r1
    4c06:	8e 87       	std	Y+14, r24	; 0x0e
    4c08:	9f 87       	std	Y+15, r25	; 0x0f
    4c0a:	a8 8b       	std	Y+16, r26	; 0x10
    4c0c:	b9 8b       	std	Y+17, r27	; 0x11

  // Get the DeltaT from the file in order to see if enough ticks have
  // passed for the event to be active.
  deltaT = readVarLen(&mf->_fd);
    4c0e:	c5 01       	movw	r24, r10
    4c10:	0e 94 d6 22 	call	0x45ac	; 0x45ac <readVarLen>

  // If not enough ticks, just return without saving the file pointer and 
  // we will go back to the same spot next time.
  if (t->_elapsedTicks < deltaT)
    4c14:	8e 84       	ldd	r8, Y+14	; 0x0e
    4c16:	9f 84       	ldd	r9, Y+15	; 0x0f
    4c18:	a8 88       	ldd	r10, Y+16	; 0x10
    4c1a:	b9 88       	ldd	r11, Y+17	; 0x11
    4c1c:	86 16       	cp	r8, r22
    4c1e:	97 06       	cpc	r9, r23
    4c20:	a8 06       	cpc	r10, r24
    4c22:	b9 06       	cpc	r11, r25
    4c24:	a0 f1       	brcs	.+104    	; 0x4c8e <getNextTrackEvent+0xe2>
    return(FALSE);

  // Adjust the total elapsed time to the error against actual DeltaT to avoid 
  // accumulation of errors, as we only check for _elapsedTicks being >= ticks,
  // giving positive biased errors every time.
  t->_elapsedTicks -= deltaT;
    4c26:	a5 01       	movw	r20, r10
    4c28:	94 01       	movw	r18, r8
    4c2a:	26 1b       	sub	r18, r22
    4c2c:	37 0b       	sbc	r19, r23
    4c2e:	48 0b       	sbc	r20, r24
    4c30:	59 0b       	sbc	r21, r25
    4c32:	2e 87       	std	Y+14, r18	; 0x0e
    4c34:	3f 87       	std	Y+15, r19	; 0x0f
    4c36:	48 8b       	std	Y+16, r20	; 0x10
    4c38:	59 8b       	std	Y+17, r21	; 0x11

  DUMP("\ndT: ", deltaT);
  DUMP(" + ", _elapsedTicks);
  DUMPS("\t");

  parseEvent(mf,t);
    4c3a:	be 01       	movw	r22, r28
    4c3c:	c7 01       	movw	r24, r14
    4c3e:	0e 94 4d 23 	call	0x469a	; 0x469a <parseEvent>

  // remember the offset for next time
  t->_currOffset = mf->_fd.fptr - t->_startOffset;
    4c42:	f7 01       	movw	r30, r14
    4c44:	84 85       	ldd	r24, Z+12	; 0x0c
    4c46:	95 85       	ldd	r25, Z+13	; 0x0d
    4c48:	a6 85       	ldd	r26, Z+14	; 0x0e
    4c4a:	b7 85       	ldd	r27, Z+15	; 0x0f
    4c4c:	4d 81       	ldd	r20, Y+5	; 0x05
    4c4e:	5e 81       	ldd	r21, Y+6	; 0x06
    4c50:	6f 81       	ldd	r22, Y+7	; 0x07
    4c52:	78 85       	ldd	r23, Y+8	; 0x08
    4c54:	84 1b       	sub	r24, r20
    4c56:	95 0b       	sbc	r25, r21
    4c58:	a6 0b       	sbc	r26, r22
    4c5a:	b7 0b       	sbc	r27, r23
    4c5c:	89 87       	std	Y+9, r24	; 0x09
    4c5e:	9a 87       	std	Y+10, r25	; 0x0a
    4c60:	ab 87       	std	Y+11, r26	; 0x0b
    4c62:	bc 87       	std	Y+12, r27	; 0x0c

  // catch end of track when there is no META event  
  t->_endOfTrack = t->_endOfTrack || (t->_currOffset >= t->_length);
    4c64:	2d 85       	ldd	r18, Y+13	; 0x0d
    4c66:	21 11       	cpse	r18, r1
    4c68:	0d c0       	rjmp	.+26     	; 0x4c84 <getNextTrackEvent+0xd8>
    4c6a:	21 e0       	ldi	r18, 0x01	; 1
    4c6c:	49 81       	ldd	r20, Y+1	; 0x01
    4c6e:	5a 81       	ldd	r21, Y+2	; 0x02
    4c70:	6b 81       	ldd	r22, Y+3	; 0x03
    4c72:	7c 81       	ldd	r23, Y+4	; 0x04
    4c74:	84 17       	cp	r24, r20
    4c76:	95 07       	cpc	r25, r21
    4c78:	a6 07       	cpc	r26, r22
    4c7a:	b7 07       	cpc	r27, r23
    4c7c:	08 f4       	brcc	.+2      	; 0x4c80 <getNextTrackEvent+0xd4>
    4c7e:	20 e0       	ldi	r18, 0x00	; 0
    4c80:	82 2f       	mov	r24, r18
    4c82:	01 c0       	rjmp	.+2      	; 0x4c86 <getNextTrackEvent+0xda>
    4c84:	81 e0       	ldi	r24, 0x01	; 1
    4c86:	8d 87       	std	Y+13, r24	; 0x0d
  if (t->_endOfTrack) DUMPS(" - OUT OF TRACK");

  return(TRUE);
    4c88:	11 e0       	ldi	r17, 0x01	; 1
    4c8a:	01 c0       	rjmp	.+2      	; 0x4c8e <getNextTrackEvent+0xe2>
{
  uint32_t deltaT;

  // is there anything to process?
  if (t->_endOfTrack)
    return(FALSE);
    4c8c:	10 e0       	ldi	r17, 0x00	; 0
  // catch end of track when there is no META event  
  t->_endOfTrack = t->_endOfTrack || (t->_currOffset >= t->_length);
  if (t->_endOfTrack) DUMPS(" - OUT OF TRACK");

  return(TRUE);
}
    4c8e:	81 2f       	mov	r24, r17
    4c90:	df 91       	pop	r29
    4c92:	cf 91       	pop	r28
    4c94:	1f 91       	pop	r17
    4c96:	ff 90       	pop	r15
    4c98:	ef 90       	pop	r14
    4c9a:	df 90       	pop	r13
    4c9c:	cf 90       	pop	r12
    4c9e:	bf 90       	pop	r11
    4ca0:	af 90       	pop	r10
    4ca2:	9f 90       	pop	r9
    4ca4:	8f 90       	pop	r8
    4ca6:	08 95       	ret

00004ca8 <loadTrack>:
    break;
  }
}

int loadTrack(struct MD_MFTrack *t,uint8_t trackId, struct MD_MIDIFile *mf)
{
    4ca8:	8f 92       	push	r8
    4caa:	9f 92       	push	r9
    4cac:	af 92       	push	r10
    4cae:	bf 92       	push	r11
    4cb0:	cf 92       	push	r12
    4cb2:	df 92       	push	r13
    4cb4:	ef 92       	push	r14
    4cb6:	ff 92       	push	r15
    4cb8:	0f 93       	push	r16
    4cba:	1f 93       	push	r17
    4cbc:	cf 93       	push	r28
    4cbe:	df 93       	push	r29
    4cc0:	cd b7       	in	r28, 0x3d	; 61
    4cc2:	de b7       	in	r29, 0x3e	; 62
    4cc4:	29 97       	sbiw	r28, 0x09	; 9
    4cc6:	0f b6       	in	r0, 0x3f	; 63
    4cc8:	f8 94       	cli
    4cca:	de bf       	out	0x3e, r29	; 62
    4ccc:	0f be       	out	0x3f, r0	; 63
    4cce:	cd bf       	out	0x3d, r28	; 61
    4cd0:	8c 01       	movw	r16, r24
    4cd2:	6a 01       	movw	r12, r20
  uint32_t  dat32;
  //uint16_t  dat16;

  // save the trackid for use later
  t->_trackId = t->_mev.track = trackId;
    4cd4:	fc 01       	movw	r30, r24
    4cd6:	62 8b       	std	Z+18, r22	; 0x12
    4cd8:	60 83       	st	Z, r22
  // Read the Track header
  // track_chunk = "MTrk" + <length:4> + <track_event> [+ <track_event> ...]
  {
    char    h[MTRK_HDR_SIZE+1]; // Header characters + nul
  
    f_read(&mf->_fd,h,MTRK_HDR_SIZE,(UINT *)&dat32);
    4cda:	7a 01       	movw	r14, r20
    4cdc:	f6 e0       	ldi	r31, 0x06	; 6
    4cde:	ef 0e       	add	r14, r31
    4ce0:	f1 1c       	adc	r15, r1
    4ce2:	9e 01       	movw	r18, r28
    4ce4:	2f 5f       	subi	r18, 0xFF	; 255
    4ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    4ce8:	44 e0       	ldi	r20, 0x04	; 4
    4cea:	50 e0       	ldi	r21, 0x00	; 0
    4cec:	be 01       	movw	r22, r28
    4cee:	6b 5f       	subi	r22, 0xFB	; 251
    4cf0:	7f 4f       	sbci	r23, 0xFF	; 255
    4cf2:	c7 01       	movw	r24, r14
    4cf4:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
    h[MTRK_HDR_SIZE] = '\0';
    4cf8:	19 86       	std	Y+9, r1	; 0x09

    if (strcmp(h, MTRK_HDR) != 0)
    4cfa:	67 e7       	ldi	r22, 0x77	; 119
    4cfc:	71 e0       	ldi	r23, 0x01	; 1
    4cfe:	ce 01       	movw	r24, r28
    4d00:	05 96       	adiw	r24, 0x05	; 5
    4d02:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <strcmp>
    4d06:	89 2b       	or	r24, r25
    4d08:	19 f0       	breq	.+6      	; 0x4d10 <loadTrack+0x68>
      return(0);
    4d0a:	80 e0       	ldi	r24, 0x00	; 0
    4d0c:	90 e0       	ldi	r25, 0x00	; 0
    4d0e:	2b c0       	rjmp	.+86     	; 0x4d66 <loadTrack+0xbe>
  }

  // Row read track chunk size and in bytes. This is not really necessary 
  // since the track MUST end with an end of track meta event.
  dat32 = readMultiByte(&mf->_fd, MB_LONG);
    4d10:	64 e0       	ldi	r22, 0x04	; 4
    4d12:	c7 01       	movw	r24, r14
    4d14:	0e 94 95 22 	call	0x452a	; 0x452a <readMultiByte>
    4d18:	69 83       	std	Y+1, r22	; 0x01
    4d1a:	7a 83       	std	Y+2, r23	; 0x02
    4d1c:	8b 83       	std	Y+3, r24	; 0x03
    4d1e:	9c 83       	std	Y+4, r25	; 0x04
  t->_length = dat32;
    4d20:	f8 01       	movw	r30, r16
    4d22:	61 83       	std	Z+1, r22	; 0x01
    4d24:	72 83       	std	Z+2, r23	; 0x02
    4d26:	83 83       	std	Z+3, r24	; 0x03
    4d28:	94 83       	std	Z+4, r25	; 0x04

  // save where we are in the file as this is the start of offset for this track
  t->_startOffset = mf->_fd.fptr;
    4d2a:	f6 01       	movw	r30, r12
    4d2c:	84 84       	ldd	r8, Z+12	; 0x0c
    4d2e:	95 84       	ldd	r9, Z+13	; 0x0d
    4d30:	a6 84       	ldd	r10, Z+14	; 0x0e
    4d32:	b7 84       	ldd	r11, Z+15	; 0x0f
    4d34:	f8 01       	movw	r30, r16
    4d36:	85 82       	std	Z+5, r8	; 0x05
    4d38:	96 82       	std	Z+6, r9	; 0x06
    4d3a:	a7 82       	std	Z+7, r10	; 0x07
    4d3c:	b0 86       	std	Z+8, r11	; 0x08
  t->_currOffset = 0;
    4d3e:	11 86       	std	Z+9, r1	; 0x09
    4d40:	12 86       	std	Z+10, r1	; 0x0a
    4d42:	13 86       	std	Z+11, r1	; 0x0b
    4d44:	14 86       	std	Z+12, r1	; 0x0c

  // Advance the file pointer to the start of the next track;
  if (f_lseek(&mf->_fd,(t->_startOffset+t->_length)) != FR_OK)
    4d46:	ab 01       	movw	r20, r22
    4d48:	bc 01       	movw	r22, r24
    4d4a:	48 0d       	add	r20, r8
    4d4c:	59 1d       	adc	r21, r9
    4d4e:	6a 1d       	adc	r22, r10
    4d50:	7b 1d       	adc	r23, r11
    4d52:	c7 01       	movw	r24, r14
    4d54:	0e 94 3e 14 	call	0x287c	; 0x287c <f_lseek>
    4d58:	81 11       	cpse	r24, r1
    4d5a:	03 c0       	rjmp	.+6      	; 0x4d62 <loadTrack+0xba>
    return(1);

  return(-1);
    4d5c:	8f ef       	ldi	r24, 0xFF	; 255
    4d5e:	9f ef       	ldi	r25, 0xFF	; 255
    4d60:	02 c0       	rjmp	.+4      	; 0x4d66 <loadTrack+0xbe>
  t->_startOffset = mf->_fd.fptr;
  t->_currOffset = 0;

  // Advance the file pointer to the start of the next track;
  if (f_lseek(&mf->_fd,(t->_startOffset+t->_length)) != FR_OK)
    return(1);
    4d62:	81 e0       	ldi	r24, 0x01	; 1
    4d64:	90 e0       	ldi	r25, 0x00	; 0

  return(-1);
}
    4d66:	29 96       	adiw	r28, 0x09	; 9
    4d68:	0f b6       	in	r0, 0x3f	; 63
    4d6a:	f8 94       	cli
    4d6c:	de bf       	out	0x3e, r29	; 62
    4d6e:	0f be       	out	0x3f, r0	; 63
    4d70:	cd bf       	out	0x3d, r28	; 61
    4d72:	df 91       	pop	r29
    4d74:	cf 91       	pop	r28
    4d76:	1f 91       	pop	r17
    4d78:	0f 91       	pop	r16
    4d7a:	ff 90       	pop	r15
    4d7c:	ef 90       	pop	r14
    4d7e:	df 90       	pop	r13
    4d80:	cf 90       	pop	r12
    4d82:	bf 90       	pop	r11
    4d84:	af 90       	pop	r10
    4d86:	9f 90       	pop	r9
    4d88:	8f 90       	pop	r8
    4d8a:	08 95       	ret

00004d8c <midiInit>:
	ev->data[0] = ev->data[0] | ev->channel;
	sendMidiBuffer(ev->data,ev->size);
}

void midiFileVolume(unsigned char vol){
	fileVolume = vol;
    4d8c:	81 e0       	ldi	r24, 0x01	; 1
    4d8e:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <midiState>
    4d92:	08 95       	ret

00004d94 <getMidiStruct>:
    4d94:	ee e8       	ldi	r30, 0x8E	; 142
    4d96:	f4 e0       	ldi	r31, 0x04	; 4
    4d98:	20 91 8b 04 	lds	r18, 0x048B	; 0x80048b <midiReadIndex>
    4d9c:	22 83       	std	Z+2, r18	; 0x02
    4d9e:	67 83       	std	Z+7, r22	; 0x07
    4da0:	70 87       	std	Z+8, r23	; 0x08
    4da2:	81 87       	std	Z+9, r24	; 0x09
    4da4:	92 87       	std	Z+10, r25	; 0x0a
    4da6:	cf 01       	movw	r24, r30
    4da8:	08 95       	ret

00004daa <sendMidiMessage>:
    4daa:	cf 92       	push	r12
    4dac:	df 92       	push	r13
    4dae:	ef 92       	push	r14
    4db0:	ff 92       	push	r15
    4db2:	0f 93       	push	r16
    4db4:	1f 93       	push	r17
    4db6:	cf 93       	push	r28
    4db8:	df 93       	push	r29
    4dba:	08 2f       	mov	r16, r24
    4dbc:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <work_event+0x3>
    4dc0:	80 7f       	andi	r24, 0xF0	; 240
    4dc2:	80 39       	cpi	r24, 0x90	; 144
    4dc4:	01 f5       	brne	.+64     	; 0x4e06 <sendMidiMessage+0x5c>
    4dc6:	ce e8       	ldi	r28, 0x8E	; 142
    4dc8:	d4 e0       	ldi	r29, 0x04	; 4
    4dca:	60 91 8d 04 	lds	r22, 0x048D	; 0x80048d <playVolume>
    4dce:	70 e0       	ldi	r23, 0x00	; 0
    4dd0:	80 e0       	ldi	r24, 0x00	; 0
    4dd2:	90 e0       	ldi	r25, 0x00	; 0
    4dd4:	0e 94 11 35 	call	0x6a22	; 0x6a22 <__floatunsisf>
    4dd8:	20 e0       	ldi	r18, 0x00	; 0
    4dda:	30 e0       	ldi	r19, 0x00	; 0
    4ddc:	4f e7       	ldi	r20, 0x7F	; 127
    4dde:	53 e4       	ldi	r21, 0x43	; 67
    4de0:	0e 94 70 34 	call	0x68e0	; 0x68e0 <__divsf3>
    4de4:	6b 01       	movw	r12, r22
    4de6:	7c 01       	movw	r14, r24
    4de8:	6d 81       	ldd	r22, Y+5	; 0x05
    4dea:	70 e0       	ldi	r23, 0x00	; 0
    4dec:	80 e0       	ldi	r24, 0x00	; 0
    4dee:	90 e0       	ldi	r25, 0x00	; 0
    4df0:	0e 94 13 35 	call	0x6a26	; 0x6a26 <__floatsisf>
    4df4:	9b 01       	movw	r18, r22
    4df6:	ac 01       	movw	r20, r24
    4df8:	c7 01       	movw	r24, r14
    4dfa:	b6 01       	movw	r22, r12
    4dfc:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    4e00:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <__fixunssfsi>
    4e04:	6d 83       	std	Y+5, r22	; 0x05
    4e06:	00 23       	and	r16, r16
    4e08:	61 f0       	breq	.+24     	; 0x4e22 <sendMidiMessage+0x78>
    4e0a:	c1 e9       	ldi	r28, 0x91	; 145
    4e0c:	d4 e0       	ldi	r29, 0x04	; 4
    4e0e:	01 50       	subi	r16, 0x01	; 1
    4e10:	10 e0       	ldi	r17, 0x00	; 0
    4e12:	0e 56       	subi	r16, 0x6E	; 110
    4e14:	1b 4f       	sbci	r17, 0xFB	; 251
    4e16:	89 91       	ld	r24, Y+
    4e18:	0e 94 b0 33 	call	0x6760	; 0x6760 <uartSendByte>
    4e1c:	c0 17       	cp	r28, r16
    4e1e:	d1 07       	cpc	r29, r17
    4e20:	d1 f7       	brne	.-12     	; 0x4e16 <sendMidiMessage+0x6c>
    4e22:	df 91       	pop	r29
    4e24:	cf 91       	pop	r28
    4e26:	1f 91       	pop	r17
    4e28:	0f 91       	pop	r16
    4e2a:	ff 90       	pop	r15
    4e2c:	ef 90       	pop	r14
    4e2e:	df 90       	pop	r13
    4e30:	cf 90       	pop	r12
    4e32:	08 95       	ret

00004e34 <sendMidiBuffer>:
    4e34:	0f 93       	push	r16
    4e36:	1f 93       	push	r17
    4e38:	cf 93       	push	r28
    4e3a:	df 93       	push	r29
    4e3c:	66 23       	and	r22, r22
    4e3e:	71 f0       	breq	.+28     	; 0x4e5c <sendMidiBuffer+0x28>
    4e40:	ec 01       	movw	r28, r24
    4e42:	61 50       	subi	r22, 0x01	; 1
    4e44:	06 2f       	mov	r16, r22
    4e46:	10 e0       	ldi	r17, 0x00	; 0
    4e48:	0f 5f       	subi	r16, 0xFF	; 255
    4e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e4c:	08 0f       	add	r16, r24
    4e4e:	19 1f       	adc	r17, r25
    4e50:	89 91       	ld	r24, Y+
    4e52:	0e 94 b0 33 	call	0x6760	; 0x6760 <uartSendByte>
    4e56:	c0 17       	cp	r28, r16
    4e58:	d1 07       	cpc	r29, r17
    4e5a:	d1 f7       	brne	.-12     	; 0x4e50 <sendMidiBuffer+0x1c>
    4e5c:	df 91       	pop	r29
    4e5e:	cf 91       	pop	r28
    4e60:	1f 91       	pop	r17
    4e62:	0f 91       	pop	r16
    4e64:	08 95       	ret

00004e66 <sendProgramChange>:
    4e66:	1f 93       	push	r17
    4e68:	cf 93       	push	r28
    4e6a:	df 93       	push	r29
    4e6c:	16 2f       	mov	r17, r22
    4e6e:	ce e8       	ldi	r28, 0x8E	; 142
    4e70:	d4 e0       	ldi	r29, 0x04	; 4
    4e72:	90 eb       	ldi	r25, 0xB0	; 176
    4e74:	9b 83       	std	Y+3, r25	; 0x03
    4e76:	1c 82       	std	Y+4, r1	; 0x04
    4e78:	8d 83       	std	Y+5, r24	; 0x05
    4e7a:	83 e0       	ldi	r24, 0x03	; 3
    4e7c:	0e 94 d5 26 	call	0x4daa	; 0x4daa <sendMidiMessage>
    4e80:	80 ec       	ldi	r24, 0xC0	; 192
    4e82:	8b 83       	std	Y+3, r24	; 0x03
    4e84:	1c 83       	std	Y+4, r17	; 0x04
    4e86:	82 e0       	ldi	r24, 0x02	; 2
    4e88:	0e 94 d5 26 	call	0x4daa	; 0x4daa <sendMidiMessage>
    4e8c:	df 91       	pop	r29
    4e8e:	cf 91       	pop	r28
    4e90:	1f 91       	pop	r17
    4e92:	08 95       	ret

00004e94 <commandLen>:
    4e94:	e8 2f       	mov	r30, r24
    4e96:	e0 7f       	andi	r30, 0xF0	; 240
    4e98:	e0 3f       	cpi	r30, 0xF0	; 240
    4e9a:	09 f4       	brne	.+2      	; 0x4e9e <commandLen+0xa>
    4e9c:	e8 2f       	mov	r30, r24
    4e9e:	8e 2f       	mov	r24, r30
    4ea0:	90 e0       	ldi	r25, 0x00	; 0
    4ea2:	fc 01       	movw	r30, r24
    4ea4:	e0 58       	subi	r30, 0x80	; 128
    4ea6:	f1 09       	sbc	r31, r1
    4ea8:	e0 38       	cpi	r30, 0x80	; 128
    4eaa:	f1 05       	cpc	r31, r1
    4eac:	40 f4       	brcc	.+16     	; 0x4ebe <commandLen+0x2a>
    4eae:	ec 5c       	subi	r30, 0xCC	; 204
    4eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb2:	0c 94 61 36 	jmp	0x6cc2	; 0x6cc2 <__tablejump2__>
    4eb6:	82 e0       	ldi	r24, 0x02	; 2
    4eb8:	08 95       	ret
    4eba:	83 e0       	ldi	r24, 0x03	; 3
    4ebc:	08 95       	ret
    4ebe:	80 e0       	ldi	r24, 0x00	; 0
    4ec0:	08 95       	ret
    4ec2:	81 e0       	ldi	r24, 0x01	; 1
    4ec4:	08 95       	ret

00004ec6 <readMidiMessage>:
    4ec6:	ff 92       	push	r15
    4ec8:	0f 93       	push	r16
    4eca:	1f 93       	push	r17
    4ecc:	cf 93       	push	r28
    4ece:	df 93       	push	r29
    4ed0:	d8 2f       	mov	r29, r24
    4ed2:	8b 01       	movw	r16, r22
    4ed4:	c0 91 8a 04 	lds	r28, 0x048A	; 0x80048a <midiState>
    4ed8:	c2 30       	cpi	r28, 0x02	; 2
    4eda:	51 f1       	breq	.+84     	; 0x4f30 <readMidiMessage+0x6a>
    4edc:	c3 30       	cpi	r28, 0x03	; 3
    4ede:	09 f4       	brne	.+2      	; 0x4ee2 <readMidiMessage+0x1c>
    4ee0:	53 c0       	rjmp	.+166    	; 0x4f88 <readMidiMessage+0xc2>
    4ee2:	c1 30       	cpi	r28, 0x01	; 1
    4ee4:	09 f0       	breq	.+2      	; 0x4ee8 <readMidiMessage+0x22>
    4ee6:	57 c0       	rjmp	.+174    	; 0x4f96 <readMidiMessage+0xd0>
    4ee8:	80 3f       	cpi	r24, 0xF0	; 240
    4eea:	09 f4       	brne	.+2      	; 0x4eee <readMidiMessage+0x28>
    4eec:	56 c0       	rjmp	.+172    	; 0x4f9a <readMidiMessage+0xd4>
    4eee:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <commandLen>
    4ef2:	81 30       	cpi	r24, 0x01	; 1
    4ef4:	39 f4       	brne	.+14     	; 0x4f04 <readMidiMessage+0x3e>
    4ef6:	f8 01       	movw	r30, r16
    4ef8:	80 83       	st	Z, r24
    4efa:	d0 93 91 04 	sts	0x0491, r29	; 0x800491 <work_event+0x3>
    4efe:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <noteEvent>
    4f02:	50 c0       	rjmp	.+160    	; 0x4fa4 <readMidiMessage+0xde>
    4f04:	81 11       	cpse	r24, r1
    4f06:	0a c0       	rjmp	.+20     	; 0x4f1c <readMidiMessage+0x56>
    4f08:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <noteEvent>
    4f0c:	81 30       	cpi	r24, 0x01	; 1
    4f0e:	59 f4       	brne	.+22     	; 0x4f26 <readMidiMessage+0x60>
    4f10:	d0 93 92 04 	sts	0x0492, r29	; 0x800492 <work_event+0x4>
    4f14:	82 e0       	ldi	r24, 0x02	; 2
    4f16:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <midiReadIndex>
    4f1a:	05 c0       	rjmp	.+10     	; 0x4f26 <readMidiMessage+0x60>
    4f1c:	d0 93 91 04 	sts	0x0491, r29	; 0x800491 <work_event+0x3>
    4f20:	81 e0       	ldi	r24, 0x01	; 1
    4f22:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <midiReadIndex>
    4f26:	82 e0       	ldi	r24, 0x02	; 2
    4f28:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <midiState>
    4f2c:	c0 e0       	ldi	r28, 0x00	; 0
    4f2e:	3a c0       	rjmp	.+116    	; 0x4fa4 <readMidiMessage+0xde>
    4f30:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <commandLen>
    4f34:	c8 2f       	mov	r28, r24
    4f36:	88 23       	and	r24, r24
    4f38:	39 f0       	breq	.+14     	; 0x4f48 <readMidiMessage+0x82>
    4f3a:	81 e0       	ldi	r24, 0x01	; 1
    4f3c:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <midiState>
    4f40:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <noteEvent>
    4f44:	c0 e0       	ldi	r28, 0x00	; 0
    4f46:	2e c0       	rjmp	.+92     	; 0x4fa4 <readMidiMessage+0xde>
    4f48:	e0 91 8b 04 	lds	r30, 0x048B	; 0x80048b <midiReadIndex>
    4f4c:	ff 24       	eor	r15, r15
    4f4e:	f3 94       	inc	r15
    4f50:	fe 0e       	add	r15, r30
    4f52:	f0 92 8b 04 	sts	0x048B, r15	; 0x80048b <midiReadIndex>
    4f56:	f0 e0       	ldi	r31, 0x00	; 0
    4f58:	e2 57       	subi	r30, 0x72	; 114
    4f5a:	fb 4f       	sbci	r31, 0xFB	; 251
    4f5c:	d3 83       	std	Z+3, r29	; 0x03
    4f5e:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <work_event+0x3>
    4f62:	80 7f       	andi	r24, 0xF0	; 240
    4f64:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <commandLen>
    4f68:	f8 12       	cpse	r15, r24
    4f6a:	1c c0       	rjmp	.+56     	; 0x4fa4 <readMidiMessage+0xde>
    4f6c:	81 e0       	ldi	r24, 0x01	; 1
    4f6e:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <midiState>
    4f72:	f8 01       	movw	r30, r16
    4f74:	f0 82       	st	Z, r15
    4f76:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <work_event+0x3>
    4f7a:	80 79       	andi	r24, 0x90	; 144
    4f7c:	81 f0       	breq	.+32     	; 0x4f9e <readMidiMessage+0xd8>
    4f7e:	81 e0       	ldi	r24, 0x01	; 1
    4f80:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <noteEvent>
    4f84:	c1 e0       	ldi	r28, 0x01	; 1
    4f86:	0e c0       	rjmp	.+28     	; 0x4fa4 <readMidiMessage+0xde>
    4f88:	87 3f       	cpi	r24, 0xF7	; 247
    4f8a:	59 f4       	brne	.+22     	; 0x4fa2 <readMidiMessage+0xdc>
    4f8c:	81 e0       	ldi	r24, 0x01	; 1
    4f8e:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <midiState>
    4f92:	c0 e0       	ldi	r28, 0x00	; 0
    4f94:	07 c0       	rjmp	.+14     	; 0x4fa4 <readMidiMessage+0xde>
    4f96:	c0 e0       	ldi	r28, 0x00	; 0
    4f98:	05 c0       	rjmp	.+10     	; 0x4fa4 <readMidiMessage+0xde>
    4f9a:	c0 e0       	ldi	r28, 0x00	; 0
    4f9c:	03 c0       	rjmp	.+6      	; 0x4fa4 <readMidiMessage+0xde>
    4f9e:	c1 e0       	ldi	r28, 0x01	; 1
    4fa0:	01 c0       	rjmp	.+2      	; 0x4fa4 <readMidiMessage+0xde>
    4fa2:	c0 e0       	ldi	r28, 0x00	; 0
    4fa4:	8c 2f       	mov	r24, r28
    4fa6:	df 91       	pop	r29
    4fa8:	cf 91       	pop	r28
    4faa:	1f 91       	pop	r17
    4fac:	0f 91       	pop	r16
    4fae:	ff 90       	pop	r15
    4fb0:	08 95       	ret

00004fb2 <metaFun>:
    4fb2:	08 95       	ret

00004fb4 <sysexFun>:
    4fb4:	08 95       	ret

00004fb6 <midiFun>:
    4fb6:	cf 92       	push	r12
    4fb8:	df 92       	push	r13
    4fba:	ef 92       	push	r14
    4fbc:	ff 92       	push	r15
    4fbe:	1f 93       	push	r17
    4fc0:	cf 93       	push	r28
    4fc2:	df 93       	push	r29
    4fc4:	ec 01       	movw	r28, r24
    4fc6:	1b 81       	ldd	r17, Y+3	; 0x03
    4fc8:	81 2f       	mov	r24, r17
    4fca:	80 7f       	andi	r24, 0xF0	; 240
    4fcc:	80 39       	cpi	r24, 0x90	; 144
    4fce:	21 f5       	brne	.+72     	; 0x5018 <midiFun+0x62>
    4fd0:	60 91 8d 04 	lds	r22, 0x048D	; 0x80048d <playVolume>
    4fd4:	70 e0       	ldi	r23, 0x00	; 0
    4fd6:	6f 5f       	subi	r22, 0xFF	; 255
    4fd8:	7f 4f       	sbci	r23, 0xFF	; 255
    4fda:	07 2e       	mov	r0, r23
    4fdc:	00 0c       	add	r0, r0
    4fde:	88 0b       	sbc	r24, r24
    4fe0:	99 0b       	sbc	r25, r25
    4fe2:	0e 94 13 35 	call	0x6a26	; 0x6a26 <__floatsisf>
    4fe6:	9b 01       	movw	r18, r22
    4fe8:	ac 01       	movw	r20, r24
    4fea:	60 e0       	ldi	r22, 0x00	; 0
    4fec:	70 e0       	ldi	r23, 0x00	; 0
    4fee:	8e ef       	ldi	r24, 0xFE	; 254
    4ff0:	92 e4       	ldi	r25, 0x42	; 66
    4ff2:	0e 94 70 34 	call	0x68e0	; 0x68e0 <__divsf3>
    4ff6:	6b 01       	movw	r12, r22
    4ff8:	7c 01       	movw	r14, r24
    4ffa:	6d 81       	ldd	r22, Y+5	; 0x05
    4ffc:	70 e0       	ldi	r23, 0x00	; 0
    4ffe:	80 e0       	ldi	r24, 0x00	; 0
    5000:	90 e0       	ldi	r25, 0x00	; 0
    5002:	0e 94 13 35 	call	0x6a26	; 0x6a26 <__floatsisf>
    5006:	9b 01       	movw	r18, r22
    5008:	ac 01       	movw	r20, r24
    500a:	c7 01       	movw	r24, r14
    500c:	b6 01       	movw	r22, r12
    500e:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    5012:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <__fixunssfsi>
    5016:	6d 83       	std	Y+5, r22	; 0x05
    5018:	89 81       	ldd	r24, Y+1	; 0x01
    501a:	18 2b       	or	r17, r24
    501c:	1b 83       	std	Y+3, r17	; 0x03
    501e:	6a 81       	ldd	r22, Y+2	; 0x02
    5020:	ce 01       	movw	r24, r28
    5022:	03 96       	adiw	r24, 0x03	; 3
    5024:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <sendMidiBuffer>
    5028:	df 91       	pop	r29
    502a:	cf 91       	pop	r28
    502c:	1f 91       	pop	r17
    502e:	ff 90       	pop	r15
    5030:	ef 90       	pop	r14
    5032:	df 90       	pop	r13
    5034:	cf 90       	pop	r12
    5036:	08 95       	ret

00005038 <midiPlayVolume>:
}

void midiPlayVolume(unsigned char vol){	
	playVolume = vol;
    5038:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <playVolume>
    503c:	08 95       	ret

0000503e <rcvr_spi>:
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    503e:	8f ef       	ldi	r24, 0xFF	; 255
    5040:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    5042:	77 9b       	sbis	0x0e, 7	; 14
    5044:	fe cf       	rjmp	.-4      	; 0x5042 <rcvr_spi+0x4>
	return SPDR;
    5046:	8f b1       	in	r24, 0x0f	; 15
}
    5048:	08 95       	ret

0000504a <wait_ready>:
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
    504a:	82 e3       	ldi	r24, 0x32	; 50
    504c:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <Timer2>
	rcvr_spi();
    5050:	0e 94 1f 28 	call	0x503e	; 0x503e <rcvr_spi>
	do
		if (rcvr_spi() == 0xFF) return 1;
    5054:	0e 94 1f 28 	call	0x503e	; 0x503e <rcvr_spi>
    5058:	8f 3f       	cpi	r24, 0xFF	; 255
    505a:	39 f0       	breq	.+14     	; 0x506a <wait_ready+0x20>
	while (Timer2);
    505c:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <Timer2>
    5060:	81 11       	cpse	r24, r1
    5062:	f8 cf       	rjmp	.-16     	; 0x5054 <wait_ready+0xa>

	return 0;
    5064:	80 e0       	ldi	r24, 0x00	; 0
    5066:	90 e0       	ldi	r25, 0x00	; 0
    5068:	08 95       	ret
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		if (rcvr_spi() == 0xFF) return 1;
    506a:	81 e0       	ldi	r24, 0x01	; 1
    506c:	90 e0       	ldi	r25, 0x00	; 0
	while (Timer2);

	return 0;
}
    506e:	08 95       	ret

00005070 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    5070:	c4 9a       	sbi	0x18, 4	; 24
	rcvr_spi();
    5072:	0e 94 1f 28 	call	0x503e	; 0x503e <rcvr_spi>
    5076:	08 95       	ret

00005078 <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
    5078:	cf 93       	push	r28
    507a:	df 93       	push	r29
	CS_LOW();
    507c:	c4 98       	cbi	0x18, 4	; 24
	if (!wait_ready()) {
    507e:	0e 94 25 28 	call	0x504a	; 0x504a <wait_ready>
    5082:	ec 01       	movw	r28, r24
    5084:	89 2b       	or	r24, r25
    5086:	19 f4       	brne	.+6      	; 0x508e <select+0x16>
		deselect();
    5088:	0e 94 38 28 	call	0x5070	; 0x5070 <deselect>
		return 0;
    508c:	02 c0       	rjmp	.+4      	; 0x5092 <select+0x1a>
	}
	return 1;
    508e:	c1 e0       	ldi	r28, 0x01	; 1
    5090:	d0 e0       	ldi	r29, 0x00	; 0
}
    5092:	ce 01       	movw	r24, r28
    5094:	df 91       	pop	r29
    5096:	cf 91       	pop	r28
    5098:	08 95       	ret

0000509a <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    509a:	0f 93       	push	r16
    509c:	1f 93       	push	r17
    509e:	cf 93       	push	r28
    50a0:	df 93       	push	r29
    50a2:	08 2f       	mov	r16, r24
    50a4:	19 2f       	mov	r17, r25
    50a6:	eb 01       	movw	r28, r22
	BYTE token;


	Timer1 = 20;
    50a8:	84 e1       	ldi	r24, 0x14	; 20
    50aa:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <Timer1>
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
    50ae:	0e 94 1f 28 	call	0x503e	; 0x503e <rcvr_spi>
	} while ((token == 0xFF) && Timer1);
    50b2:	8f 3f       	cpi	r24, 0xFF	; 255
    50b4:	39 f4       	brne	.+14     	; 0x50c4 <rcvr_datablock+0x2a>
    50b6:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Timer1>
    50ba:	81 11       	cpse	r24, r1
    50bc:	f8 cf       	rjmp	.-16     	; 0x50ae <rcvr_datablock+0x14>
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
    50be:	80 e0       	ldi	r24, 0x00	; 0
    50c0:	90 e0       	ldi	r25, 0x00	; 0
    50c2:	2c c0       	rjmp	.+88     	; 0x511c <rcvr_datablock+0x82>
    50c4:	8e 3f       	cpi	r24, 0xFE	; 254
    50c6:	41 f5       	brne	.+80     	; 0x5118 <rcvr_datablock+0x7e>
    50c8:	e0 2f       	mov	r30, r16
    50ca:	f1 2f       	mov	r31, r17

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
    50cc:	8f ef       	ldi	r24, 0xFF	; 255
    50ce:	8f b9       	out	0x0f, r24	; 15
    50d0:	77 9b       	sbis	0x0e, 7	; 14
    50d2:	fe cf       	rjmp	.-4      	; 0x50d0 <rcvr_datablock+0x36>
    50d4:	9f b1       	in	r25, 0x0f	; 15
    50d6:	df 01       	movw	r26, r30
    50d8:	90 83       	st	Z, r25
		rcvr_spi_m(buff++);
    50da:	8f b9       	out	0x0f, r24	; 15
    50dc:	77 9b       	sbis	0x0e, 7	; 14
    50de:	fe cf       	rjmp	.-4      	; 0x50dc <rcvr_datablock+0x42>
    50e0:	9f b1       	in	r25, 0x0f	; 15
    50e2:	11 96       	adiw	r26, 0x01	; 1
    50e4:	9c 93       	st	X, r25
    50e6:	11 97       	sbiw	r26, 0x01	; 1
		rcvr_spi_m(buff++);
    50e8:	8f b9       	out	0x0f, r24	; 15
    50ea:	77 9b       	sbis	0x0e, 7	; 14
    50ec:	fe cf       	rjmp	.-4      	; 0x50ea <rcvr_datablock+0x50>
    50ee:	9f b1       	in	r25, 0x0f	; 15
    50f0:	12 96       	adiw	r26, 0x02	; 2
    50f2:	9c 93       	st	X, r25
    50f4:	12 97       	sbiw	r26, 0x02	; 2
		rcvr_spi_m(buff++);
    50f6:	8f b9       	out	0x0f, r24	; 15
    50f8:	77 9b       	sbis	0x0e, 7	; 14
    50fa:	fe cf       	rjmp	.-4      	; 0x50f8 <rcvr_datablock+0x5e>
    50fc:	9f b1       	in	r25, 0x0f	; 15
    50fe:	13 96       	adiw	r26, 0x03	; 3
    5100:	9c 93       	st	X, r25
	} while (btr -= 4);
    5102:	24 97       	sbiw	r28, 0x04	; 4
    5104:	34 96       	adiw	r30, 0x04	; 4
    5106:	20 97       	sbiw	r28, 0x00	; 0
    5108:	11 f7       	brne	.-60     	; 0x50ce <rcvr_datablock+0x34>
	rcvr_spi();						/* Discard CRC */
    510a:	0e 94 1f 28 	call	0x503e	; 0x503e <rcvr_spi>
	rcvr_spi();
    510e:	0e 94 1f 28 	call	0x503e	; 0x503e <rcvr_spi>

	return 1;						/* Return with success */
    5112:	81 e0       	ldi	r24, 0x01	; 1
    5114:	90 e0       	ldi	r25, 0x00	; 0
    5116:	02 c0       	rjmp	.+4      	; 0x511c <rcvr_datablock+0x82>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
    5118:	80 e0       	ldi	r24, 0x00	; 0
    511a:	90 e0       	ldi	r25, 0x00	; 0
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return 1;						/* Return with success */
}
    511c:	df 91       	pop	r29
    511e:	cf 91       	pop	r28
    5120:	1f 91       	pop	r17
    5122:	0f 91       	pop	r16
    5124:	08 95       	ret

00005126 <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    5126:	0f 93       	push	r16
    5128:	1f 93       	push	r17
    512a:	cf 93       	push	r28
    512c:	8c 01       	movw	r16, r24
    512e:	c6 2f       	mov	r28, r22
	BYTE resp, wc;


	if (!wait_ready()) return 0;
    5130:	0e 94 25 28 	call	0x504a	; 0x504a <wait_ready>
    5134:	00 97       	sbiw	r24, 0x00	; 0
    5136:	59 f1       	breq	.+86     	; 0x518e <xmit_datablock+0x68>

	xmit_spi(token);					/* Xmit data token */
    5138:	cf b9       	out	0x0f, r28	; 15
    513a:	77 9b       	sbis	0x0e, 7	; 14
    513c:	fe cf       	rjmp	.-4      	; 0x513a <xmit_datablock+0x14>
	if (token != 0xFD) {	/* Is data token */
    513e:	cd 3f       	cpi	r28, 0xFD	; 253
    5140:	21 f1       	breq	.+72     	; 0x518a <xmit_datablock+0x64>
    5142:	f8 01       	movw	r30, r16
    5144:	98 01       	movw	r18, r16
    5146:	3e 5f       	subi	r19, 0xFE	; 254
    5148:	df 01       	movw	r26, r30
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
    514a:	80 81       	ld	r24, Z
    514c:	8f b9       	out	0x0f, r24	; 15
    514e:	77 9b       	sbis	0x0e, 7	; 14
    5150:	fe cf       	rjmp	.-4      	; 0x514e <xmit_datablock+0x28>
			xmit_spi(*buff++);
    5152:	11 96       	adiw	r26, 0x01	; 1
    5154:	8c 91       	ld	r24, X
    5156:	8f b9       	out	0x0f, r24	; 15
    5158:	77 9b       	sbis	0x0e, 7	; 14
    515a:	fe cf       	rjmp	.-4      	; 0x5158 <xmit_datablock+0x32>
    515c:	32 96       	adiw	r30, 0x02	; 2
		} while (--wc);
    515e:	e2 17       	cp	r30, r18
    5160:	f3 07       	cpc	r31, r19
    5162:	91 f7       	brne	.-28     	; 0x5148 <xmit_datablock+0x22>
		xmit_spi(0xFF);					/* CRC (Dummy) */
    5164:	8f ef       	ldi	r24, 0xFF	; 255
    5166:	8f b9       	out	0x0f, r24	; 15
    5168:	77 9b       	sbis	0x0e, 7	; 14
    516a:	fe cf       	rjmp	.-4      	; 0x5168 <xmit_datablock+0x42>
		xmit_spi(0xFF);
    516c:	8f ef       	ldi	r24, 0xFF	; 255
    516e:	8f b9       	out	0x0f, r24	; 15
    5170:	77 9b       	sbis	0x0e, 7	; 14
    5172:	fe cf       	rjmp	.-4      	; 0x5170 <xmit_datablock+0x4a>
		resp = rcvr_spi();				/* Reveive data response */
    5174:	0e 94 1f 28 	call	0x503e	; 0x503e <rcvr_spi>
)
{
	BYTE resp, wc;


	if (!wait_ready()) return 0;
    5178:	8f 71       	andi	r24, 0x1F	; 31
    517a:	31 e0       	ldi	r19, 0x01	; 1
    517c:	20 e0       	ldi	r18, 0x00	; 0
    517e:	85 30       	cpi	r24, 0x05	; 5
    5180:	09 f0       	breq	.+2      	; 0x5184 <xmit_datablock+0x5e>
    5182:	30 e0       	ldi	r19, 0x00	; 0
    5184:	83 2f       	mov	r24, r19
    5186:	92 2f       	mov	r25, r18
    5188:	02 c0       	rjmp	.+4      	; 0x518e <xmit_datablock+0x68>
		resp = rcvr_spi();				/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
    518a:	81 e0       	ldi	r24, 0x01	; 1
    518c:	90 e0       	ldi	r25, 0x00	; 0
}
    518e:	cf 91       	pop	r28
    5190:	1f 91       	pop	r17
    5192:	0f 91       	pop	r16
    5194:	08 95       	ret

00005196 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    5196:	cf 92       	push	r12
    5198:	df 92       	push	r13
    519a:	ef 92       	push	r14
    519c:	ff 92       	push	r15
    519e:	cf 93       	push	r28
    51a0:	c8 2f       	mov	r28, r24
    51a2:	6a 01       	movw	r12, r20
    51a4:	7b 01       	movw	r14, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    51a6:	88 23       	and	r24, r24
    51a8:	4c f4       	brge	.+18     	; 0x51bc <send_cmd+0x26>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    51aa:	40 e0       	ldi	r20, 0x00	; 0
    51ac:	50 e0       	ldi	r21, 0x00	; 0
    51ae:	ba 01       	movw	r22, r20
    51b0:	87 e3       	ldi	r24, 0x37	; 55
    51b2:	0e 94 cb 28 	call	0x5196	; 0x5196 <send_cmd>
		if (res > 1) return res;
    51b6:	82 30       	cpi	r24, 0x02	; 2
    51b8:	e0 f5       	brcc	.+120    	; 0x5232 <send_cmd+0x9c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    51ba:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
    51bc:	0e 94 38 28 	call	0x5070	; 0x5070 <deselect>
	if (!select()) return 0xFF;
    51c0:	0e 94 3c 28 	call	0x5078	; 0x5078 <select>
    51c4:	89 2b       	or	r24, r25
    51c6:	a1 f1       	breq	.+104    	; 0x5230 <send_cmd+0x9a>

	/* Send command packet */
	xmit_spi(0x40 | cmd);				/* Start + Command index */
    51c8:	8c 2f       	mov	r24, r28
    51ca:	80 64       	ori	r24, 0x40	; 64
    51cc:	8f b9       	out	0x0f, r24	; 15
    51ce:	77 9b       	sbis	0x0e, 7	; 14
    51d0:	fe cf       	rjmp	.-4      	; 0x51ce <send_cmd+0x38>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    51d2:	8f 2d       	mov	r24, r15
    51d4:	99 27       	eor	r25, r25
    51d6:	aa 27       	eor	r26, r26
    51d8:	bb 27       	eor	r27, r27
    51da:	8f b9       	out	0x0f, r24	; 15
    51dc:	77 9b       	sbis	0x0e, 7	; 14
    51de:	fe cf       	rjmp	.-4      	; 0x51dc <send_cmd+0x46>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    51e0:	c7 01       	movw	r24, r14
    51e2:	aa 27       	eor	r26, r26
    51e4:	bb 27       	eor	r27, r27
    51e6:	8f b9       	out	0x0f, r24	; 15
    51e8:	77 9b       	sbis	0x0e, 7	; 14
    51ea:	fe cf       	rjmp	.-4      	; 0x51e8 <send_cmd+0x52>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    51ec:	bb 27       	eor	r27, r27
    51ee:	af 2d       	mov	r26, r15
    51f0:	9e 2d       	mov	r25, r14
    51f2:	8d 2d       	mov	r24, r13
    51f4:	8f b9       	out	0x0f, r24	; 15
    51f6:	77 9b       	sbis	0x0e, 7	; 14
    51f8:	fe cf       	rjmp	.-4      	; 0x51f6 <send_cmd+0x60>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    51fa:	cf b8       	out	0x0f, r12	; 15
    51fc:	77 9b       	sbis	0x0e, 7	; 14
    51fe:	fe cf       	rjmp	.-4      	; 0x51fc <send_cmd+0x66>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    5200:	cc 23       	and	r28, r28
    5202:	21 f0       	breq	.+8      	; 0x520c <send_cmd+0x76>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    5204:	c8 30       	cpi	r28, 0x08	; 8
    5206:	21 f4       	brne	.+8      	; 0x5210 <send_cmd+0x7a>
    5208:	87 e8       	ldi	r24, 0x87	; 135
    520a:	03 c0       	rjmp	.+6      	; 0x5212 <send_cmd+0x7c>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    520c:	85 e9       	ldi	r24, 0x95	; 149
    520e:	01 c0       	rjmp	.+2      	; 0x5212 <send_cmd+0x7c>
	xmit_spi(0x40 | cmd);				/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
    5210:	81 e0       	ldi	r24, 0x01	; 1
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
	xmit_spi(n);
    5212:	8f b9       	out	0x0f, r24	; 15
    5214:	77 9b       	sbis	0x0e, 7	; 14
    5216:	fe cf       	rjmp	.-4      	; 0x5214 <send_cmd+0x7e>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
    5218:	cc 30       	cpi	r28, 0x0C	; 12
    521a:	11 f4       	brne	.+4      	; 0x5220 <send_cmd+0x8a>
    521c:	0e 94 1f 28 	call	0x503e	; 0x503e <rcvr_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    5220:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
    5222:	0e 94 1f 28 	call	0x503e	; 0x503e <rcvr_spi>
	while ((res & 0x80) && --n);
    5226:	88 23       	and	r24, r24
    5228:	24 f4       	brge	.+8      	; 0x5232 <send_cmd+0x9c>
    522a:	c1 50       	subi	r28, 0x01	; 1
    522c:	d1 f7       	brne	.-12     	; 0x5222 <send_cmd+0x8c>
    522e:	01 c0       	rjmp	.+2      	; 0x5232 <send_cmd+0x9c>
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
    5230:	8f ef       	ldi	r24, 0xFF	; 255
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    5232:	cf 91       	pop	r28
    5234:	ff 90       	pop	r15
    5236:	ef 90       	pop	r14
    5238:	df 90       	pop	r13
    523a:	cf 90       	pop	r12
    523c:	08 95       	ret

0000523e <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    523e:	cf 92       	push	r12
    5240:	df 92       	push	r13
    5242:	ef 92       	push	r14
    5244:	ff 92       	push	r15
    5246:	0f 93       	push	r16
    5248:	1f 93       	push	r17
    524a:	cf 93       	push	r28
    524c:	df 93       	push	r29
    524e:	00 d0       	rcall	.+0      	; 0x5250 <disk_initialize+0x12>
    5250:	00 d0       	rcall	.+0      	; 0x5252 <disk_initialize+0x14>
    5252:	cd b7       	in	r28, 0x3d	; 61
    5254:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    5256:	81 11       	cpse	r24, r1
    5258:	99 c0       	rjmp	.+306    	; 0x538c <disk_initialize+0x14e>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    525a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    525e:	81 ff       	sbrs	r24, 1
    5260:	03 c0       	rjmp	.+6      	; 0x5268 <disk_initialize+0x2a>
    5262:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    5266:	9f c0       	rjmp	.+318    	; 0x53a6 <disk_initialize+0x168>

	power_on();							/* Force socket power on */
	FCLK_SLOW();
    5268:	69 9a       	sbi	0x0d, 1	; 13
    526a:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
    526c:	0e 94 1f 28 	call	0x503e	; 0x503e <rcvr_spi>
    5270:	11 50       	subi	r17, 0x01	; 1
    5272:	e1 f7       	brne	.-8      	; 0x526c <disk_initialize+0x2e>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    5274:	40 e0       	ldi	r20, 0x00	; 0
    5276:	50 e0       	ldi	r21, 0x00	; 0
    5278:	ba 01       	movw	r22, r20
    527a:	80 e0       	ldi	r24, 0x00	; 0
    527c:	0e 94 cb 28 	call	0x5196	; 0x5196 <send_cmd>
    5280:	81 30       	cpi	r24, 0x01	; 1
    5282:	09 f0       	breq	.+2      	; 0x5286 <disk_initialize+0x48>
    5284:	8b c0       	rjmp	.+278    	; 0x539c <disk_initialize+0x15e>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    5286:	84 e6       	ldi	r24, 0x64	; 100
    5288:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <Timer1>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    528c:	4a ea       	ldi	r20, 0xAA	; 170
    528e:	51 e0       	ldi	r21, 0x01	; 1
    5290:	60 e0       	ldi	r22, 0x00	; 0
    5292:	70 e0       	ldi	r23, 0x00	; 0
    5294:	88 e0       	ldi	r24, 0x08	; 8
    5296:	0e 94 cb 28 	call	0x5196	; 0x5196 <send_cmd>
    529a:	81 30       	cpi	r24, 0x01	; 1
    529c:	09 f0       	breq	.+2      	; 0x52a0 <disk_initialize+0x62>
    529e:	3f c0       	rjmp	.+126    	; 0x531e <disk_initialize+0xe0>
    52a0:	ce 01       	movw	r24, r28
    52a2:	01 96       	adiw	r24, 0x01	; 1
    52a4:	6c 01       	movw	r12, r24
    52a6:	7e 01       	movw	r14, r28
    52a8:	95 e0       	ldi	r25, 0x05	; 5
    52aa:	e9 0e       	add	r14, r25
    52ac:	f1 1c       	adc	r15, r1
    52ae:	86 01       	movw	r16, r12
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
    52b0:	0e 94 1f 28 	call	0x503e	; 0x503e <rcvr_spi>
    52b4:	f8 01       	movw	r30, r16
    52b6:	81 93       	st	Z+, r24
    52b8:	8f 01       	movw	r16, r30
    52ba:	ee 16       	cp	r14, r30
    52bc:	ff 06       	cpc	r15, r31
    52be:	c1 f7       	brne	.-16     	; 0x52b0 <disk_initialize+0x72>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    52c0:	8b 81       	ldd	r24, Y+3	; 0x03
    52c2:	81 30       	cpi	r24, 0x01	; 1
    52c4:	09 f0       	breq	.+2      	; 0x52c8 <disk_initialize+0x8a>
    52c6:	6a c0       	rjmp	.+212    	; 0x539c <disk_initialize+0x15e>
    52c8:	8c 81       	ldd	r24, Y+4	; 0x04
    52ca:	8a 3a       	cpi	r24, 0xAA	; 170
    52cc:	09 f0       	breq	.+2      	; 0x52d0 <disk_initialize+0x92>
    52ce:	66 c0       	rjmp	.+204    	; 0x539c <disk_initialize+0x15e>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    52d0:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Timer1>
    52d4:	88 23       	and	r24, r24
    52d6:	49 f0       	breq	.+18     	; 0x52ea <disk_initialize+0xac>
    52d8:	40 e0       	ldi	r20, 0x00	; 0
    52da:	50 e0       	ldi	r21, 0x00	; 0
    52dc:	60 e0       	ldi	r22, 0x00	; 0
    52de:	70 e4       	ldi	r23, 0x40	; 64
    52e0:	89 ea       	ldi	r24, 0xA9	; 169
    52e2:	0e 94 cb 28 	call	0x5196	; 0x5196 <send_cmd>
    52e6:	81 11       	cpse	r24, r1
    52e8:	f3 cf       	rjmp	.-26     	; 0x52d0 <disk_initialize+0x92>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    52ea:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Timer1>
    52ee:	88 23       	and	r24, r24
    52f0:	09 f4       	brne	.+2      	; 0x52f4 <disk_initialize+0xb6>
    52f2:	54 c0       	rjmp	.+168    	; 0x539c <disk_initialize+0x15e>
    52f4:	40 e0       	ldi	r20, 0x00	; 0
    52f6:	50 e0       	ldi	r21, 0x00	; 0
    52f8:	ba 01       	movw	r22, r20
    52fa:	8a e3       	ldi	r24, 0x3A	; 58
    52fc:	0e 94 cb 28 	call	0x5196	; 0x5196 <send_cmd>
    5300:	81 11       	cpse	r24, r1
    5302:	4c c0       	rjmp	.+152    	; 0x539c <disk_initialize+0x15e>
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
    5304:	0e 94 1f 28 	call	0x503e	; 0x503e <rcvr_spi>
    5308:	f6 01       	movw	r30, r12
    530a:	81 93       	st	Z+, r24
    530c:	6f 01       	movw	r12, r30
    530e:	ee 16       	cp	r14, r30
    5310:	ff 06       	cpc	r15, r31
    5312:	c1 f7       	brne	.-16     	; 0x5304 <disk_initialize+0xc6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    5314:	89 81       	ldd	r24, Y+1	; 0x01
    5316:	86 fd       	sbrc	r24, 6
    5318:	3b c0       	rjmp	.+118    	; 0x5390 <disk_initialize+0x152>
    531a:	84 e0       	ldi	r24, 0x04	; 4
    531c:	3a c0       	rjmp	.+116    	; 0x5392 <disk_initialize+0x154>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    531e:	40 e0       	ldi	r20, 0x00	; 0
    5320:	50 e0       	ldi	r21, 0x00	; 0
    5322:	ba 01       	movw	r22, r20
    5324:	89 ea       	ldi	r24, 0xA9	; 169
    5326:	0e 94 cb 28 	call	0x5196	; 0x5196 <send_cmd>
    532a:	82 30       	cpi	r24, 0x02	; 2
    532c:	18 f0       	brcs	.+6      	; 0x5334 <disk_initialize+0xf6>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    532e:	01 e0       	ldi	r16, 0x01	; 1
    5330:	11 e0       	ldi	r17, 0x01	; 1
    5332:	02 c0       	rjmp	.+4      	; 0x5338 <disk_initialize+0xfa>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    5334:	02 e0       	ldi	r16, 0x02	; 2
    5336:	19 ea       	ldi	r17, 0xA9	; 169
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    5338:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Timer1>
    533c:	88 23       	and	r24, r24
    533e:	41 f0       	breq	.+16     	; 0x5350 <disk_initialize+0x112>
    5340:	40 e0       	ldi	r20, 0x00	; 0
    5342:	50 e0       	ldi	r21, 0x00	; 0
    5344:	ba 01       	movw	r22, r20
    5346:	81 2f       	mov	r24, r17
    5348:	0e 94 cb 28 	call	0x5196	; 0x5196 <send_cmd>
    534c:	81 11       	cpse	r24, r1
    534e:	f4 cf       	rjmp	.-24     	; 0x5338 <disk_initialize+0xfa>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    5350:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Timer1>
    5354:	88 23       	and	r24, r24
    5356:	11 f1       	breq	.+68     	; 0x539c <disk_initialize+0x15e>
    5358:	40 e0       	ldi	r20, 0x00	; 0
    535a:	52 e0       	ldi	r21, 0x02	; 2
    535c:	60 e0       	ldi	r22, 0x00	; 0
    535e:	70 e0       	ldi	r23, 0x00	; 0
    5360:	80 e1       	ldi	r24, 0x10	; 16
    5362:	0e 94 cb 28 	call	0x5196	; 0x5196 <send_cmd>
    5366:	81 11       	cpse	r24, r1
    5368:	19 c0       	rjmp	.+50     	; 0x539c <disk_initialize+0x15e>
				ty = 0;
		}
	}
	//blinkWhiteLEDnrazy(ty);
	CardType = ty;
    536a:	00 93 a6 01 	sts	0x01A6, r16	; 0x8001a6 <CardType>
	deselect();
    536e:	0e 94 38 28 	call	0x5070	; 0x5070 <deselect>

	if (ty) {			/* Initialization succeded */
    5372:	00 23       	and	r16, r16
    5374:	41 f0       	breq	.+16     	; 0x5386 <disk_initialize+0x148>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    5376:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    537a:	8e 7f       	andi	r24, 0xFE	; 254
    537c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Stat>
		FCLK_FAST();
    5380:	8d b1       	in	r24, 0x0d	; 13
    5382:	8c 7f       	andi	r24, 0xFC	; 252
    5384:	8d b9       	out	0x0d, r24	; 13
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
    5386:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    538a:	0d c0       	rjmp	.+26     	; 0x53a6 <disk_initialize+0x168>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    538c:	81 e0       	ldi	r24, 0x01	; 1
    538e:	0b c0       	rjmp	.+22     	; 0x53a6 <disk_initialize+0x168>
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    5390:	8c e0       	ldi	r24, 0x0C	; 12
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	//blinkWhiteLEDnrazy(ty);
	CardType = ty;
    5392:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <CardType>
	deselect();
    5396:	0e 94 38 28 	call	0x5070	; 0x5070 <deselect>
    539a:	ed cf       	rjmp	.-38     	; 0x5376 <disk_initialize+0x138>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	//blinkWhiteLEDnrazy(ty);
	CardType = ty;
    539c:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <CardType>
	deselect();
    53a0:	0e 94 38 28 	call	0x5070	; 0x5070 <deselect>
    53a4:	f0 cf       	rjmp	.-32     	; 0x5386 <disk_initialize+0x148>
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    53a6:	0f 90       	pop	r0
    53a8:	0f 90       	pop	r0
    53aa:	0f 90       	pop	r0
    53ac:	0f 90       	pop	r0
    53ae:	df 91       	pop	r29
    53b0:	cf 91       	pop	r28
    53b2:	1f 91       	pop	r17
    53b4:	0f 91       	pop	r16
    53b6:	ff 90       	pop	r15
    53b8:	ef 90       	pop	r14
    53ba:	df 90       	pop	r13
    53bc:	cf 90       	pop	r12
    53be:	08 95       	ret

000053c0 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    53c0:	81 11       	cpse	r24, r1
    53c2:	03 c0       	rjmp	.+6      	; 0x53ca <disk_status+0xa>
	return Stat;
    53c4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    53c8:	08 95       	ret

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    53ca:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    53cc:	08 95       	ret

000053ce <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    53ce:	0f 93       	push	r16
    53d0:	cf 93       	push	r28
    53d2:	df 93       	push	r29
    53d4:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
    53d6:	81 11       	cpse	r24, r1
    53d8:	44 c0       	rjmp	.+136    	; 0x5462 <disk_read+0x94>
    53da:	00 23       	and	r16, r16
    53dc:	09 f4       	brne	.+2      	; 0x53e0 <disk_read+0x12>
    53de:	43 c0       	rjmp	.+134    	; 0x5466 <disk_read+0x98>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    53e0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    53e4:	80 fd       	sbrc	r24, 0
    53e6:	41 c0       	rjmp	.+130    	; 0x546a <disk_read+0x9c>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    53e8:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <CardType>
    53ec:	83 fd       	sbrc	r24, 3
    53ee:	09 c0       	rjmp	.+18     	; 0x5402 <disk_read+0x34>
    53f0:	01 2e       	mov	r0, r17
    53f2:	19 e0       	ldi	r17, 0x09	; 9
    53f4:	22 0f       	add	r18, r18
    53f6:	33 1f       	adc	r19, r19
    53f8:	44 1f       	adc	r20, r20
    53fa:	55 1f       	adc	r21, r21
    53fc:	1a 95       	dec	r17
    53fe:	d1 f7       	brne	.-12     	; 0x53f4 <disk_read+0x26>
    5400:	10 2d       	mov	r17, r0

	if (count == 1) {	/* Single block read */
    5402:	01 30       	cpi	r16, 0x01	; 1
    5404:	81 f4       	brne	.+32     	; 0x5426 <disk_read+0x58>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
    5406:	ba 01       	movw	r22, r20
    5408:	a9 01       	movw	r20, r18
    540a:	81 e1       	ldi	r24, 0x11	; 17
    540c:	0e 94 cb 28 	call	0x5196	; 0x5196 <send_cmd>
    5410:	81 11       	cpse	r24, r1
    5412:	20 c0       	rjmp	.+64     	; 0x5454 <disk_read+0x86>
			&& rcvr_datablock(buff, 512))
    5414:	60 e0       	ldi	r22, 0x00	; 0
    5416:	72 e0       	ldi	r23, 0x02	; 2
    5418:	ce 01       	movw	r24, r28
    541a:	0e 94 4d 28 	call	0x509a	; 0x509a <rcvr_datablock>
    541e:	89 2b       	or	r24, r25
    5420:	c9 f0       	breq	.+50     	; 0x5454 <disk_read+0x86>
    5422:	00 e0       	ldi	r16, 0x00	; 0
    5424:	17 c0       	rjmp	.+46     	; 0x5454 <disk_read+0x86>
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
    5426:	ba 01       	movw	r22, r20
    5428:	a9 01       	movw	r20, r18
    542a:	82 e1       	ldi	r24, 0x12	; 18
    542c:	0e 94 cb 28 	call	0x5196	; 0x5196 <send_cmd>
    5430:	81 11       	cpse	r24, r1
    5432:	10 c0       	rjmp	.+32     	; 0x5454 <disk_read+0x86>
			do {
				if (!rcvr_datablock(buff, 512)) break;
    5434:	60 e0       	ldi	r22, 0x00	; 0
    5436:	72 e0       	ldi	r23, 0x02	; 2
    5438:	ce 01       	movw	r24, r28
    543a:	0e 94 4d 28 	call	0x509a	; 0x509a <rcvr_datablock>
    543e:	89 2b       	or	r24, r25
    5440:	19 f0       	breq	.+6      	; 0x5448 <disk_read+0x7a>
				buff += 512;
    5442:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    5444:	01 50       	subi	r16, 0x01	; 1
    5446:	b1 f7       	brne	.-20     	; 0x5434 <disk_read+0x66>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
    5448:	40 e0       	ldi	r20, 0x00	; 0
    544a:	50 e0       	ldi	r21, 0x00	; 0
    544c:	ba 01       	movw	r22, r20
    544e:	8c e0       	ldi	r24, 0x0C	; 12
    5450:	0e 94 cb 28 	call	0x5196	; 0x5196 <send_cmd>
		}
	}
	deselect();
    5454:	0e 94 38 28 	call	0x5070	; 0x5070 <deselect>

	return count ? RES_ERROR : RES_OK;
    5458:	81 e0       	ldi	r24, 0x01	; 1
    545a:	01 11       	cpse	r16, r1
    545c:	07 c0       	rjmp	.+14     	; 0x546c <disk_read+0x9e>
    545e:	80 e0       	ldi	r24, 0x00	; 0
    5460:	05 c0       	rjmp	.+10     	; 0x546c <disk_read+0x9e>
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
    5462:	84 e0       	ldi	r24, 0x04	; 4
    5464:	03 c0       	rjmp	.+6      	; 0x546c <disk_read+0x9e>
    5466:	84 e0       	ldi	r24, 0x04	; 4
    5468:	01 c0       	rjmp	.+2      	; 0x546c <disk_read+0x9e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    546a:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    546c:	df 91       	pop	r29
    546e:	cf 91       	pop	r28
    5470:	0f 91       	pop	r16
    5472:	08 95       	ret

00005474 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    5474:	cf 92       	push	r12
    5476:	df 92       	push	r13
    5478:	ef 92       	push	r14
    547a:	ff 92       	push	r15
    547c:	0f 93       	push	r16
    547e:	cf 93       	push	r28
    5480:	df 93       	push	r29
    5482:	eb 01       	movw	r28, r22
    5484:	69 01       	movw	r12, r18
    5486:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
    5488:	81 11       	cpse	r24, r1
    548a:	51 c0       	rjmp	.+162    	; 0x552e <disk_write+0xba>
    548c:	00 23       	and	r16, r16
    548e:	09 f4       	brne	.+2      	; 0x5492 <disk_write+0x1e>
    5490:	50 c0       	rjmp	.+160    	; 0x5532 <disk_write+0xbe>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    5492:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    5496:	80 fd       	sbrc	r24, 0
    5498:	4e c0       	rjmp	.+156    	; 0x5536 <disk_write+0xc2>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    549a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    549e:	82 fd       	sbrc	r24, 2
    54a0:	4c c0       	rjmp	.+152    	; 0x553a <disk_write+0xc6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    54a2:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <CardType>
    54a6:	83 fd       	sbrc	r24, 3
    54a8:	09 c0       	rjmp	.+18     	; 0x54bc <disk_write+0x48>
    54aa:	0b 2e       	mov	r0, r27
    54ac:	b9 e0       	ldi	r27, 0x09	; 9
    54ae:	cc 0c       	add	r12, r12
    54b0:	dd 1c       	adc	r13, r13
    54b2:	ee 1c       	adc	r14, r14
    54b4:	ff 1c       	adc	r15, r15
    54b6:	ba 95       	dec	r27
    54b8:	d1 f7       	brne	.-12     	; 0x54ae <disk_write+0x3a>
    54ba:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    54bc:	01 30       	cpi	r16, 0x01	; 1
    54be:	79 f4       	brne	.+30     	; 0x54de <disk_write+0x6a>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    54c0:	b7 01       	movw	r22, r14
    54c2:	a6 01       	movw	r20, r12
    54c4:	88 e1       	ldi	r24, 0x18	; 24
    54c6:	0e 94 cb 28 	call	0x5196	; 0x5196 <send_cmd>
    54ca:	81 11       	cpse	r24, r1
    54cc:	29 c0       	rjmp	.+82     	; 0x5520 <disk_write+0xac>
			&& xmit_datablock(buff, 0xFE))
    54ce:	6e ef       	ldi	r22, 0xFE	; 254
    54d0:	ce 01       	movw	r24, r28
    54d2:	0e 94 93 28 	call	0x5126	; 0x5126 <xmit_datablock>
    54d6:	89 2b       	or	r24, r25
    54d8:	19 f1       	breq	.+70     	; 0x5520 <disk_write+0xac>
    54da:	00 e0       	ldi	r16, 0x00	; 0
    54dc:	21 c0       	rjmp	.+66     	; 0x5520 <disk_write+0xac>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    54de:	86 70       	andi	r24, 0x06	; 6
    54e0:	39 f0       	breq	.+14     	; 0x54f0 <disk_write+0x7c>
    54e2:	40 2f       	mov	r20, r16
    54e4:	50 e0       	ldi	r21, 0x00	; 0
    54e6:	60 e0       	ldi	r22, 0x00	; 0
    54e8:	70 e0       	ldi	r23, 0x00	; 0
    54ea:	87 e9       	ldi	r24, 0x97	; 151
    54ec:	0e 94 cb 28 	call	0x5196	; 0x5196 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    54f0:	b7 01       	movw	r22, r14
    54f2:	a6 01       	movw	r20, r12
    54f4:	89 e1       	ldi	r24, 0x19	; 25
    54f6:	0e 94 cb 28 	call	0x5196	; 0x5196 <send_cmd>
    54fa:	81 11       	cpse	r24, r1
    54fc:	11 c0       	rjmp	.+34     	; 0x5520 <disk_write+0xac>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    54fe:	6c ef       	ldi	r22, 0xFC	; 252
    5500:	ce 01       	movw	r24, r28
    5502:	0e 94 93 28 	call	0x5126	; 0x5126 <xmit_datablock>
    5506:	89 2b       	or	r24, r25
    5508:	19 f0       	breq	.+6      	; 0x5510 <disk_write+0x9c>
				buff += 512;
    550a:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    550c:	01 50       	subi	r16, 0x01	; 1
    550e:	b9 f7       	brne	.-18     	; 0x54fe <disk_write+0x8a>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    5510:	6d ef       	ldi	r22, 0xFD	; 253
    5512:	80 e0       	ldi	r24, 0x00	; 0
    5514:	90 e0       	ldi	r25, 0x00	; 0
    5516:	0e 94 93 28 	call	0x5126	; 0x5126 <xmit_datablock>
    551a:	89 2b       	or	r24, r25
    551c:	09 f4       	brne	.+2      	; 0x5520 <disk_write+0xac>
				count = 1;
    551e:	01 e0       	ldi	r16, 0x01	; 1
		}
	}
	deselect();
    5520:	0e 94 38 28 	call	0x5070	; 0x5070 <deselect>

	return count ? RES_ERROR : RES_OK;
    5524:	81 e0       	ldi	r24, 0x01	; 1
    5526:	01 11       	cpse	r16, r1
    5528:	09 c0       	rjmp	.+18     	; 0x553c <disk_write+0xc8>
    552a:	80 e0       	ldi	r24, 0x00	; 0
    552c:	07 c0       	rjmp	.+14     	; 0x553c <disk_write+0xc8>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
    552e:	84 e0       	ldi	r24, 0x04	; 4
    5530:	05 c0       	rjmp	.+10     	; 0x553c <disk_write+0xc8>
    5532:	84 e0       	ldi	r24, 0x04	; 4
    5534:	03 c0       	rjmp	.+6      	; 0x553c <disk_write+0xc8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    5536:	83 e0       	ldi	r24, 0x03	; 3
    5538:	01 c0       	rjmp	.+2      	; 0x553c <disk_write+0xc8>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    553a:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    553c:	df 91       	pop	r29
    553e:	cf 91       	pop	r28
    5540:	0f 91       	pop	r16
    5542:	ff 90       	pop	r15
    5544:	ef 90       	pop	r14
    5546:	df 90       	pop	r13
    5548:	cf 90       	pop	r12
    554a:	08 95       	ret

0000554c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    554c:	ef 92       	push	r14
    554e:	ff 92       	push	r15
    5550:	0f 93       	push	r16
    5552:	1f 93       	push	r17
    5554:	cf 93       	push	r28
    5556:	df 93       	push	r29
    5558:	cd b7       	in	r28, 0x3d	; 61
    555a:	de b7       	in	r29, 0x3e	; 62
    555c:	60 97       	sbiw	r28, 0x10	; 16
    555e:	0f b6       	in	r0, 0x3f	; 63
    5560:	f8 94       	cli
    5562:	de bf       	out	0x3e, r29	; 62
    5564:	0f be       	out	0x3f, r0	; 63
    5566:	cd bf       	out	0x3d, r28	; 61
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
    5568:	81 11       	cpse	r24, r1
    556a:	96 c1       	rjmp	.+812    	; 0x5898 <disk_ioctl+0x34c>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
    556c:	65 30       	cpi	r22, 0x05	; 5
    556e:	71 f4       	brne	.+28     	; 0x558c <disk_ioctl+0x40>
		switch (ptr[0]) {
    5570:	fa 01       	movw	r30, r20
    5572:	80 81       	ld	r24, Z
    5574:	88 23       	and	r24, r24
    5576:	19 f0       	breq	.+6      	; 0x557e <disk_ioctl+0x32>
    5578:	81 30       	cpi	r24, 0x01	; 1
    557a:	19 f0       	breq	.+6      	; 0x5582 <disk_ioctl+0x36>
    557c:	8f c1       	rjmp	.+798    	; 0x589c <disk_ioctl+0x350>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
			res = RES_OK;
    557e:	80 e0       	ldi	r24, 0x00	; 0
    5580:	90 c1       	rjmp	.+800    	; 0x58a2 <disk_ioctl+0x356>
			break;
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
    5582:	81 e0       	ldi	r24, 0x01	; 1
    5584:	fa 01       	movw	r30, r20
    5586:	81 83       	std	Z+1, r24	; 0x01
			res = RES_OK;
    5588:	80 e0       	ldi	r24, 0x00	; 0
			break;
    558a:	8b c1       	rjmp	.+790    	; 0x58a2 <disk_ioctl+0x356>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    558c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    5590:	80 fd       	sbrc	r24, 0
    5592:	86 c1       	rjmp	.+780    	; 0x58a0 <disk_ioctl+0x354>
    5594:	8a 01       	movw	r16, r20

		switch (ctrl) {
    5596:	86 2f       	mov	r24, r22
    5598:	90 e0       	ldi	r25, 0x00	; 0
    559a:	8f 30       	cpi	r24, 0x0F	; 15
    559c:	91 05       	cpc	r25, r1
    559e:	08 f0       	brcs	.+2      	; 0x55a2 <disk_ioctl+0x56>
    55a0:	60 c1       	rjmp	.+704    	; 0x5862 <disk_ioctl+0x316>
    55a2:	fc 01       	movw	r30, r24
    55a4:	ec 54       	subi	r30, 0x4C	; 76
    55a6:	ff 4f       	sbci	r31, 0xFF	; 255
    55a8:	0c 94 61 36 	jmp	0x6cc2	; 0x6cc2 <__tablejump2__>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
    55ac:	0e 94 3c 28 	call	0x5078	; 0x5078 <select>
    55b0:	89 2b       	or	r24, r25
    55b2:	09 f4       	brne	.+2      	; 0x55b6 <disk_ioctl+0x6a>
    55b4:	58 c1       	rjmp	.+688    	; 0x5866 <disk_ioctl+0x31a>
				deselect();
    55b6:	0e 94 38 28 	call	0x5070	; 0x5070 <deselect>
				res = RES_OK;
    55ba:	10 e0       	ldi	r17, 0x00	; 0
    55bc:	69 c1       	rjmp	.+722    	; 0x5890 <disk_ioctl+0x344>
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    55be:	40 e0       	ldi	r20, 0x00	; 0
    55c0:	50 e0       	ldi	r21, 0x00	; 0
    55c2:	ba 01       	movw	r22, r20
    55c4:	89 e0       	ldi	r24, 0x09	; 9
    55c6:	0e 94 cb 28 	call	0x5196	; 0x5196 <send_cmd>
    55ca:	81 11       	cpse	r24, r1
    55cc:	4e c1       	rjmp	.+668    	; 0x586a <disk_ioctl+0x31e>
    55ce:	60 e1       	ldi	r22, 0x10	; 16
    55d0:	70 e0       	ldi	r23, 0x00	; 0
    55d2:	ce 01       	movw	r24, r28
    55d4:	01 96       	adiw	r24, 0x01	; 1
    55d6:	0e 94 4d 28 	call	0x509a	; 0x509a <rcvr_datablock>
    55da:	89 2b       	or	r24, r25
    55dc:	09 f4       	brne	.+2      	; 0x55e0 <disk_ioctl+0x94>
    55de:	47 c1       	rjmp	.+654    	; 0x586e <disk_ioctl+0x322>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    55e0:	89 81       	ldd	r24, Y+1	; 0x01
    55e2:	82 95       	swap	r24
    55e4:	86 95       	lsr	r24
    55e6:	86 95       	lsr	r24
    55e8:	83 70       	andi	r24, 0x03	; 3
    55ea:	81 30       	cpi	r24, 0x01	; 1
    55ec:	d9 f4       	brne	.+54     	; 0x5624 <disk_ioctl+0xd8>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
    55ee:	89 85       	ldd	r24, Y+9	; 0x09
    55f0:	90 e0       	ldi	r25, 0x00	; 0
    55f2:	38 2f       	mov	r19, r24
    55f4:	22 27       	eor	r18, r18
    55f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    55f8:	90 e0       	ldi	r25, 0x00	; 0
    55fa:	01 96       	adiw	r24, 0x01	; 1
    55fc:	82 0f       	add	r24, r18
    55fe:	93 1f       	adc	r25, r19
    5600:	a0 e0       	ldi	r26, 0x00	; 0
    5602:	b0 e0       	ldi	r27, 0x00	; 0
    5604:	07 2e       	mov	r0, r23
    5606:	7a e0       	ldi	r23, 0x0A	; 10
    5608:	88 0f       	add	r24, r24
    560a:	99 1f       	adc	r25, r25
    560c:	aa 1f       	adc	r26, r26
    560e:	bb 1f       	adc	r27, r27
    5610:	7a 95       	dec	r23
    5612:	d1 f7       	brne	.-12     	; 0x5608 <disk_ioctl+0xbc>
    5614:	70 2d       	mov	r23, r0
    5616:	f8 01       	movw	r30, r16
    5618:	80 83       	st	Z, r24
    561a:	91 83       	std	Z+1, r25	; 0x01
    561c:	a2 83       	std	Z+2, r26	; 0x02
    561e:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
				}
				res = RES_OK;
    5620:	10 e0       	ldi	r17, 0x00	; 0
    5622:	36 c1       	rjmp	.+620    	; 0x5890 <disk_ioctl+0x344>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
    5624:	29 85       	ldd	r18, Y+9	; 0x09
    5626:	22 95       	swap	r18
    5628:	26 95       	lsr	r18
    562a:	26 95       	lsr	r18
    562c:	23 70       	andi	r18, 0x03	; 3
    562e:	88 85       	ldd	r24, Y+8	; 0x08
    5630:	f4 e0       	ldi	r31, 0x04	; 4
    5632:	8f 9f       	mul	r24, r31
    5634:	c0 01       	movw	r24, r0
    5636:	11 24       	eor	r1, r1
    5638:	82 0f       	add	r24, r18
    563a:	91 1d       	adc	r25, r1
    563c:	9c 01       	movw	r18, r24
    563e:	2f 5f       	subi	r18, 0xFF	; 255
    5640:	3f 4f       	sbci	r19, 0xFF	; 255
    5642:	8f 81       	ldd	r24, Y+7	; 0x07
    5644:	83 70       	andi	r24, 0x03	; 3
    5646:	90 e0       	ldi	r25, 0x00	; 0
    5648:	98 2f       	mov	r25, r24
    564a:	88 27       	eor	r24, r24
    564c:	99 0f       	add	r25, r25
    564e:	99 0f       	add	r25, r25
    5650:	82 0f       	add	r24, r18
    5652:	93 1f       	adc	r25, r19
    5654:	a0 e0       	ldi	r26, 0x00	; 0
    5656:	b0 e0       	ldi	r27, 0x00	; 0
    5658:	3e 81       	ldd	r19, Y+6	; 0x06
    565a:	3f 70       	andi	r19, 0x0F	; 15
    565c:	2b 85       	ldd	r18, Y+11	; 0x0b
    565e:	22 1f       	adc	r18, r18
    5660:	22 27       	eor	r18, r18
    5662:	22 1f       	adc	r18, r18
    5664:	32 0f       	add	r19, r18
    5666:	2a 85       	ldd	r18, Y+10	; 0x0a
    5668:	23 70       	andi	r18, 0x03	; 3
    566a:	22 0f       	add	r18, r18
    566c:	23 0f       	add	r18, r19
    566e:	27 50       	subi	r18, 0x07	; 7
    5670:	04 c0       	rjmp	.+8      	; 0x567a <disk_ioctl+0x12e>
    5672:	88 0f       	add	r24, r24
    5674:	99 1f       	adc	r25, r25
    5676:	aa 1f       	adc	r26, r26
    5678:	bb 1f       	adc	r27, r27
    567a:	2a 95       	dec	r18
    567c:	d2 f7       	brpl	.-12     	; 0x5672 <disk_ioctl+0x126>
    567e:	f8 01       	movw	r30, r16
    5680:	80 83       	st	Z, r24
    5682:	91 83       	std	Z+1, r25	; 0x01
    5684:	a2 83       	std	Z+2, r26	; 0x02
    5686:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    5688:	10 e0       	ldi	r17, 0x00	; 0
    568a:	02 c1       	rjmp	.+516    	; 0x5890 <disk_ioctl+0x344>
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    568c:	80 e0       	ldi	r24, 0x00	; 0
    568e:	92 e0       	ldi	r25, 0x02	; 2
    5690:	fa 01       	movw	r30, r20
    5692:	91 83       	std	Z+1, r25	; 0x01
    5694:	80 83       	st	Z, r24
			res = RES_OK;
    5696:	10 e0       	ldi	r17, 0x00	; 0
			break;
    5698:	fb c0       	rjmp	.+502    	; 0x5890 <disk_ioctl+0x344>

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
    569a:	f0 90 a6 01 	lds	r15, 0x01A6	; 0x8001a6 <CardType>
    569e:	f2 fe       	sbrs	r15, 2
    56a0:	31 c0       	rjmp	.+98     	; 0x5704 <disk_ioctl+0x1b8>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    56a2:	40 e0       	ldi	r20, 0x00	; 0
    56a4:	50 e0       	ldi	r21, 0x00	; 0
    56a6:	ba 01       	movw	r22, r20
    56a8:	8d e8       	ldi	r24, 0x8D	; 141
    56aa:	0e 94 cb 28 	call	0x5196	; 0x5196 <send_cmd>
    56ae:	81 11       	cpse	r24, r1
    56b0:	e0 c0       	rjmp	.+448    	; 0x5872 <disk_ioctl+0x326>
					rcvr_spi();
    56b2:	0e 94 1f 28 	call	0x503e	; 0x503e <rcvr_spi>
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    56b6:	60 e1       	ldi	r22, 0x10	; 16
    56b8:	70 e0       	ldi	r23, 0x00	; 0
    56ba:	ce 01       	movw	r24, r28
    56bc:	01 96       	adiw	r24, 0x01	; 1
    56be:	0e 94 4d 28 	call	0x509a	; 0x509a <rcvr_datablock>
    56c2:	89 2b       	or	r24, r25
    56c4:	09 f4       	brne	.+2      	; 0x56c8 <disk_ioctl+0x17c>
    56c6:	d7 c0       	rjmp	.+430    	; 0x5876 <disk_ioctl+0x32a>
    56c8:	0f 2e       	mov	r0, r31
    56ca:	f0 e3       	ldi	r31, 0x30	; 48
    56cc:	ff 2e       	mov	r15, r31
    56ce:	f0 2d       	mov	r31, r0
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
    56d0:	0e 94 1f 28 	call	0x503e	; 0x503e <rcvr_spi>
    56d4:	fa 94       	dec	r15
    56d6:	f1 10       	cpse	r15, r1
    56d8:	fb cf       	rjmp	.-10     	; 0x56d0 <disk_ioctl+0x184>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    56da:	2b 85       	ldd	r18, Y+11	; 0x0b
    56dc:	22 95       	swap	r18
    56de:	2f 70       	andi	r18, 0x0F	; 15
    56e0:	80 e1       	ldi	r24, 0x10	; 16
    56e2:	90 e0       	ldi	r25, 0x00	; 0
    56e4:	a0 e0       	ldi	r26, 0x00	; 0
    56e6:	b0 e0       	ldi	r27, 0x00	; 0
    56e8:	04 c0       	rjmp	.+8      	; 0x56f2 <disk_ioctl+0x1a6>
    56ea:	88 0f       	add	r24, r24
    56ec:	99 1f       	adc	r25, r25
    56ee:	aa 1f       	adc	r26, r26
    56f0:	bb 1f       	adc	r27, r27
    56f2:	2a 95       	dec	r18
    56f4:	d2 f7       	brpl	.-12     	; 0x56ea <disk_ioctl+0x19e>
    56f6:	f8 01       	movw	r30, r16
    56f8:	80 83       	st	Z, r24
    56fa:	91 83       	std	Z+1, r25	; 0x01
    56fc:	a2 83       	std	Z+2, r26	; 0x02
    56fe:	b3 83       	std	Z+3, r27	; 0x03
						res = RES_OK;
    5700:	10 e0       	ldi	r17, 0x00	; 0
    5702:	c6 c0       	rjmp	.+396    	; 0x5890 <disk_ioctl+0x344>
					}
				}
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    5704:	40 e0       	ldi	r20, 0x00	; 0
    5706:	50 e0       	ldi	r21, 0x00	; 0
    5708:	ba 01       	movw	r22, r20
    570a:	89 e0       	ldi	r24, 0x09	; 9
    570c:	0e 94 cb 28 	call	0x5196	; 0x5196 <send_cmd>
    5710:	81 11       	cpse	r24, r1
    5712:	b3 c0       	rjmp	.+358    	; 0x587a <disk_ioctl+0x32e>
    5714:	60 e1       	ldi	r22, 0x10	; 16
    5716:	70 e0       	ldi	r23, 0x00	; 0
    5718:	ce 01       	movw	r24, r28
    571a:	01 96       	adiw	r24, 0x01	; 1
    571c:	0e 94 4d 28 	call	0x509a	; 0x509a <rcvr_datablock>
    5720:	89 2b       	or	r24, r25
    5722:	09 f4       	brne	.+2      	; 0x5726 <disk_ioctl+0x1da>
    5724:	ac c0       	rjmp	.+344    	; 0x587e <disk_ioctl+0x332>
					if (CardType & CT_SD1) {	/* SDv1 */
    5726:	f1 fe       	sbrs	r15, 1
    5728:	20 c0       	rjmp	.+64     	; 0x576a <disk_ioctl+0x21e>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    572a:	2b 85       	ldd	r18, Y+11	; 0x0b
    572c:	2f 73       	andi	r18, 0x3F	; 63
    572e:	8c 85       	ldd	r24, Y+12	; 0x0c
    5730:	88 1f       	adc	r24, r24
    5732:	88 27       	eor	r24, r24
    5734:	88 1f       	adc	r24, r24
    5736:	90 e0       	ldi	r25, 0x00	; 0
    5738:	01 96       	adiw	r24, 0x01	; 1
    573a:	82 0f       	add	r24, r18
    573c:	91 1d       	adc	r25, r1
    573e:	82 0f       	add	r24, r18
    5740:	91 1d       	adc	r25, r1
    5742:	2e 85       	ldd	r18, Y+14	; 0x0e
    5744:	22 95       	swap	r18
    5746:	26 95       	lsr	r18
    5748:	26 95       	lsr	r18
    574a:	23 70       	andi	r18, 0x03	; 3
    574c:	21 50       	subi	r18, 0x01	; 1
    574e:	02 c0       	rjmp	.+4      	; 0x5754 <disk_ioctl+0x208>
    5750:	88 0f       	add	r24, r24
    5752:	99 1f       	adc	r25, r25
    5754:	2a 95       	dec	r18
    5756:	e2 f7       	brpl	.-8      	; 0x5750 <disk_ioctl+0x204>
    5758:	a0 e0       	ldi	r26, 0x00	; 0
    575a:	b0 e0       	ldi	r27, 0x00	; 0
    575c:	f8 01       	movw	r30, r16
    575e:	80 83       	st	Z, r24
    5760:	91 83       	std	Z+1, r25	; 0x01
    5762:	a2 83       	std	Z+2, r26	; 0x02
    5764:	b3 83       	std	Z+3, r27	; 0x03
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
					}
					res = RES_OK;
    5766:	10 e0       	ldi	r17, 0x00	; 0
    5768:	93 c0       	rjmp	.+294    	; 0x5890 <disk_ioctl+0x344>
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
					if (CardType & CT_SD1) {	/* SDv1 */
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    576a:	8c 85       	ldd	r24, Y+12	; 0x0c
    576c:	28 2f       	mov	r18, r24
    576e:	23 70       	andi	r18, 0x03	; 3
    5770:	82 95       	swap	r24
    5772:	86 95       	lsr	r24
    5774:	87 70       	andi	r24, 0x07	; 7
    5776:	90 e0       	ldi	r25, 0x00	; 0
    5778:	f8 e0       	ldi	r31, 0x08	; 8
    577a:	2f 9f       	mul	r18, r31
    577c:	80 0d       	add	r24, r0
    577e:	91 1d       	adc	r25, r1
    5780:	11 24       	eor	r1, r1
    5782:	01 96       	adiw	r24, 0x01	; 1
    5784:	2b 85       	ldd	r18, Y+11	; 0x0b
    5786:	2c 77       	andi	r18, 0x7C	; 124
    5788:	30 e0       	ldi	r19, 0x00	; 0
    578a:	35 95       	asr	r19
    578c:	27 95       	ror	r18
    578e:	35 95       	asr	r19
    5790:	27 95       	ror	r18
    5792:	2f 5f       	subi	r18, 0xFF	; 255
    5794:	3f 4f       	sbci	r19, 0xFF	; 255
    5796:	82 9f       	mul	r24, r18
    5798:	a0 01       	movw	r20, r0
    579a:	83 9f       	mul	r24, r19
    579c:	50 0d       	add	r21, r0
    579e:	92 9f       	mul	r25, r18
    57a0:	50 0d       	add	r21, r0
    57a2:	11 24       	eor	r1, r1
    57a4:	ca 01       	movw	r24, r20
    57a6:	a0 e0       	ldi	r26, 0x00	; 0
    57a8:	b0 e0       	ldi	r27, 0x00	; 0
    57aa:	f8 01       	movw	r30, r16
    57ac:	80 83       	st	Z, r24
    57ae:	91 83       	std	Z+1, r25	; 0x01
    57b0:	a2 83       	std	Z+2, r26	; 0x02
    57b2:	b3 83       	std	Z+3, r27	; 0x03
					}
					res = RES_OK;
    57b4:	10 e0       	ldi	r17, 0x00	; 0
    57b6:	6c c0       	rjmp	.+216    	; 0x5890 <disk_ioctl+0x344>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    57b8:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <CardType>
    57bc:	fa 01       	movw	r30, r20
    57be:	80 83       	st	Z, r24
			res = RES_OK;
    57c0:	10 e0       	ldi	r17, 0x00	; 0
			break;
    57c2:	66 c0       	rjmp	.+204    	; 0x5890 <disk_ioctl+0x344>

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    57c4:	40 e0       	ldi	r20, 0x00	; 0
    57c6:	50 e0       	ldi	r21, 0x00	; 0
    57c8:	ba 01       	movw	r22, r20
    57ca:	89 e0       	ldi	r24, 0x09	; 9
    57cc:	0e 94 cb 28 	call	0x5196	; 0x5196 <send_cmd>
    57d0:	81 11       	cpse	r24, r1
    57d2:	57 c0       	rjmp	.+174    	; 0x5882 <disk_ioctl+0x336>
				&& rcvr_datablock(ptr, 16))
    57d4:	60 e1       	ldi	r22, 0x10	; 16
    57d6:	70 e0       	ldi	r23, 0x00	; 0
    57d8:	c8 01       	movw	r24, r16
    57da:	0e 94 4d 28 	call	0x509a	; 0x509a <rcvr_datablock>

		switch (ctrl) {
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
				deselect();
				res = RES_OK;
    57de:	11 e0       	ldi	r17, 0x01	; 1
    57e0:	89 2b       	or	r24, r25
    57e2:	09 f4       	brne	.+2      	; 0x57e6 <disk_ioctl+0x29a>
    57e4:	55 c0       	rjmp	.+170    	; 0x5890 <disk_ioctl+0x344>
    57e6:	10 e0       	ldi	r17, 0x00	; 0
    57e8:	53 c0       	rjmp	.+166    	; 0x5890 <disk_ioctl+0x344>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    57ea:	40 e0       	ldi	r20, 0x00	; 0
    57ec:	50 e0       	ldi	r21, 0x00	; 0
    57ee:	ba 01       	movw	r22, r20
    57f0:	8a e0       	ldi	r24, 0x0A	; 10
    57f2:	0e 94 cb 28 	call	0x5196	; 0x5196 <send_cmd>
    57f6:	81 11       	cpse	r24, r1
    57f8:	46 c0       	rjmp	.+140    	; 0x5886 <disk_ioctl+0x33a>
				&& rcvr_datablock(ptr, 16))
    57fa:	60 e1       	ldi	r22, 0x10	; 16
    57fc:	70 e0       	ldi	r23, 0x00	; 0
    57fe:	c8 01       	movw	r24, r16
    5800:	0e 94 4d 28 	call	0x509a	; 0x509a <rcvr_datablock>

		switch (ctrl) {
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
				deselect();
				res = RES_OK;
    5804:	11 e0       	ldi	r17, 0x01	; 1
    5806:	89 2b       	or	r24, r25
    5808:	09 f4       	brne	.+2      	; 0x580c <disk_ioctl+0x2c0>
    580a:	42 c0       	rjmp	.+132    	; 0x5890 <disk_ioctl+0x344>
    580c:	10 e0       	ldi	r17, 0x00	; 0
    580e:	40 c0       	rjmp	.+128    	; 0x5890 <disk_ioctl+0x344>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    5810:	40 e0       	ldi	r20, 0x00	; 0
    5812:	50 e0       	ldi	r21, 0x00	; 0
    5814:	ba 01       	movw	r22, r20
    5816:	8a e3       	ldi	r24, 0x3A	; 58
    5818:	0e 94 cb 28 	call	0x5196	; 0x5196 <send_cmd>
    581c:	81 11       	cpse	r24, r1
    581e:	35 c0       	rjmp	.+106    	; 0x588a <disk_ioctl+0x33e>
    5820:	78 01       	movw	r14, r16
    5822:	0c 5f       	subi	r16, 0xFC	; 252
    5824:	1f 4f       	sbci	r17, 0xFF	; 255
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    5826:	0e 94 1f 28 	call	0x503e	; 0x503e <rcvr_spi>
    582a:	f7 01       	movw	r30, r14
    582c:	81 93       	st	Z+, r24
    582e:	7f 01       	movw	r14, r30
    5830:	0e 17       	cp	r16, r30
    5832:	1f 07       	cpc	r17, r31
    5834:	c1 f7       	brne	.-16     	; 0x5826 <disk_ioctl+0x2da>
				res = RES_OK;
    5836:	10 e0       	ldi	r17, 0x00	; 0
    5838:	2b c0       	rjmp	.+86     	; 0x5890 <disk_ioctl+0x344>
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    583a:	40 e0       	ldi	r20, 0x00	; 0
    583c:	50 e0       	ldi	r21, 0x00	; 0
    583e:	ba 01       	movw	r22, r20
    5840:	8d e8       	ldi	r24, 0x8D	; 141
    5842:	0e 94 cb 28 	call	0x5196	; 0x5196 <send_cmd>
    5846:	81 11       	cpse	r24, r1
    5848:	22 c0       	rjmp	.+68     	; 0x588e <disk_ioctl+0x342>
				rcvr_spi();
    584a:	0e 94 1f 28 	call	0x503e	; 0x503e <rcvr_spi>
				if (rcvr_datablock(ptr, 64))
    584e:	60 e4       	ldi	r22, 0x40	; 64
    5850:	70 e0       	ldi	r23, 0x00	; 0
    5852:	c8 01       	movw	r24, r16
    5854:	0e 94 4d 28 	call	0x509a	; 0x509a <rcvr_datablock>

		switch (ctrl) {
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
				deselect();
				res = RES_OK;
    5858:	11 e0       	ldi	r17, 0x01	; 1
    585a:	89 2b       	or	r24, r25
    585c:	c9 f0       	breq	.+50     	; 0x5890 <disk_ioctl+0x344>
    585e:	10 e0       	ldi	r17, 0x00	; 0
    5860:	17 c0       	rjmp	.+46     	; 0x5890 <disk_ioctl+0x344>
					res = RES_OK;
			}
			break;

		default:
			res = RES_PARERR;
    5862:	14 e0       	ldi	r17, 0x04	; 4
    5864:	15 c0       	rjmp	.+42     	; 0x5890 <disk_ioctl+0x344>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
    5866:	11 e0       	ldi	r17, 0x01	; 1
    5868:	13 c0       	rjmp	.+38     	; 0x5890 <disk_ioctl+0x344>
    586a:	11 e0       	ldi	r17, 0x01	; 1
    586c:	11 c0       	rjmp	.+34     	; 0x5890 <disk_ioctl+0x344>
    586e:	11 e0       	ldi	r17, 0x01	; 1
    5870:	0f c0       	rjmp	.+30     	; 0x5890 <disk_ioctl+0x344>
    5872:	11 e0       	ldi	r17, 0x01	; 1
    5874:	0d c0       	rjmp	.+26     	; 0x5890 <disk_ioctl+0x344>
    5876:	11 e0       	ldi	r17, 0x01	; 1
    5878:	0b c0       	rjmp	.+22     	; 0x5890 <disk_ioctl+0x344>
    587a:	11 e0       	ldi	r17, 0x01	; 1
    587c:	09 c0       	rjmp	.+18     	; 0x5890 <disk_ioctl+0x344>
    587e:	11 e0       	ldi	r17, 0x01	; 1
    5880:	07 c0       	rjmp	.+14     	; 0x5890 <disk_ioctl+0x344>
    5882:	11 e0       	ldi	r17, 0x01	; 1
    5884:	05 c0       	rjmp	.+10     	; 0x5890 <disk_ioctl+0x344>
    5886:	11 e0       	ldi	r17, 0x01	; 1
    5888:	03 c0       	rjmp	.+6      	; 0x5890 <disk_ioctl+0x344>
    588a:	11 e0       	ldi	r17, 0x01	; 1
    588c:	01 c0       	rjmp	.+2      	; 0x5890 <disk_ioctl+0x344>
    588e:	11 e0       	ldi	r17, 0x01	; 1

		default:
			res = RES_PARERR;
		}

		deselect();
    5890:	0e 94 38 28 	call	0x5070	; 0x5070 <deselect>
    5894:	81 2f       	mov	r24, r17
    5896:	05 c0       	rjmp	.+10     	; 0x58a2 <disk_ioctl+0x356>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
    5898:	84 e0       	ldi	r24, 0x04	; 4
    589a:	03 c0       	rjmp	.+6      	; 0x58a2 <disk_ioctl+0x356>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
			res = RES_OK;
			break;
		default :
			res = RES_PARERR;
    589c:	84 e0       	ldi	r24, 0x04	; 4
    589e:	01 c0       	rjmp	.+2      	; 0x58a2 <disk_ioctl+0x356>
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    58a0:	83 e0       	ldi	r24, 0x03	; 3

		deselect();
	}

	return res;
}
    58a2:	60 96       	adiw	r28, 0x10	; 16
    58a4:	0f b6       	in	r0, 0x3f	; 63
    58a6:	f8 94       	cli
    58a8:	de bf       	out	0x3e, r29	; 62
    58aa:	0f be       	out	0x3f, r0	; 63
    58ac:	cd bf       	out	0x3d, r28	; 61
    58ae:	df 91       	pop	r29
    58b0:	cf 91       	pop	r28
    58b2:	1f 91       	pop	r17
    58b4:	0f 91       	pop	r16
    58b6:	ff 90       	pop	r15
    58b8:	ef 90       	pop	r14
    58ba:	08 95       	ret

000058bc <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;						/* 100Hz decrement timer */
    58bc:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Timer1>
	if (n) Timer1 = --n;
    58c0:	88 23       	and	r24, r24
    58c2:	19 f0       	breq	.+6      	; 0x58ca <disk_timerproc+0xe>
    58c4:	81 50       	subi	r24, 0x01	; 1
    58c6:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <Timer1>
	n = Timer2;
    58ca:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <Timer2>
	if (n) Timer2 = --n;
    58ce:	88 23       	and	r24, r24
    58d0:	19 f0       	breq	.+6      	; 0x58d8 <disk_timerproc+0x1c>
    58d2:	81 50       	subi	r24, 0x01	; 1
    58d4:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <Timer2>

	s = Stat;
    58d8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
	//else					/* Write enabled */
		s &= ~STA_PROTECT;
	//if ( (SOCKINS & SOCKPORT))			/* Card inserted */
	//	s |= (STA_NODISK | STA_NOINIT);
	//else					/* Socket empty */ 
		s &= ~STA_NODISK;
    58dc:	89 7f       	andi	r24, 0xF9	; 249
	Stat = s;
    58de:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Stat>
    58e2:	08 95       	ret

000058e4 <setSNDFile>:
 * Created: 12.09.2019 20:59:08
 *  Author: Tomek
 */ 
#include "SNDFile.h"

FRESULT setSNDFile(struct SNDFile *sf,char *name,struct family_entry *fam,struct sound_entry *snd){
    58e4:	8f 92       	push	r8
    58e6:	9f 92       	push	r9
    58e8:	af 92       	push	r10
    58ea:	bf 92       	push	r11
    58ec:	cf 92       	push	r12
    58ee:	df 92       	push	r13
    58f0:	ff 92       	push	r15
    58f2:	0f 93       	push	r16
    58f4:	1f 93       	push	r17
    58f6:	cf 93       	push	r28
    58f8:	df 93       	push	r29
    58fa:	00 d0       	rcall	.+0      	; 0x58fc <setSNDFile+0x18>
    58fc:	cd b7       	in	r28, 0x3d	; 61
    58fe:	de b7       	in	r29, 0x3e	; 62
    5900:	8c 01       	movw	r16, r24
    5902:	6b 01       	movw	r12, r22
    5904:	4a 01       	movw	r8, r20
    5906:	59 01       	movw	r10, r18
	FRESULT res;
	UINT numOfBytes;
	if((res = f_open(&sf->_fd,name,FA_READ)) != FR_OK){
    5908:	41 e0       	ldi	r20, 0x01	; 1
    590a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <f_open>
    590e:	f8 2e       	mov	r15, r24
    5910:	88 23       	and	r24, r24
    5912:	51 f0       	breq	.+20     	; 0x5928 <setSNDFile+0x44>
		lcdPrintData(getLCDString(OPN_NO,OPN_NO_LEN),OPN_NO_LEN);
    5914:	6b e0       	ldi	r22, 0x0B	; 11
    5916:	8b e4       	ldi	r24, 0x4B	; 75
    5918:	90 e0       	ldi	r25, 0x00	; 0
    591a:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    591e:	6b e0       	ldi	r22, 0x0B	; 11
    5920:	0e 94 37 1c 	call	0x386e	; 0x386e <lcdPrintData>
		return res;
    5924:	8f 2d       	mov	r24, r15
    5926:	27 c0       	rjmp	.+78     	; 0x5976 <setSNDFile+0x92>
	}
	strcpy(sf->_fileName,name);
    5928:	b6 01       	movw	r22, r12
    592a:	c8 01       	movw	r24, r16
    592c:	81 96       	adiw	r24, 0x21	; 33
    592e:	0e 94 ab 37 	call	0x6f56	; 0x6f56 <strcpy>
	sf->_fileOpen = TRUE;
    5932:	81 e0       	ldi	r24, 0x01	; 1
    5934:	f8 01       	movw	r30, r16
    5936:	80 a3       	std	Z+32, r24	; 0x20
	// read first sound family and program
	f_lseek(&sf->_fd,0);
    5938:	40 e0       	ldi	r20, 0x00	; 0
    593a:	50 e0       	ldi	r21, 0x00	; 0
    593c:	ba 01       	movw	r22, r20
    593e:	c8 01       	movw	r24, r16
    5940:	0e 94 3e 14 	call	0x287c	; 0x287c <f_lseek>
	f_read(&sf->_fd,fam,sizeof(struct family_entry),&numOfBytes);
    5944:	9e 01       	movw	r18, r28
    5946:	2f 5f       	subi	r18, 0xFF	; 255
    5948:	3f 4f       	sbci	r19, 0xFF	; 255
    594a:	48 e1       	ldi	r20, 0x18	; 24
    594c:	50 e0       	ldi	r21, 0x00	; 0
    594e:	b4 01       	movw	r22, r8
    5950:	c8 01       	movw	r24, r16
    5952:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
	f_read(&sf->_fd,snd,sizeof(struct sound_entry),&numOfBytes);
    5956:	9e 01       	movw	r18, r28
    5958:	2f 5f       	subi	r18, 0xFF	; 255
    595a:	3f 4f       	sbci	r19, 0xFF	; 255
    595c:	42 e1       	ldi	r20, 0x12	; 18
    595e:	50 e0       	ldi	r21, 0x00	; 0
    5960:	b5 01       	movw	r22, r10
    5962:	c8 01       	movw	r24, r16
    5964:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
	f_lseek(&sf->_fd,0);
    5968:	40 e0       	ldi	r20, 0x00	; 0
    596a:	50 e0       	ldi	r21, 0x00	; 0
    596c:	ba 01       	movw	r22, r20
    596e:	c8 01       	movw	r24, r16
    5970:	0e 94 3e 14 	call	0x287c	; 0x287c <f_lseek>
	return FR_OK;
    5974:	80 e0       	ldi	r24, 0x00	; 0
}
    5976:	0f 90       	pop	r0
    5978:	0f 90       	pop	r0
    597a:	df 91       	pop	r29
    597c:	cf 91       	pop	r28
    597e:	1f 91       	pop	r17
    5980:	0f 91       	pop	r16
    5982:	ff 90       	pop	r15
    5984:	df 90       	pop	r13
    5986:	cf 90       	pop	r12
    5988:	bf 90       	pop	r11
    598a:	af 90       	pop	r10
    598c:	9f 90       	pop	r9
    598e:	8f 90       	pop	r8
    5990:	08 95       	ret

00005992 <closeSNDFile>:

FRESULT closeSNDFile(struct SNDFile *sf){
    5992:	cf 93       	push	r28
    5994:	df 93       	push	r29
	FRESULT res;
	if(sf->_fileOpen == FALSE)
    5996:	fc 01       	movw	r30, r24
    5998:	20 a1       	ldd	r18, Z+32	; 0x20
    599a:	22 23       	and	r18, r18
    599c:	39 f0       	breq	.+14     	; 0x59ac <closeSNDFile+0x1a>
    599e:	ec 01       	movw	r28, r24
		return FR_INVALID_OBJECT;
	if((res = f_close(&sf->_fd)) != FR_OK)
    59a0:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <f_close>
    59a4:	81 11       	cpse	r24, r1
    59a6:	03 c0       	rjmp	.+6      	; 0x59ae <closeSNDFile+0x1c>
		return res;
	sf->_fileOpen = FALSE;
    59a8:	18 a2       	std	Y+32, r1	; 0x20
	return FR_OK;
    59aa:	01 c0       	rjmp	.+2      	; 0x59ae <closeSNDFile+0x1c>
}

FRESULT closeSNDFile(struct SNDFile *sf){
	FRESULT res;
	if(sf->_fileOpen == FALSE)
		return FR_INVALID_OBJECT;
    59ac:	89 e0       	ldi	r24, 0x09	; 9
	if((res = f_close(&sf->_fd)) != FR_OK)
		return res;
	sf->_fileOpen = FALSE;
	return FR_OK;
}
    59ae:	df 91       	pop	r29
    59b0:	cf 91       	pop	r28
    59b2:	08 95       	ret

000059b4 <scrollSoundList>:

void scrollSoundList(struct SNDFile *sptr,INPUT joy, struct family_entry *fam, struct sound_entry *snd){
    59b4:	4f 92       	push	r4
    59b6:	5f 92       	push	r5
    59b8:	6f 92       	push	r6
    59ba:	7f 92       	push	r7
    59bc:	bf 92       	push	r11
    59be:	cf 92       	push	r12
    59c0:	df 92       	push	r13
    59c2:	ef 92       	push	r14
    59c4:	ff 92       	push	r15
    59c6:	0f 93       	push	r16
    59c8:	1f 93       	push	r17
    59ca:	cf 93       	push	r28
    59cc:	df 93       	push	r29
    59ce:	00 d0       	rcall	.+0      	; 0x59d0 <scrollSoundList+0x1c>
    59d0:	cd b7       	in	r28, 0x3d	; 61
    59d2:	de b7       	in	r29, 0x3e	; 62
    59d4:	8c 01       	movw	r16, r24
    59d6:	b6 2e       	mov	r11, r22
    59d8:	7a 01       	movw	r14, r20
    59da:	69 01       	movw	r12, r18
	UINT numOfBytes;
	sptr->next_family = sptr->current_family + sizeof(struct family_entry) + fam->current_sounds * sizeof(struct sound_entry);
    59dc:	fc 01       	movw	r30, r24
    59de:	42 a9       	ldd	r20, Z+50	; 0x32
    59e0:	53 a9       	ldd	r21, Z+51	; 0x33
    59e2:	64 a9       	ldd	r22, Z+52	; 0x34
    59e4:	75 a9       	ldd	r23, Z+53	; 0x35
    59e6:	f7 01       	movw	r30, r14
    59e8:	84 81       	ldd	r24, Z+4	; 0x04
    59ea:	95 81       	ldd	r25, Z+5	; 0x05
    59ec:	a6 81       	ldd	r26, Z+6	; 0x06
    59ee:	b7 81       	ldd	r27, Z+7	; 0x07
    59f0:	2c 01       	movw	r4, r24
    59f2:	3d 01       	movw	r6, r26
    59f4:	44 0c       	add	r4, r4
    59f6:	55 1c       	adc	r5, r5
    59f8:	66 1c       	adc	r6, r6
    59fa:	77 1c       	adc	r7, r7
    59fc:	44 0c       	add	r4, r4
    59fe:	55 1c       	adc	r5, r5
    5a00:	66 1c       	adc	r6, r6
    5a02:	77 1c       	adc	r7, r7
    5a04:	44 0c       	add	r4, r4
    5a06:	55 1c       	adc	r5, r5
    5a08:	66 1c       	adc	r6, r6
    5a0a:	77 1c       	adc	r7, r7
    5a0c:	84 0d       	add	r24, r4
    5a0e:	95 1d       	adc	r25, r5
    5a10:	a6 1d       	adc	r26, r6
    5a12:	b7 1d       	adc	r27, r7
    5a14:	88 0f       	add	r24, r24
    5a16:	99 1f       	adc	r25, r25
    5a18:	aa 1f       	adc	r26, r26
    5a1a:	bb 1f       	adc	r27, r27
    5a1c:	2a 01       	movw	r4, r20
    5a1e:	3b 01       	movw	r6, r22
    5a20:	f8 e1       	ldi	r31, 0x18	; 24
    5a22:	4f 0e       	add	r4, r31
    5a24:	51 1c       	adc	r5, r1
    5a26:	61 1c       	adc	r6, r1
    5a28:	71 1c       	adc	r7, r1
    5a2a:	84 0d       	add	r24, r4
    5a2c:	95 1d       	adc	r25, r5
    5a2e:	a6 1d       	adc	r26, r6
    5a30:	b7 1d       	adc	r27, r7
    5a32:	f8 01       	movw	r30, r16
    5a34:	86 ab       	std	Z+54, r24	; 0x36
    5a36:	97 ab       	std	Z+55, r25	; 0x37
    5a38:	a0 af       	std	Z+56, r26	; 0x38
    5a3a:	b1 af       	std	Z+57, r27	; 0x39
	if(fam->previous_sounds != 0)
    5a3c:	f7 01       	movw	r30, r14
    5a3e:	80 81       	ld	r24, Z
    5a40:	91 81       	ldd	r25, Z+1	; 0x01
    5a42:	a2 81       	ldd	r26, Z+2	; 0x02
    5a44:	b3 81       	ldd	r27, Z+3	; 0x03
    5a46:	00 97       	sbiw	r24, 0x00	; 0
    5a48:	a1 05       	cpc	r26, r1
    5a4a:	b1 05       	cpc	r27, r1
    5a4c:	19 f1       	breq	.+70     	; 0x5a94 <scrollSoundList+0xe0>
	sptr->previous_family = sptr->current_family - fam->previous_sounds * sizeof(struct sound_entry) - sizeof(struct family_entry);
    5a4e:	48 51       	subi	r20, 0x18	; 24
    5a50:	51 09       	sbc	r21, r1
    5a52:	61 09       	sbc	r22, r1
    5a54:	71 09       	sbc	r23, r1
    5a56:	2c 01       	movw	r4, r24
    5a58:	3d 01       	movw	r6, r26
    5a5a:	44 0c       	add	r4, r4
    5a5c:	55 1c       	adc	r5, r5
    5a5e:	66 1c       	adc	r6, r6
    5a60:	77 1c       	adc	r7, r7
    5a62:	44 0c       	add	r4, r4
    5a64:	55 1c       	adc	r5, r5
    5a66:	66 1c       	adc	r6, r6
    5a68:	77 1c       	adc	r7, r7
    5a6a:	44 0c       	add	r4, r4
    5a6c:	55 1c       	adc	r5, r5
    5a6e:	66 1c       	adc	r6, r6
    5a70:	77 1c       	adc	r7, r7
    5a72:	84 0d       	add	r24, r4
    5a74:	95 1d       	adc	r25, r5
    5a76:	a6 1d       	adc	r26, r6
    5a78:	b7 1d       	adc	r27, r7
    5a7a:	88 0f       	add	r24, r24
    5a7c:	99 1f       	adc	r25, r25
    5a7e:	aa 1f       	adc	r26, r26
    5a80:	bb 1f       	adc	r27, r27
    5a82:	48 1b       	sub	r20, r24
    5a84:	59 0b       	sbc	r21, r25
    5a86:	6a 0b       	sbc	r22, r26
    5a88:	7b 0b       	sbc	r23, r27
    5a8a:	f8 01       	movw	r30, r16
    5a8c:	46 a7       	std	Z+46, r20	; 0x2e
    5a8e:	57 a7       	std	Z+47, r21	; 0x2f
    5a90:	60 ab       	std	Z+48, r22	; 0x30
    5a92:	71 ab       	std	Z+49, r23	; 0x31
	lcdClear();
    5a94:	0e 94 a3 1b 	call	0x3746	; 0x3746 <lcdClear>
	switch(joy){
    5a98:	f5 e0       	ldi	r31, 0x05	; 5
    5a9a:	bf 16       	cp	r11, r31
    5a9c:	c9 f0       	breq	.+50     	; 0x5ad0 <scrollSoundList+0x11c>
    5a9e:	fb 15       	cp	r31, r11
    5aa0:	24 f0       	brlt	.+8      	; 0x5aaa <scrollSoundList+0xf6>
    5aa2:	24 e0       	ldi	r18, 0x04	; 4
    5aa4:	b2 16       	cp	r11, r18
    5aa6:	51 f1       	breq	.+84     	; 0x5afc <scrollSoundList+0x148>
    5aa8:	55 c0       	rjmp	.+170    	; 0x5b54 <scrollSoundList+0x1a0>
    5aaa:	86 e0       	ldi	r24, 0x06	; 6
    5aac:	b8 16       	cp	r11, r24
    5aae:	b9 f1       	breq	.+110    	; 0x5b1e <scrollSoundList+0x16a>
    5ab0:	e7 e0       	ldi	r30, 0x07	; 7
    5ab2:	be 12       	cpse	r11, r30
    5ab4:	4f c0       	rjmp	.+158    	; 0x5b54 <scrollSoundList+0x1a0>
		break;
		case JOY_PRESS:
		break;
		case NONE: break;
		case JOY_LEFT:
		sptr->current_sound = 0;
    5ab6:	f8 01       	movw	r30, r16
    5ab8:	12 ae       	std	Z+58, r1	; 0x3a
    5aba:	13 ae       	std	Z+59, r1	; 0x3b
    5abc:	14 ae       	std	Z+60, r1	; 0x3c
    5abe:	15 ae       	std	Z+61, r1	; 0x3d
		f_lseek(&sptr->_fd,sptr->previous_family);
    5ac0:	46 a5       	ldd	r20, Z+46	; 0x2e
    5ac2:	57 a5       	ldd	r21, Z+47	; 0x2f
    5ac4:	60 a9       	ldd	r22, Z+48	; 0x30
    5ac6:	71 a9       	ldd	r23, Z+49	; 0x31
    5ac8:	c8 01       	movw	r24, r16
    5aca:	0e 94 3e 14 	call	0x287c	; 0x287c <f_lseek>
		break;
    5ace:	42 c0       	rjmp	.+132    	; 0x5b54 <scrollSoundList+0x1a0>
		case JOY_RIGHT:
		sptr->current_sound = 0;
    5ad0:	f8 01       	movw	r30, r16
    5ad2:	12 ae       	std	Z+58, r1	; 0x3a
    5ad4:	13 ae       	std	Z+59, r1	; 0x3b
    5ad6:	14 ae       	std	Z+60, r1	; 0x3c
    5ad8:	15 ae       	std	Z+61, r1	; 0x3d
		if(sptr->next_family < sptr->_fd.fsize)
    5ada:	46 a9       	ldd	r20, Z+54	; 0x36
    5adc:	57 a9       	ldd	r21, Z+55	; 0x37
    5ade:	60 ad       	ldd	r22, Z+56	; 0x38
    5ae0:	71 ad       	ldd	r23, Z+57	; 0x39
    5ae2:	82 85       	ldd	r24, Z+10	; 0x0a
    5ae4:	93 85       	ldd	r25, Z+11	; 0x0b
    5ae6:	a4 85       	ldd	r26, Z+12	; 0x0c
    5ae8:	b5 85       	ldd	r27, Z+13	; 0x0d
    5aea:	48 17       	cp	r20, r24
    5aec:	59 07       	cpc	r21, r25
    5aee:	6a 07       	cpc	r22, r26
    5af0:	7b 07       	cpc	r23, r27
    5af2:	80 f5       	brcc	.+96     	; 0x5b54 <scrollSoundList+0x1a0>
		f_lseek(&sptr->_fd,sptr->next_family);
    5af4:	c8 01       	movw	r24, r16
    5af6:	0e 94 3e 14 	call	0x287c	; 0x287c <f_lseek>
    5afa:	2c c0       	rjmp	.+88     	; 0x5b54 <scrollSoundList+0x1a0>
		break;
		case JOY_UP:
		if(sptr->current_sound > 0)
    5afc:	f8 01       	movw	r30, r16
    5afe:	82 ad       	ldd	r24, Z+58	; 0x3a
    5b00:	93 ad       	ldd	r25, Z+59	; 0x3b
    5b02:	a4 ad       	ldd	r26, Z+60	; 0x3c
    5b04:	b5 ad       	ldd	r27, Z+61	; 0x3d
    5b06:	00 97       	sbiw	r24, 0x00	; 0
    5b08:	a1 05       	cpc	r26, r1
    5b0a:	b1 05       	cpc	r27, r1
    5b0c:	19 f1       	breq	.+70     	; 0x5b54 <scrollSoundList+0x1a0>
		sptr->current_sound--;
    5b0e:	01 97       	sbiw	r24, 0x01	; 1
    5b10:	a1 09       	sbc	r26, r1
    5b12:	b1 09       	sbc	r27, r1
    5b14:	82 af       	std	Z+58, r24	; 0x3a
    5b16:	93 af       	std	Z+59, r25	; 0x3b
    5b18:	a4 af       	std	Z+60, r26	; 0x3c
    5b1a:	b5 af       	std	Z+61, r27	; 0x3d
    5b1c:	1b c0       	rjmp	.+54     	; 0x5b54 <scrollSoundList+0x1a0>
		break;
		case JOY_DOWN:
		if(sptr->current_sound < (fam->current_sounds - 1))
    5b1e:	f8 01       	movw	r30, r16
    5b20:	42 ad       	ldd	r20, Z+58	; 0x3a
    5b22:	53 ad       	ldd	r21, Z+59	; 0x3b
    5b24:	64 ad       	ldd	r22, Z+60	; 0x3c
    5b26:	75 ad       	ldd	r23, Z+61	; 0x3d
    5b28:	f7 01       	movw	r30, r14
    5b2a:	84 81       	ldd	r24, Z+4	; 0x04
    5b2c:	95 81       	ldd	r25, Z+5	; 0x05
    5b2e:	a6 81       	ldd	r26, Z+6	; 0x06
    5b30:	b7 81       	ldd	r27, Z+7	; 0x07
    5b32:	01 97       	sbiw	r24, 0x01	; 1
    5b34:	a1 09       	sbc	r26, r1
    5b36:	b1 09       	sbc	r27, r1
    5b38:	48 17       	cp	r20, r24
    5b3a:	59 07       	cpc	r21, r25
    5b3c:	6a 07       	cpc	r22, r26
    5b3e:	7b 07       	cpc	r23, r27
    5b40:	48 f4       	brcc	.+18     	; 0x5b54 <scrollSoundList+0x1a0>
		sptr->current_sound++;
    5b42:	4f 5f       	subi	r20, 0xFF	; 255
    5b44:	5f 4f       	sbci	r21, 0xFF	; 255
    5b46:	6f 4f       	sbci	r22, 0xFF	; 255
    5b48:	7f 4f       	sbci	r23, 0xFF	; 255
    5b4a:	f8 01       	movw	r30, r16
    5b4c:	42 af       	std	Z+58, r20	; 0x3a
    5b4e:	53 af       	std	Z+59, r21	; 0x3b
    5b50:	64 af       	std	Z+60, r22	; 0x3c
    5b52:	75 af       	std	Z+61, r23	; 0x3d
		break;

	}

	sptr->current_family = f_tell(&sptr->_fd);
    5b54:	f8 01       	movw	r30, r16
    5b56:	86 81       	ldd	r24, Z+6	; 0x06
    5b58:	97 81       	ldd	r25, Z+7	; 0x07
    5b5a:	a0 85       	ldd	r26, Z+8	; 0x08
    5b5c:	b1 85       	ldd	r27, Z+9	; 0x09
    5b5e:	82 ab       	std	Z+50, r24	; 0x32
    5b60:	93 ab       	std	Z+51, r25	; 0x33
    5b62:	a4 ab       	std	Z+52, r26	; 0x34
    5b64:	b5 ab       	std	Z+53, r27	; 0x35
	f_read(&sptr->_fd,fam,sizeof(struct family_entry),&numOfBytes);
    5b66:	9e 01       	movw	r18, r28
    5b68:	2f 5f       	subi	r18, 0xFF	; 255
    5b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    5b6c:	48 e1       	ldi	r20, 0x18	; 24
    5b6e:	50 e0       	ldi	r21, 0x00	; 0
    5b70:	b7 01       	movw	r22, r14
    5b72:	c8 01       	movw	r24, r16
    5b74:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
	lcdGotoXY(0,0);
    5b78:	60 e0       	ldi	r22, 0x00	; 0
    5b7a:	80 e0       	ldi	r24, 0x00	; 0
    5b7c:	0e 94 a7 1b 	call	0x374e	; 0x374e <lcdGotoXY>
	lcdPrintData(fam->name,strlen(fam->name));
    5b80:	c7 01       	movw	r24, r14
    5b82:	08 96       	adiw	r24, 0x08	; 8
    5b84:	fc 01       	movw	r30, r24
    5b86:	01 90       	ld	r0, Z+
    5b88:	00 20       	and	r0, r0
    5b8a:	e9 f7       	brne	.-6      	; 0x5b86 <scrollSoundList+0x1d2>
    5b8c:	31 97       	sbiw	r30, 0x01	; 1
    5b8e:	bf 01       	movw	r22, r30
    5b90:	68 1b       	sub	r22, r24
    5b92:	79 0b       	sbc	r23, r25
    5b94:	0e 94 37 1c 	call	0x386e	; 0x386e <lcdPrintData>
	f_lseek(&sptr->_fd,sptr->current_family + sizeof(struct family_entry) + sptr->current_sound * sizeof(struct sound_entry));
    5b98:	f8 01       	movw	r30, r16
    5b9a:	82 ad       	ldd	r24, Z+58	; 0x3a
    5b9c:	93 ad       	ldd	r25, Z+59	; 0x3b
    5b9e:	a4 ad       	ldd	r26, Z+60	; 0x3c
    5ba0:	b5 ad       	ldd	r27, Z+61	; 0x3d
    5ba2:	ac 01       	movw	r20, r24
    5ba4:	bd 01       	movw	r22, r26
    5ba6:	44 0f       	add	r20, r20
    5ba8:	55 1f       	adc	r21, r21
    5baa:	66 1f       	adc	r22, r22
    5bac:	77 1f       	adc	r23, r23
    5bae:	44 0f       	add	r20, r20
    5bb0:	55 1f       	adc	r21, r21
    5bb2:	66 1f       	adc	r22, r22
    5bb4:	77 1f       	adc	r23, r23
    5bb6:	44 0f       	add	r20, r20
    5bb8:	55 1f       	adc	r21, r21
    5bba:	66 1f       	adc	r22, r22
    5bbc:	77 1f       	adc	r23, r23
    5bbe:	84 0f       	add	r24, r20
    5bc0:	95 1f       	adc	r25, r21
    5bc2:	a6 1f       	adc	r26, r22
    5bc4:	b7 1f       	adc	r27, r23
    5bc6:	88 0f       	add	r24, r24
    5bc8:	99 1f       	adc	r25, r25
    5bca:	aa 1f       	adc	r26, r26
    5bcc:	bb 1f       	adc	r27, r27
    5bce:	42 a9       	ldd	r20, Z+50	; 0x32
    5bd0:	53 a9       	ldd	r21, Z+51	; 0x33
    5bd2:	64 a9       	ldd	r22, Z+52	; 0x34
    5bd4:	75 a9       	ldd	r23, Z+53	; 0x35
    5bd6:	48 5e       	subi	r20, 0xE8	; 232
    5bd8:	5f 4f       	sbci	r21, 0xFF	; 255
    5bda:	6f 4f       	sbci	r22, 0xFF	; 255
    5bdc:	7f 4f       	sbci	r23, 0xFF	; 255
    5bde:	48 0f       	add	r20, r24
    5be0:	59 1f       	adc	r21, r25
    5be2:	6a 1f       	adc	r22, r26
    5be4:	7b 1f       	adc	r23, r27
    5be6:	c8 01       	movw	r24, r16
    5be8:	0e 94 3e 14 	call	0x287c	; 0x287c <f_lseek>
	f_read(&sptr->_fd,snd,sizeof(struct sound_entry),&numOfBytes);
    5bec:	9e 01       	movw	r18, r28
    5bee:	2f 5f       	subi	r18, 0xFF	; 255
    5bf0:	3f 4f       	sbci	r19, 0xFF	; 255
    5bf2:	42 e1       	ldi	r20, 0x12	; 18
    5bf4:	50 e0       	ldi	r21, 0x00	; 0
    5bf6:	b6 01       	movw	r22, r12
    5bf8:	c8 01       	movw	r24, r16
    5bfa:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
	f_lseek(&sptr->_fd,sptr->current_family);
    5bfe:	f8 01       	movw	r30, r16
    5c00:	42 a9       	ldd	r20, Z+50	; 0x32
    5c02:	53 a9       	ldd	r21, Z+51	; 0x33
    5c04:	64 a9       	ldd	r22, Z+52	; 0x34
    5c06:	75 a9       	ldd	r23, Z+53	; 0x35
    5c08:	c8 01       	movw	r24, r16
    5c0a:	0e 94 3e 14 	call	0x287c	; 0x287c <f_lseek>
	lcdGotoXY(0,1);
    5c0e:	61 e0       	ldi	r22, 0x01	; 1
    5c10:	80 e0       	ldi	r24, 0x00	; 0
    5c12:	0e 94 a7 1b 	call	0x374e	; 0x374e <lcdGotoXY>
	lcdPrintData(snd->name,strlen(snd->name));
    5c16:	c6 01       	movw	r24, r12
    5c18:	02 96       	adiw	r24, 0x02	; 2
    5c1a:	fc 01       	movw	r30, r24
    5c1c:	01 90       	ld	r0, Z+
    5c1e:	00 20       	and	r0, r0
    5c20:	e9 f7       	brne	.-6      	; 0x5c1c <scrollSoundList+0x268>
    5c22:	31 97       	sbiw	r30, 0x01	; 1
    5c24:	bf 01       	movw	r22, r30
    5c26:	68 1b       	sub	r22, r24
    5c28:	79 0b       	sbc	r23, r25
    5c2a:	0e 94 37 1c 	call	0x386e	; 0x386e <lcdPrintData>
	
    5c2e:	0f 90       	pop	r0
    5c30:	0f 90       	pop	r0
    5c32:	df 91       	pop	r29
    5c34:	cf 91       	pop	r28
    5c36:	1f 91       	pop	r17
    5c38:	0f 91       	pop	r16
    5c3a:	ff 90       	pop	r15
    5c3c:	ef 90       	pop	r14
    5c3e:	df 90       	pop	r13
    5c40:	cf 90       	pop	r12
    5c42:	bf 90       	pop	r11
    5c44:	7f 90       	pop	r7
    5c46:	6f 90       	pop	r6
    5c48:	5f 90       	pop	r5
    5c4a:	4f 90       	pop	r4
    5c4c:	08 95       	ret

00005c4e <spiInit>:
    cbi(DDRB, 4);   // set MISO as input
    sbi(DDRB, 3);   // set MOSI as output
    sbi(DDRB, 2);   // SS must be output for Master mode to work
#else
	// setup SPI I/O pins
	sbi(PORTB, SCK);	// set SCK hi
    5c4e:	c7 9a       	sbi	0x18, 7	; 24
	sbi(PORTB,MISO);	// set pull-up for MISO
    5c50:	c6 9a       	sbi	0x18, 6	; 24
	sbi(DDRB, SCK);	// set SCK as output
    5c52:	bf 9a       	sbi	0x17, 7	; 23
	cbi(DDRB, MISO);	// set MISO as input
    5c54:	be 98       	cbi	0x17, 6	; 23
	sbi(DDRB, MOSI);	// set MOSI as output
    5c56:	bd 9a       	sbi	0x17, 5	; 23
	sbi(DDRB, CS);	// SS must be output for Master mode to work
    5c58:	bc 9a       	sbi	0x17, 4	; 23
#endif
	
	// setup SPI interface :
	// master mode
	sbi(SPCR, MSTR);
    5c5a:	6c 9a       	sbi	0x0d, 4	; 13
	// clock = f/4
//	cbi(SPCR, SPR0);
//	cbi(SPCR, SPR1);
	// clock = f/16
	sbi(SPCR, SPR0);
    5c5c:	68 9a       	sbi	0x0d, 0	; 13
	sbi(SPCR, SPR1);
    5c5e:	69 9a       	sbi	0x0d, 1	; 13
	// select clock phase positive-going in middle of data
	cbi(SPCR, CPOL);
    5c60:	6b 98       	cbi	0x0d, 3	; 13
	// Data order MSB first
	cbi(SPCR,DORD);
    5c62:	6d 98       	cbi	0x0d, 5	; 13
	// enable SPI
	sbi(SPCR, SPE);
    5c64:	6e 9a       	sbi	0x0d, 6	; 13
	//outp((1<<MSTR)|(1<<SPE)|(1<<SPR0), SPCR );
	//outp((1<<CPHA)|(1<<CPOL)|(1<<MSTR)|(1<<SPE)|(1<<SPR0)|(1<<SPR1), SPCR );
	//outp((1<<CPHA)|(1<<MSTR)|(1<<SPE)|(1<<SPR0), SPCR );
	
	// clear status
	inb(SPSR);
    5c66:	8e b1       	in	r24, 0x0e	; 14
	spiTransferComplete = TRUE;
    5c68:	81 e0       	ldi	r24, 0x01	; 1
    5c6a:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <spiTransferComplete>
    5c6e:	08 95       	ret

00005c70 <spiSendByte>:
}
*/
void spiSendByte(u08 data)
{
	// send a byte over SPI and ignore reply
	outb(SPDR, data);
    5c70:	8f b9       	out	0x0f, r24	; 15
	#ifdef SPI_USEINT
		while(!spiTransferComplete);
		spiTransferComplete = FALSE;
	#else
		while(!(inb(SPSR) & (1<<SPIF)));
    5c72:	77 9b       	sbis	0x0e, 7	; 14
    5c74:	fe cf       	rjmp	.-4      	; 0x5c72 <spiSendByte+0x2>
	#endif

	
}
    5c76:	08 95       	ret

00005c78 <spiTransferByte>:
	outb(SPDR, data);
	// wait for transfer to complete
	while(!spiTransferComplete);
	#else
	// send the given data
	outb(SPDR, data);
    5c78:	8f b9       	out	0x0f, r24	; 15
	// wait for transfer to complete
	while(!(inb(SPSR) & (1<<SPIF)));
    5c7a:	77 9b       	sbis	0x0e, 7	; 14
    5c7c:	fe cf       	rjmp	.-4      	; 0x5c7a <spiTransferByte+0x2>
	#endif
	// return the received data
	return inb(SPDR);
    5c7e:	8f b1       	in	r24, 0x0f	; 15
}
    5c80:	08 95       	ret

00005c82 <SRAM_resetReader>:
		//while(!SPI_Rx_Buf_Full);
		*ReadData++ = ReadSPI();
	}
	SRAMDisable(currentSRAM);
	return ReadCnt;			//Return no# of bytes read from SRAM
}
    5c82:	e6 eb       	ldi	r30, 0xB6	; 182
    5c84:	f1 e0       	ldi	r31, 0x01	; 1
    5c86:	10 82       	st	Z, r1
    5c88:	11 82       	std	Z+1, r1	; 0x01
    5c8a:	12 82       	std	Z+2, r1	; 0x02
    5c8c:	13 82       	std	Z+3, r1	; 0x03
    5c8e:	14 82       	std	Z+4, r1	; 0x04
    5c90:	15 82       	std	Z+5, r1	; 0x05
    5c92:	16 82       	std	Z+6, r1	; 0x06
    5c94:	17 82       	std	Z+7, r1	; 0x07
    5c96:	10 86       	std	Z+8, r1	; 0x08
    5c98:	11 86       	std	Z+9, r1	; 0x09
    5c9a:	12 86       	std	Z+10, r1	; 0x0a
    5c9c:	13 86       	std	Z+11, r1	; 0x0b
    5c9e:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <currentSRAM>
    5ca2:	08 95       	ret

00005ca4 <SRAM_resetWriter>:
    5ca4:	e9 ea       	ldi	r30, 0xA9	; 169
    5ca6:	f1 e0       	ldi	r31, 0x01	; 1
    5ca8:	10 82       	st	Z, r1
    5caa:	11 82       	std	Z+1, r1	; 0x01
    5cac:	12 82       	std	Z+2, r1	; 0x02
    5cae:	13 82       	std	Z+3, r1	; 0x03
    5cb0:	14 82       	std	Z+4, r1	; 0x04
    5cb2:	15 82       	std	Z+5, r1	; 0x05
    5cb4:	16 82       	std	Z+6, r1	; 0x06
    5cb6:	17 82       	std	Z+7, r1	; 0x07
    5cb8:	10 86       	std	Z+8, r1	; 0x08
    5cba:	11 86       	std	Z+9, r1	; 0x09
    5cbc:	12 86       	std	Z+10, r1	; 0x0a
    5cbe:	13 86       	std	Z+11, r1	; 0x0b
    5cc0:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <currentSRAM>
    5cc4:	08 95       	ret

00005cc6 <incrementReader>:
    5cc6:	09 2e       	mov	r0, r25
    5cc8:	00 0c       	add	r0, r0
    5cca:	aa 0b       	sbc	r26, r26
    5ccc:	bb 0b       	sbc	r27, r27
    5cce:	40 91 be 01 	lds	r20, 0x01BE	; 0x8001be <currentReader+0x8>
    5cd2:	50 91 bf 01 	lds	r21, 0x01BF	; 0x8001bf <currentReader+0x9>
    5cd6:	60 91 c0 01 	lds	r22, 0x01C0	; 0x8001c0 <currentReader+0xa>
    5cda:	70 91 c1 01 	lds	r23, 0x01C1	; 0x8001c1 <currentReader+0xb>
    5cde:	84 0f       	add	r24, r20
    5ce0:	95 1f       	adc	r25, r21
    5ce2:	a6 1f       	adc	r26, r22
    5ce4:	b7 1f       	adc	r27, r23
    5ce6:	00 97       	sbiw	r24, 0x00	; 0
    5ce8:	28 e0       	ldi	r18, 0x08	; 8
    5cea:	a2 07       	cpc	r26, r18
    5cec:	b1 05       	cpc	r27, r1
    5cee:	48 f4       	brcc	.+18     	; 0x5d02 <incrementReader+0x3c>
    5cf0:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <currentReader+0x8>
    5cf4:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <currentReader+0x9>
    5cf8:	a0 93 c0 01 	sts	0x01C0, r26	; 0x8001c0 <currentReader+0xa>
    5cfc:	b0 93 c1 01 	sts	0x01C1, r27	; 0x8001c1 <currentReader+0xb>
    5d00:	0a c0       	rjmp	.+20     	; 0x5d16 <incrementReader+0x50>
    5d02:	a7 70       	andi	r26, 0x07	; 7
    5d04:	bb 27       	eor	r27, r27
    5d06:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <currentReader+0x8>
    5d0a:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <currentReader+0x9>
    5d0e:	a0 93 c0 01 	sts	0x01C0, r26	; 0x8001c0 <currentReader+0xa>
    5d12:	b0 93 c1 01 	sts	0x01C1, r27	; 0x8001c1 <currentReader+0xb>
    5d16:	e6 eb       	ldi	r30, 0xB6	; 182
    5d18:	f1 e0       	ldi	r31, 0x01	; 1
    5d1a:	80 85       	ldd	r24, Z+8	; 0x08
    5d1c:	91 85       	ldd	r25, Z+9	; 0x09
    5d1e:	a2 85       	ldd	r26, Z+10	; 0x0a
    5d20:	b3 85       	ldd	r27, Z+11	; 0x0b
    5d22:	ac 01       	movw	r20, r24
    5d24:	bd 01       	movw	r22, r26
    5d26:	61 70       	andi	r22, 0x01	; 1
    5d28:	77 27       	eor	r23, r23
    5d2a:	40 83       	st	Z, r20
    5d2c:	51 83       	std	Z+1, r21	; 0x01
    5d2e:	62 83       	std	Z+2, r22	; 0x02
    5d30:	73 83       	std	Z+3, r23	; 0x03
    5d32:	ac 01       	movw	r20, r24
    5d34:	bd 01       	movw	r22, r26
    5d36:	68 94       	set
    5d38:	14 f8       	bld	r1, 4
    5d3a:	76 95       	lsr	r23
    5d3c:	67 95       	ror	r22
    5d3e:	57 95       	ror	r21
    5d40:	47 95       	ror	r20
    5d42:	16 94       	lsr	r1
    5d44:	d1 f7       	brne	.-12     	; 0x5d3a <incrementReader+0x74>
    5d46:	5f 70       	andi	r21, 0x0F	; 15
    5d48:	66 27       	eor	r22, r22
    5d4a:	77 27       	eor	r23, r23
    5d4c:	44 83       	std	Z+4, r20	; 0x04
    5d4e:	55 83       	std	Z+5, r21	; 0x05
    5d50:	66 83       	std	Z+6, r22	; 0x06
    5d52:	77 83       	std	Z+7, r23	; 0x07
    5d54:	07 2e       	mov	r0, r23
    5d56:	71 e1       	ldi	r23, 0x11	; 17
    5d58:	b6 95       	lsr	r27
    5d5a:	a7 95       	ror	r26
    5d5c:	97 95       	ror	r25
    5d5e:	87 95       	ror	r24
    5d60:	7a 95       	dec	r23
    5d62:	d1 f7       	brne	.-12     	; 0x5d58 <incrementReader+0x92>
    5d64:	70 2d       	mov	r23, r0
    5d66:	84 87       	std	Z+12, r24	; 0x0c
    5d68:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <currentSRAM>
    5d6c:	08 95       	ret

00005d6e <SRAM_seekRead>:
    5d6e:	cf 93       	push	r28
    5d70:	df 93       	push	r29
    5d72:	ec 01       	movw	r28, r24
    5d74:	61 30       	cpi	r22, 0x01	; 1
    5d76:	71 05       	cpc	r23, r1
    5d78:	71 f0       	breq	.+28     	; 0x5d96 <SRAM_seekRead+0x28>
    5d7a:	20 f0       	brcs	.+8      	; 0x5d84 <SRAM_seekRead+0x16>
    5d7c:	62 30       	cpi	r22, 0x02	; 2
    5d7e:	71 05       	cpc	r23, r1
    5d80:	39 f0       	breq	.+14     	; 0x5d90 <SRAM_seekRead+0x22>
    5d82:	11 c0       	rjmp	.+34     	; 0x5da6 <SRAM_seekRead+0x38>
    5d84:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <SRAM_resetReader>
    5d88:	ce 01       	movw	r24, r28
    5d8a:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <incrementReader>
    5d8e:	0b c0       	rjmp	.+22     	; 0x5da6 <SRAM_seekRead+0x38>
    5d90:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <incrementReader>
    5d94:	08 c0       	rjmp	.+16     	; 0x5da6 <SRAM_seekRead+0x38>
    5d96:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <SRAM_resetReader>
    5d9a:	88 27       	eor	r24, r24
    5d9c:	99 27       	eor	r25, r25
    5d9e:	8c 1b       	sub	r24, r28
    5da0:	9d 0b       	sbc	r25, r29
    5da2:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <incrementReader>
    5da6:	df 91       	pop	r29
    5da8:	cf 91       	pop	r28
    5daa:	08 95       	ret

00005dac <incrementWriter>:
    5dac:	09 2e       	mov	r0, r25
    5dae:	00 0c       	add	r0, r0
    5db0:	aa 0b       	sbc	r26, r26
    5db2:	bb 0b       	sbc	r27, r27
    5db4:	40 91 b1 01 	lds	r20, 0x01B1	; 0x8001b1 <currentWriter+0x8>
    5db8:	50 91 b2 01 	lds	r21, 0x01B2	; 0x8001b2 <currentWriter+0x9>
    5dbc:	60 91 b3 01 	lds	r22, 0x01B3	; 0x8001b3 <currentWriter+0xa>
    5dc0:	70 91 b4 01 	lds	r23, 0x01B4	; 0x8001b4 <currentWriter+0xb>
    5dc4:	84 0f       	add	r24, r20
    5dc6:	95 1f       	adc	r25, r21
    5dc8:	a6 1f       	adc	r26, r22
    5dca:	b7 1f       	adc	r27, r23
    5dcc:	00 97       	sbiw	r24, 0x00	; 0
    5dce:	28 e0       	ldi	r18, 0x08	; 8
    5dd0:	a2 07       	cpc	r26, r18
    5dd2:	b1 05       	cpc	r27, r1
    5dd4:	48 f4       	brcc	.+18     	; 0x5de8 <incrementWriter+0x3c>
    5dd6:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <currentWriter+0x8>
    5dda:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <currentWriter+0x9>
    5dde:	a0 93 b3 01 	sts	0x01B3, r26	; 0x8001b3 <currentWriter+0xa>
    5de2:	b0 93 b4 01 	sts	0x01B4, r27	; 0x8001b4 <currentWriter+0xb>
    5de6:	0a c0       	rjmp	.+20     	; 0x5dfc <incrementWriter+0x50>
    5de8:	a7 70       	andi	r26, 0x07	; 7
    5dea:	bb 27       	eor	r27, r27
    5dec:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <currentWriter+0x8>
    5df0:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <currentWriter+0x9>
    5df4:	a0 93 b3 01 	sts	0x01B3, r26	; 0x8001b3 <currentWriter+0xa>
    5df8:	b0 93 b4 01 	sts	0x01B4, r27	; 0x8001b4 <currentWriter+0xb>
    5dfc:	e9 ea       	ldi	r30, 0xA9	; 169
    5dfe:	f1 e0       	ldi	r31, 0x01	; 1
    5e00:	80 85       	ldd	r24, Z+8	; 0x08
    5e02:	91 85       	ldd	r25, Z+9	; 0x09
    5e04:	a2 85       	ldd	r26, Z+10	; 0x0a
    5e06:	b3 85       	ldd	r27, Z+11	; 0x0b
    5e08:	ac 01       	movw	r20, r24
    5e0a:	bd 01       	movw	r22, r26
    5e0c:	61 70       	andi	r22, 0x01	; 1
    5e0e:	77 27       	eor	r23, r23
    5e10:	40 83       	st	Z, r20
    5e12:	51 83       	std	Z+1, r21	; 0x01
    5e14:	62 83       	std	Z+2, r22	; 0x02
    5e16:	73 83       	std	Z+3, r23	; 0x03
    5e18:	ac 01       	movw	r20, r24
    5e1a:	bd 01       	movw	r22, r26
    5e1c:	68 94       	set
    5e1e:	14 f8       	bld	r1, 4
    5e20:	76 95       	lsr	r23
    5e22:	67 95       	ror	r22
    5e24:	57 95       	ror	r21
    5e26:	47 95       	ror	r20
    5e28:	16 94       	lsr	r1
    5e2a:	d1 f7       	brne	.-12     	; 0x5e20 <incrementWriter+0x74>
    5e2c:	5f 70       	andi	r21, 0x0F	; 15
    5e2e:	66 27       	eor	r22, r22
    5e30:	77 27       	eor	r23, r23
    5e32:	44 83       	std	Z+4, r20	; 0x04
    5e34:	55 83       	std	Z+5, r21	; 0x05
    5e36:	66 83       	std	Z+6, r22	; 0x06
    5e38:	77 83       	std	Z+7, r23	; 0x07
    5e3a:	07 2e       	mov	r0, r23
    5e3c:	71 e1       	ldi	r23, 0x11	; 17
    5e3e:	b6 95       	lsr	r27
    5e40:	a7 95       	ror	r26
    5e42:	97 95       	ror	r25
    5e44:	87 95       	ror	r24
    5e46:	7a 95       	dec	r23
    5e48:	d1 f7       	brne	.-12     	; 0x5e3e <incrementWriter+0x92>
    5e4a:	70 2d       	mov	r23, r0
    5e4c:	84 87       	std	Z+12, r24	; 0x0c
    5e4e:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <currentSRAM>
    5e52:	08 95       	ret

00005e54 <SRAM_seekWrite>:
    5e54:	cf 93       	push	r28
    5e56:	df 93       	push	r29
    5e58:	ec 01       	movw	r28, r24
    5e5a:	61 30       	cpi	r22, 0x01	; 1
    5e5c:	71 05       	cpc	r23, r1
    5e5e:	71 f0       	breq	.+28     	; 0x5e7c <SRAM_seekWrite+0x28>
    5e60:	20 f0       	brcs	.+8      	; 0x5e6a <SRAM_seekWrite+0x16>
    5e62:	62 30       	cpi	r22, 0x02	; 2
    5e64:	71 05       	cpc	r23, r1
    5e66:	39 f0       	breq	.+14     	; 0x5e76 <SRAM_seekWrite+0x22>
    5e68:	11 c0       	rjmp	.+34     	; 0x5e8c <SRAM_seekWrite+0x38>
    5e6a:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <SRAM_resetWriter>
    5e6e:	ce 01       	movw	r24, r28
    5e70:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <incrementWriter>
    5e74:	0b c0       	rjmp	.+22     	; 0x5e8c <SRAM_seekWrite+0x38>
    5e76:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <incrementWriter>
    5e7a:	08 c0       	rjmp	.+16     	; 0x5e8c <SRAM_seekWrite+0x38>
    5e7c:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <SRAM_resetWriter>
    5e80:	88 27       	eor	r24, r24
    5e82:	99 27       	eor	r25, r25
    5e84:	8c 1b       	sub	r24, r28
    5e86:	9d 0b       	sbc	r25, r29
    5e88:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <incrementWriter>
    5e8c:	df 91       	pop	r29
    5e8e:	cf 91       	pop	r28
    5e90:	08 95       	ret

00005e92 <ReadSPI>:
    5e92:	8f ef       	ldi	r24, 0xFF	; 255
    5e94:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <spiTransferByte>
    5e98:	08 95       	ret

00005e9a <SRAMEnable>:
    5e9a:	90 e0       	ldi	r25, 0x00	; 0
    5e9c:	fc 01       	movw	r30, r24
    5e9e:	ee 0f       	add	r30, r30
    5ea0:	ff 1f       	adc	r31, r31
    5ea2:	e5 59       	subi	r30, 0x95	; 149
    5ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ea6:	01 90       	ld	r0, Z+
    5ea8:	f0 81       	ld	r31, Z
    5eaa:	e0 2d       	mov	r30, r0
    5eac:	40 81       	ld	r20, Z
    5eae:	dc 01       	movw	r26, r24
    5eb0:	a9 59       	subi	r26, 0x99	; 153
    5eb2:	bf 4f       	sbci	r27, 0xFF	; 255
    5eb4:	21 e0       	ldi	r18, 0x01	; 1
    5eb6:	30 e0       	ldi	r19, 0x00	; 0
    5eb8:	c9 01       	movw	r24, r18
    5eba:	0c 90       	ld	r0, X
    5ebc:	02 c0       	rjmp	.+4      	; 0x5ec2 <SRAMEnable+0x28>
    5ebe:	88 0f       	add	r24, r24
    5ec0:	99 1f       	adc	r25, r25
    5ec2:	0a 94       	dec	r0
    5ec4:	e2 f7       	brpl	.-8      	; 0x5ebe <SRAMEnable+0x24>
    5ec6:	80 95       	com	r24
    5ec8:	84 23       	and	r24, r20
    5eca:	80 83       	st	Z, r24
    5ecc:	08 95       	ret

00005ece <SRAMDisable>:
    5ece:	90 e0       	ldi	r25, 0x00	; 0
    5ed0:	fc 01       	movw	r30, r24
    5ed2:	ee 0f       	add	r30, r30
    5ed4:	ff 1f       	adc	r31, r31
    5ed6:	e5 59       	subi	r30, 0x95	; 149
    5ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    5eda:	01 90       	ld	r0, Z+
    5edc:	f0 81       	ld	r31, Z
    5ede:	e0 2d       	mov	r30, r0
    5ee0:	40 81       	ld	r20, Z
    5ee2:	dc 01       	movw	r26, r24
    5ee4:	a9 59       	subi	r26, 0x99	; 153
    5ee6:	bf 4f       	sbci	r27, 0xFF	; 255
    5ee8:	21 e0       	ldi	r18, 0x01	; 1
    5eea:	30 e0       	ldi	r19, 0x00	; 0
    5eec:	c9 01       	movw	r24, r18
    5eee:	0c 90       	ld	r0, X
    5ef0:	02 c0       	rjmp	.+4      	; 0x5ef6 <SRAMDisable+0x28>
    5ef2:	88 0f       	add	r24, r24
    5ef4:	99 1f       	adc	r25, r25
    5ef6:	0a 94       	dec	r0
    5ef8:	e2 f7       	brpl	.-8      	; 0x5ef2 <SRAMDisable+0x24>
    5efa:	84 2b       	or	r24, r20
    5efc:	80 83       	st	Z, r24
    5efe:	08 95       	ret

00005f00 <InitSRAM>:
    5f00:	cf 93       	push	r28
    5f02:	df 93       	push	r29
    5f04:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <currentSRAM>
    5f08:	80 e0       	ldi	r24, 0x00	; 0
    5f0a:	c1 e0       	ldi	r28, 0x01	; 1
    5f0c:	d0 e0       	ldi	r29, 0x00	; 0
    5f0e:	90 e0       	ldi	r25, 0x00	; 0
    5f10:	fc 01       	movw	r30, r24
    5f12:	ee 0f       	add	r30, r30
    5f14:	ff 1f       	adc	r31, r31
    5f16:	ed 58       	subi	r30, 0x8D	; 141
    5f18:	ff 4f       	sbci	r31, 0xFF	; 255
    5f1a:	01 90       	ld	r0, Z+
    5f1c:	f0 81       	ld	r31, Z
    5f1e:	e0 2d       	mov	r30, r0
    5f20:	20 81       	ld	r18, Z
    5f22:	dc 01       	movw	r26, r24
    5f24:	a9 59       	subi	r26, 0x99	; 153
    5f26:	bf 4f       	sbci	r27, 0xFF	; 255
    5f28:	ce 01       	movw	r24, r28
    5f2a:	0c 90       	ld	r0, X
    5f2c:	02 c0       	rjmp	.+4      	; 0x5f32 <InitSRAM+0x32>
    5f2e:	88 0f       	add	r24, r24
    5f30:	99 1f       	adc	r25, r25
    5f32:	0a 94       	dec	r0
    5f34:	e2 f7       	brpl	.-8      	; 0x5f2e <InitSRAM+0x2e>
    5f36:	82 2b       	or	r24, r18
    5f38:	80 83       	st	Z, r24
    5f3a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    5f3e:	0e 94 67 2f 	call	0x5ece	; 0x5ece <SRAMDisable>
    5f42:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    5f46:	8f 5f       	subi	r24, 0xFF	; 255
    5f48:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <currentSRAM>
    5f4c:	84 30       	cpi	r24, 0x04	; 4
    5f4e:	f8 f2       	brcs	.-66     	; 0x5f0e <InitSRAM+0xe>
    5f50:	df 91       	pop	r29
    5f52:	cf 91       	pop	r28
    5f54:	08 95       	ret

00005f56 <SRAMWriteStatusReg>:
    5f56:	cf 93       	push	r28
    5f58:	c8 2f       	mov	r28, r24
    5f5a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    5f5e:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <SRAMEnable>
    5f62:	81 e0       	ldi	r24, 0x01	; 1
    5f64:	0e 94 38 2e 	call	0x5c70	; 0x5c70 <spiSendByte>
    5f68:	8c 2f       	mov	r24, r28
    5f6a:	0e 94 38 2e 	call	0x5c70	; 0x5c70 <spiSendByte>
    5f6e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    5f72:	0e 94 67 2f 	call	0x5ece	; 0x5ece <SRAMDisable>
    5f76:	80 e0       	ldi	r24, 0x00	; 0
    5f78:	cf 91       	pop	r28
    5f7a:	08 95       	ret

00005f7c <SRAMCommand>:
    5f7c:	1f 93       	push	r17
    5f7e:	cf 93       	push	r28
    5f80:	df 93       	push	r29
    5f82:	c8 2f       	mov	r28, r24
    5f84:	d6 2f       	mov	r29, r22
    5f86:	14 2f       	mov	r17, r20
    5f88:	82 2f       	mov	r24, r18
    5f8a:	0e 94 38 2e 	call	0x5c70	; 0x5c70 <spiSendByte>
    5f8e:	81 2f       	mov	r24, r17
    5f90:	0e 94 38 2e 	call	0x5c70	; 0x5c70 <spiSendByte>
    5f94:	8d 2f       	mov	r24, r29
    5f96:	0e 94 38 2e 	call	0x5c70	; 0x5c70 <spiSendByte>
    5f9a:	8c 2f       	mov	r24, r28
    5f9c:	0e 94 38 2e 	call	0x5c70	; 0x5c70 <spiSendByte>
    5fa0:	df 91       	pop	r29
    5fa2:	cf 91       	pop	r28
    5fa4:	1f 91       	pop	r17
    5fa6:	08 95       	ret

00005fa8 <SRAMWriteSeq>:

uint8_t SRAMWriteSeq(uint8_t AddLB, uint8_t AddMB,uint8_t AddHB, uint8_t *WriteData,uint32_t WriteCnt)
{
    5fa8:	9f 92       	push	r9
    5faa:	af 92       	push	r10
    5fac:	bf 92       	push	r11
    5fae:	cf 92       	push	r12
    5fb0:	df 92       	push	r13
    5fb2:	ef 92       	push	r14
    5fb4:	ff 92       	push	r15
    5fb6:	0f 93       	push	r16
    5fb8:	1f 93       	push	r17
    5fba:	cf 93       	push	r28
    5fbc:	df 93       	push	r29
    5fbe:	c8 2f       	mov	r28, r24
    5fc0:	d6 2f       	mov	r29, r22
    5fc2:	b4 2e       	mov	r11, r20
    5fc4:	92 2e       	mov	r9, r18
    5fc6:	a3 2e       	mov	r10, r19
    5fc8:	67 01       	movw	r12, r14
    5fca:	78 01       	movw	r14, r16
	SRAMWriteStatusReg(SRAMSeqMode);
    5fcc:	80 e4       	ldi	r24, 0x40	; 64
    5fce:	0e 94 ab 2f 	call	0x5f56	; 0x5f56 <SRAMWriteStatusReg>
	//Send Write command to SRAM along with address
	SRAMEnable(currentSRAM);
    5fd2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    5fd6:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <SRAMEnable>
	SRAMCommand(AddLB,AddMB,AddHB,CMD_SRAMWrite);
    5fda:	22 e0       	ldi	r18, 0x02	; 2
    5fdc:	4b 2d       	mov	r20, r11
    5fde:	6d 2f       	mov	r22, r29
    5fe0:	8c 2f       	mov	r24, r28
    5fe2:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <SRAMCommand>
	//Send Data to be written to SRAM
	for(;WriteCnt > 0;WriteCnt--)
    5fe6:	c1 14       	cp	r12, r1
    5fe8:	d1 04       	cpc	r13, r1
    5fea:	e1 04       	cpc	r14, r1
    5fec:	f1 04       	cpc	r15, r1
    5fee:	59 f0       	breq	.+22     	; 0x6006 <SRAMWriteSeq+0x5e>
    5ff0:	c9 2d       	mov	r28, r9
    5ff2:	da 2d       	mov	r29, r10
uint8_t ReadSPI(){
	return (uint8_t)spiTransferByte(DummyByte);
}

void WriteSPI(uint8_t byte){
	spiSendByte(byte);
    5ff4:	89 91       	ld	r24, Y+
    5ff6:	0e 94 38 2e 	call	0x5c70	; 0x5c70 <spiSendByte>
	SRAMWriteStatusReg(SRAMSeqMode);
	//Send Write command to SRAM along with address
	SRAMEnable(currentSRAM);
	SRAMCommand(AddLB,AddMB,AddHB,CMD_SRAMWrite);
	//Send Data to be written to SRAM
	for(;WriteCnt > 0;WriteCnt--)
    5ffa:	81 e0       	ldi	r24, 0x01	; 1
    5ffc:	c8 1a       	sub	r12, r24
    5ffe:	d1 08       	sbc	r13, r1
    6000:	e1 08       	sbc	r14, r1
    6002:	f1 08       	sbc	r15, r1
    6004:	b9 f7       	brne	.-18     	; 0x5ff4 <SRAMWriteSeq+0x4c>
	{
		WriteSPI(*WriteData++);
		//while(!SPI_Rx_Buf_Full);
		//DummyRead =ReadSPI();
	}
	SRAMDisable(currentSRAM);
    6006:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    600a:	0e 94 67 2f 	call	0x5ece	; 0x5ece <SRAMDisable>
	return 0;			//Return non -ve nuber indicating success
}
    600e:	80 e0       	ldi	r24, 0x00	; 0
    6010:	df 91       	pop	r29
    6012:	cf 91       	pop	r28
    6014:	1f 91       	pop	r17
    6016:	0f 91       	pop	r16
    6018:	ff 90       	pop	r15
    601a:	ef 90       	pop	r14
    601c:	df 90       	pop	r13
    601e:	cf 90       	pop	r12
    6020:	bf 90       	pop	r11
    6022:	af 90       	pop	r10
    6024:	9f 90       	pop	r9
    6026:	08 95       	ret

00006028 <writeSRAM>:
	currentWriter.currentPage.value = (currentWriter.totalBytes.value / SRAMPageSize) % SRAMPageCount;
	currentWriter.currentSram = currentWriter.totalBytes.value / SRAMChipSize;
	currentSRAM = currentWriter.currentSram;
}

void writeSRAM(unsigned char *buf,unsigned int size){
    6028:	af 92       	push	r10
    602a:	bf 92       	push	r11
    602c:	cf 92       	push	r12
    602e:	df 92       	push	r13
    6030:	ef 92       	push	r14
    6032:	ff 92       	push	r15
    6034:	0f 93       	push	r16
    6036:	1f 93       	push	r17
    6038:	cf 93       	push	r28
    603a:	df 93       	push	r29
	unsigned int unaligned = currentWriter.currentByte.value % SRAMPageSize; // byte between start and end of page
    603c:	40 91 a9 01 	lds	r20, 0x01A9	; 0x8001a9 <currentWriter>
    6040:	50 91 aa 01 	lds	r21, 0x01AA	; 0x8001aa <currentWriter+0x1>
    6044:	4f 71       	andi	r20, 0x1F	; 31
    6046:	55 27       	eor	r21, r21
	unsigned int remainder = (unaligned > 0?(SRAMPageSize - unaligned):0); // bytes remaining to end of page
    6048:	41 15       	cp	r20, r1
    604a:	51 05       	cpc	r21, r1
    604c:	31 f0       	breq	.+12     	; 0x605a <writeSRAM+0x32>
    604e:	20 e2       	ldi	r18, 0x20	; 32
    6050:	30 e0       	ldi	r19, 0x00	; 0
    6052:	59 01       	movw	r10, r18
    6054:	a4 1a       	sub	r10, r20
    6056:	b5 0a       	sbc	r11, r21
    6058:	02 c0       	rjmp	.+4      	; 0x605e <writeSRAM+0x36>
    605a:	a1 2c       	mov	r10, r1
    605c:	b1 2c       	mov	r11, r1
	if(size == 0)
    605e:	61 15       	cp	r22, r1
    6060:	71 05       	cpc	r23, r1
    6062:	09 f4       	brne	.+2      	; 0x6066 <writeSRAM+0x3e>
    6064:	70 c0       	rjmp	.+224    	; 0x6146 <writeSRAM+0x11e>
    6066:	6b 01       	movw	r12, r22
    6068:	ec 01       	movw	r28, r24
		return;

	if(size >= SRAMPageSize){
    606a:	60 32       	cpi	r22, 0x20	; 32
    606c:	71 05       	cpc	r23, r1
    606e:	90 f1       	brcs	.+100    	; 0x60d4 <writeSRAM+0xac>
		if(unaligned == 0){
    6070:	45 2b       	or	r20, r21
    6072:	c9 f4       	brne	.+50     	; 0x60a6 <writeSRAM+0x7e>
			// write page only, pass remaining size to next call
			SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,SRAMPageSize);
    6074:	e9 ea       	ldi	r30, 0xA9	; 169
    6076:	f1 e0       	ldi	r31, 0x01	; 1
    6078:	10 e2       	ldi	r17, 0x20	; 32
    607a:	e1 2e       	mov	r14, r17
    607c:	f1 2c       	mov	r15, r1
    607e:	00 e0       	ldi	r16, 0x00	; 0
    6080:	10 e0       	ldi	r17, 0x00	; 0
    6082:	9e 01       	movw	r18, r28
    6084:	42 81       	ldd	r20, Z+2	; 0x02
    6086:	61 81       	ldd	r22, Z+1	; 0x01
    6088:	80 81       	ld	r24, Z
    608a:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <SRAMWriteSeq>
			incrementWriter(SRAMPageSize);
    608e:	80 e2       	ldi	r24, 0x20	; 32
    6090:	90 e0       	ldi	r25, 0x00	; 0
    6092:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <incrementWriter>
			writeSRAM(buf + SRAMPageSize,size - SRAMPageSize);
    6096:	b6 01       	movw	r22, r12
    6098:	60 52       	subi	r22, 0x20	; 32
    609a:	71 09       	sbc	r23, r1
    609c:	ce 01       	movw	r24, r28
    609e:	80 96       	adiw	r24, 0x20	; 32
    60a0:	0e 94 14 30 	call	0x6028	; 0x6028 <writeSRAM>
    60a4:	50 c0       	rjmp	.+160    	; 0x6146 <writeSRAM+0x11e>
		}
		else{
			// write remainder, pass remaining size to next call
			SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,remainder);
    60a6:	75 01       	movw	r14, r10
    60a8:	00 e0       	ldi	r16, 0x00	; 0
    60aa:	10 e0       	ldi	r17, 0x00	; 0
    60ac:	e9 ea       	ldi	r30, 0xA9	; 169
    60ae:	f1 e0       	ldi	r31, 0x01	; 1
    60b0:	9e 01       	movw	r18, r28
    60b2:	42 81       	ldd	r20, Z+2	; 0x02
    60b4:	61 81       	ldd	r22, Z+1	; 0x01
    60b6:	80 81       	ld	r24, Z
    60b8:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <SRAMWriteSeq>
			incrementWriter(remainder);
    60bc:	c5 01       	movw	r24, r10
    60be:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <incrementWriter>
			writeSRAM(buf + remainder,size - remainder);
    60c2:	b6 01       	movw	r22, r12
    60c4:	6a 19       	sub	r22, r10
    60c6:	7b 09       	sbc	r23, r11
    60c8:	ce 01       	movw	r24, r28
    60ca:	8a 0d       	add	r24, r10
    60cc:	9b 1d       	adc	r25, r11
    60ce:	0e 94 14 30 	call	0x6028	; 0x6028 <writeSRAM>
    60d2:	39 c0       	rjmp	.+114    	; 0x6146 <writeSRAM+0x11e>


	}
	else{

		if(unaligned > 0){
    60d4:	45 2b       	or	r20, r21
    60d6:	49 f1       	breq	.+82     	; 0x612a <writeSRAM+0x102>
			if(size > remainder){
    60d8:	a6 16       	cp	r10, r22
    60da:	b7 06       	cpc	r11, r23
    60dc:	b8 f4       	brcc	.+46     	; 0x610c <writeSRAM+0xe4>
				size -= remainder;
    60de:	ca 18       	sub	r12, r10
    60e0:	db 08       	sbc	r13, r11
				SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,remainder);
    60e2:	75 01       	movw	r14, r10
    60e4:	00 e0       	ldi	r16, 0x00	; 0
    60e6:	10 e0       	ldi	r17, 0x00	; 0
    60e8:	e9 ea       	ldi	r30, 0xA9	; 169
    60ea:	f1 e0       	ldi	r31, 0x01	; 1
    60ec:	9e 01       	movw	r18, r28
    60ee:	42 81       	ldd	r20, Z+2	; 0x02
    60f0:	61 81       	ldd	r22, Z+1	; 0x01
    60f2:	80 81       	ld	r24, Z
    60f4:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <SRAMWriteSeq>
				incrementWriter(remainder);
    60f8:	c5 01       	movw	r24, r10
    60fa:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <incrementWriter>
				writeSRAM(buf + remainder,size);
    60fe:	b6 01       	movw	r22, r12
    6100:	ce 01       	movw	r24, r28
    6102:	8a 0d       	add	r24, r10
    6104:	9b 1d       	adc	r25, r11
    6106:	0e 94 14 30 	call	0x6028	; 0x6028 <writeSRAM>
    610a:	1d c0       	rjmp	.+58     	; 0x6146 <writeSRAM+0x11e>
			}
			else{
				SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,size);
    610c:	7b 01       	movw	r14, r22
    610e:	00 e0       	ldi	r16, 0x00	; 0
    6110:	10 e0       	ldi	r17, 0x00	; 0
    6112:	e9 ea       	ldi	r30, 0xA9	; 169
    6114:	f1 e0       	ldi	r31, 0x01	; 1
    6116:	9e 01       	movw	r18, r28
    6118:	42 81       	ldd	r20, Z+2	; 0x02
    611a:	61 81       	ldd	r22, Z+1	; 0x01
    611c:	80 81       	ld	r24, Z
    611e:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <SRAMWriteSeq>
				incrementWriter(size);
    6122:	c6 01       	movw	r24, r12
    6124:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <incrementWriter>
    6128:	0e c0       	rjmp	.+28     	; 0x6146 <writeSRAM+0x11e>
			}

		}
		else{
			SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,size);
    612a:	7b 01       	movw	r14, r22
    612c:	00 e0       	ldi	r16, 0x00	; 0
    612e:	10 e0       	ldi	r17, 0x00	; 0
    6130:	e9 ea       	ldi	r30, 0xA9	; 169
    6132:	f1 e0       	ldi	r31, 0x01	; 1
    6134:	9e 01       	movw	r18, r28
    6136:	42 81       	ldd	r20, Z+2	; 0x02
    6138:	61 81       	ldd	r22, Z+1	; 0x01
    613a:	80 81       	ld	r24, Z
    613c:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <SRAMWriteSeq>
			incrementWriter(size);
    6140:	c6 01       	movw	r24, r12
    6142:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <incrementWriter>
		}
	}
}
    6146:	df 91       	pop	r29
    6148:	cf 91       	pop	r28
    614a:	1f 91       	pop	r17
    614c:	0f 91       	pop	r16
    614e:	ff 90       	pop	r15
    6150:	ef 90       	pop	r14
    6152:	df 90       	pop	r13
    6154:	cf 90       	pop	r12
    6156:	bf 90       	pop	r11
    6158:	af 90       	pop	r10
    615a:	08 95       	ret

0000615c <SRAMReadSeq>:
	SRAMDisable(currentSRAM);
	return 0;			//Return non -ve nuber indicating success
}

uint8_t SRAMReadSeq(uint8_t AddLB, uint8_t AddMB,uint8_t AddHB, uint8_t *ReadData,uint32_t ReadCnt)
{
    615c:	9f 92       	push	r9
    615e:	af 92       	push	r10
    6160:	bf 92       	push	r11
    6162:	cf 92       	push	r12
    6164:	df 92       	push	r13
    6166:	ef 92       	push	r14
    6168:	ff 92       	push	r15
    616a:	0f 93       	push	r16
    616c:	1f 93       	push	r17
    616e:	cf 93       	push	r28
    6170:	df 93       	push	r29
    6172:	c8 2f       	mov	r28, r24
    6174:	d6 2f       	mov	r29, r22
    6176:	b4 2e       	mov	r11, r20
    6178:	92 2e       	mov	r9, r18
    617a:	a3 2e       	mov	r10, r19
    617c:	67 01       	movw	r12, r14
    617e:	78 01       	movw	r14, r16
	SRAMWriteStatusReg(SRAMSeqMode);
    6180:	80 e4       	ldi	r24, 0x40	; 64
    6182:	0e 94 ab 2f 	call	0x5f56	; 0x5f56 <SRAMWriteStatusReg>
	//Send Read command to SRAM along with address
	SRAMEnable(currentSRAM);
    6186:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    618a:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <SRAMEnable>
	SRAMCommand(AddLB,AddMB,AddHB,CMD_SRAMRead);
    618e:	23 e0       	ldi	r18, 0x03	; 3
    6190:	4b 2d       	mov	r20, r11
    6192:	6d 2f       	mov	r22, r29
    6194:	8c 2f       	mov	r24, r28
    6196:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <SRAMCommand>
	//Send dummy data so SRAM can put desired Data read from SRAM
	for(; ReadCnt > 0; ReadCnt--)
    619a:	c1 14       	cp	r12, r1
    619c:	d1 04       	cpc	r13, r1
    619e:	e1 04       	cpc	r14, r1
    61a0:	f1 04       	cpc	r15, r1
    61a2:	59 f0       	breq	.+22     	; 0x61ba <SRAMReadSeq+0x5e>
    61a4:	c9 2d       	mov	r28, r9
    61a6:	da 2d       	mov	r29, r10
	{
		//while(!SPI_Rx_Buf_Full);
		*ReadData++ = ReadSPI();
    61a8:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <ReadSPI>
    61ac:	89 93       	st	Y+, r24
	SRAMWriteStatusReg(SRAMSeqMode);
	//Send Read command to SRAM along with address
	SRAMEnable(currentSRAM);
	SRAMCommand(AddLB,AddMB,AddHB,CMD_SRAMRead);
	//Send dummy data so SRAM can put desired Data read from SRAM
	for(; ReadCnt > 0; ReadCnt--)
    61ae:	81 e0       	ldi	r24, 0x01	; 1
    61b0:	c8 1a       	sub	r12, r24
    61b2:	d1 08       	sbc	r13, r1
    61b4:	e1 08       	sbc	r14, r1
    61b6:	f1 08       	sbc	r15, r1
    61b8:	b9 f7       	brne	.-18     	; 0x61a8 <SRAMReadSeq+0x4c>
	{
		//while(!SPI_Rx_Buf_Full);
		*ReadData++ = ReadSPI();
	}
	SRAMDisable(currentSRAM);
    61ba:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    61be:	0e 94 67 2f 	call	0x5ece	; 0x5ece <SRAMDisable>
	return 0;			//Return non -ve nuber indicating success
}
    61c2:	80 e0       	ldi	r24, 0x00	; 0
    61c4:	df 91       	pop	r29
    61c6:	cf 91       	pop	r28
    61c8:	1f 91       	pop	r17
    61ca:	0f 91       	pop	r16
    61cc:	ff 90       	pop	r15
    61ce:	ef 90       	pop	r14
    61d0:	df 90       	pop	r13
    61d2:	cf 90       	pop	r12
    61d4:	bf 90       	pop	r11
    61d6:	af 90       	pop	r10
    61d8:	9f 90       	pop	r9
    61da:	08 95       	ret

000061dc <readSRAM>:
		}
	}
}


void readSRAM(unsigned char *buf,unsigned int size){
    61dc:	af 92       	push	r10
    61de:	bf 92       	push	r11
    61e0:	cf 92       	push	r12
    61e2:	df 92       	push	r13
    61e4:	ef 92       	push	r14
    61e6:	ff 92       	push	r15
    61e8:	0f 93       	push	r16
    61ea:	1f 93       	push	r17
    61ec:	cf 93       	push	r28
    61ee:	df 93       	push	r29
	unsigned int unaligned = currentReader.currentByte.value % SRAMPageSize; // byte between start and end of page
    61f0:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <currentReader>
    61f4:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <currentReader+0x1>
    61f8:	4f 71       	andi	r20, 0x1F	; 31
    61fa:	55 27       	eor	r21, r21
	unsigned int remainder = (unaligned > 0?(SRAMPageSize - unaligned):0); // bytes remaining to end of page
    61fc:	41 15       	cp	r20, r1
    61fe:	51 05       	cpc	r21, r1
    6200:	31 f0       	breq	.+12     	; 0x620e <readSRAM+0x32>
    6202:	20 e2       	ldi	r18, 0x20	; 32
    6204:	30 e0       	ldi	r19, 0x00	; 0
    6206:	59 01       	movw	r10, r18
    6208:	a4 1a       	sub	r10, r20
    620a:	b5 0a       	sbc	r11, r21
    620c:	02 c0       	rjmp	.+4      	; 0x6212 <readSRAM+0x36>
    620e:	a1 2c       	mov	r10, r1
    6210:	b1 2c       	mov	r11, r1

	if(size == 0)
    6212:	61 15       	cp	r22, r1
    6214:	71 05       	cpc	r23, r1
    6216:	09 f4       	brne	.+2      	; 0x621a <readSRAM+0x3e>
    6218:	70 c0       	rjmp	.+224    	; 0x62fa <readSRAM+0x11e>
    621a:	6b 01       	movw	r12, r22
    621c:	ec 01       	movw	r28, r24
		return;

	if(size >= SRAMPageSize){
    621e:	60 32       	cpi	r22, 0x20	; 32
    6220:	71 05       	cpc	r23, r1
    6222:	90 f1       	brcs	.+100    	; 0x6288 <readSRAM+0xac>
		if(unaligned == 0){
    6224:	45 2b       	or	r20, r21
    6226:	c9 f4       	brne	.+50     	; 0x625a <readSRAM+0x7e>
			// read page only, pass remaining size to next call
			SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,SRAMPageSize);
    6228:	e6 eb       	ldi	r30, 0xB6	; 182
    622a:	f1 e0       	ldi	r31, 0x01	; 1
    622c:	10 e2       	ldi	r17, 0x20	; 32
    622e:	e1 2e       	mov	r14, r17
    6230:	f1 2c       	mov	r15, r1
    6232:	00 e0       	ldi	r16, 0x00	; 0
    6234:	10 e0       	ldi	r17, 0x00	; 0
    6236:	9e 01       	movw	r18, r28
    6238:	42 81       	ldd	r20, Z+2	; 0x02
    623a:	61 81       	ldd	r22, Z+1	; 0x01
    623c:	80 81       	ld	r24, Z
    623e:	0e 94 ae 30 	call	0x615c	; 0x615c <SRAMReadSeq>
			incrementReader(SRAMPageSize);
    6242:	80 e2       	ldi	r24, 0x20	; 32
    6244:	90 e0       	ldi	r25, 0x00	; 0
    6246:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <incrementReader>
			readSRAM(buf + SRAMPageSize,size - SRAMPageSize);
    624a:	b6 01       	movw	r22, r12
    624c:	60 52       	subi	r22, 0x20	; 32
    624e:	71 09       	sbc	r23, r1
    6250:	ce 01       	movw	r24, r28
    6252:	80 96       	adiw	r24, 0x20	; 32
    6254:	0e 94 ee 30 	call	0x61dc	; 0x61dc <readSRAM>
    6258:	50 c0       	rjmp	.+160    	; 0x62fa <readSRAM+0x11e>
		}
		else{
			// read remainder, pass remaining size to next call
			SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,remainder);
    625a:	75 01       	movw	r14, r10
    625c:	00 e0       	ldi	r16, 0x00	; 0
    625e:	10 e0       	ldi	r17, 0x00	; 0
    6260:	e6 eb       	ldi	r30, 0xB6	; 182
    6262:	f1 e0       	ldi	r31, 0x01	; 1
    6264:	9e 01       	movw	r18, r28
    6266:	42 81       	ldd	r20, Z+2	; 0x02
    6268:	61 81       	ldd	r22, Z+1	; 0x01
    626a:	80 81       	ld	r24, Z
    626c:	0e 94 ae 30 	call	0x615c	; 0x615c <SRAMReadSeq>
			incrementReader(remainder);
    6270:	c5 01       	movw	r24, r10
    6272:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <incrementReader>
			readSRAM(buf + remainder,size - remainder);
    6276:	b6 01       	movw	r22, r12
    6278:	6a 19       	sub	r22, r10
    627a:	7b 09       	sbc	r23, r11
    627c:	ce 01       	movw	r24, r28
    627e:	8a 0d       	add	r24, r10
    6280:	9b 1d       	adc	r25, r11
    6282:	0e 94 ee 30 	call	0x61dc	; 0x61dc <readSRAM>
    6286:	39 c0       	rjmp	.+114    	; 0x62fa <readSRAM+0x11e>


	}
	else{

		if(unaligned > 0){
    6288:	45 2b       	or	r20, r21
    628a:	49 f1       	breq	.+82     	; 0x62de <readSRAM+0x102>
			if(size > remainder){
    628c:	a6 16       	cp	r10, r22
    628e:	b7 06       	cpc	r11, r23
    6290:	b8 f4       	brcc	.+46     	; 0x62c0 <readSRAM+0xe4>
				size -= remainder;
    6292:	ca 18       	sub	r12, r10
    6294:	db 08       	sbc	r13, r11
				SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,remainder);
    6296:	75 01       	movw	r14, r10
    6298:	00 e0       	ldi	r16, 0x00	; 0
    629a:	10 e0       	ldi	r17, 0x00	; 0
    629c:	e6 eb       	ldi	r30, 0xB6	; 182
    629e:	f1 e0       	ldi	r31, 0x01	; 1
    62a0:	9e 01       	movw	r18, r28
    62a2:	42 81       	ldd	r20, Z+2	; 0x02
    62a4:	61 81       	ldd	r22, Z+1	; 0x01
    62a6:	80 81       	ld	r24, Z
    62a8:	0e 94 ae 30 	call	0x615c	; 0x615c <SRAMReadSeq>
				incrementReader(remainder);
    62ac:	c5 01       	movw	r24, r10
    62ae:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <incrementReader>
				readSRAM(buf + remainder,size);
    62b2:	b6 01       	movw	r22, r12
    62b4:	ce 01       	movw	r24, r28
    62b6:	8a 0d       	add	r24, r10
    62b8:	9b 1d       	adc	r25, r11
    62ba:	0e 94 ee 30 	call	0x61dc	; 0x61dc <readSRAM>
    62be:	1d c0       	rjmp	.+58     	; 0x62fa <readSRAM+0x11e>
			}
			else{
				SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,size);
    62c0:	7b 01       	movw	r14, r22
    62c2:	00 e0       	ldi	r16, 0x00	; 0
    62c4:	10 e0       	ldi	r17, 0x00	; 0
    62c6:	e6 eb       	ldi	r30, 0xB6	; 182
    62c8:	f1 e0       	ldi	r31, 0x01	; 1
    62ca:	9e 01       	movw	r18, r28
    62cc:	42 81       	ldd	r20, Z+2	; 0x02
    62ce:	61 81       	ldd	r22, Z+1	; 0x01
    62d0:	80 81       	ld	r24, Z
    62d2:	0e 94 ae 30 	call	0x615c	; 0x615c <SRAMReadSeq>
				incrementReader(size);
    62d6:	c6 01       	movw	r24, r12
    62d8:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <incrementReader>
    62dc:	0e c0       	rjmp	.+28     	; 0x62fa <readSRAM+0x11e>
			}

		}
		else{
			SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,size);
    62de:	7b 01       	movw	r14, r22
    62e0:	00 e0       	ldi	r16, 0x00	; 0
    62e2:	10 e0       	ldi	r17, 0x00	; 0
    62e4:	e6 eb       	ldi	r30, 0xB6	; 182
    62e6:	f1 e0       	ldi	r31, 0x01	; 1
    62e8:	9e 01       	movw	r18, r28
    62ea:	42 81       	ldd	r20, Z+2	; 0x02
    62ec:	61 81       	ldd	r22, Z+1	; 0x01
    62ee:	80 81       	ld	r24, Z
    62f0:	0e 94 ae 30 	call	0x615c	; 0x615c <SRAMReadSeq>
			incrementReader(size);
    62f4:	c6 01       	movw	r24, r12
    62f6:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <incrementReader>
		}
	}


}
    62fa:	df 91       	pop	r29
    62fc:	cf 91       	pop	r28
    62fe:	1f 91       	pop	r17
    6300:	0f 91       	pop	r16
    6302:	ff 90       	pop	r15
    6304:	ef 90       	pop	r14
    6306:	df 90       	pop	r13
    6308:	cf 90       	pop	r12
    630a:	bf 90       	pop	r11
    630c:	af 90       	pop	r10
    630e:	08 95       	ret

00006310 <delay_us>:
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1BH);		// set the high 8bits of OCR1B
	//outp( (pwmDuty&0x00FF), OCR1BL);	// set the low 8bits of OCR1B
	OCR1B = pwmDuty;
    6310:	9c 01       	movw	r18, r24
    6312:	2d 5f       	subi	r18, 0xFD	; 253
    6314:	3f 4f       	sbci	r19, 0xFF	; 255
    6316:	ad ec       	ldi	r26, 0xCD	; 205
    6318:	bc ec       	ldi	r27, 0xCC	; 204
    631a:	0e 94 67 36 	call	0x6cce	; 0x6cce <__umulhisi3>
    631e:	96 95       	lsr	r25
    6320:	87 95       	ror	r24
    6322:	96 95       	lsr	r25
    6324:	87 95       	ror	r24
    6326:	82 95       	swap	r24
    6328:	92 95       	swap	r25
    632a:	90 7f       	andi	r25, 0xF0	; 240
    632c:	98 27       	eor	r25, r24
    632e:	80 7f       	andi	r24, 0xF0	; 240
    6330:	98 27       	eor	r25, r24
    6332:	00 97       	sbiw	r24, 0x00	; 0
    6334:	39 f0       	breq	.+14     	; 0x6344 <delay_us+0x34>
    6336:	20 e0       	ldi	r18, 0x00	; 0
    6338:	30 e0       	ldi	r19, 0x00	; 0
    633a:	2f 5f       	subi	r18, 0xFF	; 255
    633c:	3f 4f       	sbci	r19, 0xFF	; 255
    633e:	82 17       	cp	r24, r18
    6340:	93 07       	cpc	r25, r19
    6342:	d9 f7       	brne	.-10     	; 0x633a <delay_us+0x2a>
    6344:	08 95       	ret

00006346 <timerAttach>:
    6346:	88 30       	cpi	r24, 0x08	; 8
    6348:	40 f4       	brcc	.+16     	; 0x635a <timerAttach+0x14>
    634a:	e8 2f       	mov	r30, r24
    634c:	f0 e0       	ldi	r31, 0x00	; 0
    634e:	ee 0f       	add	r30, r30
    6350:	ff 1f       	adc	r31, r31
    6352:	ec 53       	subi	r30, 0x3C	; 60
    6354:	fe 4f       	sbci	r31, 0xFE	; 254
    6356:	71 83       	std	Z+1, r23	; 0x01
    6358:	60 83       	st	Z, r22
    635a:	08 95       	ret

0000635c <__vector_11>:
}

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect)
{
    635c:	1f 92       	push	r1
    635e:	0f 92       	push	r0
    6360:	0f b6       	in	r0, 0x3f	; 63
    6362:	0f 92       	push	r0
    6364:	11 24       	eor	r1, r1
    6366:	2f 93       	push	r18
    6368:	3f 93       	push	r19
    636a:	4f 93       	push	r20
    636c:	5f 93       	push	r21
    636e:	6f 93       	push	r22
    6370:	7f 93       	push	r23
    6372:	8f 93       	push	r24
    6374:	9f 93       	push	r25
    6376:	af 93       	push	r26
    6378:	bf 93       	push	r27
    637a:	ef 93       	push	r30
    637c:	ff 93       	push	r31
	Timer0Reg0++;			// increment low-order counter
    637e:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <Timer0Reg0>
    6382:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <Timer0Reg0+0x1>
    6386:	a0 91 9c 04 	lds	r26, 0x049C	; 0x80049c <Timer0Reg0+0x2>
    638a:	b0 91 9d 04 	lds	r27, 0x049D	; 0x80049d <Timer0Reg0+0x3>
    638e:	01 96       	adiw	r24, 0x01	; 1
    6390:	a1 1d       	adc	r26, r1
    6392:	b1 1d       	adc	r27, r1
    6394:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <Timer0Reg0>
    6398:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <Timer0Reg0+0x1>
    639c:	a0 93 9c 04 	sts	0x049C, r26	; 0x80049c <Timer0Reg0+0x2>
    63a0:	b0 93 9d 04 	sts	0x049D, r27	; 0x80049d <Timer0Reg0+0x3>

	// increment pause counter
	TimerPauseReg++;
    63a4:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <TimerPauseReg>
    63a8:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <TimerPauseReg+0x1>
    63ac:	a0 91 a0 04 	lds	r26, 0x04A0	; 0x8004a0 <TimerPauseReg+0x2>
    63b0:	b0 91 a1 04 	lds	r27, 0x04A1	; 0x8004a1 <TimerPauseReg+0x3>
    63b4:	01 96       	adiw	r24, 0x01	; 1
    63b6:	a1 1d       	adc	r26, r1
    63b8:	b1 1d       	adc	r27, r1
    63ba:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <TimerPauseReg>
    63be:	90 93 9f 04 	sts	0x049F, r25	; 0x80049f <TimerPauseReg+0x1>
    63c2:	a0 93 a0 04 	sts	0x04A0, r26	; 0x8004a0 <TimerPauseReg+0x2>
    63c6:	b0 93 a1 04 	sts	0x04A1, r27	; 0x8004a1 <TimerPauseReg+0x3>

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
    63ca:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <TimerIntFunc>
    63ce:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <TimerIntFunc+0x1>
    63d2:	89 2b       	or	r24, r25
    63d4:	29 f0       	breq	.+10     	; 0x63e0 <__vector_11+0x84>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
    63d6:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <TimerIntFunc>
    63da:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <TimerIntFunc+0x1>
    63de:	09 95       	icall
}
    63e0:	ff 91       	pop	r31
    63e2:	ef 91       	pop	r30
    63e4:	bf 91       	pop	r27
    63e6:	af 91       	pop	r26
    63e8:	9f 91       	pop	r25
    63ea:	8f 91       	pop	r24
    63ec:	7f 91       	pop	r23
    63ee:	6f 91       	pop	r22
    63f0:	5f 91       	pop	r21
    63f2:	4f 91       	pop	r20
    63f4:	3f 91       	pop	r19
    63f6:	2f 91       	pop	r18
    63f8:	0f 90       	pop	r0
    63fa:	0f be       	out	0x3f, r0	; 63
    63fc:	0f 90       	pop	r0
    63fe:	1f 90       	pop	r1
    6400:	18 95       	reti

00006402 <__vector_9>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect)
{
    6402:	1f 92       	push	r1
    6404:	0f 92       	push	r0
    6406:	0f b6       	in	r0, 0x3f	; 63
    6408:	0f 92       	push	r0
    640a:	11 24       	eor	r1, r1
    640c:	2f 93       	push	r18
    640e:	3f 93       	push	r19
    6410:	4f 93       	push	r20
    6412:	5f 93       	push	r21
    6414:	6f 93       	push	r22
    6416:	7f 93       	push	r23
    6418:	8f 93       	push	r24
    641a:	9f 93       	push	r25
    641c:	af 93       	push	r26
    641e:	bf 93       	push	r27
    6420:	ef 93       	push	r30
    6422:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
    6424:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <TimerIntFunc+0x2>
    6428:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <TimerIntFunc+0x3>
    642c:	89 2b       	or	r24, r25
    642e:	29 f0       	breq	.+10     	; 0x643a <__vector_9+0x38>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
    6430:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <TimerIntFunc+0x2>
    6434:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <TimerIntFunc+0x3>
    6438:	09 95       	icall
}
    643a:	ff 91       	pop	r31
    643c:	ef 91       	pop	r30
    643e:	bf 91       	pop	r27
    6440:	af 91       	pop	r26
    6442:	9f 91       	pop	r25
    6444:	8f 91       	pop	r24
    6446:	7f 91       	pop	r23
    6448:	6f 91       	pop	r22
    644a:	5f 91       	pop	r21
    644c:	4f 91       	pop	r20
    644e:	3f 91       	pop	r19
    6450:	2f 91       	pop	r18
    6452:	0f 90       	pop	r0
    6454:	0f be       	out	0x3f, r0	; 63
    6456:	0f 90       	pop	r0
    6458:	1f 90       	pop	r1
    645a:	18 95       	reti

0000645c <__vector_5>:

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_OVF_vect)
{
    645c:	1f 92       	push	r1
    645e:	0f 92       	push	r0
    6460:	0f b6       	in	r0, 0x3f	; 63
    6462:	0f 92       	push	r0
    6464:	11 24       	eor	r1, r1
    6466:	2f 93       	push	r18
    6468:	3f 93       	push	r19
    646a:	4f 93       	push	r20
    646c:	5f 93       	push	r21
    646e:	6f 93       	push	r22
    6470:	7f 93       	push	r23
    6472:	8f 93       	push	r24
    6474:	9f 93       	push	r25
    6476:	af 93       	push	r26
    6478:	bf 93       	push	r27
    647a:	ef 93       	push	r30
    647c:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
    647e:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <Timer2Reg0>
    6482:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <Timer2Reg0+0x1>
    6486:	a0 91 a4 04 	lds	r26, 0x04A4	; 0x8004a4 <Timer2Reg0+0x2>
    648a:	b0 91 a5 04 	lds	r27, 0x04A5	; 0x8004a5 <Timer2Reg0+0x3>
    648e:	01 96       	adiw	r24, 0x01	; 1
    6490:	a1 1d       	adc	r26, r1
    6492:	b1 1d       	adc	r27, r1
    6494:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <Timer2Reg0>
    6498:	90 93 a3 04 	sts	0x04A3, r25	; 0x8004a3 <Timer2Reg0+0x1>
    649c:	a0 93 a4 04 	sts	0x04A4, r26	; 0x8004a4 <Timer2Reg0+0x2>
    64a0:	b0 93 a5 04 	sts	0x04A5, r27	; 0x8004a5 <Timer2Reg0+0x3>

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
    64a4:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <TimerIntFunc+0xa>
    64a8:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <TimerIntFunc+0xb>
    64ac:	89 2b       	or	r24, r25
    64ae:	29 f0       	breq	.+10     	; 0x64ba <__vector_5+0x5e>
		TimerIntFunc[TIMER2OVERFLOW_INT]();
    64b0:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <TimerIntFunc+0xa>
    64b4:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <TimerIntFunc+0xb>
    64b8:	09 95       	icall
}
    64ba:	ff 91       	pop	r31
    64bc:	ef 91       	pop	r30
    64be:	bf 91       	pop	r27
    64c0:	af 91       	pop	r26
    64c2:	9f 91       	pop	r25
    64c4:	8f 91       	pop	r24
    64c6:	7f 91       	pop	r23
    64c8:	6f 91       	pop	r22
    64ca:	5f 91       	pop	r21
    64cc:	4f 91       	pop	r20
    64ce:	3f 91       	pop	r19
    64d0:	2f 91       	pop	r18
    64d2:	0f 90       	pop	r0
    64d4:	0f be       	out	0x3f, r0	; 63
    64d6:	0f 90       	pop	r0
    64d8:	1f 90       	pop	r1
    64da:	18 95       	reti

000064dc <__vector_10>:

#ifdef OCR0
// include support for Output Compare 0 for new AVR processors that support it
//! Interrupt handler for OutputCompare0 match (OC0) interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_COMP_vect)
{
    64dc:	1f 92       	push	r1
    64de:	0f 92       	push	r0
    64e0:	0f b6       	in	r0, 0x3f	; 63
    64e2:	0f 92       	push	r0
    64e4:	11 24       	eor	r1, r1
    64e6:	2f 93       	push	r18
    64e8:	3f 93       	push	r19
    64ea:	4f 93       	push	r20
    64ec:	5f 93       	push	r21
    64ee:	6f 93       	push	r22
    64f0:	7f 93       	push	r23
    64f2:	8f 93       	push	r24
    64f4:	9f 93       	push	r25
    64f6:	af 93       	push	r26
    64f8:	bf 93       	push	r27
    64fa:	ef 93       	push	r30
    64fc:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER0OUTCOMPARE_INT])
    64fe:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <TimerIntFunc+0xe>
    6502:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <TimerIntFunc+0xf>
    6506:	89 2b       	or	r24, r25
    6508:	29 f0       	breq	.+10     	; 0x6514 <__vector_10+0x38>
		TimerIntFunc[TIMER0OUTCOMPARE_INT]();
    650a:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <TimerIntFunc+0xe>
    650e:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <TimerIntFunc+0xf>
    6512:	09 95       	icall
}
    6514:	ff 91       	pop	r31
    6516:	ef 91       	pop	r30
    6518:	bf 91       	pop	r27
    651a:	af 91       	pop	r26
    651c:	9f 91       	pop	r25
    651e:	8f 91       	pop	r24
    6520:	7f 91       	pop	r23
    6522:	6f 91       	pop	r22
    6524:	5f 91       	pop	r21
    6526:	4f 91       	pop	r20
    6528:	3f 91       	pop	r19
    652a:	2f 91       	pop	r18
    652c:	0f 90       	pop	r0
    652e:	0f be       	out	0x3f, r0	; 63
    6530:	0f 90       	pop	r0
    6532:	1f 90       	pop	r1
    6534:	18 95       	reti

00006536 <__vector_7>:
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect)
{
    6536:	1f 92       	push	r1
    6538:	0f 92       	push	r0
    653a:	0f b6       	in	r0, 0x3f	; 63
    653c:	0f 92       	push	r0
    653e:	11 24       	eor	r1, r1
    6540:	2f 93       	push	r18
    6542:	3f 93       	push	r19
    6544:	4f 93       	push	r20
    6546:	5f 93       	push	r21
    6548:	6f 93       	push	r22
    654a:	7f 93       	push	r23
    654c:	8f 93       	push	r24
    654e:	9f 93       	push	r25
    6550:	af 93       	push	r26
    6552:	bf 93       	push	r27
    6554:	ef 93       	push	r30
    6556:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
    6558:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <TimerIntFunc+0x4>
    655c:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <TimerIntFunc+0x5>
    6560:	89 2b       	or	r24, r25
    6562:	29 f0       	breq	.+10     	; 0x656e <__vector_7+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
    6564:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <TimerIntFunc+0x4>
    6568:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <TimerIntFunc+0x5>
    656c:	09 95       	icall
}
    656e:	ff 91       	pop	r31
    6570:	ef 91       	pop	r30
    6572:	bf 91       	pop	r27
    6574:	af 91       	pop	r26
    6576:	9f 91       	pop	r25
    6578:	8f 91       	pop	r24
    657a:	7f 91       	pop	r23
    657c:	6f 91       	pop	r22
    657e:	5f 91       	pop	r21
    6580:	4f 91       	pop	r20
    6582:	3f 91       	pop	r19
    6584:	2f 91       	pop	r18
    6586:	0f 90       	pop	r0
    6588:	0f be       	out	0x3f, r0	; 63
    658a:	0f 90       	pop	r0
    658c:	1f 90       	pop	r1
    658e:	18 95       	reti

00006590 <__vector_8>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect)
{
    6590:	1f 92       	push	r1
    6592:	0f 92       	push	r0
    6594:	0f b6       	in	r0, 0x3f	; 63
    6596:	0f 92       	push	r0
    6598:	11 24       	eor	r1, r1
    659a:	2f 93       	push	r18
    659c:	3f 93       	push	r19
    659e:	4f 93       	push	r20
    65a0:	5f 93       	push	r21
    65a2:	6f 93       	push	r22
    65a4:	7f 93       	push	r23
    65a6:	8f 93       	push	r24
    65a8:	9f 93       	push	r25
    65aa:	af 93       	push	r26
    65ac:	bf 93       	push	r27
    65ae:	ef 93       	push	r30
    65b0:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
    65b2:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <TimerIntFunc+0x6>
    65b6:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <TimerIntFunc+0x7>
    65ba:	89 2b       	or	r24, r25
    65bc:	29 f0       	breq	.+10     	; 0x65c8 <__vector_8+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
    65be:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <TimerIntFunc+0x6>
    65c2:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <TimerIntFunc+0x7>
    65c6:	09 95       	icall
}
    65c8:	ff 91       	pop	r31
    65ca:	ef 91       	pop	r30
    65cc:	bf 91       	pop	r27
    65ce:	af 91       	pop	r26
    65d0:	9f 91       	pop	r25
    65d2:	8f 91       	pop	r24
    65d4:	7f 91       	pop	r23
    65d6:	6f 91       	pop	r22
    65d8:	5f 91       	pop	r21
    65da:	4f 91       	pop	r20
    65dc:	3f 91       	pop	r19
    65de:	2f 91       	pop	r18
    65e0:	0f 90       	pop	r0
    65e2:	0f be       	out	0x3f, r0	; 63
    65e4:	0f 90       	pop	r0
    65e6:	1f 90       	pop	r1
    65e8:	18 95       	reti

000065ea <__vector_6>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect)
{
    65ea:	1f 92       	push	r1
    65ec:	0f 92       	push	r0
    65ee:	0f b6       	in	r0, 0x3f	; 63
    65f0:	0f 92       	push	r0
    65f2:	11 24       	eor	r1, r1
    65f4:	2f 93       	push	r18
    65f6:	3f 93       	push	r19
    65f8:	4f 93       	push	r20
    65fa:	5f 93       	push	r21
    65fc:	6f 93       	push	r22
    65fe:	7f 93       	push	r23
    6600:	8f 93       	push	r24
    6602:	9f 93       	push	r25
    6604:	af 93       	push	r26
    6606:	bf 93       	push	r27
    6608:	ef 93       	push	r30
    660a:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
    660c:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <TimerIntFunc+0x8>
    6610:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <TimerIntFunc+0x9>
    6614:	89 2b       	or	r24, r25
    6616:	29 f0       	breq	.+10     	; 0x6622 <__vector_6+0x38>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
    6618:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <TimerIntFunc+0x8>
    661c:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <TimerIntFunc+0x9>
    6620:	09 95       	icall
}
    6622:	ff 91       	pop	r31
    6624:	ef 91       	pop	r30
    6626:	bf 91       	pop	r27
    6628:	af 91       	pop	r26
    662a:	9f 91       	pop	r25
    662c:	8f 91       	pop	r24
    662e:	7f 91       	pop	r23
    6630:	6f 91       	pop	r22
    6632:	5f 91       	pop	r21
    6634:	4f 91       	pop	r20
    6636:	3f 91       	pop	r19
    6638:	2f 91       	pop	r18
    663a:	0f 90       	pop	r0
    663c:	0f be       	out	0x3f, r0	; 63
    663e:	0f 90       	pop	r0
    6640:	1f 90       	pop	r1
    6642:	18 95       	reti

00006644 <__vector_4>:

//! Interrupt handler for OutputCompare2 match (OC2) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMP_vect)
{
    6644:	1f 92       	push	r1
    6646:	0f 92       	push	r0
    6648:	0f b6       	in	r0, 0x3f	; 63
    664a:	0f 92       	push	r0
    664c:	11 24       	eor	r1, r1
    664e:	2f 93       	push	r18
    6650:	3f 93       	push	r19
    6652:	4f 93       	push	r20
    6654:	5f 93       	push	r21
    6656:	6f 93       	push	r22
    6658:	7f 93       	push	r23
    665a:	8f 93       	push	r24
    665c:	9f 93       	push	r25
    665e:	af 93       	push	r26
    6660:	bf 93       	push	r27
    6662:	ef 93       	push	r30
    6664:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
    6666:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <TimerIntFunc+0xc>
    666a:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <TimerIntFunc+0xd>
    666e:	89 2b       	or	r24, r25
    6670:	29 f0       	breq	.+10     	; 0x667c <__vector_4+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
    6672:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <TimerIntFunc+0xc>
    6676:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <TimerIntFunc+0xd>
    667a:	09 95       	icall
}
    667c:	ff 91       	pop	r31
    667e:	ef 91       	pop	r30
    6680:	bf 91       	pop	r27
    6682:	af 91       	pop	r26
    6684:	9f 91       	pop	r25
    6686:	8f 91       	pop	r24
    6688:	7f 91       	pop	r23
    668a:	6f 91       	pop	r22
    668c:	5f 91       	pop	r21
    668e:	4f 91       	pop	r20
    6690:	3f 91       	pop	r19
    6692:	2f 91       	pop	r18
    6694:	0f 90       	pop	r0
    6696:	0f be       	out	0x3f, r0	; 63
    6698:	0f 90       	pop	r0
    669a:	1f 90       	pop	r1
    669c:	18 95       	reti

0000669e <uartInitBuffers>:
	else
	{
		// return failure
		return FALSE;
	}
}
    669e:	40 e4       	ldi	r20, 0x40	; 64
    66a0:	50 e0       	ldi	r21, 0x00	; 0
    66a2:	66 e1       	ldi	r22, 0x16	; 22
    66a4:	72 e0       	ldi	r23, 0x02	; 2
    66a6:	87 ea       	ldi	r24, 0xA7	; 167
    66a8:	94 e0       	ldi	r25, 0x04	; 4
    66aa:	0e 94 71 01 	call	0x2e2	; 0x2e2 <bufferInit>
    66ae:	40 e4       	ldi	r20, 0x40	; 64
    66b0:	50 e0       	ldi	r21, 0x00	; 0
    66b2:	66 ed       	ldi	r22, 0xD6	; 214
    66b4:	71 e0       	ldi	r23, 0x01	; 1
    66b6:	81 eb       	ldi	r24, 0xB1	; 177
    66b8:	94 e0       	ldi	r25, 0x04	; 4
    66ba:	0e 94 71 01 	call	0x2e2	; 0x2e2 <bufferInit>
    66be:	08 95       	ret

000066c0 <uartInit>:
    66c0:	0e 94 4f 33 	call	0x669e	; 0x669e <uartInitBuffers>
    66c4:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <UartRxFunc+0x1>
    66c8:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <UartRxFunc>
    66cc:	88 ed       	ldi	r24, 0xD8	; 216
    66ce:	8a b9       	out	0x0a, r24	; 10
    66d0:	86 e8       	ldi	r24, 0x86	; 134
    66d2:	80 bd       	out	0x20, r24	; 32
    66d4:	87 e6       	ldi	r24, 0x67	; 103
    66d6:	89 b9       	out	0x09, r24	; 9
    66d8:	10 bc       	out	0x20, r1	; 32
    66da:	81 e0       	ldi	r24, 0x01	; 1
    66dc:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <uartReadyTx>
    66e0:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <uartBufferedTx>
    66e4:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <uartRxOverflow+0x1>
    66e8:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <uartRxOverflow>
    66ec:	78 94       	sei
    66ee:	08 95       	ret

000066f0 <uartSetRxHandler>:
    66f0:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <UartRxFunc+0x1>
    66f4:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <UartRxFunc>
    66f8:	08 95       	ret

000066fa <uartSetBaudRate>:
    66fa:	0f 93       	push	r16
    66fc:	1f 93       	push	r17
    66fe:	8b 01       	movw	r16, r22
    6700:	9c 01       	movw	r18, r24
    6702:	dc 01       	movw	r26, r24
    6704:	cb 01       	movw	r24, r22
    6706:	80 58       	subi	r24, 0x80	; 128
    6708:	9b 47       	sbci	r25, 0x7B	; 123
    670a:	a1 4e       	sbci	r26, 0xE1	; 225
    670c:	bf 4f       	sbci	r27, 0xFF	; 255
    670e:	88 0f       	add	r24, r24
    6710:	99 1f       	adc	r25, r25
    6712:	aa 1f       	adc	r26, r26
    6714:	bb 1f       	adc	r27, r27
    6716:	88 0f       	add	r24, r24
    6718:	99 1f       	adc	r25, r25
    671a:	aa 1f       	adc	r26, r26
    671c:	bb 1f       	adc	r27, r27
    671e:	bc 01       	movw	r22, r24
    6720:	cd 01       	movw	r24, r26
    6722:	66 0f       	add	r22, r22
    6724:	77 1f       	adc	r23, r23
    6726:	88 1f       	adc	r24, r24
    6728:	99 1f       	adc	r25, r25
    672a:	00 0f       	add	r16, r16
    672c:	11 1f       	adc	r17, r17
    672e:	22 1f       	adc	r18, r18
    6730:	33 1f       	adc	r19, r19
    6732:	00 0f       	add	r16, r16
    6734:	11 1f       	adc	r17, r17
    6736:	22 1f       	adc	r18, r18
    6738:	33 1f       	adc	r19, r19
    673a:	a9 01       	movw	r20, r18
    673c:	98 01       	movw	r18, r16
    673e:	22 0f       	add	r18, r18
    6740:	33 1f       	adc	r19, r19
    6742:	44 1f       	adc	r20, r20
    6744:	55 1f       	adc	r21, r21
    6746:	22 0f       	add	r18, r18
    6748:	33 1f       	adc	r19, r19
    674a:	44 1f       	adc	r20, r20
    674c:	55 1f       	adc	r21, r21
    674e:	0e 94 20 36 	call	0x6c40	; 0x6c40 <__udivmodsi4>
    6752:	21 50       	subi	r18, 0x01	; 1
    6754:	31 09       	sbc	r19, r1
    6756:	29 b9       	out	0x09, r18	; 9
    6758:	30 bd       	out	0x20, r19	; 32
    675a:	1f 91       	pop	r17
    675c:	0f 91       	pop	r16
    675e:	08 95       	ret

00006760 <uartSendByte>:
    6760:	90 91 a6 04 	lds	r25, 0x04A6	; 0x8004a6 <uartReadyTx>
    6764:	99 23       	and	r25, r25
    6766:	e1 f3       	breq	.-8      	; 0x6760 <uartSendByte>
    6768:	8c b9       	out	0x0c, r24	; 12
    676a:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <uartReadyTx>
    676e:	08 95       	ret

00006770 <uartReceiveByte>:
    6770:	cf 93       	push	r28
    6772:	df 93       	push	r29
    6774:	20 91 a9 04 	lds	r18, 0x04A9	; 0x8004a9 <uartRxBuffer+0x2>
    6778:	30 91 aa 04 	lds	r19, 0x04AA	; 0x8004aa <uartRxBuffer+0x3>
    677c:	23 2b       	or	r18, r19
    677e:	71 f0       	breq	.+28     	; 0x679c <uartReceiveByte+0x2c>
    6780:	20 91 ab 04 	lds	r18, 0x04AB	; 0x8004ab <uartRxBuffer+0x4>
    6784:	30 91 ac 04 	lds	r19, 0x04AC	; 0x8004ac <uartRxBuffer+0x5>
    6788:	23 2b       	or	r18, r19
    678a:	51 f0       	breq	.+20     	; 0x67a0 <uartReceiveByte+0x30>
    678c:	ec 01       	movw	r28, r24
    678e:	87 ea       	ldi	r24, 0xA7	; 167
    6790:	94 e0       	ldi	r25, 0x04	; 4
    6792:	0e 94 7e 01 	call	0x2fc	; 0x2fc <bufferGetFromFront>
    6796:	88 83       	st	Y, r24
    6798:	81 e0       	ldi	r24, 0x01	; 1
    679a:	03 c0       	rjmp	.+6      	; 0x67a2 <uartReceiveByte+0x32>
    679c:	80 e0       	ldi	r24, 0x00	; 0
    679e:	01 c0       	rjmp	.+2      	; 0x67a2 <uartReceiveByte+0x32>
    67a0:	80 e0       	ldi	r24, 0x00	; 0
    67a2:	df 91       	pop	r29
    67a4:	cf 91       	pop	r28
    67a6:	08 95       	ret

000067a8 <uartGetByte>:
    67a8:	cf 93       	push	r28
    67aa:	df 93       	push	r29
    67ac:	1f 92       	push	r1
    67ae:	cd b7       	in	r28, 0x3d	; 61
    67b0:	de b7       	in	r29, 0x3e	; 62
    67b2:	ce 01       	movw	r24, r28
    67b4:	01 96       	adiw	r24, 0x01	; 1
    67b6:	0e 94 b8 33 	call	0x6770	; 0x6770 <uartReceiveByte>
    67ba:	88 23       	and	r24, r24
    67bc:	19 f0       	breq	.+6      	; 0x67c4 <uartGetByte+0x1c>
    67be:	89 81       	ldd	r24, Y+1	; 0x01
    67c0:	90 e0       	ldi	r25, 0x00	; 0
    67c2:	02 c0       	rjmp	.+4      	; 0x67c8 <uartGetByte+0x20>
    67c4:	8f ef       	ldi	r24, 0xFF	; 255
    67c6:	9f ef       	ldi	r25, 0xFF	; 255
    67c8:	0f 90       	pop	r0
    67ca:	df 91       	pop	r29
    67cc:	cf 91       	pop	r28
    67ce:	08 95       	ret

000067d0 <uartFlushReceiveBuffer>:
    67d0:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <uartRxBuffer+0x5>
    67d4:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <uartRxBuffer+0x4>
    67d8:	08 95       	ret

000067da <uartReceiveBufferIsEmpty>:
    67da:	81 e0       	ldi	r24, 0x01	; 1
    67dc:	20 91 ab 04 	lds	r18, 0x04AB	; 0x8004ab <uartRxBuffer+0x4>
    67e0:	30 91 ac 04 	lds	r19, 0x04AC	; 0x8004ac <uartRxBuffer+0x5>
    67e4:	23 2b       	or	r18, r19
    67e6:	09 f0       	breq	.+2      	; 0x67ea <uartReceiveBufferIsEmpty+0x10>
    67e8:	80 e0       	ldi	r24, 0x00	; 0
    67ea:	08 95       	ret

000067ec <__vector_15>:

// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(USART_TXC_vect)
{
    67ec:	1f 92       	push	r1
    67ee:	0f 92       	push	r0
    67f0:	0f b6       	in	r0, 0x3f	; 63
    67f2:	0f 92       	push	r0
    67f4:	11 24       	eor	r1, r1
    67f6:	2f 93       	push	r18
    67f8:	3f 93       	push	r19
    67fa:	4f 93       	push	r20
    67fc:	5f 93       	push	r21
    67fe:	6f 93       	push	r22
    6800:	7f 93       	push	r23
    6802:	8f 93       	push	r24
    6804:	9f 93       	push	r25
    6806:	af 93       	push	r26
    6808:	bf 93       	push	r27
    680a:	ef 93       	push	r30
    680c:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
    680e:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <uartBufferedTx>
    6812:	88 23       	and	r24, r24
    6814:	91 f0       	breq	.+36     	; 0x683a <__vector_15+0x4e>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
    6816:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <uartTxBuffer+0x4>
    681a:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <uartTxBuffer+0x5>
    681e:	89 2b       	or	r24, r25
    6820:	31 f0       	breq	.+12     	; 0x682e <__vector_15+0x42>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
    6822:	81 eb       	ldi	r24, 0xB1	; 177
    6824:	94 e0       	ldi	r25, 0x04	; 4
    6826:	0e 94 7e 01 	call	0x2fc	; 0x2fc <bufferGetFromFront>
    682a:	8c b9       	out	0x0c, r24	; 12
    682c:	09 c0       	rjmp	.+18     	; 0x6840 <__vector_15+0x54>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
    682e:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <uartBufferedTx>
			// return to ready state
			uartReadyTx = TRUE;
    6832:	81 e0       	ldi	r24, 0x01	; 1
    6834:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <uartReadyTx>
    6838:	03 c0       	rjmp	.+6      	; 0x6840 <__vector_15+0x54>
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
    683a:	81 e0       	ldi	r24, 0x01	; 1
    683c:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <uartReadyTx>
	}
}
    6840:	ff 91       	pop	r31
    6842:	ef 91       	pop	r30
    6844:	bf 91       	pop	r27
    6846:	af 91       	pop	r26
    6848:	9f 91       	pop	r25
    684a:	8f 91       	pop	r24
    684c:	7f 91       	pop	r23
    684e:	6f 91       	pop	r22
    6850:	5f 91       	pop	r21
    6852:	4f 91       	pop	r20
    6854:	3f 91       	pop	r19
    6856:	2f 91       	pop	r18
    6858:	0f 90       	pop	r0
    685a:	0f be       	out	0x3f, r0	; 63
    685c:	0f 90       	pop	r0
    685e:	1f 90       	pop	r1
    6860:	18 95       	reti

00006862 <__vector_13>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(USART_RXC_vect)
{
    6862:	1f 92       	push	r1
    6864:	0f 92       	push	r0
    6866:	0f b6       	in	r0, 0x3f	; 63
    6868:	0f 92       	push	r0
    686a:	11 24       	eor	r1, r1
    686c:	2f 93       	push	r18
    686e:	3f 93       	push	r19
    6870:	4f 93       	push	r20
    6872:	5f 93       	push	r21
    6874:	6f 93       	push	r22
    6876:	7f 93       	push	r23
    6878:	8f 93       	push	r24
    687a:	9f 93       	push	r25
    687c:	af 93       	push	r26
    687e:	bf 93       	push	r27
    6880:	ef 93       	push	r30
    6882:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
    6884:	8c b1       	in	r24, 0x0c	; 12
	
	// if there's a user function to handle this receive event
	if(UartRxFunc)
    6886:	20 91 d4 01 	lds	r18, 0x01D4	; 0x8001d4 <UartRxFunc>
    688a:	30 91 d5 01 	lds	r19, 0x01D5	; 0x8001d5 <UartRxFunc+0x1>
    688e:	23 2b       	or	r18, r19
    6890:	31 f0       	breq	.+12     	; 0x689e <__vector_13+0x3c>
	{
		// call it and pass the received data
		UartRxFunc(c);
    6892:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <UartRxFunc>
    6896:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <UartRxFunc+0x1>
    689a:	09 95       	icall
    689c:	10 c0       	rjmp	.+32     	; 0x68be <__vector_13+0x5c>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
    689e:	68 2f       	mov	r22, r24
    68a0:	87 ea       	ldi	r24, 0xA7	; 167
    68a2:	94 e0       	ldi	r25, 0x04	; 4
    68a4:	0e 94 a2 01 	call	0x344	; 0x344 <bufferAddToEnd>
    68a8:	81 11       	cpse	r24, r1
    68aa:	09 c0       	rjmp	.+18     	; 0x68be <__vector_13+0x5c>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
    68ac:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <uartRxOverflow>
    68b0:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <uartRxOverflow+0x1>
    68b4:	01 96       	adiw	r24, 0x01	; 1
    68b6:	90 93 ba 04 	sts	0x04BA, r25	; 0x8004ba <uartRxOverflow+0x1>
    68ba:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <uartRxOverflow>
		}
	}
}
    68be:	ff 91       	pop	r31
    68c0:	ef 91       	pop	r30
    68c2:	bf 91       	pop	r27
    68c4:	af 91       	pop	r26
    68c6:	9f 91       	pop	r25
    68c8:	8f 91       	pop	r24
    68ca:	7f 91       	pop	r23
    68cc:	6f 91       	pop	r22
    68ce:	5f 91       	pop	r21
    68d0:	4f 91       	pop	r20
    68d2:	3f 91       	pop	r19
    68d4:	2f 91       	pop	r18
    68d6:	0f 90       	pop	r0
    68d8:	0f be       	out	0x3f, r0	; 63
    68da:	0f 90       	pop	r0
    68dc:	1f 90       	pop	r1
    68de:	18 95       	reti

000068e0 <__divsf3>:
    68e0:	0e 94 84 34 	call	0x6908	; 0x6908 <__divsf3x>
    68e4:	0c 94 65 35 	jmp	0x6aca	; 0x6aca <__fp_round>
    68e8:	0e 94 5e 35 	call	0x6abc	; 0x6abc <__fp_pscB>
    68ec:	58 f0       	brcs	.+22     	; 0x6904 <__divsf3+0x24>
    68ee:	0e 94 57 35 	call	0x6aae	; 0x6aae <__fp_pscA>
    68f2:	40 f0       	brcs	.+16     	; 0x6904 <__divsf3+0x24>
    68f4:	29 f4       	brne	.+10     	; 0x6900 <__divsf3+0x20>
    68f6:	5f 3f       	cpi	r21, 0xFF	; 255
    68f8:	29 f0       	breq	.+10     	; 0x6904 <__divsf3+0x24>
    68fa:	0c 94 4e 35 	jmp	0x6a9c	; 0x6a9c <__fp_inf>
    68fe:	51 11       	cpse	r21, r1
    6900:	0c 94 99 35 	jmp	0x6b32	; 0x6b32 <__fp_szero>
    6904:	0c 94 54 35 	jmp	0x6aa8	; 0x6aa8 <__fp_nan>

00006908 <__divsf3x>:
    6908:	0e 94 76 35 	call	0x6aec	; 0x6aec <__fp_split3>
    690c:	68 f3       	brcs	.-38     	; 0x68e8 <__divsf3+0x8>

0000690e <__divsf3_pse>:
    690e:	99 23       	and	r25, r25
    6910:	b1 f3       	breq	.-20     	; 0x68fe <__divsf3+0x1e>
    6912:	55 23       	and	r21, r21
    6914:	91 f3       	breq	.-28     	; 0x68fa <__divsf3+0x1a>
    6916:	95 1b       	sub	r25, r21
    6918:	55 0b       	sbc	r21, r21
    691a:	bb 27       	eor	r27, r27
    691c:	aa 27       	eor	r26, r26
    691e:	62 17       	cp	r22, r18
    6920:	73 07       	cpc	r23, r19
    6922:	84 07       	cpc	r24, r20
    6924:	38 f0       	brcs	.+14     	; 0x6934 <__divsf3_pse+0x26>
    6926:	9f 5f       	subi	r25, 0xFF	; 255
    6928:	5f 4f       	sbci	r21, 0xFF	; 255
    692a:	22 0f       	add	r18, r18
    692c:	33 1f       	adc	r19, r19
    692e:	44 1f       	adc	r20, r20
    6930:	aa 1f       	adc	r26, r26
    6932:	a9 f3       	breq	.-22     	; 0x691e <__divsf3_pse+0x10>
    6934:	35 d0       	rcall	.+106    	; 0x69a0 <__divsf3_pse+0x92>
    6936:	0e 2e       	mov	r0, r30
    6938:	3a f0       	brmi	.+14     	; 0x6948 <__divsf3_pse+0x3a>
    693a:	e0 e8       	ldi	r30, 0x80	; 128
    693c:	32 d0       	rcall	.+100    	; 0x69a2 <__divsf3_pse+0x94>
    693e:	91 50       	subi	r25, 0x01	; 1
    6940:	50 40       	sbci	r21, 0x00	; 0
    6942:	e6 95       	lsr	r30
    6944:	00 1c       	adc	r0, r0
    6946:	ca f7       	brpl	.-14     	; 0x693a <__divsf3_pse+0x2c>
    6948:	2b d0       	rcall	.+86     	; 0x69a0 <__divsf3_pse+0x92>
    694a:	fe 2f       	mov	r31, r30
    694c:	29 d0       	rcall	.+82     	; 0x69a0 <__divsf3_pse+0x92>
    694e:	66 0f       	add	r22, r22
    6950:	77 1f       	adc	r23, r23
    6952:	88 1f       	adc	r24, r24
    6954:	bb 1f       	adc	r27, r27
    6956:	26 17       	cp	r18, r22
    6958:	37 07       	cpc	r19, r23
    695a:	48 07       	cpc	r20, r24
    695c:	ab 07       	cpc	r26, r27
    695e:	b0 e8       	ldi	r27, 0x80	; 128
    6960:	09 f0       	breq	.+2      	; 0x6964 <__divsf3_pse+0x56>
    6962:	bb 0b       	sbc	r27, r27
    6964:	80 2d       	mov	r24, r0
    6966:	bf 01       	movw	r22, r30
    6968:	ff 27       	eor	r31, r31
    696a:	93 58       	subi	r25, 0x83	; 131
    696c:	5f 4f       	sbci	r21, 0xFF	; 255
    696e:	3a f0       	brmi	.+14     	; 0x697e <__divsf3_pse+0x70>
    6970:	9e 3f       	cpi	r25, 0xFE	; 254
    6972:	51 05       	cpc	r21, r1
    6974:	78 f0       	brcs	.+30     	; 0x6994 <__divsf3_pse+0x86>
    6976:	0c 94 4e 35 	jmp	0x6a9c	; 0x6a9c <__fp_inf>
    697a:	0c 94 99 35 	jmp	0x6b32	; 0x6b32 <__fp_szero>
    697e:	5f 3f       	cpi	r21, 0xFF	; 255
    6980:	e4 f3       	brlt	.-8      	; 0x697a <__divsf3_pse+0x6c>
    6982:	98 3e       	cpi	r25, 0xE8	; 232
    6984:	d4 f3       	brlt	.-12     	; 0x697a <__divsf3_pse+0x6c>
    6986:	86 95       	lsr	r24
    6988:	77 95       	ror	r23
    698a:	67 95       	ror	r22
    698c:	b7 95       	ror	r27
    698e:	f7 95       	ror	r31
    6990:	9f 5f       	subi	r25, 0xFF	; 255
    6992:	c9 f7       	brne	.-14     	; 0x6986 <__divsf3_pse+0x78>
    6994:	88 0f       	add	r24, r24
    6996:	91 1d       	adc	r25, r1
    6998:	96 95       	lsr	r25
    699a:	87 95       	ror	r24
    699c:	97 f9       	bld	r25, 7
    699e:	08 95       	ret
    69a0:	e1 e0       	ldi	r30, 0x01	; 1
    69a2:	66 0f       	add	r22, r22
    69a4:	77 1f       	adc	r23, r23
    69a6:	88 1f       	adc	r24, r24
    69a8:	bb 1f       	adc	r27, r27
    69aa:	62 17       	cp	r22, r18
    69ac:	73 07       	cpc	r23, r19
    69ae:	84 07       	cpc	r24, r20
    69b0:	ba 07       	cpc	r27, r26
    69b2:	20 f0       	brcs	.+8      	; 0x69bc <__divsf3_pse+0xae>
    69b4:	62 1b       	sub	r22, r18
    69b6:	73 0b       	sbc	r23, r19
    69b8:	84 0b       	sbc	r24, r20
    69ba:	ba 0b       	sbc	r27, r26
    69bc:	ee 1f       	adc	r30, r30
    69be:	88 f7       	brcc	.-30     	; 0x69a2 <__divsf3_pse+0x94>
    69c0:	e0 95       	com	r30
    69c2:	08 95       	ret

000069c4 <__fixunssfsi>:
    69c4:	0e 94 7e 35 	call	0x6afc	; 0x6afc <__fp_splitA>
    69c8:	88 f0       	brcs	.+34     	; 0x69ec <__fixunssfsi+0x28>
    69ca:	9f 57       	subi	r25, 0x7F	; 127
    69cc:	98 f0       	brcs	.+38     	; 0x69f4 <__fixunssfsi+0x30>
    69ce:	b9 2f       	mov	r27, r25
    69d0:	99 27       	eor	r25, r25
    69d2:	b7 51       	subi	r27, 0x17	; 23
    69d4:	b0 f0       	brcs	.+44     	; 0x6a02 <__fixunssfsi+0x3e>
    69d6:	e1 f0       	breq	.+56     	; 0x6a10 <__fixunssfsi+0x4c>
    69d8:	66 0f       	add	r22, r22
    69da:	77 1f       	adc	r23, r23
    69dc:	88 1f       	adc	r24, r24
    69de:	99 1f       	adc	r25, r25
    69e0:	1a f0       	brmi	.+6      	; 0x69e8 <__fixunssfsi+0x24>
    69e2:	ba 95       	dec	r27
    69e4:	c9 f7       	brne	.-14     	; 0x69d8 <__fixunssfsi+0x14>
    69e6:	14 c0       	rjmp	.+40     	; 0x6a10 <__fixunssfsi+0x4c>
    69e8:	b1 30       	cpi	r27, 0x01	; 1
    69ea:	91 f0       	breq	.+36     	; 0x6a10 <__fixunssfsi+0x4c>
    69ec:	0e 94 98 35 	call	0x6b30	; 0x6b30 <__fp_zero>
    69f0:	b1 e0       	ldi	r27, 0x01	; 1
    69f2:	08 95       	ret
    69f4:	0c 94 98 35 	jmp	0x6b30	; 0x6b30 <__fp_zero>
    69f8:	67 2f       	mov	r22, r23
    69fa:	78 2f       	mov	r23, r24
    69fc:	88 27       	eor	r24, r24
    69fe:	b8 5f       	subi	r27, 0xF8	; 248
    6a00:	39 f0       	breq	.+14     	; 0x6a10 <__fixunssfsi+0x4c>
    6a02:	b9 3f       	cpi	r27, 0xF9	; 249
    6a04:	cc f3       	brlt	.-14     	; 0x69f8 <__fixunssfsi+0x34>
    6a06:	86 95       	lsr	r24
    6a08:	77 95       	ror	r23
    6a0a:	67 95       	ror	r22
    6a0c:	b3 95       	inc	r27
    6a0e:	d9 f7       	brne	.-10     	; 0x6a06 <__fixunssfsi+0x42>
    6a10:	3e f4       	brtc	.+14     	; 0x6a20 <__fixunssfsi+0x5c>
    6a12:	90 95       	com	r25
    6a14:	80 95       	com	r24
    6a16:	70 95       	com	r23
    6a18:	61 95       	neg	r22
    6a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    6a1c:	8f 4f       	sbci	r24, 0xFF	; 255
    6a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    6a20:	08 95       	ret

00006a22 <__floatunsisf>:
    6a22:	e8 94       	clt
    6a24:	09 c0       	rjmp	.+18     	; 0x6a38 <__floatsisf+0x12>

00006a26 <__floatsisf>:
    6a26:	97 fb       	bst	r25, 7
    6a28:	3e f4       	brtc	.+14     	; 0x6a38 <__floatsisf+0x12>
    6a2a:	90 95       	com	r25
    6a2c:	80 95       	com	r24
    6a2e:	70 95       	com	r23
    6a30:	61 95       	neg	r22
    6a32:	7f 4f       	sbci	r23, 0xFF	; 255
    6a34:	8f 4f       	sbci	r24, 0xFF	; 255
    6a36:	9f 4f       	sbci	r25, 0xFF	; 255
    6a38:	99 23       	and	r25, r25
    6a3a:	a9 f0       	breq	.+42     	; 0x6a66 <__floatsisf+0x40>
    6a3c:	f9 2f       	mov	r31, r25
    6a3e:	96 e9       	ldi	r25, 0x96	; 150
    6a40:	bb 27       	eor	r27, r27
    6a42:	93 95       	inc	r25
    6a44:	f6 95       	lsr	r31
    6a46:	87 95       	ror	r24
    6a48:	77 95       	ror	r23
    6a4a:	67 95       	ror	r22
    6a4c:	b7 95       	ror	r27
    6a4e:	f1 11       	cpse	r31, r1
    6a50:	f8 cf       	rjmp	.-16     	; 0x6a42 <__floatsisf+0x1c>
    6a52:	fa f4       	brpl	.+62     	; 0x6a92 <__floatsisf+0x6c>
    6a54:	bb 0f       	add	r27, r27
    6a56:	11 f4       	brne	.+4      	; 0x6a5c <__floatsisf+0x36>
    6a58:	60 ff       	sbrs	r22, 0
    6a5a:	1b c0       	rjmp	.+54     	; 0x6a92 <__floatsisf+0x6c>
    6a5c:	6f 5f       	subi	r22, 0xFF	; 255
    6a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    6a60:	8f 4f       	sbci	r24, 0xFF	; 255
    6a62:	9f 4f       	sbci	r25, 0xFF	; 255
    6a64:	16 c0       	rjmp	.+44     	; 0x6a92 <__floatsisf+0x6c>
    6a66:	88 23       	and	r24, r24
    6a68:	11 f0       	breq	.+4      	; 0x6a6e <__floatsisf+0x48>
    6a6a:	96 e9       	ldi	r25, 0x96	; 150
    6a6c:	11 c0       	rjmp	.+34     	; 0x6a90 <__floatsisf+0x6a>
    6a6e:	77 23       	and	r23, r23
    6a70:	21 f0       	breq	.+8      	; 0x6a7a <__floatsisf+0x54>
    6a72:	9e e8       	ldi	r25, 0x8E	; 142
    6a74:	87 2f       	mov	r24, r23
    6a76:	76 2f       	mov	r23, r22
    6a78:	05 c0       	rjmp	.+10     	; 0x6a84 <__floatsisf+0x5e>
    6a7a:	66 23       	and	r22, r22
    6a7c:	71 f0       	breq	.+28     	; 0x6a9a <__floatsisf+0x74>
    6a7e:	96 e8       	ldi	r25, 0x86	; 134
    6a80:	86 2f       	mov	r24, r22
    6a82:	70 e0       	ldi	r23, 0x00	; 0
    6a84:	60 e0       	ldi	r22, 0x00	; 0
    6a86:	2a f0       	brmi	.+10     	; 0x6a92 <__floatsisf+0x6c>
    6a88:	9a 95       	dec	r25
    6a8a:	66 0f       	add	r22, r22
    6a8c:	77 1f       	adc	r23, r23
    6a8e:	88 1f       	adc	r24, r24
    6a90:	da f7       	brpl	.-10     	; 0x6a88 <__floatsisf+0x62>
    6a92:	88 0f       	add	r24, r24
    6a94:	96 95       	lsr	r25
    6a96:	87 95       	ror	r24
    6a98:	97 f9       	bld	r25, 7
    6a9a:	08 95       	ret

00006a9c <__fp_inf>:
    6a9c:	97 f9       	bld	r25, 7
    6a9e:	9f 67       	ori	r25, 0x7F	; 127
    6aa0:	80 e8       	ldi	r24, 0x80	; 128
    6aa2:	70 e0       	ldi	r23, 0x00	; 0
    6aa4:	60 e0       	ldi	r22, 0x00	; 0
    6aa6:	08 95       	ret

00006aa8 <__fp_nan>:
    6aa8:	9f ef       	ldi	r25, 0xFF	; 255
    6aaa:	80 ec       	ldi	r24, 0xC0	; 192
    6aac:	08 95       	ret

00006aae <__fp_pscA>:
    6aae:	00 24       	eor	r0, r0
    6ab0:	0a 94       	dec	r0
    6ab2:	16 16       	cp	r1, r22
    6ab4:	17 06       	cpc	r1, r23
    6ab6:	18 06       	cpc	r1, r24
    6ab8:	09 06       	cpc	r0, r25
    6aba:	08 95       	ret

00006abc <__fp_pscB>:
    6abc:	00 24       	eor	r0, r0
    6abe:	0a 94       	dec	r0
    6ac0:	12 16       	cp	r1, r18
    6ac2:	13 06       	cpc	r1, r19
    6ac4:	14 06       	cpc	r1, r20
    6ac6:	05 06       	cpc	r0, r21
    6ac8:	08 95       	ret

00006aca <__fp_round>:
    6aca:	09 2e       	mov	r0, r25
    6acc:	03 94       	inc	r0
    6ace:	00 0c       	add	r0, r0
    6ad0:	11 f4       	brne	.+4      	; 0x6ad6 <__fp_round+0xc>
    6ad2:	88 23       	and	r24, r24
    6ad4:	52 f0       	brmi	.+20     	; 0x6aea <__fp_round+0x20>
    6ad6:	bb 0f       	add	r27, r27
    6ad8:	40 f4       	brcc	.+16     	; 0x6aea <__fp_round+0x20>
    6ada:	bf 2b       	or	r27, r31
    6adc:	11 f4       	brne	.+4      	; 0x6ae2 <__fp_round+0x18>
    6ade:	60 ff       	sbrs	r22, 0
    6ae0:	04 c0       	rjmp	.+8      	; 0x6aea <__fp_round+0x20>
    6ae2:	6f 5f       	subi	r22, 0xFF	; 255
    6ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    6ae6:	8f 4f       	sbci	r24, 0xFF	; 255
    6ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    6aea:	08 95       	ret

00006aec <__fp_split3>:
    6aec:	57 fd       	sbrc	r21, 7
    6aee:	90 58       	subi	r25, 0x80	; 128
    6af0:	44 0f       	add	r20, r20
    6af2:	55 1f       	adc	r21, r21
    6af4:	59 f0       	breq	.+22     	; 0x6b0c <__fp_splitA+0x10>
    6af6:	5f 3f       	cpi	r21, 0xFF	; 255
    6af8:	71 f0       	breq	.+28     	; 0x6b16 <__fp_splitA+0x1a>
    6afa:	47 95       	ror	r20

00006afc <__fp_splitA>:
    6afc:	88 0f       	add	r24, r24
    6afe:	97 fb       	bst	r25, 7
    6b00:	99 1f       	adc	r25, r25
    6b02:	61 f0       	breq	.+24     	; 0x6b1c <__fp_splitA+0x20>
    6b04:	9f 3f       	cpi	r25, 0xFF	; 255
    6b06:	79 f0       	breq	.+30     	; 0x6b26 <__fp_splitA+0x2a>
    6b08:	87 95       	ror	r24
    6b0a:	08 95       	ret
    6b0c:	12 16       	cp	r1, r18
    6b0e:	13 06       	cpc	r1, r19
    6b10:	14 06       	cpc	r1, r20
    6b12:	55 1f       	adc	r21, r21
    6b14:	f2 cf       	rjmp	.-28     	; 0x6afa <__fp_split3+0xe>
    6b16:	46 95       	lsr	r20
    6b18:	f1 df       	rcall	.-30     	; 0x6afc <__fp_splitA>
    6b1a:	08 c0       	rjmp	.+16     	; 0x6b2c <__fp_splitA+0x30>
    6b1c:	16 16       	cp	r1, r22
    6b1e:	17 06       	cpc	r1, r23
    6b20:	18 06       	cpc	r1, r24
    6b22:	99 1f       	adc	r25, r25
    6b24:	f1 cf       	rjmp	.-30     	; 0x6b08 <__fp_splitA+0xc>
    6b26:	86 95       	lsr	r24
    6b28:	71 05       	cpc	r23, r1
    6b2a:	61 05       	cpc	r22, r1
    6b2c:	08 94       	sec
    6b2e:	08 95       	ret

00006b30 <__fp_zero>:
    6b30:	e8 94       	clt

00006b32 <__fp_szero>:
    6b32:	bb 27       	eor	r27, r27
    6b34:	66 27       	eor	r22, r22
    6b36:	77 27       	eor	r23, r23
    6b38:	cb 01       	movw	r24, r22
    6b3a:	97 f9       	bld	r25, 7
    6b3c:	08 95       	ret

00006b3e <__mulsf3>:
    6b3e:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <__mulsf3x>
    6b42:	0c 94 65 35 	jmp	0x6aca	; 0x6aca <__fp_round>
    6b46:	0e 94 57 35 	call	0x6aae	; 0x6aae <__fp_pscA>
    6b4a:	38 f0       	brcs	.+14     	; 0x6b5a <__mulsf3+0x1c>
    6b4c:	0e 94 5e 35 	call	0x6abc	; 0x6abc <__fp_pscB>
    6b50:	20 f0       	brcs	.+8      	; 0x6b5a <__mulsf3+0x1c>
    6b52:	95 23       	and	r25, r21
    6b54:	11 f0       	breq	.+4      	; 0x6b5a <__mulsf3+0x1c>
    6b56:	0c 94 4e 35 	jmp	0x6a9c	; 0x6a9c <__fp_inf>
    6b5a:	0c 94 54 35 	jmp	0x6aa8	; 0x6aa8 <__fp_nan>
    6b5e:	11 24       	eor	r1, r1
    6b60:	0c 94 99 35 	jmp	0x6b32	; 0x6b32 <__fp_szero>

00006b64 <__mulsf3x>:
    6b64:	0e 94 76 35 	call	0x6aec	; 0x6aec <__fp_split3>
    6b68:	70 f3       	brcs	.-36     	; 0x6b46 <__mulsf3+0x8>

00006b6a <__mulsf3_pse>:
    6b6a:	95 9f       	mul	r25, r21
    6b6c:	c1 f3       	breq	.-16     	; 0x6b5e <__mulsf3+0x20>
    6b6e:	95 0f       	add	r25, r21
    6b70:	50 e0       	ldi	r21, 0x00	; 0
    6b72:	55 1f       	adc	r21, r21
    6b74:	62 9f       	mul	r22, r18
    6b76:	f0 01       	movw	r30, r0
    6b78:	72 9f       	mul	r23, r18
    6b7a:	bb 27       	eor	r27, r27
    6b7c:	f0 0d       	add	r31, r0
    6b7e:	b1 1d       	adc	r27, r1
    6b80:	63 9f       	mul	r22, r19
    6b82:	aa 27       	eor	r26, r26
    6b84:	f0 0d       	add	r31, r0
    6b86:	b1 1d       	adc	r27, r1
    6b88:	aa 1f       	adc	r26, r26
    6b8a:	64 9f       	mul	r22, r20
    6b8c:	66 27       	eor	r22, r22
    6b8e:	b0 0d       	add	r27, r0
    6b90:	a1 1d       	adc	r26, r1
    6b92:	66 1f       	adc	r22, r22
    6b94:	82 9f       	mul	r24, r18
    6b96:	22 27       	eor	r18, r18
    6b98:	b0 0d       	add	r27, r0
    6b9a:	a1 1d       	adc	r26, r1
    6b9c:	62 1f       	adc	r22, r18
    6b9e:	73 9f       	mul	r23, r19
    6ba0:	b0 0d       	add	r27, r0
    6ba2:	a1 1d       	adc	r26, r1
    6ba4:	62 1f       	adc	r22, r18
    6ba6:	83 9f       	mul	r24, r19
    6ba8:	a0 0d       	add	r26, r0
    6baa:	61 1d       	adc	r22, r1
    6bac:	22 1f       	adc	r18, r18
    6bae:	74 9f       	mul	r23, r20
    6bb0:	33 27       	eor	r19, r19
    6bb2:	a0 0d       	add	r26, r0
    6bb4:	61 1d       	adc	r22, r1
    6bb6:	23 1f       	adc	r18, r19
    6bb8:	84 9f       	mul	r24, r20
    6bba:	60 0d       	add	r22, r0
    6bbc:	21 1d       	adc	r18, r1
    6bbe:	82 2f       	mov	r24, r18
    6bc0:	76 2f       	mov	r23, r22
    6bc2:	6a 2f       	mov	r22, r26
    6bc4:	11 24       	eor	r1, r1
    6bc6:	9f 57       	subi	r25, 0x7F	; 127
    6bc8:	50 40       	sbci	r21, 0x00	; 0
    6bca:	9a f0       	brmi	.+38     	; 0x6bf2 <__mulsf3_pse+0x88>
    6bcc:	f1 f0       	breq	.+60     	; 0x6c0a <__mulsf3_pse+0xa0>
    6bce:	88 23       	and	r24, r24
    6bd0:	4a f0       	brmi	.+18     	; 0x6be4 <__mulsf3_pse+0x7a>
    6bd2:	ee 0f       	add	r30, r30
    6bd4:	ff 1f       	adc	r31, r31
    6bd6:	bb 1f       	adc	r27, r27
    6bd8:	66 1f       	adc	r22, r22
    6bda:	77 1f       	adc	r23, r23
    6bdc:	88 1f       	adc	r24, r24
    6bde:	91 50       	subi	r25, 0x01	; 1
    6be0:	50 40       	sbci	r21, 0x00	; 0
    6be2:	a9 f7       	brne	.-22     	; 0x6bce <__mulsf3_pse+0x64>
    6be4:	9e 3f       	cpi	r25, 0xFE	; 254
    6be6:	51 05       	cpc	r21, r1
    6be8:	80 f0       	brcs	.+32     	; 0x6c0a <__mulsf3_pse+0xa0>
    6bea:	0c 94 4e 35 	jmp	0x6a9c	; 0x6a9c <__fp_inf>
    6bee:	0c 94 99 35 	jmp	0x6b32	; 0x6b32 <__fp_szero>
    6bf2:	5f 3f       	cpi	r21, 0xFF	; 255
    6bf4:	e4 f3       	brlt	.-8      	; 0x6bee <__mulsf3_pse+0x84>
    6bf6:	98 3e       	cpi	r25, 0xE8	; 232
    6bf8:	d4 f3       	brlt	.-12     	; 0x6bee <__mulsf3_pse+0x84>
    6bfa:	86 95       	lsr	r24
    6bfc:	77 95       	ror	r23
    6bfe:	67 95       	ror	r22
    6c00:	b7 95       	ror	r27
    6c02:	f7 95       	ror	r31
    6c04:	e7 95       	ror	r30
    6c06:	9f 5f       	subi	r25, 0xFF	; 255
    6c08:	c1 f7       	brne	.-16     	; 0x6bfa <__mulsf3_pse+0x90>
    6c0a:	fe 2b       	or	r31, r30
    6c0c:	88 0f       	add	r24, r24
    6c0e:	91 1d       	adc	r25, r1
    6c10:	96 95       	lsr	r25
    6c12:	87 95       	ror	r24
    6c14:	97 f9       	bld	r25, 7
    6c16:	08 95       	ret

00006c18 <__udivmodhi4>:
    6c18:	aa 1b       	sub	r26, r26
    6c1a:	bb 1b       	sub	r27, r27
    6c1c:	51 e1       	ldi	r21, 0x11	; 17
    6c1e:	07 c0       	rjmp	.+14     	; 0x6c2e <__udivmodhi4_ep>

00006c20 <__udivmodhi4_loop>:
    6c20:	aa 1f       	adc	r26, r26
    6c22:	bb 1f       	adc	r27, r27
    6c24:	a6 17       	cp	r26, r22
    6c26:	b7 07       	cpc	r27, r23
    6c28:	10 f0       	brcs	.+4      	; 0x6c2e <__udivmodhi4_ep>
    6c2a:	a6 1b       	sub	r26, r22
    6c2c:	b7 0b       	sbc	r27, r23

00006c2e <__udivmodhi4_ep>:
    6c2e:	88 1f       	adc	r24, r24
    6c30:	99 1f       	adc	r25, r25
    6c32:	5a 95       	dec	r21
    6c34:	a9 f7       	brne	.-22     	; 0x6c20 <__udivmodhi4_loop>
    6c36:	80 95       	com	r24
    6c38:	90 95       	com	r25
    6c3a:	bc 01       	movw	r22, r24
    6c3c:	cd 01       	movw	r24, r26
    6c3e:	08 95       	ret

00006c40 <__udivmodsi4>:
    6c40:	a1 e2       	ldi	r26, 0x21	; 33
    6c42:	1a 2e       	mov	r1, r26
    6c44:	aa 1b       	sub	r26, r26
    6c46:	bb 1b       	sub	r27, r27
    6c48:	fd 01       	movw	r30, r26
    6c4a:	0d c0       	rjmp	.+26     	; 0x6c66 <__udivmodsi4_ep>

00006c4c <__udivmodsi4_loop>:
    6c4c:	aa 1f       	adc	r26, r26
    6c4e:	bb 1f       	adc	r27, r27
    6c50:	ee 1f       	adc	r30, r30
    6c52:	ff 1f       	adc	r31, r31
    6c54:	a2 17       	cp	r26, r18
    6c56:	b3 07       	cpc	r27, r19
    6c58:	e4 07       	cpc	r30, r20
    6c5a:	f5 07       	cpc	r31, r21
    6c5c:	20 f0       	brcs	.+8      	; 0x6c66 <__udivmodsi4_ep>
    6c5e:	a2 1b       	sub	r26, r18
    6c60:	b3 0b       	sbc	r27, r19
    6c62:	e4 0b       	sbc	r30, r20
    6c64:	f5 0b       	sbc	r31, r21

00006c66 <__udivmodsi4_ep>:
    6c66:	66 1f       	adc	r22, r22
    6c68:	77 1f       	adc	r23, r23
    6c6a:	88 1f       	adc	r24, r24
    6c6c:	99 1f       	adc	r25, r25
    6c6e:	1a 94       	dec	r1
    6c70:	69 f7       	brne	.-38     	; 0x6c4c <__udivmodsi4_loop>
    6c72:	60 95       	com	r22
    6c74:	70 95       	com	r23
    6c76:	80 95       	com	r24
    6c78:	90 95       	com	r25
    6c7a:	9b 01       	movw	r18, r22
    6c7c:	ac 01       	movw	r20, r24
    6c7e:	bd 01       	movw	r22, r26
    6c80:	cf 01       	movw	r24, r30
    6c82:	08 95       	ret

00006c84 <__divmodsi4>:
    6c84:	05 2e       	mov	r0, r21
    6c86:	97 fb       	bst	r25, 7
    6c88:	1e f4       	brtc	.+6      	; 0x6c90 <__divmodsi4+0xc>
    6c8a:	00 94       	com	r0
    6c8c:	0e 94 59 36 	call	0x6cb2	; 0x6cb2 <__negsi2>
    6c90:	57 fd       	sbrc	r21, 7
    6c92:	07 d0       	rcall	.+14     	; 0x6ca2 <__divmodsi4_neg2>
    6c94:	0e 94 20 36 	call	0x6c40	; 0x6c40 <__udivmodsi4>
    6c98:	07 fc       	sbrc	r0, 7
    6c9a:	03 d0       	rcall	.+6      	; 0x6ca2 <__divmodsi4_neg2>
    6c9c:	4e f4       	brtc	.+18     	; 0x6cb0 <__divmodsi4_exit>
    6c9e:	0c 94 59 36 	jmp	0x6cb2	; 0x6cb2 <__negsi2>

00006ca2 <__divmodsi4_neg2>:
    6ca2:	50 95       	com	r21
    6ca4:	40 95       	com	r20
    6ca6:	30 95       	com	r19
    6ca8:	21 95       	neg	r18
    6caa:	3f 4f       	sbci	r19, 0xFF	; 255
    6cac:	4f 4f       	sbci	r20, 0xFF	; 255
    6cae:	5f 4f       	sbci	r21, 0xFF	; 255

00006cb0 <__divmodsi4_exit>:
    6cb0:	08 95       	ret

00006cb2 <__negsi2>:
    6cb2:	90 95       	com	r25
    6cb4:	80 95       	com	r24
    6cb6:	70 95       	com	r23
    6cb8:	61 95       	neg	r22
    6cba:	7f 4f       	sbci	r23, 0xFF	; 255
    6cbc:	8f 4f       	sbci	r24, 0xFF	; 255
    6cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    6cc0:	08 95       	ret

00006cc2 <__tablejump2__>:
    6cc2:	ee 0f       	add	r30, r30
    6cc4:	ff 1f       	adc	r31, r31
    6cc6:	05 90       	lpm	r0, Z+
    6cc8:	f4 91       	lpm	r31, Z
    6cca:	e0 2d       	mov	r30, r0
    6ccc:	09 94       	ijmp

00006cce <__umulhisi3>:
    6cce:	a2 9f       	mul	r26, r18
    6cd0:	b0 01       	movw	r22, r0
    6cd2:	b3 9f       	mul	r27, r19
    6cd4:	c0 01       	movw	r24, r0
    6cd6:	a3 9f       	mul	r26, r19
    6cd8:	70 0d       	add	r23, r0
    6cda:	81 1d       	adc	r24, r1
    6cdc:	11 24       	eor	r1, r1
    6cde:	91 1d       	adc	r25, r1
    6ce0:	b2 9f       	mul	r27, r18
    6ce2:	70 0d       	add	r23, r0
    6ce4:	81 1d       	adc	r24, r1
    6ce6:	11 24       	eor	r1, r1
    6ce8:	91 1d       	adc	r25, r1
    6cea:	08 95       	ret

00006cec <__muluhisi3>:
    6cec:	0e 94 67 36 	call	0x6cce	; 0x6cce <__umulhisi3>
    6cf0:	a5 9f       	mul	r26, r21
    6cf2:	90 0d       	add	r25, r0
    6cf4:	b4 9f       	mul	r27, r20
    6cf6:	90 0d       	add	r25, r0
    6cf8:	a4 9f       	mul	r26, r20
    6cfa:	80 0d       	add	r24, r0
    6cfc:	91 1d       	adc	r25, r1
    6cfe:	11 24       	eor	r1, r1
    6d00:	08 95       	ret

00006d02 <malloc>:
    6d02:	0f 93       	push	r16
    6d04:	1f 93       	push	r17
    6d06:	cf 93       	push	r28
    6d08:	df 93       	push	r29
    6d0a:	82 30       	cpi	r24, 0x02	; 2
    6d0c:	91 05       	cpc	r25, r1
    6d0e:	10 f4       	brcc	.+4      	; 0x6d14 <malloc+0x12>
    6d10:	82 e0       	ldi	r24, 0x02	; 2
    6d12:	90 e0       	ldi	r25, 0x00	; 0
    6d14:	e0 91 bd 04 	lds	r30, 0x04BD	; 0x8004bd <__flp>
    6d18:	f0 91 be 04 	lds	r31, 0x04BE	; 0x8004be <__flp+0x1>
    6d1c:	20 e0       	ldi	r18, 0x00	; 0
    6d1e:	30 e0       	ldi	r19, 0x00	; 0
    6d20:	a0 e0       	ldi	r26, 0x00	; 0
    6d22:	b0 e0       	ldi	r27, 0x00	; 0
    6d24:	30 97       	sbiw	r30, 0x00	; 0
    6d26:	19 f1       	breq	.+70     	; 0x6d6e <malloc+0x6c>
    6d28:	40 81       	ld	r20, Z
    6d2a:	51 81       	ldd	r21, Z+1	; 0x01
    6d2c:	02 81       	ldd	r16, Z+2	; 0x02
    6d2e:	13 81       	ldd	r17, Z+3	; 0x03
    6d30:	48 17       	cp	r20, r24
    6d32:	59 07       	cpc	r21, r25
    6d34:	c8 f0       	brcs	.+50     	; 0x6d68 <malloc+0x66>
    6d36:	84 17       	cp	r24, r20
    6d38:	95 07       	cpc	r25, r21
    6d3a:	69 f4       	brne	.+26     	; 0x6d56 <malloc+0x54>
    6d3c:	10 97       	sbiw	r26, 0x00	; 0
    6d3e:	31 f0       	breq	.+12     	; 0x6d4c <malloc+0x4a>
    6d40:	12 96       	adiw	r26, 0x02	; 2
    6d42:	0c 93       	st	X, r16
    6d44:	12 97       	sbiw	r26, 0x02	; 2
    6d46:	13 96       	adiw	r26, 0x03	; 3
    6d48:	1c 93       	st	X, r17
    6d4a:	27 c0       	rjmp	.+78     	; 0x6d9a <malloc+0x98>
    6d4c:	00 93 bd 04 	sts	0x04BD, r16	; 0x8004bd <__flp>
    6d50:	10 93 be 04 	sts	0x04BE, r17	; 0x8004be <__flp+0x1>
    6d54:	22 c0       	rjmp	.+68     	; 0x6d9a <malloc+0x98>
    6d56:	21 15       	cp	r18, r1
    6d58:	31 05       	cpc	r19, r1
    6d5a:	19 f0       	breq	.+6      	; 0x6d62 <malloc+0x60>
    6d5c:	42 17       	cp	r20, r18
    6d5e:	53 07       	cpc	r21, r19
    6d60:	18 f4       	brcc	.+6      	; 0x6d68 <malloc+0x66>
    6d62:	9a 01       	movw	r18, r20
    6d64:	bd 01       	movw	r22, r26
    6d66:	ef 01       	movw	r28, r30
    6d68:	df 01       	movw	r26, r30
    6d6a:	f8 01       	movw	r30, r16
    6d6c:	db cf       	rjmp	.-74     	; 0x6d24 <malloc+0x22>
    6d6e:	21 15       	cp	r18, r1
    6d70:	31 05       	cpc	r19, r1
    6d72:	f9 f0       	breq	.+62     	; 0x6db2 <malloc+0xb0>
    6d74:	28 1b       	sub	r18, r24
    6d76:	39 0b       	sbc	r19, r25
    6d78:	24 30       	cpi	r18, 0x04	; 4
    6d7a:	31 05       	cpc	r19, r1
    6d7c:	80 f4       	brcc	.+32     	; 0x6d9e <malloc+0x9c>
    6d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    6d80:	9b 81       	ldd	r25, Y+3	; 0x03
    6d82:	61 15       	cp	r22, r1
    6d84:	71 05       	cpc	r23, r1
    6d86:	21 f0       	breq	.+8      	; 0x6d90 <malloc+0x8e>
    6d88:	fb 01       	movw	r30, r22
    6d8a:	93 83       	std	Z+3, r25	; 0x03
    6d8c:	82 83       	std	Z+2, r24	; 0x02
    6d8e:	04 c0       	rjmp	.+8      	; 0x6d98 <malloc+0x96>
    6d90:	90 93 be 04 	sts	0x04BE, r25	; 0x8004be <__flp+0x1>
    6d94:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <__flp>
    6d98:	fe 01       	movw	r30, r28
    6d9a:	32 96       	adiw	r30, 0x02	; 2
    6d9c:	44 c0       	rjmp	.+136    	; 0x6e26 <malloc+0x124>
    6d9e:	fe 01       	movw	r30, r28
    6da0:	e2 0f       	add	r30, r18
    6da2:	f3 1f       	adc	r31, r19
    6da4:	81 93       	st	Z+, r24
    6da6:	91 93       	st	Z+, r25
    6da8:	22 50       	subi	r18, 0x02	; 2
    6daa:	31 09       	sbc	r19, r1
    6dac:	39 83       	std	Y+1, r19	; 0x01
    6dae:	28 83       	st	Y, r18
    6db0:	3a c0       	rjmp	.+116    	; 0x6e26 <malloc+0x124>
    6db2:	20 91 bb 04 	lds	r18, 0x04BB	; 0x8004bb <__brkval>
    6db6:	30 91 bc 04 	lds	r19, 0x04BC	; 0x8004bc <__brkval+0x1>
    6dba:	23 2b       	or	r18, r19
    6dbc:	41 f4       	brne	.+16     	; 0x6dce <malloc+0xcc>
    6dbe:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    6dc2:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    6dc6:	30 93 bc 04 	sts	0x04BC, r19	; 0x8004bc <__brkval+0x1>
    6dca:	20 93 bb 04 	sts	0x04BB, r18	; 0x8004bb <__brkval>
    6dce:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
    6dd2:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
    6dd6:	21 15       	cp	r18, r1
    6dd8:	31 05       	cpc	r19, r1
    6dda:	41 f4       	brne	.+16     	; 0x6dec <malloc+0xea>
    6ddc:	2d b7       	in	r18, 0x3d	; 61
    6dde:	3e b7       	in	r19, 0x3e	; 62
    6de0:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    6de4:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    6de8:	24 1b       	sub	r18, r20
    6dea:	35 0b       	sbc	r19, r21
    6dec:	e0 91 bb 04 	lds	r30, 0x04BB	; 0x8004bb <__brkval>
    6df0:	f0 91 bc 04 	lds	r31, 0x04BC	; 0x8004bc <__brkval+0x1>
    6df4:	e2 17       	cp	r30, r18
    6df6:	f3 07       	cpc	r31, r19
    6df8:	a0 f4       	brcc	.+40     	; 0x6e22 <malloc+0x120>
    6dfa:	2e 1b       	sub	r18, r30
    6dfc:	3f 0b       	sbc	r19, r31
    6dfe:	28 17       	cp	r18, r24
    6e00:	39 07       	cpc	r19, r25
    6e02:	78 f0       	brcs	.+30     	; 0x6e22 <malloc+0x120>
    6e04:	ac 01       	movw	r20, r24
    6e06:	4e 5f       	subi	r20, 0xFE	; 254
    6e08:	5f 4f       	sbci	r21, 0xFF	; 255
    6e0a:	24 17       	cp	r18, r20
    6e0c:	35 07       	cpc	r19, r21
    6e0e:	48 f0       	brcs	.+18     	; 0x6e22 <malloc+0x120>
    6e10:	4e 0f       	add	r20, r30
    6e12:	5f 1f       	adc	r21, r31
    6e14:	50 93 bc 04 	sts	0x04BC, r21	; 0x8004bc <__brkval+0x1>
    6e18:	40 93 bb 04 	sts	0x04BB, r20	; 0x8004bb <__brkval>
    6e1c:	81 93       	st	Z+, r24
    6e1e:	91 93       	st	Z+, r25
    6e20:	02 c0       	rjmp	.+4      	; 0x6e26 <malloc+0x124>
    6e22:	e0 e0       	ldi	r30, 0x00	; 0
    6e24:	f0 e0       	ldi	r31, 0x00	; 0
    6e26:	cf 01       	movw	r24, r30
    6e28:	df 91       	pop	r29
    6e2a:	cf 91       	pop	r28
    6e2c:	1f 91       	pop	r17
    6e2e:	0f 91       	pop	r16
    6e30:	08 95       	ret

00006e32 <free>:
    6e32:	cf 93       	push	r28
    6e34:	df 93       	push	r29
    6e36:	00 97       	sbiw	r24, 0x00	; 0
    6e38:	09 f4       	brne	.+2      	; 0x6e3c <free+0xa>
    6e3a:	81 c0       	rjmp	.+258    	; 0x6f3e <free+0x10c>
    6e3c:	fc 01       	movw	r30, r24
    6e3e:	32 97       	sbiw	r30, 0x02	; 2
    6e40:	13 82       	std	Z+3, r1	; 0x03
    6e42:	12 82       	std	Z+2, r1	; 0x02
    6e44:	a0 91 bd 04 	lds	r26, 0x04BD	; 0x8004bd <__flp>
    6e48:	b0 91 be 04 	lds	r27, 0x04BE	; 0x8004be <__flp+0x1>
    6e4c:	10 97       	sbiw	r26, 0x00	; 0
    6e4e:	81 f4       	brne	.+32     	; 0x6e70 <free+0x3e>
    6e50:	20 81       	ld	r18, Z
    6e52:	31 81       	ldd	r19, Z+1	; 0x01
    6e54:	82 0f       	add	r24, r18
    6e56:	93 1f       	adc	r25, r19
    6e58:	20 91 bb 04 	lds	r18, 0x04BB	; 0x8004bb <__brkval>
    6e5c:	30 91 bc 04 	lds	r19, 0x04BC	; 0x8004bc <__brkval+0x1>
    6e60:	28 17       	cp	r18, r24
    6e62:	39 07       	cpc	r19, r25
    6e64:	51 f5       	brne	.+84     	; 0x6eba <free+0x88>
    6e66:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <__brkval+0x1>
    6e6a:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <__brkval>
    6e6e:	67 c0       	rjmp	.+206    	; 0x6f3e <free+0x10c>
    6e70:	ed 01       	movw	r28, r26
    6e72:	20 e0       	ldi	r18, 0x00	; 0
    6e74:	30 e0       	ldi	r19, 0x00	; 0
    6e76:	ce 17       	cp	r28, r30
    6e78:	df 07       	cpc	r29, r31
    6e7a:	40 f4       	brcc	.+16     	; 0x6e8c <free+0x5a>
    6e7c:	4a 81       	ldd	r20, Y+2	; 0x02
    6e7e:	5b 81       	ldd	r21, Y+3	; 0x03
    6e80:	9e 01       	movw	r18, r28
    6e82:	41 15       	cp	r20, r1
    6e84:	51 05       	cpc	r21, r1
    6e86:	f1 f0       	breq	.+60     	; 0x6ec4 <free+0x92>
    6e88:	ea 01       	movw	r28, r20
    6e8a:	f5 cf       	rjmp	.-22     	; 0x6e76 <free+0x44>
    6e8c:	d3 83       	std	Z+3, r29	; 0x03
    6e8e:	c2 83       	std	Z+2, r28	; 0x02
    6e90:	40 81       	ld	r20, Z
    6e92:	51 81       	ldd	r21, Z+1	; 0x01
    6e94:	84 0f       	add	r24, r20
    6e96:	95 1f       	adc	r25, r21
    6e98:	c8 17       	cp	r28, r24
    6e9a:	d9 07       	cpc	r29, r25
    6e9c:	59 f4       	brne	.+22     	; 0x6eb4 <free+0x82>
    6e9e:	88 81       	ld	r24, Y
    6ea0:	99 81       	ldd	r25, Y+1	; 0x01
    6ea2:	84 0f       	add	r24, r20
    6ea4:	95 1f       	adc	r25, r21
    6ea6:	02 96       	adiw	r24, 0x02	; 2
    6ea8:	91 83       	std	Z+1, r25	; 0x01
    6eaa:	80 83       	st	Z, r24
    6eac:	8a 81       	ldd	r24, Y+2	; 0x02
    6eae:	9b 81       	ldd	r25, Y+3	; 0x03
    6eb0:	93 83       	std	Z+3, r25	; 0x03
    6eb2:	82 83       	std	Z+2, r24	; 0x02
    6eb4:	21 15       	cp	r18, r1
    6eb6:	31 05       	cpc	r19, r1
    6eb8:	29 f4       	brne	.+10     	; 0x6ec4 <free+0x92>
    6eba:	f0 93 be 04 	sts	0x04BE, r31	; 0x8004be <__flp+0x1>
    6ebe:	e0 93 bd 04 	sts	0x04BD, r30	; 0x8004bd <__flp>
    6ec2:	3d c0       	rjmp	.+122    	; 0x6f3e <free+0x10c>
    6ec4:	e9 01       	movw	r28, r18
    6ec6:	fb 83       	std	Y+3, r31	; 0x03
    6ec8:	ea 83       	std	Y+2, r30	; 0x02
    6eca:	49 91       	ld	r20, Y+
    6ecc:	59 91       	ld	r21, Y+
    6ece:	c4 0f       	add	r28, r20
    6ed0:	d5 1f       	adc	r29, r21
    6ed2:	ec 17       	cp	r30, r28
    6ed4:	fd 07       	cpc	r31, r29
    6ed6:	61 f4       	brne	.+24     	; 0x6ef0 <free+0xbe>
    6ed8:	80 81       	ld	r24, Z
    6eda:	91 81       	ldd	r25, Z+1	; 0x01
    6edc:	84 0f       	add	r24, r20
    6ede:	95 1f       	adc	r25, r21
    6ee0:	02 96       	adiw	r24, 0x02	; 2
    6ee2:	e9 01       	movw	r28, r18
    6ee4:	99 83       	std	Y+1, r25	; 0x01
    6ee6:	88 83       	st	Y, r24
    6ee8:	82 81       	ldd	r24, Z+2	; 0x02
    6eea:	93 81       	ldd	r25, Z+3	; 0x03
    6eec:	9b 83       	std	Y+3, r25	; 0x03
    6eee:	8a 83       	std	Y+2, r24	; 0x02
    6ef0:	e0 e0       	ldi	r30, 0x00	; 0
    6ef2:	f0 e0       	ldi	r31, 0x00	; 0
    6ef4:	12 96       	adiw	r26, 0x02	; 2
    6ef6:	8d 91       	ld	r24, X+
    6ef8:	9c 91       	ld	r25, X
    6efa:	13 97       	sbiw	r26, 0x03	; 3
    6efc:	00 97       	sbiw	r24, 0x00	; 0
    6efe:	19 f0       	breq	.+6      	; 0x6f06 <free+0xd4>
    6f00:	fd 01       	movw	r30, r26
    6f02:	dc 01       	movw	r26, r24
    6f04:	f7 cf       	rjmp	.-18     	; 0x6ef4 <free+0xc2>
    6f06:	8d 91       	ld	r24, X+
    6f08:	9c 91       	ld	r25, X
    6f0a:	11 97       	sbiw	r26, 0x01	; 1
    6f0c:	9d 01       	movw	r18, r26
    6f0e:	2e 5f       	subi	r18, 0xFE	; 254
    6f10:	3f 4f       	sbci	r19, 0xFF	; 255
    6f12:	82 0f       	add	r24, r18
    6f14:	93 1f       	adc	r25, r19
    6f16:	20 91 bb 04 	lds	r18, 0x04BB	; 0x8004bb <__brkval>
    6f1a:	30 91 bc 04 	lds	r19, 0x04BC	; 0x8004bc <__brkval+0x1>
    6f1e:	28 17       	cp	r18, r24
    6f20:	39 07       	cpc	r19, r25
    6f22:	69 f4       	brne	.+26     	; 0x6f3e <free+0x10c>
    6f24:	30 97       	sbiw	r30, 0x00	; 0
    6f26:	29 f4       	brne	.+10     	; 0x6f32 <free+0x100>
    6f28:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <__flp+0x1>
    6f2c:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <__flp>
    6f30:	02 c0       	rjmp	.+4      	; 0x6f36 <free+0x104>
    6f32:	13 82       	std	Z+3, r1	; 0x03
    6f34:	12 82       	std	Z+2, r1	; 0x02
    6f36:	b0 93 bc 04 	sts	0x04BC, r27	; 0x8004bc <__brkval+0x1>
    6f3a:	a0 93 bb 04 	sts	0x04BB, r26	; 0x8004bb <__brkval>
    6f3e:	df 91       	pop	r29
    6f40:	cf 91       	pop	r28
    6f42:	08 95       	ret

00006f44 <strcmp>:
    6f44:	fb 01       	movw	r30, r22
    6f46:	dc 01       	movw	r26, r24
    6f48:	8d 91       	ld	r24, X+
    6f4a:	01 90       	ld	r0, Z+
    6f4c:	80 19       	sub	r24, r0
    6f4e:	01 10       	cpse	r0, r1
    6f50:	d9 f3       	breq	.-10     	; 0x6f48 <strcmp+0x4>
    6f52:	99 0b       	sbc	r25, r25
    6f54:	08 95       	ret

00006f56 <strcpy>:
    6f56:	fb 01       	movw	r30, r22
    6f58:	dc 01       	movw	r26, r24
    6f5a:	01 90       	ld	r0, Z+
    6f5c:	0d 92       	st	X+, r0
    6f5e:	00 20       	and	r0, r0
    6f60:	e1 f7       	brne	.-8      	; 0x6f5a <strcpy+0x4>
    6f62:	08 95       	ret

00006f64 <strncpy>:
    6f64:	fb 01       	movw	r30, r22
    6f66:	dc 01       	movw	r26, r24
    6f68:	41 50       	subi	r20, 0x01	; 1
    6f6a:	50 40       	sbci	r21, 0x00	; 0
    6f6c:	48 f0       	brcs	.+18     	; 0x6f80 <strncpy+0x1c>
    6f6e:	01 90       	ld	r0, Z+
    6f70:	0d 92       	st	X+, r0
    6f72:	00 20       	and	r0, r0
    6f74:	c9 f7       	brne	.-14     	; 0x6f68 <strncpy+0x4>
    6f76:	01 c0       	rjmp	.+2      	; 0x6f7a <strncpy+0x16>
    6f78:	1d 92       	st	X+, r1
    6f7a:	41 50       	subi	r20, 0x01	; 1
    6f7c:	50 40       	sbci	r21, 0x00	; 0
    6f7e:	e0 f7       	brcc	.-8      	; 0x6f78 <strncpy+0x14>
    6f80:	08 95       	ret

00006f82 <strstr>:
    6f82:	fb 01       	movw	r30, r22
    6f84:	51 91       	ld	r21, Z+
    6f86:	55 23       	and	r21, r21
    6f88:	a9 f0       	breq	.+42     	; 0x6fb4 <strstr+0x32>
    6f8a:	bf 01       	movw	r22, r30
    6f8c:	dc 01       	movw	r26, r24
    6f8e:	4d 91       	ld	r20, X+
    6f90:	45 17       	cp	r20, r21
    6f92:	41 11       	cpse	r20, r1
    6f94:	e1 f7       	brne	.-8      	; 0x6f8e <strstr+0xc>
    6f96:	59 f4       	brne	.+22     	; 0x6fae <strstr+0x2c>
    6f98:	cd 01       	movw	r24, r26
    6f9a:	01 90       	ld	r0, Z+
    6f9c:	00 20       	and	r0, r0
    6f9e:	49 f0       	breq	.+18     	; 0x6fb2 <strstr+0x30>
    6fa0:	4d 91       	ld	r20, X+
    6fa2:	40 15       	cp	r20, r0
    6fa4:	41 11       	cpse	r20, r1
    6fa6:	c9 f3       	breq	.-14     	; 0x6f9a <strstr+0x18>
    6fa8:	fb 01       	movw	r30, r22
    6faa:	41 11       	cpse	r20, r1
    6fac:	ef cf       	rjmp	.-34     	; 0x6f8c <strstr+0xa>
    6fae:	81 e0       	ldi	r24, 0x01	; 1
    6fb0:	90 e0       	ldi	r25, 0x00	; 0
    6fb2:	01 97       	sbiw	r24, 0x01	; 1
    6fb4:	08 95       	ret

00006fb6 <eeprom_read_block>:
    6fb6:	dc 01       	movw	r26, r24
    6fb8:	cb 01       	movw	r24, r22

00006fba <eeprom_read_blraw>:
    6fba:	fc 01       	movw	r30, r24
    6fbc:	e1 99       	sbic	0x1c, 1	; 28
    6fbe:	fe cf       	rjmp	.-4      	; 0x6fbc <eeprom_read_blraw+0x2>
    6fc0:	06 c0       	rjmp	.+12     	; 0x6fce <eeprom_read_blraw+0x14>
    6fc2:	ff bb       	out	0x1f, r31	; 31
    6fc4:	ee bb       	out	0x1e, r30	; 30
    6fc6:	e0 9a       	sbi	0x1c, 0	; 28
    6fc8:	31 96       	adiw	r30, 0x01	; 1
    6fca:	0d b2       	in	r0, 0x1d	; 29
    6fcc:	0d 92       	st	X+, r0
    6fce:	41 50       	subi	r20, 0x01	; 1
    6fd0:	50 40       	sbci	r21, 0x00	; 0
    6fd2:	b8 f7       	brcc	.-18     	; 0x6fc2 <eeprom_read_blraw+0x8>
    6fd4:	08 95       	ret

00006fd6 <_exit>:
    6fd6:	f8 94       	cli

00006fd8 <__stop_program>:
    6fd8:	ff cf       	rjmp	.-2      	; 0x6fd8 <__stop_program>
