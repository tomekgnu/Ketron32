
Ketron32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000073ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  000073ca  0000745e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000343  0080017c  0080017c  0000757a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000757a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000075ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008f8  00000000  00000000  000075e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ccce  00000000  00000000  00007ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000279e  00000000  00000000  00014bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000665d  00000000  00000000  0001734c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002284  00000000  00000000  0001d9ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b55  00000000  00000000  0001fc30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ca54  00000000  00000000  00021785  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000980  00000000  00000000  0002e1d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8d 01 	jmp	0x31a	; 0x31a <__ctors_end>
       4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
       8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
       c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      10:	0c 94 1a 35 	jmp	0x6a34	; 0x6a34 <__vector_4>
      14:	0c 94 26 34 	jmp	0x684c	; 0x684c <__vector_5>
      18:	0c 94 ed 34 	jmp	0x69da	; 0x69da <__vector_6>
      1c:	0c 94 93 34 	jmp	0x6926	; 0x6926 <__vector_7>
      20:	0c 94 c0 34 	jmp	0x6980	; 0x6980 <__vector_8>
      24:	0c 94 f9 33 	jmp	0x67f2	; 0x67f2 <__vector_9>
      28:	0c 94 66 34 	jmp	0x68cc	; 0x68cc <__vector_10>
      2c:	0c 94 a6 33 	jmp	0x674c	; 0x674c <__vector_11>
      30:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      34:	0c 94 29 36 	jmp	0x6c52	; 0x6c52 <__vector_13>
      38:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      3c:	0c 94 ee 35 	jmp	0x6bdc	; 0x6bdc <__vector_15>
      40:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_16>
      44:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      48:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      4c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      50:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      54:	b9 1d       	adc	r27, r9
      56:	6b 1f       	adc	r22, r27
      58:	ca 1d       	adc	r28, r10
      5a:	db 1d       	adc	r29, r11
      5c:	37 1e       	adc	r3, r23
      5e:	6a 1e       	adc	r6, r26
      60:	81 1e       	adc	r8, r17
      62:	be 1e       	adc	r11, r30
      64:	d5 1e       	adc	r13, r21
      66:	ad 1d       	adc	r26, r13
      68:	26 26       	eor	r2, r22
      6a:	4b 25       	eor	r20, r11
      6c:	44 25       	eor	r20, r4
      6e:	3d 25       	eor	r19, r13
      70:	36 25       	eor	r19, r6
      72:	2f 25       	eor	r18, r15
      74:	28 25       	eor	r18, r8
      76:	21 25       	eor	r18, r1
      78:	0c 27       	eor	r16, r28
      7a:	0c 27       	eor	r16, r28
      7c:	0c 27       	eor	r16, r28
      7e:	0c 27       	eor	r16, r28
      80:	0c 27       	eor	r16, r28
      82:	0c 27       	eor	r16, r28
      84:	0c 27       	eor	r16, r28
      86:	0c 27       	eor	r16, r28
      88:	0c 27       	eor	r16, r28
      8a:	0c 27       	eor	r16, r28
      8c:	0c 27       	eor	r16, r28
      8e:	0c 27       	eor	r16, r28
      90:	0c 27       	eor	r16, r28
      92:	0c 27       	eor	r16, r28
      94:	0c 27       	eor	r16, r28
      96:	0c 27       	eor	r16, r28
      98:	0c 27       	eor	r16, r28
      9a:	0c 27       	eor	r16, r28
      9c:	0c 27       	eor	r16, r28
      9e:	0c 27       	eor	r16, r28
      a0:	0c 27       	eor	r16, r28
      a2:	0c 27       	eor	r16, r28
      a4:	0c 27       	eor	r16, r28
      a6:	0c 27       	eor	r16, r28
      a8:	2d 26       	eor	r2, r29
      aa:	33 26       	eor	r3, r19
      ac:	0c 27       	eor	r16, r28
      ae:	0c 27       	eor	r16, r28
      b0:	0c 27       	eor	r16, r28
      b2:	0c 27       	eor	r16, r28
      b4:	0c 27       	eor	r16, r28
      b6:	0c 27       	eor	r16, r28
      b8:	0c 27       	eor	r16, r28
      ba:	0c 27       	eor	r16, r28
      bc:	0c 27       	eor	r16, r28
      be:	0c 27       	eor	r16, r28
      c0:	0c 27       	eor	r16, r28
      c2:	0c 27       	eor	r16, r28
      c4:	0c 27       	eor	r16, r28
      c6:	52 25       	eor	r21, r2
      c8:	0c 27       	eor	r16, r28
      ca:	0c 27       	eor	r16, r28
      cc:	0c 27       	eor	r16, r28
      ce:	0c 27       	eor	r16, r28
      d0:	0c 27       	eor	r16, r28
      d2:	0c 27       	eor	r16, r28
      d4:	0c 27       	eor	r16, r28
      d6:	0c 27       	eor	r16, r28
      d8:	0c 27       	eor	r16, r28
      da:	0c 27       	eor	r16, r28
      dc:	0c 27       	eor	r16, r28
      de:	0c 27       	eor	r16, r28
      e0:	0c 27       	eor	r16, r28
      e2:	0c 27       	eor	r16, r28
      e4:	0c 27       	eor	r16, r28
      e6:	0c 27       	eor	r16, r28
      e8:	0c 27       	eor	r16, r28
      ea:	0c 27       	eor	r16, r28
      ec:	0c 27       	eor	r16, r28
      ee:	0c 27       	eor	r16, r28
      f0:	0c 27       	eor	r16, r28
      f2:	0c 27       	eor	r16, r28
      f4:	0c 27       	eor	r16, r28
      f6:	0c 27       	eor	r16, r28
      f8:	0c 27       	eor	r16, r28
      fa:	0c 27       	eor	r16, r28
      fc:	0c 27       	eor	r16, r28
      fe:	0c 27       	eor	r16, r28
     100:	0c 27       	eor	r16, r28
     102:	0c 27       	eor	r16, r28
     104:	0c 27       	eor	r16, r28
     106:	0c 27       	eor	r16, r28
     108:	0c 27       	eor	r16, r28
     10a:	57 25       	eor	r21, r7
     10c:	0c 27       	eor	r16, r28
     10e:	0c 27       	eor	r16, r28
     110:	1a 25       	eor	r17, r10
     112:	0c 27       	eor	r16, r28
     114:	0c 27       	eor	r16, r28
     116:	0c 27       	eor	r16, r28
     118:	69 25       	eor	r22, r9
     11a:	a6 25       	eor	r26, r6
     11c:	0c 27       	eor	r16, r28
     11e:	0c 27       	eor	r16, r28
     120:	0c 27       	eor	r16, r28
     122:	0c 27       	eor	r16, r28
     124:	0c 27       	eor	r16, r28
     126:	0c 27       	eor	r16, r28
     128:	0c 27       	eor	r16, r28
     12a:	0c 27       	eor	r16, r28
     12c:	0c 27       	eor	r16, r28
     12e:	0c 27       	eor	r16, r28
     130:	0c 27       	eor	r16, r28
     132:	0c 27       	eor	r16, r28
     134:	0c 27       	eor	r16, r28
     136:	0c 27       	eor	r16, r28
     138:	0c 27       	eor	r16, r28
     13a:	0c 27       	eor	r16, r28
     13c:	0c 27       	eor	r16, r28
     13e:	0c 27       	eor	r16, r28
     140:	0c 27       	eor	r16, r28
     142:	0c 27       	eor	r16, r28
     144:	0c 27       	eor	r16, r28
     146:	0c 27       	eor	r16, r28
     148:	0c 27       	eor	r16, r28
     14a:	0c 27       	eor	r16, r28
     14c:	0c 27       	eor	r16, r28
     14e:	0c 27       	eor	r16, r28
     150:	0c 27       	eor	r16, r28
     152:	0c 27       	eor	r16, r28
     154:	0c 27       	eor	r16, r28
     156:	0c 27       	eor	r16, r28
     158:	0c 27       	eor	r16, r28
     15a:	0c 27       	eor	r16, r28
     15c:	0c 27       	eor	r16, r28
     15e:	0c 27       	eor	r16, r28
     160:	0c 27       	eor	r16, r28
     162:	0c 27       	eor	r16, r28
     164:	0c 27       	eor	r16, r28
     166:	13 25       	eor	r17, r3
     168:	f9 28       	or	r15, r9
     16a:	fb 28       	or	r15, r11
     16c:	fb 28       	or	r15, r11
     16e:	fb 28       	or	r15, r11
     170:	fb 28       	or	r15, r11
     172:	fb 28       	or	r15, r11
     174:	fb 28       	or	r15, r11
     176:	fb 28       	or	r15, r11
     178:	fb 28       	or	r15, r11
     17a:	fb 28       	or	r15, r11
     17c:	fb 28       	or	r15, r11
     17e:	fb 28       	or	r15, r11
     180:	fb 28       	or	r15, r11
     182:	fb 28       	or	r15, r11
     184:	fb 28       	or	r15, r11
     186:	fb 28       	or	r15, r11
     188:	f9 28       	or	r15, r9
     18a:	fb 28       	or	r15, r11
     18c:	fb 28       	or	r15, r11
     18e:	fb 28       	or	r15, r11
     190:	fb 28       	or	r15, r11
     192:	fb 28       	or	r15, r11
     194:	fb 28       	or	r15, r11
     196:	fb 28       	or	r15, r11
     198:	fb 28       	or	r15, r11
     19a:	fb 28       	or	r15, r11
     19c:	fb 28       	or	r15, r11
     19e:	fb 28       	or	r15, r11
     1a0:	fb 28       	or	r15, r11
     1a2:	fb 28       	or	r15, r11
     1a4:	fb 28       	or	r15, r11
     1a6:	fb 28       	or	r15, r11
     1a8:	f9 28       	or	r15, r9
     1aa:	fb 28       	or	r15, r11
     1ac:	fb 28       	or	r15, r11
     1ae:	fb 28       	or	r15, r11
     1b0:	fb 28       	or	r15, r11
     1b2:	fb 28       	or	r15, r11
     1b4:	fb 28       	or	r15, r11
     1b6:	fb 28       	or	r15, r11
     1b8:	fb 28       	or	r15, r11
     1ba:	fb 28       	or	r15, r11
     1bc:	fb 28       	or	r15, r11
     1be:	fb 28       	or	r15, r11
     1c0:	fb 28       	or	r15, r11
     1c2:	fb 28       	or	r15, r11
     1c4:	fb 28       	or	r15, r11
     1c6:	fb 28       	or	r15, r11
     1c8:	f9 28       	or	r15, r9
     1ca:	fb 28       	or	r15, r11
     1cc:	fb 28       	or	r15, r11
     1ce:	fb 28       	or	r15, r11
     1d0:	fb 28       	or	r15, r11
     1d2:	fb 28       	or	r15, r11
     1d4:	fb 28       	or	r15, r11
     1d6:	fb 28       	or	r15, r11
     1d8:	fb 28       	or	r15, r11
     1da:	fb 28       	or	r15, r11
     1dc:	fb 28       	or	r15, r11
     1de:	fb 28       	or	r15, r11
     1e0:	fb 28       	or	r15, r11
     1e2:	fb 28       	or	r15, r11
     1e4:	fb 28       	or	r15, r11
     1e6:	fb 28       	or	r15, r11
     1e8:	f7 28       	or	r15, r7
     1ea:	fb 28       	or	r15, r11
     1ec:	fb 28       	or	r15, r11
     1ee:	fb 28       	or	r15, r11
     1f0:	fb 28       	or	r15, r11
     1f2:	fb 28       	or	r15, r11
     1f4:	fb 28       	or	r15, r11
     1f6:	fb 28       	or	r15, r11
     1f8:	fb 28       	or	r15, r11
     1fa:	fb 28       	or	r15, r11
     1fc:	fb 28       	or	r15, r11
     1fe:	fb 28       	or	r15, r11
     200:	fb 28       	or	r15, r11
     202:	fb 28       	or	r15, r11
     204:	fb 28       	or	r15, r11
     206:	fb 28       	or	r15, r11
     208:	f7 28       	or	r15, r7
     20a:	fb 28       	or	r15, r11
     20c:	fb 28       	or	r15, r11
     20e:	fb 28       	or	r15, r11
     210:	fb 28       	or	r15, r11
     212:	fb 28       	or	r15, r11
     214:	fb 28       	or	r15, r11
     216:	fb 28       	or	r15, r11
     218:	fb 28       	or	r15, r11
     21a:	fb 28       	or	r15, r11
     21c:	fb 28       	or	r15, r11
     21e:	fb 28       	or	r15, r11
     220:	fb 28       	or	r15, r11
     222:	fb 28       	or	r15, r11
     224:	fb 28       	or	r15, r11
     226:	fb 28       	or	r15, r11
     228:	f9 28       	or	r15, r9
     22a:	fb 28       	or	r15, r11
     22c:	fb 28       	or	r15, r11
     22e:	fb 28       	or	r15, r11
     230:	fb 28       	or	r15, r11
     232:	fb 28       	or	r15, r11
     234:	fb 28       	or	r15, r11
     236:	fb 28       	or	r15, r11
     238:	fb 28       	or	r15, r11
     23a:	fb 28       	or	r15, r11
     23c:	fb 28       	or	r15, r11
     23e:	fb 28       	or	r15, r11
     240:	fb 28       	or	r15, r11
     242:	fb 28       	or	r15, r11
     244:	fb 28       	or	r15, r11
     246:	fb 28       	or	r15, r11
     248:	fb 28       	or	r15, r11
     24a:	f7 28       	or	r15, r7
     24c:	f9 28       	or	r15, r9
     24e:	f7 28       	or	r15, r7
     250:	fb 28       	or	r15, r11
     252:	fb 28       	or	r15, r11
     254:	fd 28       	or	r15, r13
     256:	fb 28       	or	r15, r11
     258:	fd 28       	or	r15, r13
     25a:	fd 28       	or	r15, r13
     25c:	fd 28       	or	r15, r13
     25e:	fd 28       	or	r15, r13
     260:	fd 28       	or	r15, r13
     262:	fb 28       	or	r15, r11
     264:	fd 28       	or	r15, r13
     266:	fd 28       	or	r15, r13
     268:	45 2c       	mov	r4, r5
     26a:	4e 2c       	mov	r4, r14
     26c:	b5 2c       	mov	r11, r5
     26e:	bc 2c       	mov	r11, r12
     270:	a0 2d       	mov	r26, r0
     272:	a0 2d       	mov	r26, r0
     274:	a0 2d       	mov	r26, r0
     276:	a0 2d       	mov	r26, r0
     278:	a0 2d       	mov	r26, r0
     27a:	a0 2d       	mov	r26, r0
     27c:	4b 2d       	mov	r20, r11
     27e:	51 2d       	mov	r21, r1
     280:	64 2d       	mov	r22, r4
     282:	77 2d       	mov	r23, r7
     284:	8c 2d       	mov	r24, r12

00000286 <LcdCustomChar>:
     286:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     296:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     2a6:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     2b6:	03 07 0f 1f 0f 07 03 00 00 1f 1f 1f 1f 1f 1f 00     ................
     2c6:	1b 1b 1b 1b 1b 1b 1b 00 18 1c 1e 1f 1e 1c 18 00     ................
     2d6:	00 04 04 0e 0e 1f 1f 00 00 1f 1f 0e 0e 04 04 00     ................
	...
     2ee:	00 0e 19 15 13 0e 00 00 00 0e 15 15 15 0e 00 00     ................
     2fe:	00 0e 13 15 19 0e 00 00 00 0e 11 1f 11 0e 00 00     ................

0000030e <TimerPrescaleFactor>:
     30e:	00 00 01 00 08 00 40 00 00 01 00 04                 ......@.....

0000031a <__ctors_end>:
     31a:	11 24       	eor	r1, r1
     31c:	1f be       	out	0x3f, r1	; 63
     31e:	cf e5       	ldi	r28, 0x5F	; 95
     320:	d8 e0       	ldi	r29, 0x08	; 8
     322:	de bf       	out	0x3e, r29	; 62
     324:	cd bf       	out	0x3d, r28	; 61

00000326 <__do_copy_data>:
     326:	11 e0       	ldi	r17, 0x01	; 1
     328:	a0 e6       	ldi	r26, 0x60	; 96
     32a:	b0 e0       	ldi	r27, 0x00	; 0
     32c:	ea ec       	ldi	r30, 0xCA	; 202
     32e:	f3 e7       	ldi	r31, 0x73	; 115
     330:	02 c0       	rjmp	.+4      	; 0x336 <__do_copy_data+0x10>
     332:	05 90       	lpm	r0, Z+
     334:	0d 92       	st	X+, r0
     336:	ac 37       	cpi	r26, 0x7C	; 124
     338:	b1 07       	cpc	r27, r17
     33a:	d9 f7       	brne	.-10     	; 0x332 <__do_copy_data+0xc>

0000033c <__do_clear_bss>:
     33c:	24 e0       	ldi	r18, 0x04	; 4
     33e:	ac e7       	ldi	r26, 0x7C	; 124
     340:	b1 e0       	ldi	r27, 0x01	; 1
     342:	01 c0       	rjmp	.+2      	; 0x346 <.do_clear_bss_start>

00000344 <.do_clear_bss_loop>:
     344:	1d 92       	st	X+, r1

00000346 <.do_clear_bss_start>:
     346:	af 3b       	cpi	r26, 0xBF	; 191
     348:	b2 07       	cpc	r27, r18
     34a:	e1 f7       	brne	.-8      	; 0x344 <.do_clear_bss_loop>
     34c:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <main>
     350:	0c 94 e3 39 	jmp	0x73c6	; 0x73c6 <_exit>

00000354 <__bad_interrupt>:
     354:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000358 <a2dSetPrescaler>:

// return TRUE if conversion is complete
u08 a2dIsComplete(void)
{
	return bit_is_set(ADCSR, ADSC);
}
     358:	96 b1       	in	r25, 0x06	; 6
     35a:	98 7f       	andi	r25, 0xF8	; 248
     35c:	89 2b       	or	r24, r25
     35e:	86 b9       	out	0x06, r24	; 6
     360:	08 95       	ret

00000362 <a2dSetReference>:
     362:	27 b1       	in	r18, 0x07	; 7
     364:	2f 73       	andi	r18, 0x3F	; 63
     366:	30 e4       	ldi	r19, 0x40	; 64
     368:	83 9f       	mul	r24, r19
     36a:	c0 01       	movw	r24, r0
     36c:	11 24       	eor	r1, r1
     36e:	82 2b       	or	r24, r18
     370:	87 b9       	out	0x07, r24	; 7
     372:	08 95       	ret

00000374 <a2dInit>:
     374:	37 9a       	sbi	0x06, 7	; 6
     376:	35 98       	cbi	0x06, 5	; 6
     378:	86 e0       	ldi	r24, 0x06	; 6
     37a:	0e 94 ac 01 	call	0x358	; 0x358 <a2dSetPrescaler>
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	0e 94 b1 01 	call	0x362	; 0x362 <a2dSetReference>
     384:	3d 98       	cbi	0x07, 5	; 7
     386:	33 9a       	sbi	0x06, 3	; 6
     388:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <a2dCompleteFlag>
     38c:	78 94       	sei
     38e:	08 95       	ret

00000390 <a2dSetChannel>:
     390:	97 b1       	in	r25, 0x07	; 7
     392:	90 7e       	andi	r25, 0xE0	; 224
     394:	8f 71       	andi	r24, 0x1F	; 31
     396:	89 2b       	or	r24, r25
     398:	87 b9       	out	0x07, r24	; 7
     39a:	08 95       	ret

0000039c <a2dStartConvert>:
     39c:	34 9a       	sbi	0x06, 4	; 6
     39e:	36 9a       	sbi	0x06, 6	; 6
     3a0:	08 95       	ret

000003a2 <a2dConvert10bit>:

// Perform a 10-bit conversion
// starts conversion, waits until conversion is done, and returns result
unsigned short a2dConvert10bit(unsigned char ch)
{
	a2dCompleteFlag = FALSE;				// clear conversion complete flag
     3a2:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <a2dCompleteFlag>
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
     3a6:	97 b1       	in	r25, 0x07	; 7
     3a8:	90 7e       	andi	r25, 0xE0	; 224
     3aa:	8f 71       	andi	r24, 0x1F	; 31
     3ac:	89 2b       	or	r24, r25
     3ae:	87 b9       	out	0x07, r24	; 7
	sbi(ADCSR, ADIF);						// clear hardware "conversion complete" flag 
     3b0:	34 9a       	sbi	0x06, 4	; 6
	sbi(ADCSR, ADSC);						// start conversion
     3b2:	36 9a       	sbi	0x06, 6	; 6
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSR, ADSC) );		// wait until conversion complete
     3b4:	36 99       	sbic	0x06, 6	; 6
     3b6:	fe cf       	rjmp	.-4      	; 0x3b4 <a2dConvert10bit+0x12>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	return (inb(ADCL) | (inb(ADCH)<<8));	// read ADC (full 10 bits);
     3b8:	84 b1       	in	r24, 0x04	; 4
     3ba:	25 b1       	in	r18, 0x05	; 5
     3bc:	90 e0       	ldi	r25, 0x00	; 0
}
     3be:	92 2b       	or	r25, r18
     3c0:	08 95       	ret

000003c2 <a2dConvert8bit>:
// Perform a 8-bit conversion.
// starts conversion, waits until conversion is done, and returns result
unsigned char a2dConvert8bit(unsigned char ch)
{
	// do 10-bit conversion and return highest 8 bits
	return a2dConvert10bit(ch)>>2;			// return ADC MSB byte
     3c2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <a2dConvert10bit>
     3c6:	96 95       	lsr	r25
     3c8:	87 95       	ror	r24
     3ca:	96 95       	lsr	r25
     3cc:	87 95       	ror	r24
}
     3ce:	08 95       	ret

000003d0 <__vector_16>:

//! Interrupt handler for ADC complete interrupt.
SIGNAL(ADC_vect)
{
     3d0:	1f 92       	push	r1
     3d2:	0f 92       	push	r0
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	0f 92       	push	r0
     3d8:	11 24       	eor	r1, r1
     3da:	8f 93       	push	r24
	// set the a2d conversion flag to indicate "complete"
	a2dCompleteFlag = TRUE;
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <a2dCompleteFlag>
	
}
     3e2:	8f 91       	pop	r24
     3e4:	0f 90       	pop	r0
     3e6:	0f be       	out	0x3f, r0	; 63
     3e8:	0f 90       	pop	r0
     3ea:	1f 90       	pop	r1
     3ec:	18 95       	reti

000003ee <bufferInit>:
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
	return data;
}
     3ee:	fc 01       	movw	r30, r24
     3f0:	8f b7       	in	r24, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	71 83       	std	Z+1, r23	; 0x01
     3f6:	60 83       	st	Z, r22
     3f8:	53 83       	std	Z+3, r21	; 0x03
     3fa:	42 83       	std	Z+2, r20	; 0x02
     3fc:	17 82       	std	Z+7, r1	; 0x07
     3fe:	16 82       	std	Z+6, r1	; 0x06
     400:	15 82       	std	Z+5, r1	; 0x05
     402:	14 82       	std	Z+4, r1	; 0x04
     404:	8f bf       	out	0x3f, r24	; 63
     406:	08 95       	ret

00000408 <bufferGetFromFront>:
     408:	fc 01       	movw	r30, r24
     40a:	9f b7       	in	r25, 0x3f	; 63
     40c:	f8 94       	cli
     40e:	44 81       	ldd	r20, Z+4	; 0x04
     410:	55 81       	ldd	r21, Z+5	; 0x05
     412:	41 15       	cp	r20, r1
     414:	51 05       	cpc	r21, r1
     416:	c9 f0       	breq	.+50     	; 0x44a <bufferGetFromFront+0x42>
     418:	26 81       	ldd	r18, Z+6	; 0x06
     41a:	37 81       	ldd	r19, Z+7	; 0x07
     41c:	a0 81       	ld	r26, Z
     41e:	b1 81       	ldd	r27, Z+1	; 0x01
     420:	a2 0f       	add	r26, r18
     422:	b3 1f       	adc	r27, r19
     424:	8c 91       	ld	r24, X
     426:	2f 5f       	subi	r18, 0xFF	; 255
     428:	3f 4f       	sbci	r19, 0xFF	; 255
     42a:	37 83       	std	Z+7, r19	; 0x07
     42c:	26 83       	std	Z+6, r18	; 0x06
     42e:	62 81       	ldd	r22, Z+2	; 0x02
     430:	73 81       	ldd	r23, Z+3	; 0x03
     432:	26 17       	cp	r18, r22
     434:	37 07       	cpc	r19, r23
     436:	20 f0       	brcs	.+8      	; 0x440 <bufferGetFromFront+0x38>
     438:	26 1b       	sub	r18, r22
     43a:	37 0b       	sbc	r19, r23
     43c:	37 83       	std	Z+7, r19	; 0x07
     43e:	26 83       	std	Z+6, r18	; 0x06
     440:	41 50       	subi	r20, 0x01	; 1
     442:	51 09       	sbc	r21, r1
     444:	55 83       	std	Z+5, r21	; 0x05
     446:	44 83       	std	Z+4, r20	; 0x04
     448:	01 c0       	rjmp	.+2      	; 0x44c <bufferGetFromFront+0x44>
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	9f bf       	out	0x3f, r25	; 63
     44e:	08 95       	ret

00000450 <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     450:	cf 93       	push	r28
     452:	fc 01       	movw	r30, r24
     454:	c6 2f       	mov	r28, r22
	// begin critical section
	CRITICAL_SECTION_START;
     456:	4f b7       	in	r20, 0x3f	; 63
     458:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     45a:	24 81       	ldd	r18, Z+4	; 0x04
     45c:	35 81       	ldd	r19, Z+5	; 0x05
     45e:	62 81       	ldd	r22, Z+2	; 0x02
     460:	73 81       	ldd	r23, Z+3	; 0x03
     462:	26 17       	cp	r18, r22
     464:	37 07       	cpc	r19, r23
     466:	98 f4       	brcc	.+38     	; 0x48e <bufferAddToEnd+0x3e>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     468:	86 81       	ldd	r24, Z+6	; 0x06
     46a:	97 81       	ldd	r25, Z+7	; 0x07
     46c:	82 0f       	add	r24, r18
     46e:	93 1f       	adc	r25, r19
     470:	0e 94 04 38 	call	0x7008	; 0x7008 <__udivmodhi4>
     474:	a0 81       	ld	r26, Z
     476:	b1 81       	ldd	r27, Z+1	; 0x01
     478:	a8 0f       	add	r26, r24
     47a:	b9 1f       	adc	r27, r25
     47c:	cc 93       	st	X, r28
		// increment the length
		buffer->datalength++;
     47e:	84 81       	ldd	r24, Z+4	; 0x04
     480:	95 81       	ldd	r25, Z+5	; 0x05
     482:	01 96       	adiw	r24, 0x01	; 1
     484:	95 83       	std	Z+5, r25	; 0x05
     486:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     488:	4f bf       	out	0x3f, r20	; 63
		// return success
		return -1;
     48a:	8f ef       	ldi	r24, 0xFF	; 255
     48c:	02 c0       	rjmp	.+4      	; 0x492 <bufferAddToEnd+0x42>
	}
	// end critical section
	CRITICAL_SECTION_END;
     48e:	4f bf       	out	0x3f, r20	; 63
	// return failure
	return 0;
     490:	80 e0       	ldi	r24, 0x00	; 0
}
     492:	cf 91       	pop	r28
     494:	08 95       	ret

00000496 <mem_cpy>:
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj.fs, res);
}
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	42 30       	cpi	r20, 0x02	; 2
     49c:	51 05       	cpc	r21, r1
     49e:	c0 f0       	brcs	.+48     	; 0x4d0 <mem_cpy+0x3a>
     4a0:	db 01       	movw	r26, r22
     4a2:	fc 01       	movw	r30, r24
     4a4:	9a 01       	movw	r18, r20
     4a6:	cd 91       	ld	r28, X+
     4a8:	dd 91       	ld	r29, X+
     4aa:	c1 93       	st	Z+, r28
     4ac:	d1 93       	st	Z+, r29
     4ae:	22 50       	subi	r18, 0x02	; 2
     4b0:	31 09       	sbc	r19, r1
     4b2:	22 30       	cpi	r18, 0x02	; 2
     4b4:	31 05       	cpc	r19, r1
     4b6:	b8 f7       	brcc	.-18     	; 0x4a6 <mem_cpy+0x10>
     4b8:	9a 01       	movw	r18, r20
     4ba:	22 50       	subi	r18, 0x02	; 2
     4bc:	31 09       	sbc	r19, r1
     4be:	2e 7f       	andi	r18, 0xFE	; 254
     4c0:	2e 5f       	subi	r18, 0xFE	; 254
     4c2:	3f 4f       	sbci	r19, 0xFF	; 255
     4c4:	82 0f       	add	r24, r18
     4c6:	93 1f       	adc	r25, r19
     4c8:	62 0f       	add	r22, r18
     4ca:	73 1f       	adc	r23, r19
     4cc:	41 70       	andi	r20, 0x01	; 1
     4ce:	55 27       	eor	r21, r21
     4d0:	41 15       	cp	r20, r1
     4d2:	51 05       	cpc	r21, r1
     4d4:	49 f0       	breq	.+18     	; 0x4e8 <mem_cpy+0x52>
     4d6:	db 01       	movw	r26, r22
     4d8:	fc 01       	movw	r30, r24
     4da:	48 0f       	add	r20, r24
     4dc:	59 1f       	adc	r21, r25
     4de:	9d 91       	ld	r25, X+
     4e0:	91 93       	st	Z+, r25
     4e2:	e4 17       	cp	r30, r20
     4e4:	f5 07       	cpc	r31, r21
     4e6:	d9 f7       	brne	.-10     	; 0x4de <mem_cpy+0x48>
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	08 95       	ret

000004ee <get_fileinfo>:
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	fb 01       	movw	r30, r22
     4f8:	39 96       	adiw	r30, 0x09	; 9
     4fa:	dc 01       	movw	r26, r24
     4fc:	1e 96       	adiw	r26, 0x0e	; 14
     4fe:	0d 91       	ld	r16, X+
     500:	1d 91       	ld	r17, X+
     502:	2d 91       	ld	r18, X+
     504:	3c 91       	ld	r19, X
     506:	51 97       	sbiw	r26, 0x11	; 17
     508:	01 2b       	or	r16, r17
     50a:	02 2b       	or	r16, r18
     50c:	03 2b       	or	r16, r19
     50e:	09 f4       	brne	.+2      	; 0x512 <get_fileinfo+0x24>
     510:	51 c0       	rjmp	.+162    	; 0x5b4 <get_fileinfo+0xc6>
     512:	52 96       	adiw	r26, 0x12	; 18
     514:	4d 91       	ld	r20, X+
     516:	5c 91       	ld	r21, X
     518:	53 97       	sbiw	r26, 0x13	; 19
     51a:	ea 01       	movw	r28, r20
     51c:	88 81       	ld	r24, Y
     51e:	80 32       	cpi	r24, 0x20	; 32
     520:	b9 f0       	breq	.+46     	; 0x550 <get_fileinfo+0x62>
     522:	9a 01       	movw	r18, r20
     524:	2f 5f       	subi	r18, 0xFF	; 255
     526:	3f 4f       	sbci	r19, 0xFF	; 255
     528:	db 01       	movw	r26, r22
     52a:	51 96       	adiw	r26, 0x11	; 17
     52c:	95 ee       	ldi	r25, 0xE5	; 229
     52e:	05 c0       	rjmp	.+10     	; 0x53a <get_fileinfo+0x4c>
     530:	e9 01       	movw	r28, r18
     532:	89 91       	ld	r24, Y+
     534:	9e 01       	movw	r18, r28
     536:	80 32       	cpi	r24, 0x20	; 32
     538:	69 f0       	breq	.+26     	; 0x554 <get_fileinfo+0x66>
     53a:	85 30       	cpi	r24, 0x05	; 5
     53c:	09 f4       	brne	.+2      	; 0x540 <get_fileinfo+0x52>
     53e:	89 2f       	mov	r24, r25
     540:	31 96       	adiw	r30, 0x01	; 1
     542:	ef 01       	movw	r28, r30
     544:	21 97       	sbiw	r28, 0x01	; 1
     546:	88 83       	st	Y, r24
     548:	ea 17       	cp	r30, r26
     54a:	fb 07       	cpc	r31, r27
     54c:	89 f7       	brne	.-30     	; 0x530 <get_fileinfo+0x42>
     54e:	03 c0       	rjmp	.+6      	; 0x556 <get_fileinfo+0x68>
     550:	df 01       	movw	r26, r30
     552:	01 c0       	rjmp	.+2      	; 0x556 <get_fileinfo+0x68>
     554:	df 01       	movw	r26, r30
     556:	fa 01       	movw	r30, r20
     558:	80 85       	ldd	r24, Z+8	; 0x08
     55a:	80 32       	cpi	r24, 0x20	; 32
     55c:	69 f0       	breq	.+26     	; 0x578 <get_fileinfo+0x8a>
     55e:	8e e2       	ldi	r24, 0x2E	; 46
     560:	8c 93       	st	X, r24
     562:	80 85       	ldd	r24, Z+8	; 0x08
     564:	80 32       	cpi	r24, 0x20	; 32
     566:	41 f5       	brne	.+80     	; 0x5b8 <get_fileinfo+0xca>
     568:	fd 01       	movw	r30, r26
     56a:	31 96       	adiw	r30, 0x01	; 1
     56c:	06 c0       	rjmp	.+12     	; 0x57a <get_fileinfo+0x8c>
     56e:	fd 01       	movw	r30, r26
     570:	34 96       	adiw	r30, 0x04	; 4
     572:	13 96       	adiw	r26, 0x03	; 3
     574:	8c 93       	st	X, r24
     576:	01 c0       	rjmp	.+2      	; 0x57a <get_fileinfo+0x8c>
     578:	fd 01       	movw	r30, r26
     57a:	da 01       	movw	r26, r20
     57c:	1b 96       	adiw	r26, 0x0b	; 11
     57e:	8c 91       	ld	r24, X
     580:	1b 97       	sbiw	r26, 0x0b	; 11
     582:	eb 01       	movw	r28, r22
     584:	88 87       	std	Y+8, r24	; 0x08
     586:	5c 96       	adiw	r26, 0x1c	; 28
     588:	8d 91       	ld	r24, X+
     58a:	9d 91       	ld	r25, X+
     58c:	0d 90       	ld	r0, X+
     58e:	bc 91       	ld	r27, X
     590:	a0 2d       	mov	r26, r0
     592:	88 83       	st	Y, r24
     594:	99 83       	std	Y+1, r25	; 0x01
     596:	aa 83       	std	Y+2, r26	; 0x02
     598:	bb 83       	std	Y+3, r27	; 0x03
     59a:	da 01       	movw	r26, r20
     59c:	58 96       	adiw	r26, 0x18	; 24
     59e:	8d 91       	ld	r24, X+
     5a0:	9c 91       	ld	r25, X
     5a2:	59 97       	sbiw	r26, 0x19	; 25
     5a4:	9d 83       	std	Y+5, r25	; 0x05
     5a6:	8c 83       	std	Y+4, r24	; 0x04
     5a8:	56 96       	adiw	r26, 0x16	; 22
     5aa:	8d 91       	ld	r24, X+
     5ac:	9c 91       	ld	r25, X
     5ae:	57 97       	sbiw	r26, 0x17	; 23
     5b0:	9f 83       	std	Y+7, r25	; 0x07
     5b2:	8e 83       	std	Y+6, r24	; 0x06
     5b4:	10 82       	st	Z, r1
     5b6:	11 c0       	rjmp	.+34     	; 0x5da <get_fileinfo+0xec>
     5b8:	fd 01       	movw	r30, r26
     5ba:	32 96       	adiw	r30, 0x02	; 2
     5bc:	11 96       	adiw	r26, 0x01	; 1
     5be:	8c 93       	st	X, r24
     5c0:	11 97       	sbiw	r26, 0x01	; 1
     5c2:	ea 01       	movw	r28, r20
     5c4:	89 85       	ldd	r24, Y+9	; 0x09
     5c6:	80 32       	cpi	r24, 0x20	; 32
     5c8:	c1 f2       	breq	.-80     	; 0x57a <get_fileinfo+0x8c>
     5ca:	31 96       	adiw	r30, 0x01	; 1
     5cc:	12 96       	adiw	r26, 0x02	; 2
     5ce:	8c 93       	st	X, r24
     5d0:	12 97       	sbiw	r26, 0x02	; 2
     5d2:	8a 85       	ldd	r24, Y+10	; 0x0a
     5d4:	80 32       	cpi	r24, 0x20	; 32
     5d6:	59 f6       	brne	.-106    	; 0x56e <get_fileinfo+0x80>
     5d8:	d0 cf       	rjmp	.-96     	; 0x57a <get_fileinfo+0x8c>
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
     5e2:	08 95       	ret

000005e4 <move_window>:
     5e4:	4f 92       	push	r4
     5e6:	5f 92       	push	r5
     5e8:	6f 92       	push	r6
     5ea:	7f 92       	push	r7
     5ec:	af 92       	push	r10
     5ee:	bf 92       	push	r11
     5f0:	cf 92       	push	r12
     5f2:	df 92       	push	r13
     5f4:	ef 92       	push	r14
     5f6:	ff 92       	push	r15
     5f8:	0f 93       	push	r16
     5fa:	1f 93       	push	r17
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	fc 01       	movw	r30, r24
     602:	c6 a4       	ldd	r12, Z+46	; 0x2e
     604:	d7 a4       	ldd	r13, Z+47	; 0x2f
     606:	e0 a8       	ldd	r14, Z+48	; 0x30
     608:	f1 a8       	ldd	r15, Z+49	; 0x31
     60a:	c4 16       	cp	r12, r20
     60c:	d5 06       	cpc	r13, r21
     60e:	e6 06       	cpc	r14, r22
     610:	f7 06       	cpc	r15, r23
     612:	09 f4       	brne	.+2      	; 0x616 <move_window+0x32>
     614:	4f c0       	rjmp	.+158    	; 0x6b4 <move_window+0xd0>
     616:	2a 01       	movw	r4, r20
     618:	3b 01       	movw	r6, r22
     61a:	ec 01       	movw	r28, r24
     61c:	84 81       	ldd	r24, Z+4	; 0x04
     61e:	88 23       	and	r24, r24
     620:	a1 f1       	breq	.+104    	; 0x68a <move_window+0xa6>
     622:	5f 01       	movw	r10, r30
     624:	f2 e3       	ldi	r31, 0x32	; 50
     626:	af 0e       	add	r10, r31
     628:	b1 1c       	adc	r11, r1
     62a:	01 e0       	ldi	r16, 0x01	; 1
     62c:	a7 01       	movw	r20, r14
     62e:	96 01       	movw	r18, r12
     630:	b5 01       	movw	r22, r10
     632:	89 81       	ldd	r24, Y+1	; 0x01
     634:	0e 94 a9 2b 	call	0x5752	; 0x5752 <disk_write>
     638:	81 11       	cpse	r24, r1
     63a:	3e c0       	rjmp	.+124    	; 0x6b8 <move_window+0xd4>
     63c:	1c 82       	std	Y+4, r1	; 0x04
     63e:	4a a1       	ldd	r20, Y+34	; 0x22
     640:	5b a1       	ldd	r21, Y+35	; 0x23
     642:	6c a1       	ldd	r22, Y+36	; 0x24
     644:	7d a1       	ldd	r23, Y+37	; 0x25
     646:	8e 8d       	ldd	r24, Y+30	; 0x1e
     648:	9f 8d       	ldd	r25, Y+31	; 0x1f
     64a:	a8 a1       	ldd	r26, Y+32	; 0x20
     64c:	b9 a1       	ldd	r27, Y+33	; 0x21
     64e:	84 0f       	add	r24, r20
     650:	95 1f       	adc	r25, r21
     652:	a6 1f       	adc	r26, r22
     654:	b7 1f       	adc	r27, r23
     656:	c8 16       	cp	r12, r24
     658:	d9 06       	cpc	r13, r25
     65a:	ea 06       	cpc	r14, r26
     65c:	fb 06       	cpc	r15, r27
     65e:	a8 f4       	brcc	.+42     	; 0x68a <move_window+0xa6>
     660:	1b 81       	ldd	r17, Y+3	; 0x03
     662:	12 30       	cpi	r17, 0x02	; 2
     664:	90 f0       	brcs	.+36     	; 0x68a <move_window+0xa6>
     666:	8e 8d       	ldd	r24, Y+30	; 0x1e
     668:	9f 8d       	ldd	r25, Y+31	; 0x1f
     66a:	a8 a1       	ldd	r26, Y+32	; 0x20
     66c:	b9 a1       	ldd	r27, Y+33	; 0x21
     66e:	c8 0e       	add	r12, r24
     670:	d9 1e       	adc	r13, r25
     672:	ea 1e       	adc	r14, r26
     674:	fb 1e       	adc	r15, r27
     676:	01 e0       	ldi	r16, 0x01	; 1
     678:	a7 01       	movw	r20, r14
     67a:	96 01       	movw	r18, r12
     67c:	b5 01       	movw	r22, r10
     67e:	89 81       	ldd	r24, Y+1	; 0x01
     680:	0e 94 a9 2b 	call	0x5752	; 0x5752 <disk_write>
     684:	11 50       	subi	r17, 0x01	; 1
     686:	11 30       	cpi	r17, 0x01	; 1
     688:	71 f7       	brne	.-36     	; 0x666 <move_window+0x82>
     68a:	41 14       	cp	r4, r1
     68c:	51 04       	cpc	r5, r1
     68e:	61 04       	cpc	r6, r1
     690:	71 04       	cpc	r7, r1
     692:	a1 f0       	breq	.+40     	; 0x6bc <move_window+0xd8>
     694:	01 e0       	ldi	r16, 0x01	; 1
     696:	a3 01       	movw	r20, r6
     698:	92 01       	movw	r18, r4
     69a:	be 01       	movw	r22, r28
     69c:	6e 5c       	subi	r22, 0xCE	; 206
     69e:	7f 4f       	sbci	r23, 0xFF	; 255
     6a0:	89 81       	ldd	r24, Y+1	; 0x01
     6a2:	0e 94 56 2b 	call	0x56ac	; 0x56ac <disk_read>
     6a6:	81 11       	cpse	r24, r1
     6a8:	0b c0       	rjmp	.+22     	; 0x6c0 <move_window+0xdc>
     6aa:	4e a6       	std	Y+46, r4	; 0x2e
     6ac:	5f a6       	std	Y+47, r5	; 0x2f
     6ae:	68 aa       	std	Y+48, r6	; 0x30
     6b0:	79 aa       	std	Y+49, r7	; 0x31
     6b2:	07 c0       	rjmp	.+14     	; 0x6c2 <move_window+0xde>
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <move_window+0xde>
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	03 c0       	rjmp	.+6      	; 0x6c2 <move_window+0xde>
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	01 c0       	rjmp	.+2      	; 0x6c2 <move_window+0xde>
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	1f 91       	pop	r17
     6c8:	0f 91       	pop	r16
     6ca:	ff 90       	pop	r15
     6cc:	ef 90       	pop	r14
     6ce:	df 90       	pop	r13
     6d0:	cf 90       	pop	r12
     6d2:	bf 90       	pop	r11
     6d4:	af 90       	pop	r10
     6d6:	7f 90       	pop	r7
     6d8:	6f 90       	pop	r6
     6da:	5f 90       	pop	r5
     6dc:	4f 90       	pop	r4
     6de:	08 95       	ret

000006e0 <check_fs>:
     6e0:	0f 93       	push	r16
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	ec 01       	movw	r28, r24
     6e8:	9a 01       	movw	r18, r20
     6ea:	ab 01       	movw	r20, r22
     6ec:	bc 01       	movw	r22, r24
     6ee:	6e 5c       	subi	r22, 0xCE	; 206
     6f0:	7f 4f       	sbci	r23, 0xFF	; 255
     6f2:	01 e0       	ldi	r16, 0x01	; 1
     6f4:	89 81       	ldd	r24, Y+1	; 0x01
     6f6:	0e 94 56 2b 	call	0x56ac	; 0x56ac <disk_read>
     6fa:	81 11       	cpse	r24, r1
     6fc:	23 c0       	rjmp	.+70     	; 0x744 <check_fs+0x64>
     6fe:	fe 01       	movw	r30, r28
     700:	e0 5d       	subi	r30, 0xD0	; 208
     702:	fd 4f       	sbci	r31, 0xFD	; 253
     704:	80 81       	ld	r24, Z
     706:	91 81       	ldd	r25, Z+1	; 0x01
     708:	85 35       	cpi	r24, 0x55	; 85
     70a:	9a 4a       	sbci	r25, 0xAA	; 170
     70c:	e9 f4       	brne	.+58     	; 0x748 <check_fs+0x68>
     70e:	e8 5c       	subi	r30, 0xC8	; 200
     710:	f1 40       	sbci	r31, 0x01	; 1
     712:	80 81       	ld	r24, Z
     714:	91 81       	ldd	r25, Z+1	; 0x01
     716:	a2 81       	ldd	r26, Z+2	; 0x02
     718:	b3 81       	ldd	r27, Z+3	; 0x03
     71a:	bb 27       	eor	r27, r27
     71c:	86 34       	cpi	r24, 0x46	; 70
     71e:	91 44       	sbci	r25, 0x41	; 65
     720:	a4 45       	sbci	r26, 0x54	; 84
     722:	b1 05       	cpc	r27, r1
     724:	99 f0       	breq	.+38     	; 0x74c <check_fs+0x6c>
     726:	cc 57       	subi	r28, 0x7C	; 124
     728:	df 4f       	sbci	r29, 0xFF	; 255
     72a:	48 81       	ld	r20, Y
     72c:	59 81       	ldd	r21, Y+1	; 0x01
     72e:	6a 81       	ldd	r22, Y+2	; 0x02
     730:	7b 81       	ldd	r23, Y+3	; 0x03
     732:	77 27       	eor	r23, r23
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	46 34       	cpi	r20, 0x46	; 70
     738:	51 44       	sbci	r21, 0x41	; 65
     73a:	64 45       	sbci	r22, 0x54	; 84
     73c:	71 05       	cpc	r23, r1
     73e:	39 f4       	brne	.+14     	; 0x74e <check_fs+0x6e>
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	05 c0       	rjmp	.+10     	; 0x74e <check_fs+0x6e>
     744:	83 e0       	ldi	r24, 0x03	; 3
     746:	03 c0       	rjmp	.+6      	; 0x74e <check_fs+0x6e>
     748:	82 e0       	ldi	r24, 0x02	; 2
     74a:	01 c0       	rjmp	.+2      	; 0x74e <check_fs+0x6e>
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	0f 91       	pop	r16
     754:	08 95       	ret

00000756 <validate>:
     756:	00 97       	sbiw	r24, 0x00	; 0
     758:	81 f0       	breq	.+32     	; 0x77a <validate+0x24>
     75a:	fc 01       	movw	r30, r24
     75c:	20 81       	ld	r18, Z
     75e:	22 23       	and	r18, r18
     760:	71 f0       	breq	.+28     	; 0x77e <validate+0x28>
     762:	26 81       	ldd	r18, Z+6	; 0x06
     764:	37 81       	ldd	r19, Z+7	; 0x07
     766:	26 17       	cp	r18, r22
     768:	37 07       	cpc	r19, r23
     76a:	59 f4       	brne	.+22     	; 0x782 <validate+0x2c>
     76c:	81 81       	ldd	r24, Z+1	; 0x01
     76e:	0e 94 4f 2b 	call	0x569e	; 0x569e <disk_status>
     772:	80 fd       	sbrc	r24, 0
     774:	08 c0       	rjmp	.+16     	; 0x786 <validate+0x30>
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	08 95       	ret
     77a:	89 e0       	ldi	r24, 0x09	; 9
     77c:	08 95       	ret
     77e:	89 e0       	ldi	r24, 0x09	; 9
     780:	08 95       	ret
     782:	89 e0       	ldi	r24, 0x09	; 9
     784:	08 95       	ret
     786:	83 e0       	ldi	r24, 0x03	; 3
     788:	08 95       	ret

0000078a <chk_mounted>:
     78a:	2f 92       	push	r2
     78c:	3f 92       	push	r3
     78e:	4f 92       	push	r4
     790:	5f 92       	push	r5
     792:	6f 92       	push	r6
     794:	7f 92       	push	r7
     796:	8f 92       	push	r8
     798:	9f 92       	push	r9
     79a:	af 92       	push	r10
     79c:	bf 92       	push	r11
     79e:	cf 92       	push	r12
     7a0:	df 92       	push	r13
     7a2:	ef 92       	push	r14
     7a4:	ff 92       	push	r15
     7a6:	0f 93       	push	r16
     7a8:	1f 93       	push	r17
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
     7b2:	2e 97       	sbiw	r28, 0x0e	; 14
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	f8 94       	cli
     7b8:	de bf       	out	0x3e, r29	; 62
     7ba:	0f be       	out	0x3f, r0	; 63
     7bc:	cd bf       	out	0x3d, r28	; 61
     7be:	dc 01       	movw	r26, r24
     7c0:	ed 91       	ld	r30, X+
     7c2:	fc 91       	ld	r31, X
     7c4:	11 97       	sbiw	r26, 0x01	; 1
     7c6:	20 81       	ld	r18, Z
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	20 53       	subi	r18, 0x30	; 48
     7cc:	31 09       	sbc	r19, r1
     7ce:	2a 30       	cpi	r18, 0x0A	; 10
     7d0:	31 05       	cpc	r19, r1
     7d2:	38 f4       	brcc	.+14     	; 0x7e2 <chk_mounted+0x58>
     7d4:	51 81       	ldd	r21, Z+1	; 0x01
     7d6:	5a 33       	cpi	r21, 0x3A	; 58
     7d8:	21 f4       	brne	.+8      	; 0x7e2 <chk_mounted+0x58>
     7da:	32 96       	adiw	r30, 0x02	; 2
     7dc:	ed 93       	st	X+, r30
     7de:	fc 93       	st	X, r31
     7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <chk_mounted+0x5e>
     7e2:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <__data_end>
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	23 2b       	or	r18, r19
     7ea:	09 f0       	breq	.+2      	; 0x7ee <chk_mounted+0x64>
     7ec:	c0 c1       	rjmp	.+896    	; 0xb6e <__stack+0x30f>
     7ee:	e0 91 7f 01 	lds	r30, 0x017F	; 0x80017f <FatFs>
     7f2:	f0 91 80 01 	lds	r31, 0x0180	; 0x800180 <FatFs+0x1>
     7f6:	fe 87       	std	Y+14, r31	; 0x0e
     7f8:	ed 87       	std	Y+13, r30	; 0x0d
     7fa:	db 01       	movw	r26, r22
     7fc:	ed 93       	st	X+, r30
     7fe:	fc 93       	st	X, r31
     800:	30 97       	sbiw	r30, 0x00	; 0
     802:	09 f4       	brne	.+2      	; 0x806 <chk_mounted+0x7c>
     804:	b6 c1       	rjmp	.+876    	; 0xb72 <__stack+0x313>
     806:	14 2f       	mov	r17, r20
     808:	80 81       	ld	r24, Z
     80a:	88 23       	and	r24, r24
     80c:	61 f0       	breq	.+24     	; 0x826 <chk_mounted+0x9c>
     80e:	81 81       	ldd	r24, Z+1	; 0x01
     810:	0e 94 4f 2b 	call	0x569e	; 0x569e <disk_status>
     814:	80 fd       	sbrc	r24, 0
     816:	07 c0       	rjmp	.+14     	; 0x826 <chk_mounted+0x9c>
     818:	11 23       	and	r17, r17
     81a:	09 f4       	brne	.+2      	; 0x81e <chk_mounted+0x94>
     81c:	ac c1       	rjmp	.+856    	; 0xb76 <__stack+0x317>
     81e:	82 ff       	sbrs	r24, 2
     820:	ac c1       	rjmp	.+856    	; 0xb7a <__stack+0x31b>
     822:	8a e0       	ldi	r24, 0x0A	; 10
     824:	7f c2       	rjmp	.+1278   	; 0xd24 <__stack+0x4c5>
     826:	ed 85       	ldd	r30, Y+13	; 0x0d
     828:	fe 85       	ldd	r31, Y+14	; 0x0e
     82a:	10 82       	st	Z, r1
     82c:	11 82       	std	Z+1, r1	; 0x01
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	0e 94 8e 2a 	call	0x551c	; 0x551c <disk_initialize>
     834:	80 fd       	sbrc	r24, 0
     836:	a3 c1       	rjmp	.+838    	; 0xb7e <__stack+0x31f>
     838:	11 23       	and	r17, r17
     83a:	11 f0       	breq	.+4      	; 0x840 <chk_mounted+0xb6>
     83c:	82 fd       	sbrc	r24, 2
     83e:	a1 c1       	rjmp	.+834    	; 0xb82 <__stack+0x323>
     840:	40 e0       	ldi	r20, 0x00	; 0
     842:	50 e0       	ldi	r21, 0x00	; 0
     844:	ba 01       	movw	r22, r20
     846:	8d 85       	ldd	r24, Y+13	; 0x0d
     848:	9e 85       	ldd	r25, Y+14	; 0x0e
     84a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <check_fs>
     84e:	81 30       	cpi	r24, 0x01	; 1
     850:	b9 f4       	brne	.+46     	; 0x880 <__stack+0x21>
     852:	ed 85       	ldd	r30, Y+13	; 0x0d
     854:	fe 85       	ldd	r31, Y+14	; 0x0e
     856:	ec 50       	subi	r30, 0x0C	; 12
     858:	fe 4f       	sbci	r31, 0xFE	; 254
     85a:	80 81       	ld	r24, Z
     85c:	88 23       	and	r24, r24
     85e:	09 f4       	brne	.+2      	; 0x862 <__stack+0x3>
     860:	92 c1       	rjmp	.+804    	; 0xb86 <__stack+0x327>
     862:	ed 85       	ldd	r30, Y+13	; 0x0d
     864:	fe 85       	ldd	r31, Y+14	; 0x0e
     866:	e8 50       	subi	r30, 0x08	; 8
     868:	fe 4f       	sbci	r31, 0xFE	; 254
     86a:	c0 80       	ld	r12, Z
     86c:	d1 80       	ldd	r13, Z+1	; 0x01
     86e:	e2 80       	ldd	r14, Z+2	; 0x02
     870:	f3 80       	ldd	r15, Z+3	; 0x03
     872:	b7 01       	movw	r22, r14
     874:	a6 01       	movw	r20, r12
     876:	8d 85       	ldd	r24, Y+13	; 0x0d
     878:	9e 85       	ldd	r25, Y+14	; 0x0e
     87a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <check_fs>
     87e:	03 c0       	rjmp	.+6      	; 0x886 <__stack+0x27>
     880:	c1 2c       	mov	r12, r1
     882:	d1 2c       	mov	r13, r1
     884:	76 01       	movw	r14, r12
     886:	83 30       	cpi	r24, 0x03	; 3
     888:	09 f4       	brne	.+2      	; 0x88c <__stack+0x2d>
     88a:	7f c1       	rjmp	.+766    	; 0xb8a <__stack+0x32b>
     88c:	81 11       	cpse	r24, r1
     88e:	7f c1       	rjmp	.+766    	; 0xb8e <__stack+0x32f>
     890:	ad 85       	ldd	r26, Y+13	; 0x0d
     892:	be 85       	ldd	r27, Y+14	; 0x0e
     894:	dd 96       	adiw	r26, 0x3d	; 61
     896:	8d 91       	ld	r24, X+
     898:	9c 91       	ld	r25, X
     89a:	de 97       	sbiw	r26, 0x3e	; 62
     89c:	81 15       	cp	r24, r1
     89e:	92 40       	sbci	r25, 0x02	; 2
     8a0:	09 f0       	breq	.+2      	; 0x8a4 <__stack+0x45>
     8a2:	77 c1       	rjmp	.+750    	; 0xb92 <__stack+0x333>
     8a4:	ed 85       	ldd	r30, Y+13	; 0x0d
     8a6:	fe 85       	ldd	r31, Y+14	; 0x0e
     8a8:	e8 5b       	subi	r30, 0xB8	; 184
     8aa:	ff 4f       	sbci	r31, 0xFF	; 255
     8ac:	40 80       	ld	r4, Z
     8ae:	51 80       	ldd	r5, Z+1	; 0x01
     8b0:	61 2c       	mov	r6, r1
     8b2:	71 2c       	mov	r7, r1
     8b4:	41 14       	cp	r4, r1
     8b6:	51 04       	cpc	r5, r1
     8b8:	61 04       	cpc	r6, r1
     8ba:	71 04       	cpc	r7, r1
     8bc:	41 f4       	brne	.+16     	; 0x8ce <__stack+0x6f>
     8be:	ed 85       	ldd	r30, Y+13	; 0x0d
     8c0:	fe 85       	ldd	r31, Y+14	; 0x0e
     8c2:	ea 5a       	subi	r30, 0xAA	; 170
     8c4:	ff 4f       	sbci	r31, 0xFF	; 255
     8c6:	40 80       	ld	r4, Z
     8c8:	51 80       	ldd	r5, Z+1	; 0x01
     8ca:	62 80       	ldd	r6, Z+2	; 0x02
     8cc:	73 80       	ldd	r7, Z+3	; 0x03
     8ce:	ed 85       	ldd	r30, Y+13	; 0x0d
     8d0:	fe 85       	ldd	r31, Y+14	; 0x0e
     8d2:	46 8e       	std	Z+30, r4	; 0x1e
     8d4:	57 8e       	std	Z+31, r5	; 0x1f
     8d6:	60 a2       	std	Z+32, r6	; 0x20
     8d8:	71 a2       	std	Z+33, r7	; 0x21
     8da:	ee 5b       	subi	r30, 0xBE	; 190
     8dc:	ff 4f       	sbci	r31, 0xFF	; 255
     8de:	a0 81       	ld	r26, Z
     8e0:	ed 85       	ldd	r30, Y+13	; 0x0d
     8e2:	fe 85       	ldd	r31, Y+14	; 0x0e
     8e4:	a3 83       	std	Z+3, r26	; 0x03
     8e6:	8f ef       	ldi	r24, 0xFF	; 255
     8e8:	8a 0f       	add	r24, r26
     8ea:	82 30       	cpi	r24, 0x02	; 2
     8ec:	08 f0       	brcs	.+2      	; 0x8f0 <__stack+0x91>
     8ee:	53 c1       	rjmp	.+678    	; 0xb96 <__stack+0x337>
     8f0:	17 ad       	ldd	r17, Z+63	; 0x3f
     8f2:	12 83       	std	Z+2, r17	; 0x02
     8f4:	11 23       	and	r17, r17
     8f6:	09 f4       	brne	.+2      	; 0x8fa <__stack+0x9b>
     8f8:	50 c1       	rjmp	.+672    	; 0xb9a <__stack+0x33b>
     8fa:	81 2f       	mov	r24, r17
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	9c 01       	movw	r18, r24
     900:	21 50       	subi	r18, 0x01	; 1
     902:	31 09       	sbc	r19, r1
     904:	82 23       	and	r24, r18
     906:	93 23       	and	r25, r19
     908:	89 2b       	or	r24, r25
     90a:	09 f0       	breq	.+2      	; 0x90e <__stack+0xaf>
     90c:	48 c1       	rjmp	.+656    	; 0xb9e <__stack+0x33f>
     90e:	ed 5b       	subi	r30, 0xBD	; 189
     910:	ff 4f       	sbci	r31, 0xFF	; 255
     912:	20 80       	ld	r2, Z
     914:	31 80       	ldd	r3, Z+1	; 0x01
     916:	ed 85       	ldd	r30, Y+13	; 0x0d
     918:	fe 85       	ldd	r31, Y+14	; 0x0e
     91a:	31 86       	std	Z+9, r3	; 0x09
     91c:	20 86       	std	Z+8, r2	; 0x08
     91e:	c1 01       	movw	r24, r2
     920:	8f 70       	andi	r24, 0x0F	; 15
     922:	99 27       	eor	r25, r25
     924:	89 2b       	or	r24, r25
     926:	09 f0       	breq	.+2      	; 0x92a <__stack+0xcb>
     928:	3c c1       	rjmp	.+632    	; 0xba2 <__stack+0x343>
     92a:	eb 5b       	subi	r30, 0xBB	; 187
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	80 80       	ld	r8, Z
     930:	91 80       	ldd	r9, Z+1	; 0x01
     932:	a1 2c       	mov	r10, r1
     934:	b1 2c       	mov	r11, r1
     936:	81 14       	cp	r8, r1
     938:	91 04       	cpc	r9, r1
     93a:	a1 04       	cpc	r10, r1
     93c:	b1 04       	cpc	r11, r1
     93e:	41 f4       	brne	.+16     	; 0x950 <__stack+0xf1>
     940:	ed 85       	ldd	r30, Y+13	; 0x0d
     942:	fe 85       	ldd	r31, Y+14	; 0x0e
     944:	ee 5a       	subi	r30, 0xAE	; 174
     946:	ff 4f       	sbci	r31, 0xFF	; 255
     948:	80 80       	ld	r8, Z
     94a:	91 80       	ldd	r9, Z+1	; 0x01
     94c:	a2 80       	ldd	r10, Z+2	; 0x02
     94e:	b3 80       	ldd	r11, Z+3	; 0x03
     950:	ed 85       	ldd	r30, Y+13	; 0x0d
     952:	fe 85       	ldd	r31, Y+14	; 0x0e
     954:	e0 5c       	subi	r30, 0xC0	; 192
     956:	ff 4f       	sbci	r31, 0xFF	; 255
     958:	01 90       	ld	r0, Z+
     95a:	f0 81       	ld	r31, Z
     95c:	e0 2d       	mov	r30, r0
     95e:	30 97       	sbiw	r30, 0x00	; 0
     960:	09 f4       	brne	.+2      	; 0x964 <__stack+0x105>
     962:	21 c1       	rjmp	.+578    	; 0xba6 <__stack+0x347>
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	a3 01       	movw	r20, r6
     968:	92 01       	movw	r18, r4
     96a:	0e 94 6e 38 	call	0x70dc	; 0x70dc <__muluhisi3>
     96e:	69 87       	std	Y+9, r22	; 0x09
     970:	7a 87       	std	Y+10, r23	; 0x0a
     972:	8b 87       	std	Y+11, r24	; 0x0b
     974:	9c 87       	std	Y+12, r25	; 0x0c
     976:	9f 01       	movw	r18, r30
     978:	40 e0       	ldi	r20, 0x00	; 0
     97a:	50 e0       	ldi	r21, 0x00	; 0
     97c:	2d 83       	std	Y+5, r18	; 0x05
     97e:	3e 83       	std	Y+6, r19	; 0x06
     980:	4f 83       	std	Y+7, r20	; 0x07
     982:	58 87       	std	Y+8, r21	; 0x08
     984:	c1 01       	movw	r24, r2
     986:	92 95       	swap	r25
     988:	82 95       	swap	r24
     98a:	8f 70       	andi	r24, 0x0F	; 15
     98c:	89 27       	eor	r24, r25
     98e:	9f 70       	andi	r25, 0x0F	; 15
     990:	89 27       	eor	r24, r25
     992:	28 0f       	add	r18, r24
     994:	39 1f       	adc	r19, r25
     996:	41 1d       	adc	r20, r1
     998:	51 1d       	adc	r21, r1
     99a:	da 01       	movw	r26, r20
     99c:	c9 01       	movw	r24, r18
     99e:	29 85       	ldd	r18, Y+9	; 0x09
     9a0:	3a 85       	ldd	r19, Y+10	; 0x0a
     9a2:	4b 85       	ldd	r20, Y+11	; 0x0b
     9a4:	5c 85       	ldd	r21, Y+12	; 0x0c
     9a6:	28 0f       	add	r18, r24
     9a8:	39 1f       	adc	r19, r25
     9aa:	4a 1f       	adc	r20, r26
     9ac:	5b 1f       	adc	r21, r27
     9ae:	29 83       	std	Y+1, r18	; 0x01
     9b0:	3a 83       	std	Y+2, r19	; 0x02
     9b2:	4b 83       	std	Y+3, r20	; 0x03
     9b4:	5c 83       	std	Y+4, r21	; 0x04
     9b6:	82 16       	cp	r8, r18
     9b8:	93 06       	cpc	r9, r19
     9ba:	a4 06       	cpc	r10, r20
     9bc:	b5 06       	cpc	r11, r21
     9be:	08 f4       	brcc	.+2      	; 0x9c2 <__stack+0x163>
     9c0:	f4 c0       	rjmp	.+488    	; 0xbaa <__stack+0x34b>
     9c2:	c5 01       	movw	r24, r10
     9c4:	b4 01       	movw	r22, r8
     9c6:	62 1b       	sub	r22, r18
     9c8:	73 0b       	sbc	r23, r19
     9ca:	84 0b       	sbc	r24, r20
     9cc:	95 0b       	sbc	r25, r21
     9ce:	21 2f       	mov	r18, r17
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	40 e0       	ldi	r20, 0x00	; 0
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	0e 94 18 38 	call	0x7030	; 0x7030 <__udivmodsi4>
     9da:	da 01       	movw	r26, r20
     9dc:	c9 01       	movw	r24, r18
     9de:	21 15       	cp	r18, r1
     9e0:	31 05       	cpc	r19, r1
     9e2:	41 05       	cpc	r20, r1
     9e4:	51 05       	cpc	r21, r1
     9e6:	09 f4       	brne	.+2      	; 0x9ea <__stack+0x18b>
     9e8:	e2 c0       	rjmp	.+452    	; 0xbae <__stack+0x34f>
     9ea:	26 3f       	cpi	r18, 0xF6	; 246
     9ec:	6f e0       	ldi	r22, 0x0F	; 15
     9ee:	36 07       	cpc	r19, r22
     9f0:	41 05       	cpc	r20, r1
     9f2:	51 05       	cpc	r21, r1
     9f4:	08 f0       	brcs	.+2      	; 0x9f8 <__stack+0x199>
     9f6:	8e c1       	rjmp	.+796    	; 0xd14 <__stack+0x4b5>
     9f8:	f1 e0       	ldi	r31, 0x01	; 1
     9fa:	8d c1       	rjmp	.+794    	; 0xd16 <__stack+0x4b7>
     9fc:	ed 85       	ldd	r30, Y+13	; 0x0d
     9fe:	fe 85       	ldd	r31, Y+14	; 0x0e
     a00:	e2 5a       	subi	r30, 0xA2	; 162
     a02:	ff 4f       	sbci	r31, 0xFF	; 255
     a04:	80 81       	ld	r24, Z
     a06:	91 81       	ldd	r25, Z+1	; 0x01
     a08:	a2 81       	ldd	r26, Z+2	; 0x02
     a0a:	b3 81       	ldd	r27, Z+3	; 0x03
     a0c:	ed 85       	ldd	r30, Y+13	; 0x0d
     a0e:	fe 85       	ldd	r31, Y+14	; 0x0e
     a10:	86 a3       	std	Z+38, r24	; 0x26
     a12:	97 a3       	std	Z+39, r25	; 0x27
     a14:	a0 a7       	std	Z+40, r26	; 0x28
     a16:	b1 a7       	std	Z+41, r27	; 0x29
     a18:	88 0c       	add	r8, r8
     a1a:	99 1c       	adc	r9, r9
     a1c:	aa 1c       	adc	r10, r10
     a1e:	bb 1c       	adc	r11, r11
     a20:	88 0c       	add	r8, r8
     a22:	99 1c       	adc	r9, r9
     a24:	aa 1c       	adc	r10, r10
     a26:	bb 1c       	adc	r11, r11
     a28:	ff ef       	ldi	r31, 0xFF	; 255
     a2a:	8f 0e       	add	r8, r31
     a2c:	f1 e0       	ldi	r31, 0x01	; 1
     a2e:	9f 1e       	adc	r9, r31
     a30:	a1 1c       	adc	r10, r1
     a32:	b1 1c       	adc	r11, r1
     a34:	07 2e       	mov	r0, r23
     a36:	79 e0       	ldi	r23, 0x09	; 9
     a38:	b6 94       	lsr	r11
     a3a:	a7 94       	ror	r10
     a3c:	97 94       	ror	r9
     a3e:	87 94       	ror	r8
     a40:	7a 95       	dec	r23
     a42:	d1 f7       	brne	.-12     	; 0xa38 <__stack+0x1d9>
     a44:	70 2d       	mov	r23, r0
     a46:	48 14       	cp	r4, r8
     a48:	59 04       	cpc	r5, r9
     a4a:	6a 04       	cpc	r6, r10
     a4c:	7b 04       	cpc	r7, r11
     a4e:	08 f4       	brcc	.+2      	; 0xa52 <__stack+0x1f3>
     a50:	b0 c0       	rjmp	.+352    	; 0xbb2 <__stack+0x353>
     a52:	07 c1       	rjmp	.+526    	; 0xc62 <__stack+0x403>
     a54:	29 85       	ldd	r18, Y+9	; 0x09
     a56:	3a 85       	ldd	r19, Y+10	; 0x0a
     a58:	4b 85       	ldd	r20, Y+11	; 0x0b
     a5a:	5c 85       	ldd	r21, Y+12	; 0x0c
     a5c:	c2 0e       	add	r12, r18
     a5e:	d3 1e       	adc	r13, r19
     a60:	e4 1e       	adc	r14, r20
     a62:	f5 1e       	adc	r15, r21
     a64:	ad 85       	ldd	r26, Y+13	; 0x0d
     a66:	be 85       	ldd	r27, Y+14	; 0x0e
     a68:	96 96       	adiw	r26, 0x26	; 38
     a6a:	cd 92       	st	X+, r12
     a6c:	dd 92       	st	X+, r13
     a6e:	ed 92       	st	X+, r14
     a70:	fc 92       	st	X, r15
     a72:	99 97       	sbiw	r26, 0x29	; 41
     a74:	f2 30       	cpi	r31, 0x02	; 2
     a76:	29 f4       	brne	.+10     	; 0xa82 <__stack+0x223>
     a78:	88 0c       	add	r8, r8
     a7a:	99 1c       	adc	r9, r9
     a7c:	aa 1c       	adc	r10, r10
     a7e:	bb 1c       	adc	r11, r11
     a80:	da c0       	rjmp	.+436    	; 0xc36 <__stack+0x3d7>
     a82:	a3 e0       	ldi	r26, 0x03	; 3
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	a5 01       	movw	r20, r10
     a88:	94 01       	movw	r18, r8
     a8a:	0e 94 6e 38 	call	0x70dc	; 0x70dc <__muluhisi3>
     a8e:	dc 01       	movw	r26, r24
     a90:	cb 01       	movw	r24, r22
     a92:	b6 95       	lsr	r27
     a94:	a7 95       	ror	r26
     a96:	97 95       	ror	r25
     a98:	87 95       	ror	r24
     a9a:	e1 e0       	ldi	r30, 0x01	; 1
     a9c:	8e 22       	and	r8, r30
     a9e:	99 24       	eor	r9, r9
     aa0:	aa 24       	eor	r10, r10
     aa2:	bb 24       	eor	r11, r11
     aa4:	88 0e       	add	r8, r24
     aa6:	99 1e       	adc	r9, r25
     aa8:	aa 1e       	adc	r10, r26
     aaa:	bb 1e       	adc	r11, r27
     aac:	c4 c0       	rjmp	.+392    	; 0xc36 <__stack+0x3d7>
     aae:	ed 85       	ldd	r30, Y+13	; 0x0d
     ab0:	fe 85       	ldd	r31, Y+14	; 0x0e
     ab2:	e0 5d       	subi	r30, 0xD0	; 208
     ab4:	fd 4f       	sbci	r31, 0xFD	; 253
     ab6:	80 81       	ld	r24, Z
     ab8:	91 81       	ldd	r25, Z+1	; 0x01
     aba:	85 35       	cpi	r24, 0x55	; 85
     abc:	9a 4a       	sbci	r25, 0xAA	; 170
     abe:	a1 f5       	brne	.+104    	; 0xb28 <__stack+0x2c9>
     ac0:	ed 85       	ldd	r30, Y+13	; 0x0d
     ac2:	fe 85       	ldd	r31, Y+14	; 0x0e
     ac4:	82 a9       	ldd	r24, Z+50	; 0x32
     ac6:	93 a9       	ldd	r25, Z+51	; 0x33
     ac8:	a4 a9       	ldd	r26, Z+52	; 0x34
     aca:	b5 a9       	ldd	r27, Z+53	; 0x35
     acc:	82 35       	cpi	r24, 0x52	; 82
     ace:	92 45       	sbci	r25, 0x52	; 82
     ad0:	a1 46       	sbci	r26, 0x61	; 97
     ad2:	b1 44       	sbci	r27, 0x41	; 65
     ad4:	59 f5       	brne	.+86     	; 0xb2c <__stack+0x2cd>
     ad6:	ed 85       	ldd	r30, Y+13	; 0x0d
     ad8:	fe 85       	ldd	r31, Y+14	; 0x0e
     ada:	ea 5e       	subi	r30, 0xEA	; 234
     adc:	fd 4f       	sbci	r31, 0xFD	; 253
     ade:	80 81       	ld	r24, Z
     ae0:	91 81       	ldd	r25, Z+1	; 0x01
     ae2:	a2 81       	ldd	r26, Z+2	; 0x02
     ae4:	b3 81       	ldd	r27, Z+3	; 0x03
     ae6:	82 37       	cpi	r24, 0x72	; 114
     ae8:	92 47       	sbci	r25, 0x72	; 114
     aea:	a1 44       	sbci	r26, 0x41	; 65
     aec:	b1 46       	sbci	r27, 0x61	; 97
     aee:	01 f5       	brne	.+64     	; 0xb30 <__stack+0x2d1>
     af0:	ed 85       	ldd	r30, Y+13	; 0x0d
     af2:	fe 85       	ldd	r31, Y+14	; 0x0e
     af4:	e2 5e       	subi	r30, 0xE2	; 226
     af6:	fd 4f       	sbci	r31, 0xFD	; 253
     af8:	80 81       	ld	r24, Z
     afa:	91 81       	ldd	r25, Z+1	; 0x01
     afc:	a2 81       	ldd	r26, Z+2	; 0x02
     afe:	b3 81       	ldd	r27, Z+3	; 0x03
     b00:	ed 85       	ldd	r30, Y+13	; 0x0d
     b02:	fe 85       	ldd	r31, Y+14	; 0x0e
     b04:	82 87       	std	Z+10, r24	; 0x0a
     b06:	93 87       	std	Z+11, r25	; 0x0b
     b08:	a4 87       	std	Z+12, r26	; 0x0c
     b0a:	b5 87       	std	Z+13, r27	; 0x0d
     b0c:	e6 5e       	subi	r30, 0xE6	; 230
     b0e:	fd 4f       	sbci	r31, 0xFD	; 253
     b10:	80 81       	ld	r24, Z
     b12:	91 81       	ldd	r25, Z+1	; 0x01
     b14:	a2 81       	ldd	r26, Z+2	; 0x02
     b16:	b3 81       	ldd	r27, Z+3	; 0x03
     b18:	ed 85       	ldd	r30, Y+13	; 0x0d
     b1a:	fe 85       	ldd	r31, Y+14	; 0x0e
     b1c:	86 87       	std	Z+14, r24	; 0x0e
     b1e:	97 87       	std	Z+15, r25	; 0x0f
     b20:	a0 8b       	std	Z+16, r26	; 0x10
     b22:	b1 8b       	std	Z+17, r27	; 0x11
     b24:	f3 e0       	ldi	r31, 0x03	; 3
     b26:	05 c0       	rjmp	.+10     	; 0xb32 <__stack+0x2d3>
     b28:	f3 e0       	ldi	r31, 0x03	; 3
     b2a:	03 c0       	rjmp	.+6      	; 0xb32 <__stack+0x2d3>
     b2c:	f3 e0       	ldi	r31, 0x03	; 3
     b2e:	01 c0       	rjmp	.+2      	; 0xb32 <__stack+0x2d3>
     b30:	f3 e0       	ldi	r31, 0x03	; 3
     b32:	ad 85       	ldd	r26, Y+13	; 0x0d
     b34:	be 85       	ldd	r27, Y+14	; 0x0e
     b36:	fc 93       	st	X, r31
     b38:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <Fsid>
     b3c:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <Fsid+0x1>
     b40:	01 96       	adiw	r24, 0x01	; 1
     b42:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <Fsid+0x1>
     b46:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <Fsid>
     b4a:	17 96       	adiw	r26, 0x07	; 7
     b4c:	9c 93       	st	X, r25
     b4e:	8e 93       	st	-X, r24
     b50:	16 97       	sbiw	r26, 0x06	; 6
     b52:	fd 01       	movw	r30, r26
     b54:	16 a6       	std	Z+46, r1	; 0x2e
     b56:	17 a6       	std	Z+47, r1	; 0x2f
     b58:	10 aa       	std	Z+48, r1	; 0x30
     b5a:	11 aa       	std	Z+49, r1	; 0x31
     b5c:	14 82       	std	Z+4, r1	; 0x04
     b5e:	56 96       	adiw	r26, 0x16	; 22
     b60:	1d 92       	st	X+, r1
     b62:	1d 92       	st	X+, r1
     b64:	1d 92       	st	X+, r1
     b66:	1c 92       	st	X, r1
     b68:	59 97       	sbiw	r26, 0x19	; 25
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	db c0       	rjmp	.+438    	; 0xd24 <__stack+0x4c5>
     b6e:	8b e0       	ldi	r24, 0x0B	; 11
     b70:	d9 c0       	rjmp	.+434    	; 0xd24 <__stack+0x4c5>
     b72:	8c e0       	ldi	r24, 0x0C	; 12
     b74:	d7 c0       	rjmp	.+430    	; 0xd24 <__stack+0x4c5>
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	d5 c0       	rjmp	.+426    	; 0xd24 <__stack+0x4c5>
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	d3 c0       	rjmp	.+422    	; 0xd24 <__stack+0x4c5>
     b7e:	83 e0       	ldi	r24, 0x03	; 3
     b80:	d1 c0       	rjmp	.+418    	; 0xd24 <__stack+0x4c5>
     b82:	8a e0       	ldi	r24, 0x0A	; 10
     b84:	cf c0       	rjmp	.+414    	; 0xd24 <__stack+0x4c5>
     b86:	8d e0       	ldi	r24, 0x0D	; 13
     b88:	cd c0       	rjmp	.+410    	; 0xd24 <__stack+0x4c5>
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	cb c0       	rjmp	.+406    	; 0xd24 <__stack+0x4c5>
     b8e:	8d e0       	ldi	r24, 0x0D	; 13
     b90:	c9 c0       	rjmp	.+402    	; 0xd24 <__stack+0x4c5>
     b92:	8d e0       	ldi	r24, 0x0D	; 13
     b94:	c7 c0       	rjmp	.+398    	; 0xd24 <__stack+0x4c5>
     b96:	8d e0       	ldi	r24, 0x0D	; 13
     b98:	c5 c0       	rjmp	.+394    	; 0xd24 <__stack+0x4c5>
     b9a:	8d e0       	ldi	r24, 0x0D	; 13
     b9c:	c3 c0       	rjmp	.+390    	; 0xd24 <__stack+0x4c5>
     b9e:	8d e0       	ldi	r24, 0x0D	; 13
     ba0:	c1 c0       	rjmp	.+386    	; 0xd24 <__stack+0x4c5>
     ba2:	8d e0       	ldi	r24, 0x0D	; 13
     ba4:	bf c0       	rjmp	.+382    	; 0xd24 <__stack+0x4c5>
     ba6:	8d e0       	ldi	r24, 0x0D	; 13
     ba8:	bd c0       	rjmp	.+378    	; 0xd24 <__stack+0x4c5>
     baa:	8d e0       	ldi	r24, 0x0D	; 13
     bac:	bb c0       	rjmp	.+374    	; 0xd24 <__stack+0x4c5>
     bae:	8d e0       	ldi	r24, 0x0D	; 13
     bb0:	b9 c0       	rjmp	.+370    	; 0xd24 <__stack+0x4c5>
     bb2:	8d e0       	ldi	r24, 0x0D	; 13
     bb4:	b7 c0       	rjmp	.+366    	; 0xd24 <__stack+0x4c5>
     bb6:	8d e0       	ldi	r24, 0x0D	; 13
     bb8:	b5 c0       	rjmp	.+362    	; 0xd24 <__stack+0x4c5>
     bba:	8d e0       	ldi	r24, 0x0D	; 13
     bbc:	b3 c0       	rjmp	.+358    	; 0xd24 <__stack+0x4c5>
     bbe:	8d e0       	ldi	r24, 0x0D	; 13
     bc0:	b1 c0       	rjmp	.+354    	; 0xd24 <__stack+0x4c5>
     bc2:	49 01       	movw	r8, r18
     bc4:	5a 01       	movw	r10, r20
     bc6:	b2 e0       	ldi	r27, 0x02	; 2
     bc8:	8b 0e       	add	r8, r27
     bca:	91 1c       	adc	r9, r1
     bcc:	a1 1c       	adc	r10, r1
     bce:	b1 1c       	adc	r11, r1
     bd0:	ed 85       	ldd	r30, Y+13	; 0x0d
     bd2:	fe 85       	ldd	r31, Y+14	; 0x0e
     bd4:	82 8e       	std	Z+26, r8	; 0x1a
     bd6:	93 8e       	std	Z+27, r9	; 0x1b
     bd8:	a4 8e       	std	Z+28, r10	; 0x1c
     bda:	b5 8e       	std	Z+29, r11	; 0x1d
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	9a 81       	ldd	r25, Y+2	; 0x02
     be0:	ab 81       	ldd	r26, Y+3	; 0x03
     be2:	bc 81       	ldd	r27, Y+4	; 0x04
     be4:	8c 0d       	add	r24, r12
     be6:	9d 1d       	adc	r25, r13
     be8:	ae 1d       	adc	r26, r14
     bea:	bf 1d       	adc	r27, r15
     bec:	82 a7       	std	Z+42, r24	; 0x2a
     bee:	93 a7       	std	Z+43, r25	; 0x2b
     bf0:	a4 a7       	std	Z+44, r26	; 0x2c
     bf2:	b5 a7       	std	Z+45, r27	; 0x2d
     bf4:	8d 81       	ldd	r24, Y+5	; 0x05
     bf6:	9e 81       	ldd	r25, Y+6	; 0x06
     bf8:	af 81       	ldd	r26, Y+7	; 0x07
     bfa:	b8 85       	ldd	r27, Y+8	; 0x08
     bfc:	8c 0d       	add	r24, r12
     bfe:	9d 1d       	adc	r25, r13
     c00:	ae 1d       	adc	r26, r14
     c02:	bf 1d       	adc	r27, r15
     c04:	82 a3       	std	Z+34, r24	; 0x22
     c06:	93 a3       	std	Z+35, r25	; 0x23
     c08:	a4 a3       	std	Z+36, r26	; 0x24
     c0a:	b5 a3       	std	Z+37, r27	; 0x25
     c0c:	23 28       	or	r2, r3
     c0e:	99 f6       	brne	.-90     	; 0xbb6 <__stack+0x357>
     c10:	f5 ce       	rjmp	.-534    	; 0x9fc <__stack+0x19d>
     c12:	4f ef       	ldi	r20, 0xFF	; 255
     c14:	5f ef       	ldi	r21, 0xFF	; 255
     c16:	ba 01       	movw	r22, r20
     c18:	ad 85       	ldd	r26, Y+13	; 0x0d
     c1a:	be 85       	ldd	r27, Y+14	; 0x0e
     c1c:	1e 96       	adiw	r26, 0x0e	; 14
     c1e:	4d 93       	st	X+, r20
     c20:	5d 93       	st	X+, r21
     c22:	6d 93       	st	X+, r22
     c24:	7c 93       	st	X, r23
     c26:	51 97       	sbiw	r26, 0x11	; 17
     c28:	1a 96       	adiw	r26, 0x0a	; 10
     c2a:	1d 92       	st	X+, r1
     c2c:	1d 92       	st	X+, r1
     c2e:	1d 92       	st	X+, r1
     c30:	1c 92       	st	X, r1
     c32:	1d 97       	sbiw	r26, 0x0d	; 13
     c34:	7e cf       	rjmp	.-260    	; 0xb32 <__stack+0x2d3>
     c36:	bf ef       	ldi	r27, 0xFF	; 255
     c38:	8b 0e       	add	r8, r27
     c3a:	b1 e0       	ldi	r27, 0x01	; 1
     c3c:	9b 1e       	adc	r9, r27
     c3e:	a1 1c       	adc	r10, r1
     c40:	b1 1c       	adc	r11, r1
     c42:	07 2e       	mov	r0, r23
     c44:	79 e0       	ldi	r23, 0x09	; 9
     c46:	b6 94       	lsr	r11
     c48:	a7 94       	ror	r10
     c4a:	97 94       	ror	r9
     c4c:	87 94       	ror	r8
     c4e:	7a 95       	dec	r23
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__stack+0x3e7>
     c52:	70 2d       	mov	r23, r0
     c54:	48 14       	cp	r4, r8
     c56:	59 04       	cpc	r5, r9
     c58:	6a 04       	cpc	r6, r10
     c5a:	7b 04       	cpc	r7, r11
     c5c:	08 f4       	brcc	.+2      	; 0xc60 <__stack+0x401>
     c5e:	ad cf       	rjmp	.-166    	; 0xbba <__stack+0x35b>
     c60:	d8 cf       	rjmp	.-80     	; 0xc12 <__stack+0x3b3>
     c62:	8f ef       	ldi	r24, 0xFF	; 255
     c64:	9f ef       	ldi	r25, 0xFF	; 255
     c66:	dc 01       	movw	r26, r24
     c68:	ed 85       	ldd	r30, Y+13	; 0x0d
     c6a:	fe 85       	ldd	r31, Y+14	; 0x0e
     c6c:	86 87       	std	Z+14, r24	; 0x0e
     c6e:	97 87       	std	Z+15, r25	; 0x0f
     c70:	a0 8b       	std	Z+16, r26	; 0x10
     c72:	b1 8b       	std	Z+17, r27	; 0x11
     c74:	df 01       	movw	r26, r30
     c76:	12 86       	std	Z+10, r1	; 0x0a
     c78:	13 86       	std	Z+11, r1	; 0x0b
     c7a:	14 86       	std	Z+12, r1	; 0x0c
     c7c:	15 86       	std	Z+13, r1	; 0x0d
     c7e:	15 82       	std	Z+5, r1	; 0x05
     c80:	ee 59       	subi	r30, 0x9E	; 158
     c82:	ff 4f       	sbci	r31, 0xFF	; 255
     c84:	80 81       	ld	r24, Z
     c86:	91 81       	ldd	r25, Z+1	; 0x01
     c88:	a7 01       	movw	r20, r14
     c8a:	96 01       	movw	r18, r12
     c8c:	28 0f       	add	r18, r24
     c8e:	39 1f       	adc	r19, r25
     c90:	41 1d       	adc	r20, r1
     c92:	51 1d       	adc	r21, r1
     c94:	fd 01       	movw	r30, r26
     c96:	22 8b       	std	Z+18, r18	; 0x12
     c98:	33 8b       	std	Z+19, r19	; 0x13
     c9a:	44 8b       	std	Z+20, r20	; 0x14
     c9c:	55 8b       	std	Z+21, r21	; 0x15
     c9e:	01 e0       	ldi	r16, 0x01	; 1
     ca0:	bd 01       	movw	r22, r26
     ca2:	6e 5c       	subi	r22, 0xCE	; 206
     ca4:	7f 4f       	sbci	r23, 0xFF	; 255
     ca6:	81 81       	ldd	r24, Z+1	; 0x01
     ca8:	0e 94 56 2b 	call	0x56ac	; 0x56ac <disk_read>
     cac:	88 23       	and	r24, r24
     cae:	09 f4       	brne	.+2      	; 0xcb2 <__stack+0x453>
     cb0:	fe ce       	rjmp	.-516    	; 0xaae <__stack+0x24f>
     cb2:	f3 e0       	ldi	r31, 0x03	; 3
     cb4:	3e cf       	rjmp	.-388    	; 0xb32 <__stack+0x2d3>
     cb6:	49 01       	movw	r8, r18
     cb8:	5a 01       	movw	r10, r20
     cba:	62 e0       	ldi	r22, 0x02	; 2
     cbc:	86 0e       	add	r8, r22
     cbe:	91 1c       	adc	r9, r1
     cc0:	a1 1c       	adc	r10, r1
     cc2:	b1 1c       	adc	r11, r1
     cc4:	ad 85       	ldd	r26, Y+13	; 0x0d
     cc6:	be 85       	ldd	r27, Y+14	; 0x0e
     cc8:	5a 96       	adiw	r26, 0x1a	; 26
     cca:	8d 92       	st	X+, r8
     ccc:	9d 92       	st	X+, r9
     cce:	ad 92       	st	X+, r10
     cd0:	bc 92       	st	X, r11
     cd2:	5d 97       	sbiw	r26, 0x1d	; 29
     cd4:	49 81       	ldd	r20, Y+1	; 0x01
     cd6:	5a 81       	ldd	r21, Y+2	; 0x02
     cd8:	6b 81       	ldd	r22, Y+3	; 0x03
     cda:	7c 81       	ldd	r23, Y+4	; 0x04
     cdc:	4c 0d       	add	r20, r12
     cde:	5d 1d       	adc	r21, r13
     ce0:	6e 1d       	adc	r22, r14
     ce2:	7f 1d       	adc	r23, r15
     ce4:	9a 96       	adiw	r26, 0x2a	; 42
     ce6:	4d 93       	st	X+, r20
     ce8:	5d 93       	st	X+, r21
     cea:	6d 93       	st	X+, r22
     cec:	7c 93       	st	X, r23
     cee:	9d 97       	sbiw	r26, 0x2d	; 45
     cf0:	2d 81       	ldd	r18, Y+5	; 0x05
     cf2:	3e 81       	ldd	r19, Y+6	; 0x06
     cf4:	4f 81       	ldd	r20, Y+7	; 0x07
     cf6:	58 85       	ldd	r21, Y+8	; 0x08
     cf8:	c2 0e       	add	r12, r18
     cfa:	d3 1e       	adc	r13, r19
     cfc:	e4 1e       	adc	r14, r20
     cfe:	f5 1e       	adc	r15, r21
     d00:	92 96       	adiw	r26, 0x22	; 34
     d02:	cd 92       	st	X+, r12
     d04:	dd 92       	st	X+, r13
     d06:	ed 92       	st	X+, r14
     d08:	fc 92       	st	X, r15
     d0a:	95 97       	sbiw	r26, 0x25	; 37
     d0c:	23 28       	or	r2, r3
     d0e:	09 f4       	brne	.+2      	; 0xd12 <__stack+0x4b3>
     d10:	56 cf       	rjmp	.-340    	; 0xbbe <__stack+0x35f>
     d12:	a0 ce       	rjmp	.-704    	; 0xa54 <__stack+0x1f5>
     d14:	f2 e0       	ldi	r31, 0x02	; 2
     d16:	86 3f       	cpi	r24, 0xF6	; 246
     d18:	9f 4f       	sbci	r25, 0xFF	; 255
     d1a:	a1 05       	cpc	r26, r1
     d1c:	b1 05       	cpc	r27, r1
     d1e:	08 f0       	brcs	.+2      	; 0xd22 <__stack+0x4c3>
     d20:	50 cf       	rjmp	.-352    	; 0xbc2 <__stack+0x363>
     d22:	c9 cf       	rjmp	.-110    	; 0xcb6 <__stack+0x457>
     d24:	2e 96       	adiw	r28, 0x0e	; 14
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	1f 91       	pop	r17
     d36:	0f 91       	pop	r16
     d38:	ff 90       	pop	r15
     d3a:	ef 90       	pop	r14
     d3c:	df 90       	pop	r13
     d3e:	cf 90       	pop	r12
     d40:	bf 90       	pop	r11
     d42:	af 90       	pop	r10
     d44:	9f 90       	pop	r9
     d46:	8f 90       	pop	r8
     d48:	7f 90       	pop	r7
     d4a:	6f 90       	pop	r6
     d4c:	5f 90       	pop	r5
     d4e:	4f 90       	pop	r4
     d50:	3f 90       	pop	r3
     d52:	2f 90       	pop	r2
     d54:	08 95       	ret

00000d56 <sync>:
     d56:	0f 93       	push	r16
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	ec 01       	movw	r28, r24
     d5e:	40 e0       	ldi	r20, 0x00	; 0
     d60:	50 e0       	ldi	r21, 0x00	; 0
     d62:	ba 01       	movw	r22, r20
     d64:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
     d68:	98 2f       	mov	r25, r24
     d6a:	81 11       	cpse	r24, r1
     d6c:	54 c0       	rjmp	.+168    	; 0xe16 <sync+0xc0>
     d6e:	88 81       	ld	r24, Y
     d70:	83 30       	cpi	r24, 0x03	; 3
     d72:	09 f0       	breq	.+2      	; 0xd76 <sync+0x20>
     d74:	46 c0       	rjmp	.+140    	; 0xe02 <sync+0xac>
     d76:	8d 81       	ldd	r24, Y+5	; 0x05
     d78:	88 23       	and	r24, r24
     d7a:	09 f4       	brne	.+2      	; 0xd7e <sync+0x28>
     d7c:	42 c0       	rjmp	.+132    	; 0xe02 <sync+0xac>
     d7e:	1e a6       	std	Y+46, r1	; 0x2e
     d80:	1f a6       	std	Y+47, r1	; 0x2f
     d82:	18 aa       	std	Y+48, r1	; 0x30
     d84:	19 aa       	std	Y+49, r1	; 0x31
     d86:	be 01       	movw	r22, r28
     d88:	6e 5c       	subi	r22, 0xCE	; 206
     d8a:	7f 4f       	sbci	r23, 0xFF	; 255
     d8c:	fb 01       	movw	r30, r22
     d8e:	ce 01       	movw	r24, r28
     d90:	8e 5c       	subi	r24, 0xCE	; 206
     d92:	9d 4f       	sbci	r25, 0xFD	; 253
     d94:	11 92       	st	Z+, r1
     d96:	e8 17       	cp	r30, r24
     d98:	f9 07       	cpc	r31, r25
     d9a:	e1 f7       	brne	.-8      	; 0xd94 <sync+0x3e>
     d9c:	85 e5       	ldi	r24, 0x55	; 85
     d9e:	9a ea       	ldi	r25, 0xAA	; 170
     da0:	fe 01       	movw	r30, r28
     da2:	e0 5d       	subi	r30, 0xD0	; 208
     da4:	fd 4f       	sbci	r31, 0xFD	; 253
     da6:	91 83       	std	Z+1, r25	; 0x01
     da8:	80 83       	st	Z, r24
     daa:	82 e5       	ldi	r24, 0x52	; 82
     dac:	92 e5       	ldi	r25, 0x52	; 82
     dae:	a1 e6       	ldi	r26, 0x61	; 97
     db0:	b1 e4       	ldi	r27, 0x41	; 65
     db2:	8a ab       	std	Y+50, r24	; 0x32
     db4:	9b ab       	std	Y+51, r25	; 0x33
     db6:	ac ab       	std	Y+52, r26	; 0x34
     db8:	bd ab       	std	Y+53, r27	; 0x35
     dba:	82 e7       	ldi	r24, 0x72	; 114
     dbc:	92 e7       	ldi	r25, 0x72	; 114
     dbe:	a1 e4       	ldi	r26, 0x41	; 65
     dc0:	b1 e6       	ldi	r27, 0x61	; 97
     dc2:	7a 97       	sbiw	r30, 0x1a	; 26
     dc4:	80 83       	st	Z, r24
     dc6:	91 83       	std	Z+1, r25	; 0x01
     dc8:	a2 83       	std	Z+2, r26	; 0x02
     dca:	b3 83       	std	Z+3, r27	; 0x03
     dcc:	8e 85       	ldd	r24, Y+14	; 0x0e
     dce:	9f 85       	ldd	r25, Y+15	; 0x0f
     dd0:	a8 89       	ldd	r26, Y+16	; 0x10
     dd2:	b9 89       	ldd	r27, Y+17	; 0x11
     dd4:	34 96       	adiw	r30, 0x04	; 4
     dd6:	80 83       	st	Z, r24
     dd8:	91 83       	std	Z+1, r25	; 0x01
     dda:	a2 83       	std	Z+2, r26	; 0x02
     ddc:	b3 83       	std	Z+3, r27	; 0x03
     dde:	8a 85       	ldd	r24, Y+10	; 0x0a
     de0:	9b 85       	ldd	r25, Y+11	; 0x0b
     de2:	ac 85       	ldd	r26, Y+12	; 0x0c
     de4:	bd 85       	ldd	r27, Y+13	; 0x0d
     de6:	34 96       	adiw	r30, 0x04	; 4
     de8:	80 83       	st	Z, r24
     dea:	91 83       	std	Z+1, r25	; 0x01
     dec:	a2 83       	std	Z+2, r26	; 0x02
     dee:	b3 83       	std	Z+3, r27	; 0x03
     df0:	2a 89       	ldd	r18, Y+18	; 0x12
     df2:	3b 89       	ldd	r19, Y+19	; 0x13
     df4:	4c 89       	ldd	r20, Y+20	; 0x14
     df6:	5d 89       	ldd	r21, Y+21	; 0x15
     df8:	01 e0       	ldi	r16, 0x01	; 1
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	0e 94 a9 2b 	call	0x5752	; 0x5752 <disk_write>
     e00:	1d 82       	std	Y+5, r1	; 0x05
     e02:	40 e0       	ldi	r20, 0x00	; 0
     e04:	50 e0       	ldi	r21, 0x00	; 0
     e06:	60 e0       	ldi	r22, 0x00	; 0
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	0e 94 15 2c 	call	0x582a	; 0x582a <disk_ioctl>
     e0e:	91 e0       	ldi	r25, 0x01	; 1
     e10:	81 11       	cpse	r24, r1
     e12:	01 c0       	rjmp	.+2      	; 0xe16 <sync+0xc0>
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	89 2f       	mov	r24, r25
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	0f 91       	pop	r16
     e1e:	08 95       	ret

00000e20 <clust2sect>:
     e20:	0f 93       	push	r16
     e22:	1f 93       	push	r17
     e24:	fc 01       	movw	r30, r24
     e26:	9a 01       	movw	r18, r20
     e28:	ab 01       	movw	r20, r22
     e2a:	22 50       	subi	r18, 0x02	; 2
     e2c:	31 09       	sbc	r19, r1
     e2e:	41 09       	sbc	r20, r1
     e30:	51 09       	sbc	r21, r1
     e32:	82 8d       	ldd	r24, Z+26	; 0x1a
     e34:	93 8d       	ldd	r25, Z+27	; 0x1b
     e36:	a4 8d       	ldd	r26, Z+28	; 0x1c
     e38:	b5 8d       	ldd	r27, Z+29	; 0x1d
     e3a:	02 97       	sbiw	r24, 0x02	; 2
     e3c:	a1 09       	sbc	r26, r1
     e3e:	b1 09       	sbc	r27, r1
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	4a 07       	cpc	r20, r26
     e46:	5b 07       	cpc	r21, r27
     e48:	68 f4       	brcc	.+26     	; 0xe64 <clust2sect+0x44>
     e4a:	a2 81       	ldd	r26, Z+2	; 0x02
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	0e 94 6e 38 	call	0x70dc	; 0x70dc <__muluhisi3>
     e52:	02 a5       	ldd	r16, Z+42	; 0x2a
     e54:	13 a5       	ldd	r17, Z+43	; 0x2b
     e56:	24 a5       	ldd	r18, Z+44	; 0x2c
     e58:	35 a5       	ldd	r19, Z+45	; 0x2d
     e5a:	60 0f       	add	r22, r16
     e5c:	71 1f       	adc	r23, r17
     e5e:	82 1f       	adc	r24, r18
     e60:	93 1f       	adc	r25, r19
     e62:	03 c0       	rjmp	.+6      	; 0xe6a <clust2sect+0x4a>
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	cb 01       	movw	r24, r22
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	08 95       	ret

00000e70 <get_fat>:
     e70:	af 92       	push	r10
     e72:	bf 92       	push	r11
     e74:	cf 92       	push	r12
     e76:	df 92       	push	r13
     e78:	ef 92       	push	r14
     e7a:	ff 92       	push	r15
     e7c:	1f 93       	push	r17
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	42 30       	cpi	r20, 0x02	; 2
     e84:	51 05       	cpc	r21, r1
     e86:	61 05       	cpc	r22, r1
     e88:	71 05       	cpc	r23, r1
     e8a:	08 f4       	brcc	.+2      	; 0xe8e <get_fat+0x1e>
     e8c:	ad c0       	rjmp	.+346    	; 0xfe8 <get_fat+0x178>
     e8e:	fc 01       	movw	r30, r24
     e90:	c2 8c       	ldd	r12, Z+26	; 0x1a
     e92:	d3 8c       	ldd	r13, Z+27	; 0x1b
     e94:	e4 8c       	ldd	r14, Z+28	; 0x1c
     e96:	f5 8c       	ldd	r15, Z+29	; 0x1d
     e98:	4c 15       	cp	r20, r12
     e9a:	5d 05       	cpc	r21, r13
     e9c:	6e 05       	cpc	r22, r14
     e9e:	7f 05       	cpc	r23, r15
     ea0:	08 f0       	brcs	.+2      	; 0xea4 <get_fat+0x34>
     ea2:	a7 c0       	rjmp	.+334    	; 0xff2 <get_fat+0x182>
     ea4:	6a 01       	movw	r12, r20
     ea6:	7b 01       	movw	r14, r22
     ea8:	ec 01       	movw	r28, r24
     eaa:	80 81       	ld	r24, Z
     eac:	82 30       	cpi	r24, 0x02	; 2
     eae:	09 f4       	brne	.+2      	; 0xeb2 <get_fat+0x42>
     eb0:	4c c0       	rjmp	.+152    	; 0xf4a <get_fat+0xda>
     eb2:	83 30       	cpi	r24, 0x03	; 3
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <get_fat+0x48>
     eb6:	6b c0       	rjmp	.+214    	; 0xf8e <get_fat+0x11e>
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	09 f0       	breq	.+2      	; 0xebe <get_fat+0x4e>
     ebc:	9f c0       	rjmp	.+318    	; 0xffc <get_fat+0x18c>
     ebe:	5a 01       	movw	r10, r20
     ec0:	b6 94       	lsr	r11
     ec2:	a7 94       	ror	r10
     ec4:	a4 0e       	add	r10, r20
     ec6:	b5 1e       	adc	r11, r21
     ec8:	c5 01       	movw	r24, r10
     eca:	89 2f       	mov	r24, r25
     ecc:	99 27       	eor	r25, r25
     ece:	86 95       	lsr	r24
     ed0:	42 a1       	ldd	r20, Z+34	; 0x22
     ed2:	53 a1       	ldd	r21, Z+35	; 0x23
     ed4:	64 a1       	ldd	r22, Z+36	; 0x24
     ed6:	75 a1       	ldd	r23, Z+37	; 0x25
     ed8:	48 0f       	add	r20, r24
     eda:	59 1f       	adc	r21, r25
     edc:	61 1d       	adc	r22, r1
     ede:	71 1d       	adc	r23, r1
     ee0:	cf 01       	movw	r24, r30
     ee2:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
     ee6:	81 11       	cpse	r24, r1
     ee8:	8d c0       	rjmp	.+282    	; 0x1004 <get_fat+0x194>
     eea:	f5 01       	movw	r30, r10
     eec:	f1 70       	andi	r31, 0x01	; 1
     eee:	ec 0f       	add	r30, r28
     ef0:	fd 1f       	adc	r31, r29
     ef2:	12 a9       	ldd	r17, Z+50	; 0x32
     ef4:	ff ef       	ldi	r31, 0xFF	; 255
     ef6:	af 1a       	sub	r10, r31
     ef8:	bf 0a       	sbc	r11, r31
     efa:	c5 01       	movw	r24, r10
     efc:	89 2f       	mov	r24, r25
     efe:	99 27       	eor	r25, r25
     f00:	86 95       	lsr	r24
     f02:	4a a1       	ldd	r20, Y+34	; 0x22
     f04:	5b a1       	ldd	r21, Y+35	; 0x23
     f06:	6c a1       	ldd	r22, Y+36	; 0x24
     f08:	7d a1       	ldd	r23, Y+37	; 0x25
     f0a:	48 0f       	add	r20, r24
     f0c:	59 1f       	adc	r21, r25
     f0e:	61 1d       	adc	r22, r1
     f10:	71 1d       	adc	r23, r1
     f12:	ce 01       	movw	r24, r28
     f14:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
     f18:	81 11       	cpse	r24, r1
     f1a:	78 c0       	rjmp	.+240    	; 0x100c <get_fat+0x19c>
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	b8 22       	and	r11, r24
     f20:	ca 0d       	add	r28, r10
     f22:	db 1d       	adc	r29, r11
     f24:	8a a9       	ldd	r24, Y+50	; 0x32
     f26:	61 2f       	mov	r22, r17
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	78 2b       	or	r23, r24
     f2c:	c0 fe       	sbrs	r12, 0
     f2e:	09 c0       	rjmp	.+18     	; 0xf42 <get_fat+0xd2>
     f30:	72 95       	swap	r23
     f32:	62 95       	swap	r22
     f34:	6f 70       	andi	r22, 0x0F	; 15
     f36:	67 27       	eor	r22, r23
     f38:	7f 70       	andi	r23, 0x0F	; 15
     f3a:	67 27       	eor	r22, r23
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	70 c0       	rjmp	.+224    	; 0x1022 <get_fat+0x1b2>
     f42:	7f 70       	andi	r23, 0x0F	; 15
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	6c c0       	rjmp	.+216    	; 0x1022 <get_fat+0x1b2>
     f4a:	45 2f       	mov	r20, r21
     f4c:	56 2f       	mov	r21, r22
     f4e:	67 2f       	mov	r22, r23
     f50:	77 27       	eor	r23, r23
     f52:	82 a1       	ldd	r24, Z+34	; 0x22
     f54:	93 a1       	ldd	r25, Z+35	; 0x23
     f56:	a4 a1       	ldd	r26, Z+36	; 0x24
     f58:	b5 a1       	ldd	r27, Z+37	; 0x25
     f5a:	48 0f       	add	r20, r24
     f5c:	59 1f       	adc	r21, r25
     f5e:	6a 1f       	adc	r22, r26
     f60:	7b 1f       	adc	r23, r27
     f62:	cf 01       	movw	r24, r30
     f64:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
     f68:	81 11       	cpse	r24, r1
     f6a:	54 c0       	rjmp	.+168    	; 0x1014 <get_fat+0x1a4>
     f6c:	b7 01       	movw	r22, r14
     f6e:	a6 01       	movw	r20, r12
     f70:	44 0f       	add	r20, r20
     f72:	55 1f       	adc	r21, r21
     f74:	66 1f       	adc	r22, r22
     f76:	77 1f       	adc	r23, r23
     f78:	4e 7f       	andi	r20, 0xFE	; 254
     f7a:	51 70       	andi	r21, 0x01	; 1
     f7c:	66 27       	eor	r22, r22
     f7e:	77 27       	eor	r23, r23
     f80:	c4 0f       	add	r28, r20
     f82:	d5 1f       	adc	r29, r21
     f84:	6a a9       	ldd	r22, Y+50	; 0x32
     f86:	7b a9       	ldd	r23, Y+51	; 0x33
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	4a c0       	rjmp	.+148    	; 0x1022 <get_fat+0x1b2>
     f8e:	82 a1       	ldd	r24, Z+34	; 0x22
     f90:	93 a1       	ldd	r25, Z+35	; 0x23
     f92:	a4 a1       	ldd	r26, Z+36	; 0x24
     f94:	b5 a1       	ldd	r27, Z+37	; 0x25
     f96:	68 94       	set
     f98:	16 f8       	bld	r1, 6
     f9a:	76 95       	lsr	r23
     f9c:	67 95       	ror	r22
     f9e:	57 95       	ror	r21
     fa0:	47 95       	ror	r20
     fa2:	16 94       	lsr	r1
     fa4:	d1 f7       	brne	.-12     	; 0xf9a <get_fat+0x12a>
     fa6:	48 0f       	add	r20, r24
     fa8:	59 1f       	adc	r21, r25
     faa:	6a 1f       	adc	r22, r26
     fac:	7b 1f       	adc	r23, r27
     fae:	cf 01       	movw	r24, r30
     fb0:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
     fb4:	81 11       	cpse	r24, r1
     fb6:	32 c0       	rjmp	.+100    	; 0x101c <get_fat+0x1ac>
     fb8:	b7 01       	movw	r22, r14
     fba:	a6 01       	movw	r20, r12
     fbc:	44 0f       	add	r20, r20
     fbe:	55 1f       	adc	r21, r21
     fc0:	66 1f       	adc	r22, r22
     fc2:	77 1f       	adc	r23, r23
     fc4:	44 0f       	add	r20, r20
     fc6:	55 1f       	adc	r21, r21
     fc8:	66 1f       	adc	r22, r22
     fca:	77 1f       	adc	r23, r23
     fcc:	4c 7f       	andi	r20, 0xFC	; 252
     fce:	51 70       	andi	r21, 0x01	; 1
     fd0:	66 27       	eor	r22, r22
     fd2:	77 27       	eor	r23, r23
     fd4:	c4 0f       	add	r28, r20
     fd6:	d5 1f       	adc	r29, r21
     fd8:	8a a9       	ldd	r24, Y+50	; 0x32
     fda:	9b a9       	ldd	r25, Y+51	; 0x33
     fdc:	ac a9       	ldd	r26, Y+52	; 0x34
     fde:	bd a9       	ldd	r27, Y+53	; 0x35
     fe0:	bc 01       	movw	r22, r24
     fe2:	cd 01       	movw	r24, r26
     fe4:	9f 70       	andi	r25, 0x0F	; 15
     fe6:	1d c0       	rjmp	.+58     	; 0x1022 <get_fat+0x1b2>
     fe8:	61 e0       	ldi	r22, 0x01	; 1
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	18 c0       	rjmp	.+48     	; 0x1022 <get_fat+0x1b2>
     ff2:	61 e0       	ldi	r22, 0x01	; 1
     ff4:	70 e0       	ldi	r23, 0x00	; 0
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	13 c0       	rjmp	.+38     	; 0x1022 <get_fat+0x1b2>
     ffc:	6f ef       	ldi	r22, 0xFF	; 255
     ffe:	7f ef       	ldi	r23, 0xFF	; 255
    1000:	cb 01       	movw	r24, r22
    1002:	0f c0       	rjmp	.+30     	; 0x1022 <get_fat+0x1b2>
    1004:	6f ef       	ldi	r22, 0xFF	; 255
    1006:	7f ef       	ldi	r23, 0xFF	; 255
    1008:	cb 01       	movw	r24, r22
    100a:	0b c0       	rjmp	.+22     	; 0x1022 <get_fat+0x1b2>
    100c:	6f ef       	ldi	r22, 0xFF	; 255
    100e:	7f ef       	ldi	r23, 0xFF	; 255
    1010:	cb 01       	movw	r24, r22
    1012:	07 c0       	rjmp	.+14     	; 0x1022 <get_fat+0x1b2>
    1014:	6f ef       	ldi	r22, 0xFF	; 255
    1016:	7f ef       	ldi	r23, 0xFF	; 255
    1018:	cb 01       	movw	r24, r22
    101a:	03 c0       	rjmp	.+6      	; 0x1022 <get_fat+0x1b2>
    101c:	6f ef       	ldi	r22, 0xFF	; 255
    101e:	7f ef       	ldi	r23, 0xFF	; 255
    1020:	cb 01       	movw	r24, r22
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	df 90       	pop	r13
    102e:	cf 90       	pop	r12
    1030:	bf 90       	pop	r11
    1032:	af 90       	pop	r10
    1034:	08 95       	ret

00001036 <dir_sdi>:
    1036:	ef 92       	push	r14
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	ec 01       	movw	r28, r24
    1044:	8b 01       	movw	r16, r22
    1046:	7d 83       	std	Y+5, r23	; 0x05
    1048:	6c 83       	std	Y+4, r22	; 0x04
    104a:	4e 81       	ldd	r20, Y+6	; 0x06
    104c:	5f 81       	ldd	r21, Y+7	; 0x07
    104e:	68 85       	ldd	r22, Y+8	; 0x08
    1050:	79 85       	ldd	r23, Y+9	; 0x09
    1052:	41 30       	cpi	r20, 0x01	; 1
    1054:	51 05       	cpc	r21, r1
    1056:	61 05       	cpc	r22, r1
    1058:	71 05       	cpc	r23, r1
    105a:	09 f4       	brne	.+2      	; 0x105e <dir_sdi+0x28>
    105c:	92 c0       	rjmp	.+292    	; 0x1182 <dir_sdi+0x14c>
    105e:	e8 81       	ld	r30, Y
    1060:	f9 81       	ldd	r31, Y+1	; 0x01
    1062:	82 8d       	ldd	r24, Z+26	; 0x1a
    1064:	93 8d       	ldd	r25, Z+27	; 0x1b
    1066:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1068:	b5 8d       	ldd	r27, Z+29	; 0x1d
    106a:	48 17       	cp	r20, r24
    106c:	59 07       	cpc	r21, r25
    106e:	6a 07       	cpc	r22, r26
    1070:	7b 07       	cpc	r23, r27
    1072:	08 f0       	brcs	.+2      	; 0x1076 <dir_sdi+0x40>
    1074:	88 c0       	rjmp	.+272    	; 0x1186 <dir_sdi+0x150>
    1076:	41 15       	cp	r20, r1
    1078:	51 05       	cpc	r21, r1
    107a:	61 05       	cpc	r22, r1
    107c:	71 05       	cpc	r23, r1
    107e:	51 f5       	brne	.+84     	; 0x10d4 <dir_sdi+0x9e>
    1080:	80 81       	ld	r24, Z
    1082:	83 30       	cpi	r24, 0x03	; 3
    1084:	49 f4       	brne	.+18     	; 0x1098 <dir_sdi+0x62>
    1086:	46 a1       	ldd	r20, Z+38	; 0x26
    1088:	57 a1       	ldd	r21, Z+39	; 0x27
    108a:	60 a5       	ldd	r22, Z+40	; 0x28
    108c:	71 a5       	ldd	r23, Z+41	; 0x29
    108e:	41 15       	cp	r20, r1
    1090:	51 05       	cpc	r21, r1
    1092:	61 05       	cpc	r22, r1
    1094:	71 05       	cpc	r23, r1
    1096:	f1 f4       	brne	.+60     	; 0x10d4 <dir_sdi+0x9e>
    1098:	1a 86       	std	Y+10, r1	; 0x0a
    109a:	1b 86       	std	Y+11, r1	; 0x0b
    109c:	1c 86       	std	Y+12, r1	; 0x0c
    109e:	1d 86       	std	Y+13, r1	; 0x0d
    10a0:	80 85       	ldd	r24, Z+8	; 0x08
    10a2:	91 85       	ldd	r25, Z+9	; 0x09
    10a4:	08 17       	cp	r16, r24
    10a6:	19 07       	cpc	r17, r25
    10a8:	08 f0       	brcs	.+2      	; 0x10ac <dir_sdi+0x76>
    10aa:	6f c0       	rjmp	.+222    	; 0x118a <dir_sdi+0x154>
    10ac:	86 a1       	ldd	r24, Z+38	; 0x26
    10ae:	97 a1       	ldd	r25, Z+39	; 0x27
    10b0:	a0 a5       	ldd	r26, Z+40	; 0x28
    10b2:	b1 a5       	ldd	r27, Z+41	; 0x29
    10b4:	98 01       	movw	r18, r16
    10b6:	32 95       	swap	r19
    10b8:	22 95       	swap	r18
    10ba:	2f 70       	andi	r18, 0x0F	; 15
    10bc:	23 27       	eor	r18, r19
    10be:	3f 70       	andi	r19, 0x0F	; 15
    10c0:	23 27       	eor	r18, r19
    10c2:	82 0f       	add	r24, r18
    10c4:	93 1f       	adc	r25, r19
    10c6:	a1 1d       	adc	r26, r1
    10c8:	b1 1d       	adc	r27, r1
    10ca:	8e 87       	std	Y+14, r24	; 0x0e
    10cc:	9f 87       	std	Y+15, r25	; 0x0f
    10ce:	a8 8b       	std	Y+16, r26	; 0x10
    10d0:	b9 8b       	std	Y+17, r27	; 0x11
    10d2:	44 c0       	rjmp	.+136    	; 0x115c <dir_sdi+0x126>
    10d4:	e2 80       	ldd	r14, Z+2	; 0x02
    10d6:	80 e1       	ldi	r24, 0x10	; 16
    10d8:	e8 9e       	mul	r14, r24
    10da:	70 01       	movw	r14, r0
    10dc:	11 24       	eor	r1, r1
    10de:	0e 15       	cp	r16, r14
    10e0:	1f 05       	cpc	r17, r15
    10e2:	18 f1       	brcs	.+70     	; 0x112a <dir_sdi+0xf4>
    10e4:	88 81       	ld	r24, Y
    10e6:	99 81       	ldd	r25, Y+1	; 0x01
    10e8:	0e 94 38 07 	call	0xe70	; 0xe70 <get_fat>
    10ec:	ab 01       	movw	r20, r22
    10ee:	bc 01       	movw	r22, r24
    10f0:	4f 3f       	cpi	r20, 0xFF	; 255
    10f2:	8f ef       	ldi	r24, 0xFF	; 255
    10f4:	58 07       	cpc	r21, r24
    10f6:	68 07       	cpc	r22, r24
    10f8:	78 07       	cpc	r23, r24
    10fa:	09 f4       	brne	.+2      	; 0x10fe <dir_sdi+0xc8>
    10fc:	48 c0       	rjmp	.+144    	; 0x118e <dir_sdi+0x158>
    10fe:	42 30       	cpi	r20, 0x02	; 2
    1100:	51 05       	cpc	r21, r1
    1102:	61 05       	cpc	r22, r1
    1104:	71 05       	cpc	r23, r1
    1106:	08 f4       	brcc	.+2      	; 0x110a <dir_sdi+0xd4>
    1108:	44 c0       	rjmp	.+136    	; 0x1192 <dir_sdi+0x15c>
    110a:	e8 81       	ld	r30, Y
    110c:	f9 81       	ldd	r31, Y+1	; 0x01
    110e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1110:	93 8d       	ldd	r25, Z+27	; 0x1b
    1112:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1114:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1116:	48 17       	cp	r20, r24
    1118:	59 07       	cpc	r21, r25
    111a:	6a 07       	cpc	r22, r26
    111c:	7b 07       	cpc	r23, r27
    111e:	d8 f5       	brcc	.+118    	; 0x1196 <dir_sdi+0x160>
    1120:	0e 19       	sub	r16, r14
    1122:	1f 09       	sbc	r17, r15
    1124:	0e 15       	cp	r16, r14
    1126:	1f 05       	cpc	r17, r15
    1128:	e8 f6       	brcc	.-70     	; 0x10e4 <dir_sdi+0xae>
    112a:	4a 87       	std	Y+10, r20	; 0x0a
    112c:	5b 87       	std	Y+11, r21	; 0x0b
    112e:	6c 87       	std	Y+12, r22	; 0x0c
    1130:	7d 87       	std	Y+13, r23	; 0x0d
    1132:	88 81       	ld	r24, Y
    1134:	99 81       	ldd	r25, Y+1	; 0x01
    1136:	0e 94 10 07 	call	0xe20	; 0xe20 <clust2sect>
    113a:	98 01       	movw	r18, r16
    113c:	32 95       	swap	r19
    113e:	22 95       	swap	r18
    1140:	2f 70       	andi	r18, 0x0F	; 15
    1142:	23 27       	eor	r18, r19
    1144:	3f 70       	andi	r19, 0x0F	; 15
    1146:	23 27       	eor	r18, r19
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	82 0f       	add	r24, r18
    114e:	93 1f       	adc	r25, r19
    1150:	a1 1d       	adc	r26, r1
    1152:	b1 1d       	adc	r27, r1
    1154:	8e 87       	std	Y+14, r24	; 0x0e
    1156:	9f 87       	std	Y+15, r25	; 0x0f
    1158:	a8 8b       	std	Y+16, r26	; 0x10
    115a:	b9 8b       	std	Y+17, r27	; 0x11
    115c:	88 81       	ld	r24, Y
    115e:	99 81       	ldd	r25, Y+1	; 0x01
    1160:	c2 96       	adiw	r24, 0x32	; 50
    1162:	0f 70       	andi	r16, 0x0F	; 15
    1164:	11 27       	eor	r17, r17
    1166:	00 0f       	add	r16, r16
    1168:	11 1f       	adc	r17, r17
    116a:	02 95       	swap	r16
    116c:	12 95       	swap	r17
    116e:	10 7f       	andi	r17, 0xF0	; 240
    1170:	10 27       	eor	r17, r16
    1172:	00 7f       	andi	r16, 0xF0	; 240
    1174:	10 27       	eor	r17, r16
    1176:	08 0f       	add	r16, r24
    1178:	19 1f       	adc	r17, r25
    117a:	1b 8b       	std	Y+19, r17	; 0x13
    117c:	0a 8b       	std	Y+18, r16	; 0x12
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	0b c0       	rjmp	.+22     	; 0x1198 <dir_sdi+0x162>
    1182:	82 e0       	ldi	r24, 0x02	; 2
    1184:	09 c0       	rjmp	.+18     	; 0x1198 <dir_sdi+0x162>
    1186:	82 e0       	ldi	r24, 0x02	; 2
    1188:	07 c0       	rjmp	.+14     	; 0x1198 <dir_sdi+0x162>
    118a:	82 e0       	ldi	r24, 0x02	; 2
    118c:	05 c0       	rjmp	.+10     	; 0x1198 <dir_sdi+0x162>
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	03 c0       	rjmp	.+6      	; 0x1198 <dir_sdi+0x162>
    1192:	82 e0       	ldi	r24, 0x02	; 2
    1194:	01 c0       	rjmp	.+2      	; 0x1198 <dir_sdi+0x162>
    1196:	82 e0       	ldi	r24, 0x02	; 2
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	1f 91       	pop	r17
    119e:	0f 91       	pop	r16
    11a0:	ff 90       	pop	r15
    11a2:	ef 90       	pop	r14
    11a4:	08 95       	ret

000011a6 <put_fat>:
    11a6:	6f 92       	push	r6
    11a8:	7f 92       	push	r7
    11aa:	8f 92       	push	r8
    11ac:	9f 92       	push	r9
    11ae:	af 92       	push	r10
    11b0:	bf 92       	push	r11
    11b2:	cf 92       	push	r12
    11b4:	df 92       	push	r13
    11b6:	ef 92       	push	r14
    11b8:	ff 92       	push	r15
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	42 30       	cpi	r20, 0x02	; 2
    11c4:	51 05       	cpc	r21, r1
    11c6:	61 05       	cpc	r22, r1
    11c8:	71 05       	cpc	r23, r1
    11ca:	08 f4       	brcc	.+2      	; 0x11ce <put_fat+0x28>
    11cc:	e1 c0       	rjmp	.+450    	; 0x1390 <put_fat+0x1ea>
    11ce:	fc 01       	movw	r30, r24
    11d0:	c2 8c       	ldd	r12, Z+26	; 0x1a
    11d2:	d3 8c       	ldd	r13, Z+27	; 0x1b
    11d4:	e4 8c       	ldd	r14, Z+28	; 0x1c
    11d6:	f5 8c       	ldd	r15, Z+29	; 0x1d
    11d8:	4c 15       	cp	r20, r12
    11da:	5d 05       	cpc	r21, r13
    11dc:	6e 05       	cpc	r22, r14
    11de:	7f 05       	cpc	r23, r15
    11e0:	08 f0       	brcs	.+2      	; 0x11e4 <put_fat+0x3e>
    11e2:	d8 c0       	rjmp	.+432    	; 0x1394 <put_fat+0x1ee>
    11e4:	68 01       	movw	r12, r16
    11e6:	79 01       	movw	r14, r18
    11e8:	4a 01       	movw	r8, r20
    11ea:	5b 01       	movw	r10, r22
    11ec:	ec 01       	movw	r28, r24
    11ee:	80 81       	ld	r24, Z
    11f0:	82 30       	cpi	r24, 0x02	; 2
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <put_fat+0x50>
    11f4:	67 c0       	rjmp	.+206    	; 0x12c4 <put_fat+0x11e>
    11f6:	83 30       	cpi	r24, 0x03	; 3
    11f8:	09 f4       	brne	.+2      	; 0x11fc <put_fat+0x56>
    11fa:	88 c0       	rjmp	.+272    	; 0x130c <put_fat+0x166>
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	09 f0       	breq	.+2      	; 0x1202 <put_fat+0x5c>
    1200:	bf c0       	rjmp	.+382    	; 0x1380 <put_fat+0x1da>
    1202:	8a 01       	movw	r16, r20
    1204:	16 95       	lsr	r17
    1206:	07 95       	ror	r16
    1208:	38 01       	movw	r6, r16
    120a:	64 0e       	add	r6, r20
    120c:	75 1e       	adc	r7, r21
    120e:	c3 01       	movw	r24, r6
    1210:	89 2f       	mov	r24, r25
    1212:	99 27       	eor	r25, r25
    1214:	86 95       	lsr	r24
    1216:	42 a1       	ldd	r20, Z+34	; 0x22
    1218:	53 a1       	ldd	r21, Z+35	; 0x23
    121a:	64 a1       	ldd	r22, Z+36	; 0x24
    121c:	75 a1       	ldd	r23, Z+37	; 0x25
    121e:	48 0f       	add	r20, r24
    1220:	59 1f       	adc	r21, r25
    1222:	61 1d       	adc	r22, r1
    1224:	71 1d       	adc	r23, r1
    1226:	cf 01       	movw	r24, r30
    1228:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
    122c:	18 2f       	mov	r17, r24
    122e:	81 11       	cpse	r24, r1
    1230:	ac c0       	rjmp	.+344    	; 0x138a <put_fat+0x1e4>
    1232:	c3 01       	movw	r24, r6
    1234:	91 70       	andi	r25, 0x01	; 1
    1236:	80 fe       	sbrs	r8, 0
    1238:	24 c0       	rjmp	.+72     	; 0x1282 <put_fat+0xdc>
    123a:	fe 01       	movw	r30, r28
    123c:	e8 0f       	add	r30, r24
    123e:	f9 1f       	adc	r31, r25
    1240:	82 a9       	ldd	r24, Z+50	; 0x32
    1242:	28 2f       	mov	r18, r24
    1244:	2f 70       	andi	r18, 0x0F	; 15
    1246:	30 e1       	ldi	r19, 0x10	; 16
    1248:	c3 9e       	mul	r12, r19
    124a:	c0 01       	movw	r24, r0
    124c:	11 24       	eor	r1, r1
    124e:	82 2b       	or	r24, r18
    1250:	82 ab       	std	Z+50, r24	; 0x32
    1252:	53 01       	movw	r10, r6
    1254:	8f ef       	ldi	r24, 0xFF	; 255
    1256:	a8 1a       	sub	r10, r24
    1258:	b8 0a       	sbc	r11, r24
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	8c 83       	std	Y+4, r24	; 0x04
    125e:	c5 01       	movw	r24, r10
    1260:	89 2f       	mov	r24, r25
    1262:	99 27       	eor	r25, r25
    1264:	86 95       	lsr	r24
    1266:	4a a1       	ldd	r20, Y+34	; 0x22
    1268:	5b a1       	ldd	r21, Y+35	; 0x23
    126a:	6c a1       	ldd	r22, Y+36	; 0x24
    126c:	7d a1       	ldd	r23, Y+37	; 0x25
    126e:	48 0f       	add	r20, r24
    1270:	59 1f       	adc	r21, r25
    1272:	61 1d       	adc	r22, r1
    1274:	71 1d       	adc	r23, r1
    1276:	ce 01       	movw	r24, r28
    1278:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
    127c:	81 11       	cpse	r24, r1
    127e:	82 c0       	rjmp	.+260    	; 0x1384 <put_fat+0x1de>
    1280:	8b c0       	rjmp	.+278    	; 0x1398 <put_fat+0x1f2>
    1282:	fe 01       	movw	r30, r28
    1284:	e8 0f       	add	r30, r24
    1286:	f9 1f       	adc	r31, r25
    1288:	c2 aa       	std	Z+50, r12	; 0x32
    128a:	53 01       	movw	r10, r6
    128c:	ef ef       	ldi	r30, 0xFF	; 255
    128e:	ae 1a       	sub	r10, r30
    1290:	be 0a       	sbc	r11, r30
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	8c 83       	std	Y+4, r24	; 0x04
    1296:	c5 01       	movw	r24, r10
    1298:	89 2f       	mov	r24, r25
    129a:	99 27       	eor	r25, r25
    129c:	86 95       	lsr	r24
    129e:	4a a1       	ldd	r20, Y+34	; 0x22
    12a0:	5b a1       	ldd	r21, Y+35	; 0x23
    12a2:	6c a1       	ldd	r22, Y+36	; 0x24
    12a4:	7d a1       	ldd	r23, Y+37	; 0x25
    12a6:	48 0f       	add	r20, r24
    12a8:	59 1f       	adc	r21, r25
    12aa:	61 1d       	adc	r22, r1
    12ac:	71 1d       	adc	r23, r1
    12ae:	ce 01       	movw	r24, r28
    12b0:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
    12b4:	81 11       	cpse	r24, r1
    12b6:	68 c0       	rjmp	.+208    	; 0x1388 <put_fat+0x1e2>
    12b8:	7a c0       	rjmp	.+244    	; 0x13ae <put_fat+0x208>
    12ba:	fe 01       	movw	r30, r28
    12bc:	e8 0f       	add	r30, r24
    12be:	f9 1f       	adc	r31, r25
    12c0:	c2 aa       	std	Z+50, r12	; 0x32
    12c2:	63 c0       	rjmp	.+198    	; 0x138a <put_fat+0x1e4>
    12c4:	45 2f       	mov	r20, r21
    12c6:	56 2f       	mov	r21, r22
    12c8:	67 2f       	mov	r22, r23
    12ca:	77 27       	eor	r23, r23
    12cc:	82 a1       	ldd	r24, Z+34	; 0x22
    12ce:	93 a1       	ldd	r25, Z+35	; 0x23
    12d0:	a4 a1       	ldd	r26, Z+36	; 0x24
    12d2:	b5 a1       	ldd	r27, Z+37	; 0x25
    12d4:	48 0f       	add	r20, r24
    12d6:	59 1f       	adc	r21, r25
    12d8:	6a 1f       	adc	r22, r26
    12da:	7b 1f       	adc	r23, r27
    12dc:	cf 01       	movw	r24, r30
    12de:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
    12e2:	18 2f       	mov	r17, r24
    12e4:	81 11       	cpse	r24, r1
    12e6:	51 c0       	rjmp	.+162    	; 0x138a <put_fat+0x1e4>
    12e8:	b5 01       	movw	r22, r10
    12ea:	a4 01       	movw	r20, r8
    12ec:	44 0f       	add	r20, r20
    12ee:	55 1f       	adc	r21, r21
    12f0:	66 1f       	adc	r22, r22
    12f2:	77 1f       	adc	r23, r23
    12f4:	4e 7f       	andi	r20, 0xFE	; 254
    12f6:	51 70       	andi	r21, 0x01	; 1
    12f8:	66 27       	eor	r22, r22
    12fa:	77 27       	eor	r23, r23
    12fc:	4e 5c       	subi	r20, 0xCE	; 206
    12fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1300:	fe 01       	movw	r30, r28
    1302:	e4 0f       	add	r30, r20
    1304:	f5 1f       	adc	r31, r21
    1306:	d1 82       	std	Z+1, r13	; 0x01
    1308:	c0 82       	st	Z, r12
    130a:	3f c0       	rjmp	.+126    	; 0x138a <put_fat+0x1e4>
    130c:	82 a1       	ldd	r24, Z+34	; 0x22
    130e:	93 a1       	ldd	r25, Z+35	; 0x23
    1310:	a4 a1       	ldd	r26, Z+36	; 0x24
    1312:	b5 a1       	ldd	r27, Z+37	; 0x25
    1314:	68 94       	set
    1316:	16 f8       	bld	r1, 6
    1318:	76 95       	lsr	r23
    131a:	67 95       	ror	r22
    131c:	57 95       	ror	r21
    131e:	47 95       	ror	r20
    1320:	16 94       	lsr	r1
    1322:	d1 f7       	brne	.-12     	; 0x1318 <put_fat+0x172>
    1324:	48 0f       	add	r20, r24
    1326:	59 1f       	adc	r21, r25
    1328:	6a 1f       	adc	r22, r26
    132a:	7b 1f       	adc	r23, r27
    132c:	cf 01       	movw	r24, r30
    132e:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
    1332:	18 2f       	mov	r17, r24
    1334:	81 11       	cpse	r24, r1
    1336:	29 c0       	rjmp	.+82     	; 0x138a <put_fat+0x1e4>
    1338:	b5 01       	movw	r22, r10
    133a:	a4 01       	movw	r20, r8
    133c:	44 0f       	add	r20, r20
    133e:	55 1f       	adc	r21, r21
    1340:	66 1f       	adc	r22, r22
    1342:	77 1f       	adc	r23, r23
    1344:	44 0f       	add	r20, r20
    1346:	55 1f       	adc	r21, r21
    1348:	66 1f       	adc	r22, r22
    134a:	77 1f       	adc	r23, r23
    134c:	4c 7f       	andi	r20, 0xFC	; 252
    134e:	51 70       	andi	r21, 0x01	; 1
    1350:	66 27       	eor	r22, r22
    1352:	77 27       	eor	r23, r23
    1354:	4e 5c       	subi	r20, 0xCE	; 206
    1356:	5f 4f       	sbci	r21, 0xFF	; 255
    1358:	fe 01       	movw	r30, r28
    135a:	e4 0f       	add	r30, r20
    135c:	f5 1f       	adc	r31, r21
    135e:	80 81       	ld	r24, Z
    1360:	91 81       	ldd	r25, Z+1	; 0x01
    1362:	a2 81       	ldd	r26, Z+2	; 0x02
    1364:	b3 81       	ldd	r27, Z+3	; 0x03
    1366:	88 27       	eor	r24, r24
    1368:	99 27       	eor	r25, r25
    136a:	aa 27       	eor	r26, r26
    136c:	b0 7f       	andi	r27, 0xF0	; 240
    136e:	c8 2a       	or	r12, r24
    1370:	d9 2a       	or	r13, r25
    1372:	ea 2a       	or	r14, r26
    1374:	fb 2a       	or	r15, r27
    1376:	c0 82       	st	Z, r12
    1378:	d1 82       	std	Z+1, r13	; 0x01
    137a:	e2 82       	std	Z+2, r14	; 0x02
    137c:	f3 82       	std	Z+3, r15	; 0x03
    137e:	05 c0       	rjmp	.+10     	; 0x138a <put_fat+0x1e4>
    1380:	12 e0       	ldi	r17, 0x02	; 2
    1382:	03 c0       	rjmp	.+6      	; 0x138a <put_fat+0x1e4>
    1384:	18 2f       	mov	r17, r24
    1386:	01 c0       	rjmp	.+2      	; 0x138a <put_fat+0x1e4>
    1388:	18 2f       	mov	r17, r24
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	8c 83       	std	Y+4, r24	; 0x04
    138e:	1b c0       	rjmp	.+54     	; 0x13c6 <put_fat+0x220>
    1390:	12 e0       	ldi	r17, 0x02	; 2
    1392:	19 c0       	rjmp	.+50     	; 0x13c6 <put_fat+0x220>
    1394:	12 e0       	ldi	r17, 0x02	; 2
    1396:	17 c0       	rjmp	.+46     	; 0x13c6 <put_fat+0x220>
    1398:	c5 01       	movw	r24, r10
    139a:	91 70       	andi	r25, 0x01	; 1
    139c:	68 94       	set
    139e:	13 f8       	bld	r1, 3
    13a0:	f6 94       	lsr	r15
    13a2:	e7 94       	ror	r14
    13a4:	d7 94       	ror	r13
    13a6:	c7 94       	ror	r12
    13a8:	16 94       	lsr	r1
    13aa:	d1 f7       	brne	.-12     	; 0x13a0 <put_fat+0x1fa>
    13ac:	86 cf       	rjmp	.-244    	; 0x12ba <put_fat+0x114>
    13ae:	c5 01       	movw	r24, r10
    13b0:	91 70       	andi	r25, 0x01	; 1
    13b2:	fe 01       	movw	r30, r28
    13b4:	e8 0f       	add	r30, r24
    13b6:	f9 1f       	adc	r31, r25
    13b8:	32 a9       	ldd	r19, Z+50	; 0x32
    13ba:	30 7f       	andi	r19, 0xF0	; 240
    13bc:	2d 2d       	mov	r18, r13
    13be:	2f 70       	andi	r18, 0x0F	; 15
    13c0:	c3 2e       	mov	r12, r19
    13c2:	c2 2a       	or	r12, r18
    13c4:	7a cf       	rjmp	.-268    	; 0x12ba <put_fat+0x114>
    13c6:	81 2f       	mov	r24, r17
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	ff 90       	pop	r15
    13d2:	ef 90       	pop	r14
    13d4:	df 90       	pop	r13
    13d6:	cf 90       	pop	r12
    13d8:	bf 90       	pop	r11
    13da:	af 90       	pop	r10
    13dc:	9f 90       	pop	r9
    13de:	8f 90       	pop	r8
    13e0:	7f 90       	pop	r7
    13e2:	6f 90       	pop	r6
    13e4:	08 95       	ret

000013e6 <create_chain>:
    13e6:	4f 92       	push	r4
    13e8:	5f 92       	push	r5
    13ea:	6f 92       	push	r6
    13ec:	7f 92       	push	r7
    13ee:	8f 92       	push	r8
    13f0:	9f 92       	push	r9
    13f2:	af 92       	push	r10
    13f4:	bf 92       	push	r11
    13f6:	cf 92       	push	r12
    13f8:	df 92       	push	r13
    13fa:	ef 92       	push	r14
    13fc:	ff 92       	push	r15
    13fe:	0f 93       	push	r16
    1400:	1f 93       	push	r17
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	ec 01       	movw	r28, r24
    1408:	2a 01       	movw	r4, r20
    140a:	3b 01       	movw	r6, r22
    140c:	41 15       	cp	r20, r1
    140e:	51 05       	cpc	r21, r1
    1410:	61 05       	cpc	r22, r1
    1412:	71 05       	cpc	r23, r1
    1414:	b9 f4       	brne	.+46     	; 0x1444 <create_chain+0x5e>
    1416:	8a 84       	ldd	r8, Y+10	; 0x0a
    1418:	9b 84       	ldd	r9, Y+11	; 0x0b
    141a:	ac 84       	ldd	r10, Y+12	; 0x0c
    141c:	bd 84       	ldd	r11, Y+13	; 0x0d
    141e:	81 14       	cp	r8, r1
    1420:	91 04       	cpc	r9, r1
    1422:	a1 04       	cpc	r10, r1
    1424:	b1 04       	cpc	r11, r1
    1426:	29 f1       	breq	.+74     	; 0x1472 <create_chain+0x8c>
    1428:	8a 8d       	ldd	r24, Y+26	; 0x1a
    142a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    142c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    142e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1430:	88 16       	cp	r8, r24
    1432:	99 06       	cpc	r9, r25
    1434:	aa 06       	cpc	r10, r26
    1436:	bb 06       	cpc	r11, r27
    1438:	00 f1       	brcs	.+64     	; 0x147a <create_chain+0x94>
    143a:	81 2c       	mov	r8, r1
    143c:	91 2c       	mov	r9, r1
    143e:	54 01       	movw	r10, r8
    1440:	83 94       	inc	r8
    1442:	1b c0       	rjmp	.+54     	; 0x147a <create_chain+0x94>
    1444:	0e 94 38 07 	call	0xe70	; 0xe70 <get_fat>
    1448:	6b 01       	movw	r12, r22
    144a:	7c 01       	movw	r14, r24
    144c:	62 30       	cpi	r22, 0x02	; 2
    144e:	71 05       	cpc	r23, r1
    1450:	81 05       	cpc	r24, r1
    1452:	91 05       	cpc	r25, r1
    1454:	08 f4       	brcc	.+2      	; 0x1458 <create_chain+0x72>
    1456:	86 c0       	rjmp	.+268    	; 0x1564 <create_chain+0x17e>
    1458:	8a 8d       	ldd	r24, Y+26	; 0x1a
    145a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    145c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    145e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1460:	c8 16       	cp	r12, r24
    1462:	d9 06       	cpc	r13, r25
    1464:	ea 06       	cpc	r14, r26
    1466:	fb 06       	cpc	r15, r27
    1468:	08 f4       	brcc	.+2      	; 0x146c <create_chain+0x86>
    146a:	81 c0       	rjmp	.+258    	; 0x156e <create_chain+0x188>
    146c:	53 01       	movw	r10, r6
    146e:	42 01       	movw	r8, r4
    1470:	04 c0       	rjmp	.+8      	; 0x147a <create_chain+0x94>
    1472:	81 2c       	mov	r8, r1
    1474:	91 2c       	mov	r9, r1
    1476:	54 01       	movw	r10, r8
    1478:	83 94       	inc	r8
    147a:	75 01       	movw	r14, r10
    147c:	64 01       	movw	r12, r8
    147e:	8f ef       	ldi	r24, 0xFF	; 255
    1480:	c8 1a       	sub	r12, r24
    1482:	d8 0a       	sbc	r13, r24
    1484:	e8 0a       	sbc	r14, r24
    1486:	f8 0a       	sbc	r15, r24
    1488:	8a 8d       	ldd	r24, Y+26	; 0x1a
    148a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    148c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    148e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1490:	c8 16       	cp	r12, r24
    1492:	d9 06       	cpc	r13, r25
    1494:	ea 06       	cpc	r14, r26
    1496:	fb 06       	cpc	r15, r27
    1498:	60 f0       	brcs	.+24     	; 0x14b2 <create_chain+0xcc>
    149a:	22 e0       	ldi	r18, 0x02	; 2
    149c:	82 16       	cp	r8, r18
    149e:	91 04       	cpc	r9, r1
    14a0:	a1 04       	cpc	r10, r1
    14a2:	b1 04       	cpc	r11, r1
    14a4:	08 f4       	brcc	.+2      	; 0x14a8 <create_chain+0xc2>
    14a6:	68 c0       	rjmp	.+208    	; 0x1578 <create_chain+0x192>
    14a8:	c1 2c       	mov	r12, r1
    14aa:	d1 2c       	mov	r13, r1
    14ac:	76 01       	movw	r14, r12
    14ae:	68 94       	set
    14b0:	c1 f8       	bld	r12, 1
    14b2:	b7 01       	movw	r22, r14
    14b4:	a6 01       	movw	r20, r12
    14b6:	ce 01       	movw	r24, r28
    14b8:	0e 94 38 07 	call	0xe70	; 0xe70 <get_fat>
    14bc:	61 15       	cp	r22, r1
    14be:	71 05       	cpc	r23, r1
    14c0:	81 05       	cpc	r24, r1
    14c2:	91 05       	cpc	r25, r1
    14c4:	99 f0       	breq	.+38     	; 0x14ec <create_chain+0x106>
    14c6:	6f 3f       	cpi	r22, 0xFF	; 255
    14c8:	2f ef       	ldi	r18, 0xFF	; 255
    14ca:	72 07       	cpc	r23, r18
    14cc:	82 07       	cpc	r24, r18
    14ce:	92 07       	cpc	r25, r18
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <create_chain+0xee>
    14d2:	57 c0       	rjmp	.+174    	; 0x1582 <create_chain+0x19c>
    14d4:	61 30       	cpi	r22, 0x01	; 1
    14d6:	71 05       	cpc	r23, r1
    14d8:	81 05       	cpc	r24, r1
    14da:	91 05       	cpc	r25, r1
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <create_chain+0xfa>
    14de:	56 c0       	rjmp	.+172    	; 0x158c <create_chain+0x1a6>
    14e0:	c8 14       	cp	r12, r8
    14e2:	d9 04       	cpc	r13, r9
    14e4:	ea 04       	cpc	r14, r10
    14e6:	fb 04       	cpc	r15, r11
    14e8:	51 f6       	brne	.-108    	; 0x147e <create_chain+0x98>
    14ea:	55 c0       	rjmp	.+170    	; 0x1596 <create_chain+0x1b0>
    14ec:	0f ef       	ldi	r16, 0xFF	; 255
    14ee:	1f ef       	ldi	r17, 0xFF	; 255
    14f0:	2f ef       	ldi	r18, 0xFF	; 255
    14f2:	3f e0       	ldi	r19, 0x0F	; 15
    14f4:	b7 01       	movw	r22, r14
    14f6:	a6 01       	movw	r20, r12
    14f8:	ce 01       	movw	r24, r28
    14fa:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <put_fat>
    14fe:	81 11       	cpse	r24, r1
    1500:	2a c0       	rjmp	.+84     	; 0x1556 <create_chain+0x170>
    1502:	41 14       	cp	r4, r1
    1504:	51 04       	cpc	r5, r1
    1506:	61 04       	cpc	r6, r1
    1508:	71 04       	cpc	r7, r1
    150a:	49 f0       	breq	.+18     	; 0x151e <create_chain+0x138>
    150c:	97 01       	movw	r18, r14
    150e:	86 01       	movw	r16, r12
    1510:	b3 01       	movw	r22, r6
    1512:	a2 01       	movw	r20, r4
    1514:	ce 01       	movw	r24, r28
    1516:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <put_fat>
    151a:	81 11       	cpse	r24, r1
    151c:	1c c0       	rjmp	.+56     	; 0x1556 <create_chain+0x170>
    151e:	ca 86       	std	Y+10, r12	; 0x0a
    1520:	db 86       	std	Y+11, r13	; 0x0b
    1522:	ec 86       	std	Y+12, r14	; 0x0c
    1524:	fd 86       	std	Y+13, r15	; 0x0d
    1526:	8e 85       	ldd	r24, Y+14	; 0x0e
    1528:	9f 85       	ldd	r25, Y+15	; 0x0f
    152a:	a8 89       	ldd	r26, Y+16	; 0x10
    152c:	b9 89       	ldd	r27, Y+17	; 0x11
    152e:	8f 3f       	cpi	r24, 0xFF	; 255
    1530:	2f ef       	ldi	r18, 0xFF	; 255
    1532:	92 07       	cpc	r25, r18
    1534:	a2 07       	cpc	r26, r18
    1536:	b2 07       	cpc	r27, r18
    1538:	99 f1       	breq	.+102    	; 0x15a0 <create_chain+0x1ba>
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	a1 09       	sbc	r26, r1
    153e:	b1 09       	sbc	r27, r1
    1540:	8e 87       	std	Y+14, r24	; 0x0e
    1542:	9f 87       	std	Y+15, r25	; 0x0f
    1544:	a8 8b       	std	Y+16, r26	; 0x10
    1546:	b9 8b       	std	Y+17, r27	; 0x11
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	8d 83       	std	Y+5, r24	; 0x05
    154c:	6c 2d       	mov	r22, r12
    154e:	7d 2d       	mov	r23, r13
    1550:	8e 2d       	mov	r24, r14
    1552:	9f 2d       	mov	r25, r15
    1554:	2e c0       	rjmp	.+92     	; 0x15b2 <create_chain+0x1cc>
    1556:	81 30       	cpi	r24, 0x01	; 1
    1558:	41 f1       	breq	.+80     	; 0x15aa <create_chain+0x1c4>
    155a:	61 e0       	ldi	r22, 0x01	; 1
    155c:	70 e0       	ldi	r23, 0x00	; 0
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	27 c0       	rjmp	.+78     	; 0x15b2 <create_chain+0x1cc>
    1564:	61 e0       	ldi	r22, 0x01	; 1
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	22 c0       	rjmp	.+68     	; 0x15b2 <create_chain+0x1cc>
    156e:	6c 2d       	mov	r22, r12
    1570:	7d 2d       	mov	r23, r13
    1572:	8e 2d       	mov	r24, r14
    1574:	9f 2d       	mov	r25, r15
    1576:	1d c0       	rjmp	.+58     	; 0x15b2 <create_chain+0x1cc>
    1578:	60 e0       	ldi	r22, 0x00	; 0
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	18 c0       	rjmp	.+48     	; 0x15b2 <create_chain+0x1cc>
    1582:	6f ef       	ldi	r22, 0xFF	; 255
    1584:	7f ef       	ldi	r23, 0xFF	; 255
    1586:	8f ef       	ldi	r24, 0xFF	; 255
    1588:	9f ef       	ldi	r25, 0xFF	; 255
    158a:	13 c0       	rjmp	.+38     	; 0x15b2 <create_chain+0x1cc>
    158c:	61 e0       	ldi	r22, 0x01	; 1
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	0e c0       	rjmp	.+28     	; 0x15b2 <create_chain+0x1cc>
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	09 c0       	rjmp	.+18     	; 0x15b2 <create_chain+0x1cc>
    15a0:	6c 2d       	mov	r22, r12
    15a2:	7d 2d       	mov	r23, r13
    15a4:	8e 2d       	mov	r24, r14
    15a6:	9f 2d       	mov	r25, r15
    15a8:	04 c0       	rjmp	.+8      	; 0x15b2 <create_chain+0x1cc>
    15aa:	6f ef       	ldi	r22, 0xFF	; 255
    15ac:	7f ef       	ldi	r23, 0xFF	; 255
    15ae:	8f ef       	ldi	r24, 0xFF	; 255
    15b0:	9f ef       	ldi	r25, 0xFF	; 255
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    15ba:	ff 90       	pop	r15
    15bc:	ef 90       	pop	r14
    15be:	df 90       	pop	r13
    15c0:	cf 90       	pop	r12
    15c2:	bf 90       	pop	r11
    15c4:	af 90       	pop	r10
    15c6:	9f 90       	pop	r9
    15c8:	8f 90       	pop	r8
    15ca:	7f 90       	pop	r7
    15cc:	6f 90       	pop	r6
    15ce:	5f 90       	pop	r5
    15d0:	4f 90       	pop	r4
    15d2:	08 95       	ret

000015d4 <dir_next>:
    15d4:	8f 92       	push	r8
    15d6:	9f 92       	push	r9
    15d8:	af 92       	push	r10
    15da:	bf 92       	push	r11
    15dc:	cf 92       	push	r12
    15de:	df 92       	push	r13
    15e0:	ef 92       	push	r14
    15e2:	ff 92       	push	r15
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	dc 01       	movw	r26, r24
    15ee:	14 96       	adiw	r26, 0x04	; 4
    15f0:	cd 91       	ld	r28, X+
    15f2:	dc 91       	ld	r29, X
    15f4:	15 97       	sbiw	r26, 0x05	; 5
    15f6:	21 96       	adiw	r28, 0x01	; 1
    15f8:	09 f4       	brne	.+2      	; 0x15fc <dir_next+0x28>
    15fa:	02 c1       	rjmp	.+516    	; 0x1800 <dir_next+0x22c>
    15fc:	1e 96       	adiw	r26, 0x0e	; 14
    15fe:	8d 90       	ld	r8, X+
    1600:	9d 90       	ld	r9, X+
    1602:	ad 90       	ld	r10, X+
    1604:	bc 90       	ld	r11, X
    1606:	51 97       	sbiw	r26, 0x11	; 17
    1608:	81 14       	cp	r8, r1
    160a:	91 04       	cpc	r9, r1
    160c:	a1 04       	cpc	r10, r1
    160e:	b1 04       	cpc	r11, r1
    1610:	09 f4       	brne	.+2      	; 0x1614 <dir_next+0x40>
    1612:	f8 c0       	rjmp	.+496    	; 0x1804 <dir_next+0x230>
    1614:	7b 01       	movw	r14, r22
    1616:	8c 01       	movw	r16, r24
    1618:	6e 01       	movw	r12, r28
    161a:	bf e0       	ldi	r27, 0x0F	; 15
    161c:	cb 22       	and	r12, r27
    161e:	dd 24       	eor	r13, r13
    1620:	c1 14       	cp	r12, r1
    1622:	d1 04       	cpc	r13, r1
    1624:	09 f0       	breq	.+2      	; 0x1628 <dir_next+0x54>
    1626:	d6 c0       	rjmp	.+428    	; 0x17d4 <dir_next+0x200>
    1628:	ef ef       	ldi	r30, 0xFF	; 255
    162a:	8e 1a       	sub	r8, r30
    162c:	9e 0a       	sbc	r9, r30
    162e:	ae 0a       	sbc	r10, r30
    1630:	be 0a       	sbc	r11, r30
    1632:	dc 01       	movw	r26, r24
    1634:	1e 96       	adiw	r26, 0x0e	; 14
    1636:	8d 92       	st	X+, r8
    1638:	9d 92       	st	X+, r9
    163a:	ad 92       	st	X+, r10
    163c:	bc 92       	st	X, r11
    163e:	51 97       	sbiw	r26, 0x11	; 17
    1640:	1a 96       	adiw	r26, 0x0a	; 10
    1642:	4d 91       	ld	r20, X+
    1644:	5d 91       	ld	r21, X+
    1646:	6d 91       	ld	r22, X+
    1648:	7c 91       	ld	r23, X
    164a:	1d 97       	sbiw	r26, 0x0d	; 13
    164c:	41 15       	cp	r20, r1
    164e:	51 05       	cpc	r21, r1
    1650:	61 05       	cpc	r22, r1
    1652:	71 05       	cpc	r23, r1
    1654:	49 f4       	brne	.+18     	; 0x1668 <dir_next+0x94>
    1656:	ed 91       	ld	r30, X+
    1658:	fc 91       	ld	r31, X
    165a:	80 85       	ldd	r24, Z+8	; 0x08
    165c:	91 85       	ldd	r25, Z+9	; 0x09
    165e:	c8 17       	cp	r28, r24
    1660:	d9 07       	cpc	r29, r25
    1662:	08 f0       	brcs	.+2      	; 0x1666 <dir_next+0x92>
    1664:	d1 c0       	rjmp	.+418    	; 0x1808 <dir_next+0x234>
    1666:	b6 c0       	rjmp	.+364    	; 0x17d4 <dir_next+0x200>
    1668:	dc 01       	movw	r26, r24
    166a:	ed 91       	ld	r30, X+
    166c:	fc 91       	ld	r31, X
    166e:	22 81       	ldd	r18, Z+2	; 0x02
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	21 50       	subi	r18, 0x01	; 1
    1674:	31 09       	sbc	r19, r1
    1676:	ce 01       	movw	r24, r28
    1678:	92 95       	swap	r25
    167a:	82 95       	swap	r24
    167c:	8f 70       	andi	r24, 0x0F	; 15
    167e:	89 27       	eor	r24, r25
    1680:	9f 70       	andi	r25, 0x0F	; 15
    1682:	89 27       	eor	r24, r25
    1684:	28 23       	and	r18, r24
    1686:	39 23       	and	r19, r25
    1688:	23 2b       	or	r18, r19
    168a:	09 f0       	breq	.+2      	; 0x168e <dir_next+0xba>
    168c:	a3 c0       	rjmp	.+326    	; 0x17d4 <dir_next+0x200>
    168e:	cf 01       	movw	r24, r30
    1690:	0e 94 38 07 	call	0xe70	; 0xe70 <get_fat>
    1694:	4b 01       	movw	r8, r22
    1696:	5c 01       	movw	r10, r24
    1698:	62 30       	cpi	r22, 0x02	; 2
    169a:	71 05       	cpc	r23, r1
    169c:	81 05       	cpc	r24, r1
    169e:	91 05       	cpc	r25, r1
    16a0:	08 f4       	brcc	.+2      	; 0x16a4 <dir_next+0xd0>
    16a2:	b4 c0       	rjmp	.+360    	; 0x180c <dir_next+0x238>
    16a4:	6f 3f       	cpi	r22, 0xFF	; 255
    16a6:	7f 4f       	sbci	r23, 0xFF	; 255
    16a8:	8f 4f       	sbci	r24, 0xFF	; 255
    16aa:	9f 4f       	sbci	r25, 0xFF	; 255
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <dir_next+0xdc>
    16ae:	b0 c0       	rjmp	.+352    	; 0x1810 <dir_next+0x23c>
    16b0:	d8 01       	movw	r26, r16
    16b2:	ed 91       	ld	r30, X+
    16b4:	fc 91       	ld	r31, X
    16b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    16b8:	93 8d       	ldd	r25, Z+27	; 0x1b
    16ba:	a4 8d       	ldd	r26, Z+28	; 0x1c
    16bc:	b5 8d       	ldd	r27, Z+29	; 0x1d
    16be:	88 16       	cp	r8, r24
    16c0:	99 06       	cpc	r9, r25
    16c2:	aa 06       	cpc	r10, r26
    16c4:	bb 06       	cpc	r11, r27
    16c6:	08 f4       	brcc	.+2      	; 0x16ca <dir_next+0xf6>
    16c8:	73 c0       	rjmp	.+230    	; 0x17b0 <dir_next+0x1dc>
    16ca:	ef 28       	or	r14, r15
    16cc:	09 f4       	brne	.+2      	; 0x16d0 <dir_next+0xfc>
    16ce:	a2 c0       	rjmp	.+324    	; 0x1814 <dir_next+0x240>
    16d0:	d8 01       	movw	r26, r16
    16d2:	1a 96       	adiw	r26, 0x0a	; 10
    16d4:	4d 91       	ld	r20, X+
    16d6:	5d 91       	ld	r21, X+
    16d8:	6d 91       	ld	r22, X+
    16da:	7c 91       	ld	r23, X
    16dc:	1d 97       	sbiw	r26, 0x0d	; 13
    16de:	cf 01       	movw	r24, r30
    16e0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <create_chain>
    16e4:	4b 01       	movw	r8, r22
    16e6:	5c 01       	movw	r10, r24
    16e8:	61 15       	cp	r22, r1
    16ea:	71 05       	cpc	r23, r1
    16ec:	81 05       	cpc	r24, r1
    16ee:	91 05       	cpc	r25, r1
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <dir_next+0x120>
    16f2:	92 c0       	rjmp	.+292    	; 0x1818 <dir_next+0x244>
    16f4:	61 30       	cpi	r22, 0x01	; 1
    16f6:	71 05       	cpc	r23, r1
    16f8:	81 05       	cpc	r24, r1
    16fa:	91 05       	cpc	r25, r1
    16fc:	09 f4       	brne	.+2      	; 0x1700 <dir_next+0x12c>
    16fe:	8e c0       	rjmp	.+284    	; 0x181c <dir_next+0x248>
    1700:	6f 3f       	cpi	r22, 0xFF	; 255
    1702:	7f 4f       	sbci	r23, 0xFF	; 255
    1704:	8f 4f       	sbci	r24, 0xFF	; 255
    1706:	9f 4f       	sbci	r25, 0xFF	; 255
    1708:	09 f4       	brne	.+2      	; 0x170c <dir_next+0x138>
    170a:	8a c0       	rjmp	.+276    	; 0x1820 <dir_next+0x24c>
    170c:	40 e0       	ldi	r20, 0x00	; 0
    170e:	50 e0       	ldi	r21, 0x00	; 0
    1710:	ba 01       	movw	r22, r20
    1712:	d8 01       	movw	r26, r16
    1714:	8d 91       	ld	r24, X+
    1716:	9c 91       	ld	r25, X
    1718:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
    171c:	81 11       	cpse	r24, r1
    171e:	82 c0       	rjmp	.+260    	; 0x1824 <dir_next+0x250>
    1720:	f8 01       	movw	r30, r16
    1722:	80 81       	ld	r24, Z
    1724:	91 81       	ldd	r25, Z+1	; 0x01
    1726:	fc 01       	movw	r30, r24
    1728:	f2 96       	adiw	r30, 0x32	; 50
    172a:	8e 5c       	subi	r24, 0xCE	; 206
    172c:	9d 4f       	sbci	r25, 0xFD	; 253
    172e:	11 92       	st	Z+, r1
    1730:	e8 17       	cp	r30, r24
    1732:	f9 07       	cpc	r31, r25
    1734:	e1 f7       	brne	.-8      	; 0x172e <dir_next+0x15a>
    1736:	d8 01       	movw	r26, r16
    1738:	ed 90       	ld	r14, X+
    173a:	fc 90       	ld	r15, X
    173c:	b5 01       	movw	r22, r10
    173e:	a4 01       	movw	r20, r8
    1740:	c7 01       	movw	r24, r14
    1742:	0e 94 10 07 	call	0xe20	; 0xe20 <clust2sect>
    1746:	f7 01       	movw	r30, r14
    1748:	66 a7       	std	Z+46, r22	; 0x2e
    174a:	77 a7       	std	Z+47, r23	; 0x2f
    174c:	80 ab       	std	Z+48, r24	; 0x30
    174e:	91 ab       	std	Z+49, r25	; 0x31
    1750:	f1 2c       	mov	r15, r1
    1752:	ee 24       	eor	r14, r14
    1754:	e3 94       	inc	r14
    1756:	1a c0       	rjmp	.+52     	; 0x178c <dir_next+0x1b8>
    1758:	e4 82       	std	Z+4, r14	; 0x04
    175a:	40 e0       	ldi	r20, 0x00	; 0
    175c:	50 e0       	ldi	r21, 0x00	; 0
    175e:	ba 01       	movw	r22, r20
    1760:	d8 01       	movw	r26, r16
    1762:	8d 91       	ld	r24, X+
    1764:	9c 91       	ld	r25, X
    1766:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
    176a:	81 11       	cpse	r24, r1
    176c:	5d c0       	rjmp	.+186    	; 0x1828 <dir_next+0x254>
    176e:	d8 01       	movw	r26, r16
    1770:	ed 91       	ld	r30, X+
    1772:	fc 91       	ld	r31, X
    1774:	86 a5       	ldd	r24, Z+46	; 0x2e
    1776:	97 a5       	ldd	r25, Z+47	; 0x2f
    1778:	a0 a9       	ldd	r26, Z+48	; 0x30
    177a:	b1 a9       	ldd	r27, Z+49	; 0x31
    177c:	01 96       	adiw	r24, 0x01	; 1
    177e:	a1 1d       	adc	r26, r1
    1780:	b1 1d       	adc	r27, r1
    1782:	86 a7       	std	Z+46, r24	; 0x2e
    1784:	97 a7       	std	Z+47, r25	; 0x2f
    1786:	a0 ab       	std	Z+48, r26	; 0x30
    1788:	b1 ab       	std	Z+49, r27	; 0x31
    178a:	f3 94       	inc	r15
    178c:	d8 01       	movw	r26, r16
    178e:	ed 91       	ld	r30, X+
    1790:	fc 91       	ld	r31, X
    1792:	82 81       	ldd	r24, Z+2	; 0x02
    1794:	f8 16       	cp	r15, r24
    1796:	00 f3       	brcs	.-64     	; 0x1758 <dir_next+0x184>
    1798:	86 a5       	ldd	r24, Z+46	; 0x2e
    179a:	97 a5       	ldd	r25, Z+47	; 0x2f
    179c:	a0 a9       	ldd	r26, Z+48	; 0x30
    179e:	b1 a9       	ldd	r27, Z+49	; 0x31
    17a0:	8f 19       	sub	r24, r15
    17a2:	91 09       	sbc	r25, r1
    17a4:	a1 09       	sbc	r26, r1
    17a6:	b1 09       	sbc	r27, r1
    17a8:	86 a7       	std	Z+46, r24	; 0x2e
    17aa:	97 a7       	std	Z+47, r25	; 0x2f
    17ac:	a0 ab       	std	Z+48, r26	; 0x30
    17ae:	b1 ab       	std	Z+49, r27	; 0x31
    17b0:	f8 01       	movw	r30, r16
    17b2:	82 86       	std	Z+10, r8	; 0x0a
    17b4:	93 86       	std	Z+11, r9	; 0x0b
    17b6:	a4 86       	std	Z+12, r10	; 0x0c
    17b8:	b5 86       	std	Z+13, r11	; 0x0d
    17ba:	b5 01       	movw	r22, r10
    17bc:	a4 01       	movw	r20, r8
    17be:	80 81       	ld	r24, Z
    17c0:	91 81       	ldd	r25, Z+1	; 0x01
    17c2:	0e 94 10 07 	call	0xe20	; 0xe20 <clust2sect>
    17c6:	d8 01       	movw	r26, r16
    17c8:	1e 96       	adiw	r26, 0x0e	; 14
    17ca:	6d 93       	st	X+, r22
    17cc:	7d 93       	st	X+, r23
    17ce:	8d 93       	st	X+, r24
    17d0:	9c 93       	st	X, r25
    17d2:	51 97       	sbiw	r26, 0x11	; 17
    17d4:	f8 01       	movw	r30, r16
    17d6:	d5 83       	std	Z+5, r29	; 0x05
    17d8:	c4 83       	std	Z+4, r28	; 0x04
    17da:	80 81       	ld	r24, Z
    17dc:	91 81       	ldd	r25, Z+1	; 0x01
    17de:	c2 96       	adiw	r24, 0x32	; 50
    17e0:	cc 0c       	add	r12, r12
    17e2:	dd 1c       	adc	r13, r13
    17e4:	cc 0c       	add	r12, r12
    17e6:	dd 1c       	adc	r13, r13
    17e8:	cc 0c       	add	r12, r12
    17ea:	dd 1c       	adc	r13, r13
    17ec:	cc 0c       	add	r12, r12
    17ee:	dd 1c       	adc	r13, r13
    17f0:	cc 0c       	add	r12, r12
    17f2:	dd 1c       	adc	r13, r13
    17f4:	c8 0e       	add	r12, r24
    17f6:	d9 1e       	adc	r13, r25
    17f8:	d3 8a       	std	Z+19, r13	; 0x13
    17fa:	c2 8a       	std	Z+18, r12	; 0x12
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	15 c0       	rjmp	.+42     	; 0x182a <dir_next+0x256>
    1800:	84 e0       	ldi	r24, 0x04	; 4
    1802:	13 c0       	rjmp	.+38     	; 0x182a <dir_next+0x256>
    1804:	84 e0       	ldi	r24, 0x04	; 4
    1806:	11 c0       	rjmp	.+34     	; 0x182a <dir_next+0x256>
    1808:	84 e0       	ldi	r24, 0x04	; 4
    180a:	0f c0       	rjmp	.+30     	; 0x182a <dir_next+0x256>
    180c:	82 e0       	ldi	r24, 0x02	; 2
    180e:	0d c0       	rjmp	.+26     	; 0x182a <dir_next+0x256>
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	0b c0       	rjmp	.+22     	; 0x182a <dir_next+0x256>
    1814:	84 e0       	ldi	r24, 0x04	; 4
    1816:	09 c0       	rjmp	.+18     	; 0x182a <dir_next+0x256>
    1818:	87 e0       	ldi	r24, 0x07	; 7
    181a:	07 c0       	rjmp	.+14     	; 0x182a <dir_next+0x256>
    181c:	82 e0       	ldi	r24, 0x02	; 2
    181e:	05 c0       	rjmp	.+10     	; 0x182a <dir_next+0x256>
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	03 c0       	rjmp	.+6      	; 0x182a <dir_next+0x256>
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	01 c0       	rjmp	.+2      	; 0x182a <dir_next+0x256>
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	df 91       	pop	r29
    182c:	cf 91       	pop	r28
    182e:	1f 91       	pop	r17
    1830:	0f 91       	pop	r16
    1832:	ff 90       	pop	r15
    1834:	ef 90       	pop	r14
    1836:	df 90       	pop	r13
    1838:	cf 90       	pop	r12
    183a:	bf 90       	pop	r11
    183c:	af 90       	pop	r10
    183e:	9f 90       	pop	r9
    1840:	8f 90       	pop	r8
    1842:	08 95       	ret

00001844 <follow_path>:
    1844:	2f 92       	push	r2
    1846:	3f 92       	push	r3
    1848:	4f 92       	push	r4
    184a:	5f 92       	push	r5
    184c:	6f 92       	push	r6
    184e:	7f 92       	push	r7
    1850:	8f 92       	push	r8
    1852:	9f 92       	push	r9
    1854:	af 92       	push	r10
    1856:	bf 92       	push	r11
    1858:	cf 92       	push	r12
    185a:	df 92       	push	r13
    185c:	ef 92       	push	r14
    185e:	ff 92       	push	r15
    1860:	0f 93       	push	r16
    1862:	1f 93       	push	r17
    1864:	cf 93       	push	r28
    1866:	df 93       	push	r29
    1868:	00 d0       	rcall	.+0      	; 0x186a <follow_path+0x26>
    186a:	00 d0       	rcall	.+0      	; 0x186c <follow_path+0x28>
    186c:	1f 92       	push	r1
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
    1872:	9a 83       	std	Y+2, r25	; 0x02
    1874:	89 83       	std	Y+1, r24	; 0x01
    1876:	4b 01       	movw	r8, r22
    1878:	db 01       	movw	r26, r22
    187a:	8c 91       	ld	r24, X
    187c:	8f 32       	cpi	r24, 0x2F	; 47
    187e:	11 f0       	breq	.+4      	; 0x1884 <follow_path+0x40>
    1880:	8c 35       	cpi	r24, 0x5C	; 92
    1882:	51 f4       	brne	.+20     	; 0x1898 <follow_path+0x54>
    1884:	bf ef       	ldi	r27, 0xFF	; 255
    1886:	8b 1a       	sub	r8, r27
    1888:	9b 0a       	sbc	r9, r27
    188a:	e9 81       	ldd	r30, Y+1	; 0x01
    188c:	fa 81       	ldd	r31, Y+2	; 0x02
    188e:	16 82       	std	Z+6, r1	; 0x06
    1890:	17 82       	std	Z+7, r1	; 0x07
    1892:	10 86       	std	Z+8, r1	; 0x08
    1894:	11 86       	std	Z+9, r1	; 0x09
    1896:	0e c0       	rjmp	.+28     	; 0x18b4 <follow_path+0x70>
    1898:	a9 81       	ldd	r26, Y+1	; 0x01
    189a:	ba 81       	ldd	r27, Y+2	; 0x02
    189c:	ed 91       	ld	r30, X+
    189e:	fc 91       	ld	r31, X
    18a0:	86 89       	ldd	r24, Z+22	; 0x16
    18a2:	97 89       	ldd	r25, Z+23	; 0x17
    18a4:	a0 8d       	ldd	r26, Z+24	; 0x18
    18a6:	b1 8d       	ldd	r27, Z+25	; 0x19
    18a8:	e9 81       	ldd	r30, Y+1	; 0x01
    18aa:	fa 81       	ldd	r31, Y+2	; 0x02
    18ac:	86 83       	std	Z+6, r24	; 0x06
    18ae:	97 83       	std	Z+7, r25	; 0x07
    18b0:	a0 87       	std	Z+8, r26	; 0x08
    18b2:	b1 87       	std	Z+9, r27	; 0x09
    18b4:	d4 01       	movw	r26, r8
    18b6:	8c 91       	ld	r24, X
    18b8:	80 32       	cpi	r24, 0x20	; 32
    18ba:	58 f4       	brcc	.+22     	; 0x18d2 <follow_path+0x8e>
    18bc:	60 e0       	ldi	r22, 0x00	; 0
    18be:	70 e0       	ldi	r23, 0x00	; 0
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	9a 81       	ldd	r25, Y+2	; 0x02
    18c4:	0e 94 1b 08 	call	0x1036	; 0x1036 <dir_sdi>
    18c8:	e9 81       	ldd	r30, Y+1	; 0x01
    18ca:	fa 81       	ldd	r31, Y+2	; 0x02
    18cc:	13 8a       	std	Z+19, r1	; 0x13
    18ce:	12 8a       	std	Z+18, r1	; 0x12
    18d0:	6b c1       	rjmp	.+726    	; 0x1ba8 <follow_path+0x364>
    18d2:	10 e2       	ldi	r17, 0x20	; 32
    18d4:	0f 2e       	mov	r0, r31
    18d6:	fe e2       	ldi	r31, 0x2E	; 46
    18d8:	7f 2e       	mov	r7, r31
    18da:	f0 2d       	mov	r31, r0
    18dc:	00 e0       	ldi	r16, 0x00	; 0
    18de:	b1 2c       	mov	r11, r1
    18e0:	68 94       	set
    18e2:	66 24       	eor	r6, r6
    18e4:	63 f8       	bld	r6, 3
    18e6:	51 2c       	mov	r5, r1
    18e8:	36 2c       	mov	r3, r6
    18ea:	25 2c       	mov	r2, r5
    18ec:	0f 2e       	mov	r0, r31
    18ee:	fb e0       	ldi	r31, 0x0B	; 11
    18f0:	4f 2e       	mov	r4, r31
    18f2:	f0 2d       	mov	r31, r0
    18f4:	29 81       	ldd	r18, Y+1	; 0x01
    18f6:	3a 81       	ldd	r19, Y+2	; 0x02
    18f8:	3c 83       	std	Y+4, r19	; 0x04
    18fa:	2b 83       	std	Y+3, r18	; 0x03
    18fc:	eb 81       	ldd	r30, Y+3	; 0x03
    18fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1900:	a4 89       	ldd	r26, Z+20	; 0x14
    1902:	b5 89       	ldd	r27, Z+21	; 0x15
    1904:	fd 01       	movw	r30, r26
    1906:	cd 01       	movw	r24, r26
    1908:	0b 96       	adiw	r24, 0x0b	; 11
    190a:	11 93       	st	Z+, r17
    190c:	e8 17       	cp	r30, r24
    190e:	f9 07       	cpc	r31, r25
    1910:	e1 f7       	brne	.-8      	; 0x190a <follow_path+0xc6>
    1912:	f4 01       	movw	r30, r8
    1914:	80 81       	ld	r24, Z
    1916:	8e 32       	cpi	r24, 0x2E	; 46
    1918:	61 f0       	breq	.+24     	; 0x1932 <follow_path+0xee>
    191a:	74 01       	movw	r14, r8
    191c:	40 2f       	mov	r20, r16
    191e:	5b 2d       	mov	r21, r11
    1920:	60 e0       	ldi	r22, 0x00	; 0
    1922:	70 e0       	ldi	r23, 0x00	; 0
    1924:	c6 2c       	mov	r12, r6
    1926:	d5 2c       	mov	r13, r5
    1928:	a1 2c       	mov	r10, r1
    192a:	ba 83       	std	Y+2, r27	; 0x02
    192c:	a9 83       	std	Y+1, r26	; 0x01
    192e:	ad 82       	std	Y+5, r10	; 0x05
    1930:	1e c0       	rjmp	.+60     	; 0x196e <follow_path+0x12a>
    1932:	7c 92       	st	X, r7
    1934:	f4 01       	movw	r30, r8
    1936:	81 81       	ldd	r24, Z+1	; 0x01
    1938:	8e 32       	cpi	r24, 0x2E	; 46
    193a:	51 f4       	brne	.+20     	; 0x1950 <follow_path+0x10c>
    193c:	11 96       	adiw	r26, 0x01	; 1
    193e:	7c 92       	st	X, r7
    1940:	11 97       	sbiw	r26, 0x01	; 1
    1942:	82 81       	ldd	r24, Z+2	; 0x02
    1944:	8e 32       	cpi	r24, 0x2E	; 46
    1946:	09 f4       	brne	.+2      	; 0x194a <follow_path+0x106>
    1948:	75 c0       	rjmp	.+234    	; 0x1a34 <follow_path+0x1f0>
    194a:	23 e0       	ldi	r18, 0x03	; 3
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <follow_path+0x110>
    1950:	22 e0       	ldi	r18, 0x02	; 2
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	8f 32       	cpi	r24, 0x2F	; 47
    1956:	09 f4       	brne	.+2      	; 0x195a <follow_path+0x116>
    1958:	d6 c0       	rjmp	.+428    	; 0x1b06 <follow_path+0x2c2>
    195a:	8c 35       	cpi	r24, 0x5C	; 92
    195c:	09 f4       	brne	.+2      	; 0x1960 <follow_path+0x11c>
    195e:	d3 c0       	rjmp	.+422    	; 0x1b06 <follow_path+0x2c2>
    1960:	81 32       	cpi	r24, 0x21	; 33
    1962:	08 f4       	brcc	.+2      	; 0x1966 <follow_path+0x122>
    1964:	d4 c0       	rjmp	.+424    	; 0x1b0e <follow_path+0x2ca>
    1966:	f4 c0       	rjmp	.+488    	; 0x1b50 <follow_path+0x30c>
    1968:	1b 96       	adiw	r26, 0x0b	; 11
    196a:	8c 93       	st	X, r24
    196c:	f3 c0       	rjmp	.+486    	; 0x1b54 <follow_path+0x310>
    196e:	6f 5f       	subi	r22, 0xFF	; 255
    1970:	7f 4f       	sbci	r23, 0xFF	; 255
    1972:	f7 01       	movw	r30, r14
    1974:	b1 91       	ld	r27, Z+
    1976:	7f 01       	movw	r14, r30
    1978:	b1 32       	cpi	r27, 0x21	; 33
    197a:	08 f4       	brcc	.+2      	; 0x197e <follow_path+0x13a>
    197c:	e2 c0       	rjmp	.+452    	; 0x1b42 <follow_path+0x2fe>
    197e:	bf 32       	cpi	r27, 0x2F	; 47
    1980:	09 f4       	brne	.+2      	; 0x1984 <follow_path+0x140>
    1982:	d8 c0       	rjmp	.+432    	; 0x1b34 <follow_path+0x2f0>
    1984:	bc 35       	cpi	r27, 0x5C	; 92
    1986:	09 f4       	brne	.+2      	; 0x198a <follow_path+0x146>
    1988:	d5 c0       	rjmp	.+426    	; 0x1b34 <follow_path+0x2f0>
    198a:	be 32       	cpi	r27, 0x2E	; 46
    198c:	09 f4       	brne	.+2      	; 0x1990 <follow_path+0x14c>
    198e:	06 c1       	rjmp	.+524    	; 0x1b9c <follow_path+0x358>
    1990:	4c 15       	cp	r20, r12
    1992:	5d 05       	cpc	r21, r13
    1994:	08 f0       	brcs	.+2      	; 0x1998 <follow_path+0x154>
    1996:	dc c0       	rjmp	.+440    	; 0x1b50 <follow_path+0x30c>
    1998:	09 c0       	rjmp	.+18     	; 0x19ac <follow_path+0x168>
    199a:	fd 81       	ldd	r31, Y+5	; 0x05
    199c:	ff 0f       	add	r31, r31
    199e:	ff 0f       	add	r31, r31
    19a0:	fd 83       	std	Y+5, r31	; 0x05
    19a2:	43 2d       	mov	r20, r3
    19a4:	52 2d       	mov	r21, r2
    19a6:	c4 2c       	mov	r12, r4
    19a8:	d1 2c       	mov	r13, r1
    19aa:	e1 cf       	rjmp	.-62     	; 0x196e <follow_path+0x12a>
    19ac:	bb 23       	and	r27, r27
    19ae:	0c f0       	brlt	.+2      	; 0x19b2 <follow_path+0x16e>
    19b0:	b2 c0       	rjmp	.+356    	; 0x1b16 <follow_path+0x2d2>
    19b2:	2d 81       	ldd	r18, Y+5	; 0x05
    19b4:	23 60       	ori	r18, 0x03	; 3
    19b6:	2d 83       	std	Y+5, r18	; 0x05
    19b8:	eb 2f       	mov	r30, r27
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	ed 5c       	subi	r30, 0xCD	; 205
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	b0 81       	ld	r27, Z
    19c2:	a9 c0       	rjmp	.+338    	; 0x1b16 <follow_path+0x2d2>
    19c4:	81 91       	ld	r24, Z+
    19c6:	88 23       	and	r24, r24
    19c8:	09 f4       	brne	.+2      	; 0x19cc <follow_path+0x188>
    19ca:	ae c0       	rjmp	.+348    	; 0x1b28 <follow_path+0x2e4>
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	28 17       	cp	r18, r24
    19d0:	39 07       	cpc	r19, r25
    19d2:	c1 f7       	brne	.-16     	; 0x19c4 <follow_path+0x180>
    19d4:	2f c0       	rjmp	.+94     	; 0x1a34 <follow_path+0x1f0>
    19d6:	3d 81       	ldd	r19, Y+5	; 0x05
    19d8:	32 60       	ori	r19, 0x02	; 2
    19da:	3d 83       	std	Y+5, r19	; 0x05
    19dc:	08 c0       	rjmp	.+16     	; 0x19ee <follow_path+0x1aa>
    19de:	8f e9       	ldi	r24, 0x9F	; 159
    19e0:	8b 0f       	add	r24, r27
    19e2:	8a 31       	cpi	r24, 0x1A	; 26
    19e4:	20 f4       	brcc	.+8      	; 0x19ee <follow_path+0x1aa>
    19e6:	8d 81       	ldd	r24, Y+5	; 0x05
    19e8:	81 60       	ori	r24, 0x01	; 1
    19ea:	8d 83       	std	Y+5, r24	; 0x05
    19ec:	b0 52       	subi	r27, 0x20	; 32
    19ee:	e9 81       	ldd	r30, Y+1	; 0x01
    19f0:	fa 81       	ldd	r31, Y+2	; 0x02
    19f2:	e4 0f       	add	r30, r20
    19f4:	f5 1f       	adc	r31, r21
    19f6:	b0 83       	st	Z, r27
    19f8:	4f 5f       	subi	r20, 0xFF	; 255
    19fa:	5f 4f       	sbci	r21, 0xFF	; 255
    19fc:	b8 cf       	rjmp	.-144    	; 0x196e <follow_path+0x12a>
    19fe:	45 2b       	or	r20, r21
    1a00:	09 f4       	brne	.+2      	; 0x1a04 <follow_path+0x1c0>
    1a02:	a6 c0       	rjmp	.+332    	; 0x1b50 <follow_path+0x30c>
    1a04:	9c 91       	ld	r25, X
    1a06:	95 3e       	cpi	r25, 0xE5	; 229
    1a08:	11 f4       	brne	.+4      	; 0x1a0e <follow_path+0x1ca>
    1a0a:	95 e0       	ldi	r25, 0x05	; 5
    1a0c:	9c 93       	st	X, r25
    1a0e:	e8 e0       	ldi	r30, 0x08	; 8
    1a10:	ce 16       	cp	r12, r30
    1a12:	d1 04       	cpc	r13, r1
    1a14:	11 f4       	brne	.+4      	; 0x1a1a <follow_path+0x1d6>
    1a16:	aa 0c       	add	r10, r10
    1a18:	aa 0c       	add	r10, r10
    1a1a:	9a 2d       	mov	r25, r10
    1a1c:	93 70       	andi	r25, 0x03	; 3
    1a1e:	91 30       	cpi	r25, 0x01	; 1
    1a20:	09 f4       	brne	.+2      	; 0x1a24 <follow_path+0x1e0>
    1a22:	80 61       	ori	r24, 0x10	; 16
    1a24:	9a 2d       	mov	r25, r10
    1a26:	9c 70       	andi	r25, 0x0C	; 12
    1a28:	94 30       	cpi	r25, 0x04	; 4
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <follow_path+0x1ea>
    1a2c:	88 60       	ori	r24, 0x08	; 8
    1a2e:	1b 96       	adiw	r26, 0x0b	; 11
    1a30:	8c 93       	st	X, r24
    1a32:	90 c0       	rjmp	.+288    	; 0x1b54 <follow_path+0x310>
    1a34:	86 e0       	ldi	r24, 0x06	; 6
    1a36:	b8 c0       	rjmp	.+368    	; 0x1ba8 <follow_path+0x364>
    1a38:	ab 81       	ldd	r26, Y+3	; 0x03
    1a3a:	bc 81       	ldd	r27, Y+4	; 0x04
    1a3c:	1e 96       	adiw	r26, 0x0e	; 14
    1a3e:	4d 91       	ld	r20, X+
    1a40:	5d 91       	ld	r21, X+
    1a42:	6d 91       	ld	r22, X+
    1a44:	7c 91       	ld	r23, X
    1a46:	51 97       	sbiw	r26, 0x11	; 17
    1a48:	8d 91       	ld	r24, X+
    1a4a:	9c 91       	ld	r25, X
    1a4c:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
    1a50:	81 11       	cpse	r24, r1
    1a52:	99 c0       	rjmp	.+306    	; 0x1b86 <follow_path+0x342>
    1a54:	eb 81       	ldd	r30, Y+3	; 0x03
    1a56:	fc 81       	ldd	r31, Y+4	; 0x04
    1a58:	42 89       	ldd	r20, Z+18	; 0x12
    1a5a:	53 89       	ldd	r21, Z+19	; 0x13
    1a5c:	da 01       	movw	r26, r20
    1a5e:	9c 91       	ld	r25, X
    1a60:	99 23       	and	r25, r25
    1a62:	09 f4       	brne	.+2      	; 0x1a66 <follow_path+0x222>
    1a64:	81 c0       	rjmp	.+258    	; 0x1b68 <follow_path+0x324>
    1a66:	1b 96       	adiw	r26, 0x0b	; 11
    1a68:	ec 90       	ld	r14, X
    1a6a:	e3 fc       	sbrc	r14, 3
    1a6c:	11 c0       	rjmp	.+34     	; 0x1a90 <follow_path+0x24c>
    1a6e:	64 89       	ldd	r22, Z+20	; 0x14
    1a70:	75 89       	ldd	r23, Z+21	; 0x15
    1a72:	fa 01       	movw	r30, r20
    1a74:	db 01       	movw	r26, r22
    1a76:	6a 01       	movw	r12, r20
    1a78:	2b e0       	ldi	r18, 0x0B	; 11
    1a7a:	c2 0e       	add	r12, r18
    1a7c:	d1 1c       	adc	r13, r1
    1a7e:	04 c0       	rjmp	.+8      	; 0x1a88 <follow_path+0x244>
    1a80:	ec 15       	cp	r30, r12
    1a82:	fd 05       	cpc	r31, r13
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <follow_path+0x244>
    1a86:	79 c0       	rjmp	.+242    	; 0x1b7a <follow_path+0x336>
    1a88:	21 91       	ld	r18, Z+
    1a8a:	9d 91       	ld	r25, X+
    1a8c:	29 17       	cp	r18, r25
    1a8e:	c1 f3       	breq	.-16     	; 0x1a80 <follow_path+0x23c>
    1a90:	60 2f       	mov	r22, r16
    1a92:	7b 2d       	mov	r23, r11
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	9c 81       	ldd	r25, Y+4	; 0x04
    1a98:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <dir_next>
    1a9c:	88 23       	and	r24, r24
    1a9e:	61 f2       	breq	.-104    	; 0x1a38 <follow_path+0x1f4>
    1aa0:	72 c0       	rjmp	.+228    	; 0x1b86 <follow_path+0x342>
    1aa2:	95 ff       	sbrs	r25, 5
    1aa4:	0c c0       	rjmp	.+24     	; 0x1abe <follow_path+0x27a>
    1aa6:	eb 81       	ldd	r30, Y+3	; 0x03
    1aa8:	fc 81       	ldd	r31, Y+4	; 0x04
    1aaa:	16 82       	std	Z+6, r1	; 0x06
    1aac:	17 82       	std	Z+7, r1	; 0x07
    1aae:	10 86       	std	Z+8, r1	; 0x08
    1ab0:	11 86       	std	Z+9, r1	; 0x09
    1ab2:	13 8a       	std	Z+19, r1	; 0x13
    1ab4:	12 8a       	std	Z+18, r1	; 0x12
    1ab6:	92 ff       	sbrs	r25, 2
    1ab8:	21 cf       	rjmp	.-446    	; 0x18fc <follow_path+0xb8>
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	75 c0       	rjmp	.+234    	; 0x1ba8 <follow_path+0x364>
    1abe:	92 fd       	sbrc	r25, 2
    1ac0:	1e c0       	rjmp	.+60     	; 0x1afe <follow_path+0x2ba>
    1ac2:	85 e0       	ldi	r24, 0x05	; 5
    1ac4:	71 c0       	rjmp	.+226    	; 0x1ba8 <follow_path+0x364>
    1ac6:	e4 fe       	sbrs	r14, 4
    1ac8:	1c c0       	rjmp	.+56     	; 0x1b02 <follow_path+0x2be>
    1aca:	da 01       	movw	r26, r20
    1acc:	54 96       	adiw	r26, 0x14	; 20
    1ace:	8d 91       	ld	r24, X+
    1ad0:	9c 91       	ld	r25, X
    1ad2:	55 97       	sbiw	r26, 0x15	; 21
    1ad4:	a0 e0       	ldi	r26, 0x00	; 0
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	dc 01       	movw	r26, r24
    1ada:	99 27       	eor	r25, r25
    1adc:	88 27       	eor	r24, r24
    1ade:	fa 01       	movw	r30, r20
    1ae0:	42 8d       	ldd	r20, Z+26	; 0x1a
    1ae2:	53 8d       	ldd	r21, Z+27	; 0x1b
    1ae4:	60 e0       	ldi	r22, 0x00	; 0
    1ae6:	70 e0       	ldi	r23, 0x00	; 0
    1ae8:	84 2b       	or	r24, r20
    1aea:	95 2b       	or	r25, r21
    1aec:	a6 2b       	or	r26, r22
    1aee:	b7 2b       	or	r27, r23
    1af0:	eb 81       	ldd	r30, Y+3	; 0x03
    1af2:	fc 81       	ldd	r31, Y+4	; 0x04
    1af4:	86 83       	std	Z+6, r24	; 0x06
    1af6:	97 83       	std	Z+7, r25	; 0x07
    1af8:	a0 87       	std	Z+8, r26	; 0x08
    1afa:	b1 87       	std	Z+9, r27	; 0x09
    1afc:	ff ce       	rjmp	.-514    	; 0x18fc <follow_path+0xb8>
    1afe:	84 e0       	ldi	r24, 0x04	; 4
    1b00:	53 c0       	rjmp	.+166    	; 0x1ba8 <follow_path+0x364>
    1b02:	85 e0       	ldi	r24, 0x05	; 5
    1b04:	51 c0       	rjmp	.+162    	; 0x1ba8 <follow_path+0x364>
    1b06:	82 0e       	add	r8, r18
    1b08:	93 1e       	adc	r9, r19
    1b0a:	81 2f       	mov	r24, r17
    1b0c:	2d cf       	rjmp	.-422    	; 0x1968 <follow_path+0x124>
    1b0e:	82 0e       	add	r8, r18
    1b10:	93 1e       	adc	r9, r19
    1b12:	84 e2       	ldi	r24, 0x24	; 36
    1b14:	29 cf       	rjmp	.-430    	; 0x1968 <follow_path+0x124>
    1b16:	2b 2f       	mov	r18, r27
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	22 32       	cpi	r18, 0x22	; 34
    1b1c:	31 05       	cpc	r19, r1
    1b1e:	09 f4       	brne	.+2      	; 0x1b22 <follow_path+0x2de>
    1b20:	89 cf       	rjmp	.-238    	; 0x1a34 <follow_path+0x1f0>
    1b22:	e5 ea       	ldi	r30, 0xA5	; 165
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	4e cf       	rjmp	.-356    	; 0x19c4 <follow_path+0x180>
    1b28:	8f eb       	ldi	r24, 0xBF	; 191
    1b2a:	8b 0f       	add	r24, r27
    1b2c:	8a 31       	cpi	r24, 0x1A	; 26
    1b2e:	08 f4       	brcc	.+2      	; 0x1b32 <follow_path+0x2ee>
    1b30:	52 cf       	rjmp	.-348    	; 0x19d6 <follow_path+0x192>
    1b32:	55 cf       	rjmp	.-342    	; 0x19de <follow_path+0x19a>
    1b34:	a9 81       	ldd	r26, Y+1	; 0x01
    1b36:	ba 81       	ldd	r27, Y+2	; 0x02
    1b38:	ad 80       	ldd	r10, Y+5	; 0x05
    1b3a:	86 0e       	add	r8, r22
    1b3c:	97 1e       	adc	r9, r23
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	5e cf       	rjmp	.-324    	; 0x19fe <follow_path+0x1ba>
    1b42:	a9 81       	ldd	r26, Y+1	; 0x01
    1b44:	ba 81       	ldd	r27, Y+2	; 0x02
    1b46:	ad 80       	ldd	r10, Y+5	; 0x05
    1b48:	86 0e       	add	r8, r22
    1b4a:	97 1e       	adc	r9, r23
    1b4c:	84 e0       	ldi	r24, 0x04	; 4
    1b4e:	57 cf       	rjmp	.-338    	; 0x19fe <follow_path+0x1ba>
    1b50:	86 e0       	ldi	r24, 0x06	; 6
    1b52:	2a c0       	rjmp	.+84     	; 0x1ba8 <follow_path+0x364>
    1b54:	60 2f       	mov	r22, r16
    1b56:	7b 2d       	mov	r23, r11
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	0e 94 1b 08 	call	0x1036	; 0x1036 <dir_sdi>
    1b60:	88 23       	and	r24, r24
    1b62:	09 f4       	brne	.+2      	; 0x1b66 <follow_path+0x322>
    1b64:	69 cf       	rjmp	.-302    	; 0x1a38 <follow_path+0x1f4>
    1b66:	0f c0       	rjmp	.+30     	; 0x1b86 <follow_path+0x342>
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	54 96       	adiw	r26, 0x14	; 20
    1b70:	ed 91       	ld	r30, X+
    1b72:	fc 91       	ld	r31, X
    1b74:	55 97       	sbiw	r26, 0x15	; 21
    1b76:	93 85       	ldd	r25, Z+11	; 0x0b
    1b78:	94 cf       	rjmp	.-216    	; 0x1aa2 <follow_path+0x25e>
    1b7a:	db 01       	movw	r26, r22
    1b7c:	1b 96       	adiw	r26, 0x0b	; 11
    1b7e:	9c 91       	ld	r25, X
    1b80:	92 ff       	sbrs	r25, 2
    1b82:	a1 cf       	rjmp	.-190    	; 0x1ac6 <follow_path+0x282>
    1b84:	11 c0       	rjmp	.+34     	; 0x1ba8 <follow_path+0x364>
    1b86:	ab 81       	ldd	r26, Y+3	; 0x03
    1b88:	bc 81       	ldd	r27, Y+4	; 0x04
    1b8a:	54 96       	adiw	r26, 0x14	; 20
    1b8c:	ed 91       	ld	r30, X+
    1b8e:	fc 91       	ld	r31, X
    1b90:	55 97       	sbiw	r26, 0x15	; 21
    1b92:	93 85       	ldd	r25, Z+11	; 0x0b
    1b94:	84 30       	cpi	r24, 0x04	; 4
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <follow_path+0x356>
    1b98:	84 cf       	rjmp	.-248    	; 0x1aa2 <follow_path+0x25e>
    1b9a:	06 c0       	rjmp	.+12     	; 0x1ba8 <follow_path+0x364>
    1b9c:	b8 e0       	ldi	r27, 0x08	; 8
    1b9e:	cb 16       	cp	r12, r27
    1ba0:	d1 04       	cpc	r13, r1
    1ba2:	09 f4       	brne	.+2      	; 0x1ba6 <follow_path+0x362>
    1ba4:	fa ce       	rjmp	.-524    	; 0x199a <follow_path+0x156>
    1ba6:	d4 cf       	rjmp	.-88     	; 0x1b50 <follow_path+0x30c>
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	1f 91       	pop	r17
    1bb8:	0f 91       	pop	r16
    1bba:	ff 90       	pop	r15
    1bbc:	ef 90       	pop	r14
    1bbe:	df 90       	pop	r13
    1bc0:	cf 90       	pop	r12
    1bc2:	bf 90       	pop	r11
    1bc4:	af 90       	pop	r10
    1bc6:	9f 90       	pop	r9
    1bc8:	8f 90       	pop	r8
    1bca:	7f 90       	pop	r7
    1bcc:	6f 90       	pop	r6
    1bce:	5f 90       	pop	r5
    1bd0:	4f 90       	pop	r4
    1bd2:	3f 90       	pop	r3
    1bd4:	2f 90       	pop	r2
    1bd6:	08 95       	ret

00001bd8 <dir_register>:
    1bd8:	0f 93       	push	r16
    1bda:	1f 93       	push	r17
    1bdc:	cf 93       	push	r28
    1bde:	8c 01       	movw	r16, r24
    1be0:	60 e0       	ldi	r22, 0x00	; 0
    1be2:	70 e0       	ldi	r23, 0x00	; 0
    1be4:	0e 94 1b 08 	call	0x1036	; 0x1036 <dir_sdi>
    1be8:	c8 2f       	mov	r28, r24
    1bea:	81 11       	cpse	r24, r1
    1bec:	47 c0       	rjmp	.+142    	; 0x1c7c <dir_register+0xa4>
    1bee:	d8 01       	movw	r26, r16
    1bf0:	1e 96       	adiw	r26, 0x0e	; 14
    1bf2:	4d 91       	ld	r20, X+
    1bf4:	5d 91       	ld	r21, X+
    1bf6:	6d 91       	ld	r22, X+
    1bf8:	7c 91       	ld	r23, X
    1bfa:	51 97       	sbiw	r26, 0x11	; 17
    1bfc:	8d 91       	ld	r24, X+
    1bfe:	9c 91       	ld	r25, X
    1c00:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
    1c04:	c8 2f       	mov	r28, r24
    1c06:	81 11       	cpse	r24, r1
    1c08:	39 c0       	rjmp	.+114    	; 0x1c7c <dir_register+0xa4>
    1c0a:	d8 01       	movw	r26, r16
    1c0c:	52 96       	adiw	r26, 0x12	; 18
    1c0e:	ed 91       	ld	r30, X+
    1c10:	fc 91       	ld	r31, X
    1c12:	53 97       	sbiw	r26, 0x13	; 19
    1c14:	80 81       	ld	r24, Z
    1c16:	85 3e       	cpi	r24, 0xE5	; 229
    1c18:	29 f1       	breq	.+74     	; 0x1c64 <dir_register+0x8c>
    1c1a:	88 23       	and	r24, r24
    1c1c:	19 f1       	breq	.+70     	; 0x1c64 <dir_register+0x8c>
    1c1e:	61 e0       	ldi	r22, 0x01	; 1
    1c20:	70 e0       	ldi	r23, 0x00	; 0
    1c22:	c8 01       	movw	r24, r16
    1c24:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <dir_next>
    1c28:	c8 2f       	mov	r28, r24
    1c2a:	88 23       	and	r24, r24
    1c2c:	01 f3       	breq	.-64     	; 0x1bee <dir_register+0x16>
    1c2e:	26 c0       	rjmp	.+76     	; 0x1c7c <dir_register+0xa4>
    1c30:	f8 01       	movw	r30, r16
    1c32:	82 89       	ldd	r24, Z+18	; 0x12
    1c34:	93 89       	ldd	r25, Z+19	; 0x13
    1c36:	fc 01       	movw	r30, r24
    1c38:	9c 01       	movw	r18, r24
    1c3a:	20 5e       	subi	r18, 0xE0	; 224
    1c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3e:	11 92       	st	Z+, r1
    1c40:	e2 17       	cp	r30, r18
    1c42:	f3 07       	cpc	r31, r19
    1c44:	e1 f7       	brne	.-8      	; 0x1c3e <dir_register+0x66>
    1c46:	d8 01       	movw	r26, r16
    1c48:	54 96       	adiw	r26, 0x14	; 20
    1c4a:	6d 91       	ld	r22, X+
    1c4c:	7c 91       	ld	r23, X
    1c4e:	55 97       	sbiw	r26, 0x15	; 21
    1c50:	4b e0       	ldi	r20, 0x0B	; 11
    1c52:	50 e0       	ldi	r21, 0x00	; 0
    1c54:	0e 94 4b 02 	call	0x496	; 0x496 <mem_cpy>
    1c58:	d8 01       	movw	r26, r16
    1c5a:	ed 91       	ld	r30, X+
    1c5c:	fc 91       	ld	r31, X
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	84 83       	std	Z+4, r24	; 0x04
    1c62:	0c c0       	rjmp	.+24     	; 0x1c7c <dir_register+0xa4>
    1c64:	f8 01       	movw	r30, r16
    1c66:	46 85       	ldd	r20, Z+14	; 0x0e
    1c68:	57 85       	ldd	r21, Z+15	; 0x0f
    1c6a:	60 89       	ldd	r22, Z+16	; 0x10
    1c6c:	71 89       	ldd	r23, Z+17	; 0x11
    1c6e:	80 81       	ld	r24, Z
    1c70:	91 81       	ldd	r25, Z+1	; 0x01
    1c72:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
    1c76:	c8 2f       	mov	r28, r24
    1c78:	88 23       	and	r24, r24
    1c7a:	d1 f2       	breq	.-76     	; 0x1c30 <dir_register+0x58>
    1c7c:	8c 2f       	mov	r24, r28
    1c7e:	cf 91       	pop	r28
    1c80:	1f 91       	pop	r17
    1c82:	0f 91       	pop	r16
    1c84:	08 95       	ret

00001c86 <dir_read>:
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	ec 01       	movw	r28, r24
    1c8c:	84 e0       	ldi	r24, 0x04	; 4
    1c8e:	17 c0       	rjmp	.+46     	; 0x1cbe <dir_read+0x38>
    1c90:	88 81       	ld	r24, Y
    1c92:	99 81       	ldd	r25, Y+1	; 0x01
    1c94:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
    1c98:	81 11       	cpse	r24, r1
    1c9a:	1c c0       	rjmp	.+56     	; 0x1cd4 <dir_read+0x4e>
    1c9c:	ea 89       	ldd	r30, Y+18	; 0x12
    1c9e:	fb 89       	ldd	r31, Y+19	; 0x13
    1ca0:	90 81       	ld	r25, Z
    1ca2:	99 23       	and	r25, r25
    1ca4:	e1 f0       	breq	.+56     	; 0x1cde <dir_read+0x58>
    1ca6:	95 3e       	cpi	r25, 0xE5	; 229
    1ca8:	19 f0       	breq	.+6      	; 0x1cb0 <dir_read+0x2a>
    1caa:	93 85       	ldd	r25, Z+11	; 0x0b
    1cac:	93 ff       	sbrs	r25, 3
    1cae:	19 c0       	rjmp	.+50     	; 0x1ce2 <dir_read+0x5c>
    1cb0:	60 e0       	ldi	r22, 0x00	; 0
    1cb2:	70 e0       	ldi	r23, 0x00	; 0
    1cb4:	ce 01       	movw	r24, r28
    1cb6:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <dir_next>
    1cba:	81 11       	cpse	r24, r1
    1cbc:	0b c0       	rjmp	.+22     	; 0x1cd4 <dir_read+0x4e>
    1cbe:	4e 85       	ldd	r20, Y+14	; 0x0e
    1cc0:	5f 85       	ldd	r21, Y+15	; 0x0f
    1cc2:	68 89       	ldd	r22, Y+16	; 0x10
    1cc4:	79 89       	ldd	r23, Y+17	; 0x11
    1cc6:	41 15       	cp	r20, r1
    1cc8:	51 05       	cpc	r21, r1
    1cca:	61 05       	cpc	r22, r1
    1ccc:	71 05       	cpc	r23, r1
    1cce:	01 f7       	brne	.-64     	; 0x1c90 <dir_read+0xa>
    1cd0:	88 23       	and	r24, r24
    1cd2:	39 f0       	breq	.+14     	; 0x1ce2 <dir_read+0x5c>
    1cd4:	1e 86       	std	Y+14, r1	; 0x0e
    1cd6:	1f 86       	std	Y+15, r1	; 0x0f
    1cd8:	18 8a       	std	Y+16, r1	; 0x10
    1cda:	19 8a       	std	Y+17, r1	; 0x11
    1cdc:	02 c0       	rjmp	.+4      	; 0x1ce2 <dir_read+0x5c>
    1cde:	84 e0       	ldi	r24, 0x04	; 4
    1ce0:	f9 cf       	rjmp	.-14     	; 0x1cd4 <dir_read+0x4e>
    1ce2:	df 91       	pop	r29
    1ce4:	cf 91       	pop	r28
    1ce6:	08 95       	ret

00001ce8 <remove_chain>:
    1ce8:	7f 92       	push	r7
    1cea:	8f 92       	push	r8
    1cec:	9f 92       	push	r9
    1cee:	af 92       	push	r10
    1cf0:	bf 92       	push	r11
    1cf2:	cf 92       	push	r12
    1cf4:	df 92       	push	r13
    1cf6:	ef 92       	push	r14
    1cf8:	ff 92       	push	r15
    1cfa:	0f 93       	push	r16
    1cfc:	1f 93       	push	r17
    1cfe:	cf 93       	push	r28
    1d00:	df 93       	push	r29
    1d02:	ec 01       	movw	r28, r24
    1d04:	6a 01       	movw	r12, r20
    1d06:	7b 01       	movw	r14, r22
    1d08:	42 30       	cpi	r20, 0x02	; 2
    1d0a:	51 05       	cpc	r21, r1
    1d0c:	61 05       	cpc	r22, r1
    1d0e:	71 05       	cpc	r23, r1
    1d10:	08 f4       	brcc	.+2      	; 0x1d14 <remove_chain+0x2c>
    1d12:	4c c0       	rjmp	.+152    	; 0x1dac <remove_chain+0xc4>
    1d14:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d16:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d18:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1d1a:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1d1c:	48 17       	cp	r20, r24
    1d1e:	59 07       	cpc	r21, r25
    1d20:	6a 07       	cpc	r22, r26
    1d22:	7b 07       	cpc	r23, r27
    1d24:	08 f0       	brcs	.+2      	; 0x1d28 <remove_chain+0x40>
    1d26:	44 c0       	rjmp	.+136    	; 0x1db0 <remove_chain+0xc8>
    1d28:	77 24       	eor	r7, r7
    1d2a:	73 94       	inc	r7
    1d2c:	b7 01       	movw	r22, r14
    1d2e:	a6 01       	movw	r20, r12
    1d30:	ce 01       	movw	r24, r28
    1d32:	0e 94 38 07 	call	0xe70	; 0xe70 <get_fat>
    1d36:	4b 01       	movw	r8, r22
    1d38:	5c 01       	movw	r10, r24
    1d3a:	67 2b       	or	r22, r23
    1d3c:	68 2b       	or	r22, r24
    1d3e:	69 2b       	or	r22, r25
    1d40:	c9 f1       	breq	.+114    	; 0x1db4 <remove_chain+0xcc>
    1d42:	91 e0       	ldi	r25, 0x01	; 1
    1d44:	89 16       	cp	r8, r25
    1d46:	91 04       	cpc	r9, r1
    1d48:	a1 04       	cpc	r10, r1
    1d4a:	b1 04       	cpc	r11, r1
    1d4c:	a9 f1       	breq	.+106    	; 0x1db8 <remove_chain+0xd0>
    1d4e:	8f ef       	ldi	r24, 0xFF	; 255
    1d50:	88 16       	cp	r8, r24
    1d52:	98 06       	cpc	r9, r24
    1d54:	a8 06       	cpc	r10, r24
    1d56:	b8 06       	cpc	r11, r24
    1d58:	89 f1       	breq	.+98     	; 0x1dbc <remove_chain+0xd4>
    1d5a:	00 e0       	ldi	r16, 0x00	; 0
    1d5c:	10 e0       	ldi	r17, 0x00	; 0
    1d5e:	98 01       	movw	r18, r16
    1d60:	b7 01       	movw	r22, r14
    1d62:	a6 01       	movw	r20, r12
    1d64:	ce 01       	movw	r24, r28
    1d66:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <put_fat>
    1d6a:	81 11       	cpse	r24, r1
    1d6c:	28 c0       	rjmp	.+80     	; 0x1dbe <remove_chain+0xd6>
    1d6e:	4e 85       	ldd	r20, Y+14	; 0x0e
    1d70:	5f 85       	ldd	r21, Y+15	; 0x0f
    1d72:	68 89       	ldd	r22, Y+16	; 0x10
    1d74:	79 89       	ldd	r23, Y+17	; 0x11
    1d76:	4f 3f       	cpi	r20, 0xFF	; 255
    1d78:	9f ef       	ldi	r25, 0xFF	; 255
    1d7a:	59 07       	cpc	r21, r25
    1d7c:	69 07       	cpc	r22, r25
    1d7e:	79 07       	cpc	r23, r25
    1d80:	49 f0       	breq	.+18     	; 0x1d94 <remove_chain+0xac>
    1d82:	4f 5f       	subi	r20, 0xFF	; 255
    1d84:	5f 4f       	sbci	r21, 0xFF	; 255
    1d86:	6f 4f       	sbci	r22, 0xFF	; 255
    1d88:	7f 4f       	sbci	r23, 0xFF	; 255
    1d8a:	4e 87       	std	Y+14, r20	; 0x0e
    1d8c:	5f 87       	std	Y+15, r21	; 0x0f
    1d8e:	68 8b       	std	Y+16, r22	; 0x10
    1d90:	79 8b       	std	Y+17, r23	; 0x11
    1d92:	7d 82       	std	Y+5, r7	; 0x05
    1d94:	75 01       	movw	r14, r10
    1d96:	64 01       	movw	r12, r8
    1d98:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1d9a:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1d9c:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1d9e:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1da0:	84 16       	cp	r8, r20
    1da2:	95 06       	cpc	r9, r21
    1da4:	a6 06       	cpc	r10, r22
    1da6:	b7 06       	cpc	r11, r23
    1da8:	08 f2       	brcs	.-126    	; 0x1d2c <remove_chain+0x44>
    1daa:	09 c0       	rjmp	.+18     	; 0x1dbe <remove_chain+0xd6>
    1dac:	82 e0       	ldi	r24, 0x02	; 2
    1dae:	07 c0       	rjmp	.+14     	; 0x1dbe <remove_chain+0xd6>
    1db0:	82 e0       	ldi	r24, 0x02	; 2
    1db2:	05 c0       	rjmp	.+10     	; 0x1dbe <remove_chain+0xd6>
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	03 c0       	rjmp	.+6      	; 0x1dbe <remove_chain+0xd6>
    1db8:	82 e0       	ldi	r24, 0x02	; 2
    1dba:	01 c0       	rjmp	.+2      	; 0x1dbe <remove_chain+0xd6>
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	1f 91       	pop	r17
    1dc4:	0f 91       	pop	r16
    1dc6:	ff 90       	pop	r15
    1dc8:	ef 90       	pop	r14
    1dca:	df 90       	pop	r13
    1dcc:	cf 90       	pop	r12
    1dce:	bf 90       	pop	r11
    1dd0:	af 90       	pop	r10
    1dd2:	9f 90       	pop	r9
    1dd4:	8f 90       	pop	r8
    1dd6:	7f 90       	pop	r7
    1dd8:	08 95       	ret

00001dda <f_mount>:
    1dda:	81 11       	cpse	r24, r1
    1ddc:	12 c0       	rjmp	.+36     	; 0x1e02 <f_mount+0x28>
    1dde:	e0 91 7f 01 	lds	r30, 0x017F	; 0x80017f <FatFs>
    1de2:	f0 91 80 01 	lds	r31, 0x0180	; 0x800180 <FatFs+0x1>
    1de6:	30 97       	sbiw	r30, 0x00	; 0
    1de8:	09 f0       	breq	.+2      	; 0x1dec <f_mount+0x12>
    1dea:	10 82       	st	Z, r1
    1dec:	61 15       	cp	r22, r1
    1dee:	71 05       	cpc	r23, r1
    1df0:	11 f0       	breq	.+4      	; 0x1df6 <f_mount+0x1c>
    1df2:	fb 01       	movw	r30, r22
    1df4:	10 82       	st	Z, r1
    1df6:	70 93 80 01 	sts	0x0180, r23	; 0x800180 <FatFs+0x1>
    1dfa:	60 93 7f 01 	sts	0x017F, r22	; 0x80017f <FatFs>
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	08 95       	ret
    1e02:	8b e0       	ldi	r24, 0x0B	; 11
    1e04:	08 95       	ret

00001e06 <f_open>:
    1e06:	4f 92       	push	r4
    1e08:	5f 92       	push	r5
    1e0a:	6f 92       	push	r6
    1e0c:	7f 92       	push	r7
    1e0e:	8f 92       	push	r8
    1e10:	9f 92       	push	r9
    1e12:	af 92       	push	r10
    1e14:	bf 92       	push	r11
    1e16:	cf 92       	push	r12
    1e18:	df 92       	push	r13
    1e1a:	ef 92       	push	r14
    1e1c:	ff 92       	push	r15
    1e1e:	0f 93       	push	r16
    1e20:	1f 93       	push	r17
    1e22:	cf 93       	push	r28
    1e24:	df 93       	push	r29
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	a4 97       	sbiw	r28, 0x24	; 36
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	f8 94       	cli
    1e30:	de bf       	out	0x3e, r29	; 62
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	cd bf       	out	0x3d, r28	; 61
    1e36:	8c 01       	movw	r16, r24
    1e38:	7c a3       	std	Y+36, r23	; 0x24
    1e3a:	6b a3       	std	Y+35, r22	; 0x23
    1e3c:	f4 2e       	mov	r15, r20
    1e3e:	dc 01       	movw	r26, r24
    1e40:	1d 92       	st	X+, r1
    1e42:	1c 92       	st	X, r1
    1e44:	b4 2f       	mov	r27, r20
    1e46:	bf 71       	andi	r27, 0x1F	; 31
    1e48:	eb 2e       	mov	r14, r27
    1e4a:	4e 71       	andi	r20, 0x1E	; 30
    1e4c:	be 01       	movw	r22, r28
    1e4e:	6f 5f       	subi	r22, 0xFF	; 255
    1e50:	7f 4f       	sbci	r23, 0xFF	; 255
    1e52:	ce 01       	movw	r24, r28
    1e54:	83 96       	adiw	r24, 0x23	; 35
    1e56:	0e 94 c5 03 	call	0x78a	; 0x78a <chk_mounted>
    1e5a:	9e 01       	movw	r18, r28
    1e5c:	29 5e       	subi	r18, 0xE9	; 233
    1e5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e60:	3e 8b       	std	Y+22, r19	; 0x16
    1e62:	2d 8b       	std	Y+21, r18	; 0x15
    1e64:	81 11       	cpse	r24, r1
    1e66:	bd c0       	rjmp	.+378    	; 0x1fe2 <f_open+0x1dc>
    1e68:	6b a1       	ldd	r22, Y+35	; 0x23
    1e6a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e6c:	ce 01       	movw	r24, r28
    1e6e:	01 96       	adiw	r24, 0x01	; 1
    1e70:	0e 94 22 0c 	call	0x1844	; 0x1844 <follow_path>
    1e74:	cb 88       	ldd	r12, Y+19	; 0x13
    1e76:	dc 88       	ldd	r13, Y+20	; 0x14
    1e78:	81 11       	cpse	r24, r1
    1e7a:	ba c0       	rjmp	.+372    	; 0x1ff0 <f_open+0x1ea>
    1e7c:	c1 14       	cp	r12, r1
    1e7e:	d1 04       	cpc	r13, r1
    1e80:	09 f0       	breq	.+2      	; 0x1e84 <f_open+0x7e>
    1e82:	c0 c0       	rjmp	.+384    	; 0x2004 <f_open+0x1fe>
    1e84:	ba c0       	rjmp	.+372    	; 0x1ffa <f_open+0x1f4>
    1e86:	84 30       	cpi	r24, 0x04	; 4
    1e88:	21 f4       	brne	.+8      	; 0x1e92 <f_open+0x8c>
    1e8a:	ce 01       	movw	r24, r28
    1e8c:	01 96       	adiw	r24, 0x01	; 1
    1e8e:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <dir_register>
    1e92:	ee 2d       	mov	r30, r14
    1e94:	e8 60       	ori	r30, 0x08	; 8
    1e96:	ee 2e       	mov	r14, r30
    1e98:	cb 88       	ldd	r12, Y+19	; 0x13
    1e9a:	dc 88       	ldd	r13, Y+20	; 0x14
    1e9c:	88 23       	and	r24, r24
    1e9e:	49 f0       	breq	.+18     	; 0x1eb2 <f_open+0xac>
    1ea0:	cc c0       	rjmp	.+408    	; 0x203a <f_open+0x234>
    1ea2:	f2 fc       	sbrc	r15, 2
    1ea4:	c3 c0       	rjmp	.+390    	; 0x202c <f_open+0x226>
    1ea6:	d6 01       	movw	r26, r12
    1ea8:	1b 96       	adiw	r26, 0x0b	; 11
    1eaa:	8c 91       	ld	r24, X
    1eac:	81 71       	andi	r24, 0x11	; 17
    1eae:	09 f0       	breq	.+2      	; 0x1eb2 <f_open+0xac>
    1eb0:	bf c0       	rjmp	.+382    	; 0x2030 <f_open+0x22a>
    1eb2:	e3 fe       	sbrs	r14, 3
    1eb4:	51 c0       	rjmp	.+162    	; 0x1f58 <f_open+0x152>
    1eb6:	0e 94 67 17 	call	0x2ece	; 0x2ece <get_fattime>
    1eba:	f6 01       	movw	r30, r12
    1ebc:	66 87       	std	Z+14, r22	; 0x0e
    1ebe:	77 87       	std	Z+15, r23	; 0x0f
    1ec0:	80 8b       	std	Z+16, r24	; 0x10
    1ec2:	91 8b       	std	Z+17, r25	; 0x11
    1ec4:	13 86       	std	Z+11, r1	; 0x0b
    1ec6:	14 8e       	std	Z+28, r1	; 0x1c
    1ec8:	15 8e       	std	Z+29, r1	; 0x1d
    1eca:	16 8e       	std	Z+30, r1	; 0x1e
    1ecc:	17 8e       	std	Z+31, r1	; 0x1f
    1ece:	84 88       	ldd	r8, Z+20	; 0x14
    1ed0:	95 88       	ldd	r9, Z+21	; 0x15
    1ed2:	a1 2c       	mov	r10, r1
    1ed4:	b1 2c       	mov	r11, r1
    1ed6:	d4 01       	movw	r26, r8
    1ed8:	99 27       	eor	r25, r25
    1eda:	88 27       	eor	r24, r24
    1edc:	82 8c       	ldd	r8, Z+26	; 0x1a
    1ede:	93 8c       	ldd	r9, Z+27	; 0x1b
    1ee0:	a1 2c       	mov	r10, r1
    1ee2:	b1 2c       	mov	r11, r1
    1ee4:	88 2a       	or	r8, r24
    1ee6:	99 2a       	or	r9, r25
    1ee8:	aa 2a       	or	r10, r26
    1eea:	bb 2a       	or	r11, r27
    1eec:	13 8e       	std	Z+27, r1	; 0x1b
    1eee:	12 8e       	std	Z+26, r1	; 0x1a
    1ef0:	15 8a       	std	Z+21, r1	; 0x15
    1ef2:	14 8a       	std	Z+20, r1	; 0x14
    1ef4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	84 83       	std	Z+4, r24	; 0x04
    1efc:	81 14       	cp	r8, r1
    1efe:	91 04       	cpc	r9, r1
    1f00:	a1 04       	cpc	r10, r1
    1f02:	b1 04       	cpc	r11, r1
    1f04:	31 f1       	breq	.+76     	; 0x1f52 <f_open+0x14c>
    1f06:	46 a4       	ldd	r4, Z+46	; 0x2e
    1f08:	57 a4       	ldd	r5, Z+47	; 0x2f
    1f0a:	60 a8       	ldd	r6, Z+48	; 0x30
    1f0c:	71 a8       	ldd	r7, Z+49	; 0x31
    1f0e:	b5 01       	movw	r22, r10
    1f10:	a4 01       	movw	r20, r8
    1f12:	cf 01       	movw	r24, r30
    1f14:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <remove_chain>
    1f18:	81 11       	cpse	r24, r1
    1f1a:	8f c0       	rjmp	.+286    	; 0x203a <f_open+0x234>
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f20:	f1 e0       	ldi	r31, 0x01	; 1
    1f22:	8f 1a       	sub	r8, r31
    1f24:	91 08       	sbc	r9, r1
    1f26:	a1 08       	sbc	r10, r1
    1f28:	b1 08       	sbc	r11, r1
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	1a 96       	adiw	r26, 0x0a	; 10
    1f2e:	8d 92       	st	X+, r8
    1f30:	9d 92       	st	X+, r9
    1f32:	ad 92       	st	X+, r10
    1f34:	bc 92       	st	X, r11
    1f36:	1d 97       	sbiw	r26, 0x0d	; 13
    1f38:	b3 01       	movw	r22, r6
    1f3a:	a2 01       	movw	r20, r4
    1f3c:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
    1f40:	88 23       	and	r24, r24
    1f42:	39 f0       	breq	.+14     	; 0x1f52 <f_open+0x14c>
    1f44:	7a c0       	rjmp	.+244    	; 0x203a <f_open+0x234>
    1f46:	f1 fe       	sbrs	r15, 1
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <f_open+0x148>
    1f4a:	80 fd       	sbrc	r24, 0
    1f4c:	73 c0       	rjmp	.+230    	; 0x2034 <f_open+0x22e>
    1f4e:	f3 fe       	sbrs	r15, 3
    1f50:	03 c0       	rjmp	.+6      	; 0x1f58 <f_open+0x152>
    1f52:	be 2d       	mov	r27, r14
    1f54:	b0 62       	ori	r27, 0x20	; 32
    1f56:	eb 2e       	mov	r14, r27
    1f58:	e9 81       	ldd	r30, Y+1	; 0x01
    1f5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f5c:	86 a5       	ldd	r24, Z+46	; 0x2e
    1f5e:	97 a5       	ldd	r25, Z+47	; 0x2f
    1f60:	a0 a9       	ldd	r26, Z+48	; 0x30
    1f62:	b1 a9       	ldd	r27, Z+49	; 0x31
    1f64:	f8 01       	movw	r30, r16
    1f66:	82 8f       	std	Z+26, r24	; 0x1a
    1f68:	93 8f       	std	Z+27, r25	; 0x1b
    1f6a:	a4 8f       	std	Z+28, r26	; 0x1c
    1f6c:	b5 8f       	std	Z+29, r27	; 0x1d
    1f6e:	d7 8e       	std	Z+31, r13	; 0x1f
    1f70:	c6 8e       	std	Z+30, r12	; 0x1e
    1f72:	d8 01       	movw	r26, r16
    1f74:	14 96       	adiw	r26, 0x04	; 4
    1f76:	ec 92       	st	X, r14
    1f78:	f6 01       	movw	r30, r12
    1f7a:	84 89       	ldd	r24, Z+20	; 0x14
    1f7c:	95 89       	ldd	r25, Z+21	; 0x15
    1f7e:	a0 e0       	ldi	r26, 0x00	; 0
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	dc 01       	movw	r26, r24
    1f84:	99 27       	eor	r25, r25
    1f86:	88 27       	eor	r24, r24
    1f88:	42 8d       	ldd	r20, Z+26	; 0x1a
    1f8a:	53 8d       	ldd	r21, Z+27	; 0x1b
    1f8c:	60 e0       	ldi	r22, 0x00	; 0
    1f8e:	70 e0       	ldi	r23, 0x00	; 0
    1f90:	84 2b       	or	r24, r20
    1f92:	95 2b       	or	r25, r21
    1f94:	a6 2b       	or	r26, r22
    1f96:	b7 2b       	or	r27, r23
    1f98:	f8 01       	movw	r30, r16
    1f9a:	86 87       	std	Z+14, r24	; 0x0e
    1f9c:	97 87       	std	Z+15, r25	; 0x0f
    1f9e:	a0 8b       	std	Z+16, r26	; 0x10
    1fa0:	b1 8b       	std	Z+17, r27	; 0x11
    1fa2:	f6 01       	movw	r30, r12
    1fa4:	84 8d       	ldd	r24, Z+28	; 0x1c
    1fa6:	95 8d       	ldd	r25, Z+29	; 0x1d
    1fa8:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1faa:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1fac:	f8 01       	movw	r30, r16
    1fae:	82 87       	std	Z+10, r24	; 0x0a
    1fb0:	93 87       	std	Z+11, r25	; 0x0b
    1fb2:	a4 87       	std	Z+12, r26	; 0x0c
    1fb4:	b5 87       	std	Z+13, r27	; 0x0d
    1fb6:	d8 01       	movw	r26, r16
    1fb8:	16 82       	std	Z+6, r1	; 0x06
    1fba:	17 82       	std	Z+7, r1	; 0x07
    1fbc:	10 86       	std	Z+8, r1	; 0x08
    1fbe:	11 86       	std	Z+9, r1	; 0x09
    1fc0:	16 8a       	std	Z+22, r1	; 0x16
    1fc2:	17 8a       	std	Z+23, r1	; 0x17
    1fc4:	10 8e       	std	Z+24, r1	; 0x18
    1fc6:	11 8e       	std	Z+25, r1	; 0x19
    1fc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fca:	fa 81       	ldd	r31, Y+2	; 0x02
    1fcc:	11 96       	adiw	r26, 0x01	; 1
    1fce:	fc 93       	st	X, r31
    1fd0:	ee 93       	st	-X, r30
    1fd2:	86 81       	ldd	r24, Z+6	; 0x06
    1fd4:	97 81       	ldd	r25, Z+7	; 0x07
    1fd6:	13 96       	adiw	r26, 0x03	; 3
    1fd8:	9c 93       	st	X, r25
    1fda:	8e 93       	st	-X, r24
    1fdc:	12 97       	sbiw	r26, 0x02	; 2
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	2c c0       	rjmp	.+88     	; 0x203a <f_open+0x234>
    1fe2:	cb 88       	ldd	r12, Y+19	; 0x13
    1fe4:	dc 88       	ldd	r13, Y+20	; 0x14
    1fe6:	9f 2d       	mov	r25, r15
    1fe8:	9c 71       	andi	r25, 0x1C	; 28
    1fea:	09 f0       	breq	.+2      	; 0x1fee <f_open+0x1e8>
    1fec:	4c cf       	rjmp	.-360    	; 0x1e86 <f_open+0x80>
    1fee:	0f c0       	rjmp	.+30     	; 0x200e <f_open+0x208>
    1ff0:	9f 2d       	mov	r25, r15
    1ff2:	9c 71       	andi	r25, 0x1C	; 28
    1ff4:	09 f0       	breq	.+2      	; 0x1ff8 <f_open+0x1f2>
    1ff6:	47 cf       	rjmp	.-370    	; 0x1e86 <f_open+0x80>
    1ff8:	0a c0       	rjmp	.+20     	; 0x200e <f_open+0x208>
    1ffa:	8f 2d       	mov	r24, r15
    1ffc:	8c 71       	andi	r24, 0x1C	; 28
    1ffe:	51 f4       	brne	.+20     	; 0x2014 <f_open+0x20e>
    2000:	86 e0       	ldi	r24, 0x06	; 6
    2002:	05 c0       	rjmp	.+10     	; 0x200e <f_open+0x208>
    2004:	8f 2d       	mov	r24, r15
    2006:	8c 71       	andi	r24, 0x1C	; 28
    2008:	09 f0       	breq	.+2      	; 0x200c <f_open+0x206>
    200a:	4b cf       	rjmp	.-362    	; 0x1ea2 <f_open+0x9c>
    200c:	0a c0       	rjmp	.+20     	; 0x2022 <f_open+0x21c>
    200e:	81 11       	cpse	r24, r1
    2010:	14 c0       	rjmp	.+40     	; 0x203a <f_open+0x234>
    2012:	af cf       	rjmp	.-162    	; 0x1f72 <f_open+0x16c>
    2014:	be 2d       	mov	r27, r14
    2016:	b8 60       	ori	r27, 0x08	; 8
    2018:	eb 2e       	mov	r14, r27
    201a:	cb 88       	ldd	r12, Y+19	; 0x13
    201c:	dc 88       	ldd	r13, Y+20	; 0x14
    201e:	86 e0       	ldi	r24, 0x06	; 6
    2020:	f6 cf       	rjmp	.-20     	; 0x200e <f_open+0x208>
    2022:	f6 01       	movw	r30, r12
    2024:	83 85       	ldd	r24, Z+11	; 0x0b
    2026:	84 fd       	sbrc	r24, 4
    2028:	07 c0       	rjmp	.+14     	; 0x2038 <f_open+0x232>
    202a:	8d cf       	rjmp	.-230    	; 0x1f46 <f_open+0x140>
    202c:	88 e0       	ldi	r24, 0x08	; 8
    202e:	05 c0       	rjmp	.+10     	; 0x203a <f_open+0x234>
    2030:	87 e0       	ldi	r24, 0x07	; 7
    2032:	03 c0       	rjmp	.+6      	; 0x203a <f_open+0x234>
    2034:	87 e0       	ldi	r24, 0x07	; 7
    2036:	01 c0       	rjmp	.+2      	; 0x203a <f_open+0x234>
    2038:	84 e0       	ldi	r24, 0x04	; 4
    203a:	a4 96       	adiw	r28, 0x24	; 36
    203c:	0f b6       	in	r0, 0x3f	; 63
    203e:	f8 94       	cli
    2040:	de bf       	out	0x3e, r29	; 62
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	cd bf       	out	0x3d, r28	; 61
    2046:	df 91       	pop	r29
    2048:	cf 91       	pop	r28
    204a:	1f 91       	pop	r17
    204c:	0f 91       	pop	r16
    204e:	ff 90       	pop	r15
    2050:	ef 90       	pop	r14
    2052:	df 90       	pop	r13
    2054:	cf 90       	pop	r12
    2056:	bf 90       	pop	r11
    2058:	af 90       	pop	r10
    205a:	9f 90       	pop	r9
    205c:	8f 90       	pop	r8
    205e:	7f 90       	pop	r7
    2060:	6f 90       	pop	r6
    2062:	5f 90       	pop	r5
    2064:	4f 90       	pop	r4
    2066:	08 95       	ret

00002068 <f_read>:
    2068:	2f 92       	push	r2
    206a:	3f 92       	push	r3
    206c:	4f 92       	push	r4
    206e:	5f 92       	push	r5
    2070:	6f 92       	push	r6
    2072:	7f 92       	push	r7
    2074:	8f 92       	push	r8
    2076:	9f 92       	push	r9
    2078:	af 92       	push	r10
    207a:	bf 92       	push	r11
    207c:	cf 92       	push	r12
    207e:	df 92       	push	r13
    2080:	ef 92       	push	r14
    2082:	ff 92       	push	r15
    2084:	0f 93       	push	r16
    2086:	1f 93       	push	r17
    2088:	cf 93       	push	r28
    208a:	df 93       	push	r29
    208c:	ec 01       	movw	r28, r24
    208e:	4b 01       	movw	r8, r22
    2090:	6a 01       	movw	r12, r20
    2092:	59 01       	movw	r10, r18
    2094:	f9 01       	movw	r30, r18
    2096:	11 82       	std	Z+1, r1	; 0x01
    2098:	10 82       	st	Z, r1
    209a:	6a 81       	ldd	r22, Y+2	; 0x02
    209c:	7b 81       	ldd	r23, Y+3	; 0x03
    209e:	88 81       	ld	r24, Y
    20a0:	99 81       	ldd	r25, Y+1	; 0x01
    20a2:	0e 94 ab 03 	call	0x756	; 0x756 <validate>
    20a6:	81 11       	cpse	r24, r1
    20a8:	18 c1       	rjmp	.+560    	; 0x22da <f_read+0x272>
    20aa:	8c 81       	ldd	r24, Y+4	; 0x04
    20ac:	88 23       	and	r24, r24
    20ae:	0c f4       	brge	.+2      	; 0x20b2 <f_read+0x4a>
    20b0:	0f c1       	rjmp	.+542    	; 0x22d0 <f_read+0x268>
    20b2:	80 ff       	sbrs	r24, 0
    20b4:	0f c1       	rjmp	.+542    	; 0x22d4 <f_read+0x26c>
    20b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    20b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ba:	ac 85       	ldd	r26, Y+12	; 0x0c
    20bc:	bd 85       	ldd	r27, Y+13	; 0x0d
    20be:	4e 81       	ldd	r20, Y+6	; 0x06
    20c0:	5f 81       	ldd	r21, Y+7	; 0x07
    20c2:	68 85       	ldd	r22, Y+8	; 0x08
    20c4:	79 85       	ldd	r23, Y+9	; 0x09
    20c6:	84 1b       	sub	r24, r20
    20c8:	95 0b       	sbc	r25, r21
    20ca:	a6 0b       	sbc	r26, r22
    20cc:	b7 0b       	sbc	r27, r23
    20ce:	a6 01       	movw	r20, r12
    20d0:	60 e0       	ldi	r22, 0x00	; 0
    20d2:	70 e0       	ldi	r23, 0x00	; 0
    20d4:	84 17       	cp	r24, r20
    20d6:	95 07       	cpc	r25, r21
    20d8:	a6 07       	cpc	r26, r22
    20da:	b7 07       	cpc	r27, r23
    20dc:	08 f4       	brcc	.+2      	; 0x20e0 <f_read+0x78>
    20de:	6c 01       	movw	r12, r24
    20e0:	c1 14       	cp	r12, r1
    20e2:	d1 04       	cpc	r13, r1
    20e4:	09 f4       	brne	.+2      	; 0x20e8 <f_read+0x80>
    20e6:	f8 c0       	rjmp	.+496    	; 0x22d8 <f_read+0x270>
    20e8:	4e 81       	ldd	r20, Y+6	; 0x06
    20ea:	5f 81       	ldd	r21, Y+7	; 0x07
    20ec:	68 85       	ldd	r22, Y+8	; 0x08
    20ee:	79 85       	ldd	r23, Y+9	; 0x09
    20f0:	db 01       	movw	r26, r22
    20f2:	ca 01       	movw	r24, r20
    20f4:	91 70       	andi	r25, 0x01	; 1
    20f6:	aa 27       	eor	r26, r26
    20f8:	bb 27       	eor	r27, r27
    20fa:	89 2b       	or	r24, r25
    20fc:	8a 2b       	or	r24, r26
    20fe:	8b 2b       	or	r24, r27
    2100:	09 f0       	breq	.+2      	; 0x2104 <f_read+0x9c>
    2102:	a0 c0       	rjmp	.+320    	; 0x2244 <f_read+0x1dc>
    2104:	e8 81       	ld	r30, Y
    2106:	f9 81       	ldd	r31, Y+1	; 0x01
    2108:	12 81       	ldd	r17, Z+2	; 0x02
    210a:	11 50       	subi	r17, 0x01	; 1
    210c:	db 01       	movw	r26, r22
    210e:	ca 01       	movw	r24, r20
    2110:	07 2e       	mov	r0, r23
    2112:	79 e0       	ldi	r23, 0x09	; 9
    2114:	b6 95       	lsr	r27
    2116:	a7 95       	ror	r26
    2118:	97 95       	ror	r25
    211a:	87 95       	ror	r24
    211c:	7a 95       	dec	r23
    211e:	d1 f7       	brne	.-12     	; 0x2114 <f_read+0xac>
    2120:	70 2d       	mov	r23, r0
    2122:	18 23       	and	r17, r24
    2124:	49 f5       	brne	.+82     	; 0x2178 <f_read+0x110>
    2126:	45 2b       	or	r20, r21
    2128:	46 2b       	or	r20, r22
    212a:	47 2b       	or	r20, r23
    212c:	29 f4       	brne	.+10     	; 0x2138 <f_read+0xd0>
    212e:	6e 85       	ldd	r22, Y+14	; 0x0e
    2130:	7f 85       	ldd	r23, Y+15	; 0x0f
    2132:	88 89       	ldd	r24, Y+16	; 0x10
    2134:	99 89       	ldd	r25, Y+17	; 0x11
    2136:	07 c0       	rjmp	.+14     	; 0x2146 <f_read+0xde>
    2138:	4a 89       	ldd	r20, Y+18	; 0x12
    213a:	5b 89       	ldd	r21, Y+19	; 0x13
    213c:	6c 89       	ldd	r22, Y+20	; 0x14
    213e:	7d 89       	ldd	r23, Y+21	; 0x15
    2140:	cf 01       	movw	r24, r30
    2142:	0e 94 38 07 	call	0xe70	; 0xe70 <get_fat>
    2146:	62 30       	cpi	r22, 0x02	; 2
    2148:	71 05       	cpc	r23, r1
    214a:	81 05       	cpc	r24, r1
    214c:	91 05       	cpc	r25, r1
    214e:	28 f4       	brcc	.+10     	; 0x215a <f_read+0xf2>
    2150:	8c 81       	ldd	r24, Y+4	; 0x04
    2152:	80 68       	ori	r24, 0x80	; 128
    2154:	8c 83       	std	Y+4, r24	; 0x04
    2156:	82 e0       	ldi	r24, 0x02	; 2
    2158:	c0 c0       	rjmp	.+384    	; 0x22da <f_read+0x272>
    215a:	6f 3f       	cpi	r22, 0xFF	; 255
    215c:	ff ef       	ldi	r31, 0xFF	; 255
    215e:	7f 07       	cpc	r23, r31
    2160:	8f 07       	cpc	r24, r31
    2162:	9f 07       	cpc	r25, r31
    2164:	29 f4       	brne	.+10     	; 0x2170 <f_read+0x108>
    2166:	8c 81       	ldd	r24, Y+4	; 0x04
    2168:	80 68       	ori	r24, 0x80	; 128
    216a:	8c 83       	std	Y+4, r24	; 0x04
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	b5 c0       	rjmp	.+362    	; 0x22da <f_read+0x272>
    2170:	6a 8b       	std	Y+18, r22	; 0x12
    2172:	7b 8b       	std	Y+19, r23	; 0x13
    2174:	8c 8b       	std	Y+20, r24	; 0x14
    2176:	9d 8b       	std	Y+21, r25	; 0x15
    2178:	28 80       	ld	r2, Y
    217a:	39 80       	ldd	r3, Y+1	; 0x01
    217c:	4a 89       	ldd	r20, Y+18	; 0x12
    217e:	5b 89       	ldd	r21, Y+19	; 0x13
    2180:	6c 89       	ldd	r22, Y+20	; 0x14
    2182:	7d 89       	ldd	r23, Y+21	; 0x15
    2184:	c1 01       	movw	r24, r2
    2186:	0e 94 10 07 	call	0xe20	; 0xe20 <clust2sect>
    218a:	61 15       	cp	r22, r1
    218c:	71 05       	cpc	r23, r1
    218e:	81 05       	cpc	r24, r1
    2190:	91 05       	cpc	r25, r1
    2192:	29 f4       	brne	.+10     	; 0x219e <f_read+0x136>
    2194:	8c 81       	ldd	r24, Y+4	; 0x04
    2196:	80 68       	ori	r24, 0x80	; 128
    2198:	8c 83       	std	Y+4, r24	; 0x04
    219a:	82 e0       	ldi	r24, 0x02	; 2
    219c:	9e c0       	rjmp	.+316    	; 0x22da <f_read+0x272>
    219e:	2b 01       	movw	r4, r22
    21a0:	3c 01       	movw	r6, r24
    21a2:	41 0e       	add	r4, r17
    21a4:	51 1c       	adc	r5, r1
    21a6:	61 1c       	adc	r6, r1
    21a8:	71 1c       	adc	r7, r1
    21aa:	76 01       	movw	r14, r12
    21ac:	ef 2c       	mov	r14, r15
    21ae:	ff 24       	eor	r15, r15
    21b0:	e6 94       	lsr	r14
    21b2:	e1 14       	cp	r14, r1
    21b4:	f1 04       	cpc	r15, r1
    21b6:	09 f4       	brne	.+2      	; 0x21ba <f_read+0x152>
    21b8:	41 c0       	rjmp	.+130    	; 0x223c <f_read+0x1d4>
    21ba:	f1 01       	movw	r30, r2
    21bc:	42 81       	ldd	r20, Z+2	; 0x02
    21be:	24 2f       	mov	r18, r20
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	c7 01       	movw	r24, r14
    21c4:	81 0f       	add	r24, r17
    21c6:	91 1d       	adc	r25, r1
    21c8:	28 17       	cp	r18, r24
    21ca:	39 07       	cpc	r19, r25
    21cc:	18 f4       	brcc	.+6      	; 0x21d4 <f_read+0x16c>
    21ce:	79 01       	movw	r14, r18
    21d0:	e1 1a       	sub	r14, r17
    21d2:	f1 08       	sbc	r15, r1
    21d4:	0e 2d       	mov	r16, r14
    21d6:	a3 01       	movw	r20, r6
    21d8:	92 01       	movw	r18, r4
    21da:	b4 01       	movw	r22, r8
    21dc:	f1 01       	movw	r30, r2
    21de:	81 81       	ldd	r24, Z+1	; 0x01
    21e0:	0e 94 56 2b 	call	0x56ac	; 0x56ac <disk_read>
    21e4:	88 23       	and	r24, r24
    21e6:	29 f0       	breq	.+10     	; 0x21f2 <f_read+0x18a>
    21e8:	8c 81       	ldd	r24, Y+4	; 0x04
    21ea:	80 68       	ori	r24, 0x80	; 128
    21ec:	8c 83       	std	Y+4, r24	; 0x04
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	74 c0       	rjmp	.+232    	; 0x22da <f_read+0x272>
    21f2:	e8 81       	ld	r30, Y
    21f4:	f9 81       	ldd	r31, Y+1	; 0x01
    21f6:	84 81       	ldd	r24, Z+4	; 0x04
    21f8:	88 23       	and	r24, r24
    21fa:	e1 f0       	breq	.+56     	; 0x2234 <f_read+0x1cc>
    21fc:	86 a5       	ldd	r24, Z+46	; 0x2e
    21fe:	97 a5       	ldd	r25, Z+47	; 0x2f
    2200:	a0 a9       	ldd	r26, Z+48	; 0x30
    2202:	b1 a9       	ldd	r27, Z+49	; 0x31
    2204:	84 19       	sub	r24, r4
    2206:	95 09       	sbc	r25, r5
    2208:	a6 09       	sbc	r26, r6
    220a:	b7 09       	sbc	r27, r7
    220c:	a7 01       	movw	r20, r14
    220e:	60 e0       	ldi	r22, 0x00	; 0
    2210:	70 e0       	ldi	r23, 0x00	; 0
    2212:	84 17       	cp	r24, r20
    2214:	95 07       	cpc	r25, r21
    2216:	a6 07       	cpc	r26, r22
    2218:	b7 07       	cpc	r27, r23
    221a:	60 f4       	brcc	.+24     	; 0x2234 <f_read+0x1cc>
    221c:	bf 01       	movw	r22, r30
    221e:	6e 5c       	subi	r22, 0xCE	; 206
    2220:	7f 4f       	sbci	r23, 0xFF	; 255
    2222:	98 2f       	mov	r25, r24
    2224:	88 27       	eor	r24, r24
    2226:	99 0f       	add	r25, r25
    2228:	40 e0       	ldi	r20, 0x00	; 0
    222a:	52 e0       	ldi	r21, 0x02	; 2
    222c:	88 0d       	add	r24, r8
    222e:	99 1d       	adc	r25, r9
    2230:	0e 94 4b 02 	call	0x496	; 0x496 <mem_cpy>
    2234:	fe 2c       	mov	r15, r14
    2236:	ee 24       	eor	r14, r14
    2238:	ff 0c       	add	r15, r15
    223a:	2f c0       	rjmp	.+94     	; 0x229a <f_read+0x232>
    223c:	4e 8a       	std	Y+22, r4	; 0x16
    223e:	5f 8a       	std	Y+23, r5	; 0x17
    2240:	68 8e       	std	Y+24, r6	; 0x18
    2242:	79 8e       	std	Y+25, r7	; 0x19
    2244:	8e 81       	ldd	r24, Y+6	; 0x06
    2246:	9f 81       	ldd	r25, Y+7	; 0x07
    2248:	91 70       	andi	r25, 0x01	; 1
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	32 e0       	ldi	r19, 0x02	; 2
    224e:	79 01       	movw	r14, r18
    2250:	e8 1a       	sub	r14, r24
    2252:	f9 0a       	sbc	r15, r25
    2254:	ce 14       	cp	r12, r14
    2256:	df 04       	cpc	r13, r15
    2258:	08 f4       	brcc	.+2      	; 0x225c <f_read+0x1f4>
    225a:	76 01       	movw	r14, r12
    225c:	4e 89       	ldd	r20, Y+22	; 0x16
    225e:	5f 89       	ldd	r21, Y+23	; 0x17
    2260:	68 8d       	ldd	r22, Y+24	; 0x18
    2262:	79 8d       	ldd	r23, Y+25	; 0x19
    2264:	88 81       	ld	r24, Y
    2266:	99 81       	ldd	r25, Y+1	; 0x01
    2268:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
    226c:	88 23       	and	r24, r24
    226e:	29 f0       	breq	.+10     	; 0x227a <f_read+0x212>
    2270:	8c 81       	ldd	r24, Y+4	; 0x04
    2272:	80 68       	ori	r24, 0x80	; 128
    2274:	8c 83       	std	Y+4, r24	; 0x04
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	30 c0       	rjmp	.+96     	; 0x22da <f_read+0x272>
    227a:	8e 81       	ldd	r24, Y+6	; 0x06
    227c:	9f 81       	ldd	r25, Y+7	; 0x07
    227e:	a8 85       	ldd	r26, Y+8	; 0x08
    2280:	b9 85       	ldd	r27, Y+9	; 0x09
    2282:	91 70       	andi	r25, 0x01	; 1
    2284:	aa 27       	eor	r26, r26
    2286:	bb 27       	eor	r27, r27
    2288:	c2 96       	adiw	r24, 0x32	; 50
    228a:	68 81       	ld	r22, Y
    228c:	79 81       	ldd	r23, Y+1	; 0x01
    228e:	68 0f       	add	r22, r24
    2290:	79 1f       	adc	r23, r25
    2292:	a7 01       	movw	r20, r14
    2294:	c4 01       	movw	r24, r8
    2296:	0e 94 4b 02 	call	0x496	; 0x496 <mem_cpy>
    229a:	8e 0c       	add	r8, r14
    229c:	9f 1c       	adc	r9, r15
    229e:	8e 81       	ldd	r24, Y+6	; 0x06
    22a0:	9f 81       	ldd	r25, Y+7	; 0x07
    22a2:	a8 85       	ldd	r26, Y+8	; 0x08
    22a4:	b9 85       	ldd	r27, Y+9	; 0x09
    22a6:	8e 0d       	add	r24, r14
    22a8:	9f 1d       	adc	r25, r15
    22aa:	a1 1d       	adc	r26, r1
    22ac:	b1 1d       	adc	r27, r1
    22ae:	8e 83       	std	Y+6, r24	; 0x06
    22b0:	9f 83       	std	Y+7, r25	; 0x07
    22b2:	a8 87       	std	Y+8, r26	; 0x08
    22b4:	b9 87       	std	Y+9, r27	; 0x09
    22b6:	f5 01       	movw	r30, r10
    22b8:	80 81       	ld	r24, Z
    22ba:	91 81       	ldd	r25, Z+1	; 0x01
    22bc:	8e 0d       	add	r24, r14
    22be:	9f 1d       	adc	r25, r15
    22c0:	91 83       	std	Z+1, r25	; 0x01
    22c2:	80 83       	st	Z, r24
    22c4:	ce 18       	sub	r12, r14
    22c6:	df 08       	sbc	r13, r15
    22c8:	09 f0       	breq	.+2      	; 0x22cc <f_read+0x264>
    22ca:	0e cf       	rjmp	.-484    	; 0x20e8 <f_read+0x80>
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	05 c0       	rjmp	.+10     	; 0x22da <f_read+0x272>
    22d0:	82 e0       	ldi	r24, 0x02	; 2
    22d2:	03 c0       	rjmp	.+6      	; 0x22da <f_read+0x272>
    22d4:	87 e0       	ldi	r24, 0x07	; 7
    22d6:	01 c0       	rjmp	.+2      	; 0x22da <f_read+0x272>
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	1f 91       	pop	r17
    22e0:	0f 91       	pop	r16
    22e2:	ff 90       	pop	r15
    22e4:	ef 90       	pop	r14
    22e6:	df 90       	pop	r13
    22e8:	cf 90       	pop	r12
    22ea:	bf 90       	pop	r11
    22ec:	af 90       	pop	r10
    22ee:	9f 90       	pop	r9
    22f0:	8f 90       	pop	r8
    22f2:	7f 90       	pop	r7
    22f4:	6f 90       	pop	r6
    22f6:	5f 90       	pop	r5
    22f8:	4f 90       	pop	r4
    22fa:	3f 90       	pop	r3
    22fc:	2f 90       	pop	r2
    22fe:	08 95       	ret

00002300 <f_write>:
    2300:	2f 92       	push	r2
    2302:	3f 92       	push	r3
    2304:	4f 92       	push	r4
    2306:	5f 92       	push	r5
    2308:	6f 92       	push	r6
    230a:	7f 92       	push	r7
    230c:	8f 92       	push	r8
    230e:	9f 92       	push	r9
    2310:	af 92       	push	r10
    2312:	bf 92       	push	r11
    2314:	cf 92       	push	r12
    2316:	df 92       	push	r13
    2318:	ef 92       	push	r14
    231a:	ff 92       	push	r15
    231c:	0f 93       	push	r16
    231e:	1f 93       	push	r17
    2320:	cf 93       	push	r28
    2322:	df 93       	push	r29
    2324:	ec 01       	movw	r28, r24
    2326:	4b 01       	movw	r8, r22
    2328:	6a 01       	movw	r12, r20
    232a:	59 01       	movw	r10, r18
    232c:	f9 01       	movw	r30, r18
    232e:	11 82       	std	Z+1, r1	; 0x01
    2330:	10 82       	st	Z, r1
    2332:	6a 81       	ldd	r22, Y+2	; 0x02
    2334:	7b 81       	ldd	r23, Y+3	; 0x03
    2336:	88 81       	ld	r24, Y
    2338:	99 81       	ldd	r25, Y+1	; 0x01
    233a:	0e 94 ab 03 	call	0x756	; 0x756 <validate>
    233e:	81 11       	cpse	r24, r1
    2340:	7a c1       	rjmp	.+756    	; 0x2636 <f_write+0x336>
    2342:	8c 81       	ldd	r24, Y+4	; 0x04
    2344:	88 23       	and	r24, r24
    2346:	0c f4       	brge	.+2      	; 0x234a <f_write+0x4a>
    2348:	73 c1       	rjmp	.+742    	; 0x2630 <f_write+0x330>
    234a:	81 ff       	sbrs	r24, 1
    234c:	73 c1       	rjmp	.+742    	; 0x2634 <f_write+0x334>
    234e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2350:	9b 85       	ldd	r25, Y+11	; 0x0b
    2352:	ac 85       	ldd	r26, Y+12	; 0x0c
    2354:	bd 85       	ldd	r27, Y+13	; 0x0d
    2356:	ac 01       	movw	r20, r24
    2358:	bd 01       	movw	r22, r26
    235a:	4c 0d       	add	r20, r12
    235c:	5d 1d       	adc	r21, r13
    235e:	61 1d       	adc	r22, r1
    2360:	71 1d       	adc	r23, r1
    2362:	48 17       	cp	r20, r24
    2364:	59 07       	cpc	r21, r25
    2366:	6a 07       	cpc	r22, r26
    2368:	7b 07       	cpc	r23, r27
    236a:	08 f4       	brcc	.+2      	; 0x236e <f_write+0x6e>
    236c:	4b c1       	rjmp	.+662    	; 0x2604 <f_write+0x304>
    236e:	c1 14       	cp	r12, r1
    2370:	d1 04       	cpc	r13, r1
    2372:	09 f4       	brne	.+2      	; 0x2376 <f_write+0x76>
    2374:	47 c1       	rjmp	.+654    	; 0x2604 <f_write+0x304>
    2376:	4e 81       	ldd	r20, Y+6	; 0x06
    2378:	5f 81       	ldd	r21, Y+7	; 0x07
    237a:	68 85       	ldd	r22, Y+8	; 0x08
    237c:	79 85       	ldd	r23, Y+9	; 0x09
    237e:	db 01       	movw	r26, r22
    2380:	ca 01       	movw	r24, r20
    2382:	91 70       	andi	r25, 0x01	; 1
    2384:	aa 27       	eor	r26, r26
    2386:	bb 27       	eor	r27, r27
    2388:	89 2b       	or	r24, r25
    238a:	8a 2b       	or	r24, r26
    238c:	8b 2b       	or	r24, r27
    238e:	09 f0       	breq	.+2      	; 0x2392 <f_write+0x92>
    2390:	f1 c0       	rjmp	.+482    	; 0x2574 <f_write+0x274>
    2392:	e8 81       	ld	r30, Y
    2394:	f9 81       	ldd	r31, Y+1	; 0x01
    2396:	12 81       	ldd	r17, Z+2	; 0x02
    2398:	11 50       	subi	r17, 0x01	; 1
    239a:	db 01       	movw	r26, r22
    239c:	ca 01       	movw	r24, r20
    239e:	07 2e       	mov	r0, r23
    23a0:	79 e0       	ldi	r23, 0x09	; 9
    23a2:	b6 95       	lsr	r27
    23a4:	a7 95       	ror	r26
    23a6:	97 95       	ror	r25
    23a8:	87 95       	ror	r24
    23aa:	7a 95       	dec	r23
    23ac:	d1 f7       	brne	.-12     	; 0x23a2 <f_write+0xa2>
    23ae:	70 2d       	mov	r23, r0
    23b0:	18 23       	and	r17, r24
    23b2:	f1 f5       	brne	.+124    	; 0x2430 <f_write+0x130>
    23b4:	45 2b       	or	r20, r21
    23b6:	46 2b       	or	r20, r22
    23b8:	47 2b       	or	r20, r23
    23ba:	a1 f4       	brne	.+40     	; 0x23e4 <f_write+0xe4>
    23bc:	6e 85       	ldd	r22, Y+14	; 0x0e
    23be:	7f 85       	ldd	r23, Y+15	; 0x0f
    23c0:	88 89       	ldd	r24, Y+16	; 0x10
    23c2:	99 89       	ldd	r25, Y+17	; 0x11
    23c4:	61 15       	cp	r22, r1
    23c6:	71 05       	cpc	r23, r1
    23c8:	81 05       	cpc	r24, r1
    23ca:	91 05       	cpc	r25, r1
    23cc:	c1 f4       	brne	.+48     	; 0x23fe <f_write+0xfe>
    23ce:	40 e0       	ldi	r20, 0x00	; 0
    23d0:	50 e0       	ldi	r21, 0x00	; 0
    23d2:	ba 01       	movw	r22, r20
    23d4:	cf 01       	movw	r24, r30
    23d6:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <create_chain>
    23da:	6e 87       	std	Y+14, r22	; 0x0e
    23dc:	7f 87       	std	Y+15, r23	; 0x0f
    23de:	88 8b       	std	Y+16, r24	; 0x10
    23e0:	99 8b       	std	Y+17, r25	; 0x11
    23e2:	07 c0       	rjmp	.+14     	; 0x23f2 <f_write+0xf2>
    23e4:	4a 89       	ldd	r20, Y+18	; 0x12
    23e6:	5b 89       	ldd	r21, Y+19	; 0x13
    23e8:	6c 89       	ldd	r22, Y+20	; 0x14
    23ea:	7d 89       	ldd	r23, Y+21	; 0x15
    23ec:	cf 01       	movw	r24, r30
    23ee:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <create_chain>
    23f2:	61 15       	cp	r22, r1
    23f4:	71 05       	cpc	r23, r1
    23f6:	81 05       	cpc	r24, r1
    23f8:	91 05       	cpc	r25, r1
    23fa:	09 f4       	brne	.+2      	; 0x23fe <f_write+0xfe>
    23fc:	03 c1       	rjmp	.+518    	; 0x2604 <f_write+0x304>
    23fe:	61 30       	cpi	r22, 0x01	; 1
    2400:	71 05       	cpc	r23, r1
    2402:	81 05       	cpc	r24, r1
    2404:	91 05       	cpc	r25, r1
    2406:	29 f4       	brne	.+10     	; 0x2412 <f_write+0x112>
    2408:	8c 81       	ldd	r24, Y+4	; 0x04
    240a:	80 68       	ori	r24, 0x80	; 128
    240c:	8c 83       	std	Y+4, r24	; 0x04
    240e:	82 e0       	ldi	r24, 0x02	; 2
    2410:	12 c1       	rjmp	.+548    	; 0x2636 <f_write+0x336>
    2412:	6f 3f       	cpi	r22, 0xFF	; 255
    2414:	ff ef       	ldi	r31, 0xFF	; 255
    2416:	7f 07       	cpc	r23, r31
    2418:	8f 07       	cpc	r24, r31
    241a:	9f 07       	cpc	r25, r31
    241c:	29 f4       	brne	.+10     	; 0x2428 <f_write+0x128>
    241e:	8c 81       	ldd	r24, Y+4	; 0x04
    2420:	80 68       	ori	r24, 0x80	; 128
    2422:	8c 83       	std	Y+4, r24	; 0x04
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	07 c1       	rjmp	.+526    	; 0x2636 <f_write+0x336>
    2428:	6a 8b       	std	Y+18, r22	; 0x12
    242a:	7b 8b       	std	Y+19, r23	; 0x13
    242c:	8c 8b       	std	Y+20, r24	; 0x14
    242e:	9d 8b       	std	Y+21, r25	; 0x15
    2430:	e8 81       	ld	r30, Y
    2432:	f9 81       	ldd	r31, Y+1	; 0x01
    2434:	46 a5       	ldd	r20, Z+46	; 0x2e
    2436:	57 a5       	ldd	r21, Z+47	; 0x2f
    2438:	60 a9       	ldd	r22, Z+48	; 0x30
    243a:	71 a9       	ldd	r23, Z+49	; 0x31
    243c:	8e 89       	ldd	r24, Y+22	; 0x16
    243e:	9f 89       	ldd	r25, Y+23	; 0x17
    2440:	a8 8d       	ldd	r26, Y+24	; 0x18
    2442:	b9 8d       	ldd	r27, Y+25	; 0x19
    2444:	48 17       	cp	r20, r24
    2446:	59 07       	cpc	r21, r25
    2448:	6a 07       	cpc	r22, r26
    244a:	7b 07       	cpc	r23, r27
    244c:	69 f4       	brne	.+26     	; 0x2468 <f_write+0x168>
    244e:	40 e0       	ldi	r20, 0x00	; 0
    2450:	50 e0       	ldi	r21, 0x00	; 0
    2452:	ba 01       	movw	r22, r20
    2454:	cf 01       	movw	r24, r30
    2456:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
    245a:	88 23       	and	r24, r24
    245c:	29 f0       	breq	.+10     	; 0x2468 <f_write+0x168>
    245e:	8c 81       	ldd	r24, Y+4	; 0x04
    2460:	80 68       	ori	r24, 0x80	; 128
    2462:	8c 83       	std	Y+4, r24	; 0x04
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	e7 c0       	rjmp	.+462    	; 0x2636 <f_write+0x336>
    2468:	28 80       	ld	r2, Y
    246a:	39 80       	ldd	r3, Y+1	; 0x01
    246c:	4a 89       	ldd	r20, Y+18	; 0x12
    246e:	5b 89       	ldd	r21, Y+19	; 0x13
    2470:	6c 89       	ldd	r22, Y+20	; 0x14
    2472:	7d 89       	ldd	r23, Y+21	; 0x15
    2474:	c1 01       	movw	r24, r2
    2476:	0e 94 10 07 	call	0xe20	; 0xe20 <clust2sect>
    247a:	61 15       	cp	r22, r1
    247c:	71 05       	cpc	r23, r1
    247e:	81 05       	cpc	r24, r1
    2480:	91 05       	cpc	r25, r1
    2482:	29 f4       	brne	.+10     	; 0x248e <f_write+0x18e>
    2484:	8c 81       	ldd	r24, Y+4	; 0x04
    2486:	80 68       	ori	r24, 0x80	; 128
    2488:	8c 83       	std	Y+4, r24	; 0x04
    248a:	82 e0       	ldi	r24, 0x02	; 2
    248c:	d4 c0       	rjmp	.+424    	; 0x2636 <f_write+0x336>
    248e:	2b 01       	movw	r4, r22
    2490:	3c 01       	movw	r6, r24
    2492:	41 0e       	add	r4, r17
    2494:	51 1c       	adc	r5, r1
    2496:	61 1c       	adc	r6, r1
    2498:	71 1c       	adc	r7, r1
    249a:	76 01       	movw	r14, r12
    249c:	ef 2c       	mov	r14, r15
    249e:	ff 24       	eor	r15, r15
    24a0:	e6 94       	lsr	r14
    24a2:	e1 14       	cp	r14, r1
    24a4:	f1 04       	cpc	r15, r1
    24a6:	09 f4       	brne	.+2      	; 0x24aa <f_write+0x1aa>
    24a8:	41 c0       	rjmp	.+130    	; 0x252c <f_write+0x22c>
    24aa:	f1 01       	movw	r30, r2
    24ac:	42 81       	ldd	r20, Z+2	; 0x02
    24ae:	24 2f       	mov	r18, r20
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	c7 01       	movw	r24, r14
    24b4:	81 0f       	add	r24, r17
    24b6:	91 1d       	adc	r25, r1
    24b8:	28 17       	cp	r18, r24
    24ba:	39 07       	cpc	r19, r25
    24bc:	18 f4       	brcc	.+6      	; 0x24c4 <f_write+0x1c4>
    24be:	79 01       	movw	r14, r18
    24c0:	e1 1a       	sub	r14, r17
    24c2:	f1 08       	sbc	r15, r1
    24c4:	0e 2d       	mov	r16, r14
    24c6:	a3 01       	movw	r20, r6
    24c8:	92 01       	movw	r18, r4
    24ca:	b4 01       	movw	r22, r8
    24cc:	f1 01       	movw	r30, r2
    24ce:	81 81       	ldd	r24, Z+1	; 0x01
    24d0:	0e 94 a9 2b 	call	0x5752	; 0x5752 <disk_write>
    24d4:	88 23       	and	r24, r24
    24d6:	29 f0       	breq	.+10     	; 0x24e2 <f_write+0x1e2>
    24d8:	8c 81       	ldd	r24, Y+4	; 0x04
    24da:	80 68       	ori	r24, 0x80	; 128
    24dc:	8c 83       	std	Y+4, r24	; 0x04
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	aa c0       	rjmp	.+340    	; 0x2636 <f_write+0x336>
    24e2:	e8 81       	ld	r30, Y
    24e4:	f9 81       	ldd	r31, Y+1	; 0x01
    24e6:	86 a5       	ldd	r24, Z+46	; 0x2e
    24e8:	97 a5       	ldd	r25, Z+47	; 0x2f
    24ea:	a0 a9       	ldd	r26, Z+48	; 0x30
    24ec:	b1 a9       	ldd	r27, Z+49	; 0x31
    24ee:	84 19       	sub	r24, r4
    24f0:	95 09       	sbc	r25, r5
    24f2:	a6 09       	sbc	r26, r6
    24f4:	b7 09       	sbc	r27, r7
    24f6:	a7 01       	movw	r20, r14
    24f8:	60 e0       	ldi	r22, 0x00	; 0
    24fa:	70 e0       	ldi	r23, 0x00	; 0
    24fc:	84 17       	cp	r24, r20
    24fe:	95 07       	cpc	r25, r21
    2500:	a6 07       	cpc	r26, r22
    2502:	b7 07       	cpc	r27, r23
    2504:	78 f4       	brcc	.+30     	; 0x2524 <f_write+0x224>
    2506:	98 2f       	mov	r25, r24
    2508:	88 27       	eor	r24, r24
    250a:	99 0f       	add	r25, r25
    250c:	b4 01       	movw	r22, r8
    250e:	68 0f       	add	r22, r24
    2510:	79 1f       	adc	r23, r25
    2512:	40 e0       	ldi	r20, 0x00	; 0
    2514:	52 e0       	ldi	r21, 0x02	; 2
    2516:	cf 01       	movw	r24, r30
    2518:	c2 96       	adiw	r24, 0x32	; 50
    251a:	0e 94 4b 02 	call	0x496	; 0x496 <mem_cpy>
    251e:	e8 81       	ld	r30, Y
    2520:	f9 81       	ldd	r31, Y+1	; 0x01
    2522:	14 82       	std	Z+4, r1	; 0x04
    2524:	fe 2c       	mov	r15, r14
    2526:	ee 24       	eor	r14, r14
    2528:	ff 0c       	add	r15, r15
    252a:	53 c0       	rjmp	.+166    	; 0x25d2 <f_write+0x2d2>
    252c:	4e 81       	ldd	r20, Y+6	; 0x06
    252e:	5f 81       	ldd	r21, Y+7	; 0x07
    2530:	68 85       	ldd	r22, Y+8	; 0x08
    2532:	79 85       	ldd	r23, Y+9	; 0x09
    2534:	8a 85       	ldd	r24, Y+10	; 0x0a
    2536:	9b 85       	ldd	r25, Y+11	; 0x0b
    2538:	ac 85       	ldd	r26, Y+12	; 0x0c
    253a:	bd 85       	ldd	r27, Y+13	; 0x0d
    253c:	48 17       	cp	r20, r24
    253e:	59 07       	cpc	r21, r25
    2540:	6a 07       	cpc	r22, r26
    2542:	7b 07       	cpc	r23, r27
    2544:	98 f0       	brcs	.+38     	; 0x256c <f_write+0x26c>
    2546:	40 e0       	ldi	r20, 0x00	; 0
    2548:	50 e0       	ldi	r21, 0x00	; 0
    254a:	ba 01       	movw	r22, r20
    254c:	c1 01       	movw	r24, r2
    254e:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
    2552:	88 23       	and	r24, r24
    2554:	29 f0       	breq	.+10     	; 0x2560 <f_write+0x260>
    2556:	8c 81       	ldd	r24, Y+4	; 0x04
    2558:	80 68       	ori	r24, 0x80	; 128
    255a:	8c 83       	std	Y+4, r24	; 0x04
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	6b c0       	rjmp	.+214    	; 0x2636 <f_write+0x336>
    2560:	e8 81       	ld	r30, Y
    2562:	f9 81       	ldd	r31, Y+1	; 0x01
    2564:	46 a6       	std	Z+46, r4	; 0x2e
    2566:	57 a6       	std	Z+47, r5	; 0x2f
    2568:	60 aa       	std	Z+48, r6	; 0x30
    256a:	71 aa       	std	Z+49, r7	; 0x31
    256c:	4e 8a       	std	Y+22, r4	; 0x16
    256e:	5f 8a       	std	Y+23, r5	; 0x17
    2570:	68 8e       	std	Y+24, r6	; 0x18
    2572:	79 8e       	std	Y+25, r7	; 0x19
    2574:	8e 81       	ldd	r24, Y+6	; 0x06
    2576:	9f 81       	ldd	r25, Y+7	; 0x07
    2578:	91 70       	andi	r25, 0x01	; 1
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	32 e0       	ldi	r19, 0x02	; 2
    257e:	79 01       	movw	r14, r18
    2580:	e8 1a       	sub	r14, r24
    2582:	f9 0a       	sbc	r15, r25
    2584:	ce 14       	cp	r12, r14
    2586:	df 04       	cpc	r13, r15
    2588:	08 f4       	brcc	.+2      	; 0x258c <f_write+0x28c>
    258a:	76 01       	movw	r14, r12
    258c:	4e 89       	ldd	r20, Y+22	; 0x16
    258e:	5f 89       	ldd	r21, Y+23	; 0x17
    2590:	68 8d       	ldd	r22, Y+24	; 0x18
    2592:	79 8d       	ldd	r23, Y+25	; 0x19
    2594:	88 81       	ld	r24, Y
    2596:	99 81       	ldd	r25, Y+1	; 0x01
    2598:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
    259c:	88 23       	and	r24, r24
    259e:	29 f0       	breq	.+10     	; 0x25aa <f_write+0x2aa>
    25a0:	8c 81       	ldd	r24, Y+4	; 0x04
    25a2:	80 68       	ori	r24, 0x80	; 128
    25a4:	8c 83       	std	Y+4, r24	; 0x04
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	46 c0       	rjmp	.+140    	; 0x2636 <f_write+0x336>
    25aa:	8e 81       	ldd	r24, Y+6	; 0x06
    25ac:	9f 81       	ldd	r25, Y+7	; 0x07
    25ae:	a8 85       	ldd	r26, Y+8	; 0x08
    25b0:	b9 85       	ldd	r27, Y+9	; 0x09
    25b2:	91 70       	andi	r25, 0x01	; 1
    25b4:	aa 27       	eor	r26, r26
    25b6:	bb 27       	eor	r27, r27
    25b8:	c2 96       	adiw	r24, 0x32	; 50
    25ba:	28 81       	ld	r18, Y
    25bc:	39 81       	ldd	r19, Y+1	; 0x01
    25be:	a7 01       	movw	r20, r14
    25c0:	b4 01       	movw	r22, r8
    25c2:	82 0f       	add	r24, r18
    25c4:	93 1f       	adc	r25, r19
    25c6:	0e 94 4b 02 	call	0x496	; 0x496 <mem_cpy>
    25ca:	e8 81       	ld	r30, Y
    25cc:	f9 81       	ldd	r31, Y+1	; 0x01
    25ce:	21 e0       	ldi	r18, 0x01	; 1
    25d0:	24 83       	std	Z+4, r18	; 0x04
    25d2:	8e 0c       	add	r8, r14
    25d4:	9f 1c       	adc	r9, r15
    25d6:	8e 81       	ldd	r24, Y+6	; 0x06
    25d8:	9f 81       	ldd	r25, Y+7	; 0x07
    25da:	a8 85       	ldd	r26, Y+8	; 0x08
    25dc:	b9 85       	ldd	r27, Y+9	; 0x09
    25de:	8e 0d       	add	r24, r14
    25e0:	9f 1d       	adc	r25, r15
    25e2:	a1 1d       	adc	r26, r1
    25e4:	b1 1d       	adc	r27, r1
    25e6:	8e 83       	std	Y+6, r24	; 0x06
    25e8:	9f 83       	std	Y+7, r25	; 0x07
    25ea:	a8 87       	std	Y+8, r26	; 0x08
    25ec:	b9 87       	std	Y+9, r27	; 0x09
    25ee:	f5 01       	movw	r30, r10
    25f0:	80 81       	ld	r24, Z
    25f2:	91 81       	ldd	r25, Z+1	; 0x01
    25f4:	8e 0d       	add	r24, r14
    25f6:	9f 1d       	adc	r25, r15
    25f8:	91 83       	std	Z+1, r25	; 0x01
    25fa:	80 83       	st	Z, r24
    25fc:	ce 18       	sub	r12, r14
    25fe:	df 08       	sbc	r13, r15
    2600:	09 f0       	breq	.+2      	; 0x2604 <f_write+0x304>
    2602:	b9 ce       	rjmp	.-654    	; 0x2376 <f_write+0x76>
    2604:	8e 81       	ldd	r24, Y+6	; 0x06
    2606:	9f 81       	ldd	r25, Y+7	; 0x07
    2608:	a8 85       	ldd	r26, Y+8	; 0x08
    260a:	b9 85       	ldd	r27, Y+9	; 0x09
    260c:	4a 85       	ldd	r20, Y+10	; 0x0a
    260e:	5b 85       	ldd	r21, Y+11	; 0x0b
    2610:	6c 85       	ldd	r22, Y+12	; 0x0c
    2612:	7d 85       	ldd	r23, Y+13	; 0x0d
    2614:	48 17       	cp	r20, r24
    2616:	59 07       	cpc	r21, r25
    2618:	6a 07       	cpc	r22, r26
    261a:	7b 07       	cpc	r23, r27
    261c:	20 f4       	brcc	.+8      	; 0x2626 <f_write+0x326>
    261e:	8a 87       	std	Y+10, r24	; 0x0a
    2620:	9b 87       	std	Y+11, r25	; 0x0b
    2622:	ac 87       	std	Y+12, r26	; 0x0c
    2624:	bd 87       	std	Y+13, r27	; 0x0d
    2626:	8c 81       	ldd	r24, Y+4	; 0x04
    2628:	80 62       	ori	r24, 0x20	; 32
    262a:	8c 83       	std	Y+4, r24	; 0x04
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	03 c0       	rjmp	.+6      	; 0x2636 <f_write+0x336>
    2630:	82 e0       	ldi	r24, 0x02	; 2
    2632:	01 c0       	rjmp	.+2      	; 0x2636 <f_write+0x336>
    2634:	87 e0       	ldi	r24, 0x07	; 7
    2636:	df 91       	pop	r29
    2638:	cf 91       	pop	r28
    263a:	1f 91       	pop	r17
    263c:	0f 91       	pop	r16
    263e:	ff 90       	pop	r15
    2640:	ef 90       	pop	r14
    2642:	df 90       	pop	r13
    2644:	cf 90       	pop	r12
    2646:	bf 90       	pop	r11
    2648:	af 90       	pop	r10
    264a:	9f 90       	pop	r9
    264c:	8f 90       	pop	r8
    264e:	7f 90       	pop	r7
    2650:	6f 90       	pop	r6
    2652:	5f 90       	pop	r5
    2654:	4f 90       	pop	r4
    2656:	3f 90       	pop	r3
    2658:	2f 90       	pop	r2
    265a:	08 95       	ret

0000265c <f_sync>:
    265c:	0f 93       	push	r16
    265e:	1f 93       	push	r17
    2660:	cf 93       	push	r28
    2662:	df 93       	push	r29
    2664:	ec 01       	movw	r28, r24
    2666:	6a 81       	ldd	r22, Y+2	; 0x02
    2668:	7b 81       	ldd	r23, Y+3	; 0x03
    266a:	88 81       	ld	r24, Y
    266c:	99 81       	ldd	r25, Y+1	; 0x01
    266e:	0e 94 ab 03 	call	0x756	; 0x756 <validate>
    2672:	81 11       	cpse	r24, r1
    2674:	37 c0       	rjmp	.+110    	; 0x26e4 <f_sync+0x88>
    2676:	9c 81       	ldd	r25, Y+4	; 0x04
    2678:	95 ff       	sbrs	r25, 5
    267a:	34 c0       	rjmp	.+104    	; 0x26e4 <f_sync+0x88>
    267c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    267e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2680:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2682:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2684:	88 81       	ld	r24, Y
    2686:	99 81       	ldd	r25, Y+1	; 0x01
    2688:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
    268c:	81 11       	cpse	r24, r1
    268e:	2a c0       	rjmp	.+84     	; 0x26e4 <f_sync+0x88>
    2690:	0e 8d       	ldd	r16, Y+30	; 0x1e
    2692:	1f 8d       	ldd	r17, Y+31	; 0x1f
    2694:	f8 01       	movw	r30, r16
    2696:	83 85       	ldd	r24, Z+11	; 0x0b
    2698:	80 62       	ori	r24, 0x20	; 32
    269a:	83 87       	std	Z+11, r24	; 0x0b
    269c:	8a 85       	ldd	r24, Y+10	; 0x0a
    269e:	9b 85       	ldd	r25, Y+11	; 0x0b
    26a0:	ac 85       	ldd	r26, Y+12	; 0x0c
    26a2:	bd 85       	ldd	r27, Y+13	; 0x0d
    26a4:	84 8f       	std	Z+28, r24	; 0x1c
    26a6:	95 8f       	std	Z+29, r25	; 0x1d
    26a8:	a6 8f       	std	Z+30, r26	; 0x1e
    26aa:	b7 8f       	std	Z+31, r27	; 0x1f
    26ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    26ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    26b0:	93 8f       	std	Z+27, r25	; 0x1b
    26b2:	82 8f       	std	Z+26, r24	; 0x1a
    26b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    26b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    26b8:	a8 89       	ldd	r26, Y+16	; 0x10
    26ba:	b9 89       	ldd	r27, Y+17	; 0x11
    26bc:	b5 8b       	std	Z+21, r27	; 0x15
    26be:	a4 8b       	std	Z+20, r26	; 0x14
    26c0:	0e 94 67 17 	call	0x2ece	; 0x2ece <get_fattime>
    26c4:	f8 01       	movw	r30, r16
    26c6:	66 8b       	std	Z+22, r22	; 0x16
    26c8:	77 8b       	std	Z+23, r23	; 0x17
    26ca:	80 8f       	std	Z+24, r24	; 0x18
    26cc:	91 8f       	std	Z+25, r25	; 0x19
    26ce:	8c 81       	ldd	r24, Y+4	; 0x04
    26d0:	8f 7d       	andi	r24, 0xDF	; 223
    26d2:	8c 83       	std	Y+4, r24	; 0x04
    26d4:	e8 81       	ld	r30, Y
    26d6:	f9 81       	ldd	r31, Y+1	; 0x01
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	84 83       	std	Z+4, r24	; 0x04
    26dc:	88 81       	ld	r24, Y
    26de:	99 81       	ldd	r25, Y+1	; 0x01
    26e0:	0e 94 ab 06 	call	0xd56	; 0xd56 <sync>
    26e4:	df 91       	pop	r29
    26e6:	cf 91       	pop	r28
    26e8:	1f 91       	pop	r17
    26ea:	0f 91       	pop	r16
    26ec:	08 95       	ret

000026ee <f_close>:
    26ee:	cf 93       	push	r28
    26f0:	df 93       	push	r29
    26f2:	ec 01       	movw	r28, r24
    26f4:	0e 94 2e 13 	call	0x265c	; 0x265c <f_sync>
    26f8:	81 11       	cpse	r24, r1
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <f_close+0x12>
    26fc:	19 82       	std	Y+1, r1	; 0x01
    26fe:	18 82       	st	Y, r1
    2700:	df 91       	pop	r29
    2702:	cf 91       	pop	r28
    2704:	08 95       	ret

00002706 <f_getcwd>:
#if _FS_RPATH >= 2
FRESULT f_getcwd (
	TCHAR *path,	/* Pointer to the directory path */
	UINT sz_path	/* Size of path */
)
{
    2706:	4f 92       	push	r4
    2708:	5f 92       	push	r5
    270a:	6f 92       	push	r6
    270c:	7f 92       	push	r7
    270e:	9f 92       	push	r9
    2710:	af 92       	push	r10
    2712:	bf 92       	push	r11
    2714:	cf 92       	push	r12
    2716:	df 92       	push	r13
    2718:	ef 92       	push	r14
    271a:	ff 92       	push	r15
    271c:	0f 93       	push	r16
    271e:	1f 93       	push	r17
    2720:	cf 93       	push	r28
    2722:	df 93       	push	r29
    2724:	cd b7       	in	r28, 0x3d	; 61
    2726:	de b7       	in	r29, 0x3e	; 62
    2728:	ea 97       	sbiw	r28, 0x3a	; 58
    272a:	0f b6       	in	r0, 0x3f	; 63
    272c:	f8 94       	cli
    272e:	de bf       	out	0x3e, r29	; 62
    2730:	0f be       	out	0x3f, r0	; 63
    2732:	cd bf       	out	0x3d, r28	; 61
    2734:	9a af       	std	Y+58, r25	; 0x3a
    2736:	89 af       	std	Y+57, r24	; 0x39
    2738:	5b 01       	movw	r10, r22
	TCHAR *tp;
	FILINFO fno;
	DEF_NAMEBUF;


	*path = 0;
    273a:	fc 01       	movw	r30, r24
    273c:	10 82       	st	Z, r1
	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
    273e:	40 e0       	ldi	r20, 0x00	; 0
    2740:	be 01       	movw	r22, r28
    2742:	6f 5f       	subi	r22, 0xFF	; 255
    2744:	7f 4f       	sbci	r23, 0xFF	; 255
    2746:	ce 01       	movw	r24, r28
    2748:	c9 96       	adiw	r24, 0x39	; 57
    274a:	0e 94 c5 03 	call	0x78a	; 0x78a <chk_mounted>
    274e:	98 2e       	mov	r9, r24
	if (res == FR_OK) {
    2750:	81 11       	cpse	r24, r1
    2752:	03 c1       	rjmp	.+518    	; 0x295a <f_getcwd+0x254>
		INIT_BUF(dj);
    2754:	ce 01       	movw	r24, r28
    2756:	8d 96       	adiw	r24, 0x2d	; 45
    2758:	9e 8b       	std	Y+22, r25	; 0x16
    275a:	8d 8b       	std	Y+21, r24	; 0x15
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
    275c:	e9 81       	ldd	r30, Y+1	; 0x01
    275e:	fa 81       	ldd	r31, Y+2	; 0x02
    2760:	46 88       	ldd	r4, Z+22	; 0x16
    2762:	57 88       	ldd	r5, Z+23	; 0x17
    2764:	60 8c       	ldd	r6, Z+24	; 0x18
    2766:	71 8c       	ldd	r7, Z+25	; 0x19
    2768:	4f 82       	std	Y+7, r4	; 0x07
    276a:	58 86       	std	Y+8, r5	; 0x08
    276c:	69 86       	std	Y+9, r6	; 0x09
    276e:	7a 86       	std	Y+10, r7	; 0x0a
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
    2770:	41 14       	cp	r4, r1
    2772:	51 04       	cpc	r5, r1
    2774:	61 04       	cpc	r6, r1
    2776:	71 04       	cpc	r7, r1
    2778:	09 f4       	brne	.+2      	; 0x277c <f_getcwd+0x76>
    277a:	e6 c0       	rjmp	.+460    	; 0x2948 <f_getcwd+0x242>
    277c:	65 01       	movw	r12, r10
    277e:	7e 01       	movw	r14, r28
    2780:	f0 e2       	ldi	r31, 0x20	; 32
    2782:	ef 0e       	add	r14, r31
    2784:	f1 1c       	adc	r15, r1
			for (n = 0; tp[n]; n++) ;
			if (i < n + 3) {
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
    2786:	0f e2       	ldi	r16, 0x2F	; 47
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
			res = dir_sdi(&dj, 1);			/* Get parent dir */
    2788:	61 e0       	ldi	r22, 0x01	; 1
    278a:	70 e0       	ldi	r23, 0x00	; 0
    278c:	ce 01       	movw	r24, r28
    278e:	01 96       	adiw	r24, 0x01	; 1
    2790:	0e 94 1b 08 	call	0x1036	; 0x1036 <dir_sdi>
			if (res != FR_OK) break;
    2794:	81 11       	cpse	r24, r1
    2796:	b2 c0       	rjmp	.+356    	; 0x28fc <f_getcwd+0x1f6>
			res = dir_read(&dj);
    2798:	ce 01       	movw	r24, r28
    279a:	01 96       	adiw	r24, 0x01	; 1
    279c:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <dir_read>
			if (res != FR_OK) break;
    27a0:	81 11       	cpse	r24, r1
    27a2:	ae c0       	rjmp	.+348    	; 0x2900 <f_getcwd+0x1fa>
			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
    27a4:	eb 89       	ldd	r30, Y+19	; 0x13
    27a6:	fc 89       	ldd	r31, Y+20	; 0x14
    27a8:	84 89       	ldd	r24, Z+20	; 0x14
    27aa:	95 89       	ldd	r25, Z+21	; 0x15
    27ac:	a0 e0       	ldi	r26, 0x00	; 0
    27ae:	b0 e0       	ldi	r27, 0x00	; 0
    27b0:	dc 01       	movw	r26, r24
    27b2:	99 27       	eor	r25, r25
    27b4:	88 27       	eor	r24, r24
    27b6:	42 8d       	ldd	r20, Z+26	; 0x1a
    27b8:	53 8d       	ldd	r21, Z+27	; 0x1b
    27ba:	60 e0       	ldi	r22, 0x00	; 0
    27bc:	70 e0       	ldi	r23, 0x00	; 0
    27be:	84 2b       	or	r24, r20
    27c0:	95 2b       	or	r25, r21
    27c2:	a6 2b       	or	r26, r22
    27c4:	b7 2b       	or	r27, r23
    27c6:	8f 83       	std	Y+7, r24	; 0x07
    27c8:	98 87       	std	Y+8, r25	; 0x08
    27ca:	a9 87       	std	Y+9, r26	; 0x09
    27cc:	ba 87       	std	Y+10, r27	; 0x0a
			res = dir_sdi(&dj, 0);
    27ce:	60 e0       	ldi	r22, 0x00	; 0
    27d0:	70 e0       	ldi	r23, 0x00	; 0
    27d2:	ce 01       	movw	r24, r28
    27d4:	01 96       	adiw	r24, 0x01	; 1
    27d6:	0e 94 1b 08 	call	0x1036	; 0x1036 <dir_sdi>
			if (res != FR_OK) break;
    27da:	81 11       	cpse	r24, r1
    27dc:	93 c0       	rjmp	.+294    	; 0x2904 <f_getcwd+0x1fe>
			do {							/* Find the entry links to the child dir */
				res = dir_read(&dj);
    27de:	ce 01       	movw	r24, r28
    27e0:	01 96       	adiw	r24, 0x01	; 1
    27e2:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <dir_read>
    27e6:	18 2f       	mov	r17, r24
				if (res != FR_OK) break;
    27e8:	81 11       	cpse	r24, r1
    27ea:	9a c0       	rjmp	.+308    	; 0x2920 <f_getcwd+0x21a>
				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
    27ec:	eb 89       	ldd	r30, Y+19	; 0x13
    27ee:	fc 89       	ldd	r31, Y+20	; 0x14
    27f0:	84 89       	ldd	r24, Z+20	; 0x14
    27f2:	95 89       	ldd	r25, Z+21	; 0x15
    27f4:	a0 e0       	ldi	r26, 0x00	; 0
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	dc 01       	movw	r26, r24
    27fa:	99 27       	eor	r25, r25
    27fc:	88 27       	eor	r24, r24
    27fe:	42 8d       	ldd	r20, Z+26	; 0x1a
    2800:	53 8d       	ldd	r21, Z+27	; 0x1b
    2802:	60 e0       	ldi	r22, 0x00	; 0
    2804:	70 e0       	ldi	r23, 0x00	; 0
    2806:	84 2b       	or	r24, r20
    2808:	95 2b       	or	r25, r21
    280a:	a6 2b       	or	r26, r22
    280c:	b7 2b       	or	r27, r23
    280e:	84 15       	cp	r24, r4
    2810:	95 05       	cpc	r25, r5
    2812:	a6 05       	cpc	r26, r6
    2814:	b7 05       	cpc	r27, r7
    2816:	09 f4       	brne	.+2      	; 0x281a <f_getcwd+0x114>
    2818:	87 c0       	rjmp	.+270    	; 0x2928 <f_getcwd+0x222>
				res = dir_next(&dj, 0);	
    281a:	60 e0       	ldi	r22, 0x00	; 0
    281c:	70 e0       	ldi	r23, 0x00	; 0
    281e:	ce 01       	movw	r24, r28
    2820:	01 96       	adiw	r24, 0x01	; 1
    2822:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <dir_next>
    2826:	18 2f       	mov	r17, r24
			} while (res == FR_OK);
    2828:	88 23       	and	r24, r24
    282a:	c9 f2       	breq	.-78     	; 0x27de <f_getcwd+0xd8>
    282c:	79 c0       	rjmp	.+242    	; 0x2920 <f_getcwd+0x21a>
    282e:	de 01       	movw	r26, r28
    2830:	91 96       	adiw	r26, 0x21	; 33
			fno.lfsize = i;
#endif
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
    2832:	e0 e0       	ldi	r30, 0x00	; 0
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	01 c0       	rjmp	.+2      	; 0x283a <f_getcwd+0x134>
    2838:	f9 01       	movw	r30, r18
    283a:	9f 01       	movw	r18, r30
    283c:	2f 5f       	subi	r18, 0xFF	; 255
    283e:	3f 4f       	sbci	r19, 0xFF	; 255
    2840:	8d 91       	ld	r24, X+
    2842:	81 11       	cpse	r24, r1
    2844:	f9 cf       	rjmp	.-14     	; 0x2838 <f_getcwd+0x132>
			if (i < n + 3) {
    2846:	cf 01       	movw	r24, r30
    2848:	04 96       	adiw	r24, 0x04	; 4
    284a:	c8 16       	cp	r12, r24
    284c:	d9 06       	cpc	r13, r25
    284e:	08 f4       	brcc	.+2      	; 0x2852 <f_getcwd+0x14c>
    2850:	5b c0       	rjmp	.+182    	; 0x2908 <f_getcwd+0x202>
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
    2852:	21 15       	cp	r18, r1
    2854:	31 05       	cpc	r19, r1
    2856:	a1 f0       	breq	.+40     	; 0x2880 <f_getcwd+0x17a>
    2858:	3a 96       	adiw	r30, 0x0a	; 10
    285a:	87 e1       	ldi	r24, 0x17	; 23
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	8c 0f       	add	r24, r28
    2860:	9d 1f       	adc	r25, r29
    2862:	e8 0f       	add	r30, r24
    2864:	f9 1f       	adc	r31, r25
    2866:	c6 01       	movw	r24, r12
    2868:	01 97       	sbiw	r24, 0x01	; 1
    286a:	42 91       	ld	r20, -Z
    286c:	a9 ad       	ldd	r26, Y+57	; 0x39
    286e:	ba ad       	ldd	r27, Y+58	; 0x3a
    2870:	a8 0f       	add	r26, r24
    2872:	b9 1f       	adc	r27, r25
    2874:	4c 93       	st	X, r20
    2876:	ee 15       	cp	r30, r14
    2878:	ff 05       	cpc	r31, r15
    287a:	b1 f7       	brne	.-20     	; 0x2868 <f_getcwd+0x162>
    287c:	c2 1a       	sub	r12, r18
    287e:	d3 0a       	sbc	r13, r19
			path[--i] = '/';
    2880:	91 e0       	ldi	r25, 0x01	; 1
    2882:	c9 1a       	sub	r12, r25
    2884:	d1 08       	sbc	r13, r1
    2886:	e9 ad       	ldd	r30, Y+57	; 0x39
    2888:	fa ad       	ldd	r31, Y+58	; 0x3a
    288a:	ec 0d       	add	r30, r12
    288c:	fd 1d       	adc	r31, r13
    288e:	00 83       	st	Z, r16
	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
    2890:	4f 80       	ldd	r4, Y+7	; 0x07
    2892:	58 84       	ldd	r5, Y+8	; 0x08
    2894:	69 84       	ldd	r6, Y+9	; 0x09
    2896:	7a 84       	ldd	r7, Y+10	; 0x0a
    2898:	41 14       	cp	r4, r1
    289a:	51 04       	cpc	r5, r1
    289c:	61 04       	cpc	r6, r1
    289e:	71 04       	cpc	r7, r1
    28a0:	09 f0       	breq	.+2      	; 0x28a4 <f_getcwd+0x19e>
    28a2:	72 cf       	rjmp	.-284    	; 0x2788 <f_getcwd+0x82>
    28a4:	1d c0       	rjmp	.+58     	; 0x28e0 <f_getcwd+0x1da>
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
    28a6:	a9 ad       	ldd	r26, Y+57	; 0x39
    28a8:	ba ad       	ldd	r27, Y+58	; 0x3a
				res = dir_read(&dj);
				if (res != FR_OK) break;
				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
				res = dir_next(&dj, 0);	
			} while (res == FR_OK);
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
    28aa:	68 94       	set
    28ac:	99 24       	eor	r9, r9
    28ae:	91 f8       	bld	r9, 1
    28b0:	15 c0       	rjmp	.+42     	; 0x28dc <f_getcwd+0x1d6>
		tp = path;
		if (res == FR_OK) {
			*tp++ = '0' + CurrVol;			/* Put drive number */
			*tp++ = ':';
			if (i == sz_path) {				/* Root-dir */
				*tp++ = '/';
    28b2:	df 01       	movw	r26, r30
    28b4:	13 96       	adiw	r26, 0x03	; 3
    28b6:	8f e2       	ldi	r24, 0x2F	; 47
    28b8:	82 83       	std	Z+2, r24	; 0x02
    28ba:	10 c0       	rjmp	.+32     	; 0x28dc <f_getcwd+0x1d6>
			} else {						/* Sub-dir */
				do		/* Add stacked path str */
					*tp++ = path[i++];
    28bc:	11 96       	adiw	r26, 0x01	; 1
    28be:	e9 ad       	ldd	r30, Y+57	; 0x39
    28c0:	fa ad       	ldd	r31, Y+58	; 0x3a
    28c2:	ec 0d       	add	r30, r12
    28c4:	fd 1d       	adc	r31, r13
    28c6:	80 81       	ld	r24, Z
    28c8:	fd 01       	movw	r30, r26
    28ca:	31 97       	sbiw	r30, 0x01	; 1
    28cc:	80 83       	st	Z, r24
    28ce:	f6 01       	movw	r30, r12
    28d0:	31 96       	adiw	r30, 0x01	; 1
    28d2:	6f 01       	movw	r12, r30
				while (i < sz_path);
    28d4:	ea 15       	cp	r30, r10
    28d6:	fb 05       	cpc	r31, r11
    28d8:	88 f3       	brcs	.-30     	; 0x28bc <f_getcwd+0x1b6>
    28da:	91 2e       	mov	r9, r17
			}
		}
		*tp = 0;
    28dc:	1c 92       	st	X, r1
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
    28de:	3d c0       	rjmp	.+122    	; 0x295a <f_getcwd+0x254>
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
    28e0:	e9 ad       	ldd	r30, Y+57	; 0x39
    28e2:	fa ad       	ldd	r31, Y+58	; 0x3a
		if (res == FR_OK) {
			*tp++ = '0' + CurrVol;			/* Put drive number */
    28e4:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
    28e8:	80 5d       	subi	r24, 0xD0	; 208
    28ea:	80 83       	st	Z, r24
			*tp++ = ':';
    28ec:	8a e3       	ldi	r24, 0x3A	; 58
    28ee:	81 83       	std	Z+1, r24	; 0x01
			if (i == sz_path) {				/* Root-dir */
    28f0:	ac 14       	cp	r10, r12
    28f2:	bd 04       	cpc	r11, r13
    28f4:	f1 f2       	breq	.-68     	; 0x28b2 <f_getcwd+0x1ac>
			path[--i] = '/';
		}
		tp = path;
		if (res == FR_OK) {
			*tp++ = '0' + CurrVol;			/* Put drive number */
			*tp++ = ':';
    28f6:	df 01       	movw	r26, r30
    28f8:	12 96       	adiw	r26, 0x02	; 2
    28fa:	e0 cf       	rjmp	.-64     	; 0x28bc <f_getcwd+0x1b6>
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
			res = dir_sdi(&dj, 1);			/* Get parent dir */
    28fc:	98 2e       	mov	r9, r24
    28fe:	0d c0       	rjmp	.+26     	; 0x291a <f_getcwd+0x214>
			if (res != FR_OK) break;
			res = dir_read(&dj);
    2900:	98 2e       	mov	r9, r24
    2902:	0b c0       	rjmp	.+22     	; 0x291a <f_getcwd+0x214>
			if (res != FR_OK) break;
			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
			res = dir_sdi(&dj, 0);
    2904:	98 2e       	mov	r9, r24
    2906:	09 c0       	rjmp	.+18     	; 0x291a <f_getcwd+0x214>
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
			if (i < n + 3) {
				res = FR_NOT_ENOUGH_CORE; break;
    2908:	0f 2e       	mov	r0, r31
    290a:	f1 e1       	ldi	r31, 0x11	; 17
    290c:	9f 2e       	mov	r9, r31
    290e:	f0 2d       	mov	r31, r0
    2910:	04 c0       	rjmp	.+8      	; 0x291a <f_getcwd+0x214>
    2912:	0f 2e       	mov	r0, r31
    2914:	f1 e1       	ldi	r31, 0x11	; 17
    2916:	9f 2e       	mov	r9, r31
    2918:	f0 2d       	mov	r31, r0
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
    291a:	a9 ad       	ldd	r26, Y+57	; 0x39
    291c:	ba ad       	ldd	r27, Y+58	; 0x3a
    291e:	de cf       	rjmp	.-68     	; 0x28dc <f_getcwd+0x1d6>
				res = dir_read(&dj);
				if (res != FR_OK) break;
				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
				res = dir_next(&dj, 0);	
			} while (res == FR_OK);
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
    2920:	14 30       	cpi	r17, 0x04	; 4
    2922:	09 f2       	breq	.-126    	; 0x28a6 <f_getcwd+0x1a0>
    2924:	91 2e       	mov	r9, r17
    2926:	f9 cf       	rjmp	.-14     	; 0x291a <f_getcwd+0x214>
			if (res != FR_OK) break;
#if _USE_LFN
			fno.lfname = path;
			fno.lfsize = i;
#endif
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
    2928:	be 01       	movw	r22, r28
    292a:	69 5e       	subi	r22, 0xE9	; 233
    292c:	7f 4f       	sbci	r23, 0xFF	; 255
    292e:	ce 01       	movw	r24, r28
    2930:	01 96       	adiw	r24, 0x01	; 1
    2932:	0e 94 77 02 	call	0x4ee	; 0x4ee <get_fileinfo>
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
    2936:	88 a1       	ldd	r24, Y+32	; 0x20
    2938:	81 11       	cpse	r24, r1
    293a:	79 cf       	rjmp	.-270    	; 0x282e <f_getcwd+0x128>
			if (i < n + 3) {
    293c:	f3 e0       	ldi	r31, 0x03	; 3
    293e:	cf 16       	cp	r12, r31
    2940:	d1 04       	cpc	r13, r1
    2942:	08 f0       	brcs	.+2      	; 0x2946 <f_getcwd+0x240>
    2944:	9d cf       	rjmp	.-198    	; 0x2880 <f_getcwd+0x17a>
    2946:	e5 cf       	rjmp	.-54     	; 0x2912 <f_getcwd+0x20c>
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
    2948:	e9 ad       	ldd	r30, Y+57	; 0x39
    294a:	fa ad       	ldd	r31, Y+58	; 0x3a
		if (res == FR_OK) {
			*tp++ = '0' + CurrVol;			/* Put drive number */
    294c:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
    2950:	80 5d       	subi	r24, 0xD0	; 208
    2952:	80 83       	st	Z, r24
			*tp++ = ':';
    2954:	8a e3       	ldi	r24, 0x3A	; 58
    2956:	81 83       	std	Z+1, r24	; 0x01
    2958:	ac cf       	rjmp	.-168    	; 0x28b2 <f_getcwd+0x1ac>
		*tp = 0;
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    295a:	89 2d       	mov	r24, r9
    295c:	ea 96       	adiw	r28, 0x3a	; 58
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	de bf       	out	0x3e, r29	; 62
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	cd bf       	out	0x3d, r28	; 61
    2968:	df 91       	pop	r29
    296a:	cf 91       	pop	r28
    296c:	1f 91       	pop	r17
    296e:	0f 91       	pop	r16
    2970:	ff 90       	pop	r15
    2972:	ef 90       	pop	r14
    2974:	df 90       	pop	r13
    2976:	cf 90       	pop	r12
    2978:	bf 90       	pop	r11
    297a:	af 90       	pop	r10
    297c:	9f 90       	pop	r9
    297e:	7f 90       	pop	r7
    2980:	6f 90       	pop	r6
    2982:	5f 90       	pop	r5
    2984:	4f 90       	pop	r4
    2986:	08 95       	ret

00002988 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    2988:	4f 92       	push	r4
    298a:	5f 92       	push	r5
    298c:	6f 92       	push	r6
    298e:	7f 92       	push	r7
    2990:	8f 92       	push	r8
    2992:	9f 92       	push	r9
    2994:	af 92       	push	r10
    2996:	bf 92       	push	r11
    2998:	cf 92       	push	r12
    299a:	df 92       	push	r13
    299c:	ef 92       	push	r14
    299e:	ff 92       	push	r15
    29a0:	0f 93       	push	r16
    29a2:	1f 93       	push	r17
    29a4:	cf 93       	push	r28
    29a6:	df 93       	push	r29
    29a8:	00 d0       	rcall	.+0      	; 0x29aa <f_lseek+0x22>
    29aa:	00 d0       	rcall	.+0      	; 0x29ac <f_lseek+0x24>
    29ac:	00 d0       	rcall	.+0      	; 0x29ae <f_lseek+0x26>
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
    29b2:	9e 83       	std	Y+6, r25	; 0x06
    29b4:	8d 83       	std	Y+5, r24	; 0x05
    29b6:	6a 01       	movw	r12, r20
    29b8:	7b 01       	movw	r14, r22
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    29ba:	dc 01       	movw	r26, r24
    29bc:	12 96       	adiw	r26, 0x02	; 2
    29be:	6d 91       	ld	r22, X+
    29c0:	7c 91       	ld	r23, X
    29c2:	13 97       	sbiw	r26, 0x03	; 3
    29c4:	8d 91       	ld	r24, X+
    29c6:	9c 91       	ld	r25, X
    29c8:	0e 94 ab 03 	call	0x756	; 0x756 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    29cc:	81 11       	cpse	r24, r1
    29ce:	9d c1       	rjmp	.+826    	; 0x2d0a <f_lseek+0x382>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    29d0:	ed 81       	ldd	r30, Y+5	; 0x05
    29d2:	fe 81       	ldd	r31, Y+6	; 0x06
    29d4:	84 81       	ldd	r24, Z+4	; 0x04
    29d6:	88 23       	and	r24, r24
    29d8:	0c f4       	brge	.+2      	; 0x29dc <f_lseek+0x54>
    29da:	92 c1       	rjmp	.+804    	; 0x2d00 <f_lseek+0x378>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    29dc:	42 85       	ldd	r20, Z+10	; 0x0a
    29de:	53 85       	ldd	r21, Z+11	; 0x0b
    29e0:	64 85       	ldd	r22, Z+12	; 0x0c
    29e2:	75 85       	ldd	r23, Z+13	; 0x0d
    29e4:	4c 15       	cp	r20, r12
    29e6:	5d 05       	cpc	r21, r13
    29e8:	6e 05       	cpc	r22, r14
    29ea:	7f 05       	cpc	r23, r15
    29ec:	20 f4       	brcc	.+8      	; 0x29f6 <f_lseek+0x6e>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    29ee:	81 fd       	sbrc	r24, 1
    29f0:	02 c0       	rjmp	.+4      	; 0x29f6 <f_lseek+0x6e>
#endif
			) ofs = fp->fsize;
    29f2:	6a 01       	movw	r12, r20
    29f4:	7b 01       	movw	r14, r22

		ifptr = fp->fptr;
    29f6:	ad 81       	ldd	r26, Y+5	; 0x05
    29f8:	be 81       	ldd	r27, Y+6	; 0x06
    29fa:	16 96       	adiw	r26, 0x06	; 6
    29fc:	4d 90       	ld	r4, X+
    29fe:	5d 90       	ld	r5, X+
    2a00:	6d 90       	ld	r6, X+
    2a02:	7c 90       	ld	r7, X
    2a04:	19 97       	sbiw	r26, 0x09	; 9
		fp->fptr = nsect = 0;
    2a06:	fd 01       	movw	r30, r26
    2a08:	16 82       	std	Z+6, r1	; 0x06
    2a0a:	17 82       	std	Z+7, r1	; 0x07
    2a0c:	10 86       	std	Z+8, r1	; 0x08
    2a0e:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    2a10:	c1 14       	cp	r12, r1
    2a12:	d1 04       	cpc	r13, r1
    2a14:	e1 04       	cpc	r14, r1
    2a16:	f1 04       	cpc	r15, r1
    2a18:	09 f4       	brne	.+2      	; 0x2a1c <f_lseek+0x94>
    2a1a:	74 c1       	rjmp	.+744    	; 0x2d04 <f_lseek+0x37c>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    2a1c:	00 81       	ld	r16, Z
    2a1e:	11 81       	ldd	r17, Z+1	; 0x01
    2a20:	d8 01       	movw	r26, r16
    2a22:	12 96       	adiw	r26, 0x02	; 2
    2a24:	8c 90       	ld	r8, X
    2a26:	91 2c       	mov	r9, r1
    2a28:	a1 2c       	mov	r10, r1
    2a2a:	b1 2c       	mov	r11, r1
    2a2c:	07 2e       	mov	r0, r23
    2a2e:	79 e0       	ldi	r23, 0x09	; 9
    2a30:	88 0c       	add	r8, r8
    2a32:	99 1c       	adc	r9, r9
    2a34:	aa 1c       	adc	r10, r10
    2a36:	bb 1c       	adc	r11, r11
    2a38:	7a 95       	dec	r23
    2a3a:	d1 f7       	brne	.-12     	; 0x2a30 <f_lseek+0xa8>
    2a3c:	70 2d       	mov	r23, r0
			if (ifptr > 0 &&
    2a3e:	41 14       	cp	r4, r1
    2a40:	51 04       	cpc	r5, r1
    2a42:	61 04       	cpc	r6, r1
    2a44:	71 04       	cpc	r7, r1
    2a46:	09 f4       	brne	.+2      	; 0x2a4a <f_lseek+0xc2>
    2a48:	40 c0       	rjmp	.+128    	; 0x2aca <f_lseek+0x142>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    2a4a:	b1 e0       	ldi	r27, 0x01	; 1
    2a4c:	4b 1a       	sub	r4, r27
    2a4e:	51 08       	sbc	r5, r1
    2a50:	61 08       	sbc	r6, r1
    2a52:	71 08       	sbc	r7, r1

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    2a54:	c7 01       	movw	r24, r14
    2a56:	b6 01       	movw	r22, r12
    2a58:	61 50       	subi	r22, 0x01	; 1
    2a5a:	71 09       	sbc	r23, r1
    2a5c:	81 09       	sbc	r24, r1
    2a5e:	91 09       	sbc	r25, r1
    2a60:	a5 01       	movw	r20, r10
    2a62:	94 01       	movw	r18, r8
    2a64:	0e 94 18 38 	call	0x7030	; 0x7030 <__udivmodsi4>
    2a68:	29 83       	std	Y+1, r18	; 0x01
    2a6a:	3a 83       	std	Y+2, r19	; 0x02
    2a6c:	4b 83       	std	Y+3, r20	; 0x03
    2a6e:	5c 83       	std	Y+4, r21	; 0x04
    2a70:	c3 01       	movw	r24, r6
    2a72:	b2 01       	movw	r22, r4
    2a74:	a5 01       	movw	r20, r10
    2a76:	94 01       	movw	r18, r8
    2a78:	0e 94 18 38 	call	0x7030	; 0x7030 <__udivmodsi4>
    2a7c:	89 81       	ldd	r24, Y+1	; 0x01
    2a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a80:	ab 81       	ldd	r26, Y+3	; 0x03
    2a82:	bc 81       	ldd	r27, Y+4	; 0x04
    2a84:	82 17       	cp	r24, r18
    2a86:	93 07       	cpc	r25, r19
    2a88:	a4 07       	cpc	r26, r20
    2a8a:	b5 07       	cpc	r27, r21
    2a8c:	f0 f0       	brcs	.+60     	; 0x2aca <f_lseek+0x142>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    2a8e:	88 27       	eor	r24, r24
    2a90:	99 27       	eor	r25, r25
    2a92:	dc 01       	movw	r26, r24
    2a94:	88 19       	sub	r24, r8
    2a96:	99 09       	sbc	r25, r9
    2a98:	aa 09       	sbc	r26, r10
    2a9a:	bb 09       	sbc	r27, r11
    2a9c:	48 22       	and	r4, r24
    2a9e:	59 22       	and	r5, r25
    2aa0:	6a 22       	and	r6, r26
    2aa2:	7b 22       	and	r7, r27
    2aa4:	ad 81       	ldd	r26, Y+5	; 0x05
    2aa6:	be 81       	ldd	r27, Y+6	; 0x06
    2aa8:	16 96       	adiw	r26, 0x06	; 6
    2aaa:	4d 92       	st	X+, r4
    2aac:	5d 92       	st	X+, r5
    2aae:	6d 92       	st	X+, r6
    2ab0:	7c 92       	st	X, r7
    2ab2:	19 97       	sbiw	r26, 0x09	; 9
				ofs -= fp->fptr;
    2ab4:	c4 18       	sub	r12, r4
    2ab6:	d5 08       	sbc	r13, r5
    2ab8:	e6 08       	sbc	r14, r6
    2aba:	f7 08       	sbc	r15, r7
				clst = fp->curr_clust;
    2abc:	52 96       	adiw	r26, 0x12	; 18
    2abe:	4d 91       	ld	r20, X+
    2ac0:	5d 91       	ld	r21, X+
    2ac2:	6d 91       	ld	r22, X+
    2ac4:	7c 91       	ld	r23, X
    2ac6:	55 97       	sbiw	r26, 0x15	; 21
    2ac8:	3d c0       	rjmp	.+122    	; 0x2b44 <f_lseek+0x1bc>
			} else {									/* When seek to back cluster, */
				clst = fp->org_clust;					/* start from the first cluster */
    2aca:	ed 81       	ldd	r30, Y+5	; 0x05
    2acc:	fe 81       	ldd	r31, Y+6	; 0x06
    2ace:	46 85       	ldd	r20, Z+14	; 0x0e
    2ad0:	57 85       	ldd	r21, Z+15	; 0x0f
    2ad2:	60 89       	ldd	r22, Z+16	; 0x10
    2ad4:	71 89       	ldd	r23, Z+17	; 0x11
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    2ad6:	41 15       	cp	r20, r1
    2ad8:	51 05       	cpc	r21, r1
    2ada:	61 05       	cpc	r22, r1
    2adc:	71 05       	cpc	r23, r1
    2ade:	61 f5       	brne	.+88     	; 0x2b38 <f_lseek+0x1b0>
					clst = create_chain(fp->fs, 0);
    2ae0:	40 e0       	ldi	r20, 0x00	; 0
    2ae2:	50 e0       	ldi	r21, 0x00	; 0
    2ae4:	ba 01       	movw	r22, r20
    2ae6:	c8 01       	movw	r24, r16
    2ae8:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <create_chain>
    2aec:	ab 01       	movw	r20, r22
    2aee:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2af0:	41 30       	cpi	r20, 0x01	; 1
    2af2:	51 05       	cpc	r21, r1
    2af4:	61 05       	cpc	r22, r1
    2af6:	71 05       	cpc	r23, r1
    2af8:	51 f4       	brne	.+20     	; 0x2b0e <f_lseek+0x186>
    2afa:	ad 81       	ldd	r26, Y+5	; 0x05
    2afc:	be 81       	ldd	r27, Y+6	; 0x06
    2afe:	14 96       	adiw	r26, 0x04	; 4
    2b00:	8c 91       	ld	r24, X
    2b02:	14 97       	sbiw	r26, 0x04	; 4
    2b04:	80 68       	ori	r24, 0x80	; 128
    2b06:	14 96       	adiw	r26, 0x04	; 4
    2b08:	8c 93       	st	X, r24
    2b0a:	82 e0       	ldi	r24, 0x02	; 2
    2b0c:	fe c0       	rjmp	.+508    	; 0x2d0a <f_lseek+0x382>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2b0e:	4f 3f       	cpi	r20, 0xFF	; 255
    2b10:	bf ef       	ldi	r27, 0xFF	; 255
    2b12:	5b 07       	cpc	r21, r27
    2b14:	6b 07       	cpc	r22, r27
    2b16:	7b 07       	cpc	r23, r27
    2b18:	39 f4       	brne	.+14     	; 0x2b28 <f_lseek+0x1a0>
    2b1a:	ed 81       	ldd	r30, Y+5	; 0x05
    2b1c:	fe 81       	ldd	r31, Y+6	; 0x06
    2b1e:	84 81       	ldd	r24, Z+4	; 0x04
    2b20:	80 68       	ori	r24, 0x80	; 128
    2b22:	84 83       	std	Z+4, r24	; 0x04
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	f1 c0       	rjmp	.+482    	; 0x2d0a <f_lseek+0x382>
					fp->org_clust = clst;
    2b28:	ad 81       	ldd	r26, Y+5	; 0x05
    2b2a:	be 81       	ldd	r27, Y+6	; 0x06
    2b2c:	1e 96       	adiw	r26, 0x0e	; 14
    2b2e:	4d 93       	st	X+, r20
    2b30:	5d 93       	st	X+, r21
    2b32:	6d 93       	st	X+, r22
    2b34:	7c 93       	st	X, r23
    2b36:	51 97       	sbiw	r26, 0x11	; 17
				}
#endif
				fp->curr_clust = clst;
    2b38:	ed 81       	ldd	r30, Y+5	; 0x05
    2b3a:	fe 81       	ldd	r31, Y+6	; 0x06
    2b3c:	42 8b       	std	Z+18, r20	; 0x12
    2b3e:	53 8b       	std	Z+19, r21	; 0x13
    2b40:	64 8b       	std	Z+20, r22	; 0x14
    2b42:	75 8b       	std	Z+21, r23	; 0x15
			}
			if (clst != 0) {
    2b44:	41 15       	cp	r20, r1
    2b46:	51 05       	cpc	r21, r1
    2b48:	61 05       	cpc	r22, r1
    2b4a:	71 05       	cpc	r23, r1
    2b4c:	09 f4       	brne	.+2      	; 0x2b50 <f_lseek+0x1c8>
    2b4e:	a1 c0       	rjmp	.+322    	; 0x2c92 <f_lseek+0x30a>
				while (ofs > bcs) {						/* Cluster following loop */
    2b50:	8c 14       	cp	r8, r12
    2b52:	9d 04       	cpc	r9, r13
    2b54:	ae 04       	cpc	r10, r14
    2b56:	bf 04       	cpc	r11, r15
    2b58:	08 f0       	brcs	.+2      	; 0x2b5c <f_lseek+0x1d4>
    2b5a:	63 c0       	rjmp	.+198    	; 0x2c22 <f_lseek+0x29a>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    2b5c:	ad 81       	ldd	r26, Y+5	; 0x05
    2b5e:	be 81       	ldd	r27, Y+6	; 0x06
    2b60:	14 96       	adiw	r26, 0x04	; 4
    2b62:	8c 91       	ld	r24, X
    2b64:	14 97       	sbiw	r26, 0x04	; 4
    2b66:	81 ff       	sbrs	r24, 1
    2b68:	0c c0       	rjmp	.+24     	; 0x2b82 <f_lseek+0x1fa>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    2b6a:	8d 91       	ld	r24, X+
    2b6c:	9c 91       	ld	r25, X
    2b6e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <create_chain>
    2b72:	ab 01       	movw	r20, r22
    2b74:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    2b76:	41 15       	cp	r20, r1
    2b78:	51 05       	cpc	r21, r1
    2b7a:	61 05       	cpc	r22, r1
    2b7c:	71 05       	cpc	r23, r1
    2b7e:	49 f4       	brne	.+18     	; 0x2b92 <f_lseek+0x20a>
    2b80:	4e c0       	rjmp	.+156    	; 0x2c1e <f_lseek+0x296>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    2b82:	ad 81       	ldd	r26, Y+5	; 0x05
    2b84:	be 81       	ldd	r27, Y+6	; 0x06
    2b86:	8d 91       	ld	r24, X+
    2b88:	9c 91       	ld	r25, X
    2b8a:	0e 94 38 07 	call	0xe70	; 0xe70 <get_fat>
    2b8e:	ab 01       	movw	r20, r22
    2b90:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2b92:	4f 3f       	cpi	r20, 0xFF	; 255
    2b94:	bf ef       	ldi	r27, 0xFF	; 255
    2b96:	5b 07       	cpc	r21, r27
    2b98:	6b 07       	cpc	r22, r27
    2b9a:	7b 07       	cpc	r23, r27
    2b9c:	39 f4       	brne	.+14     	; 0x2bac <f_lseek+0x224>
    2b9e:	ed 81       	ldd	r30, Y+5	; 0x05
    2ba0:	fe 81       	ldd	r31, Y+6	; 0x06
    2ba2:	84 81       	ldd	r24, Z+4	; 0x04
    2ba4:	80 68       	ori	r24, 0x80	; 128
    2ba6:	84 83       	std	Z+4, r24	; 0x04
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	af c0       	rjmp	.+350    	; 0x2d0a <f_lseek+0x382>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    2bac:	42 30       	cpi	r20, 0x02	; 2
    2bae:	51 05       	cpc	r21, r1
    2bb0:	61 05       	cpc	r22, r1
    2bb2:	71 05       	cpc	r23, r1
    2bb4:	68 f0       	brcs	.+26     	; 0x2bd0 <f_lseek+0x248>
    2bb6:	ad 81       	ldd	r26, Y+5	; 0x05
    2bb8:	be 81       	ldd	r27, Y+6	; 0x06
    2bba:	ed 91       	ld	r30, X+
    2bbc:	fc 91       	ld	r31, X
    2bbe:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bc0:	93 8d       	ldd	r25, Z+27	; 0x1b
    2bc2:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2bc4:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2bc6:	48 17       	cp	r20, r24
    2bc8:	59 07       	cpc	r21, r25
    2bca:	6a 07       	cpc	r22, r26
    2bcc:	7b 07       	cpc	r23, r27
    2bce:	38 f0       	brcs	.+14     	; 0x2bde <f_lseek+0x256>
    2bd0:	ed 81       	ldd	r30, Y+5	; 0x05
    2bd2:	fe 81       	ldd	r31, Y+6	; 0x06
    2bd4:	84 81       	ldd	r24, Z+4	; 0x04
    2bd6:	80 68       	ori	r24, 0x80	; 128
    2bd8:	84 83       	std	Z+4, r24	; 0x04
    2bda:	82 e0       	ldi	r24, 0x02	; 2
    2bdc:	96 c0       	rjmp	.+300    	; 0x2d0a <f_lseek+0x382>
					fp->curr_clust = clst;
    2bde:	ad 81       	ldd	r26, Y+5	; 0x05
    2be0:	be 81       	ldd	r27, Y+6	; 0x06
    2be2:	52 96       	adiw	r26, 0x12	; 18
    2be4:	4d 93       	st	X+, r20
    2be6:	5d 93       	st	X+, r21
    2be8:	6d 93       	st	X+, r22
    2bea:	7c 93       	st	X, r23
    2bec:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    2bee:	fd 01       	movw	r30, r26
    2bf0:	86 81       	ldd	r24, Z+6	; 0x06
    2bf2:	97 81       	ldd	r25, Z+7	; 0x07
    2bf4:	a0 85       	ldd	r26, Z+8	; 0x08
    2bf6:	b1 85       	ldd	r27, Z+9	; 0x09
    2bf8:	88 0d       	add	r24, r8
    2bfa:	99 1d       	adc	r25, r9
    2bfc:	aa 1d       	adc	r26, r10
    2bfe:	bb 1d       	adc	r27, r11
    2c00:	86 83       	std	Z+6, r24	; 0x06
    2c02:	97 83       	std	Z+7, r25	; 0x07
    2c04:	a0 87       	std	Z+8, r26	; 0x08
    2c06:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    2c08:	c8 18       	sub	r12, r8
    2c0a:	d9 08       	sbc	r13, r9
    2c0c:	ea 08       	sbc	r14, r10
    2c0e:	fb 08       	sbc	r15, r11
				}
#endif
				fp->curr_clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    2c10:	8c 14       	cp	r8, r12
    2c12:	9d 04       	cpc	r9, r13
    2c14:	ae 04       	cpc	r10, r14
    2c16:	bf 04       	cpc	r11, r15
    2c18:	08 f4       	brcc	.+2      	; 0x2c1c <f_lseek+0x294>
    2c1a:	a0 cf       	rjmp	.-192    	; 0x2b5c <f_lseek+0x1d4>
    2c1c:	02 c0       	rjmp	.+4      	; 0x2c22 <f_lseek+0x29a>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
    2c1e:	75 01       	movw	r14, r10
    2c20:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->curr_clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    2c22:	ed 81       	ldd	r30, Y+5	; 0x05
    2c24:	fe 81       	ldd	r31, Y+6	; 0x06
    2c26:	86 81       	ldd	r24, Z+6	; 0x06
    2c28:	97 81       	ldd	r25, Z+7	; 0x07
    2c2a:	a0 85       	ldd	r26, Z+8	; 0x08
    2c2c:	b1 85       	ldd	r27, Z+9	; 0x09
    2c2e:	8c 0d       	add	r24, r12
    2c30:	9d 1d       	adc	r25, r13
    2c32:	ae 1d       	adc	r26, r14
    2c34:	bf 1d       	adc	r27, r15
    2c36:	86 83       	std	Z+6, r24	; 0x06
    2c38:	97 83       	std	Z+7, r25	; 0x07
    2c3a:	a0 87       	std	Z+8, r26	; 0x08
    2c3c:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    2c3e:	d7 01       	movw	r26, r14
    2c40:	c6 01       	movw	r24, r12
    2c42:	91 70       	andi	r25, 0x01	; 1
    2c44:	aa 27       	eor	r26, r26
    2c46:	bb 27       	eor	r27, r27
    2c48:	89 2b       	or	r24, r25
    2c4a:	8a 2b       	or	r24, r26
    2c4c:	8b 2b       	or	r24, r27
    2c4e:	29 f1       	breq	.+74     	; 0x2c9a <f_lseek+0x312>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    2c50:	80 81       	ld	r24, Z
    2c52:	91 81       	ldd	r25, Z+1	; 0x01
    2c54:	0e 94 10 07 	call	0xe20	; 0xe20 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    2c58:	61 15       	cp	r22, r1
    2c5a:	71 05       	cpc	r23, r1
    2c5c:	81 05       	cpc	r24, r1
    2c5e:	91 05       	cpc	r25, r1
    2c60:	51 f4       	brne	.+20     	; 0x2c76 <f_lseek+0x2ee>
    2c62:	ad 81       	ldd	r26, Y+5	; 0x05
    2c64:	be 81       	ldd	r27, Y+6	; 0x06
    2c66:	14 96       	adiw	r26, 0x04	; 4
    2c68:	8c 91       	ld	r24, X
    2c6a:	14 97       	sbiw	r26, 0x04	; 4
    2c6c:	80 68       	ori	r24, 0x80	; 128
    2c6e:	14 96       	adiw	r26, 0x04	; 4
    2c70:	8c 93       	st	X, r24
    2c72:	82 e0       	ldi	r24, 0x02	; 2
    2c74:	4a c0       	rjmp	.+148    	; 0x2d0a <f_lseek+0x382>
					nsect += ofs / SS(fp->fs);
    2c76:	0b 2e       	mov	r0, r27
    2c78:	b9 e0       	ldi	r27, 0x09	; 9
    2c7a:	f6 94       	lsr	r15
    2c7c:	e7 94       	ror	r14
    2c7e:	d7 94       	ror	r13
    2c80:	c7 94       	ror	r12
    2c82:	ba 95       	dec	r27
    2c84:	d1 f7       	brne	.-12     	; 0x2c7a <f_lseek+0x2f2>
    2c86:	b0 2d       	mov	r27, r0
    2c88:	c6 0e       	add	r12, r22
    2c8a:	d7 1e       	adc	r13, r23
    2c8c:	e8 1e       	adc	r14, r24
    2c8e:	f9 1e       	adc	r15, r25
    2c90:	07 c0       	rjmp	.+14     	; 0x2ca0 <f_lseek+0x318>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    2c92:	c1 2c       	mov	r12, r1
    2c94:	d1 2c       	mov	r13, r1
    2c96:	76 01       	movw	r14, r12
    2c98:	03 c0       	rjmp	.+6      	; 0x2ca0 <f_lseek+0x318>
    2c9a:	c1 2c       	mov	r12, r1
    2c9c:	d1 2c       	mov	r13, r1
    2c9e:	76 01       	movw	r14, r12
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    2ca0:	ed 81       	ldd	r30, Y+5	; 0x05
    2ca2:	fe 81       	ldd	r31, Y+6	; 0x06
    2ca4:	86 81       	ldd	r24, Z+6	; 0x06
    2ca6:	97 81       	ldd	r25, Z+7	; 0x07
    2ca8:	a0 85       	ldd	r26, Z+8	; 0x08
    2caa:	b1 85       	ldd	r27, Z+9	; 0x09
    2cac:	ac 01       	movw	r20, r24
    2cae:	bd 01       	movw	r22, r26
    2cb0:	51 70       	andi	r21, 0x01	; 1
    2cb2:	66 27       	eor	r22, r22
    2cb4:	77 27       	eor	r23, r23
    2cb6:	45 2b       	or	r20, r21
    2cb8:	46 2b       	or	r20, r22
    2cba:	47 2b       	or	r20, r23
    2cbc:	69 f0       	breq	.+26     	; 0x2cd8 <f_lseek+0x350>
    2cbe:	46 89       	ldd	r20, Z+22	; 0x16
    2cc0:	57 89       	ldd	r21, Z+23	; 0x17
    2cc2:	60 8d       	ldd	r22, Z+24	; 0x18
    2cc4:	71 8d       	ldd	r23, Z+25	; 0x19
    2cc6:	c4 16       	cp	r12, r20
    2cc8:	d5 06       	cpc	r13, r21
    2cca:	e6 06       	cpc	r14, r22
    2ccc:	f7 06       	cpc	r15, r23
    2cce:	21 f0       	breq	.+8      	; 0x2cd8 <f_lseek+0x350>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    2cd0:	c6 8a       	std	Z+22, r12	; 0x16
    2cd2:	d7 8a       	std	Z+23, r13	; 0x17
    2cd4:	e0 8e       	std	Z+24, r14	; 0x18
    2cd6:	f1 8e       	std	Z+25, r15	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set change flag if the file size is extended */
    2cd8:	ed 81       	ldd	r30, Y+5	; 0x05
    2cda:	fe 81       	ldd	r31, Y+6	; 0x06
    2cdc:	42 85       	ldd	r20, Z+10	; 0x0a
    2cde:	53 85       	ldd	r21, Z+11	; 0x0b
    2ce0:	64 85       	ldd	r22, Z+12	; 0x0c
    2ce2:	75 85       	ldd	r23, Z+13	; 0x0d
    2ce4:	48 17       	cp	r20, r24
    2ce6:	59 07       	cpc	r21, r25
    2ce8:	6a 07       	cpc	r22, r26
    2cea:	7b 07       	cpc	r23, r27
    2cec:	68 f4       	brcc	.+26     	; 0x2d08 <f_lseek+0x380>
			fp->fsize = fp->fptr;
    2cee:	82 87       	std	Z+10, r24	; 0x0a
    2cf0:	93 87       	std	Z+11, r25	; 0x0b
    2cf2:	a4 87       	std	Z+12, r26	; 0x0c
    2cf4:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    2cf6:	84 81       	ldd	r24, Z+4	; 0x04
    2cf8:	80 62       	ori	r24, 0x20	; 32
    2cfa:	84 83       	std	Z+4, r24	; 0x04
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	05 c0       	rjmp	.+10     	; 0x2d0a <f_lseek+0x382>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    2d00:	82 e0       	ldi	r24, 0x02	; 2
    2d02:	03 c0       	rjmp	.+6      	; 0x2d0a <f_lseek+0x382>
			fp->flag |= FA__WRITTEN;
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
    2d04:	80 e0       	ldi	r24, 0x00	; 0
    2d06:	01 c0       	rjmp	.+2      	; 0x2d0a <f_lseek+0x382>
    2d08:	80 e0       	ldi	r24, 0x00	; 0
}
    2d0a:	26 96       	adiw	r28, 0x06	; 6
    2d0c:	0f b6       	in	r0, 0x3f	; 63
    2d0e:	f8 94       	cli
    2d10:	de bf       	out	0x3e, r29	; 62
    2d12:	0f be       	out	0x3f, r0	; 63
    2d14:	cd bf       	out	0x3d, r28	; 61
    2d16:	df 91       	pop	r29
    2d18:	cf 91       	pop	r28
    2d1a:	1f 91       	pop	r17
    2d1c:	0f 91       	pop	r16
    2d1e:	ff 90       	pop	r15
    2d20:	ef 90       	pop	r14
    2d22:	df 90       	pop	r13
    2d24:	cf 90       	pop	r12
    2d26:	bf 90       	pop	r11
    2d28:	af 90       	pop	r10
    2d2a:	9f 90       	pop	r9
    2d2c:	8f 90       	pop	r8
    2d2e:	7f 90       	pop	r7
    2d30:	6f 90       	pop	r6
    2d32:	5f 90       	pop	r5
    2d34:	4f 90       	pop	r4
    2d36:	08 95       	ret

00002d38 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
    2d38:	0f 93       	push	r16
    2d3a:	1f 93       	push	r17
    2d3c:	cf 93       	push	r28
    2d3e:	df 93       	push	r29
    2d40:	cd b7       	in	r28, 0x3d	; 61
    2d42:	de b7       	in	r29, 0x3e	; 62
    2d44:	2e 97       	sbiw	r28, 0x0e	; 14
    2d46:	0f b6       	in	r0, 0x3f	; 63
    2d48:	f8 94       	cli
    2d4a:	de bf       	out	0x3e, r29	; 62
    2d4c:	0f be       	out	0x3f, r0	; 63
    2d4e:	cd bf       	out	0x3d, r28	; 61
    2d50:	8c 01       	movw	r16, r24
    2d52:	7e 87       	std	Y+14, r23	; 0x0e
    2d54:	6d 87       	std	Y+13, r22	; 0x0d
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
    2d56:	40 e0       	ldi	r20, 0x00	; 0
    2d58:	bc 01       	movw	r22, r24
    2d5a:	ce 01       	movw	r24, r28
    2d5c:	0d 96       	adiw	r24, 0x0d	; 13
    2d5e:	0e 94 c5 03 	call	0x78a	; 0x78a <chk_mounted>
	if (res == FR_OK) {
    2d62:	81 11       	cpse	r24, r1
    2d64:	43 c0       	rjmp	.+134    	; 0x2dec <f_opendir+0xb4>
		INIT_BUF(*dj);
    2d66:	ce 01       	movw	r24, r28
    2d68:	01 96       	adiw	r24, 0x01	; 1
    2d6a:	d8 01       	movw	r26, r16
    2d6c:	55 96       	adiw	r26, 0x15	; 21
    2d6e:	9c 93       	st	X, r25
    2d70:	8e 93       	st	-X, r24
    2d72:	54 97       	sbiw	r26, 0x14	; 20
		res = follow_path(dj, path);			/* Follow the path to the directory */
    2d74:	6d 85       	ldd	r22, Y+13	; 0x0d
    2d76:	7e 85       	ldd	r23, Y+14	; 0x0e
    2d78:	c8 01       	movw	r24, r16
    2d7a:	0e 94 22 0c 	call	0x1844	; 0x1844 <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
    2d7e:	81 11       	cpse	r24, r1
    2d80:	1f c0       	rjmp	.+62     	; 0x2dc0 <f_opendir+0x88>
			if (dj->dir) {						/* It is not the root dir */
    2d82:	d8 01       	movw	r26, r16
    2d84:	52 96       	adiw	r26, 0x12	; 18
    2d86:	ed 91       	ld	r30, X+
    2d88:	fc 91       	ld	r31, X
    2d8a:	53 97       	sbiw	r26, 0x13	; 19
    2d8c:	30 97       	sbiw	r30, 0x00	; 0
    2d8e:	f1 f0       	breq	.+60     	; 0x2dcc <f_opendir+0x94>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    2d90:	83 85       	ldd	r24, Z+11	; 0x0b
    2d92:	84 ff       	sbrs	r24, 4
    2d94:	19 c0       	rjmp	.+50     	; 0x2dc8 <f_opendir+0x90>
					dj->sclust = LD_CLUST(dj->dir);
    2d96:	84 89       	ldd	r24, Z+20	; 0x14
    2d98:	95 89       	ldd	r25, Z+21	; 0x15
    2d9a:	a0 e0       	ldi	r26, 0x00	; 0
    2d9c:	b0 e0       	ldi	r27, 0x00	; 0
    2d9e:	dc 01       	movw	r26, r24
    2da0:	99 27       	eor	r25, r25
    2da2:	88 27       	eor	r24, r24
    2da4:	42 8d       	ldd	r20, Z+26	; 0x1a
    2da6:	53 8d       	ldd	r21, Z+27	; 0x1b
    2da8:	60 e0       	ldi	r22, 0x00	; 0
    2daa:	70 e0       	ldi	r23, 0x00	; 0
    2dac:	84 2b       	or	r24, r20
    2dae:	95 2b       	or	r25, r21
    2db0:	a6 2b       	or	r26, r22
    2db2:	b7 2b       	or	r27, r23
    2db4:	f8 01       	movw	r30, r16
    2db6:	86 83       	std	Z+6, r24	; 0x06
    2db8:	97 83       	std	Z+7, r25	; 0x07
    2dba:	a0 87       	std	Z+8, r26	; 0x08
    2dbc:	b1 87       	std	Z+9, r27	; 0x09
    2dbe:	06 c0       	rjmp	.+12     	; 0x2dcc <f_opendir+0x94>
			if (res == FR_OK) {
				dj->id = dj->fs->id;
				res = dir_sdi(dj, 0);			/* Rewind dir */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    2dc0:	84 30       	cpi	r24, 0x04	; 4
    2dc2:	a1 f4       	brne	.+40     	; 0x2dec <f_opendir+0xb4>
    2dc4:	85 e0       	ldi	r24, 0x05	; 5
    2dc6:	12 c0       	rjmp	.+36     	; 0x2dec <f_opendir+0xb4>
		if (res == FR_OK) {						/* Follow completed */
			if (dj->dir) {						/* It is not the root dir */
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
					dj->sclust = LD_CLUST(dj->dir);
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
    2dc8:	85 e0       	ldi	r24, 0x05	; 5
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj->fs, res);
    2dca:	10 c0       	rjmp	.+32     	; 0x2dec <f_opendir+0xb4>
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    2dcc:	d8 01       	movw	r26, r16
    2dce:	ed 91       	ld	r30, X+
    2dd0:	fc 91       	ld	r31, X
    2dd2:	11 97       	sbiw	r26, 0x01	; 1
    2dd4:	86 81       	ldd	r24, Z+6	; 0x06
    2dd6:	97 81       	ldd	r25, Z+7	; 0x07
    2dd8:	13 96       	adiw	r26, 0x03	; 3
    2dda:	9c 93       	st	X, r25
    2ddc:	8e 93       	st	-X, r24
    2dde:	12 97       	sbiw	r26, 0x02	; 2
				res = dir_sdi(dj, 0);			/* Rewind dir */
    2de0:	60 e0       	ldi	r22, 0x00	; 0
    2de2:	70 e0       	ldi	r23, 0x00	; 0
    2de4:	c8 01       	movw	r24, r16
    2de6:	0e 94 1b 08 	call	0x1036	; 0x1036 <dir_sdi>
    2dea:	ea cf       	rjmp	.-44     	; 0x2dc0 <f_opendir+0x88>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj->fs, res);
}
    2dec:	2e 96       	adiw	r28, 0x0e	; 14
    2dee:	0f b6       	in	r0, 0x3f	; 63
    2df0:	f8 94       	cli
    2df2:	de bf       	out	0x3e, r29	; 62
    2df4:	0f be       	out	0x3f, r0	; 63
    2df6:	cd bf       	out	0x3d, r28	; 61
    2df8:	df 91       	pop	r29
    2dfa:	cf 91       	pop	r28
    2dfc:	1f 91       	pop	r17
    2dfe:	0f 91       	pop	r16
    2e00:	08 95       	ret

00002e02 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    2e02:	cf 92       	push	r12
    2e04:	df 92       	push	r13
    2e06:	ff 92       	push	r15
    2e08:	0f 93       	push	r16
    2e0a:	1f 93       	push	r17
    2e0c:	cf 93       	push	r28
    2e0e:	df 93       	push	r29
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
    2e14:	2c 97       	sbiw	r28, 0x0c	; 12
    2e16:	0f b6       	in	r0, 0x3f	; 63
    2e18:	f8 94       	cli
    2e1a:	de bf       	out	0x3e, r29	; 62
    2e1c:	0f be       	out	0x3f, r0	; 63
    2e1e:	cd bf       	out	0x3d, r28	; 61
    2e20:	8c 01       	movw	r16, r24
    2e22:	6b 01       	movw	r12, r22
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    2e24:	fc 01       	movw	r30, r24
    2e26:	62 81       	ldd	r22, Z+2	; 0x02
    2e28:	73 81       	ldd	r23, Z+3	; 0x03
    2e2a:	80 81       	ld	r24, Z
    2e2c:	91 81       	ldd	r25, Z+1	; 0x01
    2e2e:	0e 94 ab 03 	call	0x756	; 0x756 <validate>
    2e32:	f8 2e       	mov	r15, r24
	if (res == FR_OK) {
    2e34:	81 11       	cpse	r24, r1
    2e36:	30 c0       	rjmp	.+96     	; 0x2e98 <f_readdir+0x96>
		if (!fno) {
    2e38:	c1 14       	cp	r12, r1
    2e3a:	d1 04       	cpc	r13, r1
    2e3c:	39 f4       	brne	.+14     	; 0x2e4c <f_readdir+0x4a>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
    2e3e:	60 e0       	ldi	r22, 0x00	; 0
    2e40:	70 e0       	ldi	r23, 0x00	; 0
    2e42:	c8 01       	movw	r24, r16
    2e44:	0e 94 1b 08 	call	0x1036	; 0x1036 <dir_sdi>
    2e48:	f8 2e       	mov	r15, r24
    2e4a:	26 c0       	rjmp	.+76     	; 0x2e98 <f_readdir+0x96>
		} else {
			INIT_BUF(*dj);
    2e4c:	ce 01       	movw	r24, r28
    2e4e:	01 96       	adiw	r24, 0x01	; 1
    2e50:	f8 01       	movw	r30, r16
    2e52:	95 8b       	std	Z+21, r25	; 0x15
    2e54:	84 8b       	std	Z+20, r24	; 0x14
			res = dir_read(dj);				/* Read an directory item */
    2e56:	c8 01       	movw	r24, r16
    2e58:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <dir_read>
			if (res == FR_NO_FILE) {		/* Reached end of dir */
    2e5c:	84 30       	cpi	r24, 0x04	; 4
    2e5e:	31 f4       	brne	.+12     	; 0x2e6c <f_readdir+0x6a>
				dj->sect = 0;
    2e60:	f8 01       	movw	r30, r16
    2e62:	16 86       	std	Z+14, r1	; 0x0e
    2e64:	17 86       	std	Z+15, r1	; 0x0f
    2e66:	10 8a       	std	Z+16, r1	; 0x10
    2e68:	11 8a       	std	Z+17, r1	; 0x11
    2e6a:	02 c0       	rjmp	.+4      	; 0x2e70 <f_readdir+0x6e>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    2e6c:	81 11       	cpse	r24, r1
    2e6e:	11 c0       	rjmp	.+34     	; 0x2e92 <f_readdir+0x90>
				get_fileinfo(dj, fno);		/* Get the object information */
    2e70:	b6 01       	movw	r22, r12
    2e72:	c8 01       	movw	r24, r16
    2e74:	0e 94 77 02 	call	0x4ee	; 0x4ee <get_fileinfo>
				res = dir_next(dj, 0);		/* Increment index for next */
    2e78:	60 e0       	ldi	r22, 0x00	; 0
    2e7a:	70 e0       	ldi	r23, 0x00	; 0
    2e7c:	c8 01       	movw	r24, r16
    2e7e:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <dir_next>
				if (res == FR_NO_FILE) {
    2e82:	84 30       	cpi	r24, 0x04	; 4
    2e84:	41 f4       	brne	.+16     	; 0x2e96 <f_readdir+0x94>
					dj->sect = 0;
    2e86:	f8 01       	movw	r30, r16
    2e88:	16 86       	std	Z+14, r1	; 0x0e
    2e8a:	17 86       	std	Z+15, r1	; 0x0f
    2e8c:	10 8a       	std	Z+16, r1	; 0x10
    2e8e:	11 8a       	std	Z+17, r1	; 0x11
    2e90:	03 c0       	rjmp	.+6      	; 0x2e98 <f_readdir+0x96>
	if (res == FR_OK) {
		if (!fno) {
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
		} else {
			INIT_BUF(*dj);
			res = dir_read(dj);				/* Read an directory item */
    2e92:	f8 2e       	mov	r15, r24
    2e94:	01 c0       	rjmp	.+2      	; 0x2e98 <f_readdir+0x96>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, 0);		/* Increment index for next */
    2e96:	f8 2e       	mov	r15, r24
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
    2e98:	8f 2d       	mov	r24, r15
    2e9a:	2c 96       	adiw	r28, 0x0c	; 12
    2e9c:	0f b6       	in	r0, 0x3f	; 63
    2e9e:	f8 94       	cli
    2ea0:	de bf       	out	0x3e, r29	; 62
    2ea2:	0f be       	out	0x3f, r0	; 63
    2ea4:	cd bf       	out	0x3d, r28	; 61
    2ea6:	df 91       	pop	r29
    2ea8:	cf 91       	pop	r28
    2eaa:	1f 91       	pop	r17
    2eac:	0f 91       	pop	r16
    2eae:	ff 90       	pop	r15
    2eb0:	df 90       	pop	r13
    2eb2:	cf 90       	pop	r12
    2eb4:	08 95       	ret

00002eb6 <rx_handler>:
	return res;
}

void createSoundList(FIL *file,unsigned char *num){
	(*num) = file->fsize / sizeof(struct sound_entry); 
}
    2eb6:	8e 3f       	cpi	r24, 0xFE	; 254
    2eb8:	49 f0       	breq	.+18     	; 0x2ecc <rx_handler+0x16>
    2eba:	68 2f       	mov	r22, r24
    2ebc:	87 ea       	ldi	r24, 0xA7	; 167
    2ebe:	94 e0       	ldi	r25, 0x04	; 4
    2ec0:	0e 94 28 02 	call	0x450	; 0x450 <bufferAddToEnd>
    2ec4:	81 11       	cpse	r24, r1
    2ec6:	02 c0       	rjmp	.+4      	; 0x2ecc <rx_handler+0x16>
    2ec8:	0e 94 e0 35 	call	0x6bc0	; 0x6bc0 <uartFlushReceiveBuffer>
    2ecc:	08 95       	ret

00002ece <get_fattime>:
    2ece:	60 e0       	ldi	r22, 0x00	; 0
    2ed0:	70 e0       	ldi	r23, 0x00	; 0
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	08 95       	ret

00002ed6 <configTimers>:
    2ed6:	83 b7       	in	r24, 0x33	; 51
    2ed8:	82 60       	ori	r24, 0x02	; 2
    2eda:	83 bf       	out	0x33, r24	; 51
    2edc:	83 b7       	in	r24, 0x33	; 51
    2ede:	81 60       	ori	r24, 0x01	; 1
    2ee0:	83 bf       	out	0x33, r24	; 51
    2ee2:	89 b7       	in	r24, 0x39	; 57
    2ee4:	81 60       	ori	r24, 0x01	; 1
    2ee6:	89 bf       	out	0x39, r24	; 57
    2ee8:	8c e9       	ldi	r24, 0x9C	; 156
    2eea:	83 bd       	out	0x23, r24	; 35
    2eec:	85 b5       	in	r24, 0x25	; 37
    2eee:	88 60       	ori	r24, 0x08	; 8
    2ef0:	85 bd       	out	0x25, r24	; 37
    2ef2:	89 b7       	in	r24, 0x39	; 57
    2ef4:	80 68       	ori	r24, 0x80	; 128
    2ef6:	89 bf       	out	0x39, r24	; 57
    2ef8:	85 b5       	in	r24, 0x25	; 37
    2efa:	87 60       	ori	r24, 0x07	; 7
    2efc:	85 bd       	out	0x25, r24	; 37
    2efe:	08 95       	ret

00002f00 <setInputs>:
    2f00:	d8 98       	cbi	0x1b, 0	; 27
    2f02:	d0 98       	cbi	0x1a, 0	; 26
    2f04:	b8 98       	cbi	0x17, 0	; 23
    2f06:	b9 98       	cbi	0x17, 1	; 23
    2f08:	ba 98       	cbi	0x17, 2	; 23
    2f0a:	bb 98       	cbi	0x17, 3	; 23
    2f0c:	c0 9a       	sbi	0x18, 0	; 24
    2f0e:	c1 9a       	sbi	0x18, 1	; 24
    2f10:	c2 9a       	sbi	0x18, 2	; 24
    2f12:	c3 9a       	sbi	0x18, 3	; 24
    2f14:	a6 98       	cbi	0x14, 6	; 20
    2f16:	a7 98       	cbi	0x14, 7	; 20
    2f18:	d1 98       	cbi	0x1a, 1	; 26
    2f1a:	d2 98       	cbi	0x1a, 2	; 26
    2f1c:	d3 98       	cbi	0x1a, 3	; 26
    2f1e:	ae 9a       	sbi	0x15, 6	; 21
    2f20:	af 9a       	sbi	0x15, 7	; 21
    2f22:	d9 9a       	sbi	0x1b, 1	; 27
    2f24:	df 9a       	sbi	0x1b, 7	; 27
    2f26:	db 9a       	sbi	0x1b, 3	; 27
    2f28:	8f 98       	cbi	0x11, 7	; 17
    2f2a:	97 9a       	sbi	0x12, 7	; 18
    2f2c:	08 95       	ret

00002f2e <readInputs>:
    2f2e:	cf 93       	push	r28
    2f30:	df 93       	push	r29
    2f32:	ec 01       	movw	r28, r24
    2f34:	80 e0       	ldi	r24, 0x00	; 0
    2f36:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <a2dConvert8bit>
    2f3a:	8a 87       	std	Y+10, r24	; 0x0a
    2f3c:	26 b3       	in	r18, 0x16	; 22
    2f3e:	91 e0       	ldi	r25, 0x01	; 1
    2f40:	29 27       	eor	r18, r25
    2f42:	21 70       	andi	r18, 0x01	; 1
    2f44:	28 83       	st	Y, r18
    2f46:	26 b3       	in	r18, 0x16	; 22
    2f48:	26 95       	lsr	r18
    2f4a:	21 70       	andi	r18, 0x01	; 1
    2f4c:	29 27       	eor	r18, r25
    2f4e:	29 83       	std	Y+1, r18	; 0x01
    2f50:	26 b3       	in	r18, 0x16	; 22
    2f52:	22 fb       	bst	r18, 2
    2f54:	22 27       	eor	r18, r18
    2f56:	20 f9       	bld	r18, 0
    2f58:	29 27       	eor	r18, r25
    2f5a:	2a 83       	std	Y+2, r18	; 0x02
    2f5c:	26 b3       	in	r18, 0x16	; 22
    2f5e:	23 fb       	bst	r18, 3
    2f60:	22 27       	eor	r18, r18
    2f62:	20 f9       	bld	r18, 0
    2f64:	29 27       	eor	r18, r25
    2f66:	2b 83       	std	Y+3, r18	; 0x03
    2f68:	23 b3       	in	r18, 0x13	; 19
    2f6a:	26 fb       	bst	r18, 6
    2f6c:	22 27       	eor	r18, r18
    2f6e:	20 f9       	bld	r18, 0
    2f70:	29 27       	eor	r18, r25
    2f72:	2c 83       	std	Y+4, r18	; 0x04
    2f74:	23 b3       	in	r18, 0x13	; 19
    2f76:	20 95       	com	r18
    2f78:	22 1f       	adc	r18, r18
    2f7a:	22 27       	eor	r18, r18
    2f7c:	22 1f       	adc	r18, r18
    2f7e:	2d 83       	std	Y+5, r18	; 0x05
    2f80:	29 b3       	in	r18, 0x19	; 25
    2f82:	26 95       	lsr	r18
    2f84:	21 70       	andi	r18, 0x01	; 1
    2f86:	29 27       	eor	r18, r25
    2f88:	2e 83       	std	Y+6, r18	; 0x06
    2f8a:	29 b3       	in	r18, 0x19	; 25
    2f8c:	22 fb       	bst	r18, 2
    2f8e:	22 27       	eor	r18, r18
    2f90:	20 f9       	bld	r18, 0
    2f92:	29 27       	eor	r18, r25
    2f94:	2f 83       	std	Y+7, r18	; 0x07
    2f96:	29 b3       	in	r18, 0x19	; 25
    2f98:	23 fb       	bst	r18, 3
    2f9a:	22 27       	eor	r18, r18
    2f9c:	20 f9       	bld	r18, 0
    2f9e:	92 27       	eor	r25, r18
    2fa0:	98 87       	std	Y+8, r25	; 0x08
    2fa2:	90 b3       	in	r25, 0x10	; 16
    2fa4:	90 95       	com	r25
    2fa6:	99 1f       	adc	r25, r25
    2fa8:	99 27       	eor	r25, r25
    2faa:	99 1f       	adc	r25, r25
    2fac:	99 87       	std	Y+9, r25	; 0x09
    2fae:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <inp_old.2575+0x9>
    2fb2:	92 17       	cp	r25, r18
    2fb4:	21 f0       	breq	.+8      	; 0x2fbe <readInputs+0x90>
    2fb6:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <inp_old.2575+0x9>
    2fba:	89 e0       	ldi	r24, 0x09	; 9
    2fbc:	23 c0       	rjmp	.+70     	; 0x3004 <readInputs+0xd6>
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	29 2f       	mov	r18, r25
    2fc2:	09 2e       	mov	r0, r25
    2fc4:	00 0c       	add	r0, r0
    2fc6:	33 0b       	sbc	r19, r19
    2fc8:	fe 01       	movw	r30, r28
    2fca:	e2 0f       	add	r30, r18
    2fcc:	f3 1f       	adc	r31, r19
    2fce:	40 81       	ld	r20, Z
    2fd0:	f9 01       	movw	r30, r18
    2fd2:	ef 57       	subi	r30, 0x7F	; 127
    2fd4:	fe 4f       	sbci	r31, 0xFE	; 254
    2fd6:	50 81       	ld	r21, Z
    2fd8:	45 17       	cp	r20, r21
    2fda:	31 f0       	breq	.+12     	; 0x2fe8 <readInputs+0xba>
    2fdc:	f9 01       	movw	r30, r18
    2fde:	ef 57       	subi	r30, 0x7F	; 127
    2fe0:	fe 4f       	sbci	r31, 0xFE	; 254
    2fe2:	40 83       	st	Z, r20
    2fe4:	41 30       	cpi	r20, 0x01	; 1
    2fe6:	59 f0       	breq	.+22     	; 0x2ffe <readInputs+0xd0>
    2fe8:	9f 5f       	subi	r25, 0xFF	; 255
    2fea:	9a 30       	cpi	r25, 0x0A	; 10
    2fec:	4c f3       	brlt	.-46     	; 0x2fc0 <readInputs+0x92>
    2fee:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <inp_old.2575+0xa>
    2ff2:	89 17       	cp	r24, r25
    2ff4:	31 f0       	breq	.+12     	; 0x3002 <readInputs+0xd4>
    2ff6:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <inp_old.2575+0xa>
    2ffa:	8a e0       	ldi	r24, 0x0A	; 10
    2ffc:	03 c0       	rjmp	.+6      	; 0x3004 <readInputs+0xd6>
    2ffe:	89 2f       	mov	r24, r25
    3000:	01 c0       	rjmp	.+2      	; 0x3004 <readInputs+0xd6>
    3002:	8f ef       	ldi	r24, 0xFF	; 255
    3004:	df 91       	pop	r29
    3006:	cf 91       	pop	r28
    3008:	08 95       	ret

0000300a <addMillis>:
    300a:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <timer0_millis>
    300e:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <timer0_millis+0x1>
    3012:	a0 91 9f 01 	lds	r26, 0x019F	; 0x80019f <timer0_millis+0x2>
    3016:	b0 91 a0 01 	lds	r27, 0x01A0	; 0x8001a0 <timer0_millis+0x3>
    301a:	30 91 9c 01 	lds	r19, 0x019C	; 0x80019c <timer0_fract>
    301e:	23 e0       	ldi	r18, 0x03	; 3
    3020:	23 0f       	add	r18, r19
    3022:	2d 37       	cpi	r18, 0x7D	; 125
    3024:	20 f4       	brcc	.+8      	; 0x302e <addMillis+0x24>
    3026:	01 96       	adiw	r24, 0x01	; 1
    3028:	a1 1d       	adc	r26, r1
    302a:	b1 1d       	adc	r27, r1
    302c:	05 c0       	rjmp	.+10     	; 0x3038 <addMillis+0x2e>
    302e:	26 e8       	ldi	r18, 0x86	; 134
    3030:	23 0f       	add	r18, r19
    3032:	02 96       	adiw	r24, 0x02	; 2
    3034:	a1 1d       	adc	r26, r1
    3036:	b1 1d       	adc	r27, r1
    3038:	20 93 9c 01 	sts	0x019C, r18	; 0x80019c <timer0_fract>
    303c:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <timer0_millis>
    3040:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <timer0_millis+0x1>
    3044:	a0 93 9f 01 	sts	0x019F, r26	; 0x80019f <timer0_millis+0x2>
    3048:	b0 93 a0 01 	sts	0x01A0, r27	; 0x8001a0 <timer0_millis+0x3>
    304c:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <timer0_overflow_count>
    3050:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <timer0_overflow_count+0x1>
    3054:	a0 91 a3 01 	lds	r26, 0x01A3	; 0x8001a3 <timer0_overflow_count+0x2>
    3058:	b0 91 a4 01 	lds	r27, 0x01A4	; 0x8001a4 <timer0_overflow_count+0x3>
    305c:	01 96       	adiw	r24, 0x01	; 1
    305e:	a1 1d       	adc	r26, r1
    3060:	b1 1d       	adc	r27, r1
    3062:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <timer0_overflow_count>
    3066:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <timer0_overflow_count+0x1>
    306a:	a0 93 a3 01 	sts	0x01A3, r26	; 0x8001a3 <timer0_overflow_count+0x2>
    306e:	b0 93 a4 01 	sts	0x01A4, r27	; 0x8001a4 <timer0_overflow_count+0x3>
    3072:	08 95       	ret

00003074 <getMicros>:
    3074:	3f b7       	in	r19, 0x3f	; 63
    3076:	f8 94       	cli
    3078:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <timer0_overflow_count>
    307c:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <timer0_overflow_count+0x1>
    3080:	a0 91 a3 01 	lds	r26, 0x01A3	; 0x8001a3 <timer0_overflow_count+0x2>
    3084:	b0 91 a4 01 	lds	r27, 0x01A4	; 0x8001a4 <timer0_overflow_count+0x3>
    3088:	22 b7       	in	r18, 0x32	; 50
    308a:	08 b6       	in	r0, 0x38	; 56
    308c:	00 fe       	sbrs	r0, 0
    308e:	05 c0       	rjmp	.+10     	; 0x309a <getMicros+0x26>
    3090:	2f 3f       	cpi	r18, 0xFF	; 255
    3092:	19 f0       	breq	.+6      	; 0x309a <getMicros+0x26>
    3094:	01 96       	adiw	r24, 0x01	; 1
    3096:	a1 1d       	adc	r26, r1
    3098:	b1 1d       	adc	r27, r1
    309a:	3f bf       	out	0x3f, r19	; 63
    309c:	ba 2f       	mov	r27, r26
    309e:	a9 2f       	mov	r26, r25
    30a0:	98 2f       	mov	r25, r24
    30a2:	88 27       	eor	r24, r24
    30a4:	82 0f       	add	r24, r18
    30a6:	91 1d       	adc	r25, r1
    30a8:	a1 1d       	adc	r26, r1
    30aa:	b1 1d       	adc	r27, r1
    30ac:	bc 01       	movw	r22, r24
    30ae:	cd 01       	movw	r24, r26
    30b0:	66 0f       	add	r22, r22
    30b2:	77 1f       	adc	r23, r23
    30b4:	88 1f       	adc	r24, r24
    30b6:	99 1f       	adc	r25, r25
    30b8:	66 0f       	add	r22, r22
    30ba:	77 1f       	adc	r23, r23
    30bc:	88 1f       	adc	r24, r24
    30be:	99 1f       	adc	r25, r25
    30c0:	08 95       	ret

000030c2 <getLCDString>:
    30c2:	20 e1       	ldi	r18, 0x10	; 16
    30c4:	ec e8       	ldi	r30, 0x8C	; 140
    30c6:	f1 e0       	ldi	r31, 0x01	; 1
    30c8:	df 01       	movw	r26, r30
    30ca:	1d 92       	st	X+, r1
    30cc:	2a 95       	dec	r18
    30ce:	e9 f7       	brne	.-6      	; 0x30ca <getLCDString+0x8>
    30d0:	46 2f       	mov	r20, r22
    30d2:	50 e0       	ldi	r21, 0x00	; 0
    30d4:	bc 01       	movw	r22, r24
    30d6:	cf 01       	movw	r24, r30
    30d8:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <eeprom_read_block>
    30dc:	8c e8       	ldi	r24, 0x8C	; 140
    30de:	91 e0       	ldi	r25, 0x01	; 1
    30e0:	08 95       	ret

000030e2 <setMidiFile>:
    30e2:	0f 93       	push	r16
    30e4:	1f 93       	push	r17
    30e6:	cf 93       	push	r28
    30e8:	df 93       	push	r29
    30ea:	ec 01       	movw	r28, r24
    30ec:	8b 01       	movw	r16, r22
    30ee:	8b ed       	ldi	r24, 0xDB	; 219
    30f0:	91 e0       	ldi	r25, 0x01	; 1
    30f2:	fe 01       	movw	r30, r28
    30f4:	9c 01       	movw	r18, r24
    30f6:	11 92       	st	Z+, r1
    30f8:	21 50       	subi	r18, 0x01	; 1
    30fa:	30 40       	sbci	r19, 0x00	; 0
    30fc:	e1 f7       	brne	.-8      	; 0x30f6 <setMidiFile+0x14>
    30fe:	ce 01       	movw	r24, r28
    3100:	0e 94 c2 20 	call	0x4184	; 0x4184 <initialise>
    3104:	67 e7       	ldi	r22, 0x77	; 119
    3106:	79 e2       	ldi	r23, 0x29	; 41
    3108:	ce 01       	movw	r24, r28
    310a:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <setMidiHandler>
    310e:	66 e7       	ldi	r22, 0x76	; 118
    3110:	79 e2       	ldi	r23, 0x29	; 41
    3112:	ce 01       	movw	r24, r28
    3114:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <setSysexHandler>
    3118:	65 e7       	ldi	r22, 0x75	; 117
    311a:	79 e2       	ldi	r23, 0x29	; 41
    311c:	ce 01       	movw	r24, r28
    311e:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <setMetaHandler>
    3122:	b8 01       	movw	r22, r16
    3124:	ce 01       	movw	r24, r28
    3126:	0e 94 24 23 	call	0x4648	; 0x4648 <setFilename>
    312a:	ce 01       	movw	r24, r28
    312c:	0e 94 20 22 	call	0x4440	; 0x4440 <loadMIDIFile>
    3130:	01 96       	adiw	r24, 0x01	; 1
    3132:	99 f0       	breq	.+38     	; 0x315a <setMidiFile+0x78>
    3134:	6b e0       	ldi	r22, 0x0B	; 11
    3136:	8b e4       	ldi	r24, 0x4B	; 75
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	0e 94 61 18 	call	0x30c2	; 0x30c2 <getLCDString>
    313e:	6b e0       	ldi	r22, 0x0B	; 11
    3140:	0e 94 c9 1c 	call	0x3992	; 0x3992 <lcdPrintData>
    3144:	8f ef       	ldi	r24, 0xFF	; 255
    3146:	99 e6       	ldi	r25, 0x69	; 105
    3148:	e8 e1       	ldi	r30, 0x18	; 24
    314a:	81 50       	subi	r24, 0x01	; 1
    314c:	90 40       	sbci	r25, 0x00	; 0
    314e:	e0 40       	sbci	r30, 0x00	; 0
    3150:	e1 f7       	brne	.-8      	; 0x314a <setMidiFile+0x68>
    3152:	00 c0       	rjmp	.+0      	; 0x3154 <setMidiFile+0x72>
    3154:	00 00       	nop
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	0b c0       	rjmp	.+22     	; 0x3170 <setMidiFile+0x8e>
    315a:	fe 01       	movw	r30, r28
    315c:	e6 5b       	subi	r30, 0xB6	; 182
    315e:	ff 4f       	sbci	r31, 0xFF	; 255
    3160:	81 e0       	ldi	r24, 0x01	; 1
    3162:	80 83       	st	Z, r24
    3164:	38 97       	sbiw	r30, 0x08	; 8
    3166:	10 82       	st	Z, r1
    3168:	cd 5b       	subi	r28, 0xBD	; 189
    316a:	df 4f       	sbci	r29, 0xFF	; 255
    316c:	18 82       	st	Y, r1
    316e:	80 e0       	ldi	r24, 0x00	; 0
    3170:	df 91       	pop	r29
    3172:	cf 91       	pop	r28
    3174:	1f 91       	pop	r17
    3176:	0f 91       	pop	r16
    3178:	08 95       	ret

0000317a <checkSD>:
    317a:	cf 93       	push	r28
    317c:	c8 2f       	mov	r28, r24
    317e:	60 e0       	ldi	r22, 0x00	; 0
    3180:	80 e0       	ldi	r24, 0x00	; 0
    3182:	0e 94 39 1c 	call	0x3872	; 0x3872 <lcdGotoXY>
    3186:	c1 30       	cpi	r28, 0x01	; 1
    3188:	29 f5       	brne	.+74     	; 0x31d4 <checkSD+0x5a>
    318a:	6f e0       	ldi	r22, 0x0F	; 15
    318c:	80 e1       	ldi	r24, 0x10	; 16
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	0e 94 61 18 	call	0x30c2	; 0x30c2 <getLCDString>
    3194:	6f e0       	ldi	r22, 0x0F	; 15
    3196:	0e 94 c9 1c 	call	0x3992	; 0x3992 <lcdPrintData>
    319a:	61 e0       	ldi	r22, 0x01	; 1
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	0e 94 39 1c 	call	0x3872	; 0x3872 <lcdGotoXY>
    31a2:	60 e0       	ldi	r22, 0x00	; 0
    31a4:	70 e0       	ldi	r23, 0x00	; 0
    31a6:	80 e0       	ldi	r24, 0x00	; 0
    31a8:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <f_mount>
    31ac:	88 23       	and	r24, r24
    31ae:	49 f0       	breq	.+18     	; 0x31c2 <checkSD+0x48>
    31b0:	6e e0       	ldi	r22, 0x0E	; 14
    31b2:	8d e3       	ldi	r24, 0x3D	; 61
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	0e 94 61 18 	call	0x30c2	; 0x30c2 <getLCDString>
    31ba:	6e e0       	ldi	r22, 0x0E	; 14
    31bc:	0e 94 c9 1c 	call	0x3992	; 0x3992 <lcdPrintData>
    31c0:	2d c0       	rjmp	.+90     	; 0x321c <checkSD+0xa2>
    31c2:	6a e0       	ldi	r22, 0x0A	; 10
    31c4:	83 e3       	ldi	r24, 0x33	; 51
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	0e 94 61 18 	call	0x30c2	; 0x30c2 <getLCDString>
    31cc:	6a e0       	ldi	r22, 0x0A	; 10
    31ce:	0e 94 c9 1c 	call	0x3992	; 0x3992 <lcdPrintData>
    31d2:	24 c0       	rjmp	.+72     	; 0x321c <checkSD+0xa2>
    31d4:	60 e1       	ldi	r22, 0x10	; 16
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	0e 94 61 18 	call	0x30c2	; 0x30c2 <getLCDString>
    31de:	60 e1       	ldi	r22, 0x10	; 16
    31e0:	0e 94 c9 1c 	call	0x3992	; 0x3992 <lcdPrintData>
    31e4:	61 e0       	ldi	r22, 0x01	; 1
    31e6:	80 e0       	ldi	r24, 0x00	; 0
    31e8:	0e 94 39 1c 	call	0x3872	; 0x3872 <lcdGotoXY>
    31ec:	67 e5       	ldi	r22, 0x57	; 87
    31ee:	72 e0       	ldi	r23, 0x02	; 2
    31f0:	80 e0       	ldi	r24, 0x00	; 0
    31f2:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <f_mount>
    31f6:	88 23       	and	r24, r24
    31f8:	49 f0       	breq	.+18     	; 0x320c <checkSD+0x92>
    31fa:	6c e0       	ldi	r22, 0x0C	; 12
    31fc:	87 e2       	ldi	r24, 0x27	; 39
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	0e 94 61 18 	call	0x30c2	; 0x30c2 <getLCDString>
    3204:	6c e0       	ldi	r22, 0x0C	; 12
    3206:	0e 94 c9 1c 	call	0x3992	; 0x3992 <lcdPrintData>
    320a:	08 c0       	rjmp	.+16     	; 0x321c <checkSD+0xa2>
    320c:	68 e0       	ldi	r22, 0x08	; 8
    320e:	8f e1       	ldi	r24, 0x1F	; 31
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	0e 94 61 18 	call	0x30c2	; 0x30c2 <getLCDString>
    3216:	68 e0       	ldi	r22, 0x08	; 8
    3218:	0e 94 c9 1c 	call	0x3992	; 0x3992 <lcdPrintData>
    321c:	cf 91       	pop	r28
    321e:	08 95       	ret

00003220 <createFileList>:
    3220:	8f 92       	push	r8
    3222:	9f 92       	push	r9
    3224:	af 92       	push	r10
    3226:	bf 92       	push	r11
    3228:	cf 92       	push	r12
    322a:	df 92       	push	r13
    322c:	ef 92       	push	r14
    322e:	ff 92       	push	r15
    3230:	0f 93       	push	r16
    3232:	1f 93       	push	r17
    3234:	cf 93       	push	r28
    3236:	df 93       	push	r29
    3238:	cd b7       	in	r28, 0x3d	; 61
    323a:	de b7       	in	r29, 0x3e	; 62
    323c:	e5 97       	sbiw	r28, 0x35	; 53
    323e:	0f b6       	in	r0, 0x3f	; 63
    3240:	f8 94       	cli
    3242:	de bf       	out	0x3e, r29	; 62
    3244:	0f be       	out	0x3f, r0	; 63
    3246:	cd bf       	out	0x3d, r28	; 61
    3248:	5c 01       	movw	r10, r24
    324a:	4b 01       	movw	r8, r22
    324c:	6a 01       	movw	r12, r20
    324e:	68 e0       	ldi	r22, 0x08	; 8
    3250:	70 e0       	ldi	r23, 0x00	; 0
    3252:	ce 01       	movw	r24, r28
    3254:	01 96       	adiw	r24, 0x01	; 1
    3256:	0e 94 83 13 	call	0x2706	; 0x2706 <f_getcwd>
    325a:	be 01       	movw	r22, r28
    325c:	6f 5f       	subi	r22, 0xFF	; 255
    325e:	7f 4f       	sbci	r23, 0xFF	; 255
    3260:	ce 01       	movw	r24, r28
    3262:	80 96       	adiw	r24, 0x20	; 32
    3264:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <f_opendir>
    3268:	18 2f       	mov	r17, r24
    326a:	81 11       	cpse	r24, r1
    326c:	50 c0       	rjmp	.+160    	; 0x330e <createFileList+0xee>
    326e:	7e 01       	movw	r14, r28
    3270:	23 e1       	ldi	r18, 0x13	; 19
    3272:	e2 0e       	add	r14, r18
    3274:	f1 1c       	adc	r15, r1
    3276:	00 e1       	ldi	r16, 0x10	; 16
    3278:	be 01       	movw	r22, r28
    327a:	66 5f       	subi	r22, 0xF6	; 246
    327c:	7f 4f       	sbci	r23, 0xFF	; 255
    327e:	ce 01       	movw	r24, r28
    3280:	80 96       	adiw	r24, 0x20	; 32
    3282:	0e 94 01 17 	call	0x2e02	; 0x2e02 <f_readdir>
    3286:	18 2f       	mov	r17, r24
    3288:	81 11       	cpse	r24, r1
    328a:	41 c0       	rjmp	.+130    	; 0x330e <createFileList+0xee>
    328c:	8b 89       	ldd	r24, Y+19	; 0x13
    328e:	88 23       	and	r24, r24
    3290:	f1 f1       	breq	.+124    	; 0x330e <createFileList+0xee>
    3292:	8e 32       	cpi	r24, 0x2E	; 46
    3294:	89 f3       	breq	.-30     	; 0x3278 <createFileList+0x58>
    3296:	8a 89       	ldd	r24, Y+18	; 0x12
    3298:	84 fd       	sbrc	r24, 4
    329a:	ee cf       	rjmp	.-36     	; 0x3278 <createFileList+0x58>
    329c:	f7 01       	movw	r30, r14
    329e:	01 90       	ld	r0, Z+
    32a0:	00 20       	and	r0, r0
    32a2:	e9 f7       	brne	.-6      	; 0x329e <createFileList+0x7e>
    32a4:	31 97       	sbiw	r30, 0x01	; 1
    32a6:	ee 19       	sub	r30, r14
    32a8:	ff 09       	sbc	r31, r15
    32aa:	70 97       	sbiw	r30, 0x10	; 16
    32ac:	28 f7       	brcc	.-54     	; 0x3278 <createFileList+0x58>
    32ae:	d6 01       	movw	r26, r12
    32b0:	8c 91       	ld	r24, X
    32b2:	f5 01       	movw	r30, r10
    32b4:	b0 e1       	ldi	r27, 0x10	; 16
    32b6:	8b 9f       	mul	r24, r27
    32b8:	e0 0d       	add	r30, r0
    32ba:	f1 1d       	adc	r31, r1
    32bc:	11 24       	eor	r1, r1
    32be:	df 01       	movw	r26, r30
    32c0:	20 2f       	mov	r18, r16
    32c2:	1d 92       	st	X+, r1
    32c4:	2a 95       	dec	r18
    32c6:	e9 f7       	brne	.-6      	; 0x32c2 <createFileList+0xa2>
    32c8:	b4 01       	movw	r22, r8
    32ca:	c7 01       	movw	r24, r14
    32cc:	0e 94 b9 39 	call	0x7372	; 0x7372 <strstr>
    32d0:	89 2b       	or	r24, r25
    32d2:	c1 f0       	breq	.+48     	; 0x3304 <createFileList+0xe4>
    32d4:	f7 01       	movw	r30, r14
    32d6:	01 90       	ld	r0, Z+
    32d8:	00 20       	and	r0, r0
    32da:	e9 f7       	brne	.-6      	; 0x32d6 <createFileList+0xb6>
    32dc:	31 97       	sbiw	r30, 0x01	; 1
    32de:	af 01       	movw	r20, r30
    32e0:	4e 19       	sub	r20, r14
    32e2:	5f 09       	sbc	r21, r15
    32e4:	d6 01       	movw	r26, r12
    32e6:	8c 91       	ld	r24, X
    32e8:	b7 01       	movw	r22, r14
    32ea:	f5 01       	movw	r30, r10
    32ec:	20 e1       	ldi	r18, 0x10	; 16
    32ee:	82 9f       	mul	r24, r18
    32f0:	e0 0d       	add	r30, r0
    32f2:	f1 1d       	adc	r31, r1
    32f4:	11 24       	eor	r1, r1
    32f6:	cf 01       	movw	r24, r30
    32f8:	0e 94 aa 39 	call	0x7354	; 0x7354 <strncpy>
    32fc:	d6 01       	movw	r26, r12
    32fe:	8c 91       	ld	r24, X
    3300:	8f 5f       	subi	r24, 0xFF	; 255
    3302:	8c 93       	st	X, r24
    3304:	f6 01       	movw	r30, r12
    3306:	80 81       	ld	r24, Z
    3308:	8a 30       	cpi	r24, 0x0A	; 10
    330a:	09 f0       	breq	.+2      	; 0x330e <createFileList+0xee>
    330c:	b5 cf       	rjmp	.-150    	; 0x3278 <createFileList+0x58>
    330e:	81 2f       	mov	r24, r17
    3310:	e5 96       	adiw	r28, 0x35	; 53
    3312:	0f b6       	in	r0, 0x3f	; 63
    3314:	f8 94       	cli
    3316:	de bf       	out	0x3e, r29	; 62
    3318:	0f be       	out	0x3f, r0	; 63
    331a:	cd bf       	out	0x3d, r28	; 61
    331c:	df 91       	pop	r29
    331e:	cf 91       	pop	r28
    3320:	1f 91       	pop	r17
    3322:	0f 91       	pop	r16
    3324:	ff 90       	pop	r15
    3326:	ef 90       	pop	r14
    3328:	df 90       	pop	r13
    332a:	cf 90       	pop	r12
    332c:	bf 90       	pop	r11
    332e:	af 90       	pop	r10
    3330:	9f 90       	pop	r9
    3332:	8f 90       	pop	r8
    3334:	08 95       	ret

00003336 <handleFileList>:



void handleFileList(unsigned char currentMode,unsigned char currentAction,struct file_entry_lookup *filentry,char (*list)[MAX_FNAME]){
    3336:	8f 92       	push	r8
    3338:	9f 92       	push	r9
    333a:	af 92       	push	r10
    333c:	bf 92       	push	r11
    333e:	cf 92       	push	r12
    3340:	df 92       	push	r13
    3342:	ef 92       	push	r14
    3344:	ff 92       	push	r15
    3346:	0f 93       	push	r16
    3348:	1f 93       	push	r17
    334a:	cf 93       	push	r28
    334c:	df 93       	push	r29
    334e:	00 d0       	rcall	.+0      	; 0x3350 <handleFileList+0x1a>
    3350:	00 d0       	rcall	.+0      	; 0x3352 <handleFileList+0x1c>
    3352:	cd b7       	in	r28, 0x3d	; 61
    3354:	de b7       	in	r29, 0x3e	; 62
    3356:	7a 01       	movw	r14, r20
    3358:	49 01       	movw	r8, r18
	unsigned char tmp = filentry->current_index - (filentry->current_index % 2);
    335a:	fa 01       	movw	r30, r20
    335c:	01 81       	ldd	r16, Z+1	; 0x01
	char *ch[2] = {"*"," "};
    335e:	83 e3       	ldi	r24, 0x33	; 51
    3360:	91 e0       	ldi	r25, 0x01	; 1
    3362:	9a 83       	std	Y+2, r25	; 0x02
    3364:	89 83       	std	Y+1, r24	; 0x01
    3366:	85 e3       	ldi	r24, 0x35	; 53
    3368:	91 e0       	ldi	r25, 0x01	; 1
    336a:	9c 83       	std	Y+4, r25	; 0x04
    336c:	8b 83       	std	Y+3, r24	; 0x03
	
	lcdGotoXY(0,0);
    336e:	60 e0       	ldi	r22, 0x00	; 0
    3370:	80 e0       	ldi	r24, 0x00	; 0
    3372:	0e 94 39 1c 	call	0x3872	; 0x3872 <lcdGotoXY>
	if(filentry->current_items == 0){
    3376:	f7 01       	movw	r30, r14
    3378:	80 81       	ld	r24, Z
    337a:	81 11       	cpse	r24, r1
    337c:	09 c0       	rjmp	.+18     	; 0x3390 <handleFileList+0x5a>
		lcdPrintData(getLCDString(NO_SND,NO_SND_LEN),NO_SND_LEN);
    337e:	69 e0       	ldi	r22, 0x09	; 9
    3380:	82 e7       	ldi	r24, 0x72	; 114
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	0e 94 61 18 	call	0x30c2	; 0x30c2 <getLCDString>
    3388:	69 e0       	ldi	r22, 0x09	; 9
    338a:	0e 94 c9 1c 	call	0x3992	; 0x3992 <lcdPrintData>
    338e:	63 c0       	rjmp	.+198    	; 0x3456 <handleFileList+0x120>
}



void handleFileList(unsigned char currentMode,unsigned char currentAction,struct file_entry_lookup *filentry,char (*list)[MAX_FNAME]){
	unsigned char tmp = filentry->current_index - (filentry->current_index % 2);
    3390:	0e 7f       	andi	r16, 0xFE	; 254
	if(filentry->current_items == 0){
		lcdPrintData(getLCDString(NO_SND,NO_SND_LEN),NO_SND_LEN);
		return;
	}
	
	lcdGotoXY(1,0);
    3392:	60 e0       	ldi	r22, 0x00	; 0
    3394:	81 e0       	ldi	r24, 0x01	; 1
    3396:	0e 94 39 1c 	call	0x3872	; 0x3872 <lcdGotoXY>
	lcdPrintData(list[tmp],strlen(list[tmp]));
    339a:	10 e0       	ldi	r17, 0x00	; 0
    339c:	58 01       	movw	r10, r16
    339e:	aa 0c       	add	r10, r10
    33a0:	bb 1c       	adc	r11, r11
    33a2:	aa 0c       	add	r10, r10
    33a4:	bb 1c       	adc	r11, r11
    33a6:	aa 0c       	add	r10, r10
    33a8:	bb 1c       	adc	r11, r11
    33aa:	aa 0c       	add	r10, r10
    33ac:	bb 1c       	adc	r11, r11
    33ae:	c4 01       	movw	r24, r8
    33b0:	8a 0d       	add	r24, r10
    33b2:	9b 1d       	adc	r25, r11
    33b4:	fc 01       	movw	r30, r24
    33b6:	01 90       	ld	r0, Z+
    33b8:	00 20       	and	r0, r0
    33ba:	e9 f7       	brne	.-6      	; 0x33b6 <handleFileList+0x80>
    33bc:	31 97       	sbiw	r30, 0x01	; 1
    33be:	bf 01       	movw	r22, r30
    33c0:	68 1b       	sub	r22, r24
    33c2:	79 0b       	sbc	r23, r25
    33c4:	0e 94 c9 1c 	call	0x3992	; 0x3992 <lcdPrintData>
	lcdGotoXY(0,0);
    33c8:	60 e0       	ldi	r22, 0x00	; 0
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	0e 94 39 1c 	call	0x3872	; 0x3872 <lcdGotoXY>
	lcdPrintData(ch[filentry->current_index % 2],1);
    33d0:	f7 01       	movw	r30, r14
    33d2:	81 81       	ldd	r24, Z+1	; 0x01
    33d4:	80 fb       	bst	r24, 0
    33d6:	cc 24       	eor	r12, r12
    33d8:	c0 f8       	bld	r12, 0
    33da:	d1 2c       	mov	r13, r1
    33dc:	cc 0c       	add	r12, r12
    33de:	dd 1c       	adc	r13, r13
    33e0:	fe 01       	movw	r30, r28
    33e2:	ec 0d       	add	r30, r12
    33e4:	fd 1d       	adc	r31, r13
    33e6:	61 e0       	ldi	r22, 0x01	; 1
    33e8:	81 81       	ldd	r24, Z+1	; 0x01
    33ea:	92 81       	ldd	r25, Z+2	; 0x02
    33ec:	0e 94 c9 1c 	call	0x3992	; 0x3992 <lcdPrintData>
	if(tmp < (filentry->current_items -1)){
    33f0:	f7 01       	movw	r30, r14
    33f2:	80 81       	ld	r24, Z
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	01 97       	sbiw	r24, 0x01	; 1
    33f8:	08 17       	cp	r16, r24
    33fa:	19 07       	cpc	r17, r25
    33fc:	64 f5       	brge	.+88     	; 0x3456 <handleFileList+0x120>
		lcdGotoXY(1,1);
    33fe:	61 e0       	ldi	r22, 0x01	; 1
    3400:	81 e0       	ldi	r24, 0x01	; 1
    3402:	0e 94 39 1c 	call	0x3872	; 0x3872 <lcdGotoXY>
		lcdPrintData(list[tmp + 1],strlen(list[tmp + 1]));
    3406:	c5 01       	movw	r24, r10
    3408:	40 96       	adiw	r24, 0x10	; 16
    340a:	88 0d       	add	r24, r8
    340c:	99 1d       	adc	r25, r9
    340e:	fc 01       	movw	r30, r24
    3410:	01 90       	ld	r0, Z+
    3412:	00 20       	and	r0, r0
    3414:	e9 f7       	brne	.-6      	; 0x3410 <handleFileList+0xda>
    3416:	31 97       	sbiw	r30, 0x01	; 1
    3418:	bf 01       	movw	r22, r30
    341a:	68 1b       	sub	r22, r24
    341c:	79 0b       	sbc	r23, r25
    341e:	0e 94 c9 1c 	call	0x3992	; 0x3992 <lcdPrintData>
		lcdGotoXY(0,1);
    3422:	61 e0       	ldi	r22, 0x01	; 1
    3424:	80 e0       	ldi	r24, 0x00	; 0
    3426:	0e 94 39 1c 	call	0x3872	; 0x3872 <lcdGotoXY>
		lcdPrintData(ch[(filentry->current_index + 1) % 2],1);
    342a:	f7 01       	movw	r30, r14
    342c:	81 81       	ldd	r24, Z+1	; 0x01
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	01 96       	adiw	r24, 0x01	; 1
    3432:	81 70       	andi	r24, 0x01	; 1
    3434:	90 78       	andi	r25, 0x80	; 128
    3436:	99 23       	and	r25, r25
    3438:	24 f4       	brge	.+8      	; 0x3442 <handleFileList+0x10c>
    343a:	01 97       	sbiw	r24, 0x01	; 1
    343c:	8e 6f       	ori	r24, 0xFE	; 254
    343e:	9f 6f       	ori	r25, 0xFF	; 255
    3440:	01 96       	adiw	r24, 0x01	; 1
    3442:	88 0f       	add	r24, r24
    3444:	99 1f       	adc	r25, r25
    3446:	fe 01       	movw	r30, r28
    3448:	e8 0f       	add	r30, r24
    344a:	f9 1f       	adc	r31, r25
    344c:	61 e0       	ldi	r22, 0x01	; 1
    344e:	81 81       	ldd	r24, Z+1	; 0x01
    3450:	92 81       	ldd	r25, Z+2	; 0x02
    3452:	0e 94 c9 1c 	call	0x3992	; 0x3992 <lcdPrintData>
	}
}
    3456:	0f 90       	pop	r0
    3458:	0f 90       	pop	r0
    345a:	0f 90       	pop	r0
    345c:	0f 90       	pop	r0
    345e:	df 91       	pop	r29
    3460:	cf 91       	pop	r28
    3462:	1f 91       	pop	r17
    3464:	0f 91       	pop	r16
    3466:	ff 90       	pop	r15
    3468:	ef 90       	pop	r14
    346a:	df 90       	pop	r13
    346c:	cf 90       	pop	r12
    346e:	bf 90       	pop	r11
    3470:	af 90       	pop	r10
    3472:	9f 90       	pop	r9
    3474:	8f 90       	pop	r8
    3476:	08 95       	ret

00003478 <writeMidi>:

void writeMidi(FIL *file){
    3478:	08 95       	ret

0000347a <lcdInitHW>:
}

void lcdHome(void)
{
	// move cursor to home
	lcdControlWrite(1<<LCD_HOME);
    347a:	92 98       	cbi	0x12, 2	; 18
    347c:	93 98       	cbi	0x12, 3	; 18
    347e:	94 98       	cbi	0x12, 4	; 18
    3480:	8a 9a       	sbi	0x11, 2	; 17
    3482:	8b 9a       	sbi	0x11, 3	; 17
    3484:	8c 9a       	sbi	0x11, 4	; 17
    3486:	8a b3       	in	r24, 0x1a	; 26
    3488:	8f 70       	andi	r24, 0x0F	; 15
    348a:	8a bb       	out	0x1a, r24	; 26
    348c:	8b b3       	in	r24, 0x1b	; 27
    348e:	80 6f       	ori	r24, 0xF0	; 240
    3490:	8b bb       	out	0x1b, r24	; 27
    3492:	08 95       	ret

00003494 <lcdBusyWait>:
    3494:	92 98       	cbi	0x12, 2	; 18
    3496:	8a b3       	in	r24, 0x1a	; 26
    3498:	8f 70       	andi	r24, 0x0F	; 15
    349a:	8a bb       	out	0x1a, r24	; 26
    349c:	8b b3       	in	r24, 0x1b	; 27
    349e:	80 6f       	ori	r24, 0xF0	; 240
    34a0:	8b bb       	out	0x1b, r24	; 27
    34a2:	93 9a       	sbi	0x12, 3	; 18
    34a4:	94 9a       	sbi	0x12, 4	; 18
	...
    34c2:	cf 9b       	sbis	0x19, 7	; 25
    34c4:	76 c0       	rjmp	.+236    	; 0x35b2 <lcdBusyWait+0x11e>
    34c6:	94 98       	cbi	0x12, 4	; 18
	...
    3500:	94 9a       	sbi	0x12, 4	; 18
	...
    353a:	94 98       	cbi	0x12, 4	; 18
	...
    3574:	94 9a       	sbi	0x12, 4	; 18
	...
    35ae:	cf 99       	sbic	0x19, 7	; 25
    35b0:	8a cf       	rjmp	.-236    	; 0x34c6 <lcdBusyWait+0x32>
    35b2:	94 98       	cbi	0x12, 4	; 18
    35b4:	08 95       	ret

000035b6 <lcdControlWrite>:
    35b6:	cf 93       	push	r28
    35b8:	c8 2f       	mov	r28, r24
    35ba:	0e 94 4a 1a 	call	0x3494	; 0x3494 <lcdBusyWait>
    35be:	92 98       	cbi	0x12, 2	; 18
    35c0:	93 98       	cbi	0x12, 3	; 18
    35c2:	94 9a       	sbi	0x12, 4	; 18
    35c4:	8a b3       	in	r24, 0x1a	; 26
    35c6:	80 6f       	ori	r24, 0xF0	; 240
    35c8:	8a bb       	out	0x1a, r24	; 26
    35ca:	8b b3       	in	r24, 0x1b	; 27
    35cc:	8f 70       	andi	r24, 0x0F	; 15
    35ce:	9c 2f       	mov	r25, r28
    35d0:	90 7f       	andi	r25, 0xF0	; 240
    35d2:	89 2b       	or	r24, r25
    35d4:	8b bb       	out	0x1b, r24	; 27
	...
    360e:	94 98       	cbi	0x12, 4	; 18
	...
    3648:	94 9a       	sbi	0x12, 4	; 18
    364a:	8b b3       	in	r24, 0x1b	; 27
    364c:	28 2f       	mov	r18, r24
    364e:	2f 70       	andi	r18, 0x0F	; 15
    3650:	30 e1       	ldi	r19, 0x10	; 16
    3652:	c3 9f       	mul	r28, r19
    3654:	c0 01       	movw	r24, r0
    3656:	11 24       	eor	r1, r1
    3658:	82 2b       	or	r24, r18
    365a:	8b bb       	out	0x1b, r24	; 27
	...
    3694:	94 98       	cbi	0x12, 4	; 18
    3696:	8a b3       	in	r24, 0x1a	; 26
    3698:	8f 70       	andi	r24, 0x0F	; 15
    369a:	8a bb       	out	0x1a, r24	; 26
    369c:	8b b3       	in	r24, 0x1b	; 27
    369e:	80 6f       	ori	r24, 0xF0	; 240
    36a0:	8b bb       	out	0x1b, r24	; 27
    36a2:	cf 91       	pop	r28
    36a4:	08 95       	ret

000036a6 <lcdControlRead>:
    36a6:	0e 94 4a 1a 	call	0x3494	; 0x3494 <lcdBusyWait>
    36aa:	8a b3       	in	r24, 0x1a	; 26
    36ac:	8f 70       	andi	r24, 0x0F	; 15
    36ae:	8a bb       	out	0x1a, r24	; 26
    36b0:	8b b3       	in	r24, 0x1b	; 27
    36b2:	80 6f       	ori	r24, 0xF0	; 240
    36b4:	8b bb       	out	0x1b, r24	; 27
    36b6:	92 98       	cbi	0x12, 2	; 18
    36b8:	93 9a       	sbi	0x12, 3	; 18
    36ba:	94 9a       	sbi	0x12, 4	; 18
	...
    36f4:	99 b3       	in	r25, 0x19	; 25
    36f6:	94 98       	cbi	0x12, 4	; 18
	...
    3730:	94 9a       	sbi	0x12, 4	; 18
	...
    376a:	29 b3       	in	r18, 0x19	; 25
    376c:	22 95       	swap	r18
    376e:	2f 70       	andi	r18, 0x0F	; 15
    3770:	89 2f       	mov	r24, r25
    3772:	80 7f       	andi	r24, 0xF0	; 240
    3774:	94 98       	cbi	0x12, 4	; 18
    3776:	82 2b       	or	r24, r18
    3778:	08 95       	ret

0000377a <lcdDataWrite>:
    377a:	cf 93       	push	r28
    377c:	c8 2f       	mov	r28, r24
    377e:	0e 94 4a 1a 	call	0x3494	; 0x3494 <lcdBusyWait>
    3782:	92 9a       	sbi	0x12, 2	; 18
    3784:	93 98       	cbi	0x12, 3	; 18
    3786:	94 9a       	sbi	0x12, 4	; 18
    3788:	8a b3       	in	r24, 0x1a	; 26
    378a:	80 6f       	ori	r24, 0xF0	; 240
    378c:	8a bb       	out	0x1a, r24	; 26
    378e:	8b b3       	in	r24, 0x1b	; 27
    3790:	8f 70       	andi	r24, 0x0F	; 15
    3792:	9c 2f       	mov	r25, r28
    3794:	90 7f       	andi	r25, 0xF0	; 240
    3796:	89 2b       	or	r24, r25
    3798:	8b bb       	out	0x1b, r24	; 27
	...
    37d2:	94 98       	cbi	0x12, 4	; 18
	...
    380c:	94 9a       	sbi	0x12, 4	; 18
    380e:	8b b3       	in	r24, 0x1b	; 27
    3810:	28 2f       	mov	r18, r24
    3812:	2f 70       	andi	r18, 0x0F	; 15
    3814:	30 e1       	ldi	r19, 0x10	; 16
    3816:	c3 9f       	mul	r28, r19
    3818:	c0 01       	movw	r24, r0
    381a:	11 24       	eor	r1, r1
    381c:	82 2b       	or	r24, r18
    381e:	8b bb       	out	0x1b, r24	; 27
	...
    3858:	94 98       	cbi	0x12, 4	; 18
    385a:	8a b3       	in	r24, 0x1a	; 26
    385c:	8f 70       	andi	r24, 0x0F	; 15
    385e:	8a bb       	out	0x1a, r24	; 26
    3860:	8b b3       	in	r24, 0x1b	; 27
    3862:	80 6f       	ori	r24, 0xF0	; 240
    3864:	8b bb       	out	0x1b, r24	; 27
    3866:	cf 91       	pop	r28
    3868:	08 95       	ret

0000386a <lcdClear>:
}

void lcdClear(void)
{
	// clear LCD
	lcdControlWrite(1<<LCD_CLR);
    386a:	81 e0       	ldi	r24, 0x01	; 1
    386c:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <lcdControlWrite>
    3870:	08 95       	ret

00003872 <lcdGotoXY>:
void lcdGotoXY(u08 x, u08 y)
{
	register u08 DDRAMAddr;

	// remap lines into proper order
	switch(y)
    3872:	62 30       	cpi	r22, 0x02	; 2
    3874:	31 f0       	breq	.+12     	; 0x3882 <lcdGotoXY+0x10>
    3876:	63 30       	cpi	r22, 0x03	; 3
    3878:	31 f0       	breq	.+12     	; 0x3886 <lcdGotoXY+0x14>
    387a:	61 30       	cpi	r22, 0x01	; 1
    387c:	29 f4       	brne	.+10     	; 0x3888 <lcdGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    387e:	80 5c       	subi	r24, 0xC0	; 192
    3880:	03 c0       	rjmp	.+6      	; 0x3888 <lcdGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    3882:	8c 5e       	subi	r24, 0xEC	; 236
    3884:	01 c0       	rjmp	.+2      	; 0x3888 <lcdGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    3886:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}

	// set data address
	lcdControlWrite(1<<LCD_DDRAM | DDRAMAddr);
    3888:	80 68       	ori	r24, 0x80	; 128
    388a:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <lcdControlWrite>
    388e:	08 95       	ret

00003890 <lcdLoadCustomChar>:
}

void lcdLoadCustomChar(u08* lcdCustomCharArray, u08 romCharNum, u08 lcdCharNum)
{
    3890:	0f 93       	push	r16
    3892:	1f 93       	push	r17
    3894:	cf 93       	push	r28
    3896:	df 93       	push	r29
    3898:	00 d0       	rcall	.+0      	; 0x389a <lcdLoadCustomChar+0xa>
    389a:	1f 92       	push	r1
    389c:	cd b7       	in	r28, 0x3d	; 61
    389e:	de b7       	in	r29, 0x3e	; 62
    38a0:	8c 01       	movw	r16, r24
    38a2:	6b 83       	std	Y+3, r22	; 0x03
    38a4:	4a 83       	std	Y+2, r20	; 0x02
	register u08 i;
	u08 saveDDRAMAddr;

	// backup the current cursor position
	saveDDRAMAddr = lcdControlRead() & 0x7F;
    38a6:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <lcdControlRead>
    38aa:	8f 77       	andi	r24, 0x7F	; 127
    38ac:	89 83       	std	Y+1, r24	; 0x01

	// multiply the character index by 8
	lcdCharNum = (lcdCharNum<<3);	// each character occupies 8 bytes
    38ae:	8a 81       	ldd	r24, Y+2	; 0x02
    38b0:	88 0f       	add	r24, r24
    38b2:	88 0f       	add	r24, r24
    38b4:	88 0f       	add	r24, r24
    38b6:	8a 83       	std	Y+2, r24	; 0x02
    38b8:	9b 81       	ldd	r25, Y+3	; 0x03
    38ba:	99 0f       	add	r25, r25
    38bc:	99 0f       	add	r25, r25
    38be:	99 0f       	add	r25, r25
    38c0:	09 0f       	add	r16, r25
    38c2:	11 1d       	adc	r17, r1
    38c4:	88 5f       	subi	r24, 0xF8	; 248
    38c6:	8b 83       	std	Y+3, r24	; 0x03

	// copy the 8 bytes into CG (character generator) RAM
	for(i=0; i<8; i++)
	{
		// set CG RAM address
		lcdControlWrite((1<<LCD_CGRAM) | (lcdCharNum+i));
    38c8:	8a 81       	ldd	r24, Y+2	; 0x02
    38ca:	80 64       	ori	r24, 0x40	; 64
    38cc:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <lcdControlWrite>
		// write character data
		lcdDataWrite( pgm_read_byte(lcdCustomCharArray+romCharNum+i) );
    38d0:	f8 01       	movw	r30, r16
    38d2:	84 91       	lpm	r24, Z
    38d4:	0e 94 bd 1b 	call	0x377a	; 0x377a <lcdDataWrite>
    38d8:	fa 81       	ldd	r31, Y+2	; 0x02
    38da:	ff 5f       	subi	r31, 0xFF	; 255
    38dc:	fa 83       	std	Y+2, r31	; 0x02
    38de:	0f 5f       	subi	r16, 0xFF	; 255
    38e0:	1f 4f       	sbci	r17, 0xFF	; 255
	// multiply the character index by 8
	lcdCharNum = (lcdCharNum<<3);	// each character occupies 8 bytes
	romCharNum = (romCharNum<<3);	// each character occupies 8 bytes

	// copy the 8 bytes into CG (character generator) RAM
	for(i=0; i<8; i++)
    38e2:	8b 81       	ldd	r24, Y+3	; 0x03
    38e4:	f8 13       	cpse	r31, r24
    38e6:	f0 cf       	rjmp	.-32     	; 0x38c8 <lcdLoadCustomChar+0x38>
		// write character data
		lcdDataWrite( pgm_read_byte(lcdCustomCharArray+romCharNum+i) );
	}

	// restore the previous cursor position
	lcdControlWrite(1<<LCD_DDRAM | saveDDRAMAddr);
    38e8:	89 81       	ldd	r24, Y+1	; 0x01
    38ea:	80 68       	ori	r24, 0x80	; 128
    38ec:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <lcdControlWrite>

}
    38f0:	0f 90       	pop	r0
    38f2:	0f 90       	pop	r0
    38f4:	0f 90       	pop	r0
    38f6:	df 91       	pop	r29
    38f8:	cf 91       	pop	r28
    38fa:	1f 91       	pop	r17
    38fc:	0f 91       	pop	r16
    38fe:	08 95       	ret

00003900 <lcdInit>:
/*************************************************************/

void lcdInit()
{
	// initialize hardware
	lcdInitHW();
    3900:	0e 94 3d 1a 	call	0x347a	; 0x347a <lcdInitHW>
	// LCD function set
	lcdControlWrite(LCD_FUNCTION_DEFAULT);
    3904:	88 e2       	ldi	r24, 0x28	; 40
    3906:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <lcdControlWrite>
	// clear LCD
	lcdControlWrite(1<<LCD_CLR);
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <lcdControlWrite>
	delay(60000);	// wait 60ms
    3910:	80 e6       	ldi	r24, 0x60	; 96
    3912:	9a ee       	ldi	r25, 0xEA	; 234
    3914:	0e 94 f7 32 	call	0x65ee	; 0x65ee <delay_us>
	// set entry mode
	lcdControlWrite(1<<LCD_ENTRY_MODE | 1<<LCD_ENTRY_INC);
    3918:	86 e0       	ldi	r24, 0x06	; 6
    391a:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <lcdControlWrite>
	// set display to on
	//lcdControlWrite(1<<LCD_ON_CTRL | 1<<LCD_ON_DISPLAY | 1<<LCD_ON_BLINK);
	lcdControlWrite(1<<LCD_ON_CTRL | 1<<LCD_ON_DISPLAY );
    391e:	8c e0       	ldi	r24, 0x0C	; 12
    3920:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <lcdControlWrite>
	// move cursor to home
	lcdControlWrite(1<<LCD_HOME);
    3924:	82 e0       	ldi	r24, 0x02	; 2
    3926:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <lcdControlWrite>
	// set data address to 0
	lcdControlWrite(1<<LCD_DDRAM | 0x00);
    392a:	80 e8       	ldi	r24, 0x80	; 128
    392c:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <lcdControlWrite>

	// load the first 8 custom characters
	lcdLoadCustomChar((u08*)LcdCustomChar,0,0);
    3930:	40 e0       	ldi	r20, 0x00	; 0
    3932:	60 e0       	ldi	r22, 0x00	; 0
    3934:	86 e8       	ldi	r24, 0x86	; 134
    3936:	92 e0       	ldi	r25, 0x02	; 2
    3938:	0e 94 48 1c 	call	0x3890	; 0x3890 <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,1,1);
    393c:	41 e0       	ldi	r20, 0x01	; 1
    393e:	61 e0       	ldi	r22, 0x01	; 1
    3940:	86 e8       	ldi	r24, 0x86	; 134
    3942:	92 e0       	ldi	r25, 0x02	; 2
    3944:	0e 94 48 1c 	call	0x3890	; 0x3890 <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,2,2);
    3948:	42 e0       	ldi	r20, 0x02	; 2
    394a:	62 e0       	ldi	r22, 0x02	; 2
    394c:	86 e8       	ldi	r24, 0x86	; 134
    394e:	92 e0       	ldi	r25, 0x02	; 2
    3950:	0e 94 48 1c 	call	0x3890	; 0x3890 <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,3,3);
    3954:	43 e0       	ldi	r20, 0x03	; 3
    3956:	63 e0       	ldi	r22, 0x03	; 3
    3958:	86 e8       	ldi	r24, 0x86	; 134
    395a:	92 e0       	ldi	r25, 0x02	; 2
    395c:	0e 94 48 1c 	call	0x3890	; 0x3890 <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,4,4);
    3960:	44 e0       	ldi	r20, 0x04	; 4
    3962:	64 e0       	ldi	r22, 0x04	; 4
    3964:	86 e8       	ldi	r24, 0x86	; 134
    3966:	92 e0       	ldi	r25, 0x02	; 2
    3968:	0e 94 48 1c 	call	0x3890	; 0x3890 <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,5,5);
    396c:	45 e0       	ldi	r20, 0x05	; 5
    396e:	65 e0       	ldi	r22, 0x05	; 5
    3970:	86 e8       	ldi	r24, 0x86	; 134
    3972:	92 e0       	ldi	r25, 0x02	; 2
    3974:	0e 94 48 1c 	call	0x3890	; 0x3890 <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,6,6);
    3978:	46 e0       	ldi	r20, 0x06	; 6
    397a:	66 e0       	ldi	r22, 0x06	; 6
    397c:	86 e8       	ldi	r24, 0x86	; 134
    397e:	92 e0       	ldi	r25, 0x02	; 2
    3980:	0e 94 48 1c 	call	0x3890	; 0x3890 <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,7,7);
    3984:	47 e0       	ldi	r20, 0x07	; 7
    3986:	67 e0       	ldi	r22, 0x07	; 7
    3988:	86 e8       	ldi	r24, 0x86	; 134
    398a:	92 e0       	ldi	r25, 0x02	; 2
    398c:	0e 94 48 1c 	call	0x3890	; 0x3890 <lcdLoadCustomChar>
    3990:	08 95       	ret

00003992 <lcdPrintData>:
	lcdControlWrite(1<<LCD_DDRAM | saveDDRAMAddr);

}

void lcdPrintData(char* data, u08 nBytes)
{
    3992:	0f 93       	push	r16
    3994:	1f 93       	push	r17
    3996:	cf 93       	push	r28
    3998:	df 93       	push	r29
	register u08 i;

	// check to make sure we have a good pointer
	if (!data) return;
    399a:	00 97       	sbiw	r24, 0x00	; 0
    399c:	81 f0       	breq	.+32     	; 0x39be <lcdPrintData+0x2c>

	// print data
	for(i=0; i<nBytes; i++)
    399e:	66 23       	and	r22, r22
    39a0:	71 f0       	breq	.+28     	; 0x39be <lcdPrintData+0x2c>
    39a2:	ec 01       	movw	r28, r24
    39a4:	61 50       	subi	r22, 0x01	; 1
    39a6:	06 2f       	mov	r16, r22
    39a8:	10 e0       	ldi	r17, 0x00	; 0
    39aa:	0f 5f       	subi	r16, 0xFF	; 255
    39ac:	1f 4f       	sbci	r17, 0xFF	; 255
    39ae:	08 0f       	add	r16, r24
    39b0:	19 1f       	adc	r17, r25
	{
		lcdDataWrite(data[i]);
    39b2:	89 91       	ld	r24, Y+
    39b4:	0e 94 bd 1b 	call	0x377a	; 0x377a <lcdDataWrite>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    39b8:	c0 17       	cp	r28, r16
    39ba:	d1 07       	cpc	r29, r17
    39bc:	d1 f7       	brne	.-12     	; 0x39b2 <lcdPrintData+0x20>
	{
		lcdDataWrite(data[i]);
	}
}
    39be:	df 91       	pop	r29
    39c0:	cf 91       	pop	r28
    39c2:	1f 91       	pop	r17
    39c4:	0f 91       	pop	r16
    39c6:	08 95       	ret

000039c8 <main>:
#define MIDI_FILE	0
#define SOUND_FILE	1
FATFS Fatfs;

int main(void)
{
    39c8:	cf 93       	push	r28
    39ca:	df 93       	push	r29
    39cc:	cd b7       	in	r28, 0x3d	; 61
    39ce:	de b7       	in	r29, 0x3e	; 62
    39d0:	c0 5a       	subi	r28, 0xA0	; 160
    39d2:	d2 40       	sbci	r29, 0x02	; 2
    39d4:	0f b6       	in	r0, 0x3f	; 63
    39d6:	f8 94       	cli
    39d8:	de bf       	out	0x3e, r29	; 62
    39da:	0f be       	out	0x3f, r0	; 63
    39dc:	cd bf       	out	0x3d, r28	; 61
    
	FIL open_files[2];
	
	struct midi_time_event mtevent;
	struct SNDFile sf = {0};
    39de:	fe 01       	movw	r30, r28
    39e0:	e4 5b       	subi	r30, 0xB4	; 180
    39e2:	ff 4f       	sbci	r31, 0xFF	; 255
    39e4:	8e e3       	ldi	r24, 0x3E	; 62
    39e6:	df 01       	movw	r26, r30
    39e8:	1d 92       	st	X+, r1
    39ea:	8a 95       	dec	r24
    39ec:	e9 f7       	brne	.-6      	; 0x39e8 <main+0x20>
	struct file_entry_lookup file_entry = {0};
    39ee:	c6 57       	subi	r28, 0x76	; 118
    39f0:	df 4f       	sbci	r29, 0xFF	; 255
    39f2:	19 82       	std	Y+1, r1	; 0x01
    39f4:	18 82       	st	Y, r1
    39f6:	ca 58       	subi	r28, 0x8A	; 138
    39f8:	d0 40       	sbci	r29, 0x00	; 0
	char (*file_list)[MAX_FNAME];
    unsigned char byteValue = 0;
	unsigned char numOfBytes = 0;
    39fa:	c4 57       	subi	r28, 0x74	; 116
    39fc:	df 4f       	sbci	r29, 0xFF	; 255
    39fe:	18 82       	st	Y, r1
    3a00:	cc 58       	subi	r28, 0x8C	; 140
    3a02:	d0 40       	sbci	r29, 0x00	; 0
	struct MD_MIDIFile mf;
      
	unsigned long microseconds = 0;
	unsigned long delta = 0;
	//DDRA |= (1 << PA1);		// remove
	file_list = malloc(MAX_FNAME * MAX_FILES);
    3a04:	80 ea       	ldi	r24, 0xA0	; 160
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	0e 94 79 38 	call	0x70f2	; 0x70f2 <malloc>
    3a0c:	6c 01       	movw	r12, r24
	
	configTimers();	
    3a0e:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <configTimers>
	lcdInit();	
    3a12:	0e 94 80 1c 	call	0x3900	; 0x3900 <lcdInit>
	uartInit();
    3a16:	0e 94 58 35 	call	0x6ab0	; 0x6ab0 <uartInit>
	midiInit();	
    3a1a:	0e 94 62 28 	call	0x50c4	; 0x50c4 <midiInit>
	spiInit();	
    3a1e:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <spiInit>
	setInputs();
    3a22:	0e 94 80 17 	call	0x2f00	; 0x2f00 <setInputs>
	InitSRAM();
    3a26:	0e 94 ef 30 	call	0x61de	; 0x61de <InitSRAM>
	
	// >> ADC
	a2dInit();
    3a2a:	0e 94 ba 01 	call	0x374	; 0x374 <a2dInit>
	a2dSetPrescaler(ADC_PRESCALE_DIV32);
    3a2e:	85 e0       	ldi	r24, 0x05	; 5
    3a30:	0e 94 ac 01 	call	0x358	; 0x358 <a2dSetPrescaler>
	a2dSetReference(ADC_REFERENCE_AVCC);
    3a34:	81 e0       	ldi	r24, 0x01	; 1
    3a36:	0e 94 b1 01 	call	0x362	; 0x362 <a2dSetReference>
	a2dSetChannel(ADC_CH_ADC0);
    3a3a:	80 e0       	ldi	r24, 0x00	; 0
    3a3c:	0e 94 c8 01 	call	0x390	; 0x390 <a2dSetChannel>
	a2dStartConvert();		
    3a40:	0e 94 ce 01 	call	0x39c	; 0x39c <a2dStartConvert>
	// << ADC
	 
	timerAttach(TIMER2OUTCOMPARE_INT,disk_timerproc);
    3a44:	6d ec       	ldi	r22, 0xCD	; 205
    3a46:	7d e2       	ldi	r23, 0x2D	; 45
    3a48:	86 e0       	ldi	r24, 0x06	; 6
    3a4a:	0e 94 1c 33 	call	0x6638	; 0x6638 <timerAttach>
	timerAttach(TIMER0OVERFLOW_INT,addMillis);
    3a4e:	65 e0       	ldi	r22, 0x05	; 5
    3a50:	78 e1       	ldi	r23, 0x18	; 24
    3a52:	80 e0       	ldi	r24, 0x00	; 0
    3a54:	0e 94 1c 33 	call	0x6638	; 0x6638 <timerAttach>
	
	uartSetBaudRate(MIDI_BAUD_RATE);
    3a58:	62 e1       	ldi	r22, 0x12	; 18
    3a5a:	7a e7       	ldi	r23, 0x7A	; 122
    3a5c:	80 e0       	ldi	r24, 0x00	; 0
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	0e 94 75 35 	call	0x6aea	; 0x6aea <uartSetBaudRate>
	uartSetRxHandler(rx_handler);
    3a64:	8b e5       	ldi	r24, 0x5B	; 91
    3a66:	97 e1       	ldi	r25, 0x17	; 23
    3a68:	0e 94 70 35 	call	0x6ae0	; 0x6ae0 <uartSetRxHandler>
	uartFlushReceiveBuffer();
    3a6c:	0e 94 e0 35 	call	0x6bc0	; 0x6bc0 <uartFlushReceiveBuffer>
	
	lcdGotoXY(0,0);		
    3a70:	60 e0       	ldi	r22, 0x00	; 0
    3a72:	80 e0       	ldi	r24, 0x00	; 0
    3a74:	0e 94 39 1c 	call	0x3872	; 0x3872 <lcdGotoXY>
		
	checkSD(inputs[SD]);
    3a78:	ca 56       	subi	r28, 0x6A	; 106
    3a7a:	df 4f       	sbci	r29, 0xFF	; 255
    3a7c:	88 81       	ld	r24, Y
    3a7e:	c6 59       	subi	r28, 0x96	; 150
    3a80:	d0 40       	sbci	r29, 0x00	; 0
    3a82:	0e 94 bd 18 	call	0x317a	; 0x317a <checkSD>
		f_close(&file);
	}
	*/
	
	
	midiPlayVolume(inputs[POT]);
    3a86:	c9 56       	subi	r28, 0x69	; 105
    3a88:	df 4f       	sbci	r29, 0xFF	; 255
    3a8a:	88 81       	ld	r24, Y
    3a8c:	c7 59       	subi	r28, 0x97	; 151
    3a8e:	d0 40       	sbci	r29, 0x00	; 0
    3a90:	0e 94 8b 29 	call	0x5316	; 0x5316 <midiPlayVolume>
	readInputs(inputs);	
    3a94:	ce 01       	movw	r24, r28
    3a96:	83 57       	subi	r24, 0x73	; 115
    3a98:	9f 4f       	sbci	r25, 0xFF	; 255
    3a9a:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <readInputs>
	INPUT input = NONE;
    struct family_entry fam;
	struct sound_entry snd;
	struct MD_MIDIFile mf;
      
	unsigned long microseconds = 0;
    3a9e:	21 2c       	mov	r2, r1
    3aa0:	31 2c       	mov	r3, r1
    3aa2:	21 01       	movw	r4, r2
	struct file_entry_lookup file_entry = {0};
	char (*file_list)[MAX_FNAME];
    unsigned char byteValue = 0;
	unsigned char numOfBytes = 0;
	unsigned char currentMode = SOUND_FAMILY,currentAction = NONE;
	BOOL endRecording = TRUE;
    3aa4:	77 24       	eor	r7, r7
    3aa6:	73 94       	inc	r7
	struct SNDFile sf = {0};
	struct file_entry_lookup file_entry = {0};
	char (*file_list)[MAX_FNAME];
    unsigned char byteValue = 0;
	unsigned char numOfBytes = 0;
	unsigned char currentMode = SOUND_FAMILY,currentAction = NONE;
    3aa8:	ee 24       	eor	r14, r14
    3aaa:	ea 94       	dec	r14
    3aac:	00 e0       	ldi	r16, 0x00	; 0
					currentAction = NONE;
				}
			}
			else if(currentMode == MIDI_REC && endRecording == TRUE){
				if(getMicros() > microseconds){
					sendMidiBuffer(mtevent.event.data,mtevent.event.size);
    3aae:	e1 e4       	ldi	r30, 0x41	; 65
    3ab0:	f0 e0       	ldi	r31, 0x00	; 0
    3ab2:	ec 0f       	add	r30, r28
    3ab4:	fd 1f       	adc	r31, r29
    3ab6:	33 96       	adiw	r30, 0x03	; 3
    3ab8:	c1 56       	subi	r28, 0x61	; 97
    3aba:	dd 4f       	sbci	r29, 0xFD	; 253
    3abc:	f9 83       	std	Y+1, r31	; 0x01
    3abe:	e8 83       	st	Y, r30
    3ac0:	cf 59       	subi	r28, 0x9F	; 159
    3ac2:	d2 40       	sbci	r29, 0x02	; 2
    3ac4:	68 94       	set
    3ac6:	66 24       	eor	r6, r6
    3ac8:	61 f8       	bld	r6, 1
							else if(currentMode == SOUND_SELECTED){
								lcdClear();
								lcdGotoXY(0,0);
								lcdPrintData(getLCDString(SELECTED,SELECTED_LEN),SELECTED_LEN);
								lcdGotoXY(0,1);
								lcdPrintData(fam.name,strlen(fam.name));
    3aca:	0f 2e       	mov	r0, r31
    3acc:	f8 e9       	ldi	r31, 0x98	; 152
    3ace:	8f 2e       	mov	r8, r31
    3ad0:	91 2c       	mov	r9, r1
    3ad2:	f0 2d       	mov	r31, r0
    3ad4:	8c 0e       	add	r8, r28
    3ad6:	9d 1e       	adc	r9, r29
    3ad8:	f8 e0       	ldi	r31, 0x08	; 8
    3ada:	8f 0e       	add	r8, r31
    3adc:	91 1c       	adc	r9, r1
								closeSNDFile(&sf);
    3ade:	5e 01       	movw	r10, r28
    3ae0:	8c e4       	ldi	r24, 0x4C	; 76
    3ae2:	a8 0e       	add	r10, r24
    3ae4:	b1 1c       	adc	r11, r1
								setSNDFile(&sf,file_list[file_entry.current_index],&fam,&snd);
								//createSoundList(&open_files[SOUND_FILE],&numOfItems);
								lcdClear();
								lcdPrintData(fam.name,strlen(fam.name));
								lcdGotoXY(0,1);
								lcdPrintData(snd.name,strlen(snd.name));
    3ae6:	a0 eb       	ldi	r26, 0xB0	; 176
    3ae8:	b0 e0       	ldi	r27, 0x00	; 0
    3aea:	ac 0f       	add	r26, r28
    3aec:	bd 1f       	adc	r27, r29
    3aee:	12 96       	adiw	r26, 0x02	; 2
    3af0:	c3 56       	subi	r28, 0x63	; 99
    3af2:	dd 4f       	sbci	r29, 0xFD	; 253
    3af4:	b9 83       	std	Y+1, r27	; 0x01
    3af6:	a8 83       	st	Y, r26
    3af8:	cd 59       	subi	r28, 0x9D	; 157
    3afa:	d2 40       	sbci	r29, 0x02	; 2
	
	midiPlayVolume(inputs[POT]);
	readInputs(inputs);	
	
	while(1){						
			if((input = readInputs(inputs)) >= BUTTON0 && input <= SD){	
    3afc:	ce 01       	movw	r24, r28
    3afe:	83 57       	subi	r24, 0x73	; 115
    3b00:	9f 4f       	sbci	r25, 0xFF	; 255
    3b02:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <readInputs>
    3b06:	18 2f       	mov	r17, r24
    3b08:	8a 30       	cpi	r24, 0x0A	; 10
    3b0a:	08 f0       	brcs	.+2      	; 0x3b0e <main+0x146>
    3b0c:	db c1       	rjmp	.+950    	; 0x3ec4 <main+0x4fc>
				lcdClear();
    3b0e:	0e 94 35 1c 	call	0x386a	; 0x386a <lcdClear>
				if(input >= BUTTON0 && input <= BUTTON3){
    3b12:	b3 e0       	ldi	r27, 0x03	; 3
    3b14:	b1 17       	cp	r27, r17
    3b16:	70 f0       	brcs	.+28     	; 0x3b34 <main+0x16c>
					currentMode = input;
					currentAction = NONE;
					file_entry.current_index = 0;
    3b18:	c5 57       	subi	r28, 0x75	; 117
    3b1a:	df 4f       	sbci	r29, 0xFF	; 255
    3b1c:	18 82       	st	Y, r1
    3b1e:	cb 58       	subi	r28, 0x8B	; 139
    3b20:	d0 40       	sbci	r29, 0x00	; 0
					file_entry.current_items = 0;					
    3b22:	c6 57       	subi	r28, 0x76	; 118
    3b24:	df 4f       	sbci	r29, 0xFF	; 255
    3b26:	18 82       	st	Y, r1
    3b28:	ca 58       	subi	r28, 0x8A	; 138
    3b2a:	d0 40       	sbci	r29, 0x00	; 0
	
	while(1){						
			if((input = readInputs(inputs)) >= BUTTON0 && input <= SD){	
				lcdClear();
				if(input >= BUTTON0 && input <= BUTTON3){
					currentMode = input;
    3b2c:	01 2f       	mov	r16, r17
					currentAction = NONE;
    3b2e:	ee 24       	eor	r14, r14
    3b30:	ea 94       	dec	r14
    3b32:	05 c0       	rjmp	.+10     	; 0x3b3e <main+0x176>
					file_entry.current_index = 0;
					file_entry.current_items = 0;					
				}
				else if(input >= JOY_UP && input <= JOY_PRESS){
    3b34:	8c ef       	ldi	r24, 0xFC	; 252
    3b36:	81 0f       	add	r24, r17
    3b38:	85 30       	cpi	r24, 0x05	; 5
    3b3a:	08 f4       	brcc	.+2      	; 0x3b3e <main+0x176>
					currentAction = input;
    3b3c:	e1 2e       	mov	r14, r17
				}
				switch(input){	
    3b3e:	81 2f       	mov	r24, r17
    3b40:	11 0f       	add	r17, r17
    3b42:	99 0b       	sbc	r25, r25
    3b44:	aa 0b       	sbc	r26, r26
    3b46:	bb 0b       	sbc	r27, r27
    3b48:	8a 30       	cpi	r24, 0x0A	; 10
    3b4a:	91 05       	cpc	r25, r1
    3b4c:	08 f0       	brcs	.+2      	; 0x3b50 <main+0x188>
    3b4e:	c3 c1       	rjmp	.+902    	; 0x3ed6 <main+0x50e>
    3b50:	fc 01       	movw	r30, r24
    3b52:	e6 5d       	subi	r30, 0xD6	; 214
    3b54:	ff 4f       	sbci	r31, 0xFF	; 255
    3b56:	0c 94 59 38 	jmp	0x70b2	; 0x70b2 <__tablejump2__>
					case NONE:	break;
					case POT:	break;					
					case SD:	delay_ms(1000);
    3b5a:	88 ee       	ldi	r24, 0xE8	; 232
    3b5c:	93 e0       	ldi	r25, 0x03	; 3
    3b5e:	0e 94 27 33 	call	0x664e	; 0x664e <timerPause>
								checkSD(inputs[SD]);								
    3b62:	ca 56       	subi	r28, 0x6A	; 106
    3b64:	df 4f       	sbci	r29, 0xFF	; 255
    3b66:	88 81       	ld	r24, Y
    3b68:	c6 59       	subi	r28, 0x96	; 150
    3b6a:	d0 40       	sbci	r29, 0x00	; 0
    3b6c:	0e 94 bd 18 	call	0x317a	; 0x317a <checkSD>
								break; 			
    3b70:	b2 c1       	rjmp	.+868    	; 0x3ed6 <main+0x50e>
					case BUTTON0:	// select sound family file						
							createFileList(file_list,".FAM",&file_entry);
    3b72:	ae 01       	movw	r20, r28
    3b74:	46 57       	subi	r20, 0x76	; 118
    3b76:	5f 4f       	sbci	r21, 0xFF	; 255
    3b78:	67 e3       	ldi	r22, 0x37	; 55
    3b7a:	71 e0       	ldi	r23, 0x01	; 1
    3b7c:	c6 01       	movw	r24, r12
    3b7e:	0e 94 10 19 	call	0x3220	; 0x3220 <createFileList>
							handleFileList(currentMode,currentAction,&file_entry,file_list);					
    3b82:	96 01       	movw	r18, r12
    3b84:	ae 01       	movw	r20, r28
    3b86:	46 57       	subi	r20, 0x76	; 118
    3b88:	5f 4f       	sbci	r21, 0xFF	; 255
    3b8a:	6e 2d       	mov	r22, r14
    3b8c:	80 2f       	mov	r24, r16
    3b8e:	0e 94 9b 19 	call	0x3336	; 0x3336 <handleFileList>
							break;						
    3b92:	a1 c1       	rjmp	.+834    	; 0x3ed6 <main+0x50e>
					case BUTTON1:	//select sound from file						
							break;						
					case BUTTON2:	// play midi
							createFileList(file_list,".MID",&file_entry);
    3b94:	ae 01       	movw	r20, r28
    3b96:	46 57       	subi	r20, 0x76	; 118
    3b98:	5f 4f       	sbci	r21, 0xFF	; 255
    3b9a:	60 e4       	ldi	r22, 0x40	; 64
    3b9c:	71 e0       	ldi	r23, 0x01	; 1
    3b9e:	c6 01       	movw	r24, r12
    3ba0:	0e 94 10 19 	call	0x3220	; 0x3220 <createFileList>
							handleFileList(currentMode,currentAction,&file_entry,file_list);
    3ba4:	96 01       	movw	r18, r12
    3ba6:	ae 01       	movw	r20, r28
    3ba8:	46 57       	subi	r20, 0x76	; 118
    3baa:	5f 4f       	sbci	r21, 0xFF	; 255
    3bac:	6e 2d       	mov	r22, r14
    3bae:	80 2f       	mov	r24, r16
    3bb0:	0e 94 9b 19 	call	0x3336	; 0x3336 <handleFileList>
							break;
    3bb4:	90 c1       	rjmp	.+800    	; 0x3ed6 <main+0x50e>
					case BUTTON3:	// record midi
							endRecording = !endRecording;
    3bb6:	11 e0       	ldi	r17, 0x01	; 1
    3bb8:	71 10       	cpse	r7, r1
    3bba:	10 e0       	ldi	r17, 0x00	; 0
									
							if(endRecording == FALSE){
    3bbc:	77 20       	and	r7, r7
    3bbe:	19 f1       	breq	.+70     	; 0x3c06 <main+0x23e>
								SRAM_seekWrite(0,SEEK_SET);										
    3bc0:	60 e0       	ldi	r22, 0x00	; 0
    3bc2:	70 e0       	ldi	r23, 0x00	; 0
    3bc4:	80 e0       	ldi	r24, 0x00	; 0
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	0e 94 99 30 	call	0x6132	; 0x6132 <SRAM_seekWrite>
								f_open(&open_files[MIDI_FILE],"SONG.MID",FA_WRITE | FA_CREATE_ALWAYS);
    3bcc:	4a e0       	ldi	r20, 0x0A	; 10
    3bce:	6c e3       	ldi	r22, 0x3C	; 60
    3bd0:	71 e0       	ldi	r23, 0x01	; 1
    3bd2:	ce 01       	movw	r24, r28
    3bd4:	01 96       	adiw	r24, 0x01	; 1
    3bd6:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <f_open>
								writeMidi(&open_files[MIDI_FILE]);
    3bda:	ce 01       	movw	r24, r28
    3bdc:	01 96       	adiw	r24, 0x01	; 1
    3bde:	0e 94 3c 1a 	call	0x3478	; 0x3478 <writeMidi>
								lcdGotoXY(0,0);
    3be2:	60 e0       	ldi	r22, 0x00	; 0
    3be4:	80 e0       	ldi	r24, 0x00	; 0
    3be6:	0e 94 39 1c 	call	0x3872	; 0x3872 <lcdGotoXY>
								lcdPrintData(getLCDString(RECORD,RECORD_LEN),RECORD_LEN);
    3bea:	69 e0       	ldi	r22, 0x09	; 9
    3bec:	8b e7       	ldi	r24, 0x7B	; 123
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	0e 94 61 18 	call	0x30c2	; 0x30c2 <getLCDString>
    3bf4:	69 e0       	ldi	r22, 0x09	; 9
    3bf6:	0e 94 c9 1c 	call	0x3992	; 0x3992 <lcdPrintData>
								microseconds = getMicros();
    3bfa:	0e 94 3a 18 	call	0x3074	; 0x3074 <getMicros>
    3bfe:	1b 01       	movw	r2, r22
    3c00:	2c 01       	movw	r4, r24
					case BUTTON2:	// play midi
							createFileList(file_list,".MID",&file_entry);
							handleFileList(currentMode,currentAction,&file_entry,file_list);
							break;
					case BUTTON3:	// record midi
							endRecording = !endRecording;
    3c02:	71 2e       	mov	r7, r17
    3c04:	68 c1       	rjmp	.+720    	; 0x3ed6 <main+0x50e>
								lcdGotoXY(0,0);
								lcdPrintData(getLCDString(RECORD,RECORD_LEN),RECORD_LEN);
								microseconds = getMicros();
							}
							else{
								SRAM_seekRead(0,SEEK_SET);
    3c06:	60 e0       	ldi	r22, 0x00	; 0
    3c08:	70 e0       	ldi	r23, 0x00	; 0
    3c0a:	80 e0       	ldi	r24, 0x00	; 0
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	0e 94 26 30 	call	0x604c	; 0x604c <SRAM_seekRead>
								readSRAM(((unsigned char *)&mtevent),sizeof(struct midi_time_event));
    3c12:	6b e0       	ldi	r22, 0x0B	; 11
    3c14:	70 e0       	ldi	r23, 0x00	; 0
    3c16:	ce 01       	movw	r24, r28
    3c18:	8f 5b       	subi	r24, 0xBF	; 191
    3c1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c1c:	0e 94 5d 32 	call	0x64ba	; 0x64ba <readSRAM>
								microseconds = getMicros() + mtevent.delta;
    3c20:	0e 94 3a 18 	call	0x3074	; 0x3074 <getMicros>
    3c24:	2c 96       	adiw	r28, 0x0c	; 12
    3c26:	2c ad       	ldd	r18, Y+60	; 0x3c
    3c28:	3d ad       	ldd	r19, Y+61	; 0x3d
    3c2a:	4e ad       	ldd	r20, Y+62	; 0x3e
    3c2c:	5f ad       	ldd	r21, Y+63	; 0x3f
    3c2e:	2c 97       	sbiw	r28, 0x0c	; 12
    3c30:	1b 01       	movw	r2, r22
    3c32:	2c 01       	movw	r4, r24
    3c34:	22 0e       	add	r2, r18
    3c36:	33 1e       	adc	r3, r19
    3c38:	44 1e       	adc	r4, r20
    3c3a:	55 1e       	adc	r5, r21
								lcdPrintData(getLCDString(STOPPED,STOPPED_LEN),STOPPED_LEN);
    3c3c:	67 e0       	ldi	r22, 0x07	; 7
    3c3e:	84 e8       	ldi	r24, 0x84	; 132
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	0e 94 61 18 	call	0x30c2	; 0x30c2 <getLCDString>
    3c46:	67 e0       	ldi	r22, 0x07	; 7
    3c48:	0e 94 c9 1c 	call	0x3992	; 0x3992 <lcdPrintData>
								f_write(&open_files[MIDI_FILE],"\x01\xFF\x2F\x00",4,(UINT *)&numOfBytes);
    3c4c:	9e 01       	movw	r18, r28
    3c4e:	24 57       	subi	r18, 0x74	; 116
    3c50:	3f 4f       	sbci	r19, 0xFF	; 255
    3c52:	44 e0       	ldi	r20, 0x04	; 4
    3c54:	50 e0       	ldi	r21, 0x00	; 0
    3c56:	6b e7       	ldi	r22, 0x7B	; 123
    3c58:	70 e0       	ldi	r23, 0x00	; 0
    3c5a:	ce 01       	movw	r24, r28
    3c5c:	01 96       	adiw	r24, 0x01	; 1
    3c5e:	0e 94 80 11 	call	0x2300	; 0x2300 <f_write>
								f_close(&open_files[MIDI_FILE]);
    3c62:	ce 01       	movw	r24, r28
    3c64:	01 96       	adiw	r24, 0x01	; 1
    3c66:	0e 94 77 13 	call	0x26ee	; 0x26ee <f_close>
					case BUTTON2:	// play midi
							createFileList(file_list,".MID",&file_entry);
							handleFileList(currentMode,currentAction,&file_entry,file_list);
							break;
					case BUTTON3:	// record midi
							endRecording = !endRecording;
    3c6a:	71 2e       	mov	r7, r17
    3c6c:	34 c1       	rjmp	.+616    	; 0x3ed6 <main+0x50e>
								f_close(&open_files[MIDI_FILE]);
										
							} 
							break;
					case JOY_UP:	
								if(file_entry.current_index > 0) file_entry.current_index--;
    3c6e:	c5 57       	subi	r28, 0x75	; 117
    3c70:	df 4f       	sbci	r29, 0xFF	; 255
    3c72:	88 81       	ld	r24, Y
    3c74:	cb 58       	subi	r28, 0x8B	; 139
    3c76:	d0 40       	sbci	r29, 0x00	; 0
    3c78:	88 23       	and	r24, r24
    3c7a:	31 f0       	breq	.+12     	; 0x3c88 <main+0x2c0>
    3c7c:	81 50       	subi	r24, 0x01	; 1
    3c7e:	c5 57       	subi	r28, 0x75	; 117
    3c80:	df 4f       	sbci	r29, 0xFF	; 255
    3c82:	88 83       	st	Y, r24
    3c84:	cb 58       	subi	r28, 0x8B	; 139
    3c86:	d0 40       	sbci	r29, 0x00	; 0
								if(currentMode == MIDI_PLAY || currentMode == SOUND_FAMILY)	
    3c88:	80 2f       	mov	r24, r16
    3c8a:	8d 7f       	andi	r24, 0xFD	; 253
    3c8c:	49 f4       	brne	.+18     	; 0x3ca0 <main+0x2d8>
									handleFileList(currentMode,currentAction,&file_entry,file_list);
    3c8e:	96 01       	movw	r18, r12
    3c90:	ae 01       	movw	r20, r28
    3c92:	46 57       	subi	r20, 0x76	; 118
    3c94:	5f 4f       	sbci	r21, 0xFF	; 255
    3c96:	6e 2d       	mov	r22, r14
    3c98:	80 2f       	mov	r24, r16
    3c9a:	0e 94 9b 19 	call	0x3336	; 0x3336 <handleFileList>
    3c9e:	1b c1       	rjmp	.+566    	; 0x3ed6 <main+0x50e>
								else if(currentMode == SOUND_SELECTED){
    3ca0:	01 30       	cpi	r16, 0x01	; 1
    3ca2:	09 f0       	breq	.+2      	; 0x3ca6 <main+0x2de>
    3ca4:	3c c1       	rjmp	.+632    	; 0x3f1e <main+0x556>
									scrollSoundList(&sf,JOY_UP,&fam,&snd);
    3ca6:	9e 01       	movw	r18, r28
    3ca8:	20 55       	subi	r18, 0x50	; 80
    3caa:	3f 4f       	sbci	r19, 0xFF	; 255
    3cac:	ae 01       	movw	r20, r28
    3cae:	48 56       	subi	r20, 0x68	; 104
    3cb0:	5f 4f       	sbci	r21, 0xFF	; 255
    3cb2:	64 e0       	ldi	r22, 0x04	; 4
    3cb4:	c5 01       	movw	r24, r10
    3cb6:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <scrollSoundList>
									sendProgramChange(snd.bank,snd.prog);
    3cba:	cf 54       	subi	r28, 0x4F	; 79
    3cbc:	df 4f       	sbci	r29, 0xFF	; 255
    3cbe:	68 81       	ld	r22, Y
    3cc0:	c1 5b       	subi	r28, 0xB1	; 177
    3cc2:	d0 40       	sbci	r29, 0x00	; 0
    3cc4:	c0 55       	subi	r28, 0x50	; 80
    3cc6:	df 4f       	sbci	r29, 0xFF	; 255
    3cc8:	88 81       	ld	r24, Y
    3cca:	c0 5b       	subi	r28, 0xB0	; 176
    3ccc:	d0 40       	sbci	r29, 0x00	; 0
    3cce:	0e 94 cf 28 	call	0x519e	; 0x519e <sendProgramChange>
    3cd2:	7e c1       	rjmp	.+764    	; 0x3fd0 <main+0x608>
								}
								break;
					case JOY_RIGHT:	
								scrollSoundList(&sf,JOY_RIGHT, &fam,&snd);
    3cd4:	9e 01       	movw	r18, r28
    3cd6:	20 55       	subi	r18, 0x50	; 80
    3cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    3cda:	ae 01       	movw	r20, r28
    3cdc:	48 56       	subi	r20, 0x68	; 104
    3cde:	5f 4f       	sbci	r21, 0xFF	; 255
    3ce0:	65 e0       	ldi	r22, 0x05	; 5
    3ce2:	c5 01       	movw	r24, r10
    3ce4:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <scrollSoundList>
								sendProgramChange(snd.bank,snd.prog);
    3ce8:	cf 54       	subi	r28, 0x4F	; 79
    3cea:	df 4f       	sbci	r29, 0xFF	; 255
    3cec:	68 81       	ld	r22, Y
    3cee:	c1 5b       	subi	r28, 0xB1	; 177
    3cf0:	d0 40       	sbci	r29, 0x00	; 0
    3cf2:	c0 55       	subi	r28, 0x50	; 80
    3cf4:	df 4f       	sbci	r29, 0xFF	; 255
    3cf6:	88 81       	ld	r24, Y
    3cf8:	c0 5b       	subi	r28, 0xB0	; 176
    3cfa:	d0 40       	sbci	r29, 0x00	; 0
    3cfc:	0e 94 cf 28 	call	0x519e	; 0x519e <sendProgramChange>
								break;
    3d00:	ea c0       	rjmp	.+468    	; 0x3ed6 <main+0x50e>
					case JOY_DOWN:	
								if(file_entry.current_index < (file_entry.current_items - 1)) file_entry.current_index++;
    3d02:	c5 57       	subi	r28, 0x75	; 117
    3d04:	df 4f       	sbci	r29, 0xFF	; 255
    3d06:	28 81       	ld	r18, Y
    3d08:	cb 58       	subi	r28, 0x8B	; 139
    3d0a:	d0 40       	sbci	r29, 0x00	; 0
    3d0c:	42 2f       	mov	r20, r18
    3d0e:	50 e0       	ldi	r21, 0x00	; 0
    3d10:	c6 57       	subi	r28, 0x76	; 118
    3d12:	df 4f       	sbci	r29, 0xFF	; 255
    3d14:	88 81       	ld	r24, Y
    3d16:	ca 58       	subi	r28, 0x8A	; 138
    3d18:	d0 40       	sbci	r29, 0x00	; 0
    3d1a:	90 e0       	ldi	r25, 0x00	; 0
    3d1c:	01 97       	sbiw	r24, 0x01	; 1
    3d1e:	48 17       	cp	r20, r24
    3d20:	59 07       	cpc	r21, r25
    3d22:	34 f4       	brge	.+12     	; 0x3d30 <main+0x368>
    3d24:	2f 5f       	subi	r18, 0xFF	; 255
    3d26:	c5 57       	subi	r28, 0x75	; 117
    3d28:	df 4f       	sbci	r29, 0xFF	; 255
    3d2a:	28 83       	st	Y, r18
    3d2c:	cb 58       	subi	r28, 0x8B	; 139
    3d2e:	d0 40       	sbci	r29, 0x00	; 0
								if(currentMode == MIDI_PLAY || currentMode == SOUND_FAMILY) 
    3d30:	80 2f       	mov	r24, r16
    3d32:	8d 7f       	andi	r24, 0xFD	; 253
    3d34:	49 f4       	brne	.+18     	; 0x3d48 <main+0x380>
									handleFileList(currentMode,currentAction,&file_entry,file_list);
    3d36:	96 01       	movw	r18, r12
    3d38:	ae 01       	movw	r20, r28
    3d3a:	46 57       	subi	r20, 0x76	; 118
    3d3c:	5f 4f       	sbci	r21, 0xFF	; 255
    3d3e:	6e 2d       	mov	r22, r14
    3d40:	80 2f       	mov	r24, r16
    3d42:	0e 94 9b 19 	call	0x3336	; 0x3336 <handleFileList>
    3d46:	c7 c0       	rjmp	.+398    	; 0x3ed6 <main+0x50e>
								else if(currentMode == SOUND_SELECTED){
    3d48:	01 30       	cpi	r16, 0x01	; 1
    3d4a:	09 f0       	breq	.+2      	; 0x3d4e <main+0x386>
    3d4c:	e8 c0       	rjmp	.+464    	; 0x3f1e <main+0x556>
									scrollSoundList(&sf,JOY_DOWN, &fam,&snd);
    3d4e:	9e 01       	movw	r18, r28
    3d50:	20 55       	subi	r18, 0x50	; 80
    3d52:	3f 4f       	sbci	r19, 0xFF	; 255
    3d54:	ae 01       	movw	r20, r28
    3d56:	48 56       	subi	r20, 0x68	; 104
    3d58:	5f 4f       	sbci	r21, 0xFF	; 255
    3d5a:	66 e0       	ldi	r22, 0x06	; 6
    3d5c:	c5 01       	movw	r24, r10
    3d5e:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <scrollSoundList>
									sendProgramChange(snd.bank,snd.prog);
    3d62:	cf 54       	subi	r28, 0x4F	; 79
    3d64:	df 4f       	sbci	r29, 0xFF	; 255
    3d66:	68 81       	ld	r22, Y
    3d68:	c1 5b       	subi	r28, 0xB1	; 177
    3d6a:	d0 40       	sbci	r29, 0x00	; 0
    3d6c:	c0 55       	subi	r28, 0x50	; 80
    3d6e:	df 4f       	sbci	r29, 0xFF	; 255
    3d70:	88 81       	ld	r24, Y
    3d72:	c0 5b       	subi	r28, 0xB0	; 176
    3d74:	d0 40       	sbci	r29, 0x00	; 0
    3d76:	0e 94 cf 28 	call	0x519e	; 0x519e <sendProgramChange>
    3d7a:	2a c1       	rjmp	.+596    	; 0x3fd0 <main+0x608>
								}
								break;
					case JOY_LEFT:	
								scrollSoundList(&sf,JOY_LEFT,&fam,&snd);
    3d7c:	9e 01       	movw	r18, r28
    3d7e:	20 55       	subi	r18, 0x50	; 80
    3d80:	3f 4f       	sbci	r19, 0xFF	; 255
    3d82:	ae 01       	movw	r20, r28
    3d84:	48 56       	subi	r20, 0x68	; 104
    3d86:	5f 4f       	sbci	r21, 0xFF	; 255
    3d88:	67 e0       	ldi	r22, 0x07	; 7
    3d8a:	c5 01       	movw	r24, r10
    3d8c:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <scrollSoundList>
								sendProgramChange(snd.bank,snd.prog);
    3d90:	cf 54       	subi	r28, 0x4F	; 79
    3d92:	df 4f       	sbci	r29, 0xFF	; 255
    3d94:	68 81       	ld	r22, Y
    3d96:	c1 5b       	subi	r28, 0xB1	; 177
    3d98:	d0 40       	sbci	r29, 0x00	; 0
    3d9a:	c0 55       	subi	r28, 0x50	; 80
    3d9c:	df 4f       	sbci	r29, 0xFF	; 255
    3d9e:	88 81       	ld	r24, Y
    3da0:	c0 5b       	subi	r28, 0xB0	; 176
    3da2:	d0 40       	sbci	r29, 0x00	; 0
    3da4:	0e 94 cf 28 	call	0x519e	; 0x519e <sendProgramChange>
								break;
    3da8:	96 c0       	rjmp	.+300    	; 0x3ed6 <main+0x50e>
					case JOY_PRESS:	
							if(currentMode == MIDI_PLAY)										
    3daa:	02 30       	cpi	r16, 0x02	; 2
    3dac:	89 f4       	brne	.+34     	; 0x3dd0 <main+0x408>
								setMidiFile(&mf,file_list[file_entry.current_index]);									
    3dae:	c5 57       	subi	r28, 0x75	; 117
    3db0:	df 4f       	sbci	r29, 0xFF	; 255
    3db2:	88 81       	ld	r24, Y
    3db4:	cb 58       	subi	r28, 0x8B	; 139
    3db6:	d0 40       	sbci	r29, 0x00	; 0
    3db8:	b6 01       	movw	r22, r12
    3dba:	e0 e1       	ldi	r30, 0x10	; 16
    3dbc:	8e 9f       	mul	r24, r30
    3dbe:	60 0d       	add	r22, r0
    3dc0:	71 1d       	adc	r23, r1
    3dc2:	11 24       	eor	r1, r1
    3dc4:	ce 01       	movw	r24, r28
    3dc6:	8e 53       	subi	r24, 0x3E	; 62
    3dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    3dca:	0e 94 71 18 	call	0x30e2	; 0x30e2 <setMidiFile>
    3dce:	85 c0       	rjmp	.+266    	; 0x3eda <main+0x512>
							else if(currentMode == SOUND_FAMILY){
    3dd0:	01 11       	cpse	r16, r1
    3dd2:	54 c0       	rjmp	.+168    	; 0x3e7c <main+0x4b4>
								if(sf._fileOpen == TRUE){
    3dd4:	d5 01       	movw	r26, r10
    3dd6:	90 96       	adiw	r26, 0x20	; 32
    3dd8:	8c 91       	ld	r24, X
    3dda:	81 30       	cpi	r24, 0x01	; 1
    3ddc:	19 f4       	brne	.+6      	; 0x3de4 <main+0x41c>
									closeSNDFile(&sf);
    3dde:	c5 01       	movw	r24, r10
    3de0:	0e 94 38 2e 	call	0x5c70	; 0x5c70 <closeSNDFile>
								}
								memset(&sf,0,sizeof(struct SNDFile));
    3de4:	8e e3       	ldi	r24, 0x3E	; 62
    3de6:	f5 01       	movw	r30, r10
    3de8:	11 92       	st	Z+, r1
    3dea:	8a 95       	dec	r24
    3dec:	e9 f7       	brne	.-6      	; 0x3de8 <main+0x420>
								// open selected file and get first family name and first sound of that family (fam/snd params)
								// f_open
								setSNDFile(&sf,file_list[file_entry.current_index],&fam,&snd);
    3dee:	c5 57       	subi	r28, 0x75	; 117
    3df0:	df 4f       	sbci	r29, 0xFF	; 255
    3df2:	88 81       	ld	r24, Y
    3df4:	cb 58       	subi	r28, 0x8B	; 139
    3df6:	d0 40       	sbci	r29, 0x00	; 0
    3df8:	b6 01       	movw	r22, r12
    3dfa:	f0 e1       	ldi	r31, 0x10	; 16
    3dfc:	8f 9f       	mul	r24, r31
    3dfe:	60 0d       	add	r22, r0
    3e00:	71 1d       	adc	r23, r1
    3e02:	11 24       	eor	r1, r1
    3e04:	9e 01       	movw	r18, r28
    3e06:	20 55       	subi	r18, 0x50	; 80
    3e08:	3f 4f       	sbci	r19, 0xFF	; 255
    3e0a:	ae 01       	movw	r20, r28
    3e0c:	48 56       	subi	r20, 0x68	; 104
    3e0e:	5f 4f       	sbci	r21, 0xFF	; 255
    3e10:	c5 01       	movw	r24, r10
    3e12:	0e 94 e1 2d 	call	0x5bc2	; 0x5bc2 <setSNDFile>
								//createSoundList(&open_files[SOUND_FILE],&numOfItems);
								lcdClear();
    3e16:	0e 94 35 1c 	call	0x386a	; 0x386a <lcdClear>
								lcdPrintData(fam.name,strlen(fam.name));
    3e1a:	f4 01       	movw	r30, r8
    3e1c:	01 90       	ld	r0, Z+
    3e1e:	00 20       	and	r0, r0
    3e20:	e9 f7       	brne	.-6      	; 0x3e1c <main+0x454>
    3e22:	31 97       	sbiw	r30, 0x01	; 1
    3e24:	bf 01       	movw	r22, r30
    3e26:	68 19       	sub	r22, r8
    3e28:	79 09       	sbc	r23, r9
    3e2a:	c4 01       	movw	r24, r8
    3e2c:	0e 94 c9 1c 	call	0x3992	; 0x3992 <lcdPrintData>
								lcdGotoXY(0,1);
    3e30:	61 e0       	ldi	r22, 0x01	; 1
    3e32:	80 e0       	ldi	r24, 0x00	; 0
    3e34:	0e 94 39 1c 	call	0x3872	; 0x3872 <lcdGotoXY>
								lcdPrintData(snd.name,strlen(snd.name));
    3e38:	c3 56       	subi	r28, 0x63	; 99
    3e3a:	dd 4f       	sbci	r29, 0xFD	; 253
    3e3c:	e8 81       	ld	r30, Y
    3e3e:	f9 81       	ldd	r31, Y+1	; 0x01
    3e40:	cd 59       	subi	r28, 0x9D	; 157
    3e42:	d2 40       	sbci	r29, 0x02	; 2
    3e44:	01 90       	ld	r0, Z+
    3e46:	00 20       	and	r0, r0
    3e48:	e9 f7       	brne	.-6      	; 0x3e44 <main+0x47c>
    3e4a:	31 97       	sbiw	r30, 0x01	; 1
    3e4c:	bf 01       	movw	r22, r30
    3e4e:	c3 56       	subi	r28, 0x63	; 99
    3e50:	dd 4f       	sbci	r29, 0xFD	; 253
    3e52:	88 81       	ld	r24, Y
    3e54:	99 81       	ldd	r25, Y+1	; 0x01
    3e56:	cd 59       	subi	r28, 0x9D	; 157
    3e58:	d2 40       	sbci	r29, 0x02	; 2
    3e5a:	68 1b       	sub	r22, r24
    3e5c:	79 0b       	sbc	r23, r25
    3e5e:	0e 94 c9 1c 	call	0x3992	; 0x3992 <lcdPrintData>
								sendProgramChange(snd.bank,snd.prog);
    3e62:	cf 54       	subi	r28, 0x4F	; 79
    3e64:	df 4f       	sbci	r29, 0xFF	; 255
    3e66:	68 81       	ld	r22, Y
    3e68:	c1 5b       	subi	r28, 0xB1	; 177
    3e6a:	d0 40       	sbci	r29, 0x00	; 0
    3e6c:	c0 55       	subi	r28, 0x50	; 80
    3e6e:	df 4f       	sbci	r29, 0xFF	; 255
    3e70:	88 81       	ld	r24, Y
    3e72:	c0 5b       	subi	r28, 0xB0	; 176
    3e74:	d0 40       	sbci	r29, 0x00	; 0
    3e76:	0e 94 cf 28 	call	0x519e	; 0x519e <sendProgramChange>
    3e7a:	aa c0       	rjmp	.+340    	; 0x3fd0 <main+0x608>
								currentMode = SOUND_SELECTED;																				
							}
							else if(currentMode == SOUND_SELECTED){
    3e7c:	01 30       	cpi	r16, 0x01	; 1
    3e7e:	09 f0       	breq	.+2      	; 0x3e82 <main+0x4ba>
    3e80:	4e c0       	rjmp	.+156    	; 0x3f1e <main+0x556>
								lcdClear();
    3e82:	0e 94 35 1c 	call	0x386a	; 0x386a <lcdClear>
								lcdGotoXY(0,0);
    3e86:	60 e0       	ldi	r22, 0x00	; 0
    3e88:	80 e0       	ldi	r24, 0x00	; 0
    3e8a:	0e 94 39 1c 	call	0x3872	; 0x3872 <lcdGotoXY>
								lcdPrintData(getLCDString(SELECTED,SELECTED_LEN),SELECTED_LEN);
    3e8e:	68 e0       	ldi	r22, 0x08	; 8
    3e90:	83 e9       	ldi	r24, 0x93	; 147
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	0e 94 61 18 	call	0x30c2	; 0x30c2 <getLCDString>
    3e98:	68 e0       	ldi	r22, 0x08	; 8
    3e9a:	0e 94 c9 1c 	call	0x3992	; 0x3992 <lcdPrintData>
								lcdGotoXY(0,1);
    3e9e:	61 e0       	ldi	r22, 0x01	; 1
    3ea0:	80 e0       	ldi	r24, 0x00	; 0
    3ea2:	0e 94 39 1c 	call	0x3872	; 0x3872 <lcdGotoXY>
								lcdPrintData(fam.name,strlen(fam.name));
    3ea6:	f4 01       	movw	r30, r8
    3ea8:	01 90       	ld	r0, Z+
    3eaa:	00 20       	and	r0, r0
    3eac:	e9 f7       	brne	.-6      	; 0x3ea8 <main+0x4e0>
    3eae:	31 97       	sbiw	r30, 0x01	; 1
    3eb0:	bf 01       	movw	r22, r30
    3eb2:	68 19       	sub	r22, r8
    3eb4:	79 09       	sbc	r23, r9
    3eb6:	c4 01       	movw	r24, r8
    3eb8:	0e 94 c9 1c 	call	0x3992	; 0x3992 <lcdPrintData>
								closeSNDFile(&sf);
    3ebc:	c5 01       	movw	r24, r10
    3ebe:	0e 94 38 2e 	call	0x5c70	; 0x5c70 <closeSNDFile>
    3ec2:	86 c0       	rjmp	.+268    	; 0x3fd0 <main+0x608>
				//lcdGotoXY(0,1);
				//lcdPrintData(fam.name,strlen(fam.name));
				
				//_delay_ms(250);
			}
			else if(input == POT){
    3ec4:	8a 30       	cpi	r24, 0x0A	; 10
    3ec6:	39 f4       	brne	.+14     	; 0x3ed6 <main+0x50e>
				midiPlayVolume(inputs[POT]);
    3ec8:	c9 56       	subi	r28, 0x69	; 105
    3eca:	df 4f       	sbci	r29, 0xFF	; 255
    3ecc:	88 81       	ld	r24, Y
    3ece:	c7 59       	subi	r28, 0x97	; 151
    3ed0:	d0 40       	sbci	r29, 0x00	; 0
    3ed2:	0e 94 8b 29 	call	0x5316	; 0x5316 <midiPlayVolume>
			}
			
			
			// >> process events
			if(currentMode == MIDI_PLAY && currentAction == JOY_PRESS){
    3ed6:	02 30       	cpi	r16, 0x02	; 2
    3ed8:	11 f5       	brne	.+68     	; 0x3f1e <main+0x556>
    3eda:	98 e0       	ldi	r25, 0x08	; 8
    3edc:	e9 12       	cpse	r14, r25
    3ede:	4c c0       	rjmp	.+152    	; 0x3f78 <main+0x5b0>
				if(!isEOF(&mf)){
    3ee0:	ce 01       	movw	r24, r28
    3ee2:	8e 53       	subi	r24, 0x3E	; 62
    3ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ee6:	0e 94 32 21 	call	0x4264	; 0x4264 <isEOF>
    3eea:	81 11       	cpse	r24, r1
    3eec:	07 c0       	rjmp	.+14     	; 0x3efc <main+0x534>
					getNextEvent(&mf);
    3eee:	ce 01       	movw	r24, r28
    3ef0:	8e 53       	subi	r24, 0x3E	; 62
    3ef2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ef4:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <getNextEvent>
    3ef8:	06 2d       	mov	r16, r6
    3efa:	3f c0       	rjmp	.+126    	; 0x3f7a <main+0x5b2>
				}
				else{
					closeMIDIFile(&mf);
    3efc:	ce 01       	movw	r24, r28
    3efe:	8e 53       	subi	r24, 0x3E	; 62
    3f00:	9f 4f       	sbci	r25, 0xFF	; 255
    3f02:	0e 94 1c 20 	call	0x4038	; 0x4038 <closeMIDIFile>
					lcdPrintData(getLCDString(FINISHED,FINISHED_LEN),FINISHED_LEN);
    3f06:	68 e0       	ldi	r22, 0x08	; 8
    3f08:	8b e8       	ldi	r24, 0x8B	; 139
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	0e 94 61 18 	call	0x30c2	; 0x30c2 <getLCDString>
    3f10:	68 e0       	ldi	r22, 0x08	; 8
    3f12:	0e 94 c9 1c 	call	0x3992	; 0x3992 <lcdPrintData>
    3f16:	06 2d       	mov	r16, r6
					currentAction = NONE;
    3f18:	ee 24       	eor	r14, r14
    3f1a:	ea 94       	dec	r14
    3f1c:	2e c0       	rjmp	.+92     	; 0x3f7a <main+0x5b2>
				}
			}
			else if(currentMode == MIDI_REC && endRecording == TRUE){
    3f1e:	03 30       	cpi	r16, 0x03	; 3
    3f20:	61 f5       	brne	.+88     	; 0x3f7a <main+0x5b2>
    3f22:	a1 e0       	ldi	r26, 0x01	; 1
    3f24:	7a 12       	cpse	r7, r26
    3f26:	29 c0       	rjmp	.+82     	; 0x3f7a <main+0x5b2>
				if(getMicros() > microseconds){
    3f28:	0e 94 3a 18 	call	0x3074	; 0x3074 <getMicros>
    3f2c:	26 16       	cp	r2, r22
    3f2e:	37 06       	cpc	r3, r23
    3f30:	48 06       	cpc	r4, r24
    3f32:	59 06       	cpc	r5, r25
    3f34:	10 f5       	brcc	.+68     	; 0x3f7a <main+0x5b2>
					sendMidiBuffer(mtevent.event.data,mtevent.event.size);
    3f36:	24 96       	adiw	r28, 0x04	; 4
    3f38:	6f ad       	ldd	r22, Y+63	; 0x3f
    3f3a:	24 97       	sbiw	r28, 0x04	; 4
    3f3c:	c1 56       	subi	r28, 0x61	; 97
    3f3e:	dd 4f       	sbci	r29, 0xFD	; 253
    3f40:	88 81       	ld	r24, Y
    3f42:	99 81       	ldd	r25, Y+1	; 0x01
    3f44:	cf 59       	subi	r28, 0x9F	; 159
    3f46:	d2 40       	sbci	r29, 0x02	; 2
    3f48:	0e 94 b6 28 	call	0x516c	; 0x516c <sendMidiBuffer>
					readSRAM(((unsigned char *)&mtevent),sizeof(struct midi_time_event));
    3f4c:	6b e0       	ldi	r22, 0x0B	; 11
    3f4e:	70 e0       	ldi	r23, 0x00	; 0
    3f50:	ce 01       	movw	r24, r28
    3f52:	8f 5b       	subi	r24, 0xBF	; 191
    3f54:	9f 4f       	sbci	r25, 0xFF	; 255
    3f56:	0e 94 5d 32 	call	0x64ba	; 0x64ba <readSRAM>
					microseconds = getMicros() + mtevent.delta; 
    3f5a:	0e 94 3a 18 	call	0x3074	; 0x3074 <getMicros>
    3f5e:	2c 96       	adiw	r28, 0x0c	; 12
    3f60:	2c ad       	ldd	r18, Y+60	; 0x3c
    3f62:	3d ad       	ldd	r19, Y+61	; 0x3d
    3f64:	4e ad       	ldd	r20, Y+62	; 0x3e
    3f66:	5f ad       	ldd	r21, Y+63	; 0x3f
    3f68:	2c 97       	sbiw	r28, 0x0c	; 12
    3f6a:	1b 01       	movw	r2, r22
    3f6c:	2c 01       	movw	r4, r24
    3f6e:	22 0e       	add	r2, r18
    3f70:	33 1e       	adc	r3, r19
    3f72:	44 1e       	adc	r4, r20
    3f74:	55 1e       	adc	r5, r21
    3f76:	01 c0       	rjmp	.+2      	; 0x3f7a <main+0x5b2>
    3f78:	06 2d       	mov	r16, r6
				}
			}
			if(!uartReceiveBufferIsEmpty()){
    3f7a:	0e 94 e5 35 	call	0x6bca	; 0x6bca <uartReceiveBufferIsEmpty>
    3f7e:	81 11       	cpse	r24, r1
    3f80:	bd cd       	rjmp	.-1158   	; 0x3afc <main+0x134>
				byteValue = (unsigned char)uartGetByte();
    3f82:	0e 94 cc 35 	call	0x6b98	; 0x6b98 <uartGetByte>
				if(readMidiMessage(byteValue,&numOfBytes) == TRUE){
    3f86:	be 01       	movw	r22, r28
    3f88:	64 57       	subi	r22, 0x74	; 116
    3f8a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f8c:	0e 94 ff 28 	call	0x51fe	; 0x51fe <readMidiMessage>
    3f90:	81 30       	cpi	r24, 0x01	; 1
    3f92:	09 f0       	breq	.+2      	; 0x3f96 <main+0x5ce>
    3f94:	b3 cd       	rjmp	.-1178   	; 0x3afc <main+0x134>
					sendMidiMessage(numOfBytes);
    3f96:	c4 57       	subi	r28, 0x74	; 116
    3f98:	df 4f       	sbci	r29, 0xFF	; 255
    3f9a:	88 81       	ld	r24, Y
    3f9c:	cc 58       	subi	r28, 0x8C	; 140
    3f9e:	d0 40       	sbci	r29, 0x00	; 0
    3fa0:	0e 94 71 28 	call	0x50e2	; 0x50e2 <sendMidiMessage>
					if(currentMode == MIDI_REC && endRecording == FALSE){
    3fa4:	03 30       	cpi	r16, 0x03	; 3
    3fa6:	09 f0       	breq	.+2      	; 0x3faa <main+0x5e2>
    3fa8:	a9 cd       	rjmp	.-1198   	; 0x3afc <main+0x134>
    3faa:	71 10       	cpse	r7, r1
    3fac:	a7 cd       	rjmp	.-1202   	; 0x3afc <main+0x134>
						delta = (getMicros() - microseconds);
    3fae:	0e 94 3a 18 	call	0x3074	; 0x3074 <getMicros>
						//WriteVarLen(&soundFile,delta);
						writeSRAM((unsigned char *)getMidiStruct(delta),sizeof(struct midi_time_event));						
    3fb2:	62 19       	sub	r22, r2
    3fb4:	73 09       	sbc	r23, r3
    3fb6:	84 09       	sbc	r24, r4
    3fb8:	95 09       	sbc	r25, r5
    3fba:	0e 94 66 28 	call	0x50cc	; 0x50cc <getMidiStruct>
    3fbe:	6b e0       	ldi	r22, 0x0B	; 11
    3fc0:	70 e0       	ldi	r23, 0x00	; 0
    3fc2:	0e 94 83 31 	call	0x6306	; 0x6306 <writeSRAM>
						microseconds = getMicros();
    3fc6:	0e 94 3a 18 	call	0x3074	; 0x3074 <getMicros>
    3fca:	1b 01       	movw	r2, r22
    3fcc:	2c 01       	movw	r4, r24
    3fce:	96 cd       	rjmp	.-1236   	; 0x3afc <main+0x134>
    3fd0:	01 e0       	ldi	r16, 0x01	; 1
    3fd2:	d3 cf       	rjmp	.-90     	; 0x3f7a <main+0x5b2>

00003fd4 <setMidiHandler>:


const char * getFilename(struct MD_MIDIFile *m) 
{ 
	return(m->_fileName); 
}
    3fd4:	fc 01       	movw	r30, r24
    3fd6:	71 83       	std	Z+1, r23	; 0x01
    3fd8:	60 83       	st	Z, r22
    3fda:	08 95       	ret

00003fdc <setMetaHandler>:
    3fdc:	fc 01       	movw	r30, r24
    3fde:	75 83       	std	Z+5, r23	; 0x05
    3fe0:	64 83       	std	Z+4, r22	; 0x04
    3fe2:	08 95       	ret

00003fe4 <setSysexHandler>:
    3fe4:	fc 01       	movw	r30, r24
    3fe6:	73 83       	std	Z+3, r23	; 0x03
    3fe8:	62 83       	std	Z+2, r22	; 0x02
    3fea:	08 95       	ret

00003fec <synchTracks>:
    3fec:	0f 93       	push	r16
    3fee:	1f 93       	push	r17
    3ff0:	cf 93       	push	r28
    3ff2:	df 93       	push	r29
    3ff4:	8c 01       	movw	r16, r24
    3ff6:	fc 01       	movw	r30, r24
    3ff8:	84 a9       	ldd	r24, Z+52	; 0x34
    3ffa:	88 23       	and	r24, r24
    3ffc:	81 f0       	breq	.+32     	; 0x401e <synchTracks+0x32>
    3ffe:	c0 e0       	ldi	r28, 0x00	; 0
    4000:	d9 e1       	ldi	r29, 0x19	; 25
    4002:	c8 01       	movw	r24, r16
    4004:	dc 9f       	mul	r29, r28
    4006:	80 0d       	add	r24, r0
    4008:	91 1d       	adc	r25, r1
    400a:	11 24       	eor	r1, r1
    400c:	85 5b       	subi	r24, 0xB5	; 181
    400e:	9f 4f       	sbci	r25, 0xFF	; 255
    4010:	0e 94 bd 23 	call	0x477a	; 0x477a <syncTime>
    4014:	cf 5f       	subi	r28, 0xFF	; 255
    4016:	f8 01       	movw	r30, r16
    4018:	84 a9       	ldd	r24, Z+52	; 0x34
    401a:	c8 17       	cp	r28, r24
    401c:	90 f3       	brcs	.-28     	; 0x4002 <synchTracks+0x16>
    401e:	0e 94 3a 18 	call	0x3074	; 0x3074 <getMicros>
    4022:	f8 01       	movw	r30, r16
    4024:	fd 96       	adiw	r30, 0x3d	; 61
    4026:	60 83       	st	Z, r22
    4028:	71 83       	std	Z+1, r23	; 0x01
    402a:	82 83       	std	Z+2, r24	; 0x02
    402c:	93 83       	std	Z+3, r25	; 0x03
    402e:	df 91       	pop	r29
    4030:	cf 91       	pop	r28
    4032:	1f 91       	pop	r17
    4034:	0f 91       	pop	r16
    4036:	08 95       	ret

00004038 <closeMIDIFile>:
    4038:	0f 93       	push	r16
    403a:	1f 93       	push	r17
    403c:	cf 93       	push	r28
    403e:	df 93       	push	r29
    4040:	8c 01       	movw	r16, r24
    4042:	fc 01       	movw	r30, r24
    4044:	84 a9       	ldd	r24, Z+52	; 0x34
    4046:	88 23       	and	r24, r24
    4048:	81 f0       	breq	.+32     	; 0x406a <closeMIDIFile+0x32>
    404a:	c0 e0       	ldi	r28, 0x00	; 0
    404c:	d9 e1       	ldi	r29, 0x19	; 25
    404e:	c8 01       	movw	r24, r16
    4050:	dc 9f       	mul	r29, r28
    4052:	80 0d       	add	r24, r0
    4054:	91 1d       	adc	r25, r1
    4056:	11 24       	eor	r1, r1
    4058:	85 5b       	subi	r24, 0xB5	; 181
    405a:	9f 4f       	sbci	r25, 0xFF	; 255
    405c:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <closeTrack>
    4060:	cf 5f       	subi	r28, 0xFF	; 255
    4062:	f8 01       	movw	r30, r16
    4064:	84 a9       	ldd	r24, Z+52	; 0x34
    4066:	c8 17       	cp	r28, r24
    4068:	90 f3       	brcs	.-28     	; 0x404e <closeMIDIFile+0x16>
    406a:	f8 01       	movw	r30, r16
    406c:	14 aa       	std	Z+52, r1	; 0x34
    406e:	ef 5b       	subi	r30, 0xBF	; 191
    4070:	ff 4f       	sbci	r31, 0xFF	; 255
    4072:	10 82       	st	Z, r1
    4074:	31 96       	adiw	r30, 0x01	; 1
    4076:	10 82       	st	Z, r1
    4078:	f8 01       	movw	r30, r16
    407a:	16 a2       	std	Z+38, r1	; 0x26
    407c:	c8 01       	movw	r24, r16
    407e:	06 96       	adiw	r24, 0x06	; 6
    4080:	0e 94 77 13 	call	0x26ee	; 0x26ee <f_close>
    4084:	f8 01       	movw	r30, r16
    4086:	e6 5b       	subi	r30, 0xB6	; 182
    4088:	ff 4f       	sbci	r31, 0xFF	; 255
    408a:	10 82       	st	Z, r1
    408c:	df 91       	pop	r29
    408e:	cf 91       	pop	r28
    4090:	1f 91       	pop	r17
    4092:	0f 91       	pop	r16
    4094:	08 95       	ret

00004096 <calcTickTime>:
    4096:	0f 93       	push	r16
    4098:	1f 93       	push	r17
    409a:	cf 93       	push	r28
    409c:	df 93       	push	r29
    409e:	ec 01       	movw	r28, r24
    40a0:	dc 01       	movw	r26, r24
    40a2:	ac 5b       	subi	r26, 0xBC	; 188
    40a4:	bf 4f       	sbci	r27, 0xFF	; 255
    40a6:	fc 01       	movw	r30, r24
    40a8:	ea 5b       	subi	r30, 0xBA	; 186
    40aa:	ff 4f       	sbci	r31, 0xFF	; 255
    40ac:	2d 91       	ld	r18, X+
    40ae:	3c 91       	ld	r19, X
    40b0:	80 81       	ld	r24, Z
    40b2:	91 81       	ldd	r25, Z+1	; 0x01
    40b4:	28 0f       	add	r18, r24
    40b6:	39 1f       	adc	r19, r25
    40b8:	21 15       	cp	r18, r1
    40ba:	31 05       	cpc	r19, r1
    40bc:	e1 f0       	breq	.+56     	; 0x40f6 <calcTickTime+0x60>
    40be:	0d a9       	ldd	r16, Y+53	; 0x35
    40c0:	1e a9       	ldd	r17, Y+54	; 0x36
    40c2:	01 15       	cp	r16, r1
    40c4:	11 05       	cpc	r17, r1
    40c6:	b9 f0       	breq	.+46     	; 0x40f6 <calcTickTime+0x60>
    40c8:	33 96       	adiw	r30, 0x03	; 3
    40ca:	80 81       	ld	r24, Z
    40cc:	88 23       	and	r24, r24
    40ce:	99 f0       	breq	.+38     	; 0x40f6 <calcTickTime+0x60>
    40d0:	40 e0       	ldi	r20, 0x00	; 0
    40d2:	50 e0       	ldi	r21, 0x00	; 0
    40d4:	60 e0       	ldi	r22, 0x00	; 0
    40d6:	77 e8       	ldi	r23, 0x87	; 135
    40d8:	83 e9       	ldi	r24, 0x93	; 147
    40da:	93 e0       	ldi	r25, 0x03	; 3
    40dc:	0e 94 3a 38 	call	0x7074	; 0x7074 <__divmodsi4>
    40e0:	ca 01       	movw	r24, r20
    40e2:	b9 01       	movw	r22, r18
    40e4:	98 01       	movw	r18, r16
    40e6:	40 e0       	ldi	r20, 0x00	; 0
    40e8:	50 e0       	ldi	r21, 0x00	; 0
    40ea:	0e 94 18 38 	call	0x7030	; 0x7030 <__udivmodsi4>
    40ee:	2f ab       	std	Y+55, r18	; 0x37
    40f0:	38 af       	std	Y+56, r19	; 0x38
    40f2:	49 af       	std	Y+57, r20	; 0x39
    40f4:	5a af       	std	Y+58, r21	; 0x3a
    40f6:	df 91       	pop	r29
    40f8:	cf 91       	pop	r28
    40fa:	1f 91       	pop	r17
    40fc:	0f 91       	pop	r16
    40fe:	08 95       	ret

00004100 <setTempoAdjust>:
    4100:	fc 01       	movw	r30, r24
    4102:	ec 5b       	subi	r30, 0xBC	; 188
    4104:	ff 4f       	sbci	r31, 0xFF	; 255
    4106:	20 81       	ld	r18, Z
    4108:	31 81       	ldd	r19, Z+1	; 0x01
    410a:	26 0f       	add	r18, r22
    410c:	37 1f       	adc	r19, r23
    410e:	23 2b       	or	r18, r19
    4110:	19 f0       	breq	.+6      	; 0x4118 <setTempoAdjust+0x18>
    4112:	32 96       	adiw	r30, 0x02	; 2
    4114:	71 83       	std	Z+1, r23	; 0x01
    4116:	60 83       	st	Z, r22
    4118:	0e 94 4b 20 	call	0x4096	; 0x4096 <calcTickTime>
    411c:	08 95       	ret

0000411e <setTempo>:
    411e:	fc 01       	movw	r30, r24
    4120:	ea 5b       	subi	r30, 0xBA	; 186
    4122:	ff 4f       	sbci	r31, 0xFF	; 255
    4124:	20 81       	ld	r18, Z
    4126:	31 81       	ldd	r19, Z+1	; 0x01
    4128:	26 0f       	add	r18, r22
    412a:	37 1f       	adc	r19, r23
    412c:	23 2b       	or	r18, r19
    412e:	19 f0       	breq	.+6      	; 0x4136 <setTempo+0x18>
    4130:	32 97       	sbiw	r30, 0x02	; 2
    4132:	71 83       	std	Z+1, r23	; 0x01
    4134:	60 83       	st	Z, r22
    4136:	0e 94 4b 20 	call	0x4096	; 0x4096 <calcTickTime>
    413a:	08 95       	ret

0000413c <setTimeSignature>:
    413c:	fc 01       	movw	r30, r24
    413e:	e8 5b       	subi	r30, 0xB8	; 184
    4140:	ff 4f       	sbci	r31, 0xFF	; 255
    4142:	60 83       	st	Z, r22
    4144:	31 96       	adiw	r30, 0x01	; 1
    4146:	40 83       	st	Z, r20
    4148:	0e 94 4b 20 	call	0x4096	; 0x4096 <calcTickTime>
    414c:	08 95       	ret

0000414e <setMicrosecondPerQuarterNote>:
    414e:	0f 93       	push	r16
    4150:	1f 93       	push	r17
    4152:	cf 93       	push	r28
    4154:	df 93       	push	r29
    4156:	ec 01       	movw	r28, r24
    4158:	9a 01       	movw	r18, r20
    415a:	ab 01       	movw	r20, r22
    415c:	8c 01       	movw	r16, r24
    415e:	0c 5b       	subi	r16, 0xBC	; 188
    4160:	1f 4f       	sbci	r17, 0xFF	; 255
    4162:	60 e0       	ldi	r22, 0x00	; 0
    4164:	77 e8       	ldi	r23, 0x87	; 135
    4166:	83 e9       	ldi	r24, 0x93	; 147
    4168:	93 e0       	ldi	r25, 0x03	; 3
    416a:	0e 94 18 38 	call	0x7030	; 0x7030 <__udivmodsi4>
    416e:	f8 01       	movw	r30, r16
    4170:	31 83       	std	Z+1, r19	; 0x01
    4172:	20 83       	st	Z, r18
    4174:	ce 01       	movw	r24, r28
    4176:	0e 94 4b 20 	call	0x4096	; 0x4096 <calcTickTime>
    417a:	df 91       	pop	r29
    417c:	cf 91       	pop	r28
    417e:	1f 91       	pop	r17
    4180:	0f 91       	pop	r16
    4182:	08 95       	ret

00004184 <initialise>:
    4184:	cf 93       	push	r28
    4186:	df 93       	push	r29
    4188:	ec 01       	movw	r28, r24
    418a:	1c aa       	std	Y+52, r1	; 0x34
    418c:	1b aa       	std	Y+51, r1	; 0x33
    418e:	1f aa       	std	Y+55, r1	; 0x37
    4190:	18 ae       	std	Y+56, r1	; 0x38
    4192:	19 ae       	std	Y+57, r1	; 0x39
    4194:	1a ae       	std	Y+58, r1	; 0x3a
    4196:	1c ae       	std	Y+60, r1	; 0x3c
    4198:	1b ae       	std	Y+59, r1	; 0x3b
    419a:	fc 01       	movw	r30, r24
    419c:	ef 5b       	subi	r30, 0xBF	; 191
    419e:	ff 4f       	sbci	r31, 0xFF	; 255
    41a0:	10 82       	st	Z, r1
    41a2:	32 96       	adiw	r30, 0x02	; 2
    41a4:	10 82       	st	Z, r1
    41a6:	31 97       	sbiw	r30, 0x01	; 1
    41a8:	10 82       	st	Z, r1
    41aa:	19 82       	std	Y+1, r1	; 0x01
    41ac:	18 82       	st	Y, r1
    41ae:	1b 82       	std	Y+3, r1	; 0x03
    41b0:	1a 82       	std	Y+2, r1	; 0x02
    41b2:	1d 82       	std	Y+5, r1	; 0x05
    41b4:	1c 82       	std	Y+4, r1	; 0x04
    41b6:	1e a2       	std	Y+38, r1	; 0x26
    41b8:	80 e3       	ldi	r24, 0x30	; 48
    41ba:	90 e0       	ldi	r25, 0x00	; 0
    41bc:	9e ab       	std	Y+54, r25	; 0x36
    41be:	8d ab       	std	Y+53, r24	; 0x35
    41c0:	ce 01       	movw	r24, r28
    41c2:	0e 94 4b 20 	call	0x4096	; 0x4096 <calcTickTime>
    41c6:	68 e7       	ldi	r22, 0x78	; 120
    41c8:	70 e0       	ldi	r23, 0x00	; 0
    41ca:	ce 01       	movw	r24, r28
    41cc:	0e 94 8f 20 	call	0x411e	; 0x411e <setTempo>
    41d0:	60 e0       	ldi	r22, 0x00	; 0
    41d2:	70 e0       	ldi	r23, 0x00	; 0
    41d4:	ce 01       	movw	r24, r28
    41d6:	0e 94 80 20 	call	0x4100	; 0x4100 <setTempoAdjust>
    41da:	fe 01       	movw	r30, r28
    41dc:	ec 5b       	subi	r30, 0xBC	; 188
    41de:	ff 4f       	sbci	r31, 0xFF	; 255
    41e0:	88 e7       	ldi	r24, 0x78	; 120
    41e2:	90 e0       	ldi	r25, 0x00	; 0
    41e4:	91 83       	std	Z+1, r25	; 0x01
    41e6:	80 83       	st	Z, r24
    41e8:	ce 01       	movw	r24, r28
    41ea:	0e 94 4b 20 	call	0x4096	; 0x4096 <calcTickTime>
    41ee:	fe 01       	movw	r30, r28
    41f0:	e8 5b       	subi	r30, 0xB8	; 184
    41f2:	ff 4f       	sbci	r31, 0xFF	; 255
    41f4:	84 e0       	ldi	r24, 0x04	; 4
    41f6:	80 83       	st	Z, r24
    41f8:	31 96       	adiw	r30, 0x01	; 1
    41fa:	80 83       	st	Z, r24
    41fc:	ce 01       	movw	r24, r28
    41fe:	0e 94 4b 20 	call	0x4096	; 0x4096 <calcTickTime>
    4202:	df 91       	pop	r29
    4204:	cf 91       	pop	r28
    4206:	08 95       	ret

00004208 <restart>:
    4208:	0f 93       	push	r16
    420a:	1f 93       	push	r17
    420c:	cf 93       	push	r28
    420e:	df 93       	push	r29
    4210:	8c 01       	movw	r16, r24
    4212:	fc 01       	movw	r30, r24
    4214:	ed 5b       	subi	r30, 0xBD	; 189
    4216:	ff 4f       	sbci	r31, 0xFF	; 255
    4218:	80 81       	ld	r24, Z
    421a:	88 23       	and	r24, r24
    421c:	21 f0       	breq	.+8      	; 0x4226 <restart+0x1e>
    421e:	f8 01       	movw	r30, r16
    4220:	84 a9       	ldd	r24, Z+52	; 0x34
    4222:	82 30       	cpi	r24, 0x02	; 2
    4224:	30 f4       	brcc	.+12     	; 0x4232 <restart+0x2a>
    4226:	f8 01       	movw	r30, r16
    4228:	84 a9       	ldd	r24, Z+52	; 0x34
    422a:	88 23       	and	r24, r24
    422c:	91 f0       	breq	.+36     	; 0x4252 <restart+0x4a>
    422e:	c0 e0       	ldi	r28, 0x00	; 0
    4230:	01 c0       	rjmp	.+2      	; 0x4234 <restart+0x2c>
    4232:	c1 e0       	ldi	r28, 0x01	; 1
    4234:	d9 e1       	ldi	r29, 0x19	; 25
    4236:	c8 01       	movw	r24, r16
    4238:	dc 9f       	mul	r29, r28
    423a:	80 0d       	add	r24, r0
    423c:	91 1d       	adc	r25, r1
    423e:	11 24       	eor	r1, r1
    4240:	85 5b       	subi	r24, 0xB5	; 181
    4242:	9f 4f       	sbci	r25, 0xFF	; 255
    4244:	0e 94 c3 23 	call	0x4786	; 0x4786 <restartTrack>
    4248:	cf 5f       	subi	r28, 0xFF	; 255
    424a:	f8 01       	movw	r30, r16
    424c:	84 a9       	ldd	r24, Z+52	; 0x34
    424e:	c8 17       	cp	r28, r24
    4250:	90 f3       	brcs	.-28     	; 0x4236 <restart+0x2e>
    4252:	f8 01       	movw	r30, r16
    4254:	ef 5b       	subi	r30, 0xBF	; 191
    4256:	ff 4f       	sbci	r31, 0xFF	; 255
    4258:	10 82       	st	Z, r1
    425a:	df 91       	pop	r29
    425c:	cf 91       	pop	r28
    425e:	1f 91       	pop	r17
    4260:	0f 91       	pop	r16
    4262:	08 95       	ret

00004264 <isEOF>:
    4264:	0f 93       	push	r16
    4266:	1f 93       	push	r17
    4268:	cf 93       	push	r28
    426a:	df 93       	push	r29
    426c:	8c 01       	movw	r16, r24
    426e:	fc 01       	movw	r30, r24
    4270:	84 a9       	ldd	r24, Z+52	; 0x34
    4272:	88 23       	and	r24, r24
    4274:	71 f0       	breq	.+28     	; 0x4292 <isEOF+0x2e>
    4276:	c0 e0       	ldi	r28, 0x00	; 0
    4278:	d9 e1       	ldi	r29, 0x19	; 25
    427a:	c8 01       	movw	r24, r16
    427c:	dc 9f       	mul	r29, r28
    427e:	80 0d       	add	r24, r0
    4280:	91 1d       	adc	r25, r1
    4282:	11 24       	eor	r1, r1
    4284:	85 5b       	subi	r24, 0xB5	; 181
    4286:	9f 4f       	sbci	r25, 0xFF	; 255
    4288:	0e 94 ba 23 	call	0x4774	; 0x4774 <getEndOfTrack>
    428c:	81 11       	cpse	r24, r1
    428e:	0e c0       	rjmp	.+28     	; 0x42ac <isEOF+0x48>
    4290:	13 c0       	rjmp	.+38     	; 0x42b8 <isEOF+0x54>
    4292:	f8 01       	movw	r30, r16
    4294:	ed 5b       	subi	r30, 0xBD	; 189
    4296:	ff 4f       	sbci	r31, 0xFF	; 255
    4298:	80 81       	ld	r24, Z
    429a:	88 23       	and	r24, r24
    429c:	29 f0       	breq	.+10     	; 0x42a8 <isEOF+0x44>
    429e:	c8 01       	movw	r24, r16
    42a0:	0e 94 04 21 	call	0x4208	; 0x4208 <restart>
    42a4:	80 e0       	ldi	r24, 0x00	; 0
    42a6:	08 c0       	rjmp	.+16     	; 0x42b8 <isEOF+0x54>
    42a8:	81 e0       	ldi	r24, 0x01	; 1
    42aa:	06 c0       	rjmp	.+12     	; 0x42b8 <isEOF+0x54>
    42ac:	cf 5f       	subi	r28, 0xFF	; 255
    42ae:	f8 01       	movw	r30, r16
    42b0:	84 a9       	ldd	r24, Z+52	; 0x34
    42b2:	c8 17       	cp	r28, r24
    42b4:	10 f3       	brcs	.-60     	; 0x427a <isEOF+0x16>
    42b6:	ed cf       	rjmp	.-38     	; 0x4292 <isEOF+0x2e>
    42b8:	df 91       	pop	r29
    42ba:	cf 91       	pop	r28
    42bc:	1f 91       	pop	r17
    42be:	0f 91       	pop	r16
    42c0:	08 95       	ret

000042c2 <tickClock>:
    42c2:	8f 92       	push	r8
    42c4:	9f 92       	push	r9
    42c6:	af 92       	push	r10
    42c8:	bf 92       	push	r11
    42ca:	cf 92       	push	r12
    42cc:	df 92       	push	r13
    42ce:	ef 92       	push	r14
    42d0:	ff 92       	push	r15
    42d2:	0f 93       	push	r16
    42d4:	1f 93       	push	r17
    42d6:	cf 93       	push	r28
    42d8:	df 93       	push	r29
    42da:	ec 01       	movw	r28, r24
    42dc:	0e 94 3a 18 	call	0x3074	; 0x3074 <getMicros>
    42e0:	2b ad       	ldd	r18, Y+59	; 0x3b
    42e2:	3c ad       	ldd	r19, Y+60	; 0x3c
    42e4:	69 01       	movw	r12, r18
    42e6:	e1 2c       	mov	r14, r1
    42e8:	f1 2c       	mov	r15, r1
    42ea:	fe 01       	movw	r30, r28
    42ec:	fd 96       	adiw	r30, 0x3d	; 61
    42ee:	00 81       	ld	r16, Z
    42f0:	11 81       	ldd	r17, Z+1	; 0x01
    42f2:	22 81       	ldd	r18, Z+2	; 0x02
    42f4:	33 81       	ldd	r19, Z+3	; 0x03
    42f6:	46 01       	movw	r8, r12
    42f8:	57 01       	movw	r10, r14
    42fa:	80 1a       	sub	r8, r16
    42fc:	91 0a       	sbc	r9, r17
    42fe:	a2 0a       	sbc	r10, r18
    4300:	b3 0a       	sbc	r11, r19
    4302:	75 01       	movw	r14, r10
    4304:	64 01       	movw	r12, r8
    4306:	c6 0e       	add	r12, r22
    4308:	d7 1e       	adc	r13, r23
    430a:	e8 1e       	adc	r14, r24
    430c:	f9 1e       	adc	r15, r25
    430e:	8f a8       	ldd	r8, Y+55	; 0x37
    4310:	98 ac       	ldd	r9, Y+56	; 0x38
    4312:	a9 ac       	ldd	r10, Y+57	; 0x39
    4314:	ba ac       	ldd	r11, Y+58	; 0x3a
    4316:	c8 14       	cp	r12, r8
    4318:	d9 04       	cpc	r13, r9
    431a:	ea 04       	cpc	r14, r10
    431c:	fb 04       	cpc	r15, r11
    431e:	d8 f0       	brcs	.+54     	; 0x4356 <tickClock+0x94>
    4320:	c7 01       	movw	r24, r14
    4322:	b6 01       	movw	r22, r12
    4324:	a5 01       	movw	r20, r10
    4326:	94 01       	movw	r18, r8
    4328:	0e 94 18 38 	call	0x7030	; 0x7030 <__udivmodsi4>
    432c:	89 01       	movw	r16, r18
    432e:	28 9d       	mul	r18, r8
    4330:	c0 01       	movw	r24, r0
    4332:	29 9d       	mul	r18, r9
    4334:	90 0d       	add	r25, r0
    4336:	38 9d       	mul	r19, r8
    4338:	90 0d       	add	r25, r0
    433a:	11 24       	eor	r1, r1
    433c:	56 01       	movw	r10, r12
    433e:	a8 1a       	sub	r10, r24
    4340:	b9 0a       	sbc	r11, r25
    4342:	bc ae       	std	Y+60, r11	; 0x3c
    4344:	ab ae       	std	Y+59, r10	; 0x3b
    4346:	0e 94 3a 18 	call	0x3074	; 0x3074 <getMicros>
    434a:	ed 96       	adiw	r28, 0x3d	; 61
    434c:	68 83       	st	Y, r22
    434e:	79 83       	std	Y+1, r23	; 0x01
    4350:	8a 83       	std	Y+2, r24	; 0x02
    4352:	9b 83       	std	Y+3, r25	; 0x03
    4354:	02 c0       	rjmp	.+4      	; 0x435a <tickClock+0x98>
    4356:	00 e0       	ldi	r16, 0x00	; 0
    4358:	10 e0       	ldi	r17, 0x00	; 0
    435a:	c8 01       	movw	r24, r16
    435c:	df 91       	pop	r29
    435e:	cf 91       	pop	r28
    4360:	1f 91       	pop	r17
    4362:	0f 91       	pop	r16
    4364:	ff 90       	pop	r15
    4366:	ef 90       	pop	r14
    4368:	df 90       	pop	r13
    436a:	cf 90       	pop	r12
    436c:	bf 90       	pop	r11
    436e:	af 90       	pop	r10
    4370:	9f 90       	pop	r9
    4372:	8f 90       	pop	r8
    4374:	08 95       	ret

00004376 <processEvents>:
    4376:	af 92       	push	r10
    4378:	bf 92       	push	r11
    437a:	cf 92       	push	r12
    437c:	df 92       	push	r13
    437e:	ef 92       	push	r14
    4380:	ff 92       	push	r15
    4382:	0f 93       	push	r16
    4384:	1f 93       	push	r17
    4386:	cf 93       	push	r28
    4388:	df 93       	push	r29
    438a:	c0 e0       	ldi	r28, 0x00	; 0
    438c:	fc 01       	movw	r30, r24
    438e:	24 a9       	ldd	r18, Z+52	; 0x34
    4390:	22 23       	and	r18, r18
    4392:	21 f1       	breq	.+72     	; 0x43dc <processEvents+0x66>
    4394:	7b 01       	movw	r14, r22
    4396:	8c 01       	movw	r16, r24
    4398:	d0 e0       	ldi	r29, 0x00	; 0
    439a:	0f 2e       	mov	r0, r31
    439c:	f9 e1       	ldi	r31, 0x19	; 25
    439e:	df 2e       	mov	r13, r31
    43a0:	f0 2d       	mov	r31, r0
    43a2:	bb 24       	eor	r11, r11
    43a4:	b3 94       	inc	r11
    43a6:	cc 24       	eor	r12, r12
    43a8:	c3 94       	inc	r12
    43aa:	a1 2c       	mov	r10, r1
    43ac:	b8 01       	movw	r22, r16
    43ae:	dd 9e       	mul	r13, r29
    43b0:	60 0d       	add	r22, r0
    43b2:	71 1d       	adc	r23, r1
    43b4:	11 24       	eor	r1, r1
    43b6:	65 5b       	subi	r22, 0xB5	; 181
    43b8:	7f 4f       	sbci	r23, 0xFF	; 255
    43ba:	a7 01       	movw	r20, r14
    43bc:	c8 01       	movw	r24, r16
    43be:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <getNextTrackEvent>
    43c2:	c1 11       	cpse	r28, r1
    43c4:	05 c0       	rjmp	.+10     	; 0x43d0 <processEvents+0x5a>
    43c6:	cc 2d       	mov	r28, r12
    43c8:	81 11       	cpse	r24, r1
    43ca:	03 c0       	rjmp	.+6      	; 0x43d2 <processEvents+0x5c>
    43cc:	ca 2d       	mov	r28, r10
    43ce:	01 c0       	rjmp	.+2      	; 0x43d2 <processEvents+0x5c>
    43d0:	cb 2d       	mov	r28, r11
    43d2:	df 5f       	subi	r29, 0xFF	; 255
    43d4:	f8 01       	movw	r30, r16
    43d6:	84 a9       	ldd	r24, Z+52	; 0x34
    43d8:	d8 17       	cp	r29, r24
    43da:	40 f3       	brcs	.-48     	; 0x43ac <processEvents+0x36>
    43dc:	df 91       	pop	r29
    43de:	cf 91       	pop	r28
    43e0:	1f 91       	pop	r17
    43e2:	0f 91       	pop	r16
    43e4:	ff 90       	pop	r15
    43e6:	ef 90       	pop	r14
    43e8:	df 90       	pop	r13
    43ea:	cf 90       	pop	r12
    43ec:	bf 90       	pop	r11
    43ee:	af 90       	pop	r10
    43f0:	08 95       	ret

000043f2 <getNextEvent>:
    43f2:	0f 93       	push	r16
    43f4:	1f 93       	push	r17
    43f6:	cf 93       	push	r28
    43f8:	fc 01       	movw	r30, r24
    43fa:	ee 5b       	subi	r30, 0xBE	; 190
    43fc:	ff 4f       	sbci	r31, 0xFF	; 255
    43fe:	c0 81       	ld	r28, Z
    4400:	c1 11       	cpse	r28, r1
    4402:	18 c0       	rjmp	.+48     	; 0x4434 <getNextEvent+0x42>
    4404:	8c 01       	movw	r16, r24
    4406:	31 97       	sbiw	r30, 0x01	; 1
    4408:	80 81       	ld	r24, Z
    440a:	81 11       	cpse	r24, r1
    440c:	08 c0       	rjmp	.+16     	; 0x441e <getNextEvent+0x2c>
    440e:	c8 01       	movw	r24, r16
    4410:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <synchTracks>
    4414:	81 e0       	ldi	r24, 0x01	; 1
    4416:	f8 01       	movw	r30, r16
    4418:	ef 5b       	subi	r30, 0xBF	; 191
    441a:	ff 4f       	sbci	r31, 0xFF	; 255
    441c:	80 83       	st	Z, r24
    441e:	c8 01       	movw	r24, r16
    4420:	0e 94 61 21 	call	0x42c2	; 0x42c2 <tickClock>
    4424:	00 97       	sbiw	r24, 0x00	; 0
    4426:	39 f0       	breq	.+14     	; 0x4436 <getNextEvent+0x44>
    4428:	bc 01       	movw	r22, r24
    442a:	c8 01       	movw	r24, r16
    442c:	0e 94 bb 21 	call	0x4376	; 0x4376 <processEvents>
    4430:	c1 e0       	ldi	r28, 0x01	; 1
    4432:	01 c0       	rjmp	.+2      	; 0x4436 <getNextEvent+0x44>
    4434:	c0 e0       	ldi	r28, 0x00	; 0
    4436:	8c 2f       	mov	r24, r28
    4438:	cf 91       	pop	r28
    443a:	1f 91       	pop	r17
    443c:	0f 91       	pop	r16
    443e:	08 95       	ret

00004440 <loadMIDIFile>:
    4440:	8f 92       	push	r8
    4442:	9f 92       	push	r9
    4444:	af 92       	push	r10
    4446:	bf 92       	push	r11
    4448:	cf 92       	push	r12
    444a:	df 92       	push	r13
    444c:	ef 92       	push	r14
    444e:	ff 92       	push	r15
    4450:	0f 93       	push	r16
    4452:	1f 93       	push	r17
    4454:	cf 93       	push	r28
    4456:	df 93       	push	r29
    4458:	cd b7       	in	r28, 0x3d	; 61
    445a:	de b7       	in	r29, 0x3e	; 62
    445c:	29 97       	sbiw	r28, 0x09	; 9
    445e:	0f b6       	in	r0, 0x3f	; 63
    4460:	f8 94       	cli
    4462:	de bf       	out	0x3e, r29	; 62
    4464:	0f be       	out	0x3f, r0	; 63
    4466:	cd bf       	out	0x3d, r28	; 61
    4468:	fc 01       	movw	r30, r24
    446a:	26 a1       	ldd	r18, Z+38	; 0x26
    446c:	22 23       	and	r18, r18
    446e:	09 f4       	brne	.+2      	; 0x4472 <loadMIDIFile+0x32>
    4470:	d0 c0       	rjmp	.+416    	; 0x4612 <loadMIDIFile+0x1d2>
    4472:	8c 01       	movw	r16, r24
    4474:	6c 01       	movw	r12, r24
    4476:	f6 e0       	ldi	r31, 0x06	; 6
    4478:	cf 0e       	add	r12, r31
    447a:	d1 1c       	adc	r13, r1
    447c:	bc 01       	movw	r22, r24
    447e:	6a 5d       	subi	r22, 0xDA	; 218
    4480:	7f 4f       	sbci	r23, 0xFF	; 255
    4482:	41 e0       	ldi	r20, 0x01	; 1
    4484:	c6 01       	movw	r24, r12
    4486:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <f_open>
    448a:	81 11       	cpse	r24, r1
    448c:	c5 c0       	rjmp	.+394    	; 0x4618 <loadMIDIFile+0x1d8>
    448e:	9e 01       	movw	r18, r28
    4490:	2f 5f       	subi	r18, 0xFF	; 255
    4492:	3f 4f       	sbci	r19, 0xFF	; 255
    4494:	44 e0       	ldi	r20, 0x04	; 4
    4496:	50 e0       	ldi	r21, 0x00	; 0
    4498:	be 01       	movw	r22, r28
    449a:	6b 5f       	subi	r22, 0xFB	; 251
    449c:	7f 4f       	sbci	r23, 0xFF	; 255
    449e:	c6 01       	movw	r24, r12
    44a0:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
    44a4:	19 86       	std	Y+9, r1	; 0x09
    44a6:	65 e4       	ldi	r22, 0x45	; 69
    44a8:	71 e0       	ldi	r23, 0x01	; 1
    44aa:	ce 01       	movw	r24, r28
    44ac:	05 96       	adiw	r24, 0x05	; 5
    44ae:	0e 94 9a 39 	call	0x7334	; 0x7334 <strcmp>
    44b2:	89 2b       	or	r24, r25
    44b4:	31 f0       	breq	.+12     	; 0x44c2 <loadMIDIFile+0x82>
    44b6:	c6 01       	movw	r24, r12
    44b8:	0e 94 77 13 	call	0x26ee	; 0x26ee <f_close>
    44bc:	83 e0       	ldi	r24, 0x03	; 3
    44be:	90 e0       	ldi	r25, 0x00	; 0
    44c0:	b0 c0       	rjmp	.+352    	; 0x4622 <loadMIDIFile+0x1e2>
    44c2:	64 e0       	ldi	r22, 0x04	; 4
    44c4:	c6 01       	movw	r24, r12
    44c6:	0e 94 2b 23 	call	0x4656	; 0x4656 <readMultiByte>
    44ca:	69 83       	std	Y+1, r22	; 0x01
    44cc:	7a 83       	std	Y+2, r23	; 0x02
    44ce:	8b 83       	std	Y+3, r24	; 0x03
    44d0:	9c 83       	std	Y+4, r25	; 0x04
    44d2:	66 30       	cpi	r22, 0x06	; 6
    44d4:	71 05       	cpc	r23, r1
    44d6:	81 05       	cpc	r24, r1
    44d8:	91 05       	cpc	r25, r1
    44da:	31 f0       	breq	.+12     	; 0x44e8 <loadMIDIFile+0xa8>
    44dc:	c6 01       	movw	r24, r12
    44de:	0e 94 77 13 	call	0x26ee	; 0x26ee <f_close>
    44e2:	84 e0       	ldi	r24, 0x04	; 4
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	9d c0       	rjmp	.+314    	; 0x4622 <loadMIDIFile+0x1e2>
    44e8:	62 e0       	ldi	r22, 0x02	; 2
    44ea:	c6 01       	movw	r24, r12
    44ec:	0e 94 2b 23 	call	0x4656	; 0x4656 <readMultiByte>
    44f0:	62 30       	cpi	r22, 0x02	; 2
    44f2:	71 05       	cpc	r23, r1
    44f4:	30 f0       	brcs	.+12     	; 0x4502 <loadMIDIFile+0xc2>
    44f6:	c6 01       	movw	r24, r12
    44f8:	0e 94 77 13 	call	0x26ee	; 0x26ee <f_close>
    44fc:	85 e0       	ldi	r24, 0x05	; 5
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	90 c0       	rjmp	.+288    	; 0x4622 <loadMIDIFile+0x1e2>
    4502:	f8 01       	movw	r30, r16
    4504:	63 ab       	std	Z+51, r22	; 0x33
    4506:	62 e0       	ldi	r22, 0x02	; 2
    4508:	c6 01       	movw	r24, r12
    450a:	0e 94 2b 23 	call	0x4656	; 0x4656 <readMultiByte>
    450e:	27 2f       	mov	r18, r23
    4510:	86 2f       	mov	r24, r22
    4512:	92 2f       	mov	r25, r18
    4514:	f8 01       	movw	r30, r16
    4516:	23 a9       	ldd	r18, Z+51	; 0x33
    4518:	21 11       	cpse	r18, r1
    451a:	08 c0       	rjmp	.+16     	; 0x452c <loadMIDIFile+0xec>
    451c:	01 97       	sbiw	r24, 0x01	; 1
    451e:	71 f0       	breq	.+28     	; 0x453c <loadMIDIFile+0xfc>
    4520:	c6 01       	movw	r24, r12
    4522:	0e 94 77 13 	call	0x26ee	; 0x26ee <f_close>
    4526:	86 e0       	ldi	r24, 0x06	; 6
    4528:	90 e0       	ldi	r25, 0x00	; 0
    452a:	7b c0       	rjmp	.+246    	; 0x4622 <loadMIDIFile+0x1e2>
    452c:	41 97       	sbiw	r24, 0x11	; 17
    452e:	30 f0       	brcs	.+12     	; 0x453c <loadMIDIFile+0xfc>
    4530:	c6 01       	movw	r24, r12
    4532:	0e 94 77 13 	call	0x26ee	; 0x26ee <f_close>
    4536:	87 e0       	ldi	r24, 0x07	; 7
    4538:	90 e0       	ldi	r25, 0x00	; 0
    453a:	73 c0       	rjmp	.+230    	; 0x4622 <loadMIDIFile+0x1e2>
    453c:	f8 01       	movw	r30, r16
    453e:	64 ab       	std	Z+52, r22	; 0x34
    4540:	62 e0       	ldi	r22, 0x02	; 2
    4542:	c6 01       	movw	r24, r12
    4544:	0e 94 2b 23 	call	0x4656	; 0x4656 <readMultiByte>
    4548:	ab 01       	movw	r20, r22
    454a:	77 23       	and	r23, r23
    454c:	54 f5       	brge	.+84     	; 0x45a2 <loadMIDIFile+0x162>
    454e:	27 2f       	mov	r18, r23
    4550:	33 27       	eor	r19, r19
    4552:	23 3e       	cpi	r18, 0xE3	; 227
    4554:	31 05       	cpc	r19, r1
    4556:	d9 f0       	breq	.+54     	; 0x458e <loadMIDIFile+0x14e>
    4558:	20 f4       	brcc	.+8      	; 0x4562 <loadMIDIFile+0x122>
    455a:	22 3e       	cpi	r18, 0xE2	; 226
    455c:	31 05       	cpc	r19, r1
    455e:	59 f0       	breq	.+22     	; 0x4576 <loadMIDIFile+0x136>
    4560:	0d c0       	rjmp	.+26     	; 0x457c <loadMIDIFile+0x13c>
    4562:	27 3e       	cpi	r18, 0xE7	; 231
    4564:	31 05       	cpc	r19, r1
    4566:	21 f0       	breq	.+8      	; 0x4570 <loadMIDIFile+0x130>
    4568:	28 3e       	cpi	r18, 0xE8	; 232
    456a:	31 05       	cpc	r19, r1
    456c:	69 f0       	breq	.+26     	; 0x4588 <loadMIDIFile+0x148>
    456e:	06 c0       	rjmp	.+12     	; 0x457c <loadMIDIFile+0x13c>
    4570:	29 e1       	ldi	r18, 0x19	; 25
    4572:	30 e0       	ldi	r19, 0x00	; 0
    4574:	0e c0       	rjmp	.+28     	; 0x4592 <loadMIDIFile+0x152>
    4576:	2e e1       	ldi	r18, 0x1E	; 30
    4578:	30 e0       	ldi	r19, 0x00	; 0
    457a:	0b c0       	rjmp	.+22     	; 0x4592 <loadMIDIFile+0x152>
    457c:	c6 01       	movw	r24, r12
    457e:	0e 94 77 13 	call	0x26ee	; 0x26ee <f_close>
    4582:	87 e0       	ldi	r24, 0x07	; 7
    4584:	90 e0       	ldi	r25, 0x00	; 0
    4586:	4d c0       	rjmp	.+154    	; 0x4622 <loadMIDIFile+0x1e2>
    4588:	28 e1       	ldi	r18, 0x18	; 24
    458a:	30 e0       	ldi	r19, 0x00	; 0
    458c:	02 c0       	rjmp	.+4      	; 0x4592 <loadMIDIFile+0x152>
    458e:	2d e1       	ldi	r18, 0x1D	; 29
    4590:	30 e0       	ldi	r19, 0x00	; 0
    4592:	77 27       	eor	r23, r23
    4594:	62 9f       	mul	r22, r18
    4596:	a0 01       	movw	r20, r0
    4598:	63 9f       	mul	r22, r19
    459a:	50 0d       	add	r21, r0
    459c:	72 9f       	mul	r23, r18
    459e:	50 0d       	add	r21, r0
    45a0:	11 24       	eor	r1, r1
    45a2:	f8 01       	movw	r30, r16
    45a4:	56 ab       	std	Z+54, r21	; 0x36
    45a6:	45 ab       	std	Z+53, r20	; 0x35
    45a8:	c8 01       	movw	r24, r16
    45aa:	0e 94 4b 20 	call	0x4096	; 0x4096 <calcTickTime>
    45ae:	f8 01       	movw	r30, r16
    45b0:	84 a9       	ldd	r24, Z+52	; 0x34
    45b2:	88 23       	and	r24, r24
    45b4:	a1 f1       	breq	.+104    	; 0x461e <loadMIDIFile+0x1de>
    45b6:	b1 2c       	mov	r11, r1
    45b8:	0f 2e       	mov	r0, r31
    45ba:	f9 e1       	ldi	r31, 0x19	; 25
    45bc:	af 2e       	mov	r10, r31
    45be:	f0 2d       	mov	r31, r0
    45c0:	8b 2c       	mov	r8, r11
    45c2:	91 2c       	mov	r9, r1
    45c4:	a8 9c       	mul	r10, r8
    45c6:	c0 01       	movw	r24, r0
    45c8:	a9 9c       	mul	r10, r9
    45ca:	90 0d       	add	r25, r0
    45cc:	11 24       	eor	r1, r1
    45ce:	85 5b       	subi	r24, 0xB5	; 181
    45d0:	9f 4f       	sbci	r25, 0xFF	; 255
    45d2:	a8 01       	movw	r20, r16
    45d4:	6b 2d       	mov	r22, r11
    45d6:	80 0f       	add	r24, r16
    45d8:	91 1f       	adc	r25, r17
    45da:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <loadTrack>
    45de:	7c 01       	movw	r14, r24
    45e0:	01 96       	adiw	r24, 0x01	; 1
    45e2:	79 f0       	breq	.+30     	; 0x4602 <loadMIDIFile+0x1c2>
    45e4:	c6 01       	movw	r24, r12
    45e6:	0e 94 77 13 	call	0x26ee	; 0x26ee <f_close>
    45ea:	8f ef       	ldi	r24, 0xFF	; 255
    45ec:	88 1a       	sub	r8, r24
    45ee:	98 0a       	sbc	r9, r24
    45f0:	2a e0       	ldi	r18, 0x0A	; 10
    45f2:	28 9d       	mul	r18, r8
    45f4:	c0 01       	movw	r24, r0
    45f6:	29 9d       	mul	r18, r9
    45f8:	90 0d       	add	r25, r0
    45fa:	11 24       	eor	r1, r1
    45fc:	8e 0d       	add	r24, r14
    45fe:	9f 1d       	adc	r25, r15
    4600:	10 c0       	rjmp	.+32     	; 0x4622 <loadMIDIFile+0x1e2>
    4602:	b3 94       	inc	r11
    4604:	f8 01       	movw	r30, r16
    4606:	84 a9       	ldd	r24, Z+52	; 0x34
    4608:	b8 16       	cp	r11, r24
    460a:	d0 f2       	brcs	.-76     	; 0x45c0 <loadMIDIFile+0x180>
    460c:	8f ef       	ldi	r24, 0xFF	; 255
    460e:	9f ef       	ldi	r25, 0xFF	; 255
    4610:	08 c0       	rjmp	.+16     	; 0x4622 <loadMIDIFile+0x1e2>
    4612:	80 e0       	ldi	r24, 0x00	; 0
    4614:	90 e0       	ldi	r25, 0x00	; 0
    4616:	05 c0       	rjmp	.+10     	; 0x4622 <loadMIDIFile+0x1e2>
    4618:	82 e0       	ldi	r24, 0x02	; 2
    461a:	90 e0       	ldi	r25, 0x00	; 0
    461c:	02 c0       	rjmp	.+4      	; 0x4622 <loadMIDIFile+0x1e2>
    461e:	8f ef       	ldi	r24, 0xFF	; 255
    4620:	9f ef       	ldi	r25, 0xFF	; 255
    4622:	29 96       	adiw	r28, 0x09	; 9
    4624:	0f b6       	in	r0, 0x3f	; 63
    4626:	f8 94       	cli
    4628:	de bf       	out	0x3e, r29	; 62
    462a:	0f be       	out	0x3f, r0	; 63
    462c:	cd bf       	out	0x3d, r28	; 61
    462e:	df 91       	pop	r29
    4630:	cf 91       	pop	r28
    4632:	1f 91       	pop	r17
    4634:	0f 91       	pop	r16
    4636:	ff 90       	pop	r15
    4638:	ef 90       	pop	r14
    463a:	df 90       	pop	r13
    463c:	cf 90       	pop	r12
    463e:	bf 90       	pop	r11
    4640:	af 90       	pop	r10
    4642:	9f 90       	pop	r9
    4644:	8f 90       	pop	r8
    4646:	08 95       	ret

00004648 <setFilename>:

void setFilename(struct MD_MIDIFile *m,const char* aname) 
{ 
	if (aname != NULL) strcpy(m->_fileName, aname); 
    4648:	61 15       	cp	r22, r1
    464a:	71 05       	cpc	r23, r1
    464c:	19 f0       	breq	.+6      	; 0x4654 <setFilename+0xc>
    464e:	86 96       	adiw	r24, 0x26	; 38
    4650:	0e 94 a3 39 	call	0x7346	; 0x7346 <strcpy>
    4654:	08 95       	ret

00004656 <readMultiByte>:
 * \brief Main file for helper functions implementation
 */

uint32_t readMultiByte(FIL *f, uint8_t nLen)
// read fixed length parameter from input
{
    4656:	af 92       	push	r10
    4658:	bf 92       	push	r11
    465a:	cf 92       	push	r12
    465c:	df 92       	push	r13
    465e:	ef 92       	push	r14
    4660:	ff 92       	push	r15
    4662:	0f 93       	push	r16
    4664:	1f 93       	push	r17
    4666:	cf 93       	push	r28
    4668:	df 93       	push	r29
    466a:	00 d0       	rcall	.+0      	; 0x466c <readMultiByte+0x16>
    466c:	1f 92       	push	r1
    466e:	cd b7       	in	r28, 0x3d	; 61
    4670:	de b7       	in	r29, 0x3e	; 62
  uint32_t  value = 0L;
  uint8_t c;
  UINT d;
  for (uint8_t i=0; i<nLen; i++)
    4672:	66 23       	and	r22, r22
    4674:	f1 f0       	breq	.+60     	; 0x46b2 <readMultiByte+0x5c>
    4676:	a6 2e       	mov	r10, r22
    4678:	8c 01       	movw	r16, r24
    467a:	b1 2c       	mov	r11, r1
    467c:	c1 2c       	mov	r12, r1
    467e:	d1 2c       	mov	r13, r1
    4680:	76 01       	movw	r14, r12
  {
    f_read(f,&c,1,&d);
    4682:	9e 01       	movw	r18, r28
    4684:	2e 5f       	subi	r18, 0xFE	; 254
    4686:	3f 4f       	sbci	r19, 0xFF	; 255
    4688:	41 e0       	ldi	r20, 0x01	; 1
    468a:	50 e0       	ldi	r21, 0x00	; 0
    468c:	be 01       	movw	r22, r28
    468e:	6f 5f       	subi	r22, 0xFF	; 255
    4690:	7f 4f       	sbci	r23, 0xFF	; 255
    4692:	c8 01       	movw	r24, r16
    4694:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
	value = (value << 8) + c;
    4698:	fe 2c       	mov	r15, r14
    469a:	ed 2c       	mov	r14, r13
    469c:	dc 2c       	mov	r13, r12
    469e:	cc 24       	eor	r12, r12
    46a0:	89 81       	ldd	r24, Y+1	; 0x01
    46a2:	c8 0e       	add	r12, r24
    46a4:	d1 1c       	adc	r13, r1
    46a6:	e1 1c       	adc	r14, r1
    46a8:	f1 1c       	adc	r15, r1
// read fixed length parameter from input
{
  uint32_t  value = 0L;
  uint8_t c;
  UINT d;
  for (uint8_t i=0; i<nLen; i++)
    46aa:	b3 94       	inc	r11
    46ac:	ab 10       	cpse	r10, r11
    46ae:	e9 cf       	rjmp	.-46     	; 0x4682 <readMultiByte+0x2c>
    46b0:	03 c0       	rjmp	.+6      	; 0x46b8 <readMultiByte+0x62>
 */

uint32_t readMultiByte(FIL *f, uint8_t nLen)
// read fixed length parameter from input
{
  uint32_t  value = 0L;
    46b2:	c1 2c       	mov	r12, r1
    46b4:	d1 2c       	mov	r13, r1
    46b6:	76 01       	movw	r14, r12
    f_read(f,&c,1,&d);
	value = (value << 8) + c;
  }
  
  return(value);
}
    46b8:	c7 01       	movw	r24, r14
    46ba:	b6 01       	movw	r22, r12
    46bc:	0f 90       	pop	r0
    46be:	0f 90       	pop	r0
    46c0:	0f 90       	pop	r0
    46c2:	df 91       	pop	r29
    46c4:	cf 91       	pop	r28
    46c6:	1f 91       	pop	r17
    46c8:	0f 91       	pop	r16
    46ca:	ff 90       	pop	r15
    46cc:	ef 90       	pop	r14
    46ce:	df 90       	pop	r13
    46d0:	cf 90       	pop	r12
    46d2:	bf 90       	pop	r11
    46d4:	af 90       	pop	r10
    46d6:	08 95       	ret

000046d8 <readVarLen>:

uint32_t readVarLen(FIL *f)
// read variable length parameter from input
{
    46d8:	cf 92       	push	r12
    46da:	df 92       	push	r13
    46dc:	ef 92       	push	r14
    46de:	ff 92       	push	r15
    46e0:	0f 93       	push	r16
    46e2:	1f 93       	push	r17
    46e4:	cf 93       	push	r28
    46e6:	df 93       	push	r29
    46e8:	00 d0       	rcall	.+0      	; 0x46ea <readVarLen+0x12>
    46ea:	1f 92       	push	r1
    46ec:	cd b7       	in	r28, 0x3d	; 61
    46ee:	de b7       	in	r29, 0x3e	; 62
    46f0:	8c 01       	movw	r16, r24
  uint32_t  value = 0;
    46f2:	c1 2c       	mov	r12, r1
    46f4:	d1 2c       	mov	r13, r1
    46f6:	76 01       	movw	r14, r12
  uint8_t      c;
  UINT d;

  do
  {
    f_read(f,&c,1,&d);	
    46f8:	9e 01       	movw	r18, r28
    46fa:	2e 5f       	subi	r18, 0xFE	; 254
    46fc:	3f 4f       	sbci	r19, 0xFF	; 255
    46fe:	41 e0       	ldi	r20, 0x01	; 1
    4700:	50 e0       	ldi	r21, 0x00	; 0
    4702:	be 01       	movw	r22, r28
    4704:	6f 5f       	subi	r22, 0xFF	; 255
    4706:	7f 4f       	sbci	r23, 0xFF	; 255
    4708:	c8 01       	movw	r24, r16
    470a:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
    value = (value << 7) + (c & 0x7f);
    470e:	cc 0c       	add	r12, r12
    4710:	dd 1c       	adc	r13, r13
    4712:	ee 1c       	adc	r14, r14
    4714:	ff 1c       	adc	r15, r15
    4716:	cc 0c       	add	r12, r12
    4718:	dd 1c       	adc	r13, r13
    471a:	ee 1c       	adc	r14, r14
    471c:	ff 1c       	adc	r15, r15
    471e:	cc 0c       	add	r12, r12
    4720:	dd 1c       	adc	r13, r13
    4722:	ee 1c       	adc	r14, r14
    4724:	ff 1c       	adc	r15, r15
    4726:	cc 0c       	add	r12, r12
    4728:	dd 1c       	adc	r13, r13
    472a:	ee 1c       	adc	r14, r14
    472c:	ff 1c       	adc	r15, r15
    472e:	cc 0c       	add	r12, r12
    4730:	dd 1c       	adc	r13, r13
    4732:	ee 1c       	adc	r14, r14
    4734:	ff 1c       	adc	r15, r15
    4736:	cc 0c       	add	r12, r12
    4738:	dd 1c       	adc	r13, r13
    473a:	ee 1c       	adc	r14, r14
    473c:	ff 1c       	adc	r15, r15
    473e:	cc 0c       	add	r12, r12
    4740:	dd 1c       	adc	r13, r13
    4742:	ee 1c       	adc	r14, r14
    4744:	ff 1c       	adc	r15, r15
    4746:	89 81       	ldd	r24, Y+1	; 0x01
    4748:	98 2f       	mov	r25, r24
    474a:	9f 77       	andi	r25, 0x7F	; 127
    474c:	c9 0e       	add	r12, r25
    474e:	d1 1c       	adc	r13, r1
    4750:	e1 1c       	adc	r14, r1
    4752:	f1 1c       	adc	r15, r1
  }  while (c & 0x80);
    4754:	88 23       	and	r24, r24
    4756:	84 f2       	brlt	.-96     	; 0x46f8 <readVarLen+0x20>
  
  return(value);
}
    4758:	c7 01       	movw	r24, r14
    475a:	b6 01       	movw	r22, r12
    475c:	0f 90       	pop	r0
    475e:	0f 90       	pop	r0
    4760:	0f 90       	pop	r0
    4762:	df 91       	pop	r29
    4764:	cf 91       	pop	r28
    4766:	1f 91       	pop	r17
    4768:	0f 91       	pop	r16
    476a:	ff 90       	pop	r15
    476c:	ef 90       	pop	r14
    476e:	df 90       	pop	r13
    4770:	cf 90       	pop	r12
    4772:	08 95       	ret

00004774 <getEndOfTrack>:

BOOL getEndOfTrack(struct MD_MFTrack *t)
// true if end of track has been reached
{
  return t->_endOfTrack;
}
    4774:	fc 01       	movw	r30, r24
    4776:	85 85       	ldd	r24, Z+13	; 0x0d
    4778:	08 95       	ret

0000477a <syncTime>:

void syncTime(struct MD_MFTrack *t)
{
  t->_elapsedTicks = 0;
    477a:	fc 01       	movw	r30, r24
    477c:	16 86       	std	Z+14, r1	; 0x0e
    477e:	17 86       	std	Z+15, r1	; 0x0f
    4780:	10 8a       	std	Z+16, r1	; 0x10
    4782:	11 8a       	std	Z+17, r1	; 0x11
    4784:	08 95       	ret

00004786 <restartTrack>:
}

void restartTrack(struct MD_MFTrack *t)
// Start playing the track from the beginning again
{
    4786:	fc 01       	movw	r30, r24
  t->_currOffset = 0;
    4788:	11 86       	std	Z+9, r1	; 0x09
    478a:	12 86       	std	Z+10, r1	; 0x0a
    478c:	13 86       	std	Z+11, r1	; 0x0b
    478e:	14 86       	std	Z+12, r1	; 0x0c
  t->_endOfTrack = FALSE;
    4790:	15 86       	std	Z+13, r1	; 0x0d
  t->_elapsedTicks = 0;
    4792:	16 86       	std	Z+14, r1	; 0x0e
    4794:	17 86       	std	Z+15, r1	; 0x0f
    4796:	10 8a       	std	Z+16, r1	; 0x10
    4798:	11 8a       	std	Z+17, r1	; 0x11
    479a:	08 95       	ret

0000479c <resetTrack>:
 * \file
 * \brief Main file for the MFTrack class implementation
 */

void resetTrack(struct MD_MFTrack *t)
{
    479c:	cf 93       	push	r28
    479e:	df 93       	push	r29
    47a0:	ec 01       	movw	r28, r24
  t->_length = 0;        // length of track in bytes
    47a2:	19 82       	std	Y+1, r1	; 0x01
    47a4:	1a 82       	std	Y+2, r1	; 0x02
    47a6:	1b 82       	std	Y+3, r1	; 0x03
    47a8:	1c 82       	std	Y+4, r1	; 0x04
  t->_startOffset = 0;   // start of the track in bytes from start of file
    47aa:	1d 82       	std	Y+5, r1	; 0x05
    47ac:	1e 82       	std	Y+6, r1	; 0x06
    47ae:	1f 82       	std	Y+7, r1	; 0x07
    47b0:	18 86       	std	Y+8, r1	; 0x08
  restartTrack(t);
    47b2:	0e 94 c3 23 	call	0x4786	; 0x4786 <restartTrack>
  t->_trackId = 255;
    47b6:	8f ef       	ldi	r24, 0xFF	; 255
    47b8:	88 83       	st	Y, r24
}
    47ba:	df 91       	pop	r29
    47bc:	cf 91       	pop	r28
    47be:	08 95       	ret

000047c0 <closeTrack>:


void closeTrack(struct MD_MFTrack *t)
{
  resetTrack(t);
    47c0:	0e 94 ce 23 	call	0x479c	; 0x479c <resetTrack>
    47c4:	08 95       	ret

000047c6 <parseEvent>:
  return(TRUE);
}

void parseEvent(struct MD_MIDIFile *mf,struct MD_MFTrack *t)
// process the event from the physical file
{
    47c6:	4f 92       	push	r4
    47c8:	5f 92       	push	r5
    47ca:	6f 92       	push	r6
    47cc:	7f 92       	push	r7
    47ce:	9f 92       	push	r9
    47d0:	af 92       	push	r10
    47d2:	bf 92       	push	r11
    47d4:	cf 92       	push	r12
    47d6:	df 92       	push	r13
    47d8:	ef 92       	push	r14
    47da:	ff 92       	push	r15
    47dc:	0f 93       	push	r16
    47de:	1f 93       	push	r17
    47e0:	cf 93       	push	r28
    47e2:	df 93       	push	r29
    47e4:	cd b7       	in	r28, 0x3d	; 61
    47e6:	de b7       	in	r29, 0x3e	; 62
    47e8:	c0 56       	subi	r28, 0x60	; 96
    47ea:	d1 09       	sbc	r29, r1
    47ec:	0f b6       	in	r0, 0x3f	; 63
    47ee:	f8 94       	cli
    47f0:	de bf       	out	0x3e, r29	; 62
    47f2:	0f be       	out	0x3f, r0	; 63
    47f4:	cd bf       	out	0x3d, r28	; 61
    47f6:	6c 01       	movw	r12, r24
    47f8:	7b 01       	movw	r14, r22
  uint8_t eType;
  uint8_t bVal;
  uint32_t mLen;
  UINT bRead;
  // now we have to process this event
  f_read(&mf->_fd,&eType,1,&bRead);
    47fa:	8c 01       	movw	r16, r24
    47fc:	0a 5f       	subi	r16, 0xFA	; 250
    47fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4800:	9e 01       	movw	r18, r28
    4802:	2d 5f       	subi	r18, 0xFD	; 253
    4804:	3f 4f       	sbci	r19, 0xFF	; 255
    4806:	41 e0       	ldi	r20, 0x01	; 1
    4808:	50 e0       	ldi	r21, 0x00	; 0
    480a:	be 01       	movw	r22, r28
    480c:	6f 5f       	subi	r22, 0xFF	; 255
    480e:	7f 4f       	sbci	r23, 0xFF	; 255
    4810:	c8 01       	movw	r24, r16
    4812:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>

  switch (eType)
    4816:	89 81       	ldd	r24, Y+1	; 0x01
    4818:	80 3e       	cpi	r24, 0xE0	; 224
    481a:	30 f4       	brcc	.+12     	; 0x4828 <parseEvent+0x62>
    481c:	80 3c       	cpi	r24, 0xC0	; 192
    481e:	e0 f5       	brcc	.+120    	; 0x4898 <parseEvent+0xd2>
    4820:	80 38       	cpi	r24, 0x80	; 128
    4822:	08 f4       	brcc	.+2      	; 0x4826 <parseEvent+0x60>
    4824:	56 c0       	rjmp	.+172    	; 0x48d2 <parseEvent+0x10c>
    4826:	0b c0       	rjmp	.+22     	; 0x483e <parseEvent+0x78>
    4828:	80 3f       	cpi	r24, 0xF0	; 240
    482a:	09 f4       	brne	.+2      	; 0x482e <parseEvent+0x68>
    482c:	7e c0       	rjmp	.+252    	; 0x492a <parseEvent+0x164>
    482e:	38 f0       	brcs	.+14     	; 0x483e <parseEvent+0x78>
    4830:	87 3f       	cpi	r24, 0xF7	; 247
    4832:	09 f4       	brne	.+2      	; 0x4836 <parseEvent+0x70>
    4834:	7a c0       	rjmp	.+244    	; 0x492a <parseEvent+0x164>
    4836:	8f 3f       	cpi	r24, 0xFF	; 255
    4838:	09 f4       	brne	.+2      	; 0x483c <parseEvent+0x76>
    483a:	d3 c0       	rjmp	.+422    	; 0x49e2 <parseEvent+0x21c>
    483c:	39 c3       	rjmp	.+1650   	; 0x4eb0 <parseEvent+0x6ea>
    // Midi events (status bytes 0x8n - 0xEn) The standard Channel MIDI messages, where 'n' is the MIDI channel (0 - 15).
    // This status byte will be followed by 1 or 2 data bytes, as is usual for the particular MIDI message. 
    // Any valid Channel MIDI message can be included in a MIDI file.
  case 0x80 ... 0xBf: // MIDI message with 2 parameters
  case 0xe0 ... 0xef:
    t->_mev.size = 3;
    483e:	93 e0       	ldi	r25, 0x03	; 3
    4840:	d7 01       	movw	r26, r14
    4842:	54 96       	adiw	r26, 0x14	; 20
    4844:	9c 93       	st	X, r25
    4846:	54 97       	sbiw	r26, 0x14	; 20
    t->_mev.data[0] = eType;
    t->_mev.channel = t->_mev.data[0] & 0xf;  // mask off the channel
    4848:	98 2f       	mov	r25, r24
    484a:	9f 70       	andi	r25, 0x0F	; 15
    484c:	53 96       	adiw	r26, 0x13	; 19
    484e:	9c 93       	st	X, r25
    4850:	53 97       	sbiw	r26, 0x13	; 19
    t->_mev.data[0] = t->_mev.data[0] & 0xf0; // just the command byte
    4852:	80 7f       	andi	r24, 0xF0	; 240
    4854:	55 96       	adiw	r26, 0x15	; 21
    4856:	8c 93       	st	X, r24
    f_read(&mf->_fd,&t->_mev.data[1],1,&bRead);
    4858:	9e 01       	movw	r18, r28
    485a:	2d 5f       	subi	r18, 0xFD	; 253
    485c:	3f 4f       	sbci	r19, 0xFF	; 255
    485e:	41 e0       	ldi	r20, 0x01	; 1
    4860:	50 e0       	ldi	r21, 0x00	; 0
    4862:	b7 01       	movw	r22, r14
    4864:	6a 5e       	subi	r22, 0xEA	; 234
    4866:	7f 4f       	sbci	r23, 0xFF	; 255
    4868:	c8 01       	movw	r24, r16
    486a:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
    f_read(&mf->_fd,&t->_mev.data[2],1,&bRead);
    486e:	9e 01       	movw	r18, r28
    4870:	2d 5f       	subi	r18, 0xFD	; 253
    4872:	3f 4f       	sbci	r19, 0xFF	; 255
    4874:	41 e0       	ldi	r20, 0x01	; 1
    4876:	50 e0       	ldi	r21, 0x00	; 0
    4878:	b7 01       	movw	r22, r14
    487a:	69 5e       	subi	r22, 0xE9	; 233
    487c:	7f 4f       	sbci	r23, 0xFF	; 255
    487e:	c8 01       	movw	r24, r16
    4880:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
    DUMP("[MID2] Ch: ", _mev.channel);
    DUMPX(" Data: ", _mev.data[0]);
    DUMPX(" ", _mev.data[1]);
    DUMPX(" ", _mev.data[2]);	
#if !DUMP_DATA
    if (mf->_midiHandler != NULL)
    4884:	d6 01       	movw	r26, r12
    4886:	ed 91       	ld	r30, X+
    4888:	fc 91       	ld	r31, X
    488a:	30 97       	sbiw	r30, 0x00	; 0
    488c:	09 f4       	brne	.+2      	; 0x4890 <parseEvent+0xca>
    488e:	13 c3       	rjmp	.+1574   	; 0x4eb6 <parseEvent+0x6f0>
      (mf->_midiHandler)(&t->_mev);
    4890:	c7 01       	movw	r24, r14
    4892:	42 96       	adiw	r24, 0x12	; 18
    4894:	09 95       	icall
    4896:	0f c3       	rjmp	.+1566   	; 0x4eb6 <parseEvent+0x6f0>
#endif // !DUMP_DATA
  break;

  case 0xc0 ... 0xdf: // MIDI message with 1 parameter
    t->_mev.size = 2;
    4898:	92 e0       	ldi	r25, 0x02	; 2
    489a:	f7 01       	movw	r30, r14
    489c:	94 8b       	std	Z+20, r25	; 0x14
    t->_mev.data[0] = eType;
    t->_mev.channel = t->_mev.data[0] & 0xf;  // mask off the channel
    489e:	98 2f       	mov	r25, r24
    48a0:	9f 70       	andi	r25, 0x0F	; 15
    48a2:	93 8b       	std	Z+19, r25	; 0x13
    t->_mev.data[0] = t->_mev.data[0] & 0xf0; // just the command byte
    48a4:	80 7f       	andi	r24, 0xF0	; 240
    48a6:	85 8b       	std	Z+21, r24	; 0x15
    f_read(&mf->_fd,&t->_mev.data[1],1,&bRead);
    48a8:	9e 01       	movw	r18, r28
    48aa:	2d 5f       	subi	r18, 0xFD	; 253
    48ac:	3f 4f       	sbci	r19, 0xFF	; 255
    48ae:	41 e0       	ldi	r20, 0x01	; 1
    48b0:	50 e0       	ldi	r21, 0x00	; 0
    48b2:	b7 01       	movw	r22, r14
    48b4:	6a 5e       	subi	r22, 0xEA	; 234
    48b6:	7f 4f       	sbci	r23, 0xFF	; 255
    48b8:	c8 01       	movw	r24, r16
    48ba:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
    DUMP("[MID1] Ch: ", _mev.channel);
    DUMPX(" Data: ", _mev.data[0]);
    DUMPX(" ", _mev.data[1]);

#if !DUMP_DATA
    if (mf->_midiHandler != NULL)
    48be:	d6 01       	movw	r26, r12
    48c0:	ed 91       	ld	r30, X+
    48c2:	fc 91       	ld	r31, X
    48c4:	30 97       	sbiw	r30, 0x00	; 0
    48c6:	09 f4       	brne	.+2      	; 0x48ca <parseEvent+0x104>
    48c8:	f6 c2       	rjmp	.+1516   	; 0x4eb6 <parseEvent+0x6f0>
      (mf->_midiHandler)(&t->_mev);
    48ca:	c7 01       	movw	r24, r14
    48cc:	42 96       	adiw	r24, 0x12	; 18
    48ce:	09 95       	icall
    48d0:	f2 c2       	rjmp	.+1508   	; 0x4eb6 <parseEvent+0x6f0>
    // ie SysEx and Meta events clear running status. This means that the _mev structure 
    // should contain the info from the previous message in the structure's channel member 
    // and data[0] (for the MIDI command). 
    // Hence start saving the data at byte data[1] with the byte we have just read (eType) 
    // and use the size member to determine how large the message is (ie, same as before).
    t->_mev.data[1] = eType;
    48d2:	f7 01       	movw	r30, r14
    48d4:	86 8b       	std	Z+22, r24	; 0x16
    for (uint8_t i = 2; i < t->_mev.size; i++)
    48d6:	84 89       	ldd	r24, Z+20	; 0x14
    48d8:	83 30       	cpi	r24, 0x03	; 3
    48da:	b8 f0       	brcs	.+46     	; 0x490a <parseEvent+0x144>
    48dc:	68 94       	set
    48de:	bb 24       	eor	r11, r11
    48e0:	b1 f8       	bld	r11, 1
    {
      f_read(&mf->_fd,&t->_mev.data[i],1,&bRead);  // next byte
    48e2:	6b 2d       	mov	r22, r11
    48e4:	70 e0       	ldi	r23, 0x00	; 0
    48e6:	6b 5e       	subi	r22, 0xEB	; 235
    48e8:	7f 4f       	sbci	r23, 0xFF	; 255
    48ea:	6e 0d       	add	r22, r14
    48ec:	7f 1d       	adc	r23, r15
    48ee:	9e 01       	movw	r18, r28
    48f0:	2d 5f       	subi	r18, 0xFD	; 253
    48f2:	3f 4f       	sbci	r19, 0xFF	; 255
    48f4:	41 e0       	ldi	r20, 0x01	; 1
    48f6:	50 e0       	ldi	r21, 0x00	; 0
    48f8:	c8 01       	movw	r24, r16
    48fa:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
    // should contain the info from the previous message in the structure's channel member 
    // and data[0] (for the MIDI command). 
    // Hence start saving the data at byte data[1] with the byte we have just read (eType) 
    // and use the size member to determine how large the message is (ie, same as before).
    t->_mev.data[1] = eType;
    for (uint8_t i = 2; i < t->_mev.size; i++)
    48fe:	b3 94       	inc	r11
    4900:	d7 01       	movw	r26, r14
    4902:	54 96       	adiw	r26, 0x14	; 20
    4904:	8c 91       	ld	r24, X
    4906:	b8 16       	cp	r11, r24
    4908:	60 f3       	brcs	.-40     	; 0x48e2 <parseEvent+0x11c>
      f_read(&mf->_fd,&t->_mev.data[i],1,&bRead);  // next byte
    } 

    DUMP("[MID+] Ch: ", _mev.channel);
    DUMPS(" Data:");
    for (uint8_t i = 0; i<t->_mev.size; i++)
    490a:	88 23       	and	r24, r24
    490c:	21 f0       	breq	.+8      	; 0x4916 <parseEvent+0x150>
    490e:	90 e0       	ldi	r25, 0x00	; 0
    4910:	9f 5f       	subi	r25, 0xFF	; 255
    4912:	98 13       	cpse	r25, r24
    4914:	fd cf       	rjmp	.-6      	; 0x4910 <parseEvent+0x14a>
    {
      DUMPX(" ", t->_mev.data[i]);
    }

#if !DUMP_DATA
    if (mf->_midiHandler != NULL)
    4916:	d6 01       	movw	r26, r12
    4918:	ed 91       	ld	r30, X+
    491a:	fc 91       	ld	r31, X
    491c:	30 97       	sbiw	r30, 0x00	; 0
    491e:	09 f4       	brne	.+2      	; 0x4922 <parseEvent+0x15c>
    4920:	ca c2       	rjmp	.+1428   	; 0x4eb6 <parseEvent+0x6f0>
      (mf->_midiHandler)(&t->_mev);
    4922:	c7 01       	movw	r24, r14
    4924:	42 96       	adiw	r24, 0x12	; 18
    4926:	09 95       	icall
    4928:	c6 c2       	rjmp	.+1420   	; 0x4eb6 <parseEvent+0x6f0>
  {
    sysex_event sev;
    uint16_t index = 0;

    // collect all the bytes until the 0xf7 - boundaries are included in the message
    sev.track = t->_trackId;
    492a:	f7 01       	movw	r30, r14
    492c:	80 81       	ld	r24, Z
    492e:	8d 83       	std	Y+5, r24	; 0x05
    mLen = readVarLen(&mf->_fd);
    4930:	c8 01       	movw	r24, r16
    4932:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <readVarLen>
    sev.size = mLen;
    4936:	7f 83       	std	Y+7, r23	; 0x07
    4938:	6e 83       	std	Y+6, r22	; 0x06
    if (eType==0xF0)       // add space for 0xF0
    493a:	29 81       	ldd	r18, Y+1	; 0x01
    493c:	20 3f       	cpi	r18, 0xF0	; 240
    493e:	49 f4       	brne	.+18     	; 0x4952 <parseEvent+0x18c>
    {
      sev.data[index++] = eType;
    4940:	28 87       	std	Y+8, r18	; 0x08
      sev.size++;
    4942:	6f 5f       	subi	r22, 0xFF	; 255
    4944:	7f 4f       	sbci	r23, 0xFF	; 255
    4946:	7f 83       	std	Y+7, r23	; 0x07
    4948:	6e 83       	std	Y+6, r22	; 0x06
    sev.track = t->_trackId;
    mLen = readVarLen(&mf->_fd);
    sev.size = mLen;
    if (eType==0xF0)       // add space for 0xF0
    {
      sev.data[index++] = eType;
    494a:	ee 24       	eor	r14, r14
    494c:	e3 94       	inc	r14
    494e:	f1 2c       	mov	r15, r1
    4950:	02 c0       	rjmp	.+4      	; 0x4956 <parseEvent+0x190>
// ---------------------------- SYSEX
  case 0xf0:  // sysex_event = 0xF0 + <len:1> + <data_bytes> + 0xF7 
  case 0xf7:  // sysex_event = 0xF7 + <len:1> + <data_bytes> + 0xF7 
  {
    sysex_event sev;
    uint16_t index = 0;
    4952:	e1 2c       	mov	r14, r1
    4954:	f1 2c       	mov	r15, r1
    if (eType==0xF0)       // add space for 0xF0
    {
      sev.data[index++] = eType;
      sev.size++;
    }
    uint16_t minLen = min(sev.size, ARRAY_SIZE(sev.data));
    4956:	ae 80       	ldd	r10, Y+6	; 0x06
    4958:	bf 80       	ldd	r11, Y+7	; 0x07
    495a:	f3 e3       	ldi	r31, 0x33	; 51
    495c:	af 16       	cp	r10, r31
    495e:	b1 04       	cpc	r11, r1
    4960:	28 f0       	brcs	.+10     	; 0x496c <parseEvent+0x1a6>
    4962:	0f 2e       	mov	r0, r31
    4964:	f2 e3       	ldi	r31, 0x32	; 50
    4966:	af 2e       	mov	r10, r31
    4968:	b1 2c       	mov	r11, r1
    496a:	f0 2d       	mov	r31, r0
    // The length parameter includes the 0xF7 but not the start boundary.
    // However, it may be bigger than our buffer will allow us to store.
    for (uint16_t i=index; i<minLen; ++i)
    496c:	ea 14       	cp	r14, r10
    496e:	fb 04       	cpc	r15, r11
    4970:	b8 f4       	brcc	.+46     	; 0x49a0 <parseEvent+0x1da>
      f_read(&mf->_fd,&sev.data[i],1,&bRead);
    4972:	b7 01       	movw	r22, r14
    4974:	6d 5f       	subi	r22, 0xFD	; 253
    4976:	7f 4f       	sbci	r23, 0xFF	; 255
    4978:	25 e0       	ldi	r18, 0x05	; 5
    497a:	30 e0       	ldi	r19, 0x00	; 0
    497c:	2c 0f       	add	r18, r28
    497e:	3d 1f       	adc	r19, r29
    4980:	62 0f       	add	r22, r18
    4982:	73 1f       	adc	r23, r19
    4984:	9e 01       	movw	r18, r28
    4986:	2d 5f       	subi	r18, 0xFD	; 253
    4988:	3f 4f       	sbci	r19, 0xFF	; 255
    498a:	41 e0       	ldi	r20, 0x01	; 1
    498c:	50 e0       	ldi	r21, 0x00	; 0
    498e:	c8 01       	movw	r24, r16
    4990:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
      sev.size++;
    }
    uint16_t minLen = min(sev.size, ARRAY_SIZE(sev.data));
    // The length parameter includes the 0xF7 but not the start boundary.
    // However, it may be bigger than our buffer will allow us to store.
    for (uint16_t i=index; i<minLen; ++i)
    4994:	3f ef       	ldi	r19, 0xFF	; 255
    4996:	e3 1a       	sub	r14, r19
    4998:	f3 0a       	sbc	r15, r19
    499a:	ea 14       	cp	r14, r10
    499c:	fb 04       	cpc	r15, r11
    499e:	48 f3       	brcs	.-46     	; 0x4972 <parseEvent+0x1ac>
      f_read(&mf->_fd,&sev.data[i],1,&bRead);
    if (sev.size>minLen)
    49a0:	8e 81       	ldd	r24, Y+6	; 0x06
    49a2:	9f 81       	ldd	r25, Y+7	; 0x07
    49a4:	a8 16       	cp	r10, r24
    49a6:	b9 06       	cpc	r11, r25
    49a8:	80 f4       	brcc	.+32     	; 0x49ca <parseEvent+0x204>
      f_lseek(&mf->_fd,f_tell(&mf->_fd) + (sev.size-minLen));
    49aa:	8a 19       	sub	r24, r10
    49ac:	9b 09       	sbc	r25, r11
    49ae:	d6 01       	movw	r26, r12
    49b0:	1c 96       	adiw	r26, 0x0c	; 12
    49b2:	4d 91       	ld	r20, X+
    49b4:	5d 91       	ld	r21, X+
    49b6:	6d 91       	ld	r22, X+
    49b8:	7c 91       	ld	r23, X
    49ba:	1f 97       	sbiw	r26, 0x0f	; 15
    49bc:	48 0f       	add	r20, r24
    49be:	59 1f       	adc	r21, r25
    49c0:	61 1d       	adc	r22, r1
    49c2:	71 1d       	adc	r23, r1
    49c4:	c8 01       	movw	r24, r16
    49c6:	0e 94 c4 14 	call	0x2988	; 0x2988 <f_lseek>
      DUMPX(" ", sev.data[i]);
    }
    if (sev.size>minLen)
      DUMPS("...");
#else
    if (mf->_sysexHandler != NULL)
    49ca:	d6 01       	movw	r26, r12
    49cc:	12 96       	adiw	r26, 0x02	; 2
    49ce:	ed 91       	ld	r30, X+
    49d0:	fc 91       	ld	r31, X
    49d2:	13 97       	sbiw	r26, 0x03	; 3
    49d4:	30 97       	sbiw	r30, 0x00	; 0
    49d6:	09 f4       	brne	.+2      	; 0x49da <parseEvent+0x214>
    49d8:	6e c2       	rjmp	.+1244   	; 0x4eb6 <parseEvent+0x6f0>
      (mf->_sysexHandler)(&sev);
    49da:	ce 01       	movw	r24, r28
    49dc:	05 96       	adiw	r24, 0x05	; 5
    49de:	09 95       	icall
#endif
  }
  break;
    49e0:	6a c2       	rjmp	.+1236   	; 0x4eb6 <parseEvent+0x6f0>
// ---------------------------- META
  case 0xff:  // meta_event = 0xFF + <meta_type:1> + <length:v> + <event_data_bytes>
  {
    meta_event mev;
    
	f_read(&mf->_fd,&eType,1,&bRead);
    49e2:	9e 01       	movw	r18, r28
    49e4:	2d 5f       	subi	r18, 0xFD	; 253
    49e6:	3f 4f       	sbci	r19, 0xFF	; 255
    49e8:	41 e0       	ldi	r20, 0x01	; 1
    49ea:	50 e0       	ldi	r21, 0x00	; 0
    49ec:	be 01       	movw	r22, r28
    49ee:	6f 5f       	subi	r22, 0xFF	; 255
    49f0:	7f 4f       	sbci	r23, 0xFF	; 255
    49f2:	c8 01       	movw	r24, r16
    49f4:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
    mLen =  readVarLen(&mf->_fd);
    49f8:	c8 01       	movw	r24, r16
    49fa:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <readVarLen>
    49fe:	2b 01       	movw	r4, r22
    4a00:	3c 01       	movw	r6, r24

    mev.track = t->_trackId;
    4a02:	f7 01       	movw	r30, r14
    4a04:	80 81       	ld	r24, Z
    4a06:	8d 83       	std	Y+5, r24	; 0x05
    mev.size = mLen;
    4a08:	5f 82       	std	Y+7, r5	; 0x07
    4a0a:	4e 82       	std	Y+6, r4	; 0x06
    mev.type = eType;
    4a0c:	e9 81       	ldd	r30, Y+1	; 0x01
    4a0e:	e8 87       	std	Y+8, r30	; 0x08

    //DUMPX("[META] Type: 0x", eType);
    //DUMP("\tLen: ", mLen);
   // DUMPS("\t");

    switch (eType)
    4a10:	8e 2f       	mov	r24, r30
    4a12:	90 e0       	ldi	r25, 0x00	; 0
    4a14:	80 38       	cpi	r24, 0x80	; 128
    4a16:	91 05       	cpc	r25, r1
    4a18:	08 f0       	brcs	.+2      	; 0x4a1c <parseEvent+0x256>
    4a1a:	fe c1       	rjmp	.+1020   	; 0x4e18 <parseEvent+0x652>
    4a1c:	fc 01       	movw	r30, r24
    4a1e:	ec 5c       	subi	r30, 0xCC	; 204
    4a20:	ff 4f       	sbci	r31, 0xFF	; 255
    4a22:	0c 94 59 38 	jmp	0x70b2	; 0x70b2 <__tablejump2__>
      }
      break;

      case 0x7F:  // Sequencer Specific Metadata
      //DUMPS("SEQ SPECIFIC");
      for (uint8_t i=0; i<mLen; i++)
    4a26:	41 14       	cp	r4, r1
    4a28:	51 04       	cpc	r5, r1
    4a2a:	61 04       	cpc	r6, r1
    4a2c:	71 04       	cpc	r7, r1
    4a2e:	09 f0       	breq	.+2      	; 0x4a32 <parseEvent+0x26c>
    4a30:	dc c1       	rjmp	.+952    	; 0x4dea <parseEvent+0x624>
    4a32:	33 c2       	rjmp	.+1126   	; 0x4e9a <parseEvent+0x6d4>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x54:  // SMPTE Offset
      //DUMPS("SMPTE OFFSET");
      for (uint8_t i=0; i<mLen; i++)
    4a34:	41 14       	cp	r4, r1
    4a36:	51 04       	cpc	r5, r1
    4a38:	61 04       	cpc	r6, r1
    4a3a:	71 04       	cpc	r7, r1
    4a3c:	09 f0       	breq	.+2      	; 0x4a40 <parseEvent+0x27a>
    4a3e:	be c1       	rjmp	.+892    	; 0x4dbc <parseEvent+0x5f6>
    4a40:	2c c2       	rjmp	.+1112   	; 0x4e9a <parseEvent+0x6d4>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x07:  // Cue Point
      //DUMPS("CUE POINT ");
      for (uint8_t i=0; i<mLen; i++)
    4a42:	41 14       	cp	r4, r1
    4a44:	51 04       	cpc	r5, r1
    4a46:	61 04       	cpc	r6, r1
    4a48:	71 04       	cpc	r7, r1
    4a4a:	09 f0       	breq	.+2      	; 0x4a4e <parseEvent+0x288>
    4a4c:	a0 c1       	rjmp	.+832    	; 0x4d8e <parseEvent+0x5c8>
    4a4e:	25 c2       	rjmp	.+1098   	; 0x4e9a <parseEvent+0x6d4>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x06:  // Marker
      //DUMPS("MARKER ");
      for (uint8_t i=0; i<mLen; i++)
    4a50:	41 14       	cp	r4, r1
    4a52:	51 04       	cpc	r5, r1
    4a54:	61 04       	cpc	r6, r1
    4a56:	71 04       	cpc	r7, r1
    4a58:	09 f0       	breq	.+2      	; 0x4a5c <parseEvent+0x296>
    4a5a:	82 c1       	rjmp	.+772    	; 0x4d60 <parseEvent+0x59a>
    4a5c:	1e c2       	rjmp	.+1084   	; 0x4e9a <parseEvent+0x6d4>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x05:  // Lyric
      //DUMPS("LYRIC ");
      for (uint8_t i=0; i<mLen; i++)
    4a5e:	41 14       	cp	r4, r1
    4a60:	51 04       	cpc	r5, r1
    4a62:	61 04       	cpc	r6, r1
    4a64:	71 04       	cpc	r7, r1
    4a66:	09 f0       	breq	.+2      	; 0x4a6a <parseEvent+0x2a4>
    4a68:	64 c1       	rjmp	.+712    	; 0x4d32 <parseEvent+0x56c>
    4a6a:	17 c2       	rjmp	.+1070   	; 0x4e9a <parseEvent+0x6d4>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x04:  // Instrument Name
      //DUMPS("INSTRUMENT ");
      for (uint8_t i=0; i<mLen; i++)
    4a6c:	41 14       	cp	r4, r1
    4a6e:	51 04       	cpc	r5, r1
    4a70:	61 04       	cpc	r6, r1
    4a72:	71 04       	cpc	r7, r1
    4a74:	09 f0       	breq	.+2      	; 0x4a78 <parseEvent+0x2b2>
    4a76:	46 c1       	rjmp	.+652    	; 0x4d04 <parseEvent+0x53e>
    4a78:	10 c2       	rjmp	.+1056   	; 0x4e9a <parseEvent+0x6d4>
       f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x03:  // Sequence or Track Name
      //DUMPS("SEQ/TRK NAME ");
      for (uint8_t i=0; i<mLen; i++)
    4a7a:	41 14       	cp	r4, r1
    4a7c:	51 04       	cpc	r5, r1
    4a7e:	61 04       	cpc	r6, r1
    4a80:	71 04       	cpc	r7, r1
    4a82:	09 f0       	breq	.+2      	; 0x4a86 <parseEvent+0x2c0>
    4a84:	28 c1       	rjmp	.+592    	; 0x4cd6 <parseEvent+0x510>
    4a86:	09 c2       	rjmp	.+1042   	; 0x4e9a <parseEvent+0x6d4>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x02:  // Copyright Notice
      //DUMPS("COPYRIGHT ");
      for (uint8_t i=0; i<mLen; i++)
    4a88:	41 14       	cp	r4, r1
    4a8a:	51 04       	cpc	r5, r1
    4a8c:	61 04       	cpc	r6, r1
    4a8e:	71 04       	cpc	r7, r1
    4a90:	09 f0       	breq	.+2      	; 0x4a94 <parseEvent+0x2ce>
    4a92:	0a c1       	rjmp	.+532    	; 0x4ca8 <parseEvent+0x4e2>
    4a94:	02 c2       	rjmp	.+1028   	; 0x4e9a <parseEvent+0x6d4>
      break;

#if SHOW_UNUSED_META
      case 0x01:  // Text
      //DUMPS("TEXT ");
      for (int i=0; i<mLen; i++)
    4a96:	41 14       	cp	r4, r1
    4a98:	51 04       	cpc	r5, r1
    4a9a:	61 04       	cpc	r6, r1
    4a9c:	71 04       	cpc	r7, r1
    4a9e:	09 f0       	breq	.+2      	; 0x4aa2 <parseEvent+0x2dc>
    4aa0:	e8 c0       	rjmp	.+464    	; 0x4c72 <parseEvent+0x4ac>
    4aa2:	fb c1       	rjmp	.+1014   	; 0x4e9a <parseEvent+0x6d4>

    switch (eType)
    {
      case 0x2f:  // End of track
      {
        t->_endOfTrack = TRUE;
    4aa4:	81 e0       	ldi	r24, 0x01	; 1
    4aa6:	d7 01       	movw	r26, r14
    4aa8:	1d 96       	adiw	r26, 0x0d	; 13
    4aaa:	8c 93       	st	X, r24
        //DUMPS("END OF TRACK");
      }
      break;
    4aac:	f6 c1       	rjmp	.+1004   	; 0x4e9a <parseEvent+0x6d4>

      case 0x51:  // set Tempo - really the microseconds per tick
      {
        uint32_t value = readMultiByte(&mf->_fd, MB_TRYTE);
    4aae:	63 e0       	ldi	r22, 0x03	; 3
    4ab0:	c8 01       	movw	r24, r16
    4ab2:	0e 94 2b 23 	call	0x4656	; 0x4656 <readMultiByte>
    4ab6:	16 2f       	mov	r17, r22
    4ab8:	07 2f       	mov	r16, r23
    4aba:	f8 2e       	mov	r15, r24
        
        setMicrosecondPerQuarterNote(mf,value);
    4abc:	46 2f       	mov	r20, r22
    4abe:	57 2f       	mov	r21, r23
    4ac0:	68 2f       	mov	r22, r24
    4ac2:	79 2f       	mov	r23, r25
    4ac4:	c6 01       	movw	r24, r12
    4ac6:	0e 94 a7 20 	call	0x414e	; 0x414e <setMicrosecondPerQuarterNote>
        
        mev.data[0] = (value >> 16) & 0xFF;
    4aca:	f9 86       	std	Y+9, r15	; 0x09
        mev.data[1] = (value >> 8) & 0xFF;
    4acc:	0a 87       	std	Y+10, r16	; 0x0a
        mev.data[2] = value & 0xFF;
    4ace:	1b 87       	std	Y+11, r17	; 0x0b
        
        //DUMP("SET TEMPO to ", getTickTime(mf));
        //DUMP(" us/tick or ", getTempo(mf));
        //DUMPS(" beats/min");
      }
      break;
    4ad0:	e4 c1       	rjmp	.+968    	; 0x4e9a <parseEvent+0x6d4>

      case 0x58:  // time signature
      {
        uint8_t n,d;
		f_read(&mf->_fd,&n,1,&bRead);
    4ad2:	9e 01       	movw	r18, r28
    4ad4:	2d 5f       	subi	r18, 0xFD	; 253
    4ad6:	3f 4f       	sbci	r19, 0xFF	; 255
    4ad8:	41 e0       	ldi	r20, 0x01	; 1
    4ada:	50 e0       	ldi	r21, 0x00	; 0
    4adc:	be 01       	movw	r22, r28
    4ade:	61 5a       	subi	r22, 0xA1	; 161
    4ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    4ae2:	c8 01       	movw	r24, r16
    4ae4:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
        f_read(&mf->_fd,&d,1,&bRead);
    4ae8:	9e 01       	movw	r18, r28
    4aea:	2d 5f       	subi	r18, 0xFD	; 253
    4aec:	3f 4f       	sbci	r19, 0xFF	; 255
    4aee:	41 e0       	ldi	r20, 0x01	; 1
    4af0:	50 e0       	ldi	r21, 0x00	; 0
    4af2:	be 01       	movw	r22, r28
    4af4:	65 5c       	subi	r22, 0xC5	; 197
    4af6:	7f 4f       	sbci	r23, 0xFF	; 255
    4af8:	c8 01       	movw	r24, r16
    4afa:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
        
        setTimeSignature(mf,n, 1 << d);  // denominator is 2^n
    4afe:	41 e0       	ldi	r20, 0x01	; 1
    4b00:	50 e0       	ldi	r21, 0x00	; 0
    4b02:	0b ac       	ldd	r0, Y+59	; 0x3b
    4b04:	02 c0       	rjmp	.+4      	; 0x4b0a <parseEvent+0x344>
    4b06:	44 0f       	add	r20, r20
    4b08:	55 1f       	adc	r21, r21
    4b0a:	0a 94       	dec	r0
    4b0c:	e2 f7       	brpl	.-8      	; 0x4b06 <parseEvent+0x340>
    4b0e:	a0 96       	adiw	r28, 0x20	; 32
    4b10:	6f ad       	ldd	r22, Y+63	; 0x3f
    4b12:	a0 97       	sbiw	r28, 0x20	; 32
    4b14:	c6 01       	movw	r24, r12
    4b16:	0e 94 9e 20 	call	0x413c	; 0x413c <setTimeSignature>
        f_lseek(&mf->_fd,f_tell(&mf->_fd) + (mLen - 2));
    4b1a:	f6 01       	movw	r30, r12
    4b1c:	44 85       	ldd	r20, Z+12	; 0x0c
    4b1e:	55 85       	ldd	r21, Z+13	; 0x0d
    4b20:	66 85       	ldd	r22, Z+14	; 0x0e
    4b22:	77 85       	ldd	r23, Z+15	; 0x0f
    4b24:	42 50       	subi	r20, 0x02	; 2
    4b26:	51 09       	sbc	r21, r1
    4b28:	61 09       	sbc	r22, r1
    4b2a:	71 09       	sbc	r23, r1
    4b2c:	44 0d       	add	r20, r4
    4b2e:	55 1d       	adc	r21, r5
    4b30:	66 1d       	adc	r22, r6
    4b32:	77 1d       	adc	r23, r7
    4b34:	c8 01       	movw	r24, r16
    4b36:	0e 94 c4 14 	call	0x2988	; 0x2988 <f_lseek>

        mev.data[0] = n;
    4b3a:	a0 96       	adiw	r28, 0x20	; 32
    4b3c:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b3e:	a0 97       	sbiw	r28, 0x20	; 32
    4b40:	89 87       	std	Y+9, r24	; 0x09
        mev.data[1] = d;
    4b42:	8b ad       	ldd	r24, Y+59	; 0x3b
    4b44:	8a 87       	std	Y+10, r24	; 0x0a
        mev.data[2] = 0;
    4b46:	1b 86       	std	Y+11, r1	; 0x0b
        mev.data[3] = 0;
    4b48:	1c 86       	std	Y+12, r1	; 0x0c

        //DUMP("SET TIME SIGNATURE to ", getTimeSignature(mf) >> 8);
        //DUMP("/", getTimeSignature(mf) & 0xf);
      }
      break;
    4b4a:	a7 c1       	rjmp	.+846    	; 0x4e9a <parseEvent+0x6d4>

      case 0x59:  // Key Signature
      {
        int8_t sf,mi;
		//DUMPS("KEY SIGNATURE");
        f_read(&mf->_fd,&sf,1,&bRead);
    4b4c:	9e 01       	movw	r18, r28
    4b4e:	2d 5f       	subi	r18, 0xFD	; 253
    4b50:	3f 4f       	sbci	r19, 0xFF	; 255
    4b52:	41 e0       	ldi	r20, 0x01	; 1
    4b54:	50 e0       	ldi	r21, 0x00	; 0
    4b56:	be 01       	movw	r22, r28
    4b58:	60 5a       	subi	r22, 0xA0	; 160
    4b5a:	7f 4f       	sbci	r23, 0xFF	; 255
    4b5c:	c8 01       	movw	r24, r16
    4b5e:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
        f_read(&mf->_fd,&mi,1,&bRead);
    4b62:	9e 01       	movw	r18, r28
    4b64:	2d 5f       	subi	r18, 0xFD	; 253
    4b66:	3f 4f       	sbci	r19, 0xFF	; 255
    4b68:	41 e0       	ldi	r20, 0x01	; 1
    4b6a:	50 e0       	ldi	r21, 0x00	; 0
    4b6c:	be 01       	movw	r22, r28
    4b6e:	61 5a       	subi	r22, 0xA1	; 161
    4b70:	7f 4f       	sbci	r23, 0xFF	; 255
    4b72:	c8 01       	movw	r24, r16
    4b74:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
        const char* aaa[] = {"Cb", "Gb", "Db", "Ab", "Eb", "Bb", "F", "C", "G", "D", "A", "E", "B", "F#", "C#", "G#", "D#", "A#"};
    4b78:	84 e2       	ldi	r24, 0x24	; 36
    4b7a:	e0 e8       	ldi	r30, 0x80	; 128
    4b7c:	f0 e0       	ldi	r31, 0x00	; 0
    4b7e:	de 01       	movw	r26, r28
    4b80:	db 96       	adiw	r26, 0x3b	; 59
    4b82:	01 90       	ld	r0, Z+
    4b84:	0d 92       	st	X+, r0
    4b86:	8a 95       	dec	r24
    4b88:	e1 f7       	brne	.-8      	; 0x4b82 <parseEvent+0x3bc>

        if (sf >= -7 && sf <= 7) 
    4b8a:	a1 96       	adiw	r28, 0x21	; 33
    4b8c:	ef ad       	ldd	r30, Y+63	; 0x3f
    4b8e:	a1 97       	sbiw	r28, 0x21	; 33
    4b90:	87 e0       	ldi	r24, 0x07	; 7
    4b92:	8e 0f       	add	r24, r30
    4b94:	8f 30       	cpi	r24, 0x0F	; 15
    4b96:	08 f0       	brcs	.+2      	; 0x4b9a <parseEvent+0x3d4>
    4b98:	45 c0       	rjmp	.+138    	; 0x4c24 <parseEvent+0x45e>
        {
          switch(mi)
    4b9a:	a0 96       	adiw	r28, 0x20	; 32
    4b9c:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b9e:	a0 97       	sbiw	r28, 0x20	; 32
    4ba0:	88 23       	and	r24, r24
    4ba2:	19 f0       	breq	.+6      	; 0x4baa <parseEvent+0x3e4>
    4ba4:	81 30       	cpi	r24, 0x01	; 1
    4ba6:	d9 f0       	breq	.+54     	; 0x4bde <parseEvent+0x418>
    4ba8:	34 c0       	rjmp	.+104    	; 0x4c12 <parseEvent+0x44c>
          {
            case 0:
              strcpy(mev.chars, aaa[sf+7]);
    4baa:	0e 2e       	mov	r0, r30
    4bac:	00 0c       	add	r0, r0
    4bae:	ff 0b       	sbc	r31, r31
    4bb0:	37 96       	adiw	r30, 0x07	; 7
    4bb2:	ee 0f       	add	r30, r30
    4bb4:	ff 1f       	adc	r31, r31
    4bb6:	ec 0f       	add	r30, r28
    4bb8:	fd 1f       	adc	r31, r29
    4bba:	63 ad       	ldd	r22, Z+59	; 0x3b
    4bbc:	74 ad       	ldd	r23, Z+60	; 0x3c
    4bbe:	8e 01       	movw	r16, r28
    4bc0:	07 5f       	subi	r16, 0xF7	; 247
    4bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    4bc4:	c8 01       	movw	r24, r16
    4bc6:	0e 94 a3 39 	call	0x7346	; 0x7346 <strcpy>
              strcat(mev.chars, "M");
    4bca:	f8 01       	movw	r30, r16
    4bcc:	01 90       	ld	r0, Z+
    4bce:	00 20       	and	r0, r0
    4bd0:	e9 f7       	brne	.-6      	; 0x4bcc <parseEvent+0x406>
    4bd2:	31 97       	sbiw	r30, 0x01	; 1
    4bd4:	8d e4       	ldi	r24, 0x4D	; 77
    4bd6:	90 e0       	ldi	r25, 0x00	; 0
    4bd8:	91 83       	std	Z+1, r25	; 0x01
    4bda:	80 83       	st	Z, r24
              break;
    4bdc:	2b c0       	rjmp	.+86     	; 0x4c34 <parseEvent+0x46e>
            case 1:
              strcpy(mev.chars, aaa[sf+10]);
    4bde:	0e 2e       	mov	r0, r30
    4be0:	00 0c       	add	r0, r0
    4be2:	ff 0b       	sbc	r31, r31
    4be4:	3a 96       	adiw	r30, 0x0a	; 10
    4be6:	ee 0f       	add	r30, r30
    4be8:	ff 1f       	adc	r31, r31
    4bea:	ec 0f       	add	r30, r28
    4bec:	fd 1f       	adc	r31, r29
    4bee:	63 ad       	ldd	r22, Z+59	; 0x3b
    4bf0:	74 ad       	ldd	r23, Z+60	; 0x3c
    4bf2:	8e 01       	movw	r16, r28
    4bf4:	07 5f       	subi	r16, 0xF7	; 247
    4bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    4bf8:	c8 01       	movw	r24, r16
    4bfa:	0e 94 a3 39 	call	0x7346	; 0x7346 <strcpy>
              strcat(mev.chars, "m");
    4bfe:	f8 01       	movw	r30, r16
    4c00:	01 90       	ld	r0, Z+
    4c02:	00 20       	and	r0, r0
    4c04:	e9 f7       	brne	.-6      	; 0x4c00 <parseEvent+0x43a>
    4c06:	31 97       	sbiw	r30, 0x01	; 1
    4c08:	8d e6       	ldi	r24, 0x6D	; 109
    4c0a:	90 e0       	ldi	r25, 0x00	; 0
    4c0c:	91 83       	std	Z+1, r25	; 0x01
    4c0e:	80 83       	st	Z, r24
              break;
    4c10:	11 c0       	rjmp	.+34     	; 0x4c34 <parseEvent+0x46e>
            default:
              strcpy(mev.chars, "Err"); // error mi
    4c12:	85 e4       	ldi	r24, 0x45	; 69
    4c14:	92 e7       	ldi	r25, 0x72	; 114
    4c16:	9a 87       	std	Y+10, r25	; 0x0a
    4c18:	89 87       	std	Y+9, r24	; 0x09
    4c1a:	82 e7       	ldi	r24, 0x72	; 114
    4c1c:	90 e0       	ldi	r25, 0x00	; 0
    4c1e:	9c 87       	std	Y+12, r25	; 0x0c
    4c20:	8b 87       	std	Y+11, r24	; 0x0b
    4c22:	08 c0       	rjmp	.+16     	; 0x4c34 <parseEvent+0x46e>
          }
        } else
          strcpy(mev.chars, "Err"); // error sf
    4c24:	85 e4       	ldi	r24, 0x45	; 69
    4c26:	92 e7       	ldi	r25, 0x72	; 114
    4c28:	9a 87       	std	Y+10, r25	; 0x0a
    4c2a:	89 87       	std	Y+9, r24	; 0x09
    4c2c:	82 e7       	ldi	r24, 0x72	; 114
    4c2e:	90 e0       	ldi	r25, 0x00	; 0
    4c30:	9c 87       	std	Y+12, r25	; 0x0c
    4c32:	8b 87       	std	Y+11, r24	; 0x0b

        mev.size = strlen(mev.chars); // change META length
    4c34:	de 01       	movw	r26, r28
    4c36:	19 96       	adiw	r26, 0x09	; 9
    4c38:	fd 01       	movw	r30, r26
    4c3a:	01 90       	ld	r0, Z+
    4c3c:	00 20       	and	r0, r0
    4c3e:	e9 f7       	brne	.-6      	; 0x4c3a <parseEvent+0x474>
    4c40:	31 97       	sbiw	r30, 0x01	; 1
    4c42:	ea 1b       	sub	r30, r26
    4c44:	fb 0b       	sbc	r31, r27
    4c46:	ff 83       	std	Y+7, r31	; 0x07
    4c48:	ee 83       	std	Y+6, r30	; 0x06
        //DUMP(" ", mev.chars);
      }
      break;
    4c4a:	27 c1       	rjmp	.+590    	; 0x4e9a <parseEvent+0x6d4>

      case 0x00:  // Sequence Number
      {
        uint16_t x = readMultiByte(&mf->_fd, MB_WORD);
    4c4c:	62 e0       	ldi	r22, 0x02	; 2
    4c4e:	c8 01       	movw	r24, r16
    4c50:	0e 94 2b 23 	call	0x4656	; 0x4656 <readMultiByte>

        mev.data[0] = (x >> 8) & 0xFF;
    4c54:	79 87       	std	Y+9, r23	; 0x09
        mev.data[1] = x & 0xFF;
    4c56:	6a 87       	std	Y+10, r22	; 0x0a

        //DUMP("SEQUENCE NUMBER ", mev.data[0]);
        //DUMP(" ", mev.data[1]);
      }
      break;
    4c58:	20 c1       	rjmp	.+576    	; 0x4e9a <parseEvent+0x6d4>

      case 0x20:  // Channel Prefix
      mev.data[0] = readMultiByte(&mf->_fd, MB_BYTE);
    4c5a:	61 e0       	ldi	r22, 0x01	; 1
    4c5c:	c8 01       	movw	r24, r16
    4c5e:	0e 94 2b 23 	call	0x4656	; 0x4656 <readMultiByte>
    4c62:	69 87       	std	Y+9, r22	; 0x09
      //DUMP("CHANNEL PREFIX ", mev.data[0]);
      break;
    4c64:	1a c1       	rjmp	.+564    	; 0x4e9a <parseEvent+0x6d4>

      case 0x21:  // Port Prefix
      mev.data[0] = readMultiByte(&mf->_fd, MB_BYTE);
    4c66:	61 e0       	ldi	r22, 0x01	; 1
    4c68:	c8 01       	movw	r24, r16
    4c6a:	0e 94 2b 23 	call	0x4656	; 0x4656 <readMultiByte>
    4c6e:	69 87       	std	Y+9, r22	; 0x09
      //DUMP("PORT PREFIX ", mev.data[0]);
      break;
    4c70:	14 c1       	rjmp	.+552    	; 0x4e9a <parseEvent+0x6d4>

#if SHOW_UNUSED_META
      case 0x01:  // Text
      //DUMPS("TEXT ");
      for (int i=0; i<mLen; i++)
    4c72:	e1 2c       	mov	r14, r1
    4c74:	f1 2c       	mov	r15, r1
        f_read(&mf->_fd,&bVal,1,&bRead);
    4c76:	9e 01       	movw	r18, r28
    4c78:	2d 5f       	subi	r18, 0xFD	; 253
    4c7a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c7c:	41 e0       	ldi	r20, 0x01	; 1
    4c7e:	50 e0       	ldi	r21, 0x00	; 0
    4c80:	be 01       	movw	r22, r28
    4c82:	6e 5f       	subi	r22, 0xFE	; 254
    4c84:	7f 4f       	sbci	r23, 0xFF	; 255
    4c86:	c8 01       	movw	r24, r16
    4c88:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
      break;

#if SHOW_UNUSED_META
      case 0x01:  // Text
      //DUMPS("TEXT ");
      for (int i=0; i<mLen; i++)
    4c8c:	ff ef       	ldi	r31, 0xFF	; 255
    4c8e:	ef 1a       	sub	r14, r31
    4c90:	ff 0a       	sbc	r15, r31
    4c92:	c7 01       	movw	r24, r14
    4c94:	0f 2c       	mov	r0, r15
    4c96:	00 0c       	add	r0, r0
    4c98:	aa 0b       	sbc	r26, r26
    4c9a:	bb 0b       	sbc	r27, r27
    4c9c:	84 15       	cp	r24, r4
    4c9e:	95 05       	cpc	r25, r5
    4ca0:	a6 05       	cpc	r26, r6
    4ca2:	b7 05       	cpc	r27, r7
    4ca4:	40 f3       	brcs	.-48     	; 0x4c76 <parseEvent+0x4b0>
    4ca6:	f9 c0       	rjmp	.+498    	; 0x4e9a <parseEvent+0x6d4>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x02:  // Copyright Notice
      //DUMPS("COPYRIGHT ");
      for (uint8_t i=0; i<mLen; i++)
    4ca8:	f1 2c       	mov	r15, r1
       f_read(&mf->_fd,&bVal,1,&bRead);
    4caa:	9e 01       	movw	r18, r28
    4cac:	2d 5f       	subi	r18, 0xFD	; 253
    4cae:	3f 4f       	sbci	r19, 0xFF	; 255
    4cb0:	41 e0       	ldi	r20, 0x01	; 1
    4cb2:	50 e0       	ldi	r21, 0x00	; 0
    4cb4:	be 01       	movw	r22, r28
    4cb6:	6e 5f       	subi	r22, 0xFE	; 254
    4cb8:	7f 4f       	sbci	r23, 0xFF	; 255
    4cba:	c8 01       	movw	r24, r16
    4cbc:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x02:  // Copyright Notice
      //DUMPS("COPYRIGHT ");
      for (uint8_t i=0; i<mLen; i++)
    4cc0:	f3 94       	inc	r15
    4cc2:	8f 2d       	mov	r24, r15
    4cc4:	90 e0       	ldi	r25, 0x00	; 0
    4cc6:	a0 e0       	ldi	r26, 0x00	; 0
    4cc8:	b0 e0       	ldi	r27, 0x00	; 0
    4cca:	84 15       	cp	r24, r4
    4ccc:	95 05       	cpc	r25, r5
    4cce:	a6 05       	cpc	r26, r6
    4cd0:	b7 05       	cpc	r27, r7
    4cd2:	58 f3       	brcs	.-42     	; 0x4caa <parseEvent+0x4e4>
    4cd4:	e2 c0       	rjmp	.+452    	; 0x4e9a <parseEvent+0x6d4>
       f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x03:  // Sequence or Track Name
      //DUMPS("SEQ/TRK NAME ");
      for (uint8_t i=0; i<mLen; i++)
    4cd6:	f1 2c       	mov	r15, r1
        f_read(&mf->_fd,&bVal,1,&bRead);
    4cd8:	9e 01       	movw	r18, r28
    4cda:	2d 5f       	subi	r18, 0xFD	; 253
    4cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    4cde:	41 e0       	ldi	r20, 0x01	; 1
    4ce0:	50 e0       	ldi	r21, 0x00	; 0
    4ce2:	be 01       	movw	r22, r28
    4ce4:	6e 5f       	subi	r22, 0xFE	; 254
    4ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    4ce8:	c8 01       	movw	r24, r16
    4cea:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
       f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x03:  // Sequence or Track Name
      //DUMPS("SEQ/TRK NAME ");
      for (uint8_t i=0; i<mLen; i++)
    4cee:	f3 94       	inc	r15
    4cf0:	8f 2d       	mov	r24, r15
    4cf2:	90 e0       	ldi	r25, 0x00	; 0
    4cf4:	a0 e0       	ldi	r26, 0x00	; 0
    4cf6:	b0 e0       	ldi	r27, 0x00	; 0
    4cf8:	84 15       	cp	r24, r4
    4cfa:	95 05       	cpc	r25, r5
    4cfc:	a6 05       	cpc	r26, r6
    4cfe:	b7 05       	cpc	r27, r7
    4d00:	58 f3       	brcs	.-42     	; 0x4cd8 <parseEvent+0x512>
    4d02:	cb c0       	rjmp	.+406    	; 0x4e9a <parseEvent+0x6d4>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x04:  // Instrument Name
      //DUMPS("INSTRUMENT ");
      for (uint8_t i=0; i<mLen; i++)
    4d04:	f1 2c       	mov	r15, r1
        f_read(&mf->_fd,&bVal,1,&bRead);
    4d06:	9e 01       	movw	r18, r28
    4d08:	2d 5f       	subi	r18, 0xFD	; 253
    4d0a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d0c:	41 e0       	ldi	r20, 0x01	; 1
    4d0e:	50 e0       	ldi	r21, 0x00	; 0
    4d10:	be 01       	movw	r22, r28
    4d12:	6e 5f       	subi	r22, 0xFE	; 254
    4d14:	7f 4f       	sbci	r23, 0xFF	; 255
    4d16:	c8 01       	movw	r24, r16
    4d18:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x04:  // Instrument Name
      //DUMPS("INSTRUMENT ");
      for (uint8_t i=0; i<mLen; i++)
    4d1c:	f3 94       	inc	r15
    4d1e:	8f 2d       	mov	r24, r15
    4d20:	90 e0       	ldi	r25, 0x00	; 0
    4d22:	a0 e0       	ldi	r26, 0x00	; 0
    4d24:	b0 e0       	ldi	r27, 0x00	; 0
    4d26:	84 15       	cp	r24, r4
    4d28:	95 05       	cpc	r25, r5
    4d2a:	a6 05       	cpc	r26, r6
    4d2c:	b7 05       	cpc	r27, r7
    4d2e:	58 f3       	brcs	.-42     	; 0x4d06 <parseEvent+0x540>
    4d30:	b4 c0       	rjmp	.+360    	; 0x4e9a <parseEvent+0x6d4>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x05:  // Lyric
      //DUMPS("LYRIC ");
      for (uint8_t i=0; i<mLen; i++)
    4d32:	f1 2c       	mov	r15, r1
        f_read(&mf->_fd,&bVal,1,&bRead);
    4d34:	9e 01       	movw	r18, r28
    4d36:	2d 5f       	subi	r18, 0xFD	; 253
    4d38:	3f 4f       	sbci	r19, 0xFF	; 255
    4d3a:	41 e0       	ldi	r20, 0x01	; 1
    4d3c:	50 e0       	ldi	r21, 0x00	; 0
    4d3e:	be 01       	movw	r22, r28
    4d40:	6e 5f       	subi	r22, 0xFE	; 254
    4d42:	7f 4f       	sbci	r23, 0xFF	; 255
    4d44:	c8 01       	movw	r24, r16
    4d46:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x05:  // Lyric
      //DUMPS("LYRIC ");
      for (uint8_t i=0; i<mLen; i++)
    4d4a:	f3 94       	inc	r15
    4d4c:	8f 2d       	mov	r24, r15
    4d4e:	90 e0       	ldi	r25, 0x00	; 0
    4d50:	a0 e0       	ldi	r26, 0x00	; 0
    4d52:	b0 e0       	ldi	r27, 0x00	; 0
    4d54:	84 15       	cp	r24, r4
    4d56:	95 05       	cpc	r25, r5
    4d58:	a6 05       	cpc	r26, r6
    4d5a:	b7 05       	cpc	r27, r7
    4d5c:	58 f3       	brcs	.-42     	; 0x4d34 <parseEvent+0x56e>
    4d5e:	9d c0       	rjmp	.+314    	; 0x4e9a <parseEvent+0x6d4>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x06:  // Marker
      //DUMPS("MARKER ");
      for (uint8_t i=0; i<mLen; i++)
    4d60:	f1 2c       	mov	r15, r1
        f_read(&mf->_fd,&bVal,1,&bRead);
    4d62:	9e 01       	movw	r18, r28
    4d64:	2d 5f       	subi	r18, 0xFD	; 253
    4d66:	3f 4f       	sbci	r19, 0xFF	; 255
    4d68:	41 e0       	ldi	r20, 0x01	; 1
    4d6a:	50 e0       	ldi	r21, 0x00	; 0
    4d6c:	be 01       	movw	r22, r28
    4d6e:	6e 5f       	subi	r22, 0xFE	; 254
    4d70:	7f 4f       	sbci	r23, 0xFF	; 255
    4d72:	c8 01       	movw	r24, r16
    4d74:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x06:  // Marker
      //DUMPS("MARKER ");
      for (uint8_t i=0; i<mLen; i++)
    4d78:	f3 94       	inc	r15
    4d7a:	8f 2d       	mov	r24, r15
    4d7c:	90 e0       	ldi	r25, 0x00	; 0
    4d7e:	a0 e0       	ldi	r26, 0x00	; 0
    4d80:	b0 e0       	ldi	r27, 0x00	; 0
    4d82:	84 15       	cp	r24, r4
    4d84:	95 05       	cpc	r25, r5
    4d86:	a6 05       	cpc	r26, r6
    4d88:	b7 05       	cpc	r27, r7
    4d8a:	58 f3       	brcs	.-42     	; 0x4d62 <parseEvent+0x59c>
    4d8c:	86 c0       	rjmp	.+268    	; 0x4e9a <parseEvent+0x6d4>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x07:  // Cue Point
      //DUMPS("CUE POINT ");
      for (uint8_t i=0; i<mLen; i++)
    4d8e:	f1 2c       	mov	r15, r1
        f_read(&mf->_fd,&bVal,1,&bRead);
    4d90:	9e 01       	movw	r18, r28
    4d92:	2d 5f       	subi	r18, 0xFD	; 253
    4d94:	3f 4f       	sbci	r19, 0xFF	; 255
    4d96:	41 e0       	ldi	r20, 0x01	; 1
    4d98:	50 e0       	ldi	r21, 0x00	; 0
    4d9a:	be 01       	movw	r22, r28
    4d9c:	6e 5f       	subi	r22, 0xFE	; 254
    4d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    4da0:	c8 01       	movw	r24, r16
    4da2:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x07:  // Cue Point
      //DUMPS("CUE POINT ");
      for (uint8_t i=0; i<mLen; i++)
    4da6:	f3 94       	inc	r15
    4da8:	8f 2d       	mov	r24, r15
    4daa:	90 e0       	ldi	r25, 0x00	; 0
    4dac:	a0 e0       	ldi	r26, 0x00	; 0
    4dae:	b0 e0       	ldi	r27, 0x00	; 0
    4db0:	84 15       	cp	r24, r4
    4db2:	95 05       	cpc	r25, r5
    4db4:	a6 05       	cpc	r26, r6
    4db6:	b7 05       	cpc	r27, r7
    4db8:	58 f3       	brcs	.-42     	; 0x4d90 <parseEvent+0x5ca>
    4dba:	6f c0       	rjmp	.+222    	; 0x4e9a <parseEvent+0x6d4>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x54:  // SMPTE Offset
      //DUMPS("SMPTE OFFSET");
      for (uint8_t i=0; i<mLen; i++)
    4dbc:	f1 2c       	mov	r15, r1
      {
        f_read(&mf->_fd,&bVal,1,&bRead);
    4dbe:	9e 01       	movw	r18, r28
    4dc0:	2d 5f       	subi	r18, 0xFD	; 253
    4dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    4dc4:	41 e0       	ldi	r20, 0x01	; 1
    4dc6:	50 e0       	ldi	r21, 0x00	; 0
    4dc8:	be 01       	movw	r22, r28
    4dca:	6e 5f       	subi	r22, 0xFE	; 254
    4dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    4dce:	c8 01       	movw	r24, r16
    4dd0:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
        f_read(&mf->_fd,&bVal,1,&bRead);
      break;

      case 0x54:  // SMPTE Offset
      //DUMPS("SMPTE OFFSET");
      for (uint8_t i=0; i<mLen; i++)
    4dd4:	f3 94       	inc	r15
    4dd6:	8f 2d       	mov	r24, r15
    4dd8:	90 e0       	ldi	r25, 0x00	; 0
    4dda:	a0 e0       	ldi	r26, 0x00	; 0
    4ddc:	b0 e0       	ldi	r27, 0x00	; 0
    4dde:	84 15       	cp	r24, r4
    4de0:	95 05       	cpc	r25, r5
    4de2:	a6 05       	cpc	r26, r6
    4de4:	b7 05       	cpc	r27, r7
    4de6:	58 f3       	brcs	.-42     	; 0x4dbe <parseEvent+0x5f8>
    4de8:	58 c0       	rjmp	.+176    	; 0x4e9a <parseEvent+0x6d4>
      }
      break;

      case 0x7F:  // Sequencer Specific Metadata
      //DUMPS("SEQ SPECIFIC");
      for (uint8_t i=0; i<mLen; i++)
    4dea:	f1 2c       	mov	r15, r1
      {
        f_read(&mf->_fd,&bVal,1,&bRead);
    4dec:	9e 01       	movw	r18, r28
    4dee:	2d 5f       	subi	r18, 0xFD	; 253
    4df0:	3f 4f       	sbci	r19, 0xFF	; 255
    4df2:	41 e0       	ldi	r20, 0x01	; 1
    4df4:	50 e0       	ldi	r21, 0x00	; 0
    4df6:	be 01       	movw	r22, r28
    4df8:	6e 5f       	subi	r22, 0xFE	; 254
    4dfa:	7f 4f       	sbci	r23, 0xFF	; 255
    4dfc:	c8 01       	movw	r24, r16
    4dfe:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
      }
      break;

      case 0x7F:  // Sequencer Specific Metadata
      //DUMPS("SEQ SPECIFIC");
      for (uint8_t i=0; i<mLen; i++)
    4e02:	f3 94       	inc	r15
    4e04:	8f 2d       	mov	r24, r15
    4e06:	90 e0       	ldi	r25, 0x00	; 0
    4e08:	a0 e0       	ldi	r26, 0x00	; 0
    4e0a:	b0 e0       	ldi	r27, 0x00	; 0
    4e0c:	84 15       	cp	r24, r4
    4e0e:	95 05       	cpc	r25, r5
    4e10:	a6 05       	cpc	r26, r6
    4e12:	b7 05       	cpc	r27, r7
    4e14:	58 f3       	brcs	.-42     	; 0x4dec <parseEvent+0x626>
    4e16:	41 c0       	rjmp	.+130    	; 0x4e9a <parseEvent+0x6d4>
      break;
#endif // SHOW_UNUSED_META

      default:
      {
        uint8_t minLen = min(ARRAY_SIZE(mev.data), mLen);
    4e18:	84 2d       	mov	r24, r4
    4e1a:	23 e3       	ldi	r18, 0x33	; 51
    4e1c:	42 16       	cp	r4, r18
    4e1e:	51 04       	cpc	r5, r1
    4e20:	61 04       	cpc	r6, r1
    4e22:	71 04       	cpc	r7, r1
    4e24:	08 f0       	brcs	.+2      	; 0x4e28 <parseEvent+0x662>
    4e26:	82 e3       	ldi	r24, 0x32	; 50
    4e28:	98 2e       	mov	r9, r24
        
        for (uint8_t i = 0; i < minLen; ++i)
    4e2a:	88 23       	and	r24, r24
    4e2c:	d1 f0       	breq	.+52     	; 0x4e62 <parseEvent+0x69c>
    4e2e:	7e 01       	movw	r14, r28
    4e30:	39 e0       	ldi	r19, 0x09	; 9
    4e32:	e3 0e       	add	r14, r19
    4e34:	f1 1c       	adc	r15, r1
    4e36:	81 50       	subi	r24, 0x01	; 1
    4e38:	de 01       	movw	r26, r28
    4e3a:	a8 0f       	add	r26, r24
    4e3c:	b1 1d       	adc	r27, r1
    4e3e:	fd 01       	movw	r30, r26
    4e40:	3a 96       	adiw	r30, 0x0a	; 10
    4e42:	5f 01       	movw	r10, r30
          f_read(&mf->_fd,&mev.data[i],1,&bRead); // read next
    4e44:	9e 01       	movw	r18, r28
    4e46:	2d 5f       	subi	r18, 0xFD	; 253
    4e48:	3f 4f       	sbci	r19, 0xFF	; 255
    4e4a:	41 e0       	ldi	r20, 0x01	; 1
    4e4c:	50 e0       	ldi	r21, 0x00	; 0
    4e4e:	b7 01       	movw	r22, r14
    4e50:	c8 01       	movw	r24, r16
    4e52:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
    4e56:	ff ef       	ldi	r31, 0xFF	; 255
    4e58:	ef 1a       	sub	r14, r31
    4e5a:	ff 0a       	sbc	r15, r31

      default:
      {
        uint8_t minLen = min(ARRAY_SIZE(mev.data), mLen);
        
        for (uint8_t i = 0; i < minLen; ++i)
    4e5c:	ae 14       	cp	r10, r14
    4e5e:	bf 04       	cpc	r11, r15
    4e60:	89 f7       	brne	.-30     	; 0x4e44 <parseEvent+0x67e>
          f_read(&mf->_fd,&mev.data[i],1,&bRead); // read next
		 		  
        mev.chars[minLen] = '\0'; // in case it is a string
    4e62:	fe 01       	movw	r30, r28
    4e64:	e9 0d       	add	r30, r9
    4e66:	f1 1d       	adc	r31, r1
    4e68:	11 86       	std	Z+9, r1	; 0x09
        if (mLen > ARRAY_SIZE(mev.data))
    4e6a:	23 e3       	ldi	r18, 0x33	; 51
    4e6c:	42 16       	cp	r4, r18
    4e6e:	51 04       	cpc	r5, r1
    4e70:	61 04       	cpc	r6, r1
    4e72:	71 04       	cpc	r7, r1
    4e74:	90 f0       	brcs	.+36     	; 0x4e9a <parseEvent+0x6d4>
          f_lseek(&mf->_fd,f_tell(&mf->_fd) + (mLen-ARRAY_SIZE(mev.data)));
    4e76:	d6 01       	movw	r26, r12
    4e78:	1c 96       	adiw	r26, 0x0c	; 12
    4e7a:	4d 91       	ld	r20, X+
    4e7c:	5d 91       	ld	r21, X+
    4e7e:	6d 91       	ld	r22, X+
    4e80:	7c 91       	ld	r23, X
    4e82:	1f 97       	sbiw	r26, 0x0f	; 15
    4e84:	42 53       	subi	r20, 0x32	; 50
    4e86:	51 09       	sbc	r21, r1
    4e88:	61 09       	sbc	r22, r1
    4e8a:	71 09       	sbc	r23, r1
    4e8c:	44 0d       	add	r20, r4
    4e8e:	55 1d       	adc	r21, r5
    4e90:	66 1d       	adc	r22, r6
    4e92:	77 1d       	adc	r23, r7
    4e94:	c8 01       	movw	r24, r16
    4e96:	0e 94 c4 14 	call	0x2988	; 0x2988 <f_lseek>
  //    DUMPS("IGNORED");
      }
      break;
    }
    if (mf->_metaHandler != NULL)
    4e9a:	d6 01       	movw	r26, r12
    4e9c:	14 96       	adiw	r26, 0x04	; 4
    4e9e:	ed 91       	ld	r30, X+
    4ea0:	fc 91       	ld	r31, X
    4ea2:	15 97       	sbiw	r26, 0x05	; 5
    4ea4:	30 97       	sbiw	r30, 0x00	; 0
    4ea6:	39 f0       	breq	.+14     	; 0x4eb6 <parseEvent+0x6f0>
      (mf->_metaHandler)(&mev);
    4ea8:	ce 01       	movw	r24, r28
    4eaa:	05 96       	adiw	r24, 0x05	; 5
    4eac:	09 95       	icall
  }
  break;
    4eae:	03 c0       	rjmp	.+6      	; 0x4eb6 <parseEvent+0x6f0>
  
// ---------------------------- UNKNOWN
  default:
    // stop playing this track as we cannot identify the eType
    t->_endOfTrack = TRUE;
    4eb0:	81 e0       	ldi	r24, 0x01	; 1
    4eb2:	f7 01       	movw	r30, r14
    4eb4:	85 87       	std	Z+13, r24	; 0x0d
    DUMPX("[UKNOWN 0x", eType);
    DUMPS("] Track aborted");
    break;
  }
}
    4eb6:	c0 5a       	subi	r28, 0xA0	; 160
    4eb8:	df 4f       	sbci	r29, 0xFF	; 255
    4eba:	0f b6       	in	r0, 0x3f	; 63
    4ebc:	f8 94       	cli
    4ebe:	de bf       	out	0x3e, r29	; 62
    4ec0:	0f be       	out	0x3f, r0	; 63
    4ec2:	cd bf       	out	0x3d, r28	; 61
    4ec4:	df 91       	pop	r29
    4ec6:	cf 91       	pop	r28
    4ec8:	1f 91       	pop	r17
    4eca:	0f 91       	pop	r16
    4ecc:	ff 90       	pop	r15
    4ece:	ef 90       	pop	r14
    4ed0:	df 90       	pop	r13
    4ed2:	cf 90       	pop	r12
    4ed4:	bf 90       	pop	r11
    4ed6:	af 90       	pop	r10
    4ed8:	9f 90       	pop	r9
    4eda:	7f 90       	pop	r7
    4edc:	6f 90       	pop	r6
    4ede:	5f 90       	pop	r5
    4ee0:	4f 90       	pop	r4
    4ee2:	08 95       	ret

00004ee4 <getNextTrackEvent>:
  t->_elapsedTicks = 0;
}

BOOL getNextTrackEvent(struct MD_MIDIFile *mf,struct MD_MFTrack *t, uint16_t tickCount)
// track_event = <time:v> + [<midi_event> | <meta_event> | <sysex_event>]
{
    4ee4:	8f 92       	push	r8
    4ee6:	9f 92       	push	r9
    4ee8:	af 92       	push	r10
    4eea:	bf 92       	push	r11
    4eec:	cf 92       	push	r12
    4eee:	df 92       	push	r13
    4ef0:	ef 92       	push	r14
    4ef2:	ff 92       	push	r15
    4ef4:	1f 93       	push	r17
    4ef6:	cf 93       	push	r28
    4ef8:	df 93       	push	r29
  uint32_t deltaT;

  // is there anything to process?
  if (t->_endOfTrack)
    4efa:	fb 01       	movw	r30, r22
    4efc:	15 85       	ldd	r17, Z+13	; 0x0d
    4efe:	11 11       	cpse	r17, r1
    4f00:	61 c0       	rjmp	.+194    	; 0x4fc4 <getNextTrackEvent+0xe0>
    4f02:	6a 01       	movw	r12, r20
    4f04:	eb 01       	movw	r28, r22
    4f06:	7c 01       	movw	r14, r24
    return(FALSE);

  // move the file pointer to where we left off
  f_lseek(&mf->_fd,t->_startOffset+t->_currOffset);  
    4f08:	5c 01       	movw	r10, r24
    4f0a:	f6 e0       	ldi	r31, 0x06	; 6
    4f0c:	af 0e       	add	r10, r31
    4f0e:	b1 1c       	adc	r11, r1
    4f10:	4d 81       	ldd	r20, Y+5	; 0x05
    4f12:	5e 81       	ldd	r21, Y+6	; 0x06
    4f14:	6f 81       	ldd	r22, Y+7	; 0x07
    4f16:	78 85       	ldd	r23, Y+8	; 0x08
    4f18:	89 85       	ldd	r24, Y+9	; 0x09
    4f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f1c:	ab 85       	ldd	r26, Y+11	; 0x0b
    4f1e:	bc 85       	ldd	r27, Y+12	; 0x0c
    4f20:	48 0f       	add	r20, r24
    4f22:	59 1f       	adc	r21, r25
    4f24:	6a 1f       	adc	r22, r26
    4f26:	7b 1f       	adc	r23, r27
    4f28:	c5 01       	movw	r24, r10
    4f2a:	0e 94 c4 14 	call	0x2988	; 0x2988 <f_lseek>

  // Work out new total elapsed ticks - include the overshoot from
  // last event.
  t->_elapsedTicks += tickCount;
    4f2e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4f30:	9f 85       	ldd	r25, Y+15	; 0x0f
    4f32:	a8 89       	ldd	r26, Y+16	; 0x10
    4f34:	b9 89       	ldd	r27, Y+17	; 0x11
    4f36:	8c 0d       	add	r24, r12
    4f38:	9d 1d       	adc	r25, r13
    4f3a:	a1 1d       	adc	r26, r1
    4f3c:	b1 1d       	adc	r27, r1
    4f3e:	8e 87       	std	Y+14, r24	; 0x0e
    4f40:	9f 87       	std	Y+15, r25	; 0x0f
    4f42:	a8 8b       	std	Y+16, r26	; 0x10
    4f44:	b9 8b       	std	Y+17, r27	; 0x11

  // Get the DeltaT from the file in order to see if enough ticks have
  // passed for the event to be active.
  deltaT = readVarLen(&mf->_fd);
    4f46:	c5 01       	movw	r24, r10
    4f48:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <readVarLen>

  // If not enough ticks, just return without saving the file pointer and 
  // we will go back to the same spot next time.
  if (t->_elapsedTicks < deltaT)
    4f4c:	8e 84       	ldd	r8, Y+14	; 0x0e
    4f4e:	9f 84       	ldd	r9, Y+15	; 0x0f
    4f50:	a8 88       	ldd	r10, Y+16	; 0x10
    4f52:	b9 88       	ldd	r11, Y+17	; 0x11
    4f54:	86 16       	cp	r8, r22
    4f56:	97 06       	cpc	r9, r23
    4f58:	a8 06       	cpc	r10, r24
    4f5a:	b9 06       	cpc	r11, r25
    4f5c:	a0 f1       	brcs	.+104    	; 0x4fc6 <getNextTrackEvent+0xe2>
    return(FALSE);

  // Adjust the total elapsed time to the error against actual DeltaT to avoid 
  // accumulation of errors, as we only check for _elapsedTicks being >= ticks,
  // giving positive biased errors every time.
  t->_elapsedTicks -= deltaT;
    4f5e:	a5 01       	movw	r20, r10
    4f60:	94 01       	movw	r18, r8
    4f62:	26 1b       	sub	r18, r22
    4f64:	37 0b       	sbc	r19, r23
    4f66:	48 0b       	sbc	r20, r24
    4f68:	59 0b       	sbc	r21, r25
    4f6a:	2e 87       	std	Y+14, r18	; 0x0e
    4f6c:	3f 87       	std	Y+15, r19	; 0x0f
    4f6e:	48 8b       	std	Y+16, r20	; 0x10
    4f70:	59 8b       	std	Y+17, r21	; 0x11

  DUMP("\ndT: ", deltaT);
  DUMP(" + ", _elapsedTicks);
  DUMPS("\t");

  parseEvent(mf,t);
    4f72:	be 01       	movw	r22, r28
    4f74:	c7 01       	movw	r24, r14
    4f76:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <parseEvent>

  // remember the offset for next time
  t->_currOffset = mf->_fd.fptr - t->_startOffset;
    4f7a:	f7 01       	movw	r30, r14
    4f7c:	84 85       	ldd	r24, Z+12	; 0x0c
    4f7e:	95 85       	ldd	r25, Z+13	; 0x0d
    4f80:	a6 85       	ldd	r26, Z+14	; 0x0e
    4f82:	b7 85       	ldd	r27, Z+15	; 0x0f
    4f84:	4d 81       	ldd	r20, Y+5	; 0x05
    4f86:	5e 81       	ldd	r21, Y+6	; 0x06
    4f88:	6f 81       	ldd	r22, Y+7	; 0x07
    4f8a:	78 85       	ldd	r23, Y+8	; 0x08
    4f8c:	84 1b       	sub	r24, r20
    4f8e:	95 0b       	sbc	r25, r21
    4f90:	a6 0b       	sbc	r26, r22
    4f92:	b7 0b       	sbc	r27, r23
    4f94:	89 87       	std	Y+9, r24	; 0x09
    4f96:	9a 87       	std	Y+10, r25	; 0x0a
    4f98:	ab 87       	std	Y+11, r26	; 0x0b
    4f9a:	bc 87       	std	Y+12, r27	; 0x0c

  // catch end of track when there is no META event  
  t->_endOfTrack = t->_endOfTrack || (t->_currOffset >= t->_length);
    4f9c:	2d 85       	ldd	r18, Y+13	; 0x0d
    4f9e:	21 11       	cpse	r18, r1
    4fa0:	0d c0       	rjmp	.+26     	; 0x4fbc <getNextTrackEvent+0xd8>
    4fa2:	21 e0       	ldi	r18, 0x01	; 1
    4fa4:	49 81       	ldd	r20, Y+1	; 0x01
    4fa6:	5a 81       	ldd	r21, Y+2	; 0x02
    4fa8:	6b 81       	ldd	r22, Y+3	; 0x03
    4faa:	7c 81       	ldd	r23, Y+4	; 0x04
    4fac:	84 17       	cp	r24, r20
    4fae:	95 07       	cpc	r25, r21
    4fb0:	a6 07       	cpc	r26, r22
    4fb2:	b7 07       	cpc	r27, r23
    4fb4:	08 f4       	brcc	.+2      	; 0x4fb8 <getNextTrackEvent+0xd4>
    4fb6:	20 e0       	ldi	r18, 0x00	; 0
    4fb8:	82 2f       	mov	r24, r18
    4fba:	01 c0       	rjmp	.+2      	; 0x4fbe <getNextTrackEvent+0xda>
    4fbc:	81 e0       	ldi	r24, 0x01	; 1
    4fbe:	8d 87       	std	Y+13, r24	; 0x0d
  if (t->_endOfTrack) DUMPS(" - OUT OF TRACK");

  return(TRUE);
    4fc0:	11 e0       	ldi	r17, 0x01	; 1
    4fc2:	01 c0       	rjmp	.+2      	; 0x4fc6 <getNextTrackEvent+0xe2>
{
  uint32_t deltaT;

  // is there anything to process?
  if (t->_endOfTrack)
    return(FALSE);
    4fc4:	10 e0       	ldi	r17, 0x00	; 0
  // catch end of track when there is no META event  
  t->_endOfTrack = t->_endOfTrack || (t->_currOffset >= t->_length);
  if (t->_endOfTrack) DUMPS(" - OUT OF TRACK");

  return(TRUE);
}
    4fc6:	81 2f       	mov	r24, r17
    4fc8:	df 91       	pop	r29
    4fca:	cf 91       	pop	r28
    4fcc:	1f 91       	pop	r17
    4fce:	ff 90       	pop	r15
    4fd0:	ef 90       	pop	r14
    4fd2:	df 90       	pop	r13
    4fd4:	cf 90       	pop	r12
    4fd6:	bf 90       	pop	r11
    4fd8:	af 90       	pop	r10
    4fda:	9f 90       	pop	r9
    4fdc:	8f 90       	pop	r8
    4fde:	08 95       	ret

00004fe0 <loadTrack>:
    break;
  }
}

int loadTrack(struct MD_MFTrack *t,uint8_t trackId, struct MD_MIDIFile *mf)
{
    4fe0:	8f 92       	push	r8
    4fe2:	9f 92       	push	r9
    4fe4:	af 92       	push	r10
    4fe6:	bf 92       	push	r11
    4fe8:	cf 92       	push	r12
    4fea:	df 92       	push	r13
    4fec:	ef 92       	push	r14
    4fee:	ff 92       	push	r15
    4ff0:	0f 93       	push	r16
    4ff2:	1f 93       	push	r17
    4ff4:	cf 93       	push	r28
    4ff6:	df 93       	push	r29
    4ff8:	cd b7       	in	r28, 0x3d	; 61
    4ffa:	de b7       	in	r29, 0x3e	; 62
    4ffc:	29 97       	sbiw	r28, 0x09	; 9
    4ffe:	0f b6       	in	r0, 0x3f	; 63
    5000:	f8 94       	cli
    5002:	de bf       	out	0x3e, r29	; 62
    5004:	0f be       	out	0x3f, r0	; 63
    5006:	cd bf       	out	0x3d, r28	; 61
    5008:	8c 01       	movw	r16, r24
    500a:	6a 01       	movw	r12, r20
  uint32_t  dat32;
  //uint16_t  dat16;

  // save the trackid for use later
  t->_trackId = t->_mev.track = trackId;
    500c:	fc 01       	movw	r30, r24
    500e:	62 8b       	std	Z+18, r22	; 0x12
    5010:	60 83       	st	Z, r22
  // Read the Track header
  // track_chunk = "MTrk" + <length:4> + <track_event> [+ <track_event> ...]
  {
    char    h[MTRK_HDR_SIZE+1]; // Header characters + nul
  
    f_read(&mf->_fd,h,MTRK_HDR_SIZE,(UINT *)&dat32);
    5012:	7a 01       	movw	r14, r20
    5014:	f6 e0       	ldi	r31, 0x06	; 6
    5016:	ef 0e       	add	r14, r31
    5018:	f1 1c       	adc	r15, r1
    501a:	9e 01       	movw	r18, r28
    501c:	2f 5f       	subi	r18, 0xFF	; 255
    501e:	3f 4f       	sbci	r19, 0xFF	; 255
    5020:	44 e0       	ldi	r20, 0x04	; 4
    5022:	50 e0       	ldi	r21, 0x00	; 0
    5024:	be 01       	movw	r22, r28
    5026:	6b 5f       	subi	r22, 0xFB	; 251
    5028:	7f 4f       	sbci	r23, 0xFF	; 255
    502a:	c7 01       	movw	r24, r14
    502c:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
    h[MTRK_HDR_SIZE] = '\0';
    5030:	19 86       	std	Y+9, r1	; 0x09

    if (strcmp(h, MTRK_HDR) != 0)
    5032:	67 e7       	ldi	r22, 0x77	; 119
    5034:	71 e0       	ldi	r23, 0x01	; 1
    5036:	ce 01       	movw	r24, r28
    5038:	05 96       	adiw	r24, 0x05	; 5
    503a:	0e 94 9a 39 	call	0x7334	; 0x7334 <strcmp>
    503e:	89 2b       	or	r24, r25
    5040:	19 f0       	breq	.+6      	; 0x5048 <loadTrack+0x68>
      return(0);
    5042:	80 e0       	ldi	r24, 0x00	; 0
    5044:	90 e0       	ldi	r25, 0x00	; 0
    5046:	2b c0       	rjmp	.+86     	; 0x509e <loadTrack+0xbe>
  }

  // Row read track chunk size and in bytes. This is not really necessary 
  // since the track MUST end with an end of track meta event.
  dat32 = readMultiByte(&mf->_fd, MB_LONG);
    5048:	64 e0       	ldi	r22, 0x04	; 4
    504a:	c7 01       	movw	r24, r14
    504c:	0e 94 2b 23 	call	0x4656	; 0x4656 <readMultiByte>
    5050:	69 83       	std	Y+1, r22	; 0x01
    5052:	7a 83       	std	Y+2, r23	; 0x02
    5054:	8b 83       	std	Y+3, r24	; 0x03
    5056:	9c 83       	std	Y+4, r25	; 0x04
  t->_length = dat32;
    5058:	f8 01       	movw	r30, r16
    505a:	61 83       	std	Z+1, r22	; 0x01
    505c:	72 83       	std	Z+2, r23	; 0x02
    505e:	83 83       	std	Z+3, r24	; 0x03
    5060:	94 83       	std	Z+4, r25	; 0x04

  // save where we are in the file as this is the start of offset for this track
  t->_startOffset = mf->_fd.fptr;
    5062:	f6 01       	movw	r30, r12
    5064:	84 84       	ldd	r8, Z+12	; 0x0c
    5066:	95 84       	ldd	r9, Z+13	; 0x0d
    5068:	a6 84       	ldd	r10, Z+14	; 0x0e
    506a:	b7 84       	ldd	r11, Z+15	; 0x0f
    506c:	f8 01       	movw	r30, r16
    506e:	85 82       	std	Z+5, r8	; 0x05
    5070:	96 82       	std	Z+6, r9	; 0x06
    5072:	a7 82       	std	Z+7, r10	; 0x07
    5074:	b0 86       	std	Z+8, r11	; 0x08
  t->_currOffset = 0;
    5076:	11 86       	std	Z+9, r1	; 0x09
    5078:	12 86       	std	Z+10, r1	; 0x0a
    507a:	13 86       	std	Z+11, r1	; 0x0b
    507c:	14 86       	std	Z+12, r1	; 0x0c

  // Advance the file pointer to the start of the next track;
  if (f_lseek(&mf->_fd,(t->_startOffset+t->_length)) != FR_OK)
    507e:	ab 01       	movw	r20, r22
    5080:	bc 01       	movw	r22, r24
    5082:	48 0d       	add	r20, r8
    5084:	59 1d       	adc	r21, r9
    5086:	6a 1d       	adc	r22, r10
    5088:	7b 1d       	adc	r23, r11
    508a:	c7 01       	movw	r24, r14
    508c:	0e 94 c4 14 	call	0x2988	; 0x2988 <f_lseek>
    5090:	81 11       	cpse	r24, r1
    5092:	03 c0       	rjmp	.+6      	; 0x509a <loadTrack+0xba>
    return(1);

  return(-1);
    5094:	8f ef       	ldi	r24, 0xFF	; 255
    5096:	9f ef       	ldi	r25, 0xFF	; 255
    5098:	02 c0       	rjmp	.+4      	; 0x509e <loadTrack+0xbe>
  t->_startOffset = mf->_fd.fptr;
  t->_currOffset = 0;

  // Advance the file pointer to the start of the next track;
  if (f_lseek(&mf->_fd,(t->_startOffset+t->_length)) != FR_OK)
    return(1);
    509a:	81 e0       	ldi	r24, 0x01	; 1
    509c:	90 e0       	ldi	r25, 0x00	; 0

  return(-1);
}
    509e:	29 96       	adiw	r28, 0x09	; 9
    50a0:	0f b6       	in	r0, 0x3f	; 63
    50a2:	f8 94       	cli
    50a4:	de bf       	out	0x3e, r29	; 62
    50a6:	0f be       	out	0x3f, r0	; 63
    50a8:	cd bf       	out	0x3d, r28	; 61
    50aa:	df 91       	pop	r29
    50ac:	cf 91       	pop	r28
    50ae:	1f 91       	pop	r17
    50b0:	0f 91       	pop	r16
    50b2:	ff 90       	pop	r15
    50b4:	ef 90       	pop	r14
    50b6:	df 90       	pop	r13
    50b8:	cf 90       	pop	r12
    50ba:	bf 90       	pop	r11
    50bc:	af 90       	pop	r10
    50be:	9f 90       	pop	r9
    50c0:	8f 90       	pop	r8
    50c2:	08 95       	ret

000050c4 <midiInit>:
	else	
		sendMidiBuffer(ev->data,ev->size);
}

void midiFileVolume(unsigned char vol){
	fileVolume = vol;
    50c4:	81 e0       	ldi	r24, 0x01	; 1
    50c6:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <midiState>
    50ca:	08 95       	ret

000050cc <getMidiStruct>:
    50cc:	ee e8       	ldi	r30, 0x8E	; 142
    50ce:	f4 e0       	ldi	r31, 0x04	; 4
    50d0:	20 91 8b 04 	lds	r18, 0x048B	; 0x80048b <midiReadIndex>
    50d4:	22 83       	std	Z+2, r18	; 0x02
    50d6:	67 83       	std	Z+7, r22	; 0x07
    50d8:	70 87       	std	Z+8, r23	; 0x08
    50da:	81 87       	std	Z+9, r24	; 0x09
    50dc:	92 87       	std	Z+10, r25	; 0x0a
    50de:	cf 01       	movw	r24, r30
    50e0:	08 95       	ret

000050e2 <sendMidiMessage>:
    50e2:	cf 92       	push	r12
    50e4:	df 92       	push	r13
    50e6:	ef 92       	push	r14
    50e8:	ff 92       	push	r15
    50ea:	0f 93       	push	r16
    50ec:	1f 93       	push	r17
    50ee:	cf 93       	push	r28
    50f0:	df 93       	push	r29
    50f2:	08 2f       	mov	r16, r24
    50f4:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <work_event+0x3>
    50f8:	80 7f       	andi	r24, 0xF0	; 240
    50fa:	80 39       	cpi	r24, 0x90	; 144
    50fc:	01 f5       	brne	.+64     	; 0x513e <sendMidiMessage+0x5c>
    50fe:	ce e8       	ldi	r28, 0x8E	; 142
    5100:	d4 e0       	ldi	r29, 0x04	; 4
    5102:	60 91 8d 04 	lds	r22, 0x048D	; 0x80048d <playVolume>
    5106:	70 e0       	ldi	r23, 0x00	; 0
    5108:	80 e0       	ldi	r24, 0x00	; 0
    510a:	90 e0       	ldi	r25, 0x00	; 0
    510c:	0e 94 09 37 	call	0x6e12	; 0x6e12 <__floatunsisf>
    5110:	20 e0       	ldi	r18, 0x00	; 0
    5112:	30 e0       	ldi	r19, 0x00	; 0
    5114:	4f e7       	ldi	r20, 0x7F	; 127
    5116:	53 e4       	ldi	r21, 0x43	; 67
    5118:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <__divsf3>
    511c:	6b 01       	movw	r12, r22
    511e:	7c 01       	movw	r14, r24
    5120:	6d 81       	ldd	r22, Y+5	; 0x05
    5122:	70 e0       	ldi	r23, 0x00	; 0
    5124:	80 e0       	ldi	r24, 0x00	; 0
    5126:	90 e0       	ldi	r25, 0x00	; 0
    5128:	0e 94 0b 37 	call	0x6e16	; 0x6e16 <__floatsisf>
    512c:	9b 01       	movw	r18, r22
    512e:	ac 01       	movw	r20, r24
    5130:	c7 01       	movw	r24, r14
    5132:	b6 01       	movw	r22, r12
    5134:	0e 94 97 37 	call	0x6f2e	; 0x6f2e <__mulsf3>
    5138:	0e 94 da 36 	call	0x6db4	; 0x6db4 <__fixunssfsi>
    513c:	6d 83       	std	Y+5, r22	; 0x05
    513e:	00 23       	and	r16, r16
    5140:	61 f0       	breq	.+24     	; 0x515a <sendMidiMessage+0x78>
    5142:	c1 e9       	ldi	r28, 0x91	; 145
    5144:	d4 e0       	ldi	r29, 0x04	; 4
    5146:	01 50       	subi	r16, 0x01	; 1
    5148:	10 e0       	ldi	r17, 0x00	; 0
    514a:	0e 56       	subi	r16, 0x6E	; 110
    514c:	1b 4f       	sbci	r17, 0xFB	; 251
    514e:	89 91       	ld	r24, Y+
    5150:	0e 94 a8 35 	call	0x6b50	; 0x6b50 <uartSendByte>
    5154:	c0 17       	cp	r28, r16
    5156:	d1 07       	cpc	r29, r17
    5158:	d1 f7       	brne	.-12     	; 0x514e <sendMidiMessage+0x6c>
    515a:	df 91       	pop	r29
    515c:	cf 91       	pop	r28
    515e:	1f 91       	pop	r17
    5160:	0f 91       	pop	r16
    5162:	ff 90       	pop	r15
    5164:	ef 90       	pop	r14
    5166:	df 90       	pop	r13
    5168:	cf 90       	pop	r12
    516a:	08 95       	ret

0000516c <sendMidiBuffer>:
    516c:	0f 93       	push	r16
    516e:	1f 93       	push	r17
    5170:	cf 93       	push	r28
    5172:	df 93       	push	r29
    5174:	66 23       	and	r22, r22
    5176:	71 f0       	breq	.+28     	; 0x5194 <sendMidiBuffer+0x28>
    5178:	ec 01       	movw	r28, r24
    517a:	61 50       	subi	r22, 0x01	; 1
    517c:	06 2f       	mov	r16, r22
    517e:	10 e0       	ldi	r17, 0x00	; 0
    5180:	0f 5f       	subi	r16, 0xFF	; 255
    5182:	1f 4f       	sbci	r17, 0xFF	; 255
    5184:	08 0f       	add	r16, r24
    5186:	19 1f       	adc	r17, r25
    5188:	89 91       	ld	r24, Y+
    518a:	0e 94 a8 35 	call	0x6b50	; 0x6b50 <uartSendByte>
    518e:	c0 17       	cp	r28, r16
    5190:	d1 07       	cpc	r29, r17
    5192:	d1 f7       	brne	.-12     	; 0x5188 <sendMidiBuffer+0x1c>
    5194:	df 91       	pop	r29
    5196:	cf 91       	pop	r28
    5198:	1f 91       	pop	r17
    519a:	0f 91       	pop	r16
    519c:	08 95       	ret

0000519e <sendProgramChange>:
    519e:	1f 93       	push	r17
    51a0:	cf 93       	push	r28
    51a2:	df 93       	push	r29
    51a4:	16 2f       	mov	r17, r22
    51a6:	ce e8       	ldi	r28, 0x8E	; 142
    51a8:	d4 e0       	ldi	r29, 0x04	; 4
    51aa:	90 eb       	ldi	r25, 0xB0	; 176
    51ac:	9b 83       	std	Y+3, r25	; 0x03
    51ae:	1c 82       	std	Y+4, r1	; 0x04
    51b0:	8d 83       	std	Y+5, r24	; 0x05
    51b2:	83 e0       	ldi	r24, 0x03	; 3
    51b4:	0e 94 71 28 	call	0x50e2	; 0x50e2 <sendMidiMessage>
    51b8:	80 ec       	ldi	r24, 0xC0	; 192
    51ba:	8b 83       	std	Y+3, r24	; 0x03
    51bc:	1c 83       	std	Y+4, r17	; 0x04
    51be:	82 e0       	ldi	r24, 0x02	; 2
    51c0:	0e 94 71 28 	call	0x50e2	; 0x50e2 <sendMidiMessage>
    51c4:	df 91       	pop	r29
    51c6:	cf 91       	pop	r28
    51c8:	1f 91       	pop	r17
    51ca:	08 95       	ret

000051cc <commandLen>:
    51cc:	e8 2f       	mov	r30, r24
    51ce:	e0 7f       	andi	r30, 0xF0	; 240
    51d0:	e0 3f       	cpi	r30, 0xF0	; 240
    51d2:	09 f4       	brne	.+2      	; 0x51d6 <commandLen+0xa>
    51d4:	e8 2f       	mov	r30, r24
    51d6:	8e 2f       	mov	r24, r30
    51d8:	90 e0       	ldi	r25, 0x00	; 0
    51da:	fc 01       	movw	r30, r24
    51dc:	e0 58       	subi	r30, 0x80	; 128
    51de:	f1 09       	sbc	r31, r1
    51e0:	e0 38       	cpi	r30, 0x80	; 128
    51e2:	f1 05       	cpc	r31, r1
    51e4:	40 f4       	brcc	.+16     	; 0x51f6 <commandLen+0x2a>
    51e6:	ec 54       	subi	r30, 0x4C	; 76
    51e8:	ff 4f       	sbci	r31, 0xFF	; 255
    51ea:	0c 94 59 38 	jmp	0x70b2	; 0x70b2 <__tablejump2__>
    51ee:	82 e0       	ldi	r24, 0x02	; 2
    51f0:	08 95       	ret
    51f2:	83 e0       	ldi	r24, 0x03	; 3
    51f4:	08 95       	ret
    51f6:	80 e0       	ldi	r24, 0x00	; 0
    51f8:	08 95       	ret
    51fa:	81 e0       	ldi	r24, 0x01	; 1
    51fc:	08 95       	ret

000051fe <readMidiMessage>:
    51fe:	ff 92       	push	r15
    5200:	0f 93       	push	r16
    5202:	1f 93       	push	r17
    5204:	cf 93       	push	r28
    5206:	df 93       	push	r29
    5208:	d8 2f       	mov	r29, r24
    520a:	8b 01       	movw	r16, r22
    520c:	c0 91 8a 04 	lds	r28, 0x048A	; 0x80048a <midiState>
    5210:	c2 30       	cpi	r28, 0x02	; 2
    5212:	51 f1       	breq	.+84     	; 0x5268 <readMidiMessage+0x6a>
    5214:	c3 30       	cpi	r28, 0x03	; 3
    5216:	09 f4       	brne	.+2      	; 0x521a <readMidiMessage+0x1c>
    5218:	53 c0       	rjmp	.+166    	; 0x52c0 <readMidiMessage+0xc2>
    521a:	c1 30       	cpi	r28, 0x01	; 1
    521c:	09 f0       	breq	.+2      	; 0x5220 <readMidiMessage+0x22>
    521e:	57 c0       	rjmp	.+174    	; 0x52ce <readMidiMessage+0xd0>
    5220:	80 3f       	cpi	r24, 0xF0	; 240
    5222:	09 f4       	brne	.+2      	; 0x5226 <readMidiMessage+0x28>
    5224:	56 c0       	rjmp	.+172    	; 0x52d2 <readMidiMessage+0xd4>
    5226:	0e 94 e6 28 	call	0x51cc	; 0x51cc <commandLen>
    522a:	81 30       	cpi	r24, 0x01	; 1
    522c:	39 f4       	brne	.+14     	; 0x523c <readMidiMessage+0x3e>
    522e:	f8 01       	movw	r30, r16
    5230:	80 83       	st	Z, r24
    5232:	d0 93 91 04 	sts	0x0491, r29	; 0x800491 <work_event+0x3>
    5236:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <noteEvent>
    523a:	50 c0       	rjmp	.+160    	; 0x52dc <readMidiMessage+0xde>
    523c:	81 11       	cpse	r24, r1
    523e:	0a c0       	rjmp	.+20     	; 0x5254 <readMidiMessage+0x56>
    5240:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <noteEvent>
    5244:	81 30       	cpi	r24, 0x01	; 1
    5246:	59 f4       	brne	.+22     	; 0x525e <readMidiMessage+0x60>
    5248:	d0 93 92 04 	sts	0x0492, r29	; 0x800492 <work_event+0x4>
    524c:	82 e0       	ldi	r24, 0x02	; 2
    524e:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <midiReadIndex>
    5252:	05 c0       	rjmp	.+10     	; 0x525e <readMidiMessage+0x60>
    5254:	d0 93 91 04 	sts	0x0491, r29	; 0x800491 <work_event+0x3>
    5258:	81 e0       	ldi	r24, 0x01	; 1
    525a:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <midiReadIndex>
    525e:	82 e0       	ldi	r24, 0x02	; 2
    5260:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <midiState>
    5264:	c0 e0       	ldi	r28, 0x00	; 0
    5266:	3a c0       	rjmp	.+116    	; 0x52dc <readMidiMessage+0xde>
    5268:	0e 94 e6 28 	call	0x51cc	; 0x51cc <commandLen>
    526c:	c8 2f       	mov	r28, r24
    526e:	88 23       	and	r24, r24
    5270:	39 f0       	breq	.+14     	; 0x5280 <readMidiMessage+0x82>
    5272:	81 e0       	ldi	r24, 0x01	; 1
    5274:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <midiState>
    5278:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <noteEvent>
    527c:	c0 e0       	ldi	r28, 0x00	; 0
    527e:	2e c0       	rjmp	.+92     	; 0x52dc <readMidiMessage+0xde>
    5280:	e0 91 8b 04 	lds	r30, 0x048B	; 0x80048b <midiReadIndex>
    5284:	ff 24       	eor	r15, r15
    5286:	f3 94       	inc	r15
    5288:	fe 0e       	add	r15, r30
    528a:	f0 92 8b 04 	sts	0x048B, r15	; 0x80048b <midiReadIndex>
    528e:	f0 e0       	ldi	r31, 0x00	; 0
    5290:	e2 57       	subi	r30, 0x72	; 114
    5292:	fb 4f       	sbci	r31, 0xFB	; 251
    5294:	d3 83       	std	Z+3, r29	; 0x03
    5296:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <work_event+0x3>
    529a:	80 7f       	andi	r24, 0xF0	; 240
    529c:	0e 94 e6 28 	call	0x51cc	; 0x51cc <commandLen>
    52a0:	f8 12       	cpse	r15, r24
    52a2:	1c c0       	rjmp	.+56     	; 0x52dc <readMidiMessage+0xde>
    52a4:	81 e0       	ldi	r24, 0x01	; 1
    52a6:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <midiState>
    52aa:	f8 01       	movw	r30, r16
    52ac:	f0 82       	st	Z, r15
    52ae:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <work_event+0x3>
    52b2:	80 79       	andi	r24, 0x90	; 144
    52b4:	81 f0       	breq	.+32     	; 0x52d6 <readMidiMessage+0xd8>
    52b6:	81 e0       	ldi	r24, 0x01	; 1
    52b8:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <noteEvent>
    52bc:	c1 e0       	ldi	r28, 0x01	; 1
    52be:	0e c0       	rjmp	.+28     	; 0x52dc <readMidiMessage+0xde>
    52c0:	87 3f       	cpi	r24, 0xF7	; 247
    52c2:	59 f4       	brne	.+22     	; 0x52da <readMidiMessage+0xdc>
    52c4:	81 e0       	ldi	r24, 0x01	; 1
    52c6:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <midiState>
    52ca:	c0 e0       	ldi	r28, 0x00	; 0
    52cc:	07 c0       	rjmp	.+14     	; 0x52dc <readMidiMessage+0xde>
    52ce:	c0 e0       	ldi	r28, 0x00	; 0
    52d0:	05 c0       	rjmp	.+10     	; 0x52dc <readMidiMessage+0xde>
    52d2:	c0 e0       	ldi	r28, 0x00	; 0
    52d4:	03 c0       	rjmp	.+6      	; 0x52dc <readMidiMessage+0xde>
    52d6:	c1 e0       	ldi	r28, 0x01	; 1
    52d8:	01 c0       	rjmp	.+2      	; 0x52dc <readMidiMessage+0xde>
    52da:	c0 e0       	ldi	r28, 0x00	; 0
    52dc:	8c 2f       	mov	r24, r28
    52de:	df 91       	pop	r29
    52e0:	cf 91       	pop	r28
    52e2:	1f 91       	pop	r17
    52e4:	0f 91       	pop	r16
    52e6:	ff 90       	pop	r15
    52e8:	08 95       	ret

000052ea <metaFun>:
    52ea:	08 95       	ret

000052ec <sysexFun>:
    52ec:	08 95       	ret

000052ee <midiFun>:
    52ee:	fc 01       	movw	r30, r24
    52f0:	23 81       	ldd	r18, Z+3	; 0x03
    52f2:	30 e8       	ldi	r19, 0x80	; 128
    52f4:	32 0f       	add	r19, r18
    52f6:	31 36       	cpi	r19, 0x61	; 97
    52f8:	40 f4       	brcc	.+16     	; 0x530a <midiFun+0x1c>
    52fa:	31 81       	ldd	r19, Z+1	; 0x01
    52fc:	23 2b       	or	r18, r19
    52fe:	23 83       	std	Z+3, r18	; 0x03
    5300:	62 81       	ldd	r22, Z+2	; 0x02
    5302:	03 96       	adiw	r24, 0x03	; 3
    5304:	0e 94 b6 28 	call	0x516c	; 0x516c <sendMidiBuffer>
    5308:	08 95       	ret
    530a:	fc 01       	movw	r30, r24
    530c:	62 81       	ldd	r22, Z+2	; 0x02
    530e:	03 96       	adiw	r24, 0x03	; 3
    5310:	0e 94 b6 28 	call	0x516c	; 0x516c <sendMidiBuffer>
    5314:	08 95       	ret

00005316 <midiPlayVolume>:
}

void midiPlayVolume(unsigned char vol){	
	playVolume = vol;
    5316:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <playVolume>
    531a:	08 95       	ret

0000531c <rcvr_spi>:
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    531c:	8f ef       	ldi	r24, 0xFF	; 255
    531e:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    5320:	77 9b       	sbis	0x0e, 7	; 14
    5322:	fe cf       	rjmp	.-4      	; 0x5320 <rcvr_spi+0x4>
	return SPDR;
    5324:	8f b1       	in	r24, 0x0f	; 15
}
    5326:	08 95       	ret

00005328 <wait_ready>:
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
    5328:	82 e3       	ldi	r24, 0x32	; 50
    532a:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <Timer2>
	rcvr_spi();
    532e:	0e 94 8e 29 	call	0x531c	; 0x531c <rcvr_spi>
	do
		if (rcvr_spi() == 0xFF) return 1;
    5332:	0e 94 8e 29 	call	0x531c	; 0x531c <rcvr_spi>
    5336:	8f 3f       	cpi	r24, 0xFF	; 255
    5338:	39 f0       	breq	.+14     	; 0x5348 <wait_ready+0x20>
	while (Timer2);
    533a:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <Timer2>
    533e:	81 11       	cpse	r24, r1
    5340:	f8 cf       	rjmp	.-16     	; 0x5332 <wait_ready+0xa>

	return 0;
    5342:	80 e0       	ldi	r24, 0x00	; 0
    5344:	90 e0       	ldi	r25, 0x00	; 0
    5346:	08 95       	ret
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		if (rcvr_spi() == 0xFF) return 1;
    5348:	81 e0       	ldi	r24, 0x01	; 1
    534a:	90 e0       	ldi	r25, 0x00	; 0
	while (Timer2);

	return 0;
}
    534c:	08 95       	ret

0000534e <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    534e:	c4 9a       	sbi	0x18, 4	; 24
	rcvr_spi();
    5350:	0e 94 8e 29 	call	0x531c	; 0x531c <rcvr_spi>
    5354:	08 95       	ret

00005356 <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
    5356:	cf 93       	push	r28
    5358:	df 93       	push	r29
	CS_LOW();
    535a:	c4 98       	cbi	0x18, 4	; 24
	if (!wait_ready()) {
    535c:	0e 94 94 29 	call	0x5328	; 0x5328 <wait_ready>
    5360:	ec 01       	movw	r28, r24
    5362:	89 2b       	or	r24, r25
    5364:	19 f4       	brne	.+6      	; 0x536c <select+0x16>
		deselect();
    5366:	0e 94 a7 29 	call	0x534e	; 0x534e <deselect>
		return 0;
    536a:	02 c0       	rjmp	.+4      	; 0x5370 <select+0x1a>
	}
	return 1;
    536c:	c1 e0       	ldi	r28, 0x01	; 1
    536e:	d0 e0       	ldi	r29, 0x00	; 0
}
    5370:	ce 01       	movw	r24, r28
    5372:	df 91       	pop	r29
    5374:	cf 91       	pop	r28
    5376:	08 95       	ret

00005378 <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    5378:	0f 93       	push	r16
    537a:	1f 93       	push	r17
    537c:	cf 93       	push	r28
    537e:	df 93       	push	r29
    5380:	08 2f       	mov	r16, r24
    5382:	19 2f       	mov	r17, r25
    5384:	eb 01       	movw	r28, r22
	BYTE token;


	Timer1 = 20;
    5386:	84 e1       	ldi	r24, 0x14	; 20
    5388:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <Timer1>
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
    538c:	0e 94 8e 29 	call	0x531c	; 0x531c <rcvr_spi>
	} while ((token == 0xFF) && Timer1);
    5390:	8f 3f       	cpi	r24, 0xFF	; 255
    5392:	39 f4       	brne	.+14     	; 0x53a2 <rcvr_datablock+0x2a>
    5394:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Timer1>
    5398:	81 11       	cpse	r24, r1
    539a:	f8 cf       	rjmp	.-16     	; 0x538c <rcvr_datablock+0x14>
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
    539c:	80 e0       	ldi	r24, 0x00	; 0
    539e:	90 e0       	ldi	r25, 0x00	; 0
    53a0:	2c c0       	rjmp	.+88     	; 0x53fa <rcvr_datablock+0x82>
    53a2:	8e 3f       	cpi	r24, 0xFE	; 254
    53a4:	41 f5       	brne	.+80     	; 0x53f6 <rcvr_datablock+0x7e>
    53a6:	e0 2f       	mov	r30, r16
    53a8:	f1 2f       	mov	r31, r17

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
    53aa:	8f ef       	ldi	r24, 0xFF	; 255
    53ac:	8f b9       	out	0x0f, r24	; 15
    53ae:	77 9b       	sbis	0x0e, 7	; 14
    53b0:	fe cf       	rjmp	.-4      	; 0x53ae <rcvr_datablock+0x36>
    53b2:	9f b1       	in	r25, 0x0f	; 15
    53b4:	df 01       	movw	r26, r30
    53b6:	90 83       	st	Z, r25
		rcvr_spi_m(buff++);
    53b8:	8f b9       	out	0x0f, r24	; 15
    53ba:	77 9b       	sbis	0x0e, 7	; 14
    53bc:	fe cf       	rjmp	.-4      	; 0x53ba <rcvr_datablock+0x42>
    53be:	9f b1       	in	r25, 0x0f	; 15
    53c0:	11 96       	adiw	r26, 0x01	; 1
    53c2:	9c 93       	st	X, r25
    53c4:	11 97       	sbiw	r26, 0x01	; 1
		rcvr_spi_m(buff++);
    53c6:	8f b9       	out	0x0f, r24	; 15
    53c8:	77 9b       	sbis	0x0e, 7	; 14
    53ca:	fe cf       	rjmp	.-4      	; 0x53c8 <rcvr_datablock+0x50>
    53cc:	9f b1       	in	r25, 0x0f	; 15
    53ce:	12 96       	adiw	r26, 0x02	; 2
    53d0:	9c 93       	st	X, r25
    53d2:	12 97       	sbiw	r26, 0x02	; 2
		rcvr_spi_m(buff++);
    53d4:	8f b9       	out	0x0f, r24	; 15
    53d6:	77 9b       	sbis	0x0e, 7	; 14
    53d8:	fe cf       	rjmp	.-4      	; 0x53d6 <rcvr_datablock+0x5e>
    53da:	9f b1       	in	r25, 0x0f	; 15
    53dc:	13 96       	adiw	r26, 0x03	; 3
    53de:	9c 93       	st	X, r25
	} while (btr -= 4);
    53e0:	24 97       	sbiw	r28, 0x04	; 4
    53e2:	34 96       	adiw	r30, 0x04	; 4
    53e4:	20 97       	sbiw	r28, 0x00	; 0
    53e6:	11 f7       	brne	.-60     	; 0x53ac <rcvr_datablock+0x34>
	rcvr_spi();						/* Discard CRC */
    53e8:	0e 94 8e 29 	call	0x531c	; 0x531c <rcvr_spi>
	rcvr_spi();
    53ec:	0e 94 8e 29 	call	0x531c	; 0x531c <rcvr_spi>

	return 1;						/* Return with success */
    53f0:	81 e0       	ldi	r24, 0x01	; 1
    53f2:	90 e0       	ldi	r25, 0x00	; 0
    53f4:	02 c0       	rjmp	.+4      	; 0x53fa <rcvr_datablock+0x82>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
    53f6:	80 e0       	ldi	r24, 0x00	; 0
    53f8:	90 e0       	ldi	r25, 0x00	; 0
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return 1;						/* Return with success */
}
    53fa:	df 91       	pop	r29
    53fc:	cf 91       	pop	r28
    53fe:	1f 91       	pop	r17
    5400:	0f 91       	pop	r16
    5402:	08 95       	ret

00005404 <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    5404:	0f 93       	push	r16
    5406:	1f 93       	push	r17
    5408:	cf 93       	push	r28
    540a:	8c 01       	movw	r16, r24
    540c:	c6 2f       	mov	r28, r22
	BYTE resp, wc;


	if (!wait_ready()) return 0;
    540e:	0e 94 94 29 	call	0x5328	; 0x5328 <wait_ready>
    5412:	00 97       	sbiw	r24, 0x00	; 0
    5414:	59 f1       	breq	.+86     	; 0x546c <xmit_datablock+0x68>

	xmit_spi(token);					/* Xmit data token */
    5416:	cf b9       	out	0x0f, r28	; 15
    5418:	77 9b       	sbis	0x0e, 7	; 14
    541a:	fe cf       	rjmp	.-4      	; 0x5418 <xmit_datablock+0x14>
	if (token != 0xFD) {	/* Is data token */
    541c:	cd 3f       	cpi	r28, 0xFD	; 253
    541e:	21 f1       	breq	.+72     	; 0x5468 <xmit_datablock+0x64>
    5420:	f8 01       	movw	r30, r16
    5422:	98 01       	movw	r18, r16
    5424:	3e 5f       	subi	r19, 0xFE	; 254
    5426:	df 01       	movw	r26, r30
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
    5428:	80 81       	ld	r24, Z
    542a:	8f b9       	out	0x0f, r24	; 15
    542c:	77 9b       	sbis	0x0e, 7	; 14
    542e:	fe cf       	rjmp	.-4      	; 0x542c <xmit_datablock+0x28>
			xmit_spi(*buff++);
    5430:	11 96       	adiw	r26, 0x01	; 1
    5432:	8c 91       	ld	r24, X
    5434:	8f b9       	out	0x0f, r24	; 15
    5436:	77 9b       	sbis	0x0e, 7	; 14
    5438:	fe cf       	rjmp	.-4      	; 0x5436 <xmit_datablock+0x32>
    543a:	32 96       	adiw	r30, 0x02	; 2
		} while (--wc);
    543c:	e2 17       	cp	r30, r18
    543e:	f3 07       	cpc	r31, r19
    5440:	91 f7       	brne	.-28     	; 0x5426 <xmit_datablock+0x22>
		xmit_spi(0xFF);					/* CRC (Dummy) */
    5442:	8f ef       	ldi	r24, 0xFF	; 255
    5444:	8f b9       	out	0x0f, r24	; 15
    5446:	77 9b       	sbis	0x0e, 7	; 14
    5448:	fe cf       	rjmp	.-4      	; 0x5446 <xmit_datablock+0x42>
		xmit_spi(0xFF);
    544a:	8f ef       	ldi	r24, 0xFF	; 255
    544c:	8f b9       	out	0x0f, r24	; 15
    544e:	77 9b       	sbis	0x0e, 7	; 14
    5450:	fe cf       	rjmp	.-4      	; 0x544e <xmit_datablock+0x4a>
		resp = rcvr_spi();				/* Reveive data response */
    5452:	0e 94 8e 29 	call	0x531c	; 0x531c <rcvr_spi>
)
{
	BYTE resp, wc;


	if (!wait_ready()) return 0;
    5456:	8f 71       	andi	r24, 0x1F	; 31
    5458:	31 e0       	ldi	r19, 0x01	; 1
    545a:	20 e0       	ldi	r18, 0x00	; 0
    545c:	85 30       	cpi	r24, 0x05	; 5
    545e:	09 f0       	breq	.+2      	; 0x5462 <xmit_datablock+0x5e>
    5460:	30 e0       	ldi	r19, 0x00	; 0
    5462:	83 2f       	mov	r24, r19
    5464:	92 2f       	mov	r25, r18
    5466:	02 c0       	rjmp	.+4      	; 0x546c <xmit_datablock+0x68>
		resp = rcvr_spi();				/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
    5468:	81 e0       	ldi	r24, 0x01	; 1
    546a:	90 e0       	ldi	r25, 0x00	; 0
}
    546c:	cf 91       	pop	r28
    546e:	1f 91       	pop	r17
    5470:	0f 91       	pop	r16
    5472:	08 95       	ret

00005474 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    5474:	cf 92       	push	r12
    5476:	df 92       	push	r13
    5478:	ef 92       	push	r14
    547a:	ff 92       	push	r15
    547c:	cf 93       	push	r28
    547e:	c8 2f       	mov	r28, r24
    5480:	6a 01       	movw	r12, r20
    5482:	7b 01       	movw	r14, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    5484:	88 23       	and	r24, r24
    5486:	4c f4       	brge	.+18     	; 0x549a <send_cmd+0x26>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    5488:	40 e0       	ldi	r20, 0x00	; 0
    548a:	50 e0       	ldi	r21, 0x00	; 0
    548c:	ba 01       	movw	r22, r20
    548e:	87 e3       	ldi	r24, 0x37	; 55
    5490:	0e 94 3a 2a 	call	0x5474	; 0x5474 <send_cmd>
		if (res > 1) return res;
    5494:	82 30       	cpi	r24, 0x02	; 2
    5496:	e0 f5       	brcc	.+120    	; 0x5510 <send_cmd+0x9c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    5498:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
    549a:	0e 94 a7 29 	call	0x534e	; 0x534e <deselect>
	if (!select()) return 0xFF;
    549e:	0e 94 ab 29 	call	0x5356	; 0x5356 <select>
    54a2:	89 2b       	or	r24, r25
    54a4:	a1 f1       	breq	.+104    	; 0x550e <send_cmd+0x9a>

	/* Send command packet */
	xmit_spi(0x40 | cmd);				/* Start + Command index */
    54a6:	8c 2f       	mov	r24, r28
    54a8:	80 64       	ori	r24, 0x40	; 64
    54aa:	8f b9       	out	0x0f, r24	; 15
    54ac:	77 9b       	sbis	0x0e, 7	; 14
    54ae:	fe cf       	rjmp	.-4      	; 0x54ac <send_cmd+0x38>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    54b0:	8f 2d       	mov	r24, r15
    54b2:	99 27       	eor	r25, r25
    54b4:	aa 27       	eor	r26, r26
    54b6:	bb 27       	eor	r27, r27
    54b8:	8f b9       	out	0x0f, r24	; 15
    54ba:	77 9b       	sbis	0x0e, 7	; 14
    54bc:	fe cf       	rjmp	.-4      	; 0x54ba <send_cmd+0x46>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    54be:	c7 01       	movw	r24, r14
    54c0:	aa 27       	eor	r26, r26
    54c2:	bb 27       	eor	r27, r27
    54c4:	8f b9       	out	0x0f, r24	; 15
    54c6:	77 9b       	sbis	0x0e, 7	; 14
    54c8:	fe cf       	rjmp	.-4      	; 0x54c6 <send_cmd+0x52>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    54ca:	bb 27       	eor	r27, r27
    54cc:	af 2d       	mov	r26, r15
    54ce:	9e 2d       	mov	r25, r14
    54d0:	8d 2d       	mov	r24, r13
    54d2:	8f b9       	out	0x0f, r24	; 15
    54d4:	77 9b       	sbis	0x0e, 7	; 14
    54d6:	fe cf       	rjmp	.-4      	; 0x54d4 <send_cmd+0x60>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    54d8:	cf b8       	out	0x0f, r12	; 15
    54da:	77 9b       	sbis	0x0e, 7	; 14
    54dc:	fe cf       	rjmp	.-4      	; 0x54da <send_cmd+0x66>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    54de:	cc 23       	and	r28, r28
    54e0:	21 f0       	breq	.+8      	; 0x54ea <send_cmd+0x76>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    54e2:	c8 30       	cpi	r28, 0x08	; 8
    54e4:	21 f4       	brne	.+8      	; 0x54ee <send_cmd+0x7a>
    54e6:	87 e8       	ldi	r24, 0x87	; 135
    54e8:	03 c0       	rjmp	.+6      	; 0x54f0 <send_cmd+0x7c>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    54ea:	85 e9       	ldi	r24, 0x95	; 149
    54ec:	01 c0       	rjmp	.+2      	; 0x54f0 <send_cmd+0x7c>
	xmit_spi(0x40 | cmd);				/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
    54ee:	81 e0       	ldi	r24, 0x01	; 1
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
	xmit_spi(n);
    54f0:	8f b9       	out	0x0f, r24	; 15
    54f2:	77 9b       	sbis	0x0e, 7	; 14
    54f4:	fe cf       	rjmp	.-4      	; 0x54f2 <send_cmd+0x7e>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
    54f6:	cc 30       	cpi	r28, 0x0C	; 12
    54f8:	11 f4       	brne	.+4      	; 0x54fe <send_cmd+0x8a>
    54fa:	0e 94 8e 29 	call	0x531c	; 0x531c <rcvr_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    54fe:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
    5500:	0e 94 8e 29 	call	0x531c	; 0x531c <rcvr_spi>
	while ((res & 0x80) && --n);
    5504:	88 23       	and	r24, r24
    5506:	24 f4       	brge	.+8      	; 0x5510 <send_cmd+0x9c>
    5508:	c1 50       	subi	r28, 0x01	; 1
    550a:	d1 f7       	brne	.-12     	; 0x5500 <send_cmd+0x8c>
    550c:	01 c0       	rjmp	.+2      	; 0x5510 <send_cmd+0x9c>
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
    550e:	8f ef       	ldi	r24, 0xFF	; 255
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    5510:	cf 91       	pop	r28
    5512:	ff 90       	pop	r15
    5514:	ef 90       	pop	r14
    5516:	df 90       	pop	r13
    5518:	cf 90       	pop	r12
    551a:	08 95       	ret

0000551c <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    551c:	cf 92       	push	r12
    551e:	df 92       	push	r13
    5520:	ef 92       	push	r14
    5522:	ff 92       	push	r15
    5524:	0f 93       	push	r16
    5526:	1f 93       	push	r17
    5528:	cf 93       	push	r28
    552a:	df 93       	push	r29
    552c:	00 d0       	rcall	.+0      	; 0x552e <disk_initialize+0x12>
    552e:	00 d0       	rcall	.+0      	; 0x5530 <disk_initialize+0x14>
    5530:	cd b7       	in	r28, 0x3d	; 61
    5532:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    5534:	81 11       	cpse	r24, r1
    5536:	99 c0       	rjmp	.+306    	; 0x566a <disk_initialize+0x14e>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    5538:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    553c:	81 ff       	sbrs	r24, 1
    553e:	03 c0       	rjmp	.+6      	; 0x5546 <disk_initialize+0x2a>
    5540:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    5544:	9f c0       	rjmp	.+318    	; 0x5684 <disk_initialize+0x168>

	power_on();							/* Force socket power on */
	FCLK_SLOW();
    5546:	69 9a       	sbi	0x0d, 1	; 13
    5548:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
    554a:	0e 94 8e 29 	call	0x531c	; 0x531c <rcvr_spi>
    554e:	11 50       	subi	r17, 0x01	; 1
    5550:	e1 f7       	brne	.-8      	; 0x554a <disk_initialize+0x2e>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    5552:	40 e0       	ldi	r20, 0x00	; 0
    5554:	50 e0       	ldi	r21, 0x00	; 0
    5556:	ba 01       	movw	r22, r20
    5558:	80 e0       	ldi	r24, 0x00	; 0
    555a:	0e 94 3a 2a 	call	0x5474	; 0x5474 <send_cmd>
    555e:	81 30       	cpi	r24, 0x01	; 1
    5560:	09 f0       	breq	.+2      	; 0x5564 <disk_initialize+0x48>
    5562:	8b c0       	rjmp	.+278    	; 0x567a <disk_initialize+0x15e>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    5564:	84 e6       	ldi	r24, 0x64	; 100
    5566:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <Timer1>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    556a:	4a ea       	ldi	r20, 0xAA	; 170
    556c:	51 e0       	ldi	r21, 0x01	; 1
    556e:	60 e0       	ldi	r22, 0x00	; 0
    5570:	70 e0       	ldi	r23, 0x00	; 0
    5572:	88 e0       	ldi	r24, 0x08	; 8
    5574:	0e 94 3a 2a 	call	0x5474	; 0x5474 <send_cmd>
    5578:	81 30       	cpi	r24, 0x01	; 1
    557a:	09 f0       	breq	.+2      	; 0x557e <disk_initialize+0x62>
    557c:	3f c0       	rjmp	.+126    	; 0x55fc <disk_initialize+0xe0>
    557e:	ce 01       	movw	r24, r28
    5580:	01 96       	adiw	r24, 0x01	; 1
    5582:	6c 01       	movw	r12, r24
    5584:	7e 01       	movw	r14, r28
    5586:	95 e0       	ldi	r25, 0x05	; 5
    5588:	e9 0e       	add	r14, r25
    558a:	f1 1c       	adc	r15, r1
    558c:	86 01       	movw	r16, r12
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
    558e:	0e 94 8e 29 	call	0x531c	; 0x531c <rcvr_spi>
    5592:	f8 01       	movw	r30, r16
    5594:	81 93       	st	Z+, r24
    5596:	8f 01       	movw	r16, r30
    5598:	ee 16       	cp	r14, r30
    559a:	ff 06       	cpc	r15, r31
    559c:	c1 f7       	brne	.-16     	; 0x558e <disk_initialize+0x72>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    559e:	8b 81       	ldd	r24, Y+3	; 0x03
    55a0:	81 30       	cpi	r24, 0x01	; 1
    55a2:	09 f0       	breq	.+2      	; 0x55a6 <disk_initialize+0x8a>
    55a4:	6a c0       	rjmp	.+212    	; 0x567a <disk_initialize+0x15e>
    55a6:	8c 81       	ldd	r24, Y+4	; 0x04
    55a8:	8a 3a       	cpi	r24, 0xAA	; 170
    55aa:	09 f0       	breq	.+2      	; 0x55ae <disk_initialize+0x92>
    55ac:	66 c0       	rjmp	.+204    	; 0x567a <disk_initialize+0x15e>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    55ae:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Timer1>
    55b2:	88 23       	and	r24, r24
    55b4:	49 f0       	breq	.+18     	; 0x55c8 <disk_initialize+0xac>
    55b6:	40 e0       	ldi	r20, 0x00	; 0
    55b8:	50 e0       	ldi	r21, 0x00	; 0
    55ba:	60 e0       	ldi	r22, 0x00	; 0
    55bc:	70 e4       	ldi	r23, 0x40	; 64
    55be:	89 ea       	ldi	r24, 0xA9	; 169
    55c0:	0e 94 3a 2a 	call	0x5474	; 0x5474 <send_cmd>
    55c4:	81 11       	cpse	r24, r1
    55c6:	f3 cf       	rjmp	.-26     	; 0x55ae <disk_initialize+0x92>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    55c8:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Timer1>
    55cc:	88 23       	and	r24, r24
    55ce:	09 f4       	brne	.+2      	; 0x55d2 <disk_initialize+0xb6>
    55d0:	54 c0       	rjmp	.+168    	; 0x567a <disk_initialize+0x15e>
    55d2:	40 e0       	ldi	r20, 0x00	; 0
    55d4:	50 e0       	ldi	r21, 0x00	; 0
    55d6:	ba 01       	movw	r22, r20
    55d8:	8a e3       	ldi	r24, 0x3A	; 58
    55da:	0e 94 3a 2a 	call	0x5474	; 0x5474 <send_cmd>
    55de:	81 11       	cpse	r24, r1
    55e0:	4c c0       	rjmp	.+152    	; 0x567a <disk_initialize+0x15e>
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
    55e2:	0e 94 8e 29 	call	0x531c	; 0x531c <rcvr_spi>
    55e6:	f6 01       	movw	r30, r12
    55e8:	81 93       	st	Z+, r24
    55ea:	6f 01       	movw	r12, r30
    55ec:	ee 16       	cp	r14, r30
    55ee:	ff 06       	cpc	r15, r31
    55f0:	c1 f7       	brne	.-16     	; 0x55e2 <disk_initialize+0xc6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    55f2:	89 81       	ldd	r24, Y+1	; 0x01
    55f4:	86 fd       	sbrc	r24, 6
    55f6:	3b c0       	rjmp	.+118    	; 0x566e <disk_initialize+0x152>
    55f8:	84 e0       	ldi	r24, 0x04	; 4
    55fa:	3a c0       	rjmp	.+116    	; 0x5670 <disk_initialize+0x154>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    55fc:	40 e0       	ldi	r20, 0x00	; 0
    55fe:	50 e0       	ldi	r21, 0x00	; 0
    5600:	ba 01       	movw	r22, r20
    5602:	89 ea       	ldi	r24, 0xA9	; 169
    5604:	0e 94 3a 2a 	call	0x5474	; 0x5474 <send_cmd>
    5608:	82 30       	cpi	r24, 0x02	; 2
    560a:	18 f0       	brcs	.+6      	; 0x5612 <disk_initialize+0xf6>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    560c:	01 e0       	ldi	r16, 0x01	; 1
    560e:	11 e0       	ldi	r17, 0x01	; 1
    5610:	02 c0       	rjmp	.+4      	; 0x5616 <disk_initialize+0xfa>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    5612:	02 e0       	ldi	r16, 0x02	; 2
    5614:	19 ea       	ldi	r17, 0xA9	; 169
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    5616:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Timer1>
    561a:	88 23       	and	r24, r24
    561c:	41 f0       	breq	.+16     	; 0x562e <disk_initialize+0x112>
    561e:	40 e0       	ldi	r20, 0x00	; 0
    5620:	50 e0       	ldi	r21, 0x00	; 0
    5622:	ba 01       	movw	r22, r20
    5624:	81 2f       	mov	r24, r17
    5626:	0e 94 3a 2a 	call	0x5474	; 0x5474 <send_cmd>
    562a:	81 11       	cpse	r24, r1
    562c:	f4 cf       	rjmp	.-24     	; 0x5616 <disk_initialize+0xfa>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    562e:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Timer1>
    5632:	88 23       	and	r24, r24
    5634:	11 f1       	breq	.+68     	; 0x567a <disk_initialize+0x15e>
    5636:	40 e0       	ldi	r20, 0x00	; 0
    5638:	52 e0       	ldi	r21, 0x02	; 2
    563a:	60 e0       	ldi	r22, 0x00	; 0
    563c:	70 e0       	ldi	r23, 0x00	; 0
    563e:	80 e1       	ldi	r24, 0x10	; 16
    5640:	0e 94 3a 2a 	call	0x5474	; 0x5474 <send_cmd>
    5644:	81 11       	cpse	r24, r1
    5646:	19 c0       	rjmp	.+50     	; 0x567a <disk_initialize+0x15e>
				ty = 0;
		}
	}
	//blinkWhiteLEDnrazy(ty);
	CardType = ty;
    5648:	00 93 a6 01 	sts	0x01A6, r16	; 0x8001a6 <CardType>
	deselect();
    564c:	0e 94 a7 29 	call	0x534e	; 0x534e <deselect>

	if (ty) {			/* Initialization succeded */
    5650:	00 23       	and	r16, r16
    5652:	41 f0       	breq	.+16     	; 0x5664 <disk_initialize+0x148>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    5654:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    5658:	8e 7f       	andi	r24, 0xFE	; 254
    565a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Stat>
		FCLK_FAST();
    565e:	8d b1       	in	r24, 0x0d	; 13
    5660:	8c 7f       	andi	r24, 0xFC	; 252
    5662:	8d b9       	out	0x0d, r24	; 13
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
    5664:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    5668:	0d c0       	rjmp	.+26     	; 0x5684 <disk_initialize+0x168>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    566a:	81 e0       	ldi	r24, 0x01	; 1
    566c:	0b c0       	rjmp	.+22     	; 0x5684 <disk_initialize+0x168>
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    566e:	8c e0       	ldi	r24, 0x0C	; 12
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	//blinkWhiteLEDnrazy(ty);
	CardType = ty;
    5670:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <CardType>
	deselect();
    5674:	0e 94 a7 29 	call	0x534e	; 0x534e <deselect>
    5678:	ed cf       	rjmp	.-38     	; 0x5654 <disk_initialize+0x138>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	//blinkWhiteLEDnrazy(ty);
	CardType = ty;
    567a:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <CardType>
	deselect();
    567e:	0e 94 a7 29 	call	0x534e	; 0x534e <deselect>
    5682:	f0 cf       	rjmp	.-32     	; 0x5664 <disk_initialize+0x148>
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    5684:	0f 90       	pop	r0
    5686:	0f 90       	pop	r0
    5688:	0f 90       	pop	r0
    568a:	0f 90       	pop	r0
    568c:	df 91       	pop	r29
    568e:	cf 91       	pop	r28
    5690:	1f 91       	pop	r17
    5692:	0f 91       	pop	r16
    5694:	ff 90       	pop	r15
    5696:	ef 90       	pop	r14
    5698:	df 90       	pop	r13
    569a:	cf 90       	pop	r12
    569c:	08 95       	ret

0000569e <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    569e:	81 11       	cpse	r24, r1
    56a0:	03 c0       	rjmp	.+6      	; 0x56a8 <disk_status+0xa>
	return Stat;
    56a2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    56a6:	08 95       	ret

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    56a8:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    56aa:	08 95       	ret

000056ac <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    56ac:	0f 93       	push	r16
    56ae:	cf 93       	push	r28
    56b0:	df 93       	push	r29
    56b2:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
    56b4:	81 11       	cpse	r24, r1
    56b6:	44 c0       	rjmp	.+136    	; 0x5740 <disk_read+0x94>
    56b8:	00 23       	and	r16, r16
    56ba:	09 f4       	brne	.+2      	; 0x56be <disk_read+0x12>
    56bc:	43 c0       	rjmp	.+134    	; 0x5744 <disk_read+0x98>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    56be:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    56c2:	80 fd       	sbrc	r24, 0
    56c4:	41 c0       	rjmp	.+130    	; 0x5748 <disk_read+0x9c>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    56c6:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <CardType>
    56ca:	83 fd       	sbrc	r24, 3
    56cc:	09 c0       	rjmp	.+18     	; 0x56e0 <disk_read+0x34>
    56ce:	01 2e       	mov	r0, r17
    56d0:	19 e0       	ldi	r17, 0x09	; 9
    56d2:	22 0f       	add	r18, r18
    56d4:	33 1f       	adc	r19, r19
    56d6:	44 1f       	adc	r20, r20
    56d8:	55 1f       	adc	r21, r21
    56da:	1a 95       	dec	r17
    56dc:	d1 f7       	brne	.-12     	; 0x56d2 <disk_read+0x26>
    56de:	10 2d       	mov	r17, r0

	if (count == 1) {	/* Single block read */
    56e0:	01 30       	cpi	r16, 0x01	; 1
    56e2:	81 f4       	brne	.+32     	; 0x5704 <disk_read+0x58>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
    56e4:	ba 01       	movw	r22, r20
    56e6:	a9 01       	movw	r20, r18
    56e8:	81 e1       	ldi	r24, 0x11	; 17
    56ea:	0e 94 3a 2a 	call	0x5474	; 0x5474 <send_cmd>
    56ee:	81 11       	cpse	r24, r1
    56f0:	20 c0       	rjmp	.+64     	; 0x5732 <disk_read+0x86>
			&& rcvr_datablock(buff, 512))
    56f2:	60 e0       	ldi	r22, 0x00	; 0
    56f4:	72 e0       	ldi	r23, 0x02	; 2
    56f6:	ce 01       	movw	r24, r28
    56f8:	0e 94 bc 29 	call	0x5378	; 0x5378 <rcvr_datablock>
    56fc:	89 2b       	or	r24, r25
    56fe:	c9 f0       	breq	.+50     	; 0x5732 <disk_read+0x86>
    5700:	00 e0       	ldi	r16, 0x00	; 0
    5702:	17 c0       	rjmp	.+46     	; 0x5732 <disk_read+0x86>
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
    5704:	ba 01       	movw	r22, r20
    5706:	a9 01       	movw	r20, r18
    5708:	82 e1       	ldi	r24, 0x12	; 18
    570a:	0e 94 3a 2a 	call	0x5474	; 0x5474 <send_cmd>
    570e:	81 11       	cpse	r24, r1
    5710:	10 c0       	rjmp	.+32     	; 0x5732 <disk_read+0x86>
			do {
				if (!rcvr_datablock(buff, 512)) break;
    5712:	60 e0       	ldi	r22, 0x00	; 0
    5714:	72 e0       	ldi	r23, 0x02	; 2
    5716:	ce 01       	movw	r24, r28
    5718:	0e 94 bc 29 	call	0x5378	; 0x5378 <rcvr_datablock>
    571c:	89 2b       	or	r24, r25
    571e:	19 f0       	breq	.+6      	; 0x5726 <disk_read+0x7a>
				buff += 512;
    5720:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    5722:	01 50       	subi	r16, 0x01	; 1
    5724:	b1 f7       	brne	.-20     	; 0x5712 <disk_read+0x66>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
    5726:	40 e0       	ldi	r20, 0x00	; 0
    5728:	50 e0       	ldi	r21, 0x00	; 0
    572a:	ba 01       	movw	r22, r20
    572c:	8c e0       	ldi	r24, 0x0C	; 12
    572e:	0e 94 3a 2a 	call	0x5474	; 0x5474 <send_cmd>
		}
	}
	deselect();
    5732:	0e 94 a7 29 	call	0x534e	; 0x534e <deselect>

	return count ? RES_ERROR : RES_OK;
    5736:	81 e0       	ldi	r24, 0x01	; 1
    5738:	01 11       	cpse	r16, r1
    573a:	07 c0       	rjmp	.+14     	; 0x574a <disk_read+0x9e>
    573c:	80 e0       	ldi	r24, 0x00	; 0
    573e:	05 c0       	rjmp	.+10     	; 0x574a <disk_read+0x9e>
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
    5740:	84 e0       	ldi	r24, 0x04	; 4
    5742:	03 c0       	rjmp	.+6      	; 0x574a <disk_read+0x9e>
    5744:	84 e0       	ldi	r24, 0x04	; 4
    5746:	01 c0       	rjmp	.+2      	; 0x574a <disk_read+0x9e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    5748:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    574a:	df 91       	pop	r29
    574c:	cf 91       	pop	r28
    574e:	0f 91       	pop	r16
    5750:	08 95       	ret

00005752 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    5752:	cf 92       	push	r12
    5754:	df 92       	push	r13
    5756:	ef 92       	push	r14
    5758:	ff 92       	push	r15
    575a:	0f 93       	push	r16
    575c:	cf 93       	push	r28
    575e:	df 93       	push	r29
    5760:	eb 01       	movw	r28, r22
    5762:	69 01       	movw	r12, r18
    5764:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
    5766:	81 11       	cpse	r24, r1
    5768:	51 c0       	rjmp	.+162    	; 0x580c <disk_write+0xba>
    576a:	00 23       	and	r16, r16
    576c:	09 f4       	brne	.+2      	; 0x5770 <disk_write+0x1e>
    576e:	50 c0       	rjmp	.+160    	; 0x5810 <disk_write+0xbe>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    5770:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    5774:	80 fd       	sbrc	r24, 0
    5776:	4e c0       	rjmp	.+156    	; 0x5814 <disk_write+0xc2>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    5778:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    577c:	82 fd       	sbrc	r24, 2
    577e:	4c c0       	rjmp	.+152    	; 0x5818 <disk_write+0xc6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    5780:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <CardType>
    5784:	83 fd       	sbrc	r24, 3
    5786:	09 c0       	rjmp	.+18     	; 0x579a <disk_write+0x48>
    5788:	0b 2e       	mov	r0, r27
    578a:	b9 e0       	ldi	r27, 0x09	; 9
    578c:	cc 0c       	add	r12, r12
    578e:	dd 1c       	adc	r13, r13
    5790:	ee 1c       	adc	r14, r14
    5792:	ff 1c       	adc	r15, r15
    5794:	ba 95       	dec	r27
    5796:	d1 f7       	brne	.-12     	; 0x578c <disk_write+0x3a>
    5798:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    579a:	01 30       	cpi	r16, 0x01	; 1
    579c:	79 f4       	brne	.+30     	; 0x57bc <disk_write+0x6a>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    579e:	b7 01       	movw	r22, r14
    57a0:	a6 01       	movw	r20, r12
    57a2:	88 e1       	ldi	r24, 0x18	; 24
    57a4:	0e 94 3a 2a 	call	0x5474	; 0x5474 <send_cmd>
    57a8:	81 11       	cpse	r24, r1
    57aa:	29 c0       	rjmp	.+82     	; 0x57fe <disk_write+0xac>
			&& xmit_datablock(buff, 0xFE))
    57ac:	6e ef       	ldi	r22, 0xFE	; 254
    57ae:	ce 01       	movw	r24, r28
    57b0:	0e 94 02 2a 	call	0x5404	; 0x5404 <xmit_datablock>
    57b4:	89 2b       	or	r24, r25
    57b6:	19 f1       	breq	.+70     	; 0x57fe <disk_write+0xac>
    57b8:	00 e0       	ldi	r16, 0x00	; 0
    57ba:	21 c0       	rjmp	.+66     	; 0x57fe <disk_write+0xac>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    57bc:	86 70       	andi	r24, 0x06	; 6
    57be:	39 f0       	breq	.+14     	; 0x57ce <disk_write+0x7c>
    57c0:	40 2f       	mov	r20, r16
    57c2:	50 e0       	ldi	r21, 0x00	; 0
    57c4:	60 e0       	ldi	r22, 0x00	; 0
    57c6:	70 e0       	ldi	r23, 0x00	; 0
    57c8:	87 e9       	ldi	r24, 0x97	; 151
    57ca:	0e 94 3a 2a 	call	0x5474	; 0x5474 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    57ce:	b7 01       	movw	r22, r14
    57d0:	a6 01       	movw	r20, r12
    57d2:	89 e1       	ldi	r24, 0x19	; 25
    57d4:	0e 94 3a 2a 	call	0x5474	; 0x5474 <send_cmd>
    57d8:	81 11       	cpse	r24, r1
    57da:	11 c0       	rjmp	.+34     	; 0x57fe <disk_write+0xac>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    57dc:	6c ef       	ldi	r22, 0xFC	; 252
    57de:	ce 01       	movw	r24, r28
    57e0:	0e 94 02 2a 	call	0x5404	; 0x5404 <xmit_datablock>
    57e4:	89 2b       	or	r24, r25
    57e6:	19 f0       	breq	.+6      	; 0x57ee <disk_write+0x9c>
				buff += 512;
    57e8:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    57ea:	01 50       	subi	r16, 0x01	; 1
    57ec:	b9 f7       	brne	.-18     	; 0x57dc <disk_write+0x8a>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    57ee:	6d ef       	ldi	r22, 0xFD	; 253
    57f0:	80 e0       	ldi	r24, 0x00	; 0
    57f2:	90 e0       	ldi	r25, 0x00	; 0
    57f4:	0e 94 02 2a 	call	0x5404	; 0x5404 <xmit_datablock>
    57f8:	89 2b       	or	r24, r25
    57fa:	09 f4       	brne	.+2      	; 0x57fe <disk_write+0xac>
				count = 1;
    57fc:	01 e0       	ldi	r16, 0x01	; 1
		}
	}
	deselect();
    57fe:	0e 94 a7 29 	call	0x534e	; 0x534e <deselect>

	return count ? RES_ERROR : RES_OK;
    5802:	81 e0       	ldi	r24, 0x01	; 1
    5804:	01 11       	cpse	r16, r1
    5806:	09 c0       	rjmp	.+18     	; 0x581a <disk_write+0xc8>
    5808:	80 e0       	ldi	r24, 0x00	; 0
    580a:	07 c0       	rjmp	.+14     	; 0x581a <disk_write+0xc8>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
    580c:	84 e0       	ldi	r24, 0x04	; 4
    580e:	05 c0       	rjmp	.+10     	; 0x581a <disk_write+0xc8>
    5810:	84 e0       	ldi	r24, 0x04	; 4
    5812:	03 c0       	rjmp	.+6      	; 0x581a <disk_write+0xc8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    5814:	83 e0       	ldi	r24, 0x03	; 3
    5816:	01 c0       	rjmp	.+2      	; 0x581a <disk_write+0xc8>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    5818:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    581a:	df 91       	pop	r29
    581c:	cf 91       	pop	r28
    581e:	0f 91       	pop	r16
    5820:	ff 90       	pop	r15
    5822:	ef 90       	pop	r14
    5824:	df 90       	pop	r13
    5826:	cf 90       	pop	r12
    5828:	08 95       	ret

0000582a <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    582a:	ef 92       	push	r14
    582c:	ff 92       	push	r15
    582e:	0f 93       	push	r16
    5830:	1f 93       	push	r17
    5832:	cf 93       	push	r28
    5834:	df 93       	push	r29
    5836:	cd b7       	in	r28, 0x3d	; 61
    5838:	de b7       	in	r29, 0x3e	; 62
    583a:	60 97       	sbiw	r28, 0x10	; 16
    583c:	0f b6       	in	r0, 0x3f	; 63
    583e:	f8 94       	cli
    5840:	de bf       	out	0x3e, r29	; 62
    5842:	0f be       	out	0x3f, r0	; 63
    5844:	cd bf       	out	0x3d, r28	; 61
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
    5846:	81 11       	cpse	r24, r1
    5848:	96 c1       	rjmp	.+812    	; 0x5b76 <disk_ioctl+0x34c>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
    584a:	65 30       	cpi	r22, 0x05	; 5
    584c:	71 f4       	brne	.+28     	; 0x586a <disk_ioctl+0x40>
		switch (ptr[0]) {
    584e:	fa 01       	movw	r30, r20
    5850:	80 81       	ld	r24, Z
    5852:	88 23       	and	r24, r24
    5854:	19 f0       	breq	.+6      	; 0x585c <disk_ioctl+0x32>
    5856:	81 30       	cpi	r24, 0x01	; 1
    5858:	19 f0       	breq	.+6      	; 0x5860 <disk_ioctl+0x36>
    585a:	8f c1       	rjmp	.+798    	; 0x5b7a <disk_ioctl+0x350>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
			res = RES_OK;
    585c:	80 e0       	ldi	r24, 0x00	; 0
    585e:	90 c1       	rjmp	.+800    	; 0x5b80 <disk_ioctl+0x356>
			break;
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
    5860:	81 e0       	ldi	r24, 0x01	; 1
    5862:	fa 01       	movw	r30, r20
    5864:	81 83       	std	Z+1, r24	; 0x01
			res = RES_OK;
    5866:	80 e0       	ldi	r24, 0x00	; 0
			break;
    5868:	8b c1       	rjmp	.+790    	; 0x5b80 <disk_ioctl+0x356>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    586a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    586e:	80 fd       	sbrc	r24, 0
    5870:	86 c1       	rjmp	.+780    	; 0x5b7e <disk_ioctl+0x354>
    5872:	8a 01       	movw	r16, r20

		switch (ctrl) {
    5874:	86 2f       	mov	r24, r22
    5876:	90 e0       	ldi	r25, 0x00	; 0
    5878:	8f 30       	cpi	r24, 0x0F	; 15
    587a:	91 05       	cpc	r25, r1
    587c:	08 f0       	brcs	.+2      	; 0x5880 <disk_ioctl+0x56>
    587e:	60 c1       	rjmp	.+704    	; 0x5b40 <disk_ioctl+0x316>
    5880:	fc 01       	movw	r30, r24
    5882:	ec 5c       	subi	r30, 0xCC	; 204
    5884:	fe 4f       	sbci	r31, 0xFE	; 254
    5886:	0c 94 59 38 	jmp	0x70b2	; 0x70b2 <__tablejump2__>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
    588a:	0e 94 ab 29 	call	0x5356	; 0x5356 <select>
    588e:	89 2b       	or	r24, r25
    5890:	09 f4       	brne	.+2      	; 0x5894 <disk_ioctl+0x6a>
    5892:	58 c1       	rjmp	.+688    	; 0x5b44 <disk_ioctl+0x31a>
				deselect();
    5894:	0e 94 a7 29 	call	0x534e	; 0x534e <deselect>
				res = RES_OK;
    5898:	10 e0       	ldi	r17, 0x00	; 0
    589a:	69 c1       	rjmp	.+722    	; 0x5b6e <disk_ioctl+0x344>
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    589c:	40 e0       	ldi	r20, 0x00	; 0
    589e:	50 e0       	ldi	r21, 0x00	; 0
    58a0:	ba 01       	movw	r22, r20
    58a2:	89 e0       	ldi	r24, 0x09	; 9
    58a4:	0e 94 3a 2a 	call	0x5474	; 0x5474 <send_cmd>
    58a8:	81 11       	cpse	r24, r1
    58aa:	4e c1       	rjmp	.+668    	; 0x5b48 <disk_ioctl+0x31e>
    58ac:	60 e1       	ldi	r22, 0x10	; 16
    58ae:	70 e0       	ldi	r23, 0x00	; 0
    58b0:	ce 01       	movw	r24, r28
    58b2:	01 96       	adiw	r24, 0x01	; 1
    58b4:	0e 94 bc 29 	call	0x5378	; 0x5378 <rcvr_datablock>
    58b8:	89 2b       	or	r24, r25
    58ba:	09 f4       	brne	.+2      	; 0x58be <disk_ioctl+0x94>
    58bc:	47 c1       	rjmp	.+654    	; 0x5b4c <disk_ioctl+0x322>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    58be:	89 81       	ldd	r24, Y+1	; 0x01
    58c0:	82 95       	swap	r24
    58c2:	86 95       	lsr	r24
    58c4:	86 95       	lsr	r24
    58c6:	83 70       	andi	r24, 0x03	; 3
    58c8:	81 30       	cpi	r24, 0x01	; 1
    58ca:	d9 f4       	brne	.+54     	; 0x5902 <disk_ioctl+0xd8>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
    58cc:	89 85       	ldd	r24, Y+9	; 0x09
    58ce:	90 e0       	ldi	r25, 0x00	; 0
    58d0:	38 2f       	mov	r19, r24
    58d2:	22 27       	eor	r18, r18
    58d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    58d6:	90 e0       	ldi	r25, 0x00	; 0
    58d8:	01 96       	adiw	r24, 0x01	; 1
    58da:	82 0f       	add	r24, r18
    58dc:	93 1f       	adc	r25, r19
    58de:	a0 e0       	ldi	r26, 0x00	; 0
    58e0:	b0 e0       	ldi	r27, 0x00	; 0
    58e2:	07 2e       	mov	r0, r23
    58e4:	7a e0       	ldi	r23, 0x0A	; 10
    58e6:	88 0f       	add	r24, r24
    58e8:	99 1f       	adc	r25, r25
    58ea:	aa 1f       	adc	r26, r26
    58ec:	bb 1f       	adc	r27, r27
    58ee:	7a 95       	dec	r23
    58f0:	d1 f7       	brne	.-12     	; 0x58e6 <disk_ioctl+0xbc>
    58f2:	70 2d       	mov	r23, r0
    58f4:	f8 01       	movw	r30, r16
    58f6:	80 83       	st	Z, r24
    58f8:	91 83       	std	Z+1, r25	; 0x01
    58fa:	a2 83       	std	Z+2, r26	; 0x02
    58fc:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
				}
				res = RES_OK;
    58fe:	10 e0       	ldi	r17, 0x00	; 0
    5900:	36 c1       	rjmp	.+620    	; 0x5b6e <disk_ioctl+0x344>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
    5902:	29 85       	ldd	r18, Y+9	; 0x09
    5904:	22 95       	swap	r18
    5906:	26 95       	lsr	r18
    5908:	26 95       	lsr	r18
    590a:	23 70       	andi	r18, 0x03	; 3
    590c:	88 85       	ldd	r24, Y+8	; 0x08
    590e:	f4 e0       	ldi	r31, 0x04	; 4
    5910:	8f 9f       	mul	r24, r31
    5912:	c0 01       	movw	r24, r0
    5914:	11 24       	eor	r1, r1
    5916:	82 0f       	add	r24, r18
    5918:	91 1d       	adc	r25, r1
    591a:	9c 01       	movw	r18, r24
    591c:	2f 5f       	subi	r18, 0xFF	; 255
    591e:	3f 4f       	sbci	r19, 0xFF	; 255
    5920:	8f 81       	ldd	r24, Y+7	; 0x07
    5922:	83 70       	andi	r24, 0x03	; 3
    5924:	90 e0       	ldi	r25, 0x00	; 0
    5926:	98 2f       	mov	r25, r24
    5928:	88 27       	eor	r24, r24
    592a:	99 0f       	add	r25, r25
    592c:	99 0f       	add	r25, r25
    592e:	82 0f       	add	r24, r18
    5930:	93 1f       	adc	r25, r19
    5932:	a0 e0       	ldi	r26, 0x00	; 0
    5934:	b0 e0       	ldi	r27, 0x00	; 0
    5936:	3e 81       	ldd	r19, Y+6	; 0x06
    5938:	3f 70       	andi	r19, 0x0F	; 15
    593a:	2b 85       	ldd	r18, Y+11	; 0x0b
    593c:	22 1f       	adc	r18, r18
    593e:	22 27       	eor	r18, r18
    5940:	22 1f       	adc	r18, r18
    5942:	32 0f       	add	r19, r18
    5944:	2a 85       	ldd	r18, Y+10	; 0x0a
    5946:	23 70       	andi	r18, 0x03	; 3
    5948:	22 0f       	add	r18, r18
    594a:	23 0f       	add	r18, r19
    594c:	27 50       	subi	r18, 0x07	; 7
    594e:	04 c0       	rjmp	.+8      	; 0x5958 <disk_ioctl+0x12e>
    5950:	88 0f       	add	r24, r24
    5952:	99 1f       	adc	r25, r25
    5954:	aa 1f       	adc	r26, r26
    5956:	bb 1f       	adc	r27, r27
    5958:	2a 95       	dec	r18
    595a:	d2 f7       	brpl	.-12     	; 0x5950 <disk_ioctl+0x126>
    595c:	f8 01       	movw	r30, r16
    595e:	80 83       	st	Z, r24
    5960:	91 83       	std	Z+1, r25	; 0x01
    5962:	a2 83       	std	Z+2, r26	; 0x02
    5964:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    5966:	10 e0       	ldi	r17, 0x00	; 0
    5968:	02 c1       	rjmp	.+516    	; 0x5b6e <disk_ioctl+0x344>
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    596a:	80 e0       	ldi	r24, 0x00	; 0
    596c:	92 e0       	ldi	r25, 0x02	; 2
    596e:	fa 01       	movw	r30, r20
    5970:	91 83       	std	Z+1, r25	; 0x01
    5972:	80 83       	st	Z, r24
			res = RES_OK;
    5974:	10 e0       	ldi	r17, 0x00	; 0
			break;
    5976:	fb c0       	rjmp	.+502    	; 0x5b6e <disk_ioctl+0x344>

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
    5978:	f0 90 a6 01 	lds	r15, 0x01A6	; 0x8001a6 <CardType>
    597c:	f2 fe       	sbrs	r15, 2
    597e:	31 c0       	rjmp	.+98     	; 0x59e2 <disk_ioctl+0x1b8>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    5980:	40 e0       	ldi	r20, 0x00	; 0
    5982:	50 e0       	ldi	r21, 0x00	; 0
    5984:	ba 01       	movw	r22, r20
    5986:	8d e8       	ldi	r24, 0x8D	; 141
    5988:	0e 94 3a 2a 	call	0x5474	; 0x5474 <send_cmd>
    598c:	81 11       	cpse	r24, r1
    598e:	e0 c0       	rjmp	.+448    	; 0x5b50 <disk_ioctl+0x326>
					rcvr_spi();
    5990:	0e 94 8e 29 	call	0x531c	; 0x531c <rcvr_spi>
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    5994:	60 e1       	ldi	r22, 0x10	; 16
    5996:	70 e0       	ldi	r23, 0x00	; 0
    5998:	ce 01       	movw	r24, r28
    599a:	01 96       	adiw	r24, 0x01	; 1
    599c:	0e 94 bc 29 	call	0x5378	; 0x5378 <rcvr_datablock>
    59a0:	89 2b       	or	r24, r25
    59a2:	09 f4       	brne	.+2      	; 0x59a6 <disk_ioctl+0x17c>
    59a4:	d7 c0       	rjmp	.+430    	; 0x5b54 <disk_ioctl+0x32a>
    59a6:	0f 2e       	mov	r0, r31
    59a8:	f0 e3       	ldi	r31, 0x30	; 48
    59aa:	ff 2e       	mov	r15, r31
    59ac:	f0 2d       	mov	r31, r0
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
    59ae:	0e 94 8e 29 	call	0x531c	; 0x531c <rcvr_spi>
    59b2:	fa 94       	dec	r15
    59b4:	f1 10       	cpse	r15, r1
    59b6:	fb cf       	rjmp	.-10     	; 0x59ae <disk_ioctl+0x184>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    59b8:	2b 85       	ldd	r18, Y+11	; 0x0b
    59ba:	22 95       	swap	r18
    59bc:	2f 70       	andi	r18, 0x0F	; 15
    59be:	80 e1       	ldi	r24, 0x10	; 16
    59c0:	90 e0       	ldi	r25, 0x00	; 0
    59c2:	a0 e0       	ldi	r26, 0x00	; 0
    59c4:	b0 e0       	ldi	r27, 0x00	; 0
    59c6:	04 c0       	rjmp	.+8      	; 0x59d0 <disk_ioctl+0x1a6>
    59c8:	88 0f       	add	r24, r24
    59ca:	99 1f       	adc	r25, r25
    59cc:	aa 1f       	adc	r26, r26
    59ce:	bb 1f       	adc	r27, r27
    59d0:	2a 95       	dec	r18
    59d2:	d2 f7       	brpl	.-12     	; 0x59c8 <disk_ioctl+0x19e>
    59d4:	f8 01       	movw	r30, r16
    59d6:	80 83       	st	Z, r24
    59d8:	91 83       	std	Z+1, r25	; 0x01
    59da:	a2 83       	std	Z+2, r26	; 0x02
    59dc:	b3 83       	std	Z+3, r27	; 0x03
						res = RES_OK;
    59de:	10 e0       	ldi	r17, 0x00	; 0
    59e0:	c6 c0       	rjmp	.+396    	; 0x5b6e <disk_ioctl+0x344>
					}
				}
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    59e2:	40 e0       	ldi	r20, 0x00	; 0
    59e4:	50 e0       	ldi	r21, 0x00	; 0
    59e6:	ba 01       	movw	r22, r20
    59e8:	89 e0       	ldi	r24, 0x09	; 9
    59ea:	0e 94 3a 2a 	call	0x5474	; 0x5474 <send_cmd>
    59ee:	81 11       	cpse	r24, r1
    59f0:	b3 c0       	rjmp	.+358    	; 0x5b58 <disk_ioctl+0x32e>
    59f2:	60 e1       	ldi	r22, 0x10	; 16
    59f4:	70 e0       	ldi	r23, 0x00	; 0
    59f6:	ce 01       	movw	r24, r28
    59f8:	01 96       	adiw	r24, 0x01	; 1
    59fa:	0e 94 bc 29 	call	0x5378	; 0x5378 <rcvr_datablock>
    59fe:	89 2b       	or	r24, r25
    5a00:	09 f4       	brne	.+2      	; 0x5a04 <disk_ioctl+0x1da>
    5a02:	ac c0       	rjmp	.+344    	; 0x5b5c <disk_ioctl+0x332>
					if (CardType & CT_SD1) {	/* SDv1 */
    5a04:	f1 fe       	sbrs	r15, 1
    5a06:	20 c0       	rjmp	.+64     	; 0x5a48 <disk_ioctl+0x21e>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    5a08:	2b 85       	ldd	r18, Y+11	; 0x0b
    5a0a:	2f 73       	andi	r18, 0x3F	; 63
    5a0c:	8c 85       	ldd	r24, Y+12	; 0x0c
    5a0e:	88 1f       	adc	r24, r24
    5a10:	88 27       	eor	r24, r24
    5a12:	88 1f       	adc	r24, r24
    5a14:	90 e0       	ldi	r25, 0x00	; 0
    5a16:	01 96       	adiw	r24, 0x01	; 1
    5a18:	82 0f       	add	r24, r18
    5a1a:	91 1d       	adc	r25, r1
    5a1c:	82 0f       	add	r24, r18
    5a1e:	91 1d       	adc	r25, r1
    5a20:	2e 85       	ldd	r18, Y+14	; 0x0e
    5a22:	22 95       	swap	r18
    5a24:	26 95       	lsr	r18
    5a26:	26 95       	lsr	r18
    5a28:	23 70       	andi	r18, 0x03	; 3
    5a2a:	21 50       	subi	r18, 0x01	; 1
    5a2c:	02 c0       	rjmp	.+4      	; 0x5a32 <disk_ioctl+0x208>
    5a2e:	88 0f       	add	r24, r24
    5a30:	99 1f       	adc	r25, r25
    5a32:	2a 95       	dec	r18
    5a34:	e2 f7       	brpl	.-8      	; 0x5a2e <disk_ioctl+0x204>
    5a36:	a0 e0       	ldi	r26, 0x00	; 0
    5a38:	b0 e0       	ldi	r27, 0x00	; 0
    5a3a:	f8 01       	movw	r30, r16
    5a3c:	80 83       	st	Z, r24
    5a3e:	91 83       	std	Z+1, r25	; 0x01
    5a40:	a2 83       	std	Z+2, r26	; 0x02
    5a42:	b3 83       	std	Z+3, r27	; 0x03
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
					}
					res = RES_OK;
    5a44:	10 e0       	ldi	r17, 0x00	; 0
    5a46:	93 c0       	rjmp	.+294    	; 0x5b6e <disk_ioctl+0x344>
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
					if (CardType & CT_SD1) {	/* SDv1 */
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    5a48:	8c 85       	ldd	r24, Y+12	; 0x0c
    5a4a:	28 2f       	mov	r18, r24
    5a4c:	23 70       	andi	r18, 0x03	; 3
    5a4e:	82 95       	swap	r24
    5a50:	86 95       	lsr	r24
    5a52:	87 70       	andi	r24, 0x07	; 7
    5a54:	90 e0       	ldi	r25, 0x00	; 0
    5a56:	f8 e0       	ldi	r31, 0x08	; 8
    5a58:	2f 9f       	mul	r18, r31
    5a5a:	80 0d       	add	r24, r0
    5a5c:	91 1d       	adc	r25, r1
    5a5e:	11 24       	eor	r1, r1
    5a60:	01 96       	adiw	r24, 0x01	; 1
    5a62:	2b 85       	ldd	r18, Y+11	; 0x0b
    5a64:	2c 77       	andi	r18, 0x7C	; 124
    5a66:	30 e0       	ldi	r19, 0x00	; 0
    5a68:	35 95       	asr	r19
    5a6a:	27 95       	ror	r18
    5a6c:	35 95       	asr	r19
    5a6e:	27 95       	ror	r18
    5a70:	2f 5f       	subi	r18, 0xFF	; 255
    5a72:	3f 4f       	sbci	r19, 0xFF	; 255
    5a74:	82 9f       	mul	r24, r18
    5a76:	a0 01       	movw	r20, r0
    5a78:	83 9f       	mul	r24, r19
    5a7a:	50 0d       	add	r21, r0
    5a7c:	92 9f       	mul	r25, r18
    5a7e:	50 0d       	add	r21, r0
    5a80:	11 24       	eor	r1, r1
    5a82:	ca 01       	movw	r24, r20
    5a84:	a0 e0       	ldi	r26, 0x00	; 0
    5a86:	b0 e0       	ldi	r27, 0x00	; 0
    5a88:	f8 01       	movw	r30, r16
    5a8a:	80 83       	st	Z, r24
    5a8c:	91 83       	std	Z+1, r25	; 0x01
    5a8e:	a2 83       	std	Z+2, r26	; 0x02
    5a90:	b3 83       	std	Z+3, r27	; 0x03
					}
					res = RES_OK;
    5a92:	10 e0       	ldi	r17, 0x00	; 0
    5a94:	6c c0       	rjmp	.+216    	; 0x5b6e <disk_ioctl+0x344>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    5a96:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <CardType>
    5a9a:	fa 01       	movw	r30, r20
    5a9c:	80 83       	st	Z, r24
			res = RES_OK;
    5a9e:	10 e0       	ldi	r17, 0x00	; 0
			break;
    5aa0:	66 c0       	rjmp	.+204    	; 0x5b6e <disk_ioctl+0x344>

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    5aa2:	40 e0       	ldi	r20, 0x00	; 0
    5aa4:	50 e0       	ldi	r21, 0x00	; 0
    5aa6:	ba 01       	movw	r22, r20
    5aa8:	89 e0       	ldi	r24, 0x09	; 9
    5aaa:	0e 94 3a 2a 	call	0x5474	; 0x5474 <send_cmd>
    5aae:	81 11       	cpse	r24, r1
    5ab0:	57 c0       	rjmp	.+174    	; 0x5b60 <disk_ioctl+0x336>
				&& rcvr_datablock(ptr, 16))
    5ab2:	60 e1       	ldi	r22, 0x10	; 16
    5ab4:	70 e0       	ldi	r23, 0x00	; 0
    5ab6:	c8 01       	movw	r24, r16
    5ab8:	0e 94 bc 29 	call	0x5378	; 0x5378 <rcvr_datablock>

		switch (ctrl) {
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
				deselect();
				res = RES_OK;
    5abc:	11 e0       	ldi	r17, 0x01	; 1
    5abe:	89 2b       	or	r24, r25
    5ac0:	09 f4       	brne	.+2      	; 0x5ac4 <disk_ioctl+0x29a>
    5ac2:	55 c0       	rjmp	.+170    	; 0x5b6e <disk_ioctl+0x344>
    5ac4:	10 e0       	ldi	r17, 0x00	; 0
    5ac6:	53 c0       	rjmp	.+166    	; 0x5b6e <disk_ioctl+0x344>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    5ac8:	40 e0       	ldi	r20, 0x00	; 0
    5aca:	50 e0       	ldi	r21, 0x00	; 0
    5acc:	ba 01       	movw	r22, r20
    5ace:	8a e0       	ldi	r24, 0x0A	; 10
    5ad0:	0e 94 3a 2a 	call	0x5474	; 0x5474 <send_cmd>
    5ad4:	81 11       	cpse	r24, r1
    5ad6:	46 c0       	rjmp	.+140    	; 0x5b64 <disk_ioctl+0x33a>
				&& rcvr_datablock(ptr, 16))
    5ad8:	60 e1       	ldi	r22, 0x10	; 16
    5ada:	70 e0       	ldi	r23, 0x00	; 0
    5adc:	c8 01       	movw	r24, r16
    5ade:	0e 94 bc 29 	call	0x5378	; 0x5378 <rcvr_datablock>

		switch (ctrl) {
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
				deselect();
				res = RES_OK;
    5ae2:	11 e0       	ldi	r17, 0x01	; 1
    5ae4:	89 2b       	or	r24, r25
    5ae6:	09 f4       	brne	.+2      	; 0x5aea <disk_ioctl+0x2c0>
    5ae8:	42 c0       	rjmp	.+132    	; 0x5b6e <disk_ioctl+0x344>
    5aea:	10 e0       	ldi	r17, 0x00	; 0
    5aec:	40 c0       	rjmp	.+128    	; 0x5b6e <disk_ioctl+0x344>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    5aee:	40 e0       	ldi	r20, 0x00	; 0
    5af0:	50 e0       	ldi	r21, 0x00	; 0
    5af2:	ba 01       	movw	r22, r20
    5af4:	8a e3       	ldi	r24, 0x3A	; 58
    5af6:	0e 94 3a 2a 	call	0x5474	; 0x5474 <send_cmd>
    5afa:	81 11       	cpse	r24, r1
    5afc:	35 c0       	rjmp	.+106    	; 0x5b68 <disk_ioctl+0x33e>
    5afe:	78 01       	movw	r14, r16
    5b00:	0c 5f       	subi	r16, 0xFC	; 252
    5b02:	1f 4f       	sbci	r17, 0xFF	; 255
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    5b04:	0e 94 8e 29 	call	0x531c	; 0x531c <rcvr_spi>
    5b08:	f7 01       	movw	r30, r14
    5b0a:	81 93       	st	Z+, r24
    5b0c:	7f 01       	movw	r14, r30
    5b0e:	0e 17       	cp	r16, r30
    5b10:	1f 07       	cpc	r17, r31
    5b12:	c1 f7       	brne	.-16     	; 0x5b04 <disk_ioctl+0x2da>
				res = RES_OK;
    5b14:	10 e0       	ldi	r17, 0x00	; 0
    5b16:	2b c0       	rjmp	.+86     	; 0x5b6e <disk_ioctl+0x344>
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    5b18:	40 e0       	ldi	r20, 0x00	; 0
    5b1a:	50 e0       	ldi	r21, 0x00	; 0
    5b1c:	ba 01       	movw	r22, r20
    5b1e:	8d e8       	ldi	r24, 0x8D	; 141
    5b20:	0e 94 3a 2a 	call	0x5474	; 0x5474 <send_cmd>
    5b24:	81 11       	cpse	r24, r1
    5b26:	22 c0       	rjmp	.+68     	; 0x5b6c <disk_ioctl+0x342>
				rcvr_spi();
    5b28:	0e 94 8e 29 	call	0x531c	; 0x531c <rcvr_spi>
				if (rcvr_datablock(ptr, 64))
    5b2c:	60 e4       	ldi	r22, 0x40	; 64
    5b2e:	70 e0       	ldi	r23, 0x00	; 0
    5b30:	c8 01       	movw	r24, r16
    5b32:	0e 94 bc 29 	call	0x5378	; 0x5378 <rcvr_datablock>

		switch (ctrl) {
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
				deselect();
				res = RES_OK;
    5b36:	11 e0       	ldi	r17, 0x01	; 1
    5b38:	89 2b       	or	r24, r25
    5b3a:	c9 f0       	breq	.+50     	; 0x5b6e <disk_ioctl+0x344>
    5b3c:	10 e0       	ldi	r17, 0x00	; 0
    5b3e:	17 c0       	rjmp	.+46     	; 0x5b6e <disk_ioctl+0x344>
					res = RES_OK;
			}
			break;

		default:
			res = RES_PARERR;
    5b40:	14 e0       	ldi	r17, 0x04	; 4
    5b42:	15 c0       	rjmp	.+42     	; 0x5b6e <disk_ioctl+0x344>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
    5b44:	11 e0       	ldi	r17, 0x01	; 1
    5b46:	13 c0       	rjmp	.+38     	; 0x5b6e <disk_ioctl+0x344>
    5b48:	11 e0       	ldi	r17, 0x01	; 1
    5b4a:	11 c0       	rjmp	.+34     	; 0x5b6e <disk_ioctl+0x344>
    5b4c:	11 e0       	ldi	r17, 0x01	; 1
    5b4e:	0f c0       	rjmp	.+30     	; 0x5b6e <disk_ioctl+0x344>
    5b50:	11 e0       	ldi	r17, 0x01	; 1
    5b52:	0d c0       	rjmp	.+26     	; 0x5b6e <disk_ioctl+0x344>
    5b54:	11 e0       	ldi	r17, 0x01	; 1
    5b56:	0b c0       	rjmp	.+22     	; 0x5b6e <disk_ioctl+0x344>
    5b58:	11 e0       	ldi	r17, 0x01	; 1
    5b5a:	09 c0       	rjmp	.+18     	; 0x5b6e <disk_ioctl+0x344>
    5b5c:	11 e0       	ldi	r17, 0x01	; 1
    5b5e:	07 c0       	rjmp	.+14     	; 0x5b6e <disk_ioctl+0x344>
    5b60:	11 e0       	ldi	r17, 0x01	; 1
    5b62:	05 c0       	rjmp	.+10     	; 0x5b6e <disk_ioctl+0x344>
    5b64:	11 e0       	ldi	r17, 0x01	; 1
    5b66:	03 c0       	rjmp	.+6      	; 0x5b6e <disk_ioctl+0x344>
    5b68:	11 e0       	ldi	r17, 0x01	; 1
    5b6a:	01 c0       	rjmp	.+2      	; 0x5b6e <disk_ioctl+0x344>
    5b6c:	11 e0       	ldi	r17, 0x01	; 1

		default:
			res = RES_PARERR;
		}

		deselect();
    5b6e:	0e 94 a7 29 	call	0x534e	; 0x534e <deselect>
    5b72:	81 2f       	mov	r24, r17
    5b74:	05 c0       	rjmp	.+10     	; 0x5b80 <disk_ioctl+0x356>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
    5b76:	84 e0       	ldi	r24, 0x04	; 4
    5b78:	03 c0       	rjmp	.+6      	; 0x5b80 <disk_ioctl+0x356>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
			res = RES_OK;
			break;
		default :
			res = RES_PARERR;
    5b7a:	84 e0       	ldi	r24, 0x04	; 4
    5b7c:	01 c0       	rjmp	.+2      	; 0x5b80 <disk_ioctl+0x356>
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    5b7e:	83 e0       	ldi	r24, 0x03	; 3

		deselect();
	}

	return res;
}
    5b80:	60 96       	adiw	r28, 0x10	; 16
    5b82:	0f b6       	in	r0, 0x3f	; 63
    5b84:	f8 94       	cli
    5b86:	de bf       	out	0x3e, r29	; 62
    5b88:	0f be       	out	0x3f, r0	; 63
    5b8a:	cd bf       	out	0x3d, r28	; 61
    5b8c:	df 91       	pop	r29
    5b8e:	cf 91       	pop	r28
    5b90:	1f 91       	pop	r17
    5b92:	0f 91       	pop	r16
    5b94:	ff 90       	pop	r15
    5b96:	ef 90       	pop	r14
    5b98:	08 95       	ret

00005b9a <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;						/* 100Hz decrement timer */
    5b9a:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Timer1>
	if (n) Timer1 = --n;
    5b9e:	88 23       	and	r24, r24
    5ba0:	19 f0       	breq	.+6      	; 0x5ba8 <disk_timerproc+0xe>
    5ba2:	81 50       	subi	r24, 0x01	; 1
    5ba4:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <Timer1>
	n = Timer2;
    5ba8:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <Timer2>
	if (n) Timer2 = --n;
    5bac:	88 23       	and	r24, r24
    5bae:	19 f0       	breq	.+6      	; 0x5bb6 <disk_timerproc+0x1c>
    5bb0:	81 50       	subi	r24, 0x01	; 1
    5bb2:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <Timer2>

	s = Stat;
    5bb6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
	//else					/* Write enabled */
		s &= ~STA_PROTECT;
	//if ( (SOCKINS & SOCKPORT))			/* Card inserted */
	//	s |= (STA_NODISK | STA_NOINIT);
	//else					/* Socket empty */ 
		s &= ~STA_NODISK;
    5bba:	89 7f       	andi	r24, 0xF9	; 249
	Stat = s;
    5bbc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Stat>
    5bc0:	08 95       	ret

00005bc2 <setSNDFile>:
 * Created: 12.09.2019 20:59:08
 *  Author: Tomek
 */ 
#include "SNDFile.h"

FRESULT setSNDFile(struct SNDFile *sf,char *name,struct family_entry *fam,struct sound_entry *snd){
    5bc2:	8f 92       	push	r8
    5bc4:	9f 92       	push	r9
    5bc6:	af 92       	push	r10
    5bc8:	bf 92       	push	r11
    5bca:	cf 92       	push	r12
    5bcc:	df 92       	push	r13
    5bce:	ff 92       	push	r15
    5bd0:	0f 93       	push	r16
    5bd2:	1f 93       	push	r17
    5bd4:	cf 93       	push	r28
    5bd6:	df 93       	push	r29
    5bd8:	00 d0       	rcall	.+0      	; 0x5bda <setSNDFile+0x18>
    5bda:	cd b7       	in	r28, 0x3d	; 61
    5bdc:	de b7       	in	r29, 0x3e	; 62
    5bde:	8c 01       	movw	r16, r24
    5be0:	6b 01       	movw	r12, r22
    5be2:	4a 01       	movw	r8, r20
    5be4:	59 01       	movw	r10, r18
	FRESULT res;
	UINT numOfBytes;
	if((res = f_open(&sf->_fd,name,FA_READ)) != FR_OK){
    5be6:	41 e0       	ldi	r20, 0x01	; 1
    5be8:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <f_open>
    5bec:	f8 2e       	mov	r15, r24
    5bee:	88 23       	and	r24, r24
    5bf0:	51 f0       	breq	.+20     	; 0x5c06 <setSNDFile+0x44>
		lcdPrintData(getLCDString(OPN_NO,OPN_NO_LEN),OPN_NO_LEN);
    5bf2:	6b e0       	ldi	r22, 0x0B	; 11
    5bf4:	8b e4       	ldi	r24, 0x4B	; 75
    5bf6:	90 e0       	ldi	r25, 0x00	; 0
    5bf8:	0e 94 61 18 	call	0x30c2	; 0x30c2 <getLCDString>
    5bfc:	6b e0       	ldi	r22, 0x0B	; 11
    5bfe:	0e 94 c9 1c 	call	0x3992	; 0x3992 <lcdPrintData>
		return res;
    5c02:	8f 2d       	mov	r24, r15
    5c04:	27 c0       	rjmp	.+78     	; 0x5c54 <setSNDFile+0x92>
	}
	strcpy(sf->_fileName,name);
    5c06:	b6 01       	movw	r22, r12
    5c08:	c8 01       	movw	r24, r16
    5c0a:	81 96       	adiw	r24, 0x21	; 33
    5c0c:	0e 94 a3 39 	call	0x7346	; 0x7346 <strcpy>
	sf->_fileOpen = TRUE;
    5c10:	81 e0       	ldi	r24, 0x01	; 1
    5c12:	f8 01       	movw	r30, r16
    5c14:	80 a3       	std	Z+32, r24	; 0x20
	// read first sound family and program
	f_lseek(&sf->_fd,0);
    5c16:	40 e0       	ldi	r20, 0x00	; 0
    5c18:	50 e0       	ldi	r21, 0x00	; 0
    5c1a:	ba 01       	movw	r22, r20
    5c1c:	c8 01       	movw	r24, r16
    5c1e:	0e 94 c4 14 	call	0x2988	; 0x2988 <f_lseek>
	f_read(&sf->_fd,fam,sizeof(struct family_entry),&numOfBytes);
    5c22:	9e 01       	movw	r18, r28
    5c24:	2f 5f       	subi	r18, 0xFF	; 255
    5c26:	3f 4f       	sbci	r19, 0xFF	; 255
    5c28:	48 e1       	ldi	r20, 0x18	; 24
    5c2a:	50 e0       	ldi	r21, 0x00	; 0
    5c2c:	b4 01       	movw	r22, r8
    5c2e:	c8 01       	movw	r24, r16
    5c30:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
	f_read(&sf->_fd,snd,sizeof(struct sound_entry),&numOfBytes);
    5c34:	9e 01       	movw	r18, r28
    5c36:	2f 5f       	subi	r18, 0xFF	; 255
    5c38:	3f 4f       	sbci	r19, 0xFF	; 255
    5c3a:	42 e1       	ldi	r20, 0x12	; 18
    5c3c:	50 e0       	ldi	r21, 0x00	; 0
    5c3e:	b5 01       	movw	r22, r10
    5c40:	c8 01       	movw	r24, r16
    5c42:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
	f_lseek(&sf->_fd,0);
    5c46:	40 e0       	ldi	r20, 0x00	; 0
    5c48:	50 e0       	ldi	r21, 0x00	; 0
    5c4a:	ba 01       	movw	r22, r20
    5c4c:	c8 01       	movw	r24, r16
    5c4e:	0e 94 c4 14 	call	0x2988	; 0x2988 <f_lseek>
	return FR_OK;
    5c52:	80 e0       	ldi	r24, 0x00	; 0
}
    5c54:	0f 90       	pop	r0
    5c56:	0f 90       	pop	r0
    5c58:	df 91       	pop	r29
    5c5a:	cf 91       	pop	r28
    5c5c:	1f 91       	pop	r17
    5c5e:	0f 91       	pop	r16
    5c60:	ff 90       	pop	r15
    5c62:	df 90       	pop	r13
    5c64:	cf 90       	pop	r12
    5c66:	bf 90       	pop	r11
    5c68:	af 90       	pop	r10
    5c6a:	9f 90       	pop	r9
    5c6c:	8f 90       	pop	r8
    5c6e:	08 95       	ret

00005c70 <closeSNDFile>:

FRESULT closeSNDFile(struct SNDFile *sf){
    5c70:	cf 93       	push	r28
    5c72:	df 93       	push	r29
	FRESULT res;
	if(sf->_fileOpen == FALSE)
    5c74:	fc 01       	movw	r30, r24
    5c76:	20 a1       	ldd	r18, Z+32	; 0x20
    5c78:	22 23       	and	r18, r18
    5c7a:	39 f0       	breq	.+14     	; 0x5c8a <closeSNDFile+0x1a>
    5c7c:	ec 01       	movw	r28, r24
		return FR_INVALID_OBJECT;
	if((res = f_close(&sf->_fd)) != FR_OK)
    5c7e:	0e 94 77 13 	call	0x26ee	; 0x26ee <f_close>
    5c82:	81 11       	cpse	r24, r1
    5c84:	03 c0       	rjmp	.+6      	; 0x5c8c <closeSNDFile+0x1c>
		return res;
	sf->_fileOpen = FALSE;
    5c86:	18 a2       	std	Y+32, r1	; 0x20
	return FR_OK;
    5c88:	01 c0       	rjmp	.+2      	; 0x5c8c <closeSNDFile+0x1c>
}

FRESULT closeSNDFile(struct SNDFile *sf){
	FRESULT res;
	if(sf->_fileOpen == FALSE)
		return FR_INVALID_OBJECT;
    5c8a:	89 e0       	ldi	r24, 0x09	; 9
	if((res = f_close(&sf->_fd)) != FR_OK)
		return res;
	sf->_fileOpen = FALSE;
	return FR_OK;
}
    5c8c:	df 91       	pop	r29
    5c8e:	cf 91       	pop	r28
    5c90:	08 95       	ret

00005c92 <scrollSoundList>:

void scrollSoundList(struct SNDFile *sptr,INPUT joy, struct family_entry *fam, struct sound_entry *snd){
    5c92:	4f 92       	push	r4
    5c94:	5f 92       	push	r5
    5c96:	6f 92       	push	r6
    5c98:	7f 92       	push	r7
    5c9a:	bf 92       	push	r11
    5c9c:	cf 92       	push	r12
    5c9e:	df 92       	push	r13
    5ca0:	ef 92       	push	r14
    5ca2:	ff 92       	push	r15
    5ca4:	0f 93       	push	r16
    5ca6:	1f 93       	push	r17
    5ca8:	cf 93       	push	r28
    5caa:	df 93       	push	r29
    5cac:	00 d0       	rcall	.+0      	; 0x5cae <scrollSoundList+0x1c>
    5cae:	cd b7       	in	r28, 0x3d	; 61
    5cb0:	de b7       	in	r29, 0x3e	; 62
    5cb2:	8c 01       	movw	r16, r24
    5cb4:	b6 2e       	mov	r11, r22
    5cb6:	7a 01       	movw	r14, r20
    5cb8:	69 01       	movw	r12, r18
	UINT numOfBytes;
	sptr->next_family = sptr->current_family + sizeof(struct family_entry) + fam->current_sounds * sizeof(struct sound_entry);
    5cba:	fc 01       	movw	r30, r24
    5cbc:	42 a9       	ldd	r20, Z+50	; 0x32
    5cbe:	53 a9       	ldd	r21, Z+51	; 0x33
    5cc0:	64 a9       	ldd	r22, Z+52	; 0x34
    5cc2:	75 a9       	ldd	r23, Z+53	; 0x35
    5cc4:	f7 01       	movw	r30, r14
    5cc6:	84 81       	ldd	r24, Z+4	; 0x04
    5cc8:	95 81       	ldd	r25, Z+5	; 0x05
    5cca:	a6 81       	ldd	r26, Z+6	; 0x06
    5ccc:	b7 81       	ldd	r27, Z+7	; 0x07
    5cce:	2c 01       	movw	r4, r24
    5cd0:	3d 01       	movw	r6, r26
    5cd2:	44 0c       	add	r4, r4
    5cd4:	55 1c       	adc	r5, r5
    5cd6:	66 1c       	adc	r6, r6
    5cd8:	77 1c       	adc	r7, r7
    5cda:	44 0c       	add	r4, r4
    5cdc:	55 1c       	adc	r5, r5
    5cde:	66 1c       	adc	r6, r6
    5ce0:	77 1c       	adc	r7, r7
    5ce2:	44 0c       	add	r4, r4
    5ce4:	55 1c       	adc	r5, r5
    5ce6:	66 1c       	adc	r6, r6
    5ce8:	77 1c       	adc	r7, r7
    5cea:	84 0d       	add	r24, r4
    5cec:	95 1d       	adc	r25, r5
    5cee:	a6 1d       	adc	r26, r6
    5cf0:	b7 1d       	adc	r27, r7
    5cf2:	88 0f       	add	r24, r24
    5cf4:	99 1f       	adc	r25, r25
    5cf6:	aa 1f       	adc	r26, r26
    5cf8:	bb 1f       	adc	r27, r27
    5cfa:	2a 01       	movw	r4, r20
    5cfc:	3b 01       	movw	r6, r22
    5cfe:	f8 e1       	ldi	r31, 0x18	; 24
    5d00:	4f 0e       	add	r4, r31
    5d02:	51 1c       	adc	r5, r1
    5d04:	61 1c       	adc	r6, r1
    5d06:	71 1c       	adc	r7, r1
    5d08:	84 0d       	add	r24, r4
    5d0a:	95 1d       	adc	r25, r5
    5d0c:	a6 1d       	adc	r26, r6
    5d0e:	b7 1d       	adc	r27, r7
    5d10:	f8 01       	movw	r30, r16
    5d12:	86 ab       	std	Z+54, r24	; 0x36
    5d14:	97 ab       	std	Z+55, r25	; 0x37
    5d16:	a0 af       	std	Z+56, r26	; 0x38
    5d18:	b1 af       	std	Z+57, r27	; 0x39
	if(fam->previous_sounds != 0)
    5d1a:	f7 01       	movw	r30, r14
    5d1c:	80 81       	ld	r24, Z
    5d1e:	91 81       	ldd	r25, Z+1	; 0x01
    5d20:	a2 81       	ldd	r26, Z+2	; 0x02
    5d22:	b3 81       	ldd	r27, Z+3	; 0x03
    5d24:	00 97       	sbiw	r24, 0x00	; 0
    5d26:	a1 05       	cpc	r26, r1
    5d28:	b1 05       	cpc	r27, r1
    5d2a:	19 f1       	breq	.+70     	; 0x5d72 <scrollSoundList+0xe0>
	sptr->previous_family = sptr->current_family - fam->previous_sounds * sizeof(struct sound_entry) - sizeof(struct family_entry);
    5d2c:	48 51       	subi	r20, 0x18	; 24
    5d2e:	51 09       	sbc	r21, r1
    5d30:	61 09       	sbc	r22, r1
    5d32:	71 09       	sbc	r23, r1
    5d34:	2c 01       	movw	r4, r24
    5d36:	3d 01       	movw	r6, r26
    5d38:	44 0c       	add	r4, r4
    5d3a:	55 1c       	adc	r5, r5
    5d3c:	66 1c       	adc	r6, r6
    5d3e:	77 1c       	adc	r7, r7
    5d40:	44 0c       	add	r4, r4
    5d42:	55 1c       	adc	r5, r5
    5d44:	66 1c       	adc	r6, r6
    5d46:	77 1c       	adc	r7, r7
    5d48:	44 0c       	add	r4, r4
    5d4a:	55 1c       	adc	r5, r5
    5d4c:	66 1c       	adc	r6, r6
    5d4e:	77 1c       	adc	r7, r7
    5d50:	84 0d       	add	r24, r4
    5d52:	95 1d       	adc	r25, r5
    5d54:	a6 1d       	adc	r26, r6
    5d56:	b7 1d       	adc	r27, r7
    5d58:	88 0f       	add	r24, r24
    5d5a:	99 1f       	adc	r25, r25
    5d5c:	aa 1f       	adc	r26, r26
    5d5e:	bb 1f       	adc	r27, r27
    5d60:	48 1b       	sub	r20, r24
    5d62:	59 0b       	sbc	r21, r25
    5d64:	6a 0b       	sbc	r22, r26
    5d66:	7b 0b       	sbc	r23, r27
    5d68:	f8 01       	movw	r30, r16
    5d6a:	46 a7       	std	Z+46, r20	; 0x2e
    5d6c:	57 a7       	std	Z+47, r21	; 0x2f
    5d6e:	60 ab       	std	Z+48, r22	; 0x30
    5d70:	71 ab       	std	Z+49, r23	; 0x31
	lcdClear();
    5d72:	0e 94 35 1c 	call	0x386a	; 0x386a <lcdClear>
	switch(joy){
    5d76:	f5 e0       	ldi	r31, 0x05	; 5
    5d78:	bf 16       	cp	r11, r31
    5d7a:	c9 f0       	breq	.+50     	; 0x5dae <scrollSoundList+0x11c>
    5d7c:	fb 15       	cp	r31, r11
    5d7e:	24 f0       	brlt	.+8      	; 0x5d88 <scrollSoundList+0xf6>
    5d80:	24 e0       	ldi	r18, 0x04	; 4
    5d82:	b2 16       	cp	r11, r18
    5d84:	51 f1       	breq	.+84     	; 0x5dda <scrollSoundList+0x148>
    5d86:	55 c0       	rjmp	.+170    	; 0x5e32 <scrollSoundList+0x1a0>
    5d88:	86 e0       	ldi	r24, 0x06	; 6
    5d8a:	b8 16       	cp	r11, r24
    5d8c:	b9 f1       	breq	.+110    	; 0x5dfc <scrollSoundList+0x16a>
    5d8e:	e7 e0       	ldi	r30, 0x07	; 7
    5d90:	be 12       	cpse	r11, r30
    5d92:	4f c0       	rjmp	.+158    	; 0x5e32 <scrollSoundList+0x1a0>
		break;
		case JOY_PRESS:
		break;
		case NONE: break;
		case JOY_LEFT:
		sptr->current_sound = 0;
    5d94:	f8 01       	movw	r30, r16
    5d96:	12 ae       	std	Z+58, r1	; 0x3a
    5d98:	13 ae       	std	Z+59, r1	; 0x3b
    5d9a:	14 ae       	std	Z+60, r1	; 0x3c
    5d9c:	15 ae       	std	Z+61, r1	; 0x3d
		f_lseek(&sptr->_fd,sptr->previous_family);
    5d9e:	46 a5       	ldd	r20, Z+46	; 0x2e
    5da0:	57 a5       	ldd	r21, Z+47	; 0x2f
    5da2:	60 a9       	ldd	r22, Z+48	; 0x30
    5da4:	71 a9       	ldd	r23, Z+49	; 0x31
    5da6:	c8 01       	movw	r24, r16
    5da8:	0e 94 c4 14 	call	0x2988	; 0x2988 <f_lseek>
		break;
    5dac:	42 c0       	rjmp	.+132    	; 0x5e32 <scrollSoundList+0x1a0>
		case JOY_RIGHT:
		sptr->current_sound = 0;
    5dae:	f8 01       	movw	r30, r16
    5db0:	12 ae       	std	Z+58, r1	; 0x3a
    5db2:	13 ae       	std	Z+59, r1	; 0x3b
    5db4:	14 ae       	std	Z+60, r1	; 0x3c
    5db6:	15 ae       	std	Z+61, r1	; 0x3d
		if(sptr->next_family < sptr->_fd.fsize)
    5db8:	46 a9       	ldd	r20, Z+54	; 0x36
    5dba:	57 a9       	ldd	r21, Z+55	; 0x37
    5dbc:	60 ad       	ldd	r22, Z+56	; 0x38
    5dbe:	71 ad       	ldd	r23, Z+57	; 0x39
    5dc0:	82 85       	ldd	r24, Z+10	; 0x0a
    5dc2:	93 85       	ldd	r25, Z+11	; 0x0b
    5dc4:	a4 85       	ldd	r26, Z+12	; 0x0c
    5dc6:	b5 85       	ldd	r27, Z+13	; 0x0d
    5dc8:	48 17       	cp	r20, r24
    5dca:	59 07       	cpc	r21, r25
    5dcc:	6a 07       	cpc	r22, r26
    5dce:	7b 07       	cpc	r23, r27
    5dd0:	80 f5       	brcc	.+96     	; 0x5e32 <scrollSoundList+0x1a0>
		f_lseek(&sptr->_fd,sptr->next_family);
    5dd2:	c8 01       	movw	r24, r16
    5dd4:	0e 94 c4 14 	call	0x2988	; 0x2988 <f_lseek>
    5dd8:	2c c0       	rjmp	.+88     	; 0x5e32 <scrollSoundList+0x1a0>
		break;
		case JOY_UP:
		if(sptr->current_sound > 0)
    5dda:	f8 01       	movw	r30, r16
    5ddc:	82 ad       	ldd	r24, Z+58	; 0x3a
    5dde:	93 ad       	ldd	r25, Z+59	; 0x3b
    5de0:	a4 ad       	ldd	r26, Z+60	; 0x3c
    5de2:	b5 ad       	ldd	r27, Z+61	; 0x3d
    5de4:	00 97       	sbiw	r24, 0x00	; 0
    5de6:	a1 05       	cpc	r26, r1
    5de8:	b1 05       	cpc	r27, r1
    5dea:	19 f1       	breq	.+70     	; 0x5e32 <scrollSoundList+0x1a0>
		sptr->current_sound--;
    5dec:	01 97       	sbiw	r24, 0x01	; 1
    5dee:	a1 09       	sbc	r26, r1
    5df0:	b1 09       	sbc	r27, r1
    5df2:	82 af       	std	Z+58, r24	; 0x3a
    5df4:	93 af       	std	Z+59, r25	; 0x3b
    5df6:	a4 af       	std	Z+60, r26	; 0x3c
    5df8:	b5 af       	std	Z+61, r27	; 0x3d
    5dfa:	1b c0       	rjmp	.+54     	; 0x5e32 <scrollSoundList+0x1a0>
		break;
		case JOY_DOWN:
		if(sptr->current_sound < (fam->current_sounds - 1))
    5dfc:	f8 01       	movw	r30, r16
    5dfe:	42 ad       	ldd	r20, Z+58	; 0x3a
    5e00:	53 ad       	ldd	r21, Z+59	; 0x3b
    5e02:	64 ad       	ldd	r22, Z+60	; 0x3c
    5e04:	75 ad       	ldd	r23, Z+61	; 0x3d
    5e06:	f7 01       	movw	r30, r14
    5e08:	84 81       	ldd	r24, Z+4	; 0x04
    5e0a:	95 81       	ldd	r25, Z+5	; 0x05
    5e0c:	a6 81       	ldd	r26, Z+6	; 0x06
    5e0e:	b7 81       	ldd	r27, Z+7	; 0x07
    5e10:	01 97       	sbiw	r24, 0x01	; 1
    5e12:	a1 09       	sbc	r26, r1
    5e14:	b1 09       	sbc	r27, r1
    5e16:	48 17       	cp	r20, r24
    5e18:	59 07       	cpc	r21, r25
    5e1a:	6a 07       	cpc	r22, r26
    5e1c:	7b 07       	cpc	r23, r27
    5e1e:	48 f4       	brcc	.+18     	; 0x5e32 <scrollSoundList+0x1a0>
		sptr->current_sound++;
    5e20:	4f 5f       	subi	r20, 0xFF	; 255
    5e22:	5f 4f       	sbci	r21, 0xFF	; 255
    5e24:	6f 4f       	sbci	r22, 0xFF	; 255
    5e26:	7f 4f       	sbci	r23, 0xFF	; 255
    5e28:	f8 01       	movw	r30, r16
    5e2a:	42 af       	std	Z+58, r20	; 0x3a
    5e2c:	53 af       	std	Z+59, r21	; 0x3b
    5e2e:	64 af       	std	Z+60, r22	; 0x3c
    5e30:	75 af       	std	Z+61, r23	; 0x3d
		break;

	}

	sptr->current_family = f_tell(&sptr->_fd);
    5e32:	f8 01       	movw	r30, r16
    5e34:	86 81       	ldd	r24, Z+6	; 0x06
    5e36:	97 81       	ldd	r25, Z+7	; 0x07
    5e38:	a0 85       	ldd	r26, Z+8	; 0x08
    5e3a:	b1 85       	ldd	r27, Z+9	; 0x09
    5e3c:	82 ab       	std	Z+50, r24	; 0x32
    5e3e:	93 ab       	std	Z+51, r25	; 0x33
    5e40:	a4 ab       	std	Z+52, r26	; 0x34
    5e42:	b5 ab       	std	Z+53, r27	; 0x35
	f_read(&sptr->_fd,fam,sizeof(struct family_entry),&numOfBytes);
    5e44:	9e 01       	movw	r18, r28
    5e46:	2f 5f       	subi	r18, 0xFF	; 255
    5e48:	3f 4f       	sbci	r19, 0xFF	; 255
    5e4a:	48 e1       	ldi	r20, 0x18	; 24
    5e4c:	50 e0       	ldi	r21, 0x00	; 0
    5e4e:	b7 01       	movw	r22, r14
    5e50:	c8 01       	movw	r24, r16
    5e52:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
	lcdGotoXY(0,0);
    5e56:	60 e0       	ldi	r22, 0x00	; 0
    5e58:	80 e0       	ldi	r24, 0x00	; 0
    5e5a:	0e 94 39 1c 	call	0x3872	; 0x3872 <lcdGotoXY>
	lcdPrintData(fam->name,strlen(fam->name));
    5e5e:	c7 01       	movw	r24, r14
    5e60:	08 96       	adiw	r24, 0x08	; 8
    5e62:	fc 01       	movw	r30, r24
    5e64:	01 90       	ld	r0, Z+
    5e66:	00 20       	and	r0, r0
    5e68:	e9 f7       	brne	.-6      	; 0x5e64 <scrollSoundList+0x1d2>
    5e6a:	31 97       	sbiw	r30, 0x01	; 1
    5e6c:	bf 01       	movw	r22, r30
    5e6e:	68 1b       	sub	r22, r24
    5e70:	79 0b       	sbc	r23, r25
    5e72:	0e 94 c9 1c 	call	0x3992	; 0x3992 <lcdPrintData>
	f_lseek(&sptr->_fd,sptr->current_family + sizeof(struct family_entry) + sptr->current_sound * sizeof(struct sound_entry));
    5e76:	f8 01       	movw	r30, r16
    5e78:	82 ad       	ldd	r24, Z+58	; 0x3a
    5e7a:	93 ad       	ldd	r25, Z+59	; 0x3b
    5e7c:	a4 ad       	ldd	r26, Z+60	; 0x3c
    5e7e:	b5 ad       	ldd	r27, Z+61	; 0x3d
    5e80:	ac 01       	movw	r20, r24
    5e82:	bd 01       	movw	r22, r26
    5e84:	44 0f       	add	r20, r20
    5e86:	55 1f       	adc	r21, r21
    5e88:	66 1f       	adc	r22, r22
    5e8a:	77 1f       	adc	r23, r23
    5e8c:	44 0f       	add	r20, r20
    5e8e:	55 1f       	adc	r21, r21
    5e90:	66 1f       	adc	r22, r22
    5e92:	77 1f       	adc	r23, r23
    5e94:	44 0f       	add	r20, r20
    5e96:	55 1f       	adc	r21, r21
    5e98:	66 1f       	adc	r22, r22
    5e9a:	77 1f       	adc	r23, r23
    5e9c:	84 0f       	add	r24, r20
    5e9e:	95 1f       	adc	r25, r21
    5ea0:	a6 1f       	adc	r26, r22
    5ea2:	b7 1f       	adc	r27, r23
    5ea4:	88 0f       	add	r24, r24
    5ea6:	99 1f       	adc	r25, r25
    5ea8:	aa 1f       	adc	r26, r26
    5eaa:	bb 1f       	adc	r27, r27
    5eac:	42 a9       	ldd	r20, Z+50	; 0x32
    5eae:	53 a9       	ldd	r21, Z+51	; 0x33
    5eb0:	64 a9       	ldd	r22, Z+52	; 0x34
    5eb2:	75 a9       	ldd	r23, Z+53	; 0x35
    5eb4:	48 5e       	subi	r20, 0xE8	; 232
    5eb6:	5f 4f       	sbci	r21, 0xFF	; 255
    5eb8:	6f 4f       	sbci	r22, 0xFF	; 255
    5eba:	7f 4f       	sbci	r23, 0xFF	; 255
    5ebc:	48 0f       	add	r20, r24
    5ebe:	59 1f       	adc	r21, r25
    5ec0:	6a 1f       	adc	r22, r26
    5ec2:	7b 1f       	adc	r23, r27
    5ec4:	c8 01       	movw	r24, r16
    5ec6:	0e 94 c4 14 	call	0x2988	; 0x2988 <f_lseek>
	f_read(&sptr->_fd,snd,sizeof(struct sound_entry),&numOfBytes);
    5eca:	9e 01       	movw	r18, r28
    5ecc:	2f 5f       	subi	r18, 0xFF	; 255
    5ece:	3f 4f       	sbci	r19, 0xFF	; 255
    5ed0:	42 e1       	ldi	r20, 0x12	; 18
    5ed2:	50 e0       	ldi	r21, 0x00	; 0
    5ed4:	b6 01       	movw	r22, r12
    5ed6:	c8 01       	movw	r24, r16
    5ed8:	0e 94 34 10 	call	0x2068	; 0x2068 <f_read>
	f_lseek(&sptr->_fd,sptr->current_family);
    5edc:	f8 01       	movw	r30, r16
    5ede:	42 a9       	ldd	r20, Z+50	; 0x32
    5ee0:	53 a9       	ldd	r21, Z+51	; 0x33
    5ee2:	64 a9       	ldd	r22, Z+52	; 0x34
    5ee4:	75 a9       	ldd	r23, Z+53	; 0x35
    5ee6:	c8 01       	movw	r24, r16
    5ee8:	0e 94 c4 14 	call	0x2988	; 0x2988 <f_lseek>
	lcdGotoXY(0,1);
    5eec:	61 e0       	ldi	r22, 0x01	; 1
    5eee:	80 e0       	ldi	r24, 0x00	; 0
    5ef0:	0e 94 39 1c 	call	0x3872	; 0x3872 <lcdGotoXY>
	lcdPrintData(snd->name,strlen(snd->name));
    5ef4:	c6 01       	movw	r24, r12
    5ef6:	02 96       	adiw	r24, 0x02	; 2
    5ef8:	fc 01       	movw	r30, r24
    5efa:	01 90       	ld	r0, Z+
    5efc:	00 20       	and	r0, r0
    5efe:	e9 f7       	brne	.-6      	; 0x5efa <scrollSoundList+0x268>
    5f00:	31 97       	sbiw	r30, 0x01	; 1
    5f02:	bf 01       	movw	r22, r30
    5f04:	68 1b       	sub	r22, r24
    5f06:	79 0b       	sbc	r23, r25
    5f08:	0e 94 c9 1c 	call	0x3992	; 0x3992 <lcdPrintData>
	
    5f0c:	0f 90       	pop	r0
    5f0e:	0f 90       	pop	r0
    5f10:	df 91       	pop	r29
    5f12:	cf 91       	pop	r28
    5f14:	1f 91       	pop	r17
    5f16:	0f 91       	pop	r16
    5f18:	ff 90       	pop	r15
    5f1a:	ef 90       	pop	r14
    5f1c:	df 90       	pop	r13
    5f1e:	cf 90       	pop	r12
    5f20:	bf 90       	pop	r11
    5f22:	7f 90       	pop	r7
    5f24:	6f 90       	pop	r6
    5f26:	5f 90       	pop	r5
    5f28:	4f 90       	pop	r4
    5f2a:	08 95       	ret

00005f2c <spiInit>:
    cbi(DDRB, 4);   // set MISO as input
    sbi(DDRB, 3);   // set MOSI as output
    sbi(DDRB, 2);   // SS must be output for Master mode to work
#else
	// setup SPI I/O pins
	sbi(PORTB, SCK);	// set SCK hi
    5f2c:	c7 9a       	sbi	0x18, 7	; 24
	sbi(PORTB,MISO);	// set pull-up for MISO
    5f2e:	c6 9a       	sbi	0x18, 6	; 24
	sbi(DDRB, SCK);	// set SCK as output
    5f30:	bf 9a       	sbi	0x17, 7	; 23
	cbi(DDRB, MISO);	// set MISO as input
    5f32:	be 98       	cbi	0x17, 6	; 23
	sbi(DDRB, MOSI);	// set MOSI as output
    5f34:	bd 9a       	sbi	0x17, 5	; 23
	sbi(DDRB, CS);	// SS must be output for Master mode to work
    5f36:	bc 9a       	sbi	0x17, 4	; 23
#endif
	
	// setup SPI interface :
	// master mode
	sbi(SPCR, MSTR);
    5f38:	6c 9a       	sbi	0x0d, 4	; 13
	// clock = f/4
//	cbi(SPCR, SPR0);
//	cbi(SPCR, SPR1);
	// clock = f/16
	sbi(SPCR, SPR0);
    5f3a:	68 9a       	sbi	0x0d, 0	; 13
	sbi(SPCR, SPR1);
    5f3c:	69 9a       	sbi	0x0d, 1	; 13
	// select clock phase positive-going in middle of data
	cbi(SPCR, CPOL);
    5f3e:	6b 98       	cbi	0x0d, 3	; 13
	// Data order MSB first
	cbi(SPCR,DORD);
    5f40:	6d 98       	cbi	0x0d, 5	; 13
	// enable SPI
	sbi(SPCR, SPE);
    5f42:	6e 9a       	sbi	0x0d, 6	; 13
	//outp((1<<MSTR)|(1<<SPE)|(1<<SPR0), SPCR );
	//outp((1<<CPHA)|(1<<CPOL)|(1<<MSTR)|(1<<SPE)|(1<<SPR0)|(1<<SPR1), SPCR );
	//outp((1<<CPHA)|(1<<MSTR)|(1<<SPE)|(1<<SPR0), SPCR );
	
	// clear status
	inb(SPSR);
    5f44:	8e b1       	in	r24, 0x0e	; 14
	spiTransferComplete = TRUE;
    5f46:	81 e0       	ldi	r24, 0x01	; 1
    5f48:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <spiTransferComplete>
    5f4c:	08 95       	ret

00005f4e <spiSendByte>:
}
*/
void spiSendByte(u08 data)
{
	// send a byte over SPI and ignore reply
	outb(SPDR, data);
    5f4e:	8f b9       	out	0x0f, r24	; 15
	#ifdef SPI_USEINT
		while(!spiTransferComplete);
		spiTransferComplete = FALSE;
	#else
		while(!(inb(SPSR) & (1<<SPIF)));
    5f50:	77 9b       	sbis	0x0e, 7	; 14
    5f52:	fe cf       	rjmp	.-4      	; 0x5f50 <spiSendByte+0x2>
	#endif

	
}
    5f54:	08 95       	ret

00005f56 <spiTransferByte>:
	outb(SPDR, data);
	// wait for transfer to complete
	while(!spiTransferComplete);
	#else
	// send the given data
	outb(SPDR, data);
    5f56:	8f b9       	out	0x0f, r24	; 15
	// wait for transfer to complete
	while(!(inb(SPSR) & (1<<SPIF)));
    5f58:	77 9b       	sbis	0x0e, 7	; 14
    5f5a:	fe cf       	rjmp	.-4      	; 0x5f58 <spiTransferByte+0x2>
	#endif
	// return the received data
	return inb(SPDR);
    5f5c:	8f b1       	in	r24, 0x0f	; 15
}
    5f5e:	08 95       	ret

00005f60 <SRAM_resetReader>:
		//while(!SPI_Rx_Buf_Full);
		*ReadData++ = ReadSPI();
	}
	SRAMDisable(currentSRAM);
	return ReadCnt;			//Return no# of bytes read from SRAM
}
    5f60:	e6 eb       	ldi	r30, 0xB6	; 182
    5f62:	f1 e0       	ldi	r31, 0x01	; 1
    5f64:	10 82       	st	Z, r1
    5f66:	11 82       	std	Z+1, r1	; 0x01
    5f68:	12 82       	std	Z+2, r1	; 0x02
    5f6a:	13 82       	std	Z+3, r1	; 0x03
    5f6c:	14 82       	std	Z+4, r1	; 0x04
    5f6e:	15 82       	std	Z+5, r1	; 0x05
    5f70:	16 82       	std	Z+6, r1	; 0x06
    5f72:	17 82       	std	Z+7, r1	; 0x07
    5f74:	10 86       	std	Z+8, r1	; 0x08
    5f76:	11 86       	std	Z+9, r1	; 0x09
    5f78:	12 86       	std	Z+10, r1	; 0x0a
    5f7a:	13 86       	std	Z+11, r1	; 0x0b
    5f7c:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <currentSRAM>
    5f80:	08 95       	ret

00005f82 <SRAM_resetWriter>:
    5f82:	e9 ea       	ldi	r30, 0xA9	; 169
    5f84:	f1 e0       	ldi	r31, 0x01	; 1
    5f86:	10 82       	st	Z, r1
    5f88:	11 82       	std	Z+1, r1	; 0x01
    5f8a:	12 82       	std	Z+2, r1	; 0x02
    5f8c:	13 82       	std	Z+3, r1	; 0x03
    5f8e:	14 82       	std	Z+4, r1	; 0x04
    5f90:	15 82       	std	Z+5, r1	; 0x05
    5f92:	16 82       	std	Z+6, r1	; 0x06
    5f94:	17 82       	std	Z+7, r1	; 0x07
    5f96:	10 86       	std	Z+8, r1	; 0x08
    5f98:	11 86       	std	Z+9, r1	; 0x09
    5f9a:	12 86       	std	Z+10, r1	; 0x0a
    5f9c:	13 86       	std	Z+11, r1	; 0x0b
    5f9e:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <currentSRAM>
    5fa2:	08 95       	ret

00005fa4 <incrementReader>:
    5fa4:	09 2e       	mov	r0, r25
    5fa6:	00 0c       	add	r0, r0
    5fa8:	aa 0b       	sbc	r26, r26
    5faa:	bb 0b       	sbc	r27, r27
    5fac:	40 91 be 01 	lds	r20, 0x01BE	; 0x8001be <currentReader+0x8>
    5fb0:	50 91 bf 01 	lds	r21, 0x01BF	; 0x8001bf <currentReader+0x9>
    5fb4:	60 91 c0 01 	lds	r22, 0x01C0	; 0x8001c0 <currentReader+0xa>
    5fb8:	70 91 c1 01 	lds	r23, 0x01C1	; 0x8001c1 <currentReader+0xb>
    5fbc:	84 0f       	add	r24, r20
    5fbe:	95 1f       	adc	r25, r21
    5fc0:	a6 1f       	adc	r26, r22
    5fc2:	b7 1f       	adc	r27, r23
    5fc4:	00 97       	sbiw	r24, 0x00	; 0
    5fc6:	28 e0       	ldi	r18, 0x08	; 8
    5fc8:	a2 07       	cpc	r26, r18
    5fca:	b1 05       	cpc	r27, r1
    5fcc:	48 f4       	brcc	.+18     	; 0x5fe0 <incrementReader+0x3c>
    5fce:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <currentReader+0x8>
    5fd2:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <currentReader+0x9>
    5fd6:	a0 93 c0 01 	sts	0x01C0, r26	; 0x8001c0 <currentReader+0xa>
    5fda:	b0 93 c1 01 	sts	0x01C1, r27	; 0x8001c1 <currentReader+0xb>
    5fde:	0a c0       	rjmp	.+20     	; 0x5ff4 <incrementReader+0x50>
    5fe0:	a7 70       	andi	r26, 0x07	; 7
    5fe2:	bb 27       	eor	r27, r27
    5fe4:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <currentReader+0x8>
    5fe8:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <currentReader+0x9>
    5fec:	a0 93 c0 01 	sts	0x01C0, r26	; 0x8001c0 <currentReader+0xa>
    5ff0:	b0 93 c1 01 	sts	0x01C1, r27	; 0x8001c1 <currentReader+0xb>
    5ff4:	e6 eb       	ldi	r30, 0xB6	; 182
    5ff6:	f1 e0       	ldi	r31, 0x01	; 1
    5ff8:	80 85       	ldd	r24, Z+8	; 0x08
    5ffa:	91 85       	ldd	r25, Z+9	; 0x09
    5ffc:	a2 85       	ldd	r26, Z+10	; 0x0a
    5ffe:	b3 85       	ldd	r27, Z+11	; 0x0b
    6000:	ac 01       	movw	r20, r24
    6002:	bd 01       	movw	r22, r26
    6004:	61 70       	andi	r22, 0x01	; 1
    6006:	77 27       	eor	r23, r23
    6008:	40 83       	st	Z, r20
    600a:	51 83       	std	Z+1, r21	; 0x01
    600c:	62 83       	std	Z+2, r22	; 0x02
    600e:	73 83       	std	Z+3, r23	; 0x03
    6010:	ac 01       	movw	r20, r24
    6012:	bd 01       	movw	r22, r26
    6014:	68 94       	set
    6016:	14 f8       	bld	r1, 4
    6018:	76 95       	lsr	r23
    601a:	67 95       	ror	r22
    601c:	57 95       	ror	r21
    601e:	47 95       	ror	r20
    6020:	16 94       	lsr	r1
    6022:	d1 f7       	brne	.-12     	; 0x6018 <incrementReader+0x74>
    6024:	5f 70       	andi	r21, 0x0F	; 15
    6026:	66 27       	eor	r22, r22
    6028:	77 27       	eor	r23, r23
    602a:	44 83       	std	Z+4, r20	; 0x04
    602c:	55 83       	std	Z+5, r21	; 0x05
    602e:	66 83       	std	Z+6, r22	; 0x06
    6030:	77 83       	std	Z+7, r23	; 0x07
    6032:	07 2e       	mov	r0, r23
    6034:	71 e1       	ldi	r23, 0x11	; 17
    6036:	b6 95       	lsr	r27
    6038:	a7 95       	ror	r26
    603a:	97 95       	ror	r25
    603c:	87 95       	ror	r24
    603e:	7a 95       	dec	r23
    6040:	d1 f7       	brne	.-12     	; 0x6036 <incrementReader+0x92>
    6042:	70 2d       	mov	r23, r0
    6044:	84 87       	std	Z+12, r24	; 0x0c
    6046:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <currentSRAM>
    604a:	08 95       	ret

0000604c <SRAM_seekRead>:
    604c:	cf 93       	push	r28
    604e:	df 93       	push	r29
    6050:	ec 01       	movw	r28, r24
    6052:	61 30       	cpi	r22, 0x01	; 1
    6054:	71 05       	cpc	r23, r1
    6056:	71 f0       	breq	.+28     	; 0x6074 <SRAM_seekRead+0x28>
    6058:	20 f0       	brcs	.+8      	; 0x6062 <SRAM_seekRead+0x16>
    605a:	62 30       	cpi	r22, 0x02	; 2
    605c:	71 05       	cpc	r23, r1
    605e:	39 f0       	breq	.+14     	; 0x606e <SRAM_seekRead+0x22>
    6060:	11 c0       	rjmp	.+34     	; 0x6084 <SRAM_seekRead+0x38>
    6062:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <SRAM_resetReader>
    6066:	ce 01       	movw	r24, r28
    6068:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <incrementReader>
    606c:	0b c0       	rjmp	.+22     	; 0x6084 <SRAM_seekRead+0x38>
    606e:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <incrementReader>
    6072:	08 c0       	rjmp	.+16     	; 0x6084 <SRAM_seekRead+0x38>
    6074:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <SRAM_resetReader>
    6078:	88 27       	eor	r24, r24
    607a:	99 27       	eor	r25, r25
    607c:	8c 1b       	sub	r24, r28
    607e:	9d 0b       	sbc	r25, r29
    6080:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <incrementReader>
    6084:	df 91       	pop	r29
    6086:	cf 91       	pop	r28
    6088:	08 95       	ret

0000608a <incrementWriter>:
    608a:	09 2e       	mov	r0, r25
    608c:	00 0c       	add	r0, r0
    608e:	aa 0b       	sbc	r26, r26
    6090:	bb 0b       	sbc	r27, r27
    6092:	40 91 b1 01 	lds	r20, 0x01B1	; 0x8001b1 <currentWriter+0x8>
    6096:	50 91 b2 01 	lds	r21, 0x01B2	; 0x8001b2 <currentWriter+0x9>
    609a:	60 91 b3 01 	lds	r22, 0x01B3	; 0x8001b3 <currentWriter+0xa>
    609e:	70 91 b4 01 	lds	r23, 0x01B4	; 0x8001b4 <currentWriter+0xb>
    60a2:	84 0f       	add	r24, r20
    60a4:	95 1f       	adc	r25, r21
    60a6:	a6 1f       	adc	r26, r22
    60a8:	b7 1f       	adc	r27, r23
    60aa:	00 97       	sbiw	r24, 0x00	; 0
    60ac:	28 e0       	ldi	r18, 0x08	; 8
    60ae:	a2 07       	cpc	r26, r18
    60b0:	b1 05       	cpc	r27, r1
    60b2:	48 f4       	brcc	.+18     	; 0x60c6 <incrementWriter+0x3c>
    60b4:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <currentWriter+0x8>
    60b8:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <currentWriter+0x9>
    60bc:	a0 93 b3 01 	sts	0x01B3, r26	; 0x8001b3 <currentWriter+0xa>
    60c0:	b0 93 b4 01 	sts	0x01B4, r27	; 0x8001b4 <currentWriter+0xb>
    60c4:	0a c0       	rjmp	.+20     	; 0x60da <incrementWriter+0x50>
    60c6:	a7 70       	andi	r26, 0x07	; 7
    60c8:	bb 27       	eor	r27, r27
    60ca:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <currentWriter+0x8>
    60ce:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <currentWriter+0x9>
    60d2:	a0 93 b3 01 	sts	0x01B3, r26	; 0x8001b3 <currentWriter+0xa>
    60d6:	b0 93 b4 01 	sts	0x01B4, r27	; 0x8001b4 <currentWriter+0xb>
    60da:	e9 ea       	ldi	r30, 0xA9	; 169
    60dc:	f1 e0       	ldi	r31, 0x01	; 1
    60de:	80 85       	ldd	r24, Z+8	; 0x08
    60e0:	91 85       	ldd	r25, Z+9	; 0x09
    60e2:	a2 85       	ldd	r26, Z+10	; 0x0a
    60e4:	b3 85       	ldd	r27, Z+11	; 0x0b
    60e6:	ac 01       	movw	r20, r24
    60e8:	bd 01       	movw	r22, r26
    60ea:	61 70       	andi	r22, 0x01	; 1
    60ec:	77 27       	eor	r23, r23
    60ee:	40 83       	st	Z, r20
    60f0:	51 83       	std	Z+1, r21	; 0x01
    60f2:	62 83       	std	Z+2, r22	; 0x02
    60f4:	73 83       	std	Z+3, r23	; 0x03
    60f6:	ac 01       	movw	r20, r24
    60f8:	bd 01       	movw	r22, r26
    60fa:	68 94       	set
    60fc:	14 f8       	bld	r1, 4
    60fe:	76 95       	lsr	r23
    6100:	67 95       	ror	r22
    6102:	57 95       	ror	r21
    6104:	47 95       	ror	r20
    6106:	16 94       	lsr	r1
    6108:	d1 f7       	brne	.-12     	; 0x60fe <incrementWriter+0x74>
    610a:	5f 70       	andi	r21, 0x0F	; 15
    610c:	66 27       	eor	r22, r22
    610e:	77 27       	eor	r23, r23
    6110:	44 83       	std	Z+4, r20	; 0x04
    6112:	55 83       	std	Z+5, r21	; 0x05
    6114:	66 83       	std	Z+6, r22	; 0x06
    6116:	77 83       	std	Z+7, r23	; 0x07
    6118:	07 2e       	mov	r0, r23
    611a:	71 e1       	ldi	r23, 0x11	; 17
    611c:	b6 95       	lsr	r27
    611e:	a7 95       	ror	r26
    6120:	97 95       	ror	r25
    6122:	87 95       	ror	r24
    6124:	7a 95       	dec	r23
    6126:	d1 f7       	brne	.-12     	; 0x611c <incrementWriter+0x92>
    6128:	70 2d       	mov	r23, r0
    612a:	84 87       	std	Z+12, r24	; 0x0c
    612c:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <currentSRAM>
    6130:	08 95       	ret

00006132 <SRAM_seekWrite>:
    6132:	cf 93       	push	r28
    6134:	df 93       	push	r29
    6136:	ec 01       	movw	r28, r24
    6138:	61 30       	cpi	r22, 0x01	; 1
    613a:	71 05       	cpc	r23, r1
    613c:	71 f0       	breq	.+28     	; 0x615a <SRAM_seekWrite+0x28>
    613e:	20 f0       	brcs	.+8      	; 0x6148 <SRAM_seekWrite+0x16>
    6140:	62 30       	cpi	r22, 0x02	; 2
    6142:	71 05       	cpc	r23, r1
    6144:	39 f0       	breq	.+14     	; 0x6154 <SRAM_seekWrite+0x22>
    6146:	11 c0       	rjmp	.+34     	; 0x616a <SRAM_seekWrite+0x38>
    6148:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <SRAM_resetWriter>
    614c:	ce 01       	movw	r24, r28
    614e:	0e 94 45 30 	call	0x608a	; 0x608a <incrementWriter>
    6152:	0b c0       	rjmp	.+22     	; 0x616a <SRAM_seekWrite+0x38>
    6154:	0e 94 45 30 	call	0x608a	; 0x608a <incrementWriter>
    6158:	08 c0       	rjmp	.+16     	; 0x616a <SRAM_seekWrite+0x38>
    615a:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <SRAM_resetWriter>
    615e:	88 27       	eor	r24, r24
    6160:	99 27       	eor	r25, r25
    6162:	8c 1b       	sub	r24, r28
    6164:	9d 0b       	sbc	r25, r29
    6166:	0e 94 45 30 	call	0x608a	; 0x608a <incrementWriter>
    616a:	df 91       	pop	r29
    616c:	cf 91       	pop	r28
    616e:	08 95       	ret

00006170 <ReadSPI>:
    6170:	8f ef       	ldi	r24, 0xFF	; 255
    6172:	0e 94 ab 2f 	call	0x5f56	; 0x5f56 <spiTransferByte>
    6176:	08 95       	ret

00006178 <SRAMEnable>:
    6178:	90 e0       	ldi	r25, 0x00	; 0
    617a:	fc 01       	movw	r30, r24
    617c:	ee 0f       	add	r30, r30
    617e:	ff 1f       	adc	r31, r31
    6180:	e5 59       	subi	r30, 0x95	; 149
    6182:	ff 4f       	sbci	r31, 0xFF	; 255
    6184:	01 90       	ld	r0, Z+
    6186:	f0 81       	ld	r31, Z
    6188:	e0 2d       	mov	r30, r0
    618a:	40 81       	ld	r20, Z
    618c:	dc 01       	movw	r26, r24
    618e:	a9 59       	subi	r26, 0x99	; 153
    6190:	bf 4f       	sbci	r27, 0xFF	; 255
    6192:	21 e0       	ldi	r18, 0x01	; 1
    6194:	30 e0       	ldi	r19, 0x00	; 0
    6196:	c9 01       	movw	r24, r18
    6198:	0c 90       	ld	r0, X
    619a:	02 c0       	rjmp	.+4      	; 0x61a0 <SRAMEnable+0x28>
    619c:	88 0f       	add	r24, r24
    619e:	99 1f       	adc	r25, r25
    61a0:	0a 94       	dec	r0
    61a2:	e2 f7       	brpl	.-8      	; 0x619c <SRAMEnable+0x24>
    61a4:	80 95       	com	r24
    61a6:	84 23       	and	r24, r20
    61a8:	80 83       	st	Z, r24
    61aa:	08 95       	ret

000061ac <SRAMDisable>:
    61ac:	90 e0       	ldi	r25, 0x00	; 0
    61ae:	fc 01       	movw	r30, r24
    61b0:	ee 0f       	add	r30, r30
    61b2:	ff 1f       	adc	r31, r31
    61b4:	e5 59       	subi	r30, 0x95	; 149
    61b6:	ff 4f       	sbci	r31, 0xFF	; 255
    61b8:	01 90       	ld	r0, Z+
    61ba:	f0 81       	ld	r31, Z
    61bc:	e0 2d       	mov	r30, r0
    61be:	40 81       	ld	r20, Z
    61c0:	dc 01       	movw	r26, r24
    61c2:	a9 59       	subi	r26, 0x99	; 153
    61c4:	bf 4f       	sbci	r27, 0xFF	; 255
    61c6:	21 e0       	ldi	r18, 0x01	; 1
    61c8:	30 e0       	ldi	r19, 0x00	; 0
    61ca:	c9 01       	movw	r24, r18
    61cc:	0c 90       	ld	r0, X
    61ce:	02 c0       	rjmp	.+4      	; 0x61d4 <SRAMDisable+0x28>
    61d0:	88 0f       	add	r24, r24
    61d2:	99 1f       	adc	r25, r25
    61d4:	0a 94       	dec	r0
    61d6:	e2 f7       	brpl	.-8      	; 0x61d0 <SRAMDisable+0x24>
    61d8:	84 2b       	or	r24, r20
    61da:	80 83       	st	Z, r24
    61dc:	08 95       	ret

000061de <InitSRAM>:
    61de:	cf 93       	push	r28
    61e0:	df 93       	push	r29
    61e2:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <currentSRAM>
    61e6:	80 e0       	ldi	r24, 0x00	; 0
    61e8:	c1 e0       	ldi	r28, 0x01	; 1
    61ea:	d0 e0       	ldi	r29, 0x00	; 0
    61ec:	90 e0       	ldi	r25, 0x00	; 0
    61ee:	fc 01       	movw	r30, r24
    61f0:	ee 0f       	add	r30, r30
    61f2:	ff 1f       	adc	r31, r31
    61f4:	ed 58       	subi	r30, 0x8D	; 141
    61f6:	ff 4f       	sbci	r31, 0xFF	; 255
    61f8:	01 90       	ld	r0, Z+
    61fa:	f0 81       	ld	r31, Z
    61fc:	e0 2d       	mov	r30, r0
    61fe:	20 81       	ld	r18, Z
    6200:	dc 01       	movw	r26, r24
    6202:	a9 59       	subi	r26, 0x99	; 153
    6204:	bf 4f       	sbci	r27, 0xFF	; 255
    6206:	ce 01       	movw	r24, r28
    6208:	0c 90       	ld	r0, X
    620a:	02 c0       	rjmp	.+4      	; 0x6210 <InitSRAM+0x32>
    620c:	88 0f       	add	r24, r24
    620e:	99 1f       	adc	r25, r25
    6210:	0a 94       	dec	r0
    6212:	e2 f7       	brpl	.-8      	; 0x620c <InitSRAM+0x2e>
    6214:	82 2b       	or	r24, r18
    6216:	80 83       	st	Z, r24
    6218:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    621c:	0e 94 d6 30 	call	0x61ac	; 0x61ac <SRAMDisable>
    6220:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    6224:	8f 5f       	subi	r24, 0xFF	; 255
    6226:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <currentSRAM>
    622a:	84 30       	cpi	r24, 0x04	; 4
    622c:	f8 f2       	brcs	.-66     	; 0x61ec <InitSRAM+0xe>
    622e:	df 91       	pop	r29
    6230:	cf 91       	pop	r28
    6232:	08 95       	ret

00006234 <SRAMWriteStatusReg>:
    6234:	cf 93       	push	r28
    6236:	c8 2f       	mov	r28, r24
    6238:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    623c:	0e 94 bc 30 	call	0x6178	; 0x6178 <SRAMEnable>
    6240:	81 e0       	ldi	r24, 0x01	; 1
    6242:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <spiSendByte>
    6246:	8c 2f       	mov	r24, r28
    6248:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <spiSendByte>
    624c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    6250:	0e 94 d6 30 	call	0x61ac	; 0x61ac <SRAMDisable>
    6254:	80 e0       	ldi	r24, 0x00	; 0
    6256:	cf 91       	pop	r28
    6258:	08 95       	ret

0000625a <SRAMCommand>:
    625a:	1f 93       	push	r17
    625c:	cf 93       	push	r28
    625e:	df 93       	push	r29
    6260:	c8 2f       	mov	r28, r24
    6262:	d6 2f       	mov	r29, r22
    6264:	14 2f       	mov	r17, r20
    6266:	82 2f       	mov	r24, r18
    6268:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <spiSendByte>
    626c:	81 2f       	mov	r24, r17
    626e:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <spiSendByte>
    6272:	8d 2f       	mov	r24, r29
    6274:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <spiSendByte>
    6278:	8c 2f       	mov	r24, r28
    627a:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <spiSendByte>
    627e:	df 91       	pop	r29
    6280:	cf 91       	pop	r28
    6282:	1f 91       	pop	r17
    6284:	08 95       	ret

00006286 <SRAMWriteSeq>:

uint8_t SRAMWriteSeq(uint8_t AddLB, uint8_t AddMB,uint8_t AddHB, uint8_t *WriteData,uint32_t WriteCnt)
{
    6286:	9f 92       	push	r9
    6288:	af 92       	push	r10
    628a:	bf 92       	push	r11
    628c:	cf 92       	push	r12
    628e:	df 92       	push	r13
    6290:	ef 92       	push	r14
    6292:	ff 92       	push	r15
    6294:	0f 93       	push	r16
    6296:	1f 93       	push	r17
    6298:	cf 93       	push	r28
    629a:	df 93       	push	r29
    629c:	c8 2f       	mov	r28, r24
    629e:	d6 2f       	mov	r29, r22
    62a0:	b4 2e       	mov	r11, r20
    62a2:	92 2e       	mov	r9, r18
    62a4:	a3 2e       	mov	r10, r19
    62a6:	67 01       	movw	r12, r14
    62a8:	78 01       	movw	r14, r16
	SRAMWriteStatusReg(SRAMSeqMode);
    62aa:	80 e4       	ldi	r24, 0x40	; 64
    62ac:	0e 94 1a 31 	call	0x6234	; 0x6234 <SRAMWriteStatusReg>
	//Send Write command to SRAM along with address
	SRAMEnable(currentSRAM);
    62b0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    62b4:	0e 94 bc 30 	call	0x6178	; 0x6178 <SRAMEnable>
	SRAMCommand(AddLB,AddMB,AddHB,CMD_SRAMWrite);
    62b8:	22 e0       	ldi	r18, 0x02	; 2
    62ba:	4b 2d       	mov	r20, r11
    62bc:	6d 2f       	mov	r22, r29
    62be:	8c 2f       	mov	r24, r28
    62c0:	0e 94 2d 31 	call	0x625a	; 0x625a <SRAMCommand>
	//Send Data to be written to SRAM
	for(;WriteCnt > 0;WriteCnt--)
    62c4:	c1 14       	cp	r12, r1
    62c6:	d1 04       	cpc	r13, r1
    62c8:	e1 04       	cpc	r14, r1
    62ca:	f1 04       	cpc	r15, r1
    62cc:	59 f0       	breq	.+22     	; 0x62e4 <SRAMWriteSeq+0x5e>
    62ce:	c9 2d       	mov	r28, r9
    62d0:	da 2d       	mov	r29, r10
uint8_t ReadSPI(){
	return (uint8_t)spiTransferByte(DummyByte);
}

void WriteSPI(uint8_t byte){
	spiSendByte(byte);
    62d2:	89 91       	ld	r24, Y+
    62d4:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <spiSendByte>
	SRAMWriteStatusReg(SRAMSeqMode);
	//Send Write command to SRAM along with address
	SRAMEnable(currentSRAM);
	SRAMCommand(AddLB,AddMB,AddHB,CMD_SRAMWrite);
	//Send Data to be written to SRAM
	for(;WriteCnt > 0;WriteCnt--)
    62d8:	81 e0       	ldi	r24, 0x01	; 1
    62da:	c8 1a       	sub	r12, r24
    62dc:	d1 08       	sbc	r13, r1
    62de:	e1 08       	sbc	r14, r1
    62e0:	f1 08       	sbc	r15, r1
    62e2:	b9 f7       	brne	.-18     	; 0x62d2 <SRAMWriteSeq+0x4c>
	{
		WriteSPI(*WriteData++);
		//while(!SPI_Rx_Buf_Full);
		//DummyRead =ReadSPI();
	}
	SRAMDisable(currentSRAM);
    62e4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    62e8:	0e 94 d6 30 	call	0x61ac	; 0x61ac <SRAMDisable>
	return 0;			//Return non -ve nuber indicating success
}
    62ec:	80 e0       	ldi	r24, 0x00	; 0
    62ee:	df 91       	pop	r29
    62f0:	cf 91       	pop	r28
    62f2:	1f 91       	pop	r17
    62f4:	0f 91       	pop	r16
    62f6:	ff 90       	pop	r15
    62f8:	ef 90       	pop	r14
    62fa:	df 90       	pop	r13
    62fc:	cf 90       	pop	r12
    62fe:	bf 90       	pop	r11
    6300:	af 90       	pop	r10
    6302:	9f 90       	pop	r9
    6304:	08 95       	ret

00006306 <writeSRAM>:
	currentWriter.currentPage.value = (currentWriter.totalBytes.value / SRAMPageSize) % SRAMPageCount;
	currentWriter.currentSram = currentWriter.totalBytes.value / SRAMChipSize;
	currentSRAM = currentWriter.currentSram;
}

void writeSRAM(unsigned char *buf,unsigned int size){
    6306:	af 92       	push	r10
    6308:	bf 92       	push	r11
    630a:	cf 92       	push	r12
    630c:	df 92       	push	r13
    630e:	ef 92       	push	r14
    6310:	ff 92       	push	r15
    6312:	0f 93       	push	r16
    6314:	1f 93       	push	r17
    6316:	cf 93       	push	r28
    6318:	df 93       	push	r29
	unsigned int unaligned = currentWriter.currentByte.value % SRAMPageSize; // byte between start and end of page
    631a:	40 91 a9 01 	lds	r20, 0x01A9	; 0x8001a9 <currentWriter>
    631e:	50 91 aa 01 	lds	r21, 0x01AA	; 0x8001aa <currentWriter+0x1>
    6322:	4f 71       	andi	r20, 0x1F	; 31
    6324:	55 27       	eor	r21, r21
	unsigned int remainder = (unaligned > 0?(SRAMPageSize - unaligned):0); // bytes remaining to end of page
    6326:	41 15       	cp	r20, r1
    6328:	51 05       	cpc	r21, r1
    632a:	31 f0       	breq	.+12     	; 0x6338 <writeSRAM+0x32>
    632c:	20 e2       	ldi	r18, 0x20	; 32
    632e:	30 e0       	ldi	r19, 0x00	; 0
    6330:	59 01       	movw	r10, r18
    6332:	a4 1a       	sub	r10, r20
    6334:	b5 0a       	sbc	r11, r21
    6336:	02 c0       	rjmp	.+4      	; 0x633c <writeSRAM+0x36>
    6338:	a1 2c       	mov	r10, r1
    633a:	b1 2c       	mov	r11, r1
	if(size == 0)
    633c:	61 15       	cp	r22, r1
    633e:	71 05       	cpc	r23, r1
    6340:	09 f4       	brne	.+2      	; 0x6344 <writeSRAM+0x3e>
    6342:	70 c0       	rjmp	.+224    	; 0x6424 <writeSRAM+0x11e>
    6344:	6b 01       	movw	r12, r22
    6346:	ec 01       	movw	r28, r24
		return;

	if(size >= SRAMPageSize){
    6348:	60 32       	cpi	r22, 0x20	; 32
    634a:	71 05       	cpc	r23, r1
    634c:	90 f1       	brcs	.+100    	; 0x63b2 <writeSRAM+0xac>
		if(unaligned == 0){
    634e:	45 2b       	or	r20, r21
    6350:	c9 f4       	brne	.+50     	; 0x6384 <writeSRAM+0x7e>
			// write page only, pass remaining size to next call
			SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,SRAMPageSize);
    6352:	e9 ea       	ldi	r30, 0xA9	; 169
    6354:	f1 e0       	ldi	r31, 0x01	; 1
    6356:	10 e2       	ldi	r17, 0x20	; 32
    6358:	e1 2e       	mov	r14, r17
    635a:	f1 2c       	mov	r15, r1
    635c:	00 e0       	ldi	r16, 0x00	; 0
    635e:	10 e0       	ldi	r17, 0x00	; 0
    6360:	9e 01       	movw	r18, r28
    6362:	42 81       	ldd	r20, Z+2	; 0x02
    6364:	61 81       	ldd	r22, Z+1	; 0x01
    6366:	80 81       	ld	r24, Z
    6368:	0e 94 43 31 	call	0x6286	; 0x6286 <SRAMWriteSeq>
			incrementWriter(SRAMPageSize);
    636c:	80 e2       	ldi	r24, 0x20	; 32
    636e:	90 e0       	ldi	r25, 0x00	; 0
    6370:	0e 94 45 30 	call	0x608a	; 0x608a <incrementWriter>
			writeSRAM(buf + SRAMPageSize,size - SRAMPageSize);
    6374:	b6 01       	movw	r22, r12
    6376:	60 52       	subi	r22, 0x20	; 32
    6378:	71 09       	sbc	r23, r1
    637a:	ce 01       	movw	r24, r28
    637c:	80 96       	adiw	r24, 0x20	; 32
    637e:	0e 94 83 31 	call	0x6306	; 0x6306 <writeSRAM>
    6382:	50 c0       	rjmp	.+160    	; 0x6424 <writeSRAM+0x11e>
		}
		else{
			// write remainder, pass remaining size to next call
			SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,remainder);
    6384:	75 01       	movw	r14, r10
    6386:	00 e0       	ldi	r16, 0x00	; 0
    6388:	10 e0       	ldi	r17, 0x00	; 0
    638a:	e9 ea       	ldi	r30, 0xA9	; 169
    638c:	f1 e0       	ldi	r31, 0x01	; 1
    638e:	9e 01       	movw	r18, r28
    6390:	42 81       	ldd	r20, Z+2	; 0x02
    6392:	61 81       	ldd	r22, Z+1	; 0x01
    6394:	80 81       	ld	r24, Z
    6396:	0e 94 43 31 	call	0x6286	; 0x6286 <SRAMWriteSeq>
			incrementWriter(remainder);
    639a:	c5 01       	movw	r24, r10
    639c:	0e 94 45 30 	call	0x608a	; 0x608a <incrementWriter>
			writeSRAM(buf + remainder,size - remainder);
    63a0:	b6 01       	movw	r22, r12
    63a2:	6a 19       	sub	r22, r10
    63a4:	7b 09       	sbc	r23, r11
    63a6:	ce 01       	movw	r24, r28
    63a8:	8a 0d       	add	r24, r10
    63aa:	9b 1d       	adc	r25, r11
    63ac:	0e 94 83 31 	call	0x6306	; 0x6306 <writeSRAM>
    63b0:	39 c0       	rjmp	.+114    	; 0x6424 <writeSRAM+0x11e>


	}
	else{

		if(unaligned > 0){
    63b2:	45 2b       	or	r20, r21
    63b4:	49 f1       	breq	.+82     	; 0x6408 <writeSRAM+0x102>
			if(size > remainder){
    63b6:	a6 16       	cp	r10, r22
    63b8:	b7 06       	cpc	r11, r23
    63ba:	b8 f4       	brcc	.+46     	; 0x63ea <writeSRAM+0xe4>
				size -= remainder;
    63bc:	ca 18       	sub	r12, r10
    63be:	db 08       	sbc	r13, r11
				SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,remainder);
    63c0:	75 01       	movw	r14, r10
    63c2:	00 e0       	ldi	r16, 0x00	; 0
    63c4:	10 e0       	ldi	r17, 0x00	; 0
    63c6:	e9 ea       	ldi	r30, 0xA9	; 169
    63c8:	f1 e0       	ldi	r31, 0x01	; 1
    63ca:	9e 01       	movw	r18, r28
    63cc:	42 81       	ldd	r20, Z+2	; 0x02
    63ce:	61 81       	ldd	r22, Z+1	; 0x01
    63d0:	80 81       	ld	r24, Z
    63d2:	0e 94 43 31 	call	0x6286	; 0x6286 <SRAMWriteSeq>
				incrementWriter(remainder);
    63d6:	c5 01       	movw	r24, r10
    63d8:	0e 94 45 30 	call	0x608a	; 0x608a <incrementWriter>
				writeSRAM(buf + remainder,size);
    63dc:	b6 01       	movw	r22, r12
    63de:	ce 01       	movw	r24, r28
    63e0:	8a 0d       	add	r24, r10
    63e2:	9b 1d       	adc	r25, r11
    63e4:	0e 94 83 31 	call	0x6306	; 0x6306 <writeSRAM>
    63e8:	1d c0       	rjmp	.+58     	; 0x6424 <writeSRAM+0x11e>
			}
			else{
				SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,size);
    63ea:	7b 01       	movw	r14, r22
    63ec:	00 e0       	ldi	r16, 0x00	; 0
    63ee:	10 e0       	ldi	r17, 0x00	; 0
    63f0:	e9 ea       	ldi	r30, 0xA9	; 169
    63f2:	f1 e0       	ldi	r31, 0x01	; 1
    63f4:	9e 01       	movw	r18, r28
    63f6:	42 81       	ldd	r20, Z+2	; 0x02
    63f8:	61 81       	ldd	r22, Z+1	; 0x01
    63fa:	80 81       	ld	r24, Z
    63fc:	0e 94 43 31 	call	0x6286	; 0x6286 <SRAMWriteSeq>
				incrementWriter(size);
    6400:	c6 01       	movw	r24, r12
    6402:	0e 94 45 30 	call	0x608a	; 0x608a <incrementWriter>
    6406:	0e c0       	rjmp	.+28     	; 0x6424 <writeSRAM+0x11e>
			}

		}
		else{
			SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,size);
    6408:	7b 01       	movw	r14, r22
    640a:	00 e0       	ldi	r16, 0x00	; 0
    640c:	10 e0       	ldi	r17, 0x00	; 0
    640e:	e9 ea       	ldi	r30, 0xA9	; 169
    6410:	f1 e0       	ldi	r31, 0x01	; 1
    6412:	9e 01       	movw	r18, r28
    6414:	42 81       	ldd	r20, Z+2	; 0x02
    6416:	61 81       	ldd	r22, Z+1	; 0x01
    6418:	80 81       	ld	r24, Z
    641a:	0e 94 43 31 	call	0x6286	; 0x6286 <SRAMWriteSeq>
			incrementWriter(size);
    641e:	c6 01       	movw	r24, r12
    6420:	0e 94 45 30 	call	0x608a	; 0x608a <incrementWriter>
		}
	}
}
    6424:	df 91       	pop	r29
    6426:	cf 91       	pop	r28
    6428:	1f 91       	pop	r17
    642a:	0f 91       	pop	r16
    642c:	ff 90       	pop	r15
    642e:	ef 90       	pop	r14
    6430:	df 90       	pop	r13
    6432:	cf 90       	pop	r12
    6434:	bf 90       	pop	r11
    6436:	af 90       	pop	r10
    6438:	08 95       	ret

0000643a <SRAMReadSeq>:
	SRAMDisable(currentSRAM);
	return 0;			//Return non -ve nuber indicating success
}

uint8_t SRAMReadSeq(uint8_t AddLB, uint8_t AddMB,uint8_t AddHB, uint8_t *ReadData,uint32_t ReadCnt)
{
    643a:	9f 92       	push	r9
    643c:	af 92       	push	r10
    643e:	bf 92       	push	r11
    6440:	cf 92       	push	r12
    6442:	df 92       	push	r13
    6444:	ef 92       	push	r14
    6446:	ff 92       	push	r15
    6448:	0f 93       	push	r16
    644a:	1f 93       	push	r17
    644c:	cf 93       	push	r28
    644e:	df 93       	push	r29
    6450:	c8 2f       	mov	r28, r24
    6452:	d6 2f       	mov	r29, r22
    6454:	b4 2e       	mov	r11, r20
    6456:	92 2e       	mov	r9, r18
    6458:	a3 2e       	mov	r10, r19
    645a:	67 01       	movw	r12, r14
    645c:	78 01       	movw	r14, r16
	SRAMWriteStatusReg(SRAMSeqMode);
    645e:	80 e4       	ldi	r24, 0x40	; 64
    6460:	0e 94 1a 31 	call	0x6234	; 0x6234 <SRAMWriteStatusReg>
	//Send Read command to SRAM along with address
	SRAMEnable(currentSRAM);
    6464:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    6468:	0e 94 bc 30 	call	0x6178	; 0x6178 <SRAMEnable>
	SRAMCommand(AddLB,AddMB,AddHB,CMD_SRAMRead);
    646c:	23 e0       	ldi	r18, 0x03	; 3
    646e:	4b 2d       	mov	r20, r11
    6470:	6d 2f       	mov	r22, r29
    6472:	8c 2f       	mov	r24, r28
    6474:	0e 94 2d 31 	call	0x625a	; 0x625a <SRAMCommand>
	//Send dummy data so SRAM can put desired Data read from SRAM
	for(; ReadCnt > 0; ReadCnt--)
    6478:	c1 14       	cp	r12, r1
    647a:	d1 04       	cpc	r13, r1
    647c:	e1 04       	cpc	r14, r1
    647e:	f1 04       	cpc	r15, r1
    6480:	59 f0       	breq	.+22     	; 0x6498 <SRAMReadSeq+0x5e>
    6482:	c9 2d       	mov	r28, r9
    6484:	da 2d       	mov	r29, r10
	{
		//while(!SPI_Rx_Buf_Full);
		*ReadData++ = ReadSPI();
    6486:	0e 94 b8 30 	call	0x6170	; 0x6170 <ReadSPI>
    648a:	89 93       	st	Y+, r24
	SRAMWriteStatusReg(SRAMSeqMode);
	//Send Read command to SRAM along with address
	SRAMEnable(currentSRAM);
	SRAMCommand(AddLB,AddMB,AddHB,CMD_SRAMRead);
	//Send dummy data so SRAM can put desired Data read from SRAM
	for(; ReadCnt > 0; ReadCnt--)
    648c:	81 e0       	ldi	r24, 0x01	; 1
    648e:	c8 1a       	sub	r12, r24
    6490:	d1 08       	sbc	r13, r1
    6492:	e1 08       	sbc	r14, r1
    6494:	f1 08       	sbc	r15, r1
    6496:	b9 f7       	brne	.-18     	; 0x6486 <SRAMReadSeq+0x4c>
	{
		//while(!SPI_Rx_Buf_Full);
		*ReadData++ = ReadSPI();
	}
	SRAMDisable(currentSRAM);
    6498:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    649c:	0e 94 d6 30 	call	0x61ac	; 0x61ac <SRAMDisable>
	return 0;			//Return non -ve nuber indicating success
}
    64a0:	80 e0       	ldi	r24, 0x00	; 0
    64a2:	df 91       	pop	r29
    64a4:	cf 91       	pop	r28
    64a6:	1f 91       	pop	r17
    64a8:	0f 91       	pop	r16
    64aa:	ff 90       	pop	r15
    64ac:	ef 90       	pop	r14
    64ae:	df 90       	pop	r13
    64b0:	cf 90       	pop	r12
    64b2:	bf 90       	pop	r11
    64b4:	af 90       	pop	r10
    64b6:	9f 90       	pop	r9
    64b8:	08 95       	ret

000064ba <readSRAM>:
		}
	}
}


void readSRAM(unsigned char *buf,unsigned int size){
    64ba:	af 92       	push	r10
    64bc:	bf 92       	push	r11
    64be:	cf 92       	push	r12
    64c0:	df 92       	push	r13
    64c2:	ef 92       	push	r14
    64c4:	ff 92       	push	r15
    64c6:	0f 93       	push	r16
    64c8:	1f 93       	push	r17
    64ca:	cf 93       	push	r28
    64cc:	df 93       	push	r29
	unsigned int unaligned = currentReader.currentByte.value % SRAMPageSize; // byte between start and end of page
    64ce:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <currentReader>
    64d2:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <currentReader+0x1>
    64d6:	4f 71       	andi	r20, 0x1F	; 31
    64d8:	55 27       	eor	r21, r21
	unsigned int remainder = (unaligned > 0?(SRAMPageSize - unaligned):0); // bytes remaining to end of page
    64da:	41 15       	cp	r20, r1
    64dc:	51 05       	cpc	r21, r1
    64de:	31 f0       	breq	.+12     	; 0x64ec <readSRAM+0x32>
    64e0:	20 e2       	ldi	r18, 0x20	; 32
    64e2:	30 e0       	ldi	r19, 0x00	; 0
    64e4:	59 01       	movw	r10, r18
    64e6:	a4 1a       	sub	r10, r20
    64e8:	b5 0a       	sbc	r11, r21
    64ea:	02 c0       	rjmp	.+4      	; 0x64f0 <readSRAM+0x36>
    64ec:	a1 2c       	mov	r10, r1
    64ee:	b1 2c       	mov	r11, r1

	if(size == 0)
    64f0:	61 15       	cp	r22, r1
    64f2:	71 05       	cpc	r23, r1
    64f4:	09 f4       	brne	.+2      	; 0x64f8 <readSRAM+0x3e>
    64f6:	70 c0       	rjmp	.+224    	; 0x65d8 <readSRAM+0x11e>
    64f8:	6b 01       	movw	r12, r22
    64fa:	ec 01       	movw	r28, r24
		return;

	if(size >= SRAMPageSize){
    64fc:	60 32       	cpi	r22, 0x20	; 32
    64fe:	71 05       	cpc	r23, r1
    6500:	90 f1       	brcs	.+100    	; 0x6566 <readSRAM+0xac>
		if(unaligned == 0){
    6502:	45 2b       	or	r20, r21
    6504:	c9 f4       	brne	.+50     	; 0x6538 <readSRAM+0x7e>
			// read page only, pass remaining size to next call
			SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,SRAMPageSize);
    6506:	e6 eb       	ldi	r30, 0xB6	; 182
    6508:	f1 e0       	ldi	r31, 0x01	; 1
    650a:	10 e2       	ldi	r17, 0x20	; 32
    650c:	e1 2e       	mov	r14, r17
    650e:	f1 2c       	mov	r15, r1
    6510:	00 e0       	ldi	r16, 0x00	; 0
    6512:	10 e0       	ldi	r17, 0x00	; 0
    6514:	9e 01       	movw	r18, r28
    6516:	42 81       	ldd	r20, Z+2	; 0x02
    6518:	61 81       	ldd	r22, Z+1	; 0x01
    651a:	80 81       	ld	r24, Z
    651c:	0e 94 1d 32 	call	0x643a	; 0x643a <SRAMReadSeq>
			incrementReader(SRAMPageSize);
    6520:	80 e2       	ldi	r24, 0x20	; 32
    6522:	90 e0       	ldi	r25, 0x00	; 0
    6524:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <incrementReader>
			readSRAM(buf + SRAMPageSize,size - SRAMPageSize);
    6528:	b6 01       	movw	r22, r12
    652a:	60 52       	subi	r22, 0x20	; 32
    652c:	71 09       	sbc	r23, r1
    652e:	ce 01       	movw	r24, r28
    6530:	80 96       	adiw	r24, 0x20	; 32
    6532:	0e 94 5d 32 	call	0x64ba	; 0x64ba <readSRAM>
    6536:	50 c0       	rjmp	.+160    	; 0x65d8 <readSRAM+0x11e>
		}
		else{
			// read remainder, pass remaining size to next call
			SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,remainder);
    6538:	75 01       	movw	r14, r10
    653a:	00 e0       	ldi	r16, 0x00	; 0
    653c:	10 e0       	ldi	r17, 0x00	; 0
    653e:	e6 eb       	ldi	r30, 0xB6	; 182
    6540:	f1 e0       	ldi	r31, 0x01	; 1
    6542:	9e 01       	movw	r18, r28
    6544:	42 81       	ldd	r20, Z+2	; 0x02
    6546:	61 81       	ldd	r22, Z+1	; 0x01
    6548:	80 81       	ld	r24, Z
    654a:	0e 94 1d 32 	call	0x643a	; 0x643a <SRAMReadSeq>
			incrementReader(remainder);
    654e:	c5 01       	movw	r24, r10
    6550:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <incrementReader>
			readSRAM(buf + remainder,size - remainder);
    6554:	b6 01       	movw	r22, r12
    6556:	6a 19       	sub	r22, r10
    6558:	7b 09       	sbc	r23, r11
    655a:	ce 01       	movw	r24, r28
    655c:	8a 0d       	add	r24, r10
    655e:	9b 1d       	adc	r25, r11
    6560:	0e 94 5d 32 	call	0x64ba	; 0x64ba <readSRAM>
    6564:	39 c0       	rjmp	.+114    	; 0x65d8 <readSRAM+0x11e>


	}
	else{

		if(unaligned > 0){
    6566:	45 2b       	or	r20, r21
    6568:	49 f1       	breq	.+82     	; 0x65bc <readSRAM+0x102>
			if(size > remainder){
    656a:	a6 16       	cp	r10, r22
    656c:	b7 06       	cpc	r11, r23
    656e:	b8 f4       	brcc	.+46     	; 0x659e <readSRAM+0xe4>
				size -= remainder;
    6570:	ca 18       	sub	r12, r10
    6572:	db 08       	sbc	r13, r11
				SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,remainder);
    6574:	75 01       	movw	r14, r10
    6576:	00 e0       	ldi	r16, 0x00	; 0
    6578:	10 e0       	ldi	r17, 0x00	; 0
    657a:	e6 eb       	ldi	r30, 0xB6	; 182
    657c:	f1 e0       	ldi	r31, 0x01	; 1
    657e:	9e 01       	movw	r18, r28
    6580:	42 81       	ldd	r20, Z+2	; 0x02
    6582:	61 81       	ldd	r22, Z+1	; 0x01
    6584:	80 81       	ld	r24, Z
    6586:	0e 94 1d 32 	call	0x643a	; 0x643a <SRAMReadSeq>
				incrementReader(remainder);
    658a:	c5 01       	movw	r24, r10
    658c:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <incrementReader>
				readSRAM(buf + remainder,size);
    6590:	b6 01       	movw	r22, r12
    6592:	ce 01       	movw	r24, r28
    6594:	8a 0d       	add	r24, r10
    6596:	9b 1d       	adc	r25, r11
    6598:	0e 94 5d 32 	call	0x64ba	; 0x64ba <readSRAM>
    659c:	1d c0       	rjmp	.+58     	; 0x65d8 <readSRAM+0x11e>
			}
			else{
				SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,size);
    659e:	7b 01       	movw	r14, r22
    65a0:	00 e0       	ldi	r16, 0x00	; 0
    65a2:	10 e0       	ldi	r17, 0x00	; 0
    65a4:	e6 eb       	ldi	r30, 0xB6	; 182
    65a6:	f1 e0       	ldi	r31, 0x01	; 1
    65a8:	9e 01       	movw	r18, r28
    65aa:	42 81       	ldd	r20, Z+2	; 0x02
    65ac:	61 81       	ldd	r22, Z+1	; 0x01
    65ae:	80 81       	ld	r24, Z
    65b0:	0e 94 1d 32 	call	0x643a	; 0x643a <SRAMReadSeq>
				incrementReader(size);
    65b4:	c6 01       	movw	r24, r12
    65b6:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <incrementReader>
    65ba:	0e c0       	rjmp	.+28     	; 0x65d8 <readSRAM+0x11e>
			}

		}
		else{
			SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,size);
    65bc:	7b 01       	movw	r14, r22
    65be:	00 e0       	ldi	r16, 0x00	; 0
    65c0:	10 e0       	ldi	r17, 0x00	; 0
    65c2:	e6 eb       	ldi	r30, 0xB6	; 182
    65c4:	f1 e0       	ldi	r31, 0x01	; 1
    65c6:	9e 01       	movw	r18, r28
    65c8:	42 81       	ldd	r20, Z+2	; 0x02
    65ca:	61 81       	ldd	r22, Z+1	; 0x01
    65cc:	80 81       	ld	r24, Z
    65ce:	0e 94 1d 32 	call	0x643a	; 0x643a <SRAMReadSeq>
			incrementReader(size);
    65d2:	c6 01       	movw	r24, r12
    65d4:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <incrementReader>
		}
	}


}
    65d8:	df 91       	pop	r29
    65da:	cf 91       	pop	r28
    65dc:	1f 91       	pop	r17
    65de:	0f 91       	pop	r16
    65e0:	ff 90       	pop	r15
    65e2:	ef 90       	pop	r14
    65e4:	df 90       	pop	r13
    65e6:	cf 90       	pop	r12
    65e8:	bf 90       	pop	r11
    65ea:	af 90       	pop	r10
    65ec:	08 95       	ret

000065ee <delay_us>:
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1BH);		// set the high 8bits of OCR1B
	//outp( (pwmDuty&0x00FF), OCR1BL);	// set the low 8bits of OCR1B
	OCR1B = pwmDuty;
    65ee:	9c 01       	movw	r18, r24
    65f0:	2d 5f       	subi	r18, 0xFD	; 253
    65f2:	3f 4f       	sbci	r19, 0xFF	; 255
    65f4:	ad ec       	ldi	r26, 0xCD	; 205
    65f6:	bc ec       	ldi	r27, 0xCC	; 204
    65f8:	0e 94 5f 38 	call	0x70be	; 0x70be <__umulhisi3>
    65fc:	96 95       	lsr	r25
    65fe:	87 95       	ror	r24
    6600:	96 95       	lsr	r25
    6602:	87 95       	ror	r24
    6604:	82 95       	swap	r24
    6606:	92 95       	swap	r25
    6608:	90 7f       	andi	r25, 0xF0	; 240
    660a:	98 27       	eor	r25, r24
    660c:	80 7f       	andi	r24, 0xF0	; 240
    660e:	98 27       	eor	r25, r24
    6610:	00 97       	sbiw	r24, 0x00	; 0
    6612:	39 f0       	breq	.+14     	; 0x6622 <delay_us+0x34>
    6614:	20 e0       	ldi	r18, 0x00	; 0
    6616:	30 e0       	ldi	r19, 0x00	; 0
    6618:	2f 5f       	subi	r18, 0xFF	; 255
    661a:	3f 4f       	sbci	r19, 0xFF	; 255
    661c:	82 17       	cp	r24, r18
    661e:	93 07       	cpc	r25, r19
    6620:	d9 f7       	brne	.-10     	; 0x6618 <delay_us+0x2a>
    6622:	08 95       	ret

00006624 <timer0GetPrescaler>:
    6624:	e3 b7       	in	r30, 0x33	; 51
    6626:	e7 70       	andi	r30, 0x07	; 7
    6628:	f0 e0       	ldi	r31, 0x00	; 0
    662a:	ee 0f       	add	r30, r30
    662c:	ff 1f       	adc	r31, r31
    662e:	e2 5f       	subi	r30, 0xF2	; 242
    6630:	fc 4f       	sbci	r31, 0xFC	; 252
    6632:	85 91       	lpm	r24, Z+
    6634:	94 91       	lpm	r25, Z
    6636:	08 95       	ret

00006638 <timerAttach>:
    6638:	88 30       	cpi	r24, 0x08	; 8
    663a:	40 f4       	brcc	.+16     	; 0x664c <timerAttach+0x14>
    663c:	e8 2f       	mov	r30, r24
    663e:	f0 e0       	ldi	r31, 0x00	; 0
    6640:	ee 0f       	add	r30, r30
    6642:	ff 1f       	adc	r31, r31
    6644:	ec 53       	subi	r30, 0x3C	; 60
    6646:	fe 4f       	sbci	r31, 0xFE	; 254
    6648:	71 83       	std	Z+1, r23	; 0x01
    664a:	60 83       	st	Z, r22
    664c:	08 95       	ret

0000664e <timerPause>:
    664e:	0f 93       	push	r16
    6650:	1f 93       	push	r17
    6652:	cf 93       	push	r28
    6654:	8c 01       	movw	r16, r24
    6656:	c2 b7       	in	r28, 0x32	; 50
    6658:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <TimerPauseReg>
    665c:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <TimerPauseReg+0x1>
    6660:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <TimerPauseReg+0x2>
    6664:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <TimerPauseReg+0x3>
    6668:	0e 94 12 33 	call	0x6624	; 0x6624 <timer0GetPrescaler>
    666c:	9c 01       	movw	r18, r24
    666e:	40 e0       	ldi	r20, 0x00	; 0
    6670:	50 e0       	ldi	r21, 0x00	; 0
    6672:	60 e0       	ldi	r22, 0x00	; 0
    6674:	74 e2       	ldi	r23, 0x24	; 36
    6676:	84 ef       	ldi	r24, 0xF4	; 244
    6678:	90 e0       	ldi	r25, 0x00	; 0
    667a:	0e 94 18 38 	call	0x7030	; 0x7030 <__udivmodsi4>
    667e:	62 2f       	mov	r22, r18
    6680:	73 2f       	mov	r23, r19
    6682:	84 2f       	mov	r24, r20
    6684:	95 2f       	mov	r25, r21
    6686:	69 3b       	cpi	r22, 0xB9	; 185
    6688:	ed e8       	ldi	r30, 0x8D	; 141
    668a:	7e 07       	cpc	r23, r30
    668c:	e6 e0       	ldi	r30, 0x06	; 6
    668e:	8e 07       	cpc	r24, r30
    6690:	91 05       	cpc	r25, r1
    6692:	48 f5       	brcc	.+82     	; 0x66e6 <timerPause+0x98>
    6694:	01 31       	cpi	r16, 0x11	; 17
    6696:	e7 e2       	ldi	r30, 0x27	; 39
    6698:	1e 07       	cpc	r17, r30
    669a:	28 f5       	brcc	.+74     	; 0x66e6 <timerPause+0x98>
    669c:	d8 01       	movw	r26, r16
    669e:	0e 94 6e 38 	call	0x70dc	; 0x70dc <__muluhisi3>
    66a2:	28 ee       	ldi	r18, 0xE8	; 232
    66a4:	33 e0       	ldi	r19, 0x03	; 3
    66a6:	40 e0       	ldi	r20, 0x00	; 0
    66a8:	50 e0       	ldi	r21, 0x00	; 0
    66aa:	0e 94 18 38 	call	0x7030	; 0x7030 <__udivmodsi4>
    66ae:	ca 01       	movw	r24, r20
    66b0:	b9 01       	movw	r22, r18
    66b2:	00 91 9e 04 	lds	r16, 0x049E	; 0x80049e <TimerPauseReg>
    66b6:	10 91 9f 04 	lds	r17, 0x049F	; 0x80049f <TimerPauseReg+0x1>
    66ba:	20 91 a0 04 	lds	r18, 0x04A0	; 0x8004a0 <TimerPauseReg+0x2>
    66be:	30 91 a1 04 	lds	r19, 0x04A1	; 0x8004a1 <TimerPauseReg+0x3>
    66c2:	e2 b7       	in	r30, 0x32	; 50
    66c4:	ab 01       	movw	r20, r22
    66c6:	bc 01       	movw	r22, r24
    66c8:	4c 0f       	add	r20, r28
    66ca:	51 1d       	adc	r21, r1
    66cc:	61 1d       	adc	r22, r1
    66ce:	71 1d       	adc	r23, r1
    66d0:	b2 2f       	mov	r27, r18
    66d2:	a1 2f       	mov	r26, r17
    66d4:	90 2f       	mov	r25, r16
    66d6:	88 27       	eor	r24, r24
    66d8:	8e 2b       	or	r24, r30
    66da:	84 17       	cp	r24, r20
    66dc:	95 07       	cpc	r25, r21
    66de:	a6 07       	cpc	r26, r22
    66e0:	b7 07       	cpc	r27, r23
    66e2:	58 f0       	brcs	.+22     	; 0x66fa <timerPause+0xac>
    66e4:	2f c0       	rjmp	.+94     	; 0x6744 <timerPause+0xf6>
    66e6:	28 ee       	ldi	r18, 0xE8	; 232
    66e8:	33 e0       	ldi	r19, 0x03	; 3
    66ea:	40 e0       	ldi	r20, 0x00	; 0
    66ec:	50 e0       	ldi	r21, 0x00	; 0
    66ee:	0e 94 18 38 	call	0x7030	; 0x7030 <__udivmodsi4>
    66f2:	d8 01       	movw	r26, r16
    66f4:	0e 94 6e 38 	call	0x70dc	; 0x70dc <__muluhisi3>
    66f8:	dc cf       	rjmp	.-72     	; 0x66b2 <timerPause+0x64>
    66fa:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <TimerPauseReg>
    66fe:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <TimerPauseReg+0x1>
    6702:	a0 91 a0 04 	lds	r26, 0x04A0	; 0x8004a0 <TimerPauseReg+0x2>
    6706:	b0 91 a1 04 	lds	r27, 0x04A1	; 0x8004a1 <TimerPauseReg+0x3>
    670a:	85 b7       	in	r24, 0x35	; 53
    670c:	8f 78       	andi	r24, 0x8F	; 143
    670e:	85 bf       	out	0x35, r24	; 53
    6710:	85 b7       	in	r24, 0x35	; 53
    6712:	80 68       	ori	r24, 0x80	; 128
    6714:	85 bf       	out	0x35, r24	; 53
    6716:	88 95       	sleep
    6718:	85 b7       	in	r24, 0x35	; 53
    671a:	8f 77       	andi	r24, 0x7F	; 127
    671c:	85 bf       	out	0x35, r24	; 53
    671e:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <TimerPauseReg>
    6722:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <TimerPauseReg+0x1>
    6726:	a0 91 a0 04 	lds	r26, 0x04A0	; 0x8004a0 <TimerPauseReg+0x2>
    672a:	b0 91 a1 04 	lds	r27, 0x04A1	; 0x8004a1 <TimerPauseReg+0x3>
    672e:	32 b7       	in	r19, 0x32	; 50
    6730:	ba 2f       	mov	r27, r26
    6732:	a9 2f       	mov	r26, r25
    6734:	98 2f       	mov	r25, r24
    6736:	88 27       	eor	r24, r24
    6738:	83 2b       	or	r24, r19
    673a:	84 17       	cp	r24, r20
    673c:	95 07       	cpc	r25, r21
    673e:	a6 07       	cpc	r26, r22
    6740:	b7 07       	cpc	r27, r23
    6742:	d8 f2       	brcs	.-74     	; 0x66fa <timerPause+0xac>
    6744:	cf 91       	pop	r28
    6746:	1f 91       	pop	r17
    6748:	0f 91       	pop	r16
    674a:	08 95       	ret

0000674c <__vector_11>:
}

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect)
{
    674c:	1f 92       	push	r1
    674e:	0f 92       	push	r0
    6750:	0f b6       	in	r0, 0x3f	; 63
    6752:	0f 92       	push	r0
    6754:	11 24       	eor	r1, r1
    6756:	2f 93       	push	r18
    6758:	3f 93       	push	r19
    675a:	4f 93       	push	r20
    675c:	5f 93       	push	r21
    675e:	6f 93       	push	r22
    6760:	7f 93       	push	r23
    6762:	8f 93       	push	r24
    6764:	9f 93       	push	r25
    6766:	af 93       	push	r26
    6768:	bf 93       	push	r27
    676a:	ef 93       	push	r30
    676c:	ff 93       	push	r31
	Timer0Reg0++;			// increment low-order counter
    676e:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <Timer0Reg0>
    6772:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <Timer0Reg0+0x1>
    6776:	a0 91 9c 04 	lds	r26, 0x049C	; 0x80049c <Timer0Reg0+0x2>
    677a:	b0 91 9d 04 	lds	r27, 0x049D	; 0x80049d <Timer0Reg0+0x3>
    677e:	01 96       	adiw	r24, 0x01	; 1
    6780:	a1 1d       	adc	r26, r1
    6782:	b1 1d       	adc	r27, r1
    6784:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <Timer0Reg0>
    6788:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <Timer0Reg0+0x1>
    678c:	a0 93 9c 04 	sts	0x049C, r26	; 0x80049c <Timer0Reg0+0x2>
    6790:	b0 93 9d 04 	sts	0x049D, r27	; 0x80049d <Timer0Reg0+0x3>

	// increment pause counter
	TimerPauseReg++;
    6794:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <TimerPauseReg>
    6798:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <TimerPauseReg+0x1>
    679c:	a0 91 a0 04 	lds	r26, 0x04A0	; 0x8004a0 <TimerPauseReg+0x2>
    67a0:	b0 91 a1 04 	lds	r27, 0x04A1	; 0x8004a1 <TimerPauseReg+0x3>
    67a4:	01 96       	adiw	r24, 0x01	; 1
    67a6:	a1 1d       	adc	r26, r1
    67a8:	b1 1d       	adc	r27, r1
    67aa:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <TimerPauseReg>
    67ae:	90 93 9f 04 	sts	0x049F, r25	; 0x80049f <TimerPauseReg+0x1>
    67b2:	a0 93 a0 04 	sts	0x04A0, r26	; 0x8004a0 <TimerPauseReg+0x2>
    67b6:	b0 93 a1 04 	sts	0x04A1, r27	; 0x8004a1 <TimerPauseReg+0x3>

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
    67ba:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <TimerIntFunc>
    67be:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <TimerIntFunc+0x1>
    67c2:	89 2b       	or	r24, r25
    67c4:	29 f0       	breq	.+10     	; 0x67d0 <__vector_11+0x84>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
    67c6:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <TimerIntFunc>
    67ca:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <TimerIntFunc+0x1>
    67ce:	09 95       	icall
}
    67d0:	ff 91       	pop	r31
    67d2:	ef 91       	pop	r30
    67d4:	bf 91       	pop	r27
    67d6:	af 91       	pop	r26
    67d8:	9f 91       	pop	r25
    67da:	8f 91       	pop	r24
    67dc:	7f 91       	pop	r23
    67de:	6f 91       	pop	r22
    67e0:	5f 91       	pop	r21
    67e2:	4f 91       	pop	r20
    67e4:	3f 91       	pop	r19
    67e6:	2f 91       	pop	r18
    67e8:	0f 90       	pop	r0
    67ea:	0f be       	out	0x3f, r0	; 63
    67ec:	0f 90       	pop	r0
    67ee:	1f 90       	pop	r1
    67f0:	18 95       	reti

000067f2 <__vector_9>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect)
{
    67f2:	1f 92       	push	r1
    67f4:	0f 92       	push	r0
    67f6:	0f b6       	in	r0, 0x3f	; 63
    67f8:	0f 92       	push	r0
    67fa:	11 24       	eor	r1, r1
    67fc:	2f 93       	push	r18
    67fe:	3f 93       	push	r19
    6800:	4f 93       	push	r20
    6802:	5f 93       	push	r21
    6804:	6f 93       	push	r22
    6806:	7f 93       	push	r23
    6808:	8f 93       	push	r24
    680a:	9f 93       	push	r25
    680c:	af 93       	push	r26
    680e:	bf 93       	push	r27
    6810:	ef 93       	push	r30
    6812:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
    6814:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <TimerIntFunc+0x2>
    6818:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <TimerIntFunc+0x3>
    681c:	89 2b       	or	r24, r25
    681e:	29 f0       	breq	.+10     	; 0x682a <__vector_9+0x38>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
    6820:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <TimerIntFunc+0x2>
    6824:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <TimerIntFunc+0x3>
    6828:	09 95       	icall
}
    682a:	ff 91       	pop	r31
    682c:	ef 91       	pop	r30
    682e:	bf 91       	pop	r27
    6830:	af 91       	pop	r26
    6832:	9f 91       	pop	r25
    6834:	8f 91       	pop	r24
    6836:	7f 91       	pop	r23
    6838:	6f 91       	pop	r22
    683a:	5f 91       	pop	r21
    683c:	4f 91       	pop	r20
    683e:	3f 91       	pop	r19
    6840:	2f 91       	pop	r18
    6842:	0f 90       	pop	r0
    6844:	0f be       	out	0x3f, r0	; 63
    6846:	0f 90       	pop	r0
    6848:	1f 90       	pop	r1
    684a:	18 95       	reti

0000684c <__vector_5>:

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_OVF_vect)
{
    684c:	1f 92       	push	r1
    684e:	0f 92       	push	r0
    6850:	0f b6       	in	r0, 0x3f	; 63
    6852:	0f 92       	push	r0
    6854:	11 24       	eor	r1, r1
    6856:	2f 93       	push	r18
    6858:	3f 93       	push	r19
    685a:	4f 93       	push	r20
    685c:	5f 93       	push	r21
    685e:	6f 93       	push	r22
    6860:	7f 93       	push	r23
    6862:	8f 93       	push	r24
    6864:	9f 93       	push	r25
    6866:	af 93       	push	r26
    6868:	bf 93       	push	r27
    686a:	ef 93       	push	r30
    686c:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
    686e:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <Timer2Reg0>
    6872:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <Timer2Reg0+0x1>
    6876:	a0 91 a4 04 	lds	r26, 0x04A4	; 0x8004a4 <Timer2Reg0+0x2>
    687a:	b0 91 a5 04 	lds	r27, 0x04A5	; 0x8004a5 <Timer2Reg0+0x3>
    687e:	01 96       	adiw	r24, 0x01	; 1
    6880:	a1 1d       	adc	r26, r1
    6882:	b1 1d       	adc	r27, r1
    6884:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <Timer2Reg0>
    6888:	90 93 a3 04 	sts	0x04A3, r25	; 0x8004a3 <Timer2Reg0+0x1>
    688c:	a0 93 a4 04 	sts	0x04A4, r26	; 0x8004a4 <Timer2Reg0+0x2>
    6890:	b0 93 a5 04 	sts	0x04A5, r27	; 0x8004a5 <Timer2Reg0+0x3>

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
    6894:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <TimerIntFunc+0xa>
    6898:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <TimerIntFunc+0xb>
    689c:	89 2b       	or	r24, r25
    689e:	29 f0       	breq	.+10     	; 0x68aa <__vector_5+0x5e>
		TimerIntFunc[TIMER2OVERFLOW_INT]();
    68a0:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <TimerIntFunc+0xa>
    68a4:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <TimerIntFunc+0xb>
    68a8:	09 95       	icall
}
    68aa:	ff 91       	pop	r31
    68ac:	ef 91       	pop	r30
    68ae:	bf 91       	pop	r27
    68b0:	af 91       	pop	r26
    68b2:	9f 91       	pop	r25
    68b4:	8f 91       	pop	r24
    68b6:	7f 91       	pop	r23
    68b8:	6f 91       	pop	r22
    68ba:	5f 91       	pop	r21
    68bc:	4f 91       	pop	r20
    68be:	3f 91       	pop	r19
    68c0:	2f 91       	pop	r18
    68c2:	0f 90       	pop	r0
    68c4:	0f be       	out	0x3f, r0	; 63
    68c6:	0f 90       	pop	r0
    68c8:	1f 90       	pop	r1
    68ca:	18 95       	reti

000068cc <__vector_10>:

#ifdef OCR0
// include support for Output Compare 0 for new AVR processors that support it
//! Interrupt handler for OutputCompare0 match (OC0) interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_COMP_vect)
{
    68cc:	1f 92       	push	r1
    68ce:	0f 92       	push	r0
    68d0:	0f b6       	in	r0, 0x3f	; 63
    68d2:	0f 92       	push	r0
    68d4:	11 24       	eor	r1, r1
    68d6:	2f 93       	push	r18
    68d8:	3f 93       	push	r19
    68da:	4f 93       	push	r20
    68dc:	5f 93       	push	r21
    68de:	6f 93       	push	r22
    68e0:	7f 93       	push	r23
    68e2:	8f 93       	push	r24
    68e4:	9f 93       	push	r25
    68e6:	af 93       	push	r26
    68e8:	bf 93       	push	r27
    68ea:	ef 93       	push	r30
    68ec:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER0OUTCOMPARE_INT])
    68ee:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <TimerIntFunc+0xe>
    68f2:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <TimerIntFunc+0xf>
    68f6:	89 2b       	or	r24, r25
    68f8:	29 f0       	breq	.+10     	; 0x6904 <__vector_10+0x38>
		TimerIntFunc[TIMER0OUTCOMPARE_INT]();
    68fa:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <TimerIntFunc+0xe>
    68fe:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <TimerIntFunc+0xf>
    6902:	09 95       	icall
}
    6904:	ff 91       	pop	r31
    6906:	ef 91       	pop	r30
    6908:	bf 91       	pop	r27
    690a:	af 91       	pop	r26
    690c:	9f 91       	pop	r25
    690e:	8f 91       	pop	r24
    6910:	7f 91       	pop	r23
    6912:	6f 91       	pop	r22
    6914:	5f 91       	pop	r21
    6916:	4f 91       	pop	r20
    6918:	3f 91       	pop	r19
    691a:	2f 91       	pop	r18
    691c:	0f 90       	pop	r0
    691e:	0f be       	out	0x3f, r0	; 63
    6920:	0f 90       	pop	r0
    6922:	1f 90       	pop	r1
    6924:	18 95       	reti

00006926 <__vector_7>:
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect)
{
    6926:	1f 92       	push	r1
    6928:	0f 92       	push	r0
    692a:	0f b6       	in	r0, 0x3f	; 63
    692c:	0f 92       	push	r0
    692e:	11 24       	eor	r1, r1
    6930:	2f 93       	push	r18
    6932:	3f 93       	push	r19
    6934:	4f 93       	push	r20
    6936:	5f 93       	push	r21
    6938:	6f 93       	push	r22
    693a:	7f 93       	push	r23
    693c:	8f 93       	push	r24
    693e:	9f 93       	push	r25
    6940:	af 93       	push	r26
    6942:	bf 93       	push	r27
    6944:	ef 93       	push	r30
    6946:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
    6948:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <TimerIntFunc+0x4>
    694c:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <TimerIntFunc+0x5>
    6950:	89 2b       	or	r24, r25
    6952:	29 f0       	breq	.+10     	; 0x695e <__vector_7+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
    6954:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <TimerIntFunc+0x4>
    6958:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <TimerIntFunc+0x5>
    695c:	09 95       	icall
}
    695e:	ff 91       	pop	r31
    6960:	ef 91       	pop	r30
    6962:	bf 91       	pop	r27
    6964:	af 91       	pop	r26
    6966:	9f 91       	pop	r25
    6968:	8f 91       	pop	r24
    696a:	7f 91       	pop	r23
    696c:	6f 91       	pop	r22
    696e:	5f 91       	pop	r21
    6970:	4f 91       	pop	r20
    6972:	3f 91       	pop	r19
    6974:	2f 91       	pop	r18
    6976:	0f 90       	pop	r0
    6978:	0f be       	out	0x3f, r0	; 63
    697a:	0f 90       	pop	r0
    697c:	1f 90       	pop	r1
    697e:	18 95       	reti

00006980 <__vector_8>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect)
{
    6980:	1f 92       	push	r1
    6982:	0f 92       	push	r0
    6984:	0f b6       	in	r0, 0x3f	; 63
    6986:	0f 92       	push	r0
    6988:	11 24       	eor	r1, r1
    698a:	2f 93       	push	r18
    698c:	3f 93       	push	r19
    698e:	4f 93       	push	r20
    6990:	5f 93       	push	r21
    6992:	6f 93       	push	r22
    6994:	7f 93       	push	r23
    6996:	8f 93       	push	r24
    6998:	9f 93       	push	r25
    699a:	af 93       	push	r26
    699c:	bf 93       	push	r27
    699e:	ef 93       	push	r30
    69a0:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
    69a2:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <TimerIntFunc+0x6>
    69a6:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <TimerIntFunc+0x7>
    69aa:	89 2b       	or	r24, r25
    69ac:	29 f0       	breq	.+10     	; 0x69b8 <__vector_8+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
    69ae:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <TimerIntFunc+0x6>
    69b2:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <TimerIntFunc+0x7>
    69b6:	09 95       	icall
}
    69b8:	ff 91       	pop	r31
    69ba:	ef 91       	pop	r30
    69bc:	bf 91       	pop	r27
    69be:	af 91       	pop	r26
    69c0:	9f 91       	pop	r25
    69c2:	8f 91       	pop	r24
    69c4:	7f 91       	pop	r23
    69c6:	6f 91       	pop	r22
    69c8:	5f 91       	pop	r21
    69ca:	4f 91       	pop	r20
    69cc:	3f 91       	pop	r19
    69ce:	2f 91       	pop	r18
    69d0:	0f 90       	pop	r0
    69d2:	0f be       	out	0x3f, r0	; 63
    69d4:	0f 90       	pop	r0
    69d6:	1f 90       	pop	r1
    69d8:	18 95       	reti

000069da <__vector_6>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect)
{
    69da:	1f 92       	push	r1
    69dc:	0f 92       	push	r0
    69de:	0f b6       	in	r0, 0x3f	; 63
    69e0:	0f 92       	push	r0
    69e2:	11 24       	eor	r1, r1
    69e4:	2f 93       	push	r18
    69e6:	3f 93       	push	r19
    69e8:	4f 93       	push	r20
    69ea:	5f 93       	push	r21
    69ec:	6f 93       	push	r22
    69ee:	7f 93       	push	r23
    69f0:	8f 93       	push	r24
    69f2:	9f 93       	push	r25
    69f4:	af 93       	push	r26
    69f6:	bf 93       	push	r27
    69f8:	ef 93       	push	r30
    69fa:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
    69fc:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <TimerIntFunc+0x8>
    6a00:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <TimerIntFunc+0x9>
    6a04:	89 2b       	or	r24, r25
    6a06:	29 f0       	breq	.+10     	; 0x6a12 <__vector_6+0x38>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
    6a08:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <TimerIntFunc+0x8>
    6a0c:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <TimerIntFunc+0x9>
    6a10:	09 95       	icall
}
    6a12:	ff 91       	pop	r31
    6a14:	ef 91       	pop	r30
    6a16:	bf 91       	pop	r27
    6a18:	af 91       	pop	r26
    6a1a:	9f 91       	pop	r25
    6a1c:	8f 91       	pop	r24
    6a1e:	7f 91       	pop	r23
    6a20:	6f 91       	pop	r22
    6a22:	5f 91       	pop	r21
    6a24:	4f 91       	pop	r20
    6a26:	3f 91       	pop	r19
    6a28:	2f 91       	pop	r18
    6a2a:	0f 90       	pop	r0
    6a2c:	0f be       	out	0x3f, r0	; 63
    6a2e:	0f 90       	pop	r0
    6a30:	1f 90       	pop	r1
    6a32:	18 95       	reti

00006a34 <__vector_4>:

//! Interrupt handler for OutputCompare2 match (OC2) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMP_vect)
{
    6a34:	1f 92       	push	r1
    6a36:	0f 92       	push	r0
    6a38:	0f b6       	in	r0, 0x3f	; 63
    6a3a:	0f 92       	push	r0
    6a3c:	11 24       	eor	r1, r1
    6a3e:	2f 93       	push	r18
    6a40:	3f 93       	push	r19
    6a42:	4f 93       	push	r20
    6a44:	5f 93       	push	r21
    6a46:	6f 93       	push	r22
    6a48:	7f 93       	push	r23
    6a4a:	8f 93       	push	r24
    6a4c:	9f 93       	push	r25
    6a4e:	af 93       	push	r26
    6a50:	bf 93       	push	r27
    6a52:	ef 93       	push	r30
    6a54:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
    6a56:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <TimerIntFunc+0xc>
    6a5a:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <TimerIntFunc+0xd>
    6a5e:	89 2b       	or	r24, r25
    6a60:	29 f0       	breq	.+10     	; 0x6a6c <__vector_4+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
    6a62:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <TimerIntFunc+0xc>
    6a66:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <TimerIntFunc+0xd>
    6a6a:	09 95       	icall
}
    6a6c:	ff 91       	pop	r31
    6a6e:	ef 91       	pop	r30
    6a70:	bf 91       	pop	r27
    6a72:	af 91       	pop	r26
    6a74:	9f 91       	pop	r25
    6a76:	8f 91       	pop	r24
    6a78:	7f 91       	pop	r23
    6a7a:	6f 91       	pop	r22
    6a7c:	5f 91       	pop	r21
    6a7e:	4f 91       	pop	r20
    6a80:	3f 91       	pop	r19
    6a82:	2f 91       	pop	r18
    6a84:	0f 90       	pop	r0
    6a86:	0f be       	out	0x3f, r0	; 63
    6a88:	0f 90       	pop	r0
    6a8a:	1f 90       	pop	r1
    6a8c:	18 95       	reti

00006a8e <uartInitBuffers>:
	else
	{
		// return failure
		return FALSE;
	}
}
    6a8e:	40 e4       	ldi	r20, 0x40	; 64
    6a90:	50 e0       	ldi	r21, 0x00	; 0
    6a92:	66 e1       	ldi	r22, 0x16	; 22
    6a94:	72 e0       	ldi	r23, 0x02	; 2
    6a96:	87 ea       	ldi	r24, 0xA7	; 167
    6a98:	94 e0       	ldi	r25, 0x04	; 4
    6a9a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <bufferInit>
    6a9e:	40 e4       	ldi	r20, 0x40	; 64
    6aa0:	50 e0       	ldi	r21, 0x00	; 0
    6aa2:	66 ed       	ldi	r22, 0xD6	; 214
    6aa4:	71 e0       	ldi	r23, 0x01	; 1
    6aa6:	81 eb       	ldi	r24, 0xB1	; 177
    6aa8:	94 e0       	ldi	r25, 0x04	; 4
    6aaa:	0e 94 f7 01 	call	0x3ee	; 0x3ee <bufferInit>
    6aae:	08 95       	ret

00006ab0 <uartInit>:
    6ab0:	0e 94 47 35 	call	0x6a8e	; 0x6a8e <uartInitBuffers>
    6ab4:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <UartRxFunc+0x1>
    6ab8:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <UartRxFunc>
    6abc:	88 ed       	ldi	r24, 0xD8	; 216
    6abe:	8a b9       	out	0x0a, r24	; 10
    6ac0:	86 e8       	ldi	r24, 0x86	; 134
    6ac2:	80 bd       	out	0x20, r24	; 32
    6ac4:	87 e6       	ldi	r24, 0x67	; 103
    6ac6:	89 b9       	out	0x09, r24	; 9
    6ac8:	10 bc       	out	0x20, r1	; 32
    6aca:	81 e0       	ldi	r24, 0x01	; 1
    6acc:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <uartReadyTx>
    6ad0:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <uartBufferedTx>
    6ad4:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <uartRxOverflow+0x1>
    6ad8:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <uartRxOverflow>
    6adc:	78 94       	sei
    6ade:	08 95       	ret

00006ae0 <uartSetRxHandler>:
    6ae0:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <UartRxFunc+0x1>
    6ae4:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <UartRxFunc>
    6ae8:	08 95       	ret

00006aea <uartSetBaudRate>:
    6aea:	0f 93       	push	r16
    6aec:	1f 93       	push	r17
    6aee:	8b 01       	movw	r16, r22
    6af0:	9c 01       	movw	r18, r24
    6af2:	dc 01       	movw	r26, r24
    6af4:	cb 01       	movw	r24, r22
    6af6:	80 58       	subi	r24, 0x80	; 128
    6af8:	9b 47       	sbci	r25, 0x7B	; 123
    6afa:	a1 4e       	sbci	r26, 0xE1	; 225
    6afc:	bf 4f       	sbci	r27, 0xFF	; 255
    6afe:	88 0f       	add	r24, r24
    6b00:	99 1f       	adc	r25, r25
    6b02:	aa 1f       	adc	r26, r26
    6b04:	bb 1f       	adc	r27, r27
    6b06:	88 0f       	add	r24, r24
    6b08:	99 1f       	adc	r25, r25
    6b0a:	aa 1f       	adc	r26, r26
    6b0c:	bb 1f       	adc	r27, r27
    6b0e:	bc 01       	movw	r22, r24
    6b10:	cd 01       	movw	r24, r26
    6b12:	66 0f       	add	r22, r22
    6b14:	77 1f       	adc	r23, r23
    6b16:	88 1f       	adc	r24, r24
    6b18:	99 1f       	adc	r25, r25
    6b1a:	00 0f       	add	r16, r16
    6b1c:	11 1f       	adc	r17, r17
    6b1e:	22 1f       	adc	r18, r18
    6b20:	33 1f       	adc	r19, r19
    6b22:	00 0f       	add	r16, r16
    6b24:	11 1f       	adc	r17, r17
    6b26:	22 1f       	adc	r18, r18
    6b28:	33 1f       	adc	r19, r19
    6b2a:	a9 01       	movw	r20, r18
    6b2c:	98 01       	movw	r18, r16
    6b2e:	22 0f       	add	r18, r18
    6b30:	33 1f       	adc	r19, r19
    6b32:	44 1f       	adc	r20, r20
    6b34:	55 1f       	adc	r21, r21
    6b36:	22 0f       	add	r18, r18
    6b38:	33 1f       	adc	r19, r19
    6b3a:	44 1f       	adc	r20, r20
    6b3c:	55 1f       	adc	r21, r21
    6b3e:	0e 94 18 38 	call	0x7030	; 0x7030 <__udivmodsi4>
    6b42:	21 50       	subi	r18, 0x01	; 1
    6b44:	31 09       	sbc	r19, r1
    6b46:	29 b9       	out	0x09, r18	; 9
    6b48:	30 bd       	out	0x20, r19	; 32
    6b4a:	1f 91       	pop	r17
    6b4c:	0f 91       	pop	r16
    6b4e:	08 95       	ret

00006b50 <uartSendByte>:
    6b50:	90 91 a6 04 	lds	r25, 0x04A6	; 0x8004a6 <uartReadyTx>
    6b54:	99 23       	and	r25, r25
    6b56:	e1 f3       	breq	.-8      	; 0x6b50 <uartSendByte>
    6b58:	8c b9       	out	0x0c, r24	; 12
    6b5a:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <uartReadyTx>
    6b5e:	08 95       	ret

00006b60 <uartReceiveByte>:
    6b60:	cf 93       	push	r28
    6b62:	df 93       	push	r29
    6b64:	20 91 a9 04 	lds	r18, 0x04A9	; 0x8004a9 <uartRxBuffer+0x2>
    6b68:	30 91 aa 04 	lds	r19, 0x04AA	; 0x8004aa <uartRxBuffer+0x3>
    6b6c:	23 2b       	or	r18, r19
    6b6e:	71 f0       	breq	.+28     	; 0x6b8c <uartReceiveByte+0x2c>
    6b70:	20 91 ab 04 	lds	r18, 0x04AB	; 0x8004ab <uartRxBuffer+0x4>
    6b74:	30 91 ac 04 	lds	r19, 0x04AC	; 0x8004ac <uartRxBuffer+0x5>
    6b78:	23 2b       	or	r18, r19
    6b7a:	51 f0       	breq	.+20     	; 0x6b90 <uartReceiveByte+0x30>
    6b7c:	ec 01       	movw	r28, r24
    6b7e:	87 ea       	ldi	r24, 0xA7	; 167
    6b80:	94 e0       	ldi	r25, 0x04	; 4
    6b82:	0e 94 04 02 	call	0x408	; 0x408 <bufferGetFromFront>
    6b86:	88 83       	st	Y, r24
    6b88:	81 e0       	ldi	r24, 0x01	; 1
    6b8a:	03 c0       	rjmp	.+6      	; 0x6b92 <uartReceiveByte+0x32>
    6b8c:	80 e0       	ldi	r24, 0x00	; 0
    6b8e:	01 c0       	rjmp	.+2      	; 0x6b92 <uartReceiveByte+0x32>
    6b90:	80 e0       	ldi	r24, 0x00	; 0
    6b92:	df 91       	pop	r29
    6b94:	cf 91       	pop	r28
    6b96:	08 95       	ret

00006b98 <uartGetByte>:
    6b98:	cf 93       	push	r28
    6b9a:	df 93       	push	r29
    6b9c:	1f 92       	push	r1
    6b9e:	cd b7       	in	r28, 0x3d	; 61
    6ba0:	de b7       	in	r29, 0x3e	; 62
    6ba2:	ce 01       	movw	r24, r28
    6ba4:	01 96       	adiw	r24, 0x01	; 1
    6ba6:	0e 94 b0 35 	call	0x6b60	; 0x6b60 <uartReceiveByte>
    6baa:	88 23       	and	r24, r24
    6bac:	19 f0       	breq	.+6      	; 0x6bb4 <uartGetByte+0x1c>
    6bae:	89 81       	ldd	r24, Y+1	; 0x01
    6bb0:	90 e0       	ldi	r25, 0x00	; 0
    6bb2:	02 c0       	rjmp	.+4      	; 0x6bb8 <uartGetByte+0x20>
    6bb4:	8f ef       	ldi	r24, 0xFF	; 255
    6bb6:	9f ef       	ldi	r25, 0xFF	; 255
    6bb8:	0f 90       	pop	r0
    6bba:	df 91       	pop	r29
    6bbc:	cf 91       	pop	r28
    6bbe:	08 95       	ret

00006bc0 <uartFlushReceiveBuffer>:
    6bc0:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <uartRxBuffer+0x5>
    6bc4:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <uartRxBuffer+0x4>
    6bc8:	08 95       	ret

00006bca <uartReceiveBufferIsEmpty>:
    6bca:	81 e0       	ldi	r24, 0x01	; 1
    6bcc:	20 91 ab 04 	lds	r18, 0x04AB	; 0x8004ab <uartRxBuffer+0x4>
    6bd0:	30 91 ac 04 	lds	r19, 0x04AC	; 0x8004ac <uartRxBuffer+0x5>
    6bd4:	23 2b       	or	r18, r19
    6bd6:	09 f0       	breq	.+2      	; 0x6bda <uartReceiveBufferIsEmpty+0x10>
    6bd8:	80 e0       	ldi	r24, 0x00	; 0
    6bda:	08 95       	ret

00006bdc <__vector_15>:

// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(USART_TXC_vect)
{
    6bdc:	1f 92       	push	r1
    6bde:	0f 92       	push	r0
    6be0:	0f b6       	in	r0, 0x3f	; 63
    6be2:	0f 92       	push	r0
    6be4:	11 24       	eor	r1, r1
    6be6:	2f 93       	push	r18
    6be8:	3f 93       	push	r19
    6bea:	4f 93       	push	r20
    6bec:	5f 93       	push	r21
    6bee:	6f 93       	push	r22
    6bf0:	7f 93       	push	r23
    6bf2:	8f 93       	push	r24
    6bf4:	9f 93       	push	r25
    6bf6:	af 93       	push	r26
    6bf8:	bf 93       	push	r27
    6bfa:	ef 93       	push	r30
    6bfc:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
    6bfe:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <uartBufferedTx>
    6c02:	88 23       	and	r24, r24
    6c04:	91 f0       	breq	.+36     	; 0x6c2a <__vector_15+0x4e>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
    6c06:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <uartTxBuffer+0x4>
    6c0a:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <uartTxBuffer+0x5>
    6c0e:	89 2b       	or	r24, r25
    6c10:	31 f0       	breq	.+12     	; 0x6c1e <__vector_15+0x42>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
    6c12:	81 eb       	ldi	r24, 0xB1	; 177
    6c14:	94 e0       	ldi	r25, 0x04	; 4
    6c16:	0e 94 04 02 	call	0x408	; 0x408 <bufferGetFromFront>
    6c1a:	8c b9       	out	0x0c, r24	; 12
    6c1c:	09 c0       	rjmp	.+18     	; 0x6c30 <__vector_15+0x54>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
    6c1e:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <uartBufferedTx>
			// return to ready state
			uartReadyTx = TRUE;
    6c22:	81 e0       	ldi	r24, 0x01	; 1
    6c24:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <uartReadyTx>
    6c28:	03 c0       	rjmp	.+6      	; 0x6c30 <__vector_15+0x54>
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
    6c2a:	81 e0       	ldi	r24, 0x01	; 1
    6c2c:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <uartReadyTx>
	}
}
    6c30:	ff 91       	pop	r31
    6c32:	ef 91       	pop	r30
    6c34:	bf 91       	pop	r27
    6c36:	af 91       	pop	r26
    6c38:	9f 91       	pop	r25
    6c3a:	8f 91       	pop	r24
    6c3c:	7f 91       	pop	r23
    6c3e:	6f 91       	pop	r22
    6c40:	5f 91       	pop	r21
    6c42:	4f 91       	pop	r20
    6c44:	3f 91       	pop	r19
    6c46:	2f 91       	pop	r18
    6c48:	0f 90       	pop	r0
    6c4a:	0f be       	out	0x3f, r0	; 63
    6c4c:	0f 90       	pop	r0
    6c4e:	1f 90       	pop	r1
    6c50:	18 95       	reti

00006c52 <__vector_13>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(USART_RXC_vect)
{
    6c52:	1f 92       	push	r1
    6c54:	0f 92       	push	r0
    6c56:	0f b6       	in	r0, 0x3f	; 63
    6c58:	0f 92       	push	r0
    6c5a:	11 24       	eor	r1, r1
    6c5c:	2f 93       	push	r18
    6c5e:	3f 93       	push	r19
    6c60:	4f 93       	push	r20
    6c62:	5f 93       	push	r21
    6c64:	6f 93       	push	r22
    6c66:	7f 93       	push	r23
    6c68:	8f 93       	push	r24
    6c6a:	9f 93       	push	r25
    6c6c:	af 93       	push	r26
    6c6e:	bf 93       	push	r27
    6c70:	ef 93       	push	r30
    6c72:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
    6c74:	8c b1       	in	r24, 0x0c	; 12
	
	// if there's a user function to handle this receive event
	if(UartRxFunc)
    6c76:	20 91 d4 01 	lds	r18, 0x01D4	; 0x8001d4 <UartRxFunc>
    6c7a:	30 91 d5 01 	lds	r19, 0x01D5	; 0x8001d5 <UartRxFunc+0x1>
    6c7e:	23 2b       	or	r18, r19
    6c80:	31 f0       	breq	.+12     	; 0x6c8e <__vector_13+0x3c>
	{
		// call it and pass the received data
		UartRxFunc(c);
    6c82:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <UartRxFunc>
    6c86:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <UartRxFunc+0x1>
    6c8a:	09 95       	icall
    6c8c:	10 c0       	rjmp	.+32     	; 0x6cae <__vector_13+0x5c>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
    6c8e:	68 2f       	mov	r22, r24
    6c90:	87 ea       	ldi	r24, 0xA7	; 167
    6c92:	94 e0       	ldi	r25, 0x04	; 4
    6c94:	0e 94 28 02 	call	0x450	; 0x450 <bufferAddToEnd>
    6c98:	81 11       	cpse	r24, r1
    6c9a:	09 c0       	rjmp	.+18     	; 0x6cae <__vector_13+0x5c>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
    6c9c:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <uartRxOverflow>
    6ca0:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <uartRxOverflow+0x1>
    6ca4:	01 96       	adiw	r24, 0x01	; 1
    6ca6:	90 93 ba 04 	sts	0x04BA, r25	; 0x8004ba <uartRxOverflow+0x1>
    6caa:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <uartRxOverflow>
		}
	}
}
    6cae:	ff 91       	pop	r31
    6cb0:	ef 91       	pop	r30
    6cb2:	bf 91       	pop	r27
    6cb4:	af 91       	pop	r26
    6cb6:	9f 91       	pop	r25
    6cb8:	8f 91       	pop	r24
    6cba:	7f 91       	pop	r23
    6cbc:	6f 91       	pop	r22
    6cbe:	5f 91       	pop	r21
    6cc0:	4f 91       	pop	r20
    6cc2:	3f 91       	pop	r19
    6cc4:	2f 91       	pop	r18
    6cc6:	0f 90       	pop	r0
    6cc8:	0f be       	out	0x3f, r0	; 63
    6cca:	0f 90       	pop	r0
    6ccc:	1f 90       	pop	r1
    6cce:	18 95       	reti

00006cd0 <__divsf3>:
    6cd0:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <__divsf3x>
    6cd4:	0c 94 5d 37 	jmp	0x6eba	; 0x6eba <__fp_round>
    6cd8:	0e 94 56 37 	call	0x6eac	; 0x6eac <__fp_pscB>
    6cdc:	58 f0       	brcs	.+22     	; 0x6cf4 <__divsf3+0x24>
    6cde:	0e 94 4f 37 	call	0x6e9e	; 0x6e9e <__fp_pscA>
    6ce2:	40 f0       	brcs	.+16     	; 0x6cf4 <__divsf3+0x24>
    6ce4:	29 f4       	brne	.+10     	; 0x6cf0 <__divsf3+0x20>
    6ce6:	5f 3f       	cpi	r21, 0xFF	; 255
    6ce8:	29 f0       	breq	.+10     	; 0x6cf4 <__divsf3+0x24>
    6cea:	0c 94 46 37 	jmp	0x6e8c	; 0x6e8c <__fp_inf>
    6cee:	51 11       	cpse	r21, r1
    6cf0:	0c 94 91 37 	jmp	0x6f22	; 0x6f22 <__fp_szero>
    6cf4:	0c 94 4c 37 	jmp	0x6e98	; 0x6e98 <__fp_nan>

00006cf8 <__divsf3x>:
    6cf8:	0e 94 6e 37 	call	0x6edc	; 0x6edc <__fp_split3>
    6cfc:	68 f3       	brcs	.-38     	; 0x6cd8 <__divsf3+0x8>

00006cfe <__divsf3_pse>:
    6cfe:	99 23       	and	r25, r25
    6d00:	b1 f3       	breq	.-20     	; 0x6cee <__divsf3+0x1e>
    6d02:	55 23       	and	r21, r21
    6d04:	91 f3       	breq	.-28     	; 0x6cea <__divsf3+0x1a>
    6d06:	95 1b       	sub	r25, r21
    6d08:	55 0b       	sbc	r21, r21
    6d0a:	bb 27       	eor	r27, r27
    6d0c:	aa 27       	eor	r26, r26
    6d0e:	62 17       	cp	r22, r18
    6d10:	73 07       	cpc	r23, r19
    6d12:	84 07       	cpc	r24, r20
    6d14:	38 f0       	brcs	.+14     	; 0x6d24 <__divsf3_pse+0x26>
    6d16:	9f 5f       	subi	r25, 0xFF	; 255
    6d18:	5f 4f       	sbci	r21, 0xFF	; 255
    6d1a:	22 0f       	add	r18, r18
    6d1c:	33 1f       	adc	r19, r19
    6d1e:	44 1f       	adc	r20, r20
    6d20:	aa 1f       	adc	r26, r26
    6d22:	a9 f3       	breq	.-22     	; 0x6d0e <__divsf3_pse+0x10>
    6d24:	35 d0       	rcall	.+106    	; 0x6d90 <__divsf3_pse+0x92>
    6d26:	0e 2e       	mov	r0, r30
    6d28:	3a f0       	brmi	.+14     	; 0x6d38 <__divsf3_pse+0x3a>
    6d2a:	e0 e8       	ldi	r30, 0x80	; 128
    6d2c:	32 d0       	rcall	.+100    	; 0x6d92 <__divsf3_pse+0x94>
    6d2e:	91 50       	subi	r25, 0x01	; 1
    6d30:	50 40       	sbci	r21, 0x00	; 0
    6d32:	e6 95       	lsr	r30
    6d34:	00 1c       	adc	r0, r0
    6d36:	ca f7       	brpl	.-14     	; 0x6d2a <__divsf3_pse+0x2c>
    6d38:	2b d0       	rcall	.+86     	; 0x6d90 <__divsf3_pse+0x92>
    6d3a:	fe 2f       	mov	r31, r30
    6d3c:	29 d0       	rcall	.+82     	; 0x6d90 <__divsf3_pse+0x92>
    6d3e:	66 0f       	add	r22, r22
    6d40:	77 1f       	adc	r23, r23
    6d42:	88 1f       	adc	r24, r24
    6d44:	bb 1f       	adc	r27, r27
    6d46:	26 17       	cp	r18, r22
    6d48:	37 07       	cpc	r19, r23
    6d4a:	48 07       	cpc	r20, r24
    6d4c:	ab 07       	cpc	r26, r27
    6d4e:	b0 e8       	ldi	r27, 0x80	; 128
    6d50:	09 f0       	breq	.+2      	; 0x6d54 <__divsf3_pse+0x56>
    6d52:	bb 0b       	sbc	r27, r27
    6d54:	80 2d       	mov	r24, r0
    6d56:	bf 01       	movw	r22, r30
    6d58:	ff 27       	eor	r31, r31
    6d5a:	93 58       	subi	r25, 0x83	; 131
    6d5c:	5f 4f       	sbci	r21, 0xFF	; 255
    6d5e:	3a f0       	brmi	.+14     	; 0x6d6e <__divsf3_pse+0x70>
    6d60:	9e 3f       	cpi	r25, 0xFE	; 254
    6d62:	51 05       	cpc	r21, r1
    6d64:	78 f0       	brcs	.+30     	; 0x6d84 <__divsf3_pse+0x86>
    6d66:	0c 94 46 37 	jmp	0x6e8c	; 0x6e8c <__fp_inf>
    6d6a:	0c 94 91 37 	jmp	0x6f22	; 0x6f22 <__fp_szero>
    6d6e:	5f 3f       	cpi	r21, 0xFF	; 255
    6d70:	e4 f3       	brlt	.-8      	; 0x6d6a <__divsf3_pse+0x6c>
    6d72:	98 3e       	cpi	r25, 0xE8	; 232
    6d74:	d4 f3       	brlt	.-12     	; 0x6d6a <__divsf3_pse+0x6c>
    6d76:	86 95       	lsr	r24
    6d78:	77 95       	ror	r23
    6d7a:	67 95       	ror	r22
    6d7c:	b7 95       	ror	r27
    6d7e:	f7 95       	ror	r31
    6d80:	9f 5f       	subi	r25, 0xFF	; 255
    6d82:	c9 f7       	brne	.-14     	; 0x6d76 <__divsf3_pse+0x78>
    6d84:	88 0f       	add	r24, r24
    6d86:	91 1d       	adc	r25, r1
    6d88:	96 95       	lsr	r25
    6d8a:	87 95       	ror	r24
    6d8c:	97 f9       	bld	r25, 7
    6d8e:	08 95       	ret
    6d90:	e1 e0       	ldi	r30, 0x01	; 1
    6d92:	66 0f       	add	r22, r22
    6d94:	77 1f       	adc	r23, r23
    6d96:	88 1f       	adc	r24, r24
    6d98:	bb 1f       	adc	r27, r27
    6d9a:	62 17       	cp	r22, r18
    6d9c:	73 07       	cpc	r23, r19
    6d9e:	84 07       	cpc	r24, r20
    6da0:	ba 07       	cpc	r27, r26
    6da2:	20 f0       	brcs	.+8      	; 0x6dac <__divsf3_pse+0xae>
    6da4:	62 1b       	sub	r22, r18
    6da6:	73 0b       	sbc	r23, r19
    6da8:	84 0b       	sbc	r24, r20
    6daa:	ba 0b       	sbc	r27, r26
    6dac:	ee 1f       	adc	r30, r30
    6dae:	88 f7       	brcc	.-30     	; 0x6d92 <__divsf3_pse+0x94>
    6db0:	e0 95       	com	r30
    6db2:	08 95       	ret

00006db4 <__fixunssfsi>:
    6db4:	0e 94 76 37 	call	0x6eec	; 0x6eec <__fp_splitA>
    6db8:	88 f0       	brcs	.+34     	; 0x6ddc <__fixunssfsi+0x28>
    6dba:	9f 57       	subi	r25, 0x7F	; 127
    6dbc:	98 f0       	brcs	.+38     	; 0x6de4 <__fixunssfsi+0x30>
    6dbe:	b9 2f       	mov	r27, r25
    6dc0:	99 27       	eor	r25, r25
    6dc2:	b7 51       	subi	r27, 0x17	; 23
    6dc4:	b0 f0       	brcs	.+44     	; 0x6df2 <__fixunssfsi+0x3e>
    6dc6:	e1 f0       	breq	.+56     	; 0x6e00 <__fixunssfsi+0x4c>
    6dc8:	66 0f       	add	r22, r22
    6dca:	77 1f       	adc	r23, r23
    6dcc:	88 1f       	adc	r24, r24
    6dce:	99 1f       	adc	r25, r25
    6dd0:	1a f0       	brmi	.+6      	; 0x6dd8 <__fixunssfsi+0x24>
    6dd2:	ba 95       	dec	r27
    6dd4:	c9 f7       	brne	.-14     	; 0x6dc8 <__fixunssfsi+0x14>
    6dd6:	14 c0       	rjmp	.+40     	; 0x6e00 <__fixunssfsi+0x4c>
    6dd8:	b1 30       	cpi	r27, 0x01	; 1
    6dda:	91 f0       	breq	.+36     	; 0x6e00 <__fixunssfsi+0x4c>
    6ddc:	0e 94 90 37 	call	0x6f20	; 0x6f20 <__fp_zero>
    6de0:	b1 e0       	ldi	r27, 0x01	; 1
    6de2:	08 95       	ret
    6de4:	0c 94 90 37 	jmp	0x6f20	; 0x6f20 <__fp_zero>
    6de8:	67 2f       	mov	r22, r23
    6dea:	78 2f       	mov	r23, r24
    6dec:	88 27       	eor	r24, r24
    6dee:	b8 5f       	subi	r27, 0xF8	; 248
    6df0:	39 f0       	breq	.+14     	; 0x6e00 <__fixunssfsi+0x4c>
    6df2:	b9 3f       	cpi	r27, 0xF9	; 249
    6df4:	cc f3       	brlt	.-14     	; 0x6de8 <__fixunssfsi+0x34>
    6df6:	86 95       	lsr	r24
    6df8:	77 95       	ror	r23
    6dfa:	67 95       	ror	r22
    6dfc:	b3 95       	inc	r27
    6dfe:	d9 f7       	brne	.-10     	; 0x6df6 <__fixunssfsi+0x42>
    6e00:	3e f4       	brtc	.+14     	; 0x6e10 <__fixunssfsi+0x5c>
    6e02:	90 95       	com	r25
    6e04:	80 95       	com	r24
    6e06:	70 95       	com	r23
    6e08:	61 95       	neg	r22
    6e0a:	7f 4f       	sbci	r23, 0xFF	; 255
    6e0c:	8f 4f       	sbci	r24, 0xFF	; 255
    6e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    6e10:	08 95       	ret

00006e12 <__floatunsisf>:
    6e12:	e8 94       	clt
    6e14:	09 c0       	rjmp	.+18     	; 0x6e28 <__floatsisf+0x12>

00006e16 <__floatsisf>:
    6e16:	97 fb       	bst	r25, 7
    6e18:	3e f4       	brtc	.+14     	; 0x6e28 <__floatsisf+0x12>
    6e1a:	90 95       	com	r25
    6e1c:	80 95       	com	r24
    6e1e:	70 95       	com	r23
    6e20:	61 95       	neg	r22
    6e22:	7f 4f       	sbci	r23, 0xFF	; 255
    6e24:	8f 4f       	sbci	r24, 0xFF	; 255
    6e26:	9f 4f       	sbci	r25, 0xFF	; 255
    6e28:	99 23       	and	r25, r25
    6e2a:	a9 f0       	breq	.+42     	; 0x6e56 <__floatsisf+0x40>
    6e2c:	f9 2f       	mov	r31, r25
    6e2e:	96 e9       	ldi	r25, 0x96	; 150
    6e30:	bb 27       	eor	r27, r27
    6e32:	93 95       	inc	r25
    6e34:	f6 95       	lsr	r31
    6e36:	87 95       	ror	r24
    6e38:	77 95       	ror	r23
    6e3a:	67 95       	ror	r22
    6e3c:	b7 95       	ror	r27
    6e3e:	f1 11       	cpse	r31, r1
    6e40:	f8 cf       	rjmp	.-16     	; 0x6e32 <__floatsisf+0x1c>
    6e42:	fa f4       	brpl	.+62     	; 0x6e82 <__floatsisf+0x6c>
    6e44:	bb 0f       	add	r27, r27
    6e46:	11 f4       	brne	.+4      	; 0x6e4c <__floatsisf+0x36>
    6e48:	60 ff       	sbrs	r22, 0
    6e4a:	1b c0       	rjmp	.+54     	; 0x6e82 <__floatsisf+0x6c>
    6e4c:	6f 5f       	subi	r22, 0xFF	; 255
    6e4e:	7f 4f       	sbci	r23, 0xFF	; 255
    6e50:	8f 4f       	sbci	r24, 0xFF	; 255
    6e52:	9f 4f       	sbci	r25, 0xFF	; 255
    6e54:	16 c0       	rjmp	.+44     	; 0x6e82 <__floatsisf+0x6c>
    6e56:	88 23       	and	r24, r24
    6e58:	11 f0       	breq	.+4      	; 0x6e5e <__floatsisf+0x48>
    6e5a:	96 e9       	ldi	r25, 0x96	; 150
    6e5c:	11 c0       	rjmp	.+34     	; 0x6e80 <__floatsisf+0x6a>
    6e5e:	77 23       	and	r23, r23
    6e60:	21 f0       	breq	.+8      	; 0x6e6a <__floatsisf+0x54>
    6e62:	9e e8       	ldi	r25, 0x8E	; 142
    6e64:	87 2f       	mov	r24, r23
    6e66:	76 2f       	mov	r23, r22
    6e68:	05 c0       	rjmp	.+10     	; 0x6e74 <__floatsisf+0x5e>
    6e6a:	66 23       	and	r22, r22
    6e6c:	71 f0       	breq	.+28     	; 0x6e8a <__floatsisf+0x74>
    6e6e:	96 e8       	ldi	r25, 0x86	; 134
    6e70:	86 2f       	mov	r24, r22
    6e72:	70 e0       	ldi	r23, 0x00	; 0
    6e74:	60 e0       	ldi	r22, 0x00	; 0
    6e76:	2a f0       	brmi	.+10     	; 0x6e82 <__floatsisf+0x6c>
    6e78:	9a 95       	dec	r25
    6e7a:	66 0f       	add	r22, r22
    6e7c:	77 1f       	adc	r23, r23
    6e7e:	88 1f       	adc	r24, r24
    6e80:	da f7       	brpl	.-10     	; 0x6e78 <__floatsisf+0x62>
    6e82:	88 0f       	add	r24, r24
    6e84:	96 95       	lsr	r25
    6e86:	87 95       	ror	r24
    6e88:	97 f9       	bld	r25, 7
    6e8a:	08 95       	ret

00006e8c <__fp_inf>:
    6e8c:	97 f9       	bld	r25, 7
    6e8e:	9f 67       	ori	r25, 0x7F	; 127
    6e90:	80 e8       	ldi	r24, 0x80	; 128
    6e92:	70 e0       	ldi	r23, 0x00	; 0
    6e94:	60 e0       	ldi	r22, 0x00	; 0
    6e96:	08 95       	ret

00006e98 <__fp_nan>:
    6e98:	9f ef       	ldi	r25, 0xFF	; 255
    6e9a:	80 ec       	ldi	r24, 0xC0	; 192
    6e9c:	08 95       	ret

00006e9e <__fp_pscA>:
    6e9e:	00 24       	eor	r0, r0
    6ea0:	0a 94       	dec	r0
    6ea2:	16 16       	cp	r1, r22
    6ea4:	17 06       	cpc	r1, r23
    6ea6:	18 06       	cpc	r1, r24
    6ea8:	09 06       	cpc	r0, r25
    6eaa:	08 95       	ret

00006eac <__fp_pscB>:
    6eac:	00 24       	eor	r0, r0
    6eae:	0a 94       	dec	r0
    6eb0:	12 16       	cp	r1, r18
    6eb2:	13 06       	cpc	r1, r19
    6eb4:	14 06       	cpc	r1, r20
    6eb6:	05 06       	cpc	r0, r21
    6eb8:	08 95       	ret

00006eba <__fp_round>:
    6eba:	09 2e       	mov	r0, r25
    6ebc:	03 94       	inc	r0
    6ebe:	00 0c       	add	r0, r0
    6ec0:	11 f4       	brne	.+4      	; 0x6ec6 <__fp_round+0xc>
    6ec2:	88 23       	and	r24, r24
    6ec4:	52 f0       	brmi	.+20     	; 0x6eda <__fp_round+0x20>
    6ec6:	bb 0f       	add	r27, r27
    6ec8:	40 f4       	brcc	.+16     	; 0x6eda <__fp_round+0x20>
    6eca:	bf 2b       	or	r27, r31
    6ecc:	11 f4       	brne	.+4      	; 0x6ed2 <__fp_round+0x18>
    6ece:	60 ff       	sbrs	r22, 0
    6ed0:	04 c0       	rjmp	.+8      	; 0x6eda <__fp_round+0x20>
    6ed2:	6f 5f       	subi	r22, 0xFF	; 255
    6ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    6ed6:	8f 4f       	sbci	r24, 0xFF	; 255
    6ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    6eda:	08 95       	ret

00006edc <__fp_split3>:
    6edc:	57 fd       	sbrc	r21, 7
    6ede:	90 58       	subi	r25, 0x80	; 128
    6ee0:	44 0f       	add	r20, r20
    6ee2:	55 1f       	adc	r21, r21
    6ee4:	59 f0       	breq	.+22     	; 0x6efc <__fp_splitA+0x10>
    6ee6:	5f 3f       	cpi	r21, 0xFF	; 255
    6ee8:	71 f0       	breq	.+28     	; 0x6f06 <__fp_splitA+0x1a>
    6eea:	47 95       	ror	r20

00006eec <__fp_splitA>:
    6eec:	88 0f       	add	r24, r24
    6eee:	97 fb       	bst	r25, 7
    6ef0:	99 1f       	adc	r25, r25
    6ef2:	61 f0       	breq	.+24     	; 0x6f0c <__fp_splitA+0x20>
    6ef4:	9f 3f       	cpi	r25, 0xFF	; 255
    6ef6:	79 f0       	breq	.+30     	; 0x6f16 <__fp_splitA+0x2a>
    6ef8:	87 95       	ror	r24
    6efa:	08 95       	ret
    6efc:	12 16       	cp	r1, r18
    6efe:	13 06       	cpc	r1, r19
    6f00:	14 06       	cpc	r1, r20
    6f02:	55 1f       	adc	r21, r21
    6f04:	f2 cf       	rjmp	.-28     	; 0x6eea <__fp_split3+0xe>
    6f06:	46 95       	lsr	r20
    6f08:	f1 df       	rcall	.-30     	; 0x6eec <__fp_splitA>
    6f0a:	08 c0       	rjmp	.+16     	; 0x6f1c <__fp_splitA+0x30>
    6f0c:	16 16       	cp	r1, r22
    6f0e:	17 06       	cpc	r1, r23
    6f10:	18 06       	cpc	r1, r24
    6f12:	99 1f       	adc	r25, r25
    6f14:	f1 cf       	rjmp	.-30     	; 0x6ef8 <__fp_splitA+0xc>
    6f16:	86 95       	lsr	r24
    6f18:	71 05       	cpc	r23, r1
    6f1a:	61 05       	cpc	r22, r1
    6f1c:	08 94       	sec
    6f1e:	08 95       	ret

00006f20 <__fp_zero>:
    6f20:	e8 94       	clt

00006f22 <__fp_szero>:
    6f22:	bb 27       	eor	r27, r27
    6f24:	66 27       	eor	r22, r22
    6f26:	77 27       	eor	r23, r23
    6f28:	cb 01       	movw	r24, r22
    6f2a:	97 f9       	bld	r25, 7
    6f2c:	08 95       	ret

00006f2e <__mulsf3>:
    6f2e:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <__mulsf3x>
    6f32:	0c 94 5d 37 	jmp	0x6eba	; 0x6eba <__fp_round>
    6f36:	0e 94 4f 37 	call	0x6e9e	; 0x6e9e <__fp_pscA>
    6f3a:	38 f0       	brcs	.+14     	; 0x6f4a <__mulsf3+0x1c>
    6f3c:	0e 94 56 37 	call	0x6eac	; 0x6eac <__fp_pscB>
    6f40:	20 f0       	brcs	.+8      	; 0x6f4a <__mulsf3+0x1c>
    6f42:	95 23       	and	r25, r21
    6f44:	11 f0       	breq	.+4      	; 0x6f4a <__mulsf3+0x1c>
    6f46:	0c 94 46 37 	jmp	0x6e8c	; 0x6e8c <__fp_inf>
    6f4a:	0c 94 4c 37 	jmp	0x6e98	; 0x6e98 <__fp_nan>
    6f4e:	11 24       	eor	r1, r1
    6f50:	0c 94 91 37 	jmp	0x6f22	; 0x6f22 <__fp_szero>

00006f54 <__mulsf3x>:
    6f54:	0e 94 6e 37 	call	0x6edc	; 0x6edc <__fp_split3>
    6f58:	70 f3       	brcs	.-36     	; 0x6f36 <__mulsf3+0x8>

00006f5a <__mulsf3_pse>:
    6f5a:	95 9f       	mul	r25, r21
    6f5c:	c1 f3       	breq	.-16     	; 0x6f4e <__mulsf3+0x20>
    6f5e:	95 0f       	add	r25, r21
    6f60:	50 e0       	ldi	r21, 0x00	; 0
    6f62:	55 1f       	adc	r21, r21
    6f64:	62 9f       	mul	r22, r18
    6f66:	f0 01       	movw	r30, r0
    6f68:	72 9f       	mul	r23, r18
    6f6a:	bb 27       	eor	r27, r27
    6f6c:	f0 0d       	add	r31, r0
    6f6e:	b1 1d       	adc	r27, r1
    6f70:	63 9f       	mul	r22, r19
    6f72:	aa 27       	eor	r26, r26
    6f74:	f0 0d       	add	r31, r0
    6f76:	b1 1d       	adc	r27, r1
    6f78:	aa 1f       	adc	r26, r26
    6f7a:	64 9f       	mul	r22, r20
    6f7c:	66 27       	eor	r22, r22
    6f7e:	b0 0d       	add	r27, r0
    6f80:	a1 1d       	adc	r26, r1
    6f82:	66 1f       	adc	r22, r22
    6f84:	82 9f       	mul	r24, r18
    6f86:	22 27       	eor	r18, r18
    6f88:	b0 0d       	add	r27, r0
    6f8a:	a1 1d       	adc	r26, r1
    6f8c:	62 1f       	adc	r22, r18
    6f8e:	73 9f       	mul	r23, r19
    6f90:	b0 0d       	add	r27, r0
    6f92:	a1 1d       	adc	r26, r1
    6f94:	62 1f       	adc	r22, r18
    6f96:	83 9f       	mul	r24, r19
    6f98:	a0 0d       	add	r26, r0
    6f9a:	61 1d       	adc	r22, r1
    6f9c:	22 1f       	adc	r18, r18
    6f9e:	74 9f       	mul	r23, r20
    6fa0:	33 27       	eor	r19, r19
    6fa2:	a0 0d       	add	r26, r0
    6fa4:	61 1d       	adc	r22, r1
    6fa6:	23 1f       	adc	r18, r19
    6fa8:	84 9f       	mul	r24, r20
    6faa:	60 0d       	add	r22, r0
    6fac:	21 1d       	adc	r18, r1
    6fae:	82 2f       	mov	r24, r18
    6fb0:	76 2f       	mov	r23, r22
    6fb2:	6a 2f       	mov	r22, r26
    6fb4:	11 24       	eor	r1, r1
    6fb6:	9f 57       	subi	r25, 0x7F	; 127
    6fb8:	50 40       	sbci	r21, 0x00	; 0
    6fba:	9a f0       	brmi	.+38     	; 0x6fe2 <__mulsf3_pse+0x88>
    6fbc:	f1 f0       	breq	.+60     	; 0x6ffa <__mulsf3_pse+0xa0>
    6fbe:	88 23       	and	r24, r24
    6fc0:	4a f0       	brmi	.+18     	; 0x6fd4 <__mulsf3_pse+0x7a>
    6fc2:	ee 0f       	add	r30, r30
    6fc4:	ff 1f       	adc	r31, r31
    6fc6:	bb 1f       	adc	r27, r27
    6fc8:	66 1f       	adc	r22, r22
    6fca:	77 1f       	adc	r23, r23
    6fcc:	88 1f       	adc	r24, r24
    6fce:	91 50       	subi	r25, 0x01	; 1
    6fd0:	50 40       	sbci	r21, 0x00	; 0
    6fd2:	a9 f7       	brne	.-22     	; 0x6fbe <__mulsf3_pse+0x64>
    6fd4:	9e 3f       	cpi	r25, 0xFE	; 254
    6fd6:	51 05       	cpc	r21, r1
    6fd8:	80 f0       	brcs	.+32     	; 0x6ffa <__mulsf3_pse+0xa0>
    6fda:	0c 94 46 37 	jmp	0x6e8c	; 0x6e8c <__fp_inf>
    6fde:	0c 94 91 37 	jmp	0x6f22	; 0x6f22 <__fp_szero>
    6fe2:	5f 3f       	cpi	r21, 0xFF	; 255
    6fe4:	e4 f3       	brlt	.-8      	; 0x6fde <__mulsf3_pse+0x84>
    6fe6:	98 3e       	cpi	r25, 0xE8	; 232
    6fe8:	d4 f3       	brlt	.-12     	; 0x6fde <__mulsf3_pse+0x84>
    6fea:	86 95       	lsr	r24
    6fec:	77 95       	ror	r23
    6fee:	67 95       	ror	r22
    6ff0:	b7 95       	ror	r27
    6ff2:	f7 95       	ror	r31
    6ff4:	e7 95       	ror	r30
    6ff6:	9f 5f       	subi	r25, 0xFF	; 255
    6ff8:	c1 f7       	brne	.-16     	; 0x6fea <__mulsf3_pse+0x90>
    6ffa:	fe 2b       	or	r31, r30
    6ffc:	88 0f       	add	r24, r24
    6ffe:	91 1d       	adc	r25, r1
    7000:	96 95       	lsr	r25
    7002:	87 95       	ror	r24
    7004:	97 f9       	bld	r25, 7
    7006:	08 95       	ret

00007008 <__udivmodhi4>:
    7008:	aa 1b       	sub	r26, r26
    700a:	bb 1b       	sub	r27, r27
    700c:	51 e1       	ldi	r21, 0x11	; 17
    700e:	07 c0       	rjmp	.+14     	; 0x701e <__udivmodhi4_ep>

00007010 <__udivmodhi4_loop>:
    7010:	aa 1f       	adc	r26, r26
    7012:	bb 1f       	adc	r27, r27
    7014:	a6 17       	cp	r26, r22
    7016:	b7 07       	cpc	r27, r23
    7018:	10 f0       	brcs	.+4      	; 0x701e <__udivmodhi4_ep>
    701a:	a6 1b       	sub	r26, r22
    701c:	b7 0b       	sbc	r27, r23

0000701e <__udivmodhi4_ep>:
    701e:	88 1f       	adc	r24, r24
    7020:	99 1f       	adc	r25, r25
    7022:	5a 95       	dec	r21
    7024:	a9 f7       	brne	.-22     	; 0x7010 <__udivmodhi4_loop>
    7026:	80 95       	com	r24
    7028:	90 95       	com	r25
    702a:	bc 01       	movw	r22, r24
    702c:	cd 01       	movw	r24, r26
    702e:	08 95       	ret

00007030 <__udivmodsi4>:
    7030:	a1 e2       	ldi	r26, 0x21	; 33
    7032:	1a 2e       	mov	r1, r26
    7034:	aa 1b       	sub	r26, r26
    7036:	bb 1b       	sub	r27, r27
    7038:	fd 01       	movw	r30, r26
    703a:	0d c0       	rjmp	.+26     	; 0x7056 <__udivmodsi4_ep>

0000703c <__udivmodsi4_loop>:
    703c:	aa 1f       	adc	r26, r26
    703e:	bb 1f       	adc	r27, r27
    7040:	ee 1f       	adc	r30, r30
    7042:	ff 1f       	adc	r31, r31
    7044:	a2 17       	cp	r26, r18
    7046:	b3 07       	cpc	r27, r19
    7048:	e4 07       	cpc	r30, r20
    704a:	f5 07       	cpc	r31, r21
    704c:	20 f0       	brcs	.+8      	; 0x7056 <__udivmodsi4_ep>
    704e:	a2 1b       	sub	r26, r18
    7050:	b3 0b       	sbc	r27, r19
    7052:	e4 0b       	sbc	r30, r20
    7054:	f5 0b       	sbc	r31, r21

00007056 <__udivmodsi4_ep>:
    7056:	66 1f       	adc	r22, r22
    7058:	77 1f       	adc	r23, r23
    705a:	88 1f       	adc	r24, r24
    705c:	99 1f       	adc	r25, r25
    705e:	1a 94       	dec	r1
    7060:	69 f7       	brne	.-38     	; 0x703c <__udivmodsi4_loop>
    7062:	60 95       	com	r22
    7064:	70 95       	com	r23
    7066:	80 95       	com	r24
    7068:	90 95       	com	r25
    706a:	9b 01       	movw	r18, r22
    706c:	ac 01       	movw	r20, r24
    706e:	bd 01       	movw	r22, r26
    7070:	cf 01       	movw	r24, r30
    7072:	08 95       	ret

00007074 <__divmodsi4>:
    7074:	05 2e       	mov	r0, r21
    7076:	97 fb       	bst	r25, 7
    7078:	1e f4       	brtc	.+6      	; 0x7080 <__divmodsi4+0xc>
    707a:	00 94       	com	r0
    707c:	0e 94 51 38 	call	0x70a2	; 0x70a2 <__negsi2>
    7080:	57 fd       	sbrc	r21, 7
    7082:	07 d0       	rcall	.+14     	; 0x7092 <__divmodsi4_neg2>
    7084:	0e 94 18 38 	call	0x7030	; 0x7030 <__udivmodsi4>
    7088:	07 fc       	sbrc	r0, 7
    708a:	03 d0       	rcall	.+6      	; 0x7092 <__divmodsi4_neg2>
    708c:	4e f4       	brtc	.+18     	; 0x70a0 <__divmodsi4_exit>
    708e:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__negsi2>

00007092 <__divmodsi4_neg2>:
    7092:	50 95       	com	r21
    7094:	40 95       	com	r20
    7096:	30 95       	com	r19
    7098:	21 95       	neg	r18
    709a:	3f 4f       	sbci	r19, 0xFF	; 255
    709c:	4f 4f       	sbci	r20, 0xFF	; 255
    709e:	5f 4f       	sbci	r21, 0xFF	; 255

000070a0 <__divmodsi4_exit>:
    70a0:	08 95       	ret

000070a2 <__negsi2>:
    70a2:	90 95       	com	r25
    70a4:	80 95       	com	r24
    70a6:	70 95       	com	r23
    70a8:	61 95       	neg	r22
    70aa:	7f 4f       	sbci	r23, 0xFF	; 255
    70ac:	8f 4f       	sbci	r24, 0xFF	; 255
    70ae:	9f 4f       	sbci	r25, 0xFF	; 255
    70b0:	08 95       	ret

000070b2 <__tablejump2__>:
    70b2:	ee 0f       	add	r30, r30
    70b4:	ff 1f       	adc	r31, r31
    70b6:	05 90       	lpm	r0, Z+
    70b8:	f4 91       	lpm	r31, Z
    70ba:	e0 2d       	mov	r30, r0
    70bc:	09 94       	ijmp

000070be <__umulhisi3>:
    70be:	a2 9f       	mul	r26, r18
    70c0:	b0 01       	movw	r22, r0
    70c2:	b3 9f       	mul	r27, r19
    70c4:	c0 01       	movw	r24, r0
    70c6:	a3 9f       	mul	r26, r19
    70c8:	70 0d       	add	r23, r0
    70ca:	81 1d       	adc	r24, r1
    70cc:	11 24       	eor	r1, r1
    70ce:	91 1d       	adc	r25, r1
    70d0:	b2 9f       	mul	r27, r18
    70d2:	70 0d       	add	r23, r0
    70d4:	81 1d       	adc	r24, r1
    70d6:	11 24       	eor	r1, r1
    70d8:	91 1d       	adc	r25, r1
    70da:	08 95       	ret

000070dc <__muluhisi3>:
    70dc:	0e 94 5f 38 	call	0x70be	; 0x70be <__umulhisi3>
    70e0:	a5 9f       	mul	r26, r21
    70e2:	90 0d       	add	r25, r0
    70e4:	b4 9f       	mul	r27, r20
    70e6:	90 0d       	add	r25, r0
    70e8:	a4 9f       	mul	r26, r20
    70ea:	80 0d       	add	r24, r0
    70ec:	91 1d       	adc	r25, r1
    70ee:	11 24       	eor	r1, r1
    70f0:	08 95       	ret

000070f2 <malloc>:
    70f2:	0f 93       	push	r16
    70f4:	1f 93       	push	r17
    70f6:	cf 93       	push	r28
    70f8:	df 93       	push	r29
    70fa:	82 30       	cpi	r24, 0x02	; 2
    70fc:	91 05       	cpc	r25, r1
    70fe:	10 f4       	brcc	.+4      	; 0x7104 <malloc+0x12>
    7100:	82 e0       	ldi	r24, 0x02	; 2
    7102:	90 e0       	ldi	r25, 0x00	; 0
    7104:	e0 91 bd 04 	lds	r30, 0x04BD	; 0x8004bd <__flp>
    7108:	f0 91 be 04 	lds	r31, 0x04BE	; 0x8004be <__flp+0x1>
    710c:	20 e0       	ldi	r18, 0x00	; 0
    710e:	30 e0       	ldi	r19, 0x00	; 0
    7110:	a0 e0       	ldi	r26, 0x00	; 0
    7112:	b0 e0       	ldi	r27, 0x00	; 0
    7114:	30 97       	sbiw	r30, 0x00	; 0
    7116:	19 f1       	breq	.+70     	; 0x715e <malloc+0x6c>
    7118:	40 81       	ld	r20, Z
    711a:	51 81       	ldd	r21, Z+1	; 0x01
    711c:	02 81       	ldd	r16, Z+2	; 0x02
    711e:	13 81       	ldd	r17, Z+3	; 0x03
    7120:	48 17       	cp	r20, r24
    7122:	59 07       	cpc	r21, r25
    7124:	c8 f0       	brcs	.+50     	; 0x7158 <malloc+0x66>
    7126:	84 17       	cp	r24, r20
    7128:	95 07       	cpc	r25, r21
    712a:	69 f4       	brne	.+26     	; 0x7146 <malloc+0x54>
    712c:	10 97       	sbiw	r26, 0x00	; 0
    712e:	31 f0       	breq	.+12     	; 0x713c <malloc+0x4a>
    7130:	12 96       	adiw	r26, 0x02	; 2
    7132:	0c 93       	st	X, r16
    7134:	12 97       	sbiw	r26, 0x02	; 2
    7136:	13 96       	adiw	r26, 0x03	; 3
    7138:	1c 93       	st	X, r17
    713a:	27 c0       	rjmp	.+78     	; 0x718a <malloc+0x98>
    713c:	00 93 bd 04 	sts	0x04BD, r16	; 0x8004bd <__flp>
    7140:	10 93 be 04 	sts	0x04BE, r17	; 0x8004be <__flp+0x1>
    7144:	22 c0       	rjmp	.+68     	; 0x718a <malloc+0x98>
    7146:	21 15       	cp	r18, r1
    7148:	31 05       	cpc	r19, r1
    714a:	19 f0       	breq	.+6      	; 0x7152 <malloc+0x60>
    714c:	42 17       	cp	r20, r18
    714e:	53 07       	cpc	r21, r19
    7150:	18 f4       	brcc	.+6      	; 0x7158 <malloc+0x66>
    7152:	9a 01       	movw	r18, r20
    7154:	bd 01       	movw	r22, r26
    7156:	ef 01       	movw	r28, r30
    7158:	df 01       	movw	r26, r30
    715a:	f8 01       	movw	r30, r16
    715c:	db cf       	rjmp	.-74     	; 0x7114 <malloc+0x22>
    715e:	21 15       	cp	r18, r1
    7160:	31 05       	cpc	r19, r1
    7162:	f9 f0       	breq	.+62     	; 0x71a2 <malloc+0xb0>
    7164:	28 1b       	sub	r18, r24
    7166:	39 0b       	sbc	r19, r25
    7168:	24 30       	cpi	r18, 0x04	; 4
    716a:	31 05       	cpc	r19, r1
    716c:	80 f4       	brcc	.+32     	; 0x718e <malloc+0x9c>
    716e:	8a 81       	ldd	r24, Y+2	; 0x02
    7170:	9b 81       	ldd	r25, Y+3	; 0x03
    7172:	61 15       	cp	r22, r1
    7174:	71 05       	cpc	r23, r1
    7176:	21 f0       	breq	.+8      	; 0x7180 <malloc+0x8e>
    7178:	fb 01       	movw	r30, r22
    717a:	93 83       	std	Z+3, r25	; 0x03
    717c:	82 83       	std	Z+2, r24	; 0x02
    717e:	04 c0       	rjmp	.+8      	; 0x7188 <malloc+0x96>
    7180:	90 93 be 04 	sts	0x04BE, r25	; 0x8004be <__flp+0x1>
    7184:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <__flp>
    7188:	fe 01       	movw	r30, r28
    718a:	32 96       	adiw	r30, 0x02	; 2
    718c:	44 c0       	rjmp	.+136    	; 0x7216 <malloc+0x124>
    718e:	fe 01       	movw	r30, r28
    7190:	e2 0f       	add	r30, r18
    7192:	f3 1f       	adc	r31, r19
    7194:	81 93       	st	Z+, r24
    7196:	91 93       	st	Z+, r25
    7198:	22 50       	subi	r18, 0x02	; 2
    719a:	31 09       	sbc	r19, r1
    719c:	39 83       	std	Y+1, r19	; 0x01
    719e:	28 83       	st	Y, r18
    71a0:	3a c0       	rjmp	.+116    	; 0x7216 <malloc+0x124>
    71a2:	20 91 bb 04 	lds	r18, 0x04BB	; 0x8004bb <__brkval>
    71a6:	30 91 bc 04 	lds	r19, 0x04BC	; 0x8004bc <__brkval+0x1>
    71aa:	23 2b       	or	r18, r19
    71ac:	41 f4       	brne	.+16     	; 0x71be <malloc+0xcc>
    71ae:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    71b2:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    71b6:	30 93 bc 04 	sts	0x04BC, r19	; 0x8004bc <__brkval+0x1>
    71ba:	20 93 bb 04 	sts	0x04BB, r18	; 0x8004bb <__brkval>
    71be:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
    71c2:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
    71c6:	21 15       	cp	r18, r1
    71c8:	31 05       	cpc	r19, r1
    71ca:	41 f4       	brne	.+16     	; 0x71dc <malloc+0xea>
    71cc:	2d b7       	in	r18, 0x3d	; 61
    71ce:	3e b7       	in	r19, 0x3e	; 62
    71d0:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    71d4:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    71d8:	24 1b       	sub	r18, r20
    71da:	35 0b       	sbc	r19, r21
    71dc:	e0 91 bb 04 	lds	r30, 0x04BB	; 0x8004bb <__brkval>
    71e0:	f0 91 bc 04 	lds	r31, 0x04BC	; 0x8004bc <__brkval+0x1>
    71e4:	e2 17       	cp	r30, r18
    71e6:	f3 07       	cpc	r31, r19
    71e8:	a0 f4       	brcc	.+40     	; 0x7212 <malloc+0x120>
    71ea:	2e 1b       	sub	r18, r30
    71ec:	3f 0b       	sbc	r19, r31
    71ee:	28 17       	cp	r18, r24
    71f0:	39 07       	cpc	r19, r25
    71f2:	78 f0       	brcs	.+30     	; 0x7212 <malloc+0x120>
    71f4:	ac 01       	movw	r20, r24
    71f6:	4e 5f       	subi	r20, 0xFE	; 254
    71f8:	5f 4f       	sbci	r21, 0xFF	; 255
    71fa:	24 17       	cp	r18, r20
    71fc:	35 07       	cpc	r19, r21
    71fe:	48 f0       	brcs	.+18     	; 0x7212 <malloc+0x120>
    7200:	4e 0f       	add	r20, r30
    7202:	5f 1f       	adc	r21, r31
    7204:	50 93 bc 04 	sts	0x04BC, r21	; 0x8004bc <__brkval+0x1>
    7208:	40 93 bb 04 	sts	0x04BB, r20	; 0x8004bb <__brkval>
    720c:	81 93       	st	Z+, r24
    720e:	91 93       	st	Z+, r25
    7210:	02 c0       	rjmp	.+4      	; 0x7216 <malloc+0x124>
    7212:	e0 e0       	ldi	r30, 0x00	; 0
    7214:	f0 e0       	ldi	r31, 0x00	; 0
    7216:	cf 01       	movw	r24, r30
    7218:	df 91       	pop	r29
    721a:	cf 91       	pop	r28
    721c:	1f 91       	pop	r17
    721e:	0f 91       	pop	r16
    7220:	08 95       	ret

00007222 <free>:
    7222:	cf 93       	push	r28
    7224:	df 93       	push	r29
    7226:	00 97       	sbiw	r24, 0x00	; 0
    7228:	09 f4       	brne	.+2      	; 0x722c <free+0xa>
    722a:	81 c0       	rjmp	.+258    	; 0x732e <free+0x10c>
    722c:	fc 01       	movw	r30, r24
    722e:	32 97       	sbiw	r30, 0x02	; 2
    7230:	13 82       	std	Z+3, r1	; 0x03
    7232:	12 82       	std	Z+2, r1	; 0x02
    7234:	a0 91 bd 04 	lds	r26, 0x04BD	; 0x8004bd <__flp>
    7238:	b0 91 be 04 	lds	r27, 0x04BE	; 0x8004be <__flp+0x1>
    723c:	10 97       	sbiw	r26, 0x00	; 0
    723e:	81 f4       	brne	.+32     	; 0x7260 <free+0x3e>
    7240:	20 81       	ld	r18, Z
    7242:	31 81       	ldd	r19, Z+1	; 0x01
    7244:	82 0f       	add	r24, r18
    7246:	93 1f       	adc	r25, r19
    7248:	20 91 bb 04 	lds	r18, 0x04BB	; 0x8004bb <__brkval>
    724c:	30 91 bc 04 	lds	r19, 0x04BC	; 0x8004bc <__brkval+0x1>
    7250:	28 17       	cp	r18, r24
    7252:	39 07       	cpc	r19, r25
    7254:	51 f5       	brne	.+84     	; 0x72aa <free+0x88>
    7256:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <__brkval+0x1>
    725a:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <__brkval>
    725e:	67 c0       	rjmp	.+206    	; 0x732e <free+0x10c>
    7260:	ed 01       	movw	r28, r26
    7262:	20 e0       	ldi	r18, 0x00	; 0
    7264:	30 e0       	ldi	r19, 0x00	; 0
    7266:	ce 17       	cp	r28, r30
    7268:	df 07       	cpc	r29, r31
    726a:	40 f4       	brcc	.+16     	; 0x727c <free+0x5a>
    726c:	4a 81       	ldd	r20, Y+2	; 0x02
    726e:	5b 81       	ldd	r21, Y+3	; 0x03
    7270:	9e 01       	movw	r18, r28
    7272:	41 15       	cp	r20, r1
    7274:	51 05       	cpc	r21, r1
    7276:	f1 f0       	breq	.+60     	; 0x72b4 <free+0x92>
    7278:	ea 01       	movw	r28, r20
    727a:	f5 cf       	rjmp	.-22     	; 0x7266 <free+0x44>
    727c:	d3 83       	std	Z+3, r29	; 0x03
    727e:	c2 83       	std	Z+2, r28	; 0x02
    7280:	40 81       	ld	r20, Z
    7282:	51 81       	ldd	r21, Z+1	; 0x01
    7284:	84 0f       	add	r24, r20
    7286:	95 1f       	adc	r25, r21
    7288:	c8 17       	cp	r28, r24
    728a:	d9 07       	cpc	r29, r25
    728c:	59 f4       	brne	.+22     	; 0x72a4 <free+0x82>
    728e:	88 81       	ld	r24, Y
    7290:	99 81       	ldd	r25, Y+1	; 0x01
    7292:	84 0f       	add	r24, r20
    7294:	95 1f       	adc	r25, r21
    7296:	02 96       	adiw	r24, 0x02	; 2
    7298:	91 83       	std	Z+1, r25	; 0x01
    729a:	80 83       	st	Z, r24
    729c:	8a 81       	ldd	r24, Y+2	; 0x02
    729e:	9b 81       	ldd	r25, Y+3	; 0x03
    72a0:	93 83       	std	Z+3, r25	; 0x03
    72a2:	82 83       	std	Z+2, r24	; 0x02
    72a4:	21 15       	cp	r18, r1
    72a6:	31 05       	cpc	r19, r1
    72a8:	29 f4       	brne	.+10     	; 0x72b4 <free+0x92>
    72aa:	f0 93 be 04 	sts	0x04BE, r31	; 0x8004be <__flp+0x1>
    72ae:	e0 93 bd 04 	sts	0x04BD, r30	; 0x8004bd <__flp>
    72b2:	3d c0       	rjmp	.+122    	; 0x732e <free+0x10c>
    72b4:	e9 01       	movw	r28, r18
    72b6:	fb 83       	std	Y+3, r31	; 0x03
    72b8:	ea 83       	std	Y+2, r30	; 0x02
    72ba:	49 91       	ld	r20, Y+
    72bc:	59 91       	ld	r21, Y+
    72be:	c4 0f       	add	r28, r20
    72c0:	d5 1f       	adc	r29, r21
    72c2:	ec 17       	cp	r30, r28
    72c4:	fd 07       	cpc	r31, r29
    72c6:	61 f4       	brne	.+24     	; 0x72e0 <free+0xbe>
    72c8:	80 81       	ld	r24, Z
    72ca:	91 81       	ldd	r25, Z+1	; 0x01
    72cc:	84 0f       	add	r24, r20
    72ce:	95 1f       	adc	r25, r21
    72d0:	02 96       	adiw	r24, 0x02	; 2
    72d2:	e9 01       	movw	r28, r18
    72d4:	99 83       	std	Y+1, r25	; 0x01
    72d6:	88 83       	st	Y, r24
    72d8:	82 81       	ldd	r24, Z+2	; 0x02
    72da:	93 81       	ldd	r25, Z+3	; 0x03
    72dc:	9b 83       	std	Y+3, r25	; 0x03
    72de:	8a 83       	std	Y+2, r24	; 0x02
    72e0:	e0 e0       	ldi	r30, 0x00	; 0
    72e2:	f0 e0       	ldi	r31, 0x00	; 0
    72e4:	12 96       	adiw	r26, 0x02	; 2
    72e6:	8d 91       	ld	r24, X+
    72e8:	9c 91       	ld	r25, X
    72ea:	13 97       	sbiw	r26, 0x03	; 3
    72ec:	00 97       	sbiw	r24, 0x00	; 0
    72ee:	19 f0       	breq	.+6      	; 0x72f6 <free+0xd4>
    72f0:	fd 01       	movw	r30, r26
    72f2:	dc 01       	movw	r26, r24
    72f4:	f7 cf       	rjmp	.-18     	; 0x72e4 <free+0xc2>
    72f6:	8d 91       	ld	r24, X+
    72f8:	9c 91       	ld	r25, X
    72fa:	11 97       	sbiw	r26, 0x01	; 1
    72fc:	9d 01       	movw	r18, r26
    72fe:	2e 5f       	subi	r18, 0xFE	; 254
    7300:	3f 4f       	sbci	r19, 0xFF	; 255
    7302:	82 0f       	add	r24, r18
    7304:	93 1f       	adc	r25, r19
    7306:	20 91 bb 04 	lds	r18, 0x04BB	; 0x8004bb <__brkval>
    730a:	30 91 bc 04 	lds	r19, 0x04BC	; 0x8004bc <__brkval+0x1>
    730e:	28 17       	cp	r18, r24
    7310:	39 07       	cpc	r19, r25
    7312:	69 f4       	brne	.+26     	; 0x732e <free+0x10c>
    7314:	30 97       	sbiw	r30, 0x00	; 0
    7316:	29 f4       	brne	.+10     	; 0x7322 <free+0x100>
    7318:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <__flp+0x1>
    731c:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <__flp>
    7320:	02 c0       	rjmp	.+4      	; 0x7326 <free+0x104>
    7322:	13 82       	std	Z+3, r1	; 0x03
    7324:	12 82       	std	Z+2, r1	; 0x02
    7326:	b0 93 bc 04 	sts	0x04BC, r27	; 0x8004bc <__brkval+0x1>
    732a:	a0 93 bb 04 	sts	0x04BB, r26	; 0x8004bb <__brkval>
    732e:	df 91       	pop	r29
    7330:	cf 91       	pop	r28
    7332:	08 95       	ret

00007334 <strcmp>:
    7334:	fb 01       	movw	r30, r22
    7336:	dc 01       	movw	r26, r24
    7338:	8d 91       	ld	r24, X+
    733a:	01 90       	ld	r0, Z+
    733c:	80 19       	sub	r24, r0
    733e:	01 10       	cpse	r0, r1
    7340:	d9 f3       	breq	.-10     	; 0x7338 <strcmp+0x4>
    7342:	99 0b       	sbc	r25, r25
    7344:	08 95       	ret

00007346 <strcpy>:
    7346:	fb 01       	movw	r30, r22
    7348:	dc 01       	movw	r26, r24
    734a:	01 90       	ld	r0, Z+
    734c:	0d 92       	st	X+, r0
    734e:	00 20       	and	r0, r0
    7350:	e1 f7       	brne	.-8      	; 0x734a <strcpy+0x4>
    7352:	08 95       	ret

00007354 <strncpy>:
    7354:	fb 01       	movw	r30, r22
    7356:	dc 01       	movw	r26, r24
    7358:	41 50       	subi	r20, 0x01	; 1
    735a:	50 40       	sbci	r21, 0x00	; 0
    735c:	48 f0       	brcs	.+18     	; 0x7370 <strncpy+0x1c>
    735e:	01 90       	ld	r0, Z+
    7360:	0d 92       	st	X+, r0
    7362:	00 20       	and	r0, r0
    7364:	c9 f7       	brne	.-14     	; 0x7358 <strncpy+0x4>
    7366:	01 c0       	rjmp	.+2      	; 0x736a <strncpy+0x16>
    7368:	1d 92       	st	X+, r1
    736a:	41 50       	subi	r20, 0x01	; 1
    736c:	50 40       	sbci	r21, 0x00	; 0
    736e:	e0 f7       	brcc	.-8      	; 0x7368 <strncpy+0x14>
    7370:	08 95       	ret

00007372 <strstr>:
    7372:	fb 01       	movw	r30, r22
    7374:	51 91       	ld	r21, Z+
    7376:	55 23       	and	r21, r21
    7378:	a9 f0       	breq	.+42     	; 0x73a4 <strstr+0x32>
    737a:	bf 01       	movw	r22, r30
    737c:	dc 01       	movw	r26, r24
    737e:	4d 91       	ld	r20, X+
    7380:	45 17       	cp	r20, r21
    7382:	41 11       	cpse	r20, r1
    7384:	e1 f7       	brne	.-8      	; 0x737e <strstr+0xc>
    7386:	59 f4       	brne	.+22     	; 0x739e <strstr+0x2c>
    7388:	cd 01       	movw	r24, r26
    738a:	01 90       	ld	r0, Z+
    738c:	00 20       	and	r0, r0
    738e:	49 f0       	breq	.+18     	; 0x73a2 <strstr+0x30>
    7390:	4d 91       	ld	r20, X+
    7392:	40 15       	cp	r20, r0
    7394:	41 11       	cpse	r20, r1
    7396:	c9 f3       	breq	.-14     	; 0x738a <strstr+0x18>
    7398:	fb 01       	movw	r30, r22
    739a:	41 11       	cpse	r20, r1
    739c:	ef cf       	rjmp	.-34     	; 0x737c <strstr+0xa>
    739e:	81 e0       	ldi	r24, 0x01	; 1
    73a0:	90 e0       	ldi	r25, 0x00	; 0
    73a2:	01 97       	sbiw	r24, 0x01	; 1
    73a4:	08 95       	ret

000073a6 <eeprom_read_block>:
    73a6:	dc 01       	movw	r26, r24
    73a8:	cb 01       	movw	r24, r22

000073aa <eeprom_read_blraw>:
    73aa:	fc 01       	movw	r30, r24
    73ac:	e1 99       	sbic	0x1c, 1	; 28
    73ae:	fe cf       	rjmp	.-4      	; 0x73ac <eeprom_read_blraw+0x2>
    73b0:	06 c0       	rjmp	.+12     	; 0x73be <eeprom_read_blraw+0x14>
    73b2:	ff bb       	out	0x1f, r31	; 31
    73b4:	ee bb       	out	0x1e, r30	; 30
    73b6:	e0 9a       	sbi	0x1c, 0	; 28
    73b8:	31 96       	adiw	r30, 0x01	; 1
    73ba:	0d b2       	in	r0, 0x1d	; 29
    73bc:	0d 92       	st	X+, r0
    73be:	41 50       	subi	r20, 0x01	; 1
    73c0:	50 40       	sbci	r21, 0x00	; 0
    73c2:	b8 f7       	brcc	.-18     	; 0x73b2 <eeprom_read_blraw+0x8>
    73c4:	08 95       	ret

000073c6 <_exit>:
    73c6:	f8 94       	cli

000073c8 <__stop_program>:
    73c8:	ff cf       	rjmp	.-2      	; 0x73c8 <__stop_program>
