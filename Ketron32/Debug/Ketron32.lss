
Ketron32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006f88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  00006f88  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000343  0080017c  0080017c  00007138  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00007138  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007168  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008d0  00000000  00000000  000071a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c39f  00000000  00000000  00007a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025bb  00000000  00000000  00013e17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000063a9  00000000  00000000  000163d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000222c  00000000  00000000  0001c77c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b23  00000000  00000000  0001e9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c8bb  00000000  00000000  000204cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000890  00000000  00000000  0002cd86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__ctors_end>
       4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
       8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
       c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      10:	0c 94 f9 32 	jmp	0x65f2	; 0x65f2 <__vector_4>
      14:	0c 94 05 32 	jmp	0x640a	; 0x640a <__vector_5>
      18:	0c 94 cc 32 	jmp	0x6598	; 0x6598 <__vector_6>
      1c:	0c 94 72 32 	jmp	0x64e4	; 0x64e4 <__vector_7>
      20:	0c 94 9f 32 	jmp	0x653e	; 0x653e <__vector_8>
      24:	0c 94 d8 31 	jmp	0x63b0	; 0x63b0 <__vector_9>
      28:	0c 94 45 32 	jmp	0x648a	; 0x648a <__vector_10>
      2c:	0c 94 85 31 	jmp	0x630a	; 0x630a <__vector_11>
      30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      34:	0c 94 08 34 	jmp	0x6810	; 0x6810 <__vector_13>
      38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      3c:	0c 94 cd 33 	jmp	0x679a	; 0x679a <__vector_15>
      40:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__vector_16>
      44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      54:	b2 1e       	adc	r11, r18
      56:	5e 20       	and	r5, r14
      58:	c4 1e       	adc	r12, r20
      5a:	d6 1e       	adc	r13, r22
      5c:	30 1f       	adc	r19, r16
      5e:	5d 1f       	adc	r21, r29
      60:	78 1f       	adc	r23, r24
      62:	ac 1f       	adc	r26, r28
      64:	c7 1f       	adc	r28, r23
      66:	ac 1e       	adc	r10, r28
      68:	e9 28       	or	r14, r9
      6a:	eb 28       	or	r14, r11
      6c:	eb 28       	or	r14, r11
      6e:	eb 28       	or	r14, r11
      70:	eb 28       	or	r14, r11
      72:	eb 28       	or	r14, r11
      74:	eb 28       	or	r14, r11
      76:	eb 28       	or	r14, r11
      78:	eb 28       	or	r14, r11
      7a:	eb 28       	or	r14, r11
      7c:	eb 28       	or	r14, r11
      7e:	eb 28       	or	r14, r11
      80:	eb 28       	or	r14, r11
      82:	eb 28       	or	r14, r11
      84:	eb 28       	or	r14, r11
      86:	eb 28       	or	r14, r11
      88:	e9 28       	or	r14, r9
      8a:	eb 28       	or	r14, r11
      8c:	eb 28       	or	r14, r11
      8e:	eb 28       	or	r14, r11
      90:	eb 28       	or	r14, r11
      92:	eb 28       	or	r14, r11
      94:	eb 28       	or	r14, r11
      96:	eb 28       	or	r14, r11
      98:	eb 28       	or	r14, r11
      9a:	eb 28       	or	r14, r11
      9c:	eb 28       	or	r14, r11
      9e:	eb 28       	or	r14, r11
      a0:	eb 28       	or	r14, r11
      a2:	eb 28       	or	r14, r11
      a4:	eb 28       	or	r14, r11
      a6:	eb 28       	or	r14, r11
      a8:	e9 28       	or	r14, r9
      aa:	eb 28       	or	r14, r11
      ac:	eb 28       	or	r14, r11
      ae:	eb 28       	or	r14, r11
      b0:	eb 28       	or	r14, r11
      b2:	eb 28       	or	r14, r11
      b4:	eb 28       	or	r14, r11
      b6:	eb 28       	or	r14, r11
      b8:	eb 28       	or	r14, r11
      ba:	eb 28       	or	r14, r11
      bc:	eb 28       	or	r14, r11
      be:	eb 28       	or	r14, r11
      c0:	eb 28       	or	r14, r11
      c2:	eb 28       	or	r14, r11
      c4:	eb 28       	or	r14, r11
      c6:	eb 28       	or	r14, r11
      c8:	e9 28       	or	r14, r9
      ca:	eb 28       	or	r14, r11
      cc:	eb 28       	or	r14, r11
      ce:	eb 28       	or	r14, r11
      d0:	eb 28       	or	r14, r11
      d2:	eb 28       	or	r14, r11
      d4:	eb 28       	or	r14, r11
      d6:	eb 28       	or	r14, r11
      d8:	eb 28       	or	r14, r11
      da:	eb 28       	or	r14, r11
      dc:	eb 28       	or	r14, r11
      de:	eb 28       	or	r14, r11
      e0:	eb 28       	or	r14, r11
      e2:	eb 28       	or	r14, r11
      e4:	eb 28       	or	r14, r11
      e6:	eb 28       	or	r14, r11
      e8:	e7 28       	or	r14, r7
      ea:	eb 28       	or	r14, r11
      ec:	eb 28       	or	r14, r11
      ee:	eb 28       	or	r14, r11
      f0:	eb 28       	or	r14, r11
      f2:	eb 28       	or	r14, r11
      f4:	eb 28       	or	r14, r11
      f6:	eb 28       	or	r14, r11
      f8:	eb 28       	or	r14, r11
      fa:	eb 28       	or	r14, r11
      fc:	eb 28       	or	r14, r11
      fe:	eb 28       	or	r14, r11
     100:	eb 28       	or	r14, r11
     102:	eb 28       	or	r14, r11
     104:	eb 28       	or	r14, r11
     106:	eb 28       	or	r14, r11
     108:	e7 28       	or	r14, r7
     10a:	eb 28       	or	r14, r11
     10c:	eb 28       	or	r14, r11
     10e:	eb 28       	or	r14, r11
     110:	eb 28       	or	r14, r11
     112:	eb 28       	or	r14, r11
     114:	eb 28       	or	r14, r11
     116:	eb 28       	or	r14, r11
     118:	eb 28       	or	r14, r11
     11a:	eb 28       	or	r14, r11
     11c:	eb 28       	or	r14, r11
     11e:	eb 28       	or	r14, r11
     120:	eb 28       	or	r14, r11
     122:	eb 28       	or	r14, r11
     124:	eb 28       	or	r14, r11
     126:	eb 28       	or	r14, r11
     128:	e9 28       	or	r14, r9
     12a:	eb 28       	or	r14, r11
     12c:	eb 28       	or	r14, r11
     12e:	eb 28       	or	r14, r11
     130:	eb 28       	or	r14, r11
     132:	eb 28       	or	r14, r11
     134:	eb 28       	or	r14, r11
     136:	eb 28       	or	r14, r11
     138:	eb 28       	or	r14, r11
     13a:	eb 28       	or	r14, r11
     13c:	eb 28       	or	r14, r11
     13e:	eb 28       	or	r14, r11
     140:	eb 28       	or	r14, r11
     142:	eb 28       	or	r14, r11
     144:	eb 28       	or	r14, r11
     146:	eb 28       	or	r14, r11
     148:	eb 28       	or	r14, r11
     14a:	e7 28       	or	r14, r7
     14c:	e9 28       	or	r14, r9
     14e:	e7 28       	or	r14, r7
     150:	eb 28       	or	r14, r11
     152:	eb 28       	or	r14, r11
     154:	ed 28       	or	r14, r13
     156:	eb 28       	or	r14, r11
     158:	ed 28       	or	r14, r13
     15a:	ed 28       	or	r14, r13
     15c:	ed 28       	or	r14, r13
     15e:	ed 28       	or	r14, r13
     160:	ed 28       	or	r14, r13
     162:	eb 28       	or	r14, r11
     164:	ed 28       	or	r14, r13
     166:	ed 28       	or	r14, r13
     168:	62 2c       	mov	r6, r2
     16a:	6b 2c       	mov	r6, r11
     16c:	d2 2c       	mov	r13, r2
     16e:	d9 2c       	mov	r13, r9
     170:	bd 2d       	mov	r27, r13
     172:	bd 2d       	mov	r27, r13
     174:	bd 2d       	mov	r27, r13
     176:	bd 2d       	mov	r27, r13
     178:	bd 2d       	mov	r27, r13
     17a:	bd 2d       	mov	r27, r13
     17c:	68 2d       	mov	r22, r8
     17e:	6e 2d       	mov	r22, r14
     180:	81 2d       	mov	r24, r1
     182:	94 2d       	mov	r25, r4
     184:	a9 2d       	mov	r26, r9

00000186 <LcdCustomChar>:
     186:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     196:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     1a6:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     1b6:	03 07 0f 1f 0f 07 03 00 00 1f 1f 1f 1f 1f 1f 00     ................
     1c6:	1b 1b 1b 1b 1b 1b 1b 00 18 1c 1e 1f 1e 1c 18 00     ................
     1d6:	00 04 04 0e 0e 1f 1f 00 00 1f 1f 0e 0e 04 04 00     ................
	...
     1ee:	00 0e 19 15 13 0e 00 00 00 0e 15 15 15 0e 00 00     ................
     1fe:	00 0e 13 15 19 0e 00 00 00 0e 11 1f 11 0e 00 00     ................

0000020e <__ctors_end>:
     20e:	11 24       	eor	r1, r1
     210:	1f be       	out	0x3f, r1	; 63
     212:	cf e5       	ldi	r28, 0x5F	; 95
     214:	d8 e0       	ldi	r29, 0x08	; 8
     216:	de bf       	out	0x3e, r29	; 62
     218:	cd bf       	out	0x3d, r28	; 61

0000021a <__do_copy_data>:
     21a:	11 e0       	ldi	r17, 0x01	; 1
     21c:	a0 e6       	ldi	r26, 0x60	; 96
     21e:	b0 e0       	ldi	r27, 0x00	; 0
     220:	e8 e8       	ldi	r30, 0x88	; 136
     222:	ff e6       	ldi	r31, 0x6F	; 111
     224:	02 c0       	rjmp	.+4      	; 0x22a <__do_copy_data+0x10>
     226:	05 90       	lpm	r0, Z+
     228:	0d 92       	st	X+, r0
     22a:	ac 37       	cpi	r26, 0x7C	; 124
     22c:	b1 07       	cpc	r27, r17
     22e:	d9 f7       	brne	.-10     	; 0x226 <__do_copy_data+0xc>

00000230 <__do_clear_bss>:
     230:	24 e0       	ldi	r18, 0x04	; 4
     232:	ac e7       	ldi	r26, 0x7C	; 124
     234:	b1 e0       	ldi	r27, 0x01	; 1
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	af 3b       	cpi	r26, 0xBF	; 191
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <main>
     244:	0c 94 c2 37 	jmp	0x6f84	; 0x6f84 <_exit>

00000248 <__bad_interrupt>:
     248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <a2dSetPrescaler>:

// return TRUE if conversion is complete
u08 a2dIsComplete(void)
{
	return bit_is_set(ADCSR, ADSC);
}
     24c:	96 b1       	in	r25, 0x06	; 6
     24e:	98 7f       	andi	r25, 0xF8	; 248
     250:	89 2b       	or	r24, r25
     252:	86 b9       	out	0x06, r24	; 6
     254:	08 95       	ret

00000256 <a2dSetReference>:
     256:	27 b1       	in	r18, 0x07	; 7
     258:	2f 73       	andi	r18, 0x3F	; 63
     25a:	30 e4       	ldi	r19, 0x40	; 64
     25c:	83 9f       	mul	r24, r19
     25e:	c0 01       	movw	r24, r0
     260:	11 24       	eor	r1, r1
     262:	82 2b       	or	r24, r18
     264:	87 b9       	out	0x07, r24	; 7
     266:	08 95       	ret

00000268 <a2dInit>:
     268:	37 9a       	sbi	0x06, 7	; 6
     26a:	35 98       	cbi	0x06, 5	; 6
     26c:	86 e0       	ldi	r24, 0x06	; 6
     26e:	0e 94 26 01 	call	0x24c	; 0x24c <a2dSetPrescaler>
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	0e 94 2b 01 	call	0x256	; 0x256 <a2dSetReference>
     278:	3d 98       	cbi	0x07, 5	; 7
     27a:	33 9a       	sbi	0x06, 3	; 6
     27c:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <a2dCompleteFlag>
     280:	78 94       	sei
     282:	08 95       	ret

00000284 <a2dSetChannel>:
     284:	97 b1       	in	r25, 0x07	; 7
     286:	90 7e       	andi	r25, 0xE0	; 224
     288:	8f 71       	andi	r24, 0x1F	; 31
     28a:	89 2b       	or	r24, r25
     28c:	87 b9       	out	0x07, r24	; 7
     28e:	08 95       	ret

00000290 <a2dStartConvert>:
     290:	34 9a       	sbi	0x06, 4	; 6
     292:	36 9a       	sbi	0x06, 6	; 6
     294:	08 95       	ret

00000296 <a2dConvert10bit>:

// Perform a 10-bit conversion
// starts conversion, waits until conversion is done, and returns result
unsigned short a2dConvert10bit(unsigned char ch)
{
	a2dCompleteFlag = FALSE;				// clear conversion complete flag
     296:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <a2dCompleteFlag>
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
     29a:	97 b1       	in	r25, 0x07	; 7
     29c:	90 7e       	andi	r25, 0xE0	; 224
     29e:	8f 71       	andi	r24, 0x1F	; 31
     2a0:	89 2b       	or	r24, r25
     2a2:	87 b9       	out	0x07, r24	; 7
	sbi(ADCSR, ADIF);						// clear hardware "conversion complete" flag 
     2a4:	34 9a       	sbi	0x06, 4	; 6
	sbi(ADCSR, ADSC);						// start conversion
     2a6:	36 9a       	sbi	0x06, 6	; 6
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSR, ADSC) );		// wait until conversion complete
     2a8:	36 99       	sbic	0x06, 6	; 6
     2aa:	fe cf       	rjmp	.-4      	; 0x2a8 <a2dConvert10bit+0x12>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	return (inb(ADCL) | (inb(ADCH)<<8));	// read ADC (full 10 bits);
     2ac:	84 b1       	in	r24, 0x04	; 4
     2ae:	25 b1       	in	r18, 0x05	; 5
     2b0:	90 e0       	ldi	r25, 0x00	; 0
}
     2b2:	92 2b       	or	r25, r18
     2b4:	08 95       	ret

000002b6 <a2dConvert8bit>:
// Perform a 8-bit conversion.
// starts conversion, waits until conversion is done, and returns result
unsigned char a2dConvert8bit(unsigned char ch)
{
	// do 10-bit conversion and return highest 8 bits
	return a2dConvert10bit(ch)>>2;			// return ADC MSB byte
     2b6:	0e 94 4b 01 	call	0x296	; 0x296 <a2dConvert10bit>
     2ba:	96 95       	lsr	r25
     2bc:	87 95       	ror	r24
     2be:	96 95       	lsr	r25
     2c0:	87 95       	ror	r24
}
     2c2:	08 95       	ret

000002c4 <__vector_16>:

//! Interrupt handler for ADC complete interrupt.
SIGNAL(ADC_vect)
{
     2c4:	1f 92       	push	r1
     2c6:	0f 92       	push	r0
     2c8:	0f b6       	in	r0, 0x3f	; 63
     2ca:	0f 92       	push	r0
     2cc:	11 24       	eor	r1, r1
     2ce:	8f 93       	push	r24
	// set the a2d conversion flag to indicate "complete"
	a2dCompleteFlag = TRUE;
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <a2dCompleteFlag>
	
}
     2d6:	8f 91       	pop	r24
     2d8:	0f 90       	pop	r0
     2da:	0f be       	out	0x3f, r0	; 63
     2dc:	0f 90       	pop	r0
     2de:	1f 90       	pop	r1
     2e0:	18 95       	reti

000002e2 <bufferInit>:
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
	return data;
}
     2e2:	fc 01       	movw	r30, r24
     2e4:	8f b7       	in	r24, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	71 83       	std	Z+1, r23	; 0x01
     2ea:	60 83       	st	Z, r22
     2ec:	53 83       	std	Z+3, r21	; 0x03
     2ee:	42 83       	std	Z+2, r20	; 0x02
     2f0:	17 82       	std	Z+7, r1	; 0x07
     2f2:	16 82       	std	Z+6, r1	; 0x06
     2f4:	15 82       	std	Z+5, r1	; 0x05
     2f6:	14 82       	std	Z+4, r1	; 0x04
     2f8:	8f bf       	out	0x3f, r24	; 63
     2fa:	08 95       	ret

000002fc <bufferGetFromFront>:
     2fc:	fc 01       	movw	r30, r24
     2fe:	9f b7       	in	r25, 0x3f	; 63
     300:	f8 94       	cli
     302:	44 81       	ldd	r20, Z+4	; 0x04
     304:	55 81       	ldd	r21, Z+5	; 0x05
     306:	41 15       	cp	r20, r1
     308:	51 05       	cpc	r21, r1
     30a:	c9 f0       	breq	.+50     	; 0x33e <bufferGetFromFront+0x42>
     30c:	26 81       	ldd	r18, Z+6	; 0x06
     30e:	37 81       	ldd	r19, Z+7	; 0x07
     310:	a0 81       	ld	r26, Z
     312:	b1 81       	ldd	r27, Z+1	; 0x01
     314:	a2 0f       	add	r26, r18
     316:	b3 1f       	adc	r27, r19
     318:	8c 91       	ld	r24, X
     31a:	2f 5f       	subi	r18, 0xFF	; 255
     31c:	3f 4f       	sbci	r19, 0xFF	; 255
     31e:	37 83       	std	Z+7, r19	; 0x07
     320:	26 83       	std	Z+6, r18	; 0x06
     322:	62 81       	ldd	r22, Z+2	; 0x02
     324:	73 81       	ldd	r23, Z+3	; 0x03
     326:	26 17       	cp	r18, r22
     328:	37 07       	cpc	r19, r23
     32a:	20 f0       	brcs	.+8      	; 0x334 <bufferGetFromFront+0x38>
     32c:	26 1b       	sub	r18, r22
     32e:	37 0b       	sbc	r19, r23
     330:	37 83       	std	Z+7, r19	; 0x07
     332:	26 83       	std	Z+6, r18	; 0x06
     334:	41 50       	subi	r20, 0x01	; 1
     336:	51 09       	sbc	r21, r1
     338:	55 83       	std	Z+5, r21	; 0x05
     33a:	44 83       	std	Z+4, r20	; 0x04
     33c:	01 c0       	rjmp	.+2      	; 0x340 <bufferGetFromFront+0x44>
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	9f bf       	out	0x3f, r25	; 63
     342:	08 95       	ret

00000344 <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     344:	cf 93       	push	r28
     346:	fc 01       	movw	r30, r24
     348:	c6 2f       	mov	r28, r22
	// begin critical section
	CRITICAL_SECTION_START;
     34a:	4f b7       	in	r20, 0x3f	; 63
     34c:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     34e:	24 81       	ldd	r18, Z+4	; 0x04
     350:	35 81       	ldd	r19, Z+5	; 0x05
     352:	62 81       	ldd	r22, Z+2	; 0x02
     354:	73 81       	ldd	r23, Z+3	; 0x03
     356:	26 17       	cp	r18, r22
     358:	37 07       	cpc	r19, r23
     35a:	98 f4       	brcc	.+38     	; 0x382 <bufferAddToEnd+0x3e>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     35c:	86 81       	ldd	r24, Z+6	; 0x06
     35e:	97 81       	ldd	r25, Z+7	; 0x07
     360:	82 0f       	add	r24, r18
     362:	93 1f       	adc	r25, r19
     364:	0e 94 e3 35 	call	0x6bc6	; 0x6bc6 <__udivmodhi4>
     368:	a0 81       	ld	r26, Z
     36a:	b1 81       	ldd	r27, Z+1	; 0x01
     36c:	a8 0f       	add	r26, r24
     36e:	b9 1f       	adc	r27, r25
     370:	cc 93       	st	X, r28
		// increment the length
		buffer->datalength++;
     372:	84 81       	ldd	r24, Z+4	; 0x04
     374:	95 81       	ldd	r25, Z+5	; 0x05
     376:	01 96       	adiw	r24, 0x01	; 1
     378:	95 83       	std	Z+5, r25	; 0x05
     37a:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     37c:	4f bf       	out	0x3f, r20	; 63
		// return success
		return -1;
     37e:	8f ef       	ldi	r24, 0xFF	; 255
     380:	02 c0       	rjmp	.+4      	; 0x386 <bufferAddToEnd+0x42>
	}
	// end critical section
	CRITICAL_SECTION_END;
     382:	4f bf       	out	0x3f, r20	; 63
	// return failure
	return 0;
     384:	80 e0       	ldi	r24, 0x00	; 0
}
     386:	cf 91       	pop	r28
     388:	08 95       	ret

0000038a <mem_cpy>:
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj.fs, res);
}
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	42 30       	cpi	r20, 0x02	; 2
     390:	51 05       	cpc	r21, r1
     392:	c0 f0       	brcs	.+48     	; 0x3c4 <mem_cpy+0x3a>
     394:	db 01       	movw	r26, r22
     396:	fc 01       	movw	r30, r24
     398:	9a 01       	movw	r18, r20
     39a:	cd 91       	ld	r28, X+
     39c:	dd 91       	ld	r29, X+
     39e:	c1 93       	st	Z+, r28
     3a0:	d1 93       	st	Z+, r29
     3a2:	22 50       	subi	r18, 0x02	; 2
     3a4:	31 09       	sbc	r19, r1
     3a6:	22 30       	cpi	r18, 0x02	; 2
     3a8:	31 05       	cpc	r19, r1
     3aa:	b8 f7       	brcc	.-18     	; 0x39a <mem_cpy+0x10>
     3ac:	9a 01       	movw	r18, r20
     3ae:	22 50       	subi	r18, 0x02	; 2
     3b0:	31 09       	sbc	r19, r1
     3b2:	2e 7f       	andi	r18, 0xFE	; 254
     3b4:	2e 5f       	subi	r18, 0xFE	; 254
     3b6:	3f 4f       	sbci	r19, 0xFF	; 255
     3b8:	82 0f       	add	r24, r18
     3ba:	93 1f       	adc	r25, r19
     3bc:	62 0f       	add	r22, r18
     3be:	73 1f       	adc	r23, r19
     3c0:	41 70       	andi	r20, 0x01	; 1
     3c2:	55 27       	eor	r21, r21
     3c4:	41 15       	cp	r20, r1
     3c6:	51 05       	cpc	r21, r1
     3c8:	49 f0       	breq	.+18     	; 0x3dc <mem_cpy+0x52>
     3ca:	db 01       	movw	r26, r22
     3cc:	fc 01       	movw	r30, r24
     3ce:	48 0f       	add	r20, r24
     3d0:	59 1f       	adc	r21, r25
     3d2:	9d 91       	ld	r25, X+
     3d4:	91 93       	st	Z+, r25
     3d6:	e4 17       	cp	r30, r20
     3d8:	f5 07       	cpc	r31, r21
     3da:	d9 f7       	brne	.-10     	; 0x3d2 <mem_cpy+0x48>
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	08 95       	ret

000003e2 <get_fileinfo>:
     3e2:	0f 93       	push	r16
     3e4:	1f 93       	push	r17
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
     3ea:	fb 01       	movw	r30, r22
     3ec:	39 96       	adiw	r30, 0x09	; 9
     3ee:	dc 01       	movw	r26, r24
     3f0:	1e 96       	adiw	r26, 0x0e	; 14
     3f2:	0d 91       	ld	r16, X+
     3f4:	1d 91       	ld	r17, X+
     3f6:	2d 91       	ld	r18, X+
     3f8:	3c 91       	ld	r19, X
     3fa:	51 97       	sbiw	r26, 0x11	; 17
     3fc:	01 2b       	or	r16, r17
     3fe:	02 2b       	or	r16, r18
     400:	03 2b       	or	r16, r19
     402:	09 f4       	brne	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     404:	51 c0       	rjmp	.+162    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     406:	52 96       	adiw	r26, 0x12	; 18
     408:	4d 91       	ld	r20, X+
     40a:	5c 91       	ld	r21, X
     40c:	53 97       	sbiw	r26, 0x13	; 19
     40e:	ea 01       	movw	r28, r20
     410:	88 81       	ld	r24, Y
     412:	80 32       	cpi	r24, 0x20	; 32
     414:	b9 f0       	breq	.+46     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     416:	9a 01       	movw	r18, r20
     418:	2f 5f       	subi	r18, 0xFF	; 255
     41a:	3f 4f       	sbci	r19, 0xFF	; 255
     41c:	db 01       	movw	r26, r22
     41e:	51 96       	adiw	r26, 0x11	; 17
     420:	95 ee       	ldi	r25, 0xE5	; 229
     422:	05 c0       	rjmp	.+10     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     424:	e9 01       	movw	r28, r18
     426:	89 91       	ld	r24, Y+
     428:	9e 01       	movw	r18, r28
     42a:	80 32       	cpi	r24, 0x20	; 32
     42c:	69 f0       	breq	.+26     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     42e:	85 30       	cpi	r24, 0x05	; 5
     430:	09 f4       	brne	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     432:	89 2f       	mov	r24, r25
     434:	31 96       	adiw	r30, 0x01	; 1
     436:	ef 01       	movw	r28, r30
     438:	21 97       	sbiw	r28, 0x01	; 1
     43a:	88 83       	st	Y, r24
     43c:	ea 17       	cp	r30, r26
     43e:	fb 07       	cpc	r31, r27
     440:	89 f7       	brne	.-30     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     442:	03 c0       	rjmp	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     444:	df 01       	movw	r26, r30
     446:	01 c0       	rjmp	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	df 01       	movw	r26, r30
     44a:	fa 01       	movw	r30, r20
     44c:	80 85       	ldd	r24, Z+8	; 0x08
     44e:	80 32       	cpi	r24, 0x20	; 32
     450:	69 f0       	breq	.+26     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     452:	8e e2       	ldi	r24, 0x2E	; 46
     454:	8c 93       	st	X, r24
     456:	80 85       	ldd	r24, Z+8	; 0x08
     458:	80 32       	cpi	r24, 0x20	; 32
     45a:	41 f5       	brne	.+80     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     45c:	fd 01       	movw	r30, r26
     45e:	31 96       	adiw	r30, 0x01	; 1
     460:	06 c0       	rjmp	.+12     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     462:	fd 01       	movw	r30, r26
     464:	34 96       	adiw	r30, 0x04	; 4
     466:	13 96       	adiw	r26, 0x03	; 3
     468:	8c 93       	st	X, r24
     46a:	01 c0       	rjmp	.+2      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     46c:	fd 01       	movw	r30, r26
     46e:	da 01       	movw	r26, r20
     470:	1b 96       	adiw	r26, 0x0b	; 11
     472:	8c 91       	ld	r24, X
     474:	1b 97       	sbiw	r26, 0x0b	; 11
     476:	eb 01       	movw	r28, r22
     478:	88 87       	std	Y+8, r24	; 0x08
     47a:	5c 96       	adiw	r26, 0x1c	; 28
     47c:	8d 91       	ld	r24, X+
     47e:	9d 91       	ld	r25, X+
     480:	0d 90       	ld	r0, X+
     482:	bc 91       	ld	r27, X
     484:	a0 2d       	mov	r26, r0
     486:	88 83       	st	Y, r24
     488:	99 83       	std	Y+1, r25	; 0x01
     48a:	aa 83       	std	Y+2, r26	; 0x02
     48c:	bb 83       	std	Y+3, r27	; 0x03
     48e:	da 01       	movw	r26, r20
     490:	58 96       	adiw	r26, 0x18	; 24
     492:	8d 91       	ld	r24, X+
     494:	9c 91       	ld	r25, X
     496:	59 97       	sbiw	r26, 0x19	; 25
     498:	9d 83       	std	Y+5, r25	; 0x05
     49a:	8c 83       	std	Y+4, r24	; 0x04
     49c:	56 96       	adiw	r26, 0x16	; 22
     49e:	8d 91       	ld	r24, X+
     4a0:	9c 91       	ld	r25, X
     4a2:	57 97       	sbiw	r26, 0x17	; 23
     4a4:	9f 83       	std	Y+7, r25	; 0x07
     4a6:	8e 83       	std	Y+6, r24	; 0x06
     4a8:	10 82       	st	Z, r1
     4aa:	11 c0       	rjmp	.+34     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4ac:	fd 01       	movw	r30, r26
     4ae:	32 96       	adiw	r30, 0x02	; 2
     4b0:	11 96       	adiw	r26, 0x01	; 1
     4b2:	8c 93       	st	X, r24
     4b4:	11 97       	sbiw	r26, 0x01	; 1
     4b6:	ea 01       	movw	r28, r20
     4b8:	89 85       	ldd	r24, Y+9	; 0x09
     4ba:	80 32       	cpi	r24, 0x20	; 32
     4bc:	c1 f2       	breq	.-80     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     4be:	31 96       	adiw	r30, 0x01	; 1
     4c0:	12 96       	adiw	r26, 0x02	; 2
     4c2:	8c 93       	st	X, r24
     4c4:	12 97       	sbiw	r26, 0x02	; 2
     4c6:	8a 85       	ldd	r24, Y+10	; 0x0a
     4c8:	80 32       	cpi	r24, 0x20	; 32
     4ca:	59 f6       	brne	.-106    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     4cc:	d0 cf       	rjmp	.-96     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	1f 91       	pop	r17
     4d4:	0f 91       	pop	r16
     4d6:	08 95       	ret

000004d8 <move_window>:
     4d8:	4f 92       	push	r4
     4da:	5f 92       	push	r5
     4dc:	6f 92       	push	r6
     4de:	7f 92       	push	r7
     4e0:	af 92       	push	r10
     4e2:	bf 92       	push	r11
     4e4:	cf 92       	push	r12
     4e6:	df 92       	push	r13
     4e8:	ef 92       	push	r14
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	fc 01       	movw	r30, r24
     4f6:	c6 a4       	ldd	r12, Z+46	; 0x2e
     4f8:	d7 a4       	ldd	r13, Z+47	; 0x2f
     4fa:	e0 a8       	ldd	r14, Z+48	; 0x30
     4fc:	f1 a8       	ldd	r15, Z+49	; 0x31
     4fe:	c4 16       	cp	r12, r20
     500:	d5 06       	cpc	r13, r21
     502:	e6 06       	cpc	r14, r22
     504:	f7 06       	cpc	r15, r23
     506:	09 f4       	brne	.+2      	; 0x50a <move_window+0x32>
     508:	4f c0       	rjmp	.+158    	; 0x5a8 <move_window+0xd0>
     50a:	2a 01       	movw	r4, r20
     50c:	3b 01       	movw	r6, r22
     50e:	ec 01       	movw	r28, r24
     510:	84 81       	ldd	r24, Z+4	; 0x04
     512:	88 23       	and	r24, r24
     514:	a1 f1       	breq	.+104    	; 0x57e <move_window+0xa6>
     516:	5f 01       	movw	r10, r30
     518:	f2 e3       	ldi	r31, 0x32	; 50
     51a:	af 0e       	add	r10, r31
     51c:	b1 1c       	adc	r11, r1
     51e:	01 e0       	ldi	r16, 0x01	; 1
     520:	a7 01       	movw	r20, r14
     522:	96 01       	movw	r18, r12
     524:	b5 01       	movw	r22, r10
     526:	89 81       	ldd	r24, Y+1	; 0x01
     528:	0e 94 c6 2b 	call	0x578c	; 0x578c <disk_write>
     52c:	81 11       	cpse	r24, r1
     52e:	3e c0       	rjmp	.+124    	; 0x5ac <move_window+0xd4>
     530:	1c 82       	std	Y+4, r1	; 0x04
     532:	4a a1       	ldd	r20, Y+34	; 0x22
     534:	5b a1       	ldd	r21, Y+35	; 0x23
     536:	6c a1       	ldd	r22, Y+36	; 0x24
     538:	7d a1       	ldd	r23, Y+37	; 0x25
     53a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     53c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     53e:	a8 a1       	ldd	r26, Y+32	; 0x20
     540:	b9 a1       	ldd	r27, Y+33	; 0x21
     542:	84 0f       	add	r24, r20
     544:	95 1f       	adc	r25, r21
     546:	a6 1f       	adc	r26, r22
     548:	b7 1f       	adc	r27, r23
     54a:	c8 16       	cp	r12, r24
     54c:	d9 06       	cpc	r13, r25
     54e:	ea 06       	cpc	r14, r26
     550:	fb 06       	cpc	r15, r27
     552:	a8 f4       	brcc	.+42     	; 0x57e <move_window+0xa6>
     554:	1b 81       	ldd	r17, Y+3	; 0x03
     556:	12 30       	cpi	r17, 0x02	; 2
     558:	90 f0       	brcs	.+36     	; 0x57e <move_window+0xa6>
     55a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     55c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     55e:	a8 a1       	ldd	r26, Y+32	; 0x20
     560:	b9 a1       	ldd	r27, Y+33	; 0x21
     562:	c8 0e       	add	r12, r24
     564:	d9 1e       	adc	r13, r25
     566:	ea 1e       	adc	r14, r26
     568:	fb 1e       	adc	r15, r27
     56a:	01 e0       	ldi	r16, 0x01	; 1
     56c:	a7 01       	movw	r20, r14
     56e:	96 01       	movw	r18, r12
     570:	b5 01       	movw	r22, r10
     572:	89 81       	ldd	r24, Y+1	; 0x01
     574:	0e 94 c6 2b 	call	0x578c	; 0x578c <disk_write>
     578:	11 50       	subi	r17, 0x01	; 1
     57a:	11 30       	cpi	r17, 0x01	; 1
     57c:	71 f7       	brne	.-36     	; 0x55a <move_window+0x82>
     57e:	41 14       	cp	r4, r1
     580:	51 04       	cpc	r5, r1
     582:	61 04       	cpc	r6, r1
     584:	71 04       	cpc	r7, r1
     586:	a1 f0       	breq	.+40     	; 0x5b0 <move_window+0xd8>
     588:	01 e0       	ldi	r16, 0x01	; 1
     58a:	a3 01       	movw	r20, r6
     58c:	92 01       	movw	r18, r4
     58e:	be 01       	movw	r22, r28
     590:	6e 5c       	subi	r22, 0xCE	; 206
     592:	7f 4f       	sbci	r23, 0xFF	; 255
     594:	89 81       	ldd	r24, Y+1	; 0x01
     596:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <disk_read>
     59a:	81 11       	cpse	r24, r1
     59c:	0b c0       	rjmp	.+22     	; 0x5b4 <move_window+0xdc>
     59e:	4e a6       	std	Y+46, r4	; 0x2e
     5a0:	5f a6       	std	Y+47, r5	; 0x2f
     5a2:	68 aa       	std	Y+48, r6	; 0x30
     5a4:	79 aa       	std	Y+49, r7	; 0x31
     5a6:	07 c0       	rjmp	.+14     	; 0x5b6 <move_window+0xde>
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	05 c0       	rjmp	.+10     	; 0x5b6 <move_window+0xde>
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	03 c0       	rjmp	.+6      	; 0x5b6 <move_window+0xde>
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	01 c0       	rjmp	.+2      	; 0x5b6 <move_window+0xde>
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	ff 90       	pop	r15
     5c0:	ef 90       	pop	r14
     5c2:	df 90       	pop	r13
     5c4:	cf 90       	pop	r12
     5c6:	bf 90       	pop	r11
     5c8:	af 90       	pop	r10
     5ca:	7f 90       	pop	r7
     5cc:	6f 90       	pop	r6
     5ce:	5f 90       	pop	r5
     5d0:	4f 90       	pop	r4
     5d2:	08 95       	ret

000005d4 <check_fs>:
     5d4:	0f 93       	push	r16
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	ec 01       	movw	r28, r24
     5dc:	9a 01       	movw	r18, r20
     5de:	ab 01       	movw	r20, r22
     5e0:	bc 01       	movw	r22, r24
     5e2:	6e 5c       	subi	r22, 0xCE	; 206
     5e4:	7f 4f       	sbci	r23, 0xFF	; 255
     5e6:	01 e0       	ldi	r16, 0x01	; 1
     5e8:	89 81       	ldd	r24, Y+1	; 0x01
     5ea:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <disk_read>
     5ee:	81 11       	cpse	r24, r1
     5f0:	23 c0       	rjmp	.+70     	; 0x638 <check_fs+0x64>
     5f2:	fe 01       	movw	r30, r28
     5f4:	e0 5d       	subi	r30, 0xD0	; 208
     5f6:	fd 4f       	sbci	r31, 0xFD	; 253
     5f8:	80 81       	ld	r24, Z
     5fa:	91 81       	ldd	r25, Z+1	; 0x01
     5fc:	85 35       	cpi	r24, 0x55	; 85
     5fe:	9a 4a       	sbci	r25, 0xAA	; 170
     600:	e9 f4       	brne	.+58     	; 0x63c <check_fs+0x68>
     602:	e8 5c       	subi	r30, 0xC8	; 200
     604:	f1 40       	sbci	r31, 0x01	; 1
     606:	80 81       	ld	r24, Z
     608:	91 81       	ldd	r25, Z+1	; 0x01
     60a:	a2 81       	ldd	r26, Z+2	; 0x02
     60c:	b3 81       	ldd	r27, Z+3	; 0x03
     60e:	bb 27       	eor	r27, r27
     610:	86 34       	cpi	r24, 0x46	; 70
     612:	91 44       	sbci	r25, 0x41	; 65
     614:	a4 45       	sbci	r26, 0x54	; 84
     616:	b1 05       	cpc	r27, r1
     618:	99 f0       	breq	.+38     	; 0x640 <check_fs+0x6c>
     61a:	cc 57       	subi	r28, 0x7C	; 124
     61c:	df 4f       	sbci	r29, 0xFF	; 255
     61e:	48 81       	ld	r20, Y
     620:	59 81       	ldd	r21, Y+1	; 0x01
     622:	6a 81       	ldd	r22, Y+2	; 0x02
     624:	7b 81       	ldd	r23, Y+3	; 0x03
     626:	77 27       	eor	r23, r23
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	46 34       	cpi	r20, 0x46	; 70
     62c:	51 44       	sbci	r21, 0x41	; 65
     62e:	64 45       	sbci	r22, 0x54	; 84
     630:	71 05       	cpc	r23, r1
     632:	39 f4       	brne	.+14     	; 0x642 <check_fs+0x6e>
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	05 c0       	rjmp	.+10     	; 0x642 <check_fs+0x6e>
     638:	83 e0       	ldi	r24, 0x03	; 3
     63a:	03 c0       	rjmp	.+6      	; 0x642 <check_fs+0x6e>
     63c:	82 e0       	ldi	r24, 0x02	; 2
     63e:	01 c0       	rjmp	.+2      	; 0x642 <check_fs+0x6e>
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	0f 91       	pop	r16
     648:	08 95       	ret

0000064a <validate>:
     64a:	00 97       	sbiw	r24, 0x00	; 0
     64c:	81 f0       	breq	.+32     	; 0x66e <validate+0x24>
     64e:	fc 01       	movw	r30, r24
     650:	20 81       	ld	r18, Z
     652:	22 23       	and	r18, r18
     654:	71 f0       	breq	.+28     	; 0x672 <validate+0x28>
     656:	26 81       	ldd	r18, Z+6	; 0x06
     658:	37 81       	ldd	r19, Z+7	; 0x07
     65a:	26 17       	cp	r18, r22
     65c:	37 07       	cpc	r19, r23
     65e:	59 f4       	brne	.+22     	; 0x676 <validate+0x2c>
     660:	81 81       	ldd	r24, Z+1	; 0x01
     662:	0e 94 6c 2b 	call	0x56d8	; 0x56d8 <disk_status>
     666:	80 fd       	sbrc	r24, 0
     668:	08 c0       	rjmp	.+16     	; 0x67a <validate+0x30>
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	08 95       	ret
     66e:	89 e0       	ldi	r24, 0x09	; 9
     670:	08 95       	ret
     672:	89 e0       	ldi	r24, 0x09	; 9
     674:	08 95       	ret
     676:	89 e0       	ldi	r24, 0x09	; 9
     678:	08 95       	ret
     67a:	83 e0       	ldi	r24, 0x03	; 3
     67c:	08 95       	ret

0000067e <chk_mounted>:
     67e:	2f 92       	push	r2
     680:	3f 92       	push	r3
     682:	4f 92       	push	r4
     684:	5f 92       	push	r5
     686:	6f 92       	push	r6
     688:	7f 92       	push	r7
     68a:	8f 92       	push	r8
     68c:	9f 92       	push	r9
     68e:	af 92       	push	r10
     690:	bf 92       	push	r11
     692:	cf 92       	push	r12
     694:	df 92       	push	r13
     696:	ef 92       	push	r14
     698:	ff 92       	push	r15
     69a:	0f 93       	push	r16
     69c:	1f 93       	push	r17
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	cd b7       	in	r28, 0x3d	; 61
     6a4:	de b7       	in	r29, 0x3e	; 62
     6a6:	2e 97       	sbiw	r28, 0x0e	; 14
     6a8:	0f b6       	in	r0, 0x3f	; 63
     6aa:	f8 94       	cli
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	cd bf       	out	0x3d, r28	; 61
     6b2:	dc 01       	movw	r26, r24
     6b4:	ed 91       	ld	r30, X+
     6b6:	fc 91       	ld	r31, X
     6b8:	11 97       	sbiw	r26, 0x01	; 1
     6ba:	20 81       	ld	r18, Z
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	20 53       	subi	r18, 0x30	; 48
     6c0:	31 09       	sbc	r19, r1
     6c2:	2a 30       	cpi	r18, 0x0A	; 10
     6c4:	31 05       	cpc	r19, r1
     6c6:	38 f4       	brcc	.+14     	; 0x6d6 <chk_mounted+0x58>
     6c8:	51 81       	ldd	r21, Z+1	; 0x01
     6ca:	5a 33       	cpi	r21, 0x3A	; 58
     6cc:	21 f4       	brne	.+8      	; 0x6d6 <chk_mounted+0x58>
     6ce:	32 96       	adiw	r30, 0x02	; 2
     6d0:	ed 93       	st	X+, r30
     6d2:	fc 93       	st	X, r31
     6d4:	03 c0       	rjmp	.+6      	; 0x6dc <chk_mounted+0x5e>
     6d6:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <__data_end>
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	23 2b       	or	r18, r19
     6de:	09 f0       	breq	.+2      	; 0x6e2 <chk_mounted+0x64>
     6e0:	c0 c1       	rjmp	.+896    	; 0xa62 <__stack+0x203>
     6e2:	e0 91 7f 01 	lds	r30, 0x017F	; 0x80017f <FatFs>
     6e6:	f0 91 80 01 	lds	r31, 0x0180	; 0x800180 <FatFs+0x1>
     6ea:	fe 87       	std	Y+14, r31	; 0x0e
     6ec:	ed 87       	std	Y+13, r30	; 0x0d
     6ee:	db 01       	movw	r26, r22
     6f0:	ed 93       	st	X+, r30
     6f2:	fc 93       	st	X, r31
     6f4:	30 97       	sbiw	r30, 0x00	; 0
     6f6:	09 f4       	brne	.+2      	; 0x6fa <chk_mounted+0x7c>
     6f8:	b6 c1       	rjmp	.+876    	; 0xa66 <__stack+0x207>
     6fa:	14 2f       	mov	r17, r20
     6fc:	80 81       	ld	r24, Z
     6fe:	88 23       	and	r24, r24
     700:	61 f0       	breq	.+24     	; 0x71a <chk_mounted+0x9c>
     702:	81 81       	ldd	r24, Z+1	; 0x01
     704:	0e 94 6c 2b 	call	0x56d8	; 0x56d8 <disk_status>
     708:	80 fd       	sbrc	r24, 0
     70a:	07 c0       	rjmp	.+14     	; 0x71a <chk_mounted+0x9c>
     70c:	11 23       	and	r17, r17
     70e:	09 f4       	brne	.+2      	; 0x712 <chk_mounted+0x94>
     710:	ac c1       	rjmp	.+856    	; 0xa6a <__stack+0x20b>
     712:	82 ff       	sbrs	r24, 2
     714:	ac c1       	rjmp	.+856    	; 0xa6e <__stack+0x20f>
     716:	8a e0       	ldi	r24, 0x0A	; 10
     718:	7f c2       	rjmp	.+1278   	; 0xc18 <__stack+0x3b9>
     71a:	ed 85       	ldd	r30, Y+13	; 0x0d
     71c:	fe 85       	ldd	r31, Y+14	; 0x0e
     71e:	10 82       	st	Z, r1
     720:	11 82       	std	Z+1, r1	; 0x01
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	0e 94 ab 2a 	call	0x5556	; 0x5556 <disk_initialize>
     728:	80 fd       	sbrc	r24, 0
     72a:	a3 c1       	rjmp	.+838    	; 0xa72 <__stack+0x213>
     72c:	11 23       	and	r17, r17
     72e:	11 f0       	breq	.+4      	; 0x734 <chk_mounted+0xb6>
     730:	82 fd       	sbrc	r24, 2
     732:	a1 c1       	rjmp	.+834    	; 0xa76 <__stack+0x217>
     734:	40 e0       	ldi	r20, 0x00	; 0
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	ba 01       	movw	r22, r20
     73a:	8d 85       	ldd	r24, Y+13	; 0x0d
     73c:	9e 85       	ldd	r25, Y+14	; 0x0e
     73e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <check_fs>
     742:	81 30       	cpi	r24, 0x01	; 1
     744:	b9 f4       	brne	.+46     	; 0x774 <chk_mounted+0xf6>
     746:	ed 85       	ldd	r30, Y+13	; 0x0d
     748:	fe 85       	ldd	r31, Y+14	; 0x0e
     74a:	ec 50       	subi	r30, 0x0C	; 12
     74c:	fe 4f       	sbci	r31, 0xFE	; 254
     74e:	80 81       	ld	r24, Z
     750:	88 23       	and	r24, r24
     752:	09 f4       	brne	.+2      	; 0x756 <chk_mounted+0xd8>
     754:	92 c1       	rjmp	.+804    	; 0xa7a <__stack+0x21b>
     756:	ed 85       	ldd	r30, Y+13	; 0x0d
     758:	fe 85       	ldd	r31, Y+14	; 0x0e
     75a:	e8 50       	subi	r30, 0x08	; 8
     75c:	fe 4f       	sbci	r31, 0xFE	; 254
     75e:	c0 80       	ld	r12, Z
     760:	d1 80       	ldd	r13, Z+1	; 0x01
     762:	e2 80       	ldd	r14, Z+2	; 0x02
     764:	f3 80       	ldd	r15, Z+3	; 0x03
     766:	b7 01       	movw	r22, r14
     768:	a6 01       	movw	r20, r12
     76a:	8d 85       	ldd	r24, Y+13	; 0x0d
     76c:	9e 85       	ldd	r25, Y+14	; 0x0e
     76e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <check_fs>
     772:	03 c0       	rjmp	.+6      	; 0x77a <chk_mounted+0xfc>
     774:	c1 2c       	mov	r12, r1
     776:	d1 2c       	mov	r13, r1
     778:	76 01       	movw	r14, r12
     77a:	83 30       	cpi	r24, 0x03	; 3
     77c:	09 f4       	brne	.+2      	; 0x780 <chk_mounted+0x102>
     77e:	7f c1       	rjmp	.+766    	; 0xa7e <__stack+0x21f>
     780:	81 11       	cpse	r24, r1
     782:	7f c1       	rjmp	.+766    	; 0xa82 <__stack+0x223>
     784:	ad 85       	ldd	r26, Y+13	; 0x0d
     786:	be 85       	ldd	r27, Y+14	; 0x0e
     788:	dd 96       	adiw	r26, 0x3d	; 61
     78a:	8d 91       	ld	r24, X+
     78c:	9c 91       	ld	r25, X
     78e:	de 97       	sbiw	r26, 0x3e	; 62
     790:	81 15       	cp	r24, r1
     792:	92 40       	sbci	r25, 0x02	; 2
     794:	09 f0       	breq	.+2      	; 0x798 <chk_mounted+0x11a>
     796:	77 c1       	rjmp	.+750    	; 0xa86 <__stack+0x227>
     798:	ed 85       	ldd	r30, Y+13	; 0x0d
     79a:	fe 85       	ldd	r31, Y+14	; 0x0e
     79c:	e8 5b       	subi	r30, 0xB8	; 184
     79e:	ff 4f       	sbci	r31, 0xFF	; 255
     7a0:	40 80       	ld	r4, Z
     7a2:	51 80       	ldd	r5, Z+1	; 0x01
     7a4:	61 2c       	mov	r6, r1
     7a6:	71 2c       	mov	r7, r1
     7a8:	41 14       	cp	r4, r1
     7aa:	51 04       	cpc	r5, r1
     7ac:	61 04       	cpc	r6, r1
     7ae:	71 04       	cpc	r7, r1
     7b0:	41 f4       	brne	.+16     	; 0x7c2 <chk_mounted+0x144>
     7b2:	ed 85       	ldd	r30, Y+13	; 0x0d
     7b4:	fe 85       	ldd	r31, Y+14	; 0x0e
     7b6:	ea 5a       	subi	r30, 0xAA	; 170
     7b8:	ff 4f       	sbci	r31, 0xFF	; 255
     7ba:	40 80       	ld	r4, Z
     7bc:	51 80       	ldd	r5, Z+1	; 0x01
     7be:	62 80       	ldd	r6, Z+2	; 0x02
     7c0:	73 80       	ldd	r7, Z+3	; 0x03
     7c2:	ed 85       	ldd	r30, Y+13	; 0x0d
     7c4:	fe 85       	ldd	r31, Y+14	; 0x0e
     7c6:	46 8e       	std	Z+30, r4	; 0x1e
     7c8:	57 8e       	std	Z+31, r5	; 0x1f
     7ca:	60 a2       	std	Z+32, r6	; 0x20
     7cc:	71 a2       	std	Z+33, r7	; 0x21
     7ce:	ee 5b       	subi	r30, 0xBE	; 190
     7d0:	ff 4f       	sbci	r31, 0xFF	; 255
     7d2:	a0 81       	ld	r26, Z
     7d4:	ed 85       	ldd	r30, Y+13	; 0x0d
     7d6:	fe 85       	ldd	r31, Y+14	; 0x0e
     7d8:	a3 83       	std	Z+3, r26	; 0x03
     7da:	8f ef       	ldi	r24, 0xFF	; 255
     7dc:	8a 0f       	add	r24, r26
     7de:	82 30       	cpi	r24, 0x02	; 2
     7e0:	08 f0       	brcs	.+2      	; 0x7e4 <chk_mounted+0x166>
     7e2:	53 c1       	rjmp	.+678    	; 0xa8a <__stack+0x22b>
     7e4:	17 ad       	ldd	r17, Z+63	; 0x3f
     7e6:	12 83       	std	Z+2, r17	; 0x02
     7e8:	11 23       	and	r17, r17
     7ea:	09 f4       	brne	.+2      	; 0x7ee <chk_mounted+0x170>
     7ec:	50 c1       	rjmp	.+672    	; 0xa8e <__stack+0x22f>
     7ee:	81 2f       	mov	r24, r17
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	9c 01       	movw	r18, r24
     7f4:	21 50       	subi	r18, 0x01	; 1
     7f6:	31 09       	sbc	r19, r1
     7f8:	82 23       	and	r24, r18
     7fa:	93 23       	and	r25, r19
     7fc:	89 2b       	or	r24, r25
     7fe:	09 f0       	breq	.+2      	; 0x802 <chk_mounted+0x184>
     800:	48 c1       	rjmp	.+656    	; 0xa92 <__stack+0x233>
     802:	ed 5b       	subi	r30, 0xBD	; 189
     804:	ff 4f       	sbci	r31, 0xFF	; 255
     806:	20 80       	ld	r2, Z
     808:	31 80       	ldd	r3, Z+1	; 0x01
     80a:	ed 85       	ldd	r30, Y+13	; 0x0d
     80c:	fe 85       	ldd	r31, Y+14	; 0x0e
     80e:	31 86       	std	Z+9, r3	; 0x09
     810:	20 86       	std	Z+8, r2	; 0x08
     812:	c1 01       	movw	r24, r2
     814:	8f 70       	andi	r24, 0x0F	; 15
     816:	99 27       	eor	r25, r25
     818:	89 2b       	or	r24, r25
     81a:	09 f0       	breq	.+2      	; 0x81e <chk_mounted+0x1a0>
     81c:	3c c1       	rjmp	.+632    	; 0xa96 <__stack+0x237>
     81e:	eb 5b       	subi	r30, 0xBB	; 187
     820:	ff 4f       	sbci	r31, 0xFF	; 255
     822:	80 80       	ld	r8, Z
     824:	91 80       	ldd	r9, Z+1	; 0x01
     826:	a1 2c       	mov	r10, r1
     828:	b1 2c       	mov	r11, r1
     82a:	81 14       	cp	r8, r1
     82c:	91 04       	cpc	r9, r1
     82e:	a1 04       	cpc	r10, r1
     830:	b1 04       	cpc	r11, r1
     832:	41 f4       	brne	.+16     	; 0x844 <chk_mounted+0x1c6>
     834:	ed 85       	ldd	r30, Y+13	; 0x0d
     836:	fe 85       	ldd	r31, Y+14	; 0x0e
     838:	ee 5a       	subi	r30, 0xAE	; 174
     83a:	ff 4f       	sbci	r31, 0xFF	; 255
     83c:	80 80       	ld	r8, Z
     83e:	91 80       	ldd	r9, Z+1	; 0x01
     840:	a2 80       	ldd	r10, Z+2	; 0x02
     842:	b3 80       	ldd	r11, Z+3	; 0x03
     844:	ed 85       	ldd	r30, Y+13	; 0x0d
     846:	fe 85       	ldd	r31, Y+14	; 0x0e
     848:	e0 5c       	subi	r30, 0xC0	; 192
     84a:	ff 4f       	sbci	r31, 0xFF	; 255
     84c:	01 90       	ld	r0, Z+
     84e:	f0 81       	ld	r31, Z
     850:	e0 2d       	mov	r30, r0
     852:	30 97       	sbiw	r30, 0x00	; 0
     854:	09 f4       	brne	.+2      	; 0x858 <chk_mounted+0x1da>
     856:	21 c1       	rjmp	.+578    	; 0xa9a <__stack+0x23b>
     858:	b0 e0       	ldi	r27, 0x00	; 0
     85a:	a3 01       	movw	r20, r6
     85c:	92 01       	movw	r18, r4
     85e:	0e 94 4d 36 	call	0x6c9a	; 0x6c9a <__muluhisi3>
     862:	69 87       	std	Y+9, r22	; 0x09
     864:	7a 87       	std	Y+10, r23	; 0x0a
     866:	8b 87       	std	Y+11, r24	; 0x0b
     868:	9c 87       	std	Y+12, r25	; 0x0c
     86a:	9f 01       	movw	r18, r30
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	2d 83       	std	Y+5, r18	; 0x05
     872:	3e 83       	std	Y+6, r19	; 0x06
     874:	4f 83       	std	Y+7, r20	; 0x07
     876:	58 87       	std	Y+8, r21	; 0x08
     878:	c1 01       	movw	r24, r2
     87a:	92 95       	swap	r25
     87c:	82 95       	swap	r24
     87e:	8f 70       	andi	r24, 0x0F	; 15
     880:	89 27       	eor	r24, r25
     882:	9f 70       	andi	r25, 0x0F	; 15
     884:	89 27       	eor	r24, r25
     886:	28 0f       	add	r18, r24
     888:	39 1f       	adc	r19, r25
     88a:	41 1d       	adc	r20, r1
     88c:	51 1d       	adc	r21, r1
     88e:	da 01       	movw	r26, r20
     890:	c9 01       	movw	r24, r18
     892:	29 85       	ldd	r18, Y+9	; 0x09
     894:	3a 85       	ldd	r19, Y+10	; 0x0a
     896:	4b 85       	ldd	r20, Y+11	; 0x0b
     898:	5c 85       	ldd	r21, Y+12	; 0x0c
     89a:	28 0f       	add	r18, r24
     89c:	39 1f       	adc	r19, r25
     89e:	4a 1f       	adc	r20, r26
     8a0:	5b 1f       	adc	r21, r27
     8a2:	29 83       	std	Y+1, r18	; 0x01
     8a4:	3a 83       	std	Y+2, r19	; 0x02
     8a6:	4b 83       	std	Y+3, r20	; 0x03
     8a8:	5c 83       	std	Y+4, r21	; 0x04
     8aa:	82 16       	cp	r8, r18
     8ac:	93 06       	cpc	r9, r19
     8ae:	a4 06       	cpc	r10, r20
     8b0:	b5 06       	cpc	r11, r21
     8b2:	08 f4       	brcc	.+2      	; 0x8b6 <__stack+0x57>
     8b4:	f4 c0       	rjmp	.+488    	; 0xa9e <__stack+0x23f>
     8b6:	c5 01       	movw	r24, r10
     8b8:	b4 01       	movw	r22, r8
     8ba:	62 1b       	sub	r22, r18
     8bc:	73 0b       	sbc	r23, r19
     8be:	84 0b       	sbc	r24, r20
     8c0:	95 0b       	sbc	r25, r21
     8c2:	21 2f       	mov	r18, r17
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	40 e0       	ldi	r20, 0x00	; 0
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	0e 94 f7 35 	call	0x6bee	; 0x6bee <__udivmodsi4>
     8ce:	da 01       	movw	r26, r20
     8d0:	c9 01       	movw	r24, r18
     8d2:	21 15       	cp	r18, r1
     8d4:	31 05       	cpc	r19, r1
     8d6:	41 05       	cpc	r20, r1
     8d8:	51 05       	cpc	r21, r1
     8da:	09 f4       	brne	.+2      	; 0x8de <__stack+0x7f>
     8dc:	e2 c0       	rjmp	.+452    	; 0xaa2 <__stack+0x243>
     8de:	26 3f       	cpi	r18, 0xF6	; 246
     8e0:	6f e0       	ldi	r22, 0x0F	; 15
     8e2:	36 07       	cpc	r19, r22
     8e4:	41 05       	cpc	r20, r1
     8e6:	51 05       	cpc	r21, r1
     8e8:	08 f0       	brcs	.+2      	; 0x8ec <__stack+0x8d>
     8ea:	8e c1       	rjmp	.+796    	; 0xc08 <__stack+0x3a9>
     8ec:	f1 e0       	ldi	r31, 0x01	; 1
     8ee:	8d c1       	rjmp	.+794    	; 0xc0a <__stack+0x3ab>
     8f0:	ed 85       	ldd	r30, Y+13	; 0x0d
     8f2:	fe 85       	ldd	r31, Y+14	; 0x0e
     8f4:	e2 5a       	subi	r30, 0xA2	; 162
     8f6:	ff 4f       	sbci	r31, 0xFF	; 255
     8f8:	80 81       	ld	r24, Z
     8fa:	91 81       	ldd	r25, Z+1	; 0x01
     8fc:	a2 81       	ldd	r26, Z+2	; 0x02
     8fe:	b3 81       	ldd	r27, Z+3	; 0x03
     900:	ed 85       	ldd	r30, Y+13	; 0x0d
     902:	fe 85       	ldd	r31, Y+14	; 0x0e
     904:	86 a3       	std	Z+38, r24	; 0x26
     906:	97 a3       	std	Z+39, r25	; 0x27
     908:	a0 a7       	std	Z+40, r26	; 0x28
     90a:	b1 a7       	std	Z+41, r27	; 0x29
     90c:	88 0c       	add	r8, r8
     90e:	99 1c       	adc	r9, r9
     910:	aa 1c       	adc	r10, r10
     912:	bb 1c       	adc	r11, r11
     914:	88 0c       	add	r8, r8
     916:	99 1c       	adc	r9, r9
     918:	aa 1c       	adc	r10, r10
     91a:	bb 1c       	adc	r11, r11
     91c:	ff ef       	ldi	r31, 0xFF	; 255
     91e:	8f 0e       	add	r8, r31
     920:	f1 e0       	ldi	r31, 0x01	; 1
     922:	9f 1e       	adc	r9, r31
     924:	a1 1c       	adc	r10, r1
     926:	b1 1c       	adc	r11, r1
     928:	07 2e       	mov	r0, r23
     92a:	79 e0       	ldi	r23, 0x09	; 9
     92c:	b6 94       	lsr	r11
     92e:	a7 94       	ror	r10
     930:	97 94       	ror	r9
     932:	87 94       	ror	r8
     934:	7a 95       	dec	r23
     936:	d1 f7       	brne	.-12     	; 0x92c <__stack+0xcd>
     938:	70 2d       	mov	r23, r0
     93a:	48 14       	cp	r4, r8
     93c:	59 04       	cpc	r5, r9
     93e:	6a 04       	cpc	r6, r10
     940:	7b 04       	cpc	r7, r11
     942:	08 f4       	brcc	.+2      	; 0x946 <__stack+0xe7>
     944:	b0 c0       	rjmp	.+352    	; 0xaa6 <__stack+0x247>
     946:	07 c1       	rjmp	.+526    	; 0xb56 <__stack+0x2f7>
     948:	29 85       	ldd	r18, Y+9	; 0x09
     94a:	3a 85       	ldd	r19, Y+10	; 0x0a
     94c:	4b 85       	ldd	r20, Y+11	; 0x0b
     94e:	5c 85       	ldd	r21, Y+12	; 0x0c
     950:	c2 0e       	add	r12, r18
     952:	d3 1e       	adc	r13, r19
     954:	e4 1e       	adc	r14, r20
     956:	f5 1e       	adc	r15, r21
     958:	ad 85       	ldd	r26, Y+13	; 0x0d
     95a:	be 85       	ldd	r27, Y+14	; 0x0e
     95c:	96 96       	adiw	r26, 0x26	; 38
     95e:	cd 92       	st	X+, r12
     960:	dd 92       	st	X+, r13
     962:	ed 92       	st	X+, r14
     964:	fc 92       	st	X, r15
     966:	99 97       	sbiw	r26, 0x29	; 41
     968:	f2 30       	cpi	r31, 0x02	; 2
     96a:	29 f4       	brne	.+10     	; 0x976 <__stack+0x117>
     96c:	88 0c       	add	r8, r8
     96e:	99 1c       	adc	r9, r9
     970:	aa 1c       	adc	r10, r10
     972:	bb 1c       	adc	r11, r11
     974:	da c0       	rjmp	.+436    	; 0xb2a <__stack+0x2cb>
     976:	a3 e0       	ldi	r26, 0x03	; 3
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	a5 01       	movw	r20, r10
     97c:	94 01       	movw	r18, r8
     97e:	0e 94 4d 36 	call	0x6c9a	; 0x6c9a <__muluhisi3>
     982:	dc 01       	movw	r26, r24
     984:	cb 01       	movw	r24, r22
     986:	b6 95       	lsr	r27
     988:	a7 95       	ror	r26
     98a:	97 95       	ror	r25
     98c:	87 95       	ror	r24
     98e:	e1 e0       	ldi	r30, 0x01	; 1
     990:	8e 22       	and	r8, r30
     992:	99 24       	eor	r9, r9
     994:	aa 24       	eor	r10, r10
     996:	bb 24       	eor	r11, r11
     998:	88 0e       	add	r8, r24
     99a:	99 1e       	adc	r9, r25
     99c:	aa 1e       	adc	r10, r26
     99e:	bb 1e       	adc	r11, r27
     9a0:	c4 c0       	rjmp	.+392    	; 0xb2a <__stack+0x2cb>
     9a2:	ed 85       	ldd	r30, Y+13	; 0x0d
     9a4:	fe 85       	ldd	r31, Y+14	; 0x0e
     9a6:	e0 5d       	subi	r30, 0xD0	; 208
     9a8:	fd 4f       	sbci	r31, 0xFD	; 253
     9aa:	80 81       	ld	r24, Z
     9ac:	91 81       	ldd	r25, Z+1	; 0x01
     9ae:	85 35       	cpi	r24, 0x55	; 85
     9b0:	9a 4a       	sbci	r25, 0xAA	; 170
     9b2:	a1 f5       	brne	.+104    	; 0xa1c <__stack+0x1bd>
     9b4:	ed 85       	ldd	r30, Y+13	; 0x0d
     9b6:	fe 85       	ldd	r31, Y+14	; 0x0e
     9b8:	82 a9       	ldd	r24, Z+50	; 0x32
     9ba:	93 a9       	ldd	r25, Z+51	; 0x33
     9bc:	a4 a9       	ldd	r26, Z+52	; 0x34
     9be:	b5 a9       	ldd	r27, Z+53	; 0x35
     9c0:	82 35       	cpi	r24, 0x52	; 82
     9c2:	92 45       	sbci	r25, 0x52	; 82
     9c4:	a1 46       	sbci	r26, 0x61	; 97
     9c6:	b1 44       	sbci	r27, 0x41	; 65
     9c8:	59 f5       	brne	.+86     	; 0xa20 <__stack+0x1c1>
     9ca:	ed 85       	ldd	r30, Y+13	; 0x0d
     9cc:	fe 85       	ldd	r31, Y+14	; 0x0e
     9ce:	ea 5e       	subi	r30, 0xEA	; 234
     9d0:	fd 4f       	sbci	r31, 0xFD	; 253
     9d2:	80 81       	ld	r24, Z
     9d4:	91 81       	ldd	r25, Z+1	; 0x01
     9d6:	a2 81       	ldd	r26, Z+2	; 0x02
     9d8:	b3 81       	ldd	r27, Z+3	; 0x03
     9da:	82 37       	cpi	r24, 0x72	; 114
     9dc:	92 47       	sbci	r25, 0x72	; 114
     9de:	a1 44       	sbci	r26, 0x41	; 65
     9e0:	b1 46       	sbci	r27, 0x61	; 97
     9e2:	01 f5       	brne	.+64     	; 0xa24 <__stack+0x1c5>
     9e4:	ed 85       	ldd	r30, Y+13	; 0x0d
     9e6:	fe 85       	ldd	r31, Y+14	; 0x0e
     9e8:	e2 5e       	subi	r30, 0xE2	; 226
     9ea:	fd 4f       	sbci	r31, 0xFD	; 253
     9ec:	80 81       	ld	r24, Z
     9ee:	91 81       	ldd	r25, Z+1	; 0x01
     9f0:	a2 81       	ldd	r26, Z+2	; 0x02
     9f2:	b3 81       	ldd	r27, Z+3	; 0x03
     9f4:	ed 85       	ldd	r30, Y+13	; 0x0d
     9f6:	fe 85       	ldd	r31, Y+14	; 0x0e
     9f8:	82 87       	std	Z+10, r24	; 0x0a
     9fa:	93 87       	std	Z+11, r25	; 0x0b
     9fc:	a4 87       	std	Z+12, r26	; 0x0c
     9fe:	b5 87       	std	Z+13, r27	; 0x0d
     a00:	e6 5e       	subi	r30, 0xE6	; 230
     a02:	fd 4f       	sbci	r31, 0xFD	; 253
     a04:	80 81       	ld	r24, Z
     a06:	91 81       	ldd	r25, Z+1	; 0x01
     a08:	a2 81       	ldd	r26, Z+2	; 0x02
     a0a:	b3 81       	ldd	r27, Z+3	; 0x03
     a0c:	ed 85       	ldd	r30, Y+13	; 0x0d
     a0e:	fe 85       	ldd	r31, Y+14	; 0x0e
     a10:	86 87       	std	Z+14, r24	; 0x0e
     a12:	97 87       	std	Z+15, r25	; 0x0f
     a14:	a0 8b       	std	Z+16, r26	; 0x10
     a16:	b1 8b       	std	Z+17, r27	; 0x11
     a18:	f3 e0       	ldi	r31, 0x03	; 3
     a1a:	05 c0       	rjmp	.+10     	; 0xa26 <__stack+0x1c7>
     a1c:	f3 e0       	ldi	r31, 0x03	; 3
     a1e:	03 c0       	rjmp	.+6      	; 0xa26 <__stack+0x1c7>
     a20:	f3 e0       	ldi	r31, 0x03	; 3
     a22:	01 c0       	rjmp	.+2      	; 0xa26 <__stack+0x1c7>
     a24:	f3 e0       	ldi	r31, 0x03	; 3
     a26:	ad 85       	ldd	r26, Y+13	; 0x0d
     a28:	be 85       	ldd	r27, Y+14	; 0x0e
     a2a:	fc 93       	st	X, r31
     a2c:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <Fsid>
     a30:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <Fsid+0x1>
     a34:	01 96       	adiw	r24, 0x01	; 1
     a36:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <Fsid+0x1>
     a3a:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <Fsid>
     a3e:	17 96       	adiw	r26, 0x07	; 7
     a40:	9c 93       	st	X, r25
     a42:	8e 93       	st	-X, r24
     a44:	16 97       	sbiw	r26, 0x06	; 6
     a46:	fd 01       	movw	r30, r26
     a48:	16 a6       	std	Z+46, r1	; 0x2e
     a4a:	17 a6       	std	Z+47, r1	; 0x2f
     a4c:	10 aa       	std	Z+48, r1	; 0x30
     a4e:	11 aa       	std	Z+49, r1	; 0x31
     a50:	14 82       	std	Z+4, r1	; 0x04
     a52:	56 96       	adiw	r26, 0x16	; 22
     a54:	1d 92       	st	X+, r1
     a56:	1d 92       	st	X+, r1
     a58:	1d 92       	st	X+, r1
     a5a:	1c 92       	st	X, r1
     a5c:	59 97       	sbiw	r26, 0x19	; 25
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	db c0       	rjmp	.+438    	; 0xc18 <__stack+0x3b9>
     a62:	8b e0       	ldi	r24, 0x0B	; 11
     a64:	d9 c0       	rjmp	.+434    	; 0xc18 <__stack+0x3b9>
     a66:	8c e0       	ldi	r24, 0x0C	; 12
     a68:	d7 c0       	rjmp	.+430    	; 0xc18 <__stack+0x3b9>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	d5 c0       	rjmp	.+426    	; 0xc18 <__stack+0x3b9>
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	d3 c0       	rjmp	.+422    	; 0xc18 <__stack+0x3b9>
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	d1 c0       	rjmp	.+418    	; 0xc18 <__stack+0x3b9>
     a76:	8a e0       	ldi	r24, 0x0A	; 10
     a78:	cf c0       	rjmp	.+414    	; 0xc18 <__stack+0x3b9>
     a7a:	8d e0       	ldi	r24, 0x0D	; 13
     a7c:	cd c0       	rjmp	.+410    	; 0xc18 <__stack+0x3b9>
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	cb c0       	rjmp	.+406    	; 0xc18 <__stack+0x3b9>
     a82:	8d e0       	ldi	r24, 0x0D	; 13
     a84:	c9 c0       	rjmp	.+402    	; 0xc18 <__stack+0x3b9>
     a86:	8d e0       	ldi	r24, 0x0D	; 13
     a88:	c7 c0       	rjmp	.+398    	; 0xc18 <__stack+0x3b9>
     a8a:	8d e0       	ldi	r24, 0x0D	; 13
     a8c:	c5 c0       	rjmp	.+394    	; 0xc18 <__stack+0x3b9>
     a8e:	8d e0       	ldi	r24, 0x0D	; 13
     a90:	c3 c0       	rjmp	.+390    	; 0xc18 <__stack+0x3b9>
     a92:	8d e0       	ldi	r24, 0x0D	; 13
     a94:	c1 c0       	rjmp	.+386    	; 0xc18 <__stack+0x3b9>
     a96:	8d e0       	ldi	r24, 0x0D	; 13
     a98:	bf c0       	rjmp	.+382    	; 0xc18 <__stack+0x3b9>
     a9a:	8d e0       	ldi	r24, 0x0D	; 13
     a9c:	bd c0       	rjmp	.+378    	; 0xc18 <__stack+0x3b9>
     a9e:	8d e0       	ldi	r24, 0x0D	; 13
     aa0:	bb c0       	rjmp	.+374    	; 0xc18 <__stack+0x3b9>
     aa2:	8d e0       	ldi	r24, 0x0D	; 13
     aa4:	b9 c0       	rjmp	.+370    	; 0xc18 <__stack+0x3b9>
     aa6:	8d e0       	ldi	r24, 0x0D	; 13
     aa8:	b7 c0       	rjmp	.+366    	; 0xc18 <__stack+0x3b9>
     aaa:	8d e0       	ldi	r24, 0x0D	; 13
     aac:	b5 c0       	rjmp	.+362    	; 0xc18 <__stack+0x3b9>
     aae:	8d e0       	ldi	r24, 0x0D	; 13
     ab0:	b3 c0       	rjmp	.+358    	; 0xc18 <__stack+0x3b9>
     ab2:	8d e0       	ldi	r24, 0x0D	; 13
     ab4:	b1 c0       	rjmp	.+354    	; 0xc18 <__stack+0x3b9>
     ab6:	49 01       	movw	r8, r18
     ab8:	5a 01       	movw	r10, r20
     aba:	b2 e0       	ldi	r27, 0x02	; 2
     abc:	8b 0e       	add	r8, r27
     abe:	91 1c       	adc	r9, r1
     ac0:	a1 1c       	adc	r10, r1
     ac2:	b1 1c       	adc	r11, r1
     ac4:	ed 85       	ldd	r30, Y+13	; 0x0d
     ac6:	fe 85       	ldd	r31, Y+14	; 0x0e
     ac8:	82 8e       	std	Z+26, r8	; 0x1a
     aca:	93 8e       	std	Z+27, r9	; 0x1b
     acc:	a4 8e       	std	Z+28, r10	; 0x1c
     ace:	b5 8e       	std	Z+29, r11	; 0x1d
     ad0:	89 81       	ldd	r24, Y+1	; 0x01
     ad2:	9a 81       	ldd	r25, Y+2	; 0x02
     ad4:	ab 81       	ldd	r26, Y+3	; 0x03
     ad6:	bc 81       	ldd	r27, Y+4	; 0x04
     ad8:	8c 0d       	add	r24, r12
     ada:	9d 1d       	adc	r25, r13
     adc:	ae 1d       	adc	r26, r14
     ade:	bf 1d       	adc	r27, r15
     ae0:	82 a7       	std	Z+42, r24	; 0x2a
     ae2:	93 a7       	std	Z+43, r25	; 0x2b
     ae4:	a4 a7       	std	Z+44, r26	; 0x2c
     ae6:	b5 a7       	std	Z+45, r27	; 0x2d
     ae8:	8d 81       	ldd	r24, Y+5	; 0x05
     aea:	9e 81       	ldd	r25, Y+6	; 0x06
     aec:	af 81       	ldd	r26, Y+7	; 0x07
     aee:	b8 85       	ldd	r27, Y+8	; 0x08
     af0:	8c 0d       	add	r24, r12
     af2:	9d 1d       	adc	r25, r13
     af4:	ae 1d       	adc	r26, r14
     af6:	bf 1d       	adc	r27, r15
     af8:	82 a3       	std	Z+34, r24	; 0x22
     afa:	93 a3       	std	Z+35, r25	; 0x23
     afc:	a4 a3       	std	Z+36, r26	; 0x24
     afe:	b5 a3       	std	Z+37, r27	; 0x25
     b00:	23 28       	or	r2, r3
     b02:	99 f6       	brne	.-90     	; 0xaaa <__stack+0x24b>
     b04:	f5 ce       	rjmp	.-534    	; 0x8f0 <__stack+0x91>
     b06:	4f ef       	ldi	r20, 0xFF	; 255
     b08:	5f ef       	ldi	r21, 0xFF	; 255
     b0a:	ba 01       	movw	r22, r20
     b0c:	ad 85       	ldd	r26, Y+13	; 0x0d
     b0e:	be 85       	ldd	r27, Y+14	; 0x0e
     b10:	1e 96       	adiw	r26, 0x0e	; 14
     b12:	4d 93       	st	X+, r20
     b14:	5d 93       	st	X+, r21
     b16:	6d 93       	st	X+, r22
     b18:	7c 93       	st	X, r23
     b1a:	51 97       	sbiw	r26, 0x11	; 17
     b1c:	1a 96       	adiw	r26, 0x0a	; 10
     b1e:	1d 92       	st	X+, r1
     b20:	1d 92       	st	X+, r1
     b22:	1d 92       	st	X+, r1
     b24:	1c 92       	st	X, r1
     b26:	1d 97       	sbiw	r26, 0x0d	; 13
     b28:	7e cf       	rjmp	.-260    	; 0xa26 <__stack+0x1c7>
     b2a:	bf ef       	ldi	r27, 0xFF	; 255
     b2c:	8b 0e       	add	r8, r27
     b2e:	b1 e0       	ldi	r27, 0x01	; 1
     b30:	9b 1e       	adc	r9, r27
     b32:	a1 1c       	adc	r10, r1
     b34:	b1 1c       	adc	r11, r1
     b36:	07 2e       	mov	r0, r23
     b38:	79 e0       	ldi	r23, 0x09	; 9
     b3a:	b6 94       	lsr	r11
     b3c:	a7 94       	ror	r10
     b3e:	97 94       	ror	r9
     b40:	87 94       	ror	r8
     b42:	7a 95       	dec	r23
     b44:	d1 f7       	brne	.-12     	; 0xb3a <__stack+0x2db>
     b46:	70 2d       	mov	r23, r0
     b48:	48 14       	cp	r4, r8
     b4a:	59 04       	cpc	r5, r9
     b4c:	6a 04       	cpc	r6, r10
     b4e:	7b 04       	cpc	r7, r11
     b50:	08 f4       	brcc	.+2      	; 0xb54 <__stack+0x2f5>
     b52:	ad cf       	rjmp	.-166    	; 0xaae <__stack+0x24f>
     b54:	d8 cf       	rjmp	.-80     	; 0xb06 <__stack+0x2a7>
     b56:	8f ef       	ldi	r24, 0xFF	; 255
     b58:	9f ef       	ldi	r25, 0xFF	; 255
     b5a:	dc 01       	movw	r26, r24
     b5c:	ed 85       	ldd	r30, Y+13	; 0x0d
     b5e:	fe 85       	ldd	r31, Y+14	; 0x0e
     b60:	86 87       	std	Z+14, r24	; 0x0e
     b62:	97 87       	std	Z+15, r25	; 0x0f
     b64:	a0 8b       	std	Z+16, r26	; 0x10
     b66:	b1 8b       	std	Z+17, r27	; 0x11
     b68:	df 01       	movw	r26, r30
     b6a:	12 86       	std	Z+10, r1	; 0x0a
     b6c:	13 86       	std	Z+11, r1	; 0x0b
     b6e:	14 86       	std	Z+12, r1	; 0x0c
     b70:	15 86       	std	Z+13, r1	; 0x0d
     b72:	15 82       	std	Z+5, r1	; 0x05
     b74:	ee 59       	subi	r30, 0x9E	; 158
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	80 81       	ld	r24, Z
     b7a:	91 81       	ldd	r25, Z+1	; 0x01
     b7c:	a7 01       	movw	r20, r14
     b7e:	96 01       	movw	r18, r12
     b80:	28 0f       	add	r18, r24
     b82:	39 1f       	adc	r19, r25
     b84:	41 1d       	adc	r20, r1
     b86:	51 1d       	adc	r21, r1
     b88:	fd 01       	movw	r30, r26
     b8a:	22 8b       	std	Z+18, r18	; 0x12
     b8c:	33 8b       	std	Z+19, r19	; 0x13
     b8e:	44 8b       	std	Z+20, r20	; 0x14
     b90:	55 8b       	std	Z+21, r21	; 0x15
     b92:	01 e0       	ldi	r16, 0x01	; 1
     b94:	bd 01       	movw	r22, r26
     b96:	6e 5c       	subi	r22, 0xCE	; 206
     b98:	7f 4f       	sbci	r23, 0xFF	; 255
     b9a:	81 81       	ldd	r24, Z+1	; 0x01
     b9c:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <disk_read>
     ba0:	88 23       	and	r24, r24
     ba2:	09 f4       	brne	.+2      	; 0xba6 <__stack+0x347>
     ba4:	fe ce       	rjmp	.-516    	; 0x9a2 <__stack+0x143>
     ba6:	f3 e0       	ldi	r31, 0x03	; 3
     ba8:	3e cf       	rjmp	.-388    	; 0xa26 <__stack+0x1c7>
     baa:	49 01       	movw	r8, r18
     bac:	5a 01       	movw	r10, r20
     bae:	62 e0       	ldi	r22, 0x02	; 2
     bb0:	86 0e       	add	r8, r22
     bb2:	91 1c       	adc	r9, r1
     bb4:	a1 1c       	adc	r10, r1
     bb6:	b1 1c       	adc	r11, r1
     bb8:	ad 85       	ldd	r26, Y+13	; 0x0d
     bba:	be 85       	ldd	r27, Y+14	; 0x0e
     bbc:	5a 96       	adiw	r26, 0x1a	; 26
     bbe:	8d 92       	st	X+, r8
     bc0:	9d 92       	st	X+, r9
     bc2:	ad 92       	st	X+, r10
     bc4:	bc 92       	st	X, r11
     bc6:	5d 97       	sbiw	r26, 0x1d	; 29
     bc8:	49 81       	ldd	r20, Y+1	; 0x01
     bca:	5a 81       	ldd	r21, Y+2	; 0x02
     bcc:	6b 81       	ldd	r22, Y+3	; 0x03
     bce:	7c 81       	ldd	r23, Y+4	; 0x04
     bd0:	4c 0d       	add	r20, r12
     bd2:	5d 1d       	adc	r21, r13
     bd4:	6e 1d       	adc	r22, r14
     bd6:	7f 1d       	adc	r23, r15
     bd8:	9a 96       	adiw	r26, 0x2a	; 42
     bda:	4d 93       	st	X+, r20
     bdc:	5d 93       	st	X+, r21
     bde:	6d 93       	st	X+, r22
     be0:	7c 93       	st	X, r23
     be2:	9d 97       	sbiw	r26, 0x2d	; 45
     be4:	2d 81       	ldd	r18, Y+5	; 0x05
     be6:	3e 81       	ldd	r19, Y+6	; 0x06
     be8:	4f 81       	ldd	r20, Y+7	; 0x07
     bea:	58 85       	ldd	r21, Y+8	; 0x08
     bec:	c2 0e       	add	r12, r18
     bee:	d3 1e       	adc	r13, r19
     bf0:	e4 1e       	adc	r14, r20
     bf2:	f5 1e       	adc	r15, r21
     bf4:	92 96       	adiw	r26, 0x22	; 34
     bf6:	cd 92       	st	X+, r12
     bf8:	dd 92       	st	X+, r13
     bfa:	ed 92       	st	X+, r14
     bfc:	fc 92       	st	X, r15
     bfe:	95 97       	sbiw	r26, 0x25	; 37
     c00:	23 28       	or	r2, r3
     c02:	09 f4       	brne	.+2      	; 0xc06 <__stack+0x3a7>
     c04:	56 cf       	rjmp	.-340    	; 0xab2 <__stack+0x253>
     c06:	a0 ce       	rjmp	.-704    	; 0x948 <__stack+0xe9>
     c08:	f2 e0       	ldi	r31, 0x02	; 2
     c0a:	86 3f       	cpi	r24, 0xF6	; 246
     c0c:	9f 4f       	sbci	r25, 0xFF	; 255
     c0e:	a1 05       	cpc	r26, r1
     c10:	b1 05       	cpc	r27, r1
     c12:	08 f0       	brcs	.+2      	; 0xc16 <__stack+0x3b7>
     c14:	50 cf       	rjmp	.-352    	; 0xab6 <__stack+0x257>
     c16:	c9 cf       	rjmp	.-110    	; 0xbaa <__stack+0x34b>
     c18:	2e 96       	adiw	r28, 0x0e	; 14
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	de bf       	out	0x3e, r29	; 62
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	cd bf       	out	0x3d, r28	; 61
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	1f 91       	pop	r17
     c2a:	0f 91       	pop	r16
     c2c:	ff 90       	pop	r15
     c2e:	ef 90       	pop	r14
     c30:	df 90       	pop	r13
     c32:	cf 90       	pop	r12
     c34:	bf 90       	pop	r11
     c36:	af 90       	pop	r10
     c38:	9f 90       	pop	r9
     c3a:	8f 90       	pop	r8
     c3c:	7f 90       	pop	r7
     c3e:	6f 90       	pop	r6
     c40:	5f 90       	pop	r5
     c42:	4f 90       	pop	r4
     c44:	3f 90       	pop	r3
     c46:	2f 90       	pop	r2
     c48:	08 95       	ret

00000c4a <sync>:
     c4a:	0f 93       	push	r16
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	ec 01       	movw	r28, r24
     c52:	40 e0       	ldi	r20, 0x00	; 0
     c54:	50 e0       	ldi	r21, 0x00	; 0
     c56:	ba 01       	movw	r22, r20
     c58:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
     c5c:	98 2f       	mov	r25, r24
     c5e:	81 11       	cpse	r24, r1
     c60:	54 c0       	rjmp	.+168    	; 0xd0a <sync+0xc0>
     c62:	88 81       	ld	r24, Y
     c64:	83 30       	cpi	r24, 0x03	; 3
     c66:	09 f0       	breq	.+2      	; 0xc6a <sync+0x20>
     c68:	46 c0       	rjmp	.+140    	; 0xcf6 <sync+0xac>
     c6a:	8d 81       	ldd	r24, Y+5	; 0x05
     c6c:	88 23       	and	r24, r24
     c6e:	09 f4       	brne	.+2      	; 0xc72 <sync+0x28>
     c70:	42 c0       	rjmp	.+132    	; 0xcf6 <sync+0xac>
     c72:	1e a6       	std	Y+46, r1	; 0x2e
     c74:	1f a6       	std	Y+47, r1	; 0x2f
     c76:	18 aa       	std	Y+48, r1	; 0x30
     c78:	19 aa       	std	Y+49, r1	; 0x31
     c7a:	be 01       	movw	r22, r28
     c7c:	6e 5c       	subi	r22, 0xCE	; 206
     c7e:	7f 4f       	sbci	r23, 0xFF	; 255
     c80:	fb 01       	movw	r30, r22
     c82:	ce 01       	movw	r24, r28
     c84:	8e 5c       	subi	r24, 0xCE	; 206
     c86:	9d 4f       	sbci	r25, 0xFD	; 253
     c88:	11 92       	st	Z+, r1
     c8a:	e8 17       	cp	r30, r24
     c8c:	f9 07       	cpc	r31, r25
     c8e:	e1 f7       	brne	.-8      	; 0xc88 <sync+0x3e>
     c90:	85 e5       	ldi	r24, 0x55	; 85
     c92:	9a ea       	ldi	r25, 0xAA	; 170
     c94:	fe 01       	movw	r30, r28
     c96:	e0 5d       	subi	r30, 0xD0	; 208
     c98:	fd 4f       	sbci	r31, 0xFD	; 253
     c9a:	91 83       	std	Z+1, r25	; 0x01
     c9c:	80 83       	st	Z, r24
     c9e:	82 e5       	ldi	r24, 0x52	; 82
     ca0:	92 e5       	ldi	r25, 0x52	; 82
     ca2:	a1 e6       	ldi	r26, 0x61	; 97
     ca4:	b1 e4       	ldi	r27, 0x41	; 65
     ca6:	8a ab       	std	Y+50, r24	; 0x32
     ca8:	9b ab       	std	Y+51, r25	; 0x33
     caa:	ac ab       	std	Y+52, r26	; 0x34
     cac:	bd ab       	std	Y+53, r27	; 0x35
     cae:	82 e7       	ldi	r24, 0x72	; 114
     cb0:	92 e7       	ldi	r25, 0x72	; 114
     cb2:	a1 e4       	ldi	r26, 0x41	; 65
     cb4:	b1 e6       	ldi	r27, 0x61	; 97
     cb6:	7a 97       	sbiw	r30, 0x1a	; 26
     cb8:	80 83       	st	Z, r24
     cba:	91 83       	std	Z+1, r25	; 0x01
     cbc:	a2 83       	std	Z+2, r26	; 0x02
     cbe:	b3 83       	std	Z+3, r27	; 0x03
     cc0:	8e 85       	ldd	r24, Y+14	; 0x0e
     cc2:	9f 85       	ldd	r25, Y+15	; 0x0f
     cc4:	a8 89       	ldd	r26, Y+16	; 0x10
     cc6:	b9 89       	ldd	r27, Y+17	; 0x11
     cc8:	34 96       	adiw	r30, 0x04	; 4
     cca:	80 83       	st	Z, r24
     ccc:	91 83       	std	Z+1, r25	; 0x01
     cce:	a2 83       	std	Z+2, r26	; 0x02
     cd0:	b3 83       	std	Z+3, r27	; 0x03
     cd2:	8a 85       	ldd	r24, Y+10	; 0x0a
     cd4:	9b 85       	ldd	r25, Y+11	; 0x0b
     cd6:	ac 85       	ldd	r26, Y+12	; 0x0c
     cd8:	bd 85       	ldd	r27, Y+13	; 0x0d
     cda:	34 96       	adiw	r30, 0x04	; 4
     cdc:	80 83       	st	Z, r24
     cde:	91 83       	std	Z+1, r25	; 0x01
     ce0:	a2 83       	std	Z+2, r26	; 0x02
     ce2:	b3 83       	std	Z+3, r27	; 0x03
     ce4:	2a 89       	ldd	r18, Y+18	; 0x12
     ce6:	3b 89       	ldd	r19, Y+19	; 0x13
     ce8:	4c 89       	ldd	r20, Y+20	; 0x14
     cea:	5d 89       	ldd	r21, Y+21	; 0x15
     cec:	01 e0       	ldi	r16, 0x01	; 1
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	0e 94 c6 2b 	call	0x578c	; 0x578c <disk_write>
     cf4:	1d 82       	std	Y+5, r1	; 0x05
     cf6:	40 e0       	ldi	r20, 0x00	; 0
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	0e 94 32 2c 	call	0x5864	; 0x5864 <disk_ioctl>
     d02:	91 e0       	ldi	r25, 0x01	; 1
     d04:	81 11       	cpse	r24, r1
     d06:	01 c0       	rjmp	.+2      	; 0xd0a <sync+0xc0>
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	89 2f       	mov	r24, r25
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	0f 91       	pop	r16
     d12:	08 95       	ret

00000d14 <clust2sect>:
     d14:	0f 93       	push	r16
     d16:	1f 93       	push	r17
     d18:	fc 01       	movw	r30, r24
     d1a:	9a 01       	movw	r18, r20
     d1c:	ab 01       	movw	r20, r22
     d1e:	22 50       	subi	r18, 0x02	; 2
     d20:	31 09       	sbc	r19, r1
     d22:	41 09       	sbc	r20, r1
     d24:	51 09       	sbc	r21, r1
     d26:	82 8d       	ldd	r24, Z+26	; 0x1a
     d28:	93 8d       	ldd	r25, Z+27	; 0x1b
     d2a:	a4 8d       	ldd	r26, Z+28	; 0x1c
     d2c:	b5 8d       	ldd	r27, Z+29	; 0x1d
     d2e:	02 97       	sbiw	r24, 0x02	; 2
     d30:	a1 09       	sbc	r26, r1
     d32:	b1 09       	sbc	r27, r1
     d34:	28 17       	cp	r18, r24
     d36:	39 07       	cpc	r19, r25
     d38:	4a 07       	cpc	r20, r26
     d3a:	5b 07       	cpc	r21, r27
     d3c:	68 f4       	brcc	.+26     	; 0xd58 <clust2sect+0x44>
     d3e:	a2 81       	ldd	r26, Z+2	; 0x02
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	0e 94 4d 36 	call	0x6c9a	; 0x6c9a <__muluhisi3>
     d46:	02 a5       	ldd	r16, Z+42	; 0x2a
     d48:	13 a5       	ldd	r17, Z+43	; 0x2b
     d4a:	24 a5       	ldd	r18, Z+44	; 0x2c
     d4c:	35 a5       	ldd	r19, Z+45	; 0x2d
     d4e:	60 0f       	add	r22, r16
     d50:	71 1f       	adc	r23, r17
     d52:	82 1f       	adc	r24, r18
     d54:	93 1f       	adc	r25, r19
     d56:	03 c0       	rjmp	.+6      	; 0xd5e <clust2sect+0x4a>
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	cb 01       	movw	r24, r22
     d5e:	1f 91       	pop	r17
     d60:	0f 91       	pop	r16
     d62:	08 95       	ret

00000d64 <get_fat>:
     d64:	af 92       	push	r10
     d66:	bf 92       	push	r11
     d68:	cf 92       	push	r12
     d6a:	df 92       	push	r13
     d6c:	ef 92       	push	r14
     d6e:	ff 92       	push	r15
     d70:	1f 93       	push	r17
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	42 30       	cpi	r20, 0x02	; 2
     d78:	51 05       	cpc	r21, r1
     d7a:	61 05       	cpc	r22, r1
     d7c:	71 05       	cpc	r23, r1
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <get_fat+0x1e>
     d80:	ad c0       	rjmp	.+346    	; 0xedc <get_fat+0x178>
     d82:	fc 01       	movw	r30, r24
     d84:	c2 8c       	ldd	r12, Z+26	; 0x1a
     d86:	d3 8c       	ldd	r13, Z+27	; 0x1b
     d88:	e4 8c       	ldd	r14, Z+28	; 0x1c
     d8a:	f5 8c       	ldd	r15, Z+29	; 0x1d
     d8c:	4c 15       	cp	r20, r12
     d8e:	5d 05       	cpc	r21, r13
     d90:	6e 05       	cpc	r22, r14
     d92:	7f 05       	cpc	r23, r15
     d94:	08 f0       	brcs	.+2      	; 0xd98 <get_fat+0x34>
     d96:	a7 c0       	rjmp	.+334    	; 0xee6 <get_fat+0x182>
     d98:	6a 01       	movw	r12, r20
     d9a:	7b 01       	movw	r14, r22
     d9c:	ec 01       	movw	r28, r24
     d9e:	80 81       	ld	r24, Z
     da0:	82 30       	cpi	r24, 0x02	; 2
     da2:	09 f4       	brne	.+2      	; 0xda6 <get_fat+0x42>
     da4:	4c c0       	rjmp	.+152    	; 0xe3e <get_fat+0xda>
     da6:	83 30       	cpi	r24, 0x03	; 3
     da8:	09 f4       	brne	.+2      	; 0xdac <get_fat+0x48>
     daa:	6b c0       	rjmp	.+214    	; 0xe82 <get_fat+0x11e>
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	09 f0       	breq	.+2      	; 0xdb2 <get_fat+0x4e>
     db0:	9f c0       	rjmp	.+318    	; 0xef0 <get_fat+0x18c>
     db2:	5a 01       	movw	r10, r20
     db4:	b6 94       	lsr	r11
     db6:	a7 94       	ror	r10
     db8:	a4 0e       	add	r10, r20
     dba:	b5 1e       	adc	r11, r21
     dbc:	c5 01       	movw	r24, r10
     dbe:	89 2f       	mov	r24, r25
     dc0:	99 27       	eor	r25, r25
     dc2:	86 95       	lsr	r24
     dc4:	42 a1       	ldd	r20, Z+34	; 0x22
     dc6:	53 a1       	ldd	r21, Z+35	; 0x23
     dc8:	64 a1       	ldd	r22, Z+36	; 0x24
     dca:	75 a1       	ldd	r23, Z+37	; 0x25
     dcc:	48 0f       	add	r20, r24
     dce:	59 1f       	adc	r21, r25
     dd0:	61 1d       	adc	r22, r1
     dd2:	71 1d       	adc	r23, r1
     dd4:	cf 01       	movw	r24, r30
     dd6:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
     dda:	81 11       	cpse	r24, r1
     ddc:	8d c0       	rjmp	.+282    	; 0xef8 <get_fat+0x194>
     dde:	f5 01       	movw	r30, r10
     de0:	f1 70       	andi	r31, 0x01	; 1
     de2:	ec 0f       	add	r30, r28
     de4:	fd 1f       	adc	r31, r29
     de6:	12 a9       	ldd	r17, Z+50	; 0x32
     de8:	ff ef       	ldi	r31, 0xFF	; 255
     dea:	af 1a       	sub	r10, r31
     dec:	bf 0a       	sbc	r11, r31
     dee:	c5 01       	movw	r24, r10
     df0:	89 2f       	mov	r24, r25
     df2:	99 27       	eor	r25, r25
     df4:	86 95       	lsr	r24
     df6:	4a a1       	ldd	r20, Y+34	; 0x22
     df8:	5b a1       	ldd	r21, Y+35	; 0x23
     dfa:	6c a1       	ldd	r22, Y+36	; 0x24
     dfc:	7d a1       	ldd	r23, Y+37	; 0x25
     dfe:	48 0f       	add	r20, r24
     e00:	59 1f       	adc	r21, r25
     e02:	61 1d       	adc	r22, r1
     e04:	71 1d       	adc	r23, r1
     e06:	ce 01       	movw	r24, r28
     e08:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
     e0c:	81 11       	cpse	r24, r1
     e0e:	78 c0       	rjmp	.+240    	; 0xf00 <get_fat+0x19c>
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	b8 22       	and	r11, r24
     e14:	ca 0d       	add	r28, r10
     e16:	db 1d       	adc	r29, r11
     e18:	8a a9       	ldd	r24, Y+50	; 0x32
     e1a:	61 2f       	mov	r22, r17
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	78 2b       	or	r23, r24
     e20:	c0 fe       	sbrs	r12, 0
     e22:	09 c0       	rjmp	.+18     	; 0xe36 <get_fat+0xd2>
     e24:	72 95       	swap	r23
     e26:	62 95       	swap	r22
     e28:	6f 70       	andi	r22, 0x0F	; 15
     e2a:	67 27       	eor	r22, r23
     e2c:	7f 70       	andi	r23, 0x0F	; 15
     e2e:	67 27       	eor	r22, r23
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	70 c0       	rjmp	.+224    	; 0xf16 <get_fat+0x1b2>
     e36:	7f 70       	andi	r23, 0x0F	; 15
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	6c c0       	rjmp	.+216    	; 0xf16 <get_fat+0x1b2>
     e3e:	45 2f       	mov	r20, r21
     e40:	56 2f       	mov	r21, r22
     e42:	67 2f       	mov	r22, r23
     e44:	77 27       	eor	r23, r23
     e46:	82 a1       	ldd	r24, Z+34	; 0x22
     e48:	93 a1       	ldd	r25, Z+35	; 0x23
     e4a:	a4 a1       	ldd	r26, Z+36	; 0x24
     e4c:	b5 a1       	ldd	r27, Z+37	; 0x25
     e4e:	48 0f       	add	r20, r24
     e50:	59 1f       	adc	r21, r25
     e52:	6a 1f       	adc	r22, r26
     e54:	7b 1f       	adc	r23, r27
     e56:	cf 01       	movw	r24, r30
     e58:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
     e5c:	81 11       	cpse	r24, r1
     e5e:	54 c0       	rjmp	.+168    	; 0xf08 <get_fat+0x1a4>
     e60:	b7 01       	movw	r22, r14
     e62:	a6 01       	movw	r20, r12
     e64:	44 0f       	add	r20, r20
     e66:	55 1f       	adc	r21, r21
     e68:	66 1f       	adc	r22, r22
     e6a:	77 1f       	adc	r23, r23
     e6c:	4e 7f       	andi	r20, 0xFE	; 254
     e6e:	51 70       	andi	r21, 0x01	; 1
     e70:	66 27       	eor	r22, r22
     e72:	77 27       	eor	r23, r23
     e74:	c4 0f       	add	r28, r20
     e76:	d5 1f       	adc	r29, r21
     e78:	6a a9       	ldd	r22, Y+50	; 0x32
     e7a:	7b a9       	ldd	r23, Y+51	; 0x33
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	4a c0       	rjmp	.+148    	; 0xf16 <get_fat+0x1b2>
     e82:	82 a1       	ldd	r24, Z+34	; 0x22
     e84:	93 a1       	ldd	r25, Z+35	; 0x23
     e86:	a4 a1       	ldd	r26, Z+36	; 0x24
     e88:	b5 a1       	ldd	r27, Z+37	; 0x25
     e8a:	68 94       	set
     e8c:	16 f8       	bld	r1, 6
     e8e:	76 95       	lsr	r23
     e90:	67 95       	ror	r22
     e92:	57 95       	ror	r21
     e94:	47 95       	ror	r20
     e96:	16 94       	lsr	r1
     e98:	d1 f7       	brne	.-12     	; 0xe8e <get_fat+0x12a>
     e9a:	48 0f       	add	r20, r24
     e9c:	59 1f       	adc	r21, r25
     e9e:	6a 1f       	adc	r22, r26
     ea0:	7b 1f       	adc	r23, r27
     ea2:	cf 01       	movw	r24, r30
     ea4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
     ea8:	81 11       	cpse	r24, r1
     eaa:	32 c0       	rjmp	.+100    	; 0xf10 <get_fat+0x1ac>
     eac:	b7 01       	movw	r22, r14
     eae:	a6 01       	movw	r20, r12
     eb0:	44 0f       	add	r20, r20
     eb2:	55 1f       	adc	r21, r21
     eb4:	66 1f       	adc	r22, r22
     eb6:	77 1f       	adc	r23, r23
     eb8:	44 0f       	add	r20, r20
     eba:	55 1f       	adc	r21, r21
     ebc:	66 1f       	adc	r22, r22
     ebe:	77 1f       	adc	r23, r23
     ec0:	4c 7f       	andi	r20, 0xFC	; 252
     ec2:	51 70       	andi	r21, 0x01	; 1
     ec4:	66 27       	eor	r22, r22
     ec6:	77 27       	eor	r23, r23
     ec8:	c4 0f       	add	r28, r20
     eca:	d5 1f       	adc	r29, r21
     ecc:	8a a9       	ldd	r24, Y+50	; 0x32
     ece:	9b a9       	ldd	r25, Y+51	; 0x33
     ed0:	ac a9       	ldd	r26, Y+52	; 0x34
     ed2:	bd a9       	ldd	r27, Y+53	; 0x35
     ed4:	bc 01       	movw	r22, r24
     ed6:	cd 01       	movw	r24, r26
     ed8:	9f 70       	andi	r25, 0x0F	; 15
     eda:	1d c0       	rjmp	.+58     	; 0xf16 <get_fat+0x1b2>
     edc:	61 e0       	ldi	r22, 0x01	; 1
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	18 c0       	rjmp	.+48     	; 0xf16 <get_fat+0x1b2>
     ee6:	61 e0       	ldi	r22, 0x01	; 1
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	13 c0       	rjmp	.+38     	; 0xf16 <get_fat+0x1b2>
     ef0:	6f ef       	ldi	r22, 0xFF	; 255
     ef2:	7f ef       	ldi	r23, 0xFF	; 255
     ef4:	cb 01       	movw	r24, r22
     ef6:	0f c0       	rjmp	.+30     	; 0xf16 <get_fat+0x1b2>
     ef8:	6f ef       	ldi	r22, 0xFF	; 255
     efa:	7f ef       	ldi	r23, 0xFF	; 255
     efc:	cb 01       	movw	r24, r22
     efe:	0b c0       	rjmp	.+22     	; 0xf16 <get_fat+0x1b2>
     f00:	6f ef       	ldi	r22, 0xFF	; 255
     f02:	7f ef       	ldi	r23, 0xFF	; 255
     f04:	cb 01       	movw	r24, r22
     f06:	07 c0       	rjmp	.+14     	; 0xf16 <get_fat+0x1b2>
     f08:	6f ef       	ldi	r22, 0xFF	; 255
     f0a:	7f ef       	ldi	r23, 0xFF	; 255
     f0c:	cb 01       	movw	r24, r22
     f0e:	03 c0       	rjmp	.+6      	; 0xf16 <get_fat+0x1b2>
     f10:	6f ef       	ldi	r22, 0xFF	; 255
     f12:	7f ef       	ldi	r23, 0xFF	; 255
     f14:	cb 01       	movw	r24, r22
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	1f 91       	pop	r17
     f1c:	ff 90       	pop	r15
     f1e:	ef 90       	pop	r14
     f20:	df 90       	pop	r13
     f22:	cf 90       	pop	r12
     f24:	bf 90       	pop	r11
     f26:	af 90       	pop	r10
     f28:	08 95       	ret

00000f2a <dir_sdi>:
     f2a:	ef 92       	push	r14
     f2c:	ff 92       	push	r15
     f2e:	0f 93       	push	r16
     f30:	1f 93       	push	r17
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	ec 01       	movw	r28, r24
     f38:	8b 01       	movw	r16, r22
     f3a:	7d 83       	std	Y+5, r23	; 0x05
     f3c:	6c 83       	std	Y+4, r22	; 0x04
     f3e:	4e 81       	ldd	r20, Y+6	; 0x06
     f40:	5f 81       	ldd	r21, Y+7	; 0x07
     f42:	68 85       	ldd	r22, Y+8	; 0x08
     f44:	79 85       	ldd	r23, Y+9	; 0x09
     f46:	41 30       	cpi	r20, 0x01	; 1
     f48:	51 05       	cpc	r21, r1
     f4a:	61 05       	cpc	r22, r1
     f4c:	71 05       	cpc	r23, r1
     f4e:	09 f4       	brne	.+2      	; 0xf52 <dir_sdi+0x28>
     f50:	92 c0       	rjmp	.+292    	; 0x1076 <dir_sdi+0x14c>
     f52:	e8 81       	ld	r30, Y
     f54:	f9 81       	ldd	r31, Y+1	; 0x01
     f56:	82 8d       	ldd	r24, Z+26	; 0x1a
     f58:	93 8d       	ldd	r25, Z+27	; 0x1b
     f5a:	a4 8d       	ldd	r26, Z+28	; 0x1c
     f5c:	b5 8d       	ldd	r27, Z+29	; 0x1d
     f5e:	48 17       	cp	r20, r24
     f60:	59 07       	cpc	r21, r25
     f62:	6a 07       	cpc	r22, r26
     f64:	7b 07       	cpc	r23, r27
     f66:	08 f0       	brcs	.+2      	; 0xf6a <dir_sdi+0x40>
     f68:	88 c0       	rjmp	.+272    	; 0x107a <dir_sdi+0x150>
     f6a:	41 15       	cp	r20, r1
     f6c:	51 05       	cpc	r21, r1
     f6e:	61 05       	cpc	r22, r1
     f70:	71 05       	cpc	r23, r1
     f72:	51 f5       	brne	.+84     	; 0xfc8 <dir_sdi+0x9e>
     f74:	80 81       	ld	r24, Z
     f76:	83 30       	cpi	r24, 0x03	; 3
     f78:	49 f4       	brne	.+18     	; 0xf8c <dir_sdi+0x62>
     f7a:	46 a1       	ldd	r20, Z+38	; 0x26
     f7c:	57 a1       	ldd	r21, Z+39	; 0x27
     f7e:	60 a5       	ldd	r22, Z+40	; 0x28
     f80:	71 a5       	ldd	r23, Z+41	; 0x29
     f82:	41 15       	cp	r20, r1
     f84:	51 05       	cpc	r21, r1
     f86:	61 05       	cpc	r22, r1
     f88:	71 05       	cpc	r23, r1
     f8a:	f1 f4       	brne	.+60     	; 0xfc8 <dir_sdi+0x9e>
     f8c:	1a 86       	std	Y+10, r1	; 0x0a
     f8e:	1b 86       	std	Y+11, r1	; 0x0b
     f90:	1c 86       	std	Y+12, r1	; 0x0c
     f92:	1d 86       	std	Y+13, r1	; 0x0d
     f94:	80 85       	ldd	r24, Z+8	; 0x08
     f96:	91 85       	ldd	r25, Z+9	; 0x09
     f98:	08 17       	cp	r16, r24
     f9a:	19 07       	cpc	r17, r25
     f9c:	08 f0       	brcs	.+2      	; 0xfa0 <dir_sdi+0x76>
     f9e:	6f c0       	rjmp	.+222    	; 0x107e <dir_sdi+0x154>
     fa0:	86 a1       	ldd	r24, Z+38	; 0x26
     fa2:	97 a1       	ldd	r25, Z+39	; 0x27
     fa4:	a0 a5       	ldd	r26, Z+40	; 0x28
     fa6:	b1 a5       	ldd	r27, Z+41	; 0x29
     fa8:	98 01       	movw	r18, r16
     faa:	32 95       	swap	r19
     fac:	22 95       	swap	r18
     fae:	2f 70       	andi	r18, 0x0F	; 15
     fb0:	23 27       	eor	r18, r19
     fb2:	3f 70       	andi	r19, 0x0F	; 15
     fb4:	23 27       	eor	r18, r19
     fb6:	82 0f       	add	r24, r18
     fb8:	93 1f       	adc	r25, r19
     fba:	a1 1d       	adc	r26, r1
     fbc:	b1 1d       	adc	r27, r1
     fbe:	8e 87       	std	Y+14, r24	; 0x0e
     fc0:	9f 87       	std	Y+15, r25	; 0x0f
     fc2:	a8 8b       	std	Y+16, r26	; 0x10
     fc4:	b9 8b       	std	Y+17, r27	; 0x11
     fc6:	44 c0       	rjmp	.+136    	; 0x1050 <dir_sdi+0x126>
     fc8:	e2 80       	ldd	r14, Z+2	; 0x02
     fca:	80 e1       	ldi	r24, 0x10	; 16
     fcc:	e8 9e       	mul	r14, r24
     fce:	70 01       	movw	r14, r0
     fd0:	11 24       	eor	r1, r1
     fd2:	0e 15       	cp	r16, r14
     fd4:	1f 05       	cpc	r17, r15
     fd6:	18 f1       	brcs	.+70     	; 0x101e <dir_sdi+0xf4>
     fd8:	88 81       	ld	r24, Y
     fda:	99 81       	ldd	r25, Y+1	; 0x01
     fdc:	0e 94 b2 06 	call	0xd64	; 0xd64 <get_fat>
     fe0:	ab 01       	movw	r20, r22
     fe2:	bc 01       	movw	r22, r24
     fe4:	4f 3f       	cpi	r20, 0xFF	; 255
     fe6:	8f ef       	ldi	r24, 0xFF	; 255
     fe8:	58 07       	cpc	r21, r24
     fea:	68 07       	cpc	r22, r24
     fec:	78 07       	cpc	r23, r24
     fee:	09 f4       	brne	.+2      	; 0xff2 <dir_sdi+0xc8>
     ff0:	48 c0       	rjmp	.+144    	; 0x1082 <dir_sdi+0x158>
     ff2:	42 30       	cpi	r20, 0x02	; 2
     ff4:	51 05       	cpc	r21, r1
     ff6:	61 05       	cpc	r22, r1
     ff8:	71 05       	cpc	r23, r1
     ffa:	08 f4       	brcc	.+2      	; 0xffe <dir_sdi+0xd4>
     ffc:	44 c0       	rjmp	.+136    	; 0x1086 <dir_sdi+0x15c>
     ffe:	e8 81       	ld	r30, Y
    1000:	f9 81       	ldd	r31, Y+1	; 0x01
    1002:	82 8d       	ldd	r24, Z+26	; 0x1a
    1004:	93 8d       	ldd	r25, Z+27	; 0x1b
    1006:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1008:	b5 8d       	ldd	r27, Z+29	; 0x1d
    100a:	48 17       	cp	r20, r24
    100c:	59 07       	cpc	r21, r25
    100e:	6a 07       	cpc	r22, r26
    1010:	7b 07       	cpc	r23, r27
    1012:	d8 f5       	brcc	.+118    	; 0x108a <dir_sdi+0x160>
    1014:	0e 19       	sub	r16, r14
    1016:	1f 09       	sbc	r17, r15
    1018:	0e 15       	cp	r16, r14
    101a:	1f 05       	cpc	r17, r15
    101c:	e8 f6       	brcc	.-70     	; 0xfd8 <dir_sdi+0xae>
    101e:	4a 87       	std	Y+10, r20	; 0x0a
    1020:	5b 87       	std	Y+11, r21	; 0x0b
    1022:	6c 87       	std	Y+12, r22	; 0x0c
    1024:	7d 87       	std	Y+13, r23	; 0x0d
    1026:	88 81       	ld	r24, Y
    1028:	99 81       	ldd	r25, Y+1	; 0x01
    102a:	0e 94 8a 06 	call	0xd14	; 0xd14 <clust2sect>
    102e:	98 01       	movw	r18, r16
    1030:	32 95       	swap	r19
    1032:	22 95       	swap	r18
    1034:	2f 70       	andi	r18, 0x0F	; 15
    1036:	23 27       	eor	r18, r19
    1038:	3f 70       	andi	r19, 0x0F	; 15
    103a:	23 27       	eor	r18, r19
    103c:	dc 01       	movw	r26, r24
    103e:	cb 01       	movw	r24, r22
    1040:	82 0f       	add	r24, r18
    1042:	93 1f       	adc	r25, r19
    1044:	a1 1d       	adc	r26, r1
    1046:	b1 1d       	adc	r27, r1
    1048:	8e 87       	std	Y+14, r24	; 0x0e
    104a:	9f 87       	std	Y+15, r25	; 0x0f
    104c:	a8 8b       	std	Y+16, r26	; 0x10
    104e:	b9 8b       	std	Y+17, r27	; 0x11
    1050:	88 81       	ld	r24, Y
    1052:	99 81       	ldd	r25, Y+1	; 0x01
    1054:	c2 96       	adiw	r24, 0x32	; 50
    1056:	0f 70       	andi	r16, 0x0F	; 15
    1058:	11 27       	eor	r17, r17
    105a:	00 0f       	add	r16, r16
    105c:	11 1f       	adc	r17, r17
    105e:	02 95       	swap	r16
    1060:	12 95       	swap	r17
    1062:	10 7f       	andi	r17, 0xF0	; 240
    1064:	10 27       	eor	r17, r16
    1066:	00 7f       	andi	r16, 0xF0	; 240
    1068:	10 27       	eor	r17, r16
    106a:	08 0f       	add	r16, r24
    106c:	19 1f       	adc	r17, r25
    106e:	1b 8b       	std	Y+19, r17	; 0x13
    1070:	0a 8b       	std	Y+18, r16	; 0x12
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	0b c0       	rjmp	.+22     	; 0x108c <dir_sdi+0x162>
    1076:	82 e0       	ldi	r24, 0x02	; 2
    1078:	09 c0       	rjmp	.+18     	; 0x108c <dir_sdi+0x162>
    107a:	82 e0       	ldi	r24, 0x02	; 2
    107c:	07 c0       	rjmp	.+14     	; 0x108c <dir_sdi+0x162>
    107e:	82 e0       	ldi	r24, 0x02	; 2
    1080:	05 c0       	rjmp	.+10     	; 0x108c <dir_sdi+0x162>
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	03 c0       	rjmp	.+6      	; 0x108c <dir_sdi+0x162>
    1086:	82 e0       	ldi	r24, 0x02	; 2
    1088:	01 c0       	rjmp	.+2      	; 0x108c <dir_sdi+0x162>
    108a:	82 e0       	ldi	r24, 0x02	; 2
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	ff 90       	pop	r15
    1096:	ef 90       	pop	r14
    1098:	08 95       	ret

0000109a <put_fat>:
    109a:	6f 92       	push	r6
    109c:	7f 92       	push	r7
    109e:	8f 92       	push	r8
    10a0:	9f 92       	push	r9
    10a2:	af 92       	push	r10
    10a4:	bf 92       	push	r11
    10a6:	cf 92       	push	r12
    10a8:	df 92       	push	r13
    10aa:	ef 92       	push	r14
    10ac:	ff 92       	push	r15
    10ae:	0f 93       	push	r16
    10b0:	1f 93       	push	r17
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	42 30       	cpi	r20, 0x02	; 2
    10b8:	51 05       	cpc	r21, r1
    10ba:	61 05       	cpc	r22, r1
    10bc:	71 05       	cpc	r23, r1
    10be:	08 f4       	brcc	.+2      	; 0x10c2 <put_fat+0x28>
    10c0:	e1 c0       	rjmp	.+450    	; 0x1284 <put_fat+0x1ea>
    10c2:	fc 01       	movw	r30, r24
    10c4:	c2 8c       	ldd	r12, Z+26	; 0x1a
    10c6:	d3 8c       	ldd	r13, Z+27	; 0x1b
    10c8:	e4 8c       	ldd	r14, Z+28	; 0x1c
    10ca:	f5 8c       	ldd	r15, Z+29	; 0x1d
    10cc:	4c 15       	cp	r20, r12
    10ce:	5d 05       	cpc	r21, r13
    10d0:	6e 05       	cpc	r22, r14
    10d2:	7f 05       	cpc	r23, r15
    10d4:	08 f0       	brcs	.+2      	; 0x10d8 <put_fat+0x3e>
    10d6:	d8 c0       	rjmp	.+432    	; 0x1288 <put_fat+0x1ee>
    10d8:	68 01       	movw	r12, r16
    10da:	79 01       	movw	r14, r18
    10dc:	4a 01       	movw	r8, r20
    10de:	5b 01       	movw	r10, r22
    10e0:	ec 01       	movw	r28, r24
    10e2:	80 81       	ld	r24, Z
    10e4:	82 30       	cpi	r24, 0x02	; 2
    10e6:	09 f4       	brne	.+2      	; 0x10ea <put_fat+0x50>
    10e8:	67 c0       	rjmp	.+206    	; 0x11b8 <put_fat+0x11e>
    10ea:	83 30       	cpi	r24, 0x03	; 3
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <put_fat+0x56>
    10ee:	88 c0       	rjmp	.+272    	; 0x1200 <put_fat+0x166>
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <put_fat+0x5c>
    10f4:	bf c0       	rjmp	.+382    	; 0x1274 <put_fat+0x1da>
    10f6:	8a 01       	movw	r16, r20
    10f8:	16 95       	lsr	r17
    10fa:	07 95       	ror	r16
    10fc:	38 01       	movw	r6, r16
    10fe:	64 0e       	add	r6, r20
    1100:	75 1e       	adc	r7, r21
    1102:	c3 01       	movw	r24, r6
    1104:	89 2f       	mov	r24, r25
    1106:	99 27       	eor	r25, r25
    1108:	86 95       	lsr	r24
    110a:	42 a1       	ldd	r20, Z+34	; 0x22
    110c:	53 a1       	ldd	r21, Z+35	; 0x23
    110e:	64 a1       	ldd	r22, Z+36	; 0x24
    1110:	75 a1       	ldd	r23, Z+37	; 0x25
    1112:	48 0f       	add	r20, r24
    1114:	59 1f       	adc	r21, r25
    1116:	61 1d       	adc	r22, r1
    1118:	71 1d       	adc	r23, r1
    111a:	cf 01       	movw	r24, r30
    111c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    1120:	18 2f       	mov	r17, r24
    1122:	81 11       	cpse	r24, r1
    1124:	ac c0       	rjmp	.+344    	; 0x127e <put_fat+0x1e4>
    1126:	c3 01       	movw	r24, r6
    1128:	91 70       	andi	r25, 0x01	; 1
    112a:	80 fe       	sbrs	r8, 0
    112c:	24 c0       	rjmp	.+72     	; 0x1176 <put_fat+0xdc>
    112e:	fe 01       	movw	r30, r28
    1130:	e8 0f       	add	r30, r24
    1132:	f9 1f       	adc	r31, r25
    1134:	82 a9       	ldd	r24, Z+50	; 0x32
    1136:	28 2f       	mov	r18, r24
    1138:	2f 70       	andi	r18, 0x0F	; 15
    113a:	30 e1       	ldi	r19, 0x10	; 16
    113c:	c3 9e       	mul	r12, r19
    113e:	c0 01       	movw	r24, r0
    1140:	11 24       	eor	r1, r1
    1142:	82 2b       	or	r24, r18
    1144:	82 ab       	std	Z+50, r24	; 0x32
    1146:	53 01       	movw	r10, r6
    1148:	8f ef       	ldi	r24, 0xFF	; 255
    114a:	a8 1a       	sub	r10, r24
    114c:	b8 0a       	sbc	r11, r24
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	8c 83       	std	Y+4, r24	; 0x04
    1152:	c5 01       	movw	r24, r10
    1154:	89 2f       	mov	r24, r25
    1156:	99 27       	eor	r25, r25
    1158:	86 95       	lsr	r24
    115a:	4a a1       	ldd	r20, Y+34	; 0x22
    115c:	5b a1       	ldd	r21, Y+35	; 0x23
    115e:	6c a1       	ldd	r22, Y+36	; 0x24
    1160:	7d a1       	ldd	r23, Y+37	; 0x25
    1162:	48 0f       	add	r20, r24
    1164:	59 1f       	adc	r21, r25
    1166:	61 1d       	adc	r22, r1
    1168:	71 1d       	adc	r23, r1
    116a:	ce 01       	movw	r24, r28
    116c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    1170:	81 11       	cpse	r24, r1
    1172:	82 c0       	rjmp	.+260    	; 0x1278 <put_fat+0x1de>
    1174:	8b c0       	rjmp	.+278    	; 0x128c <put_fat+0x1f2>
    1176:	fe 01       	movw	r30, r28
    1178:	e8 0f       	add	r30, r24
    117a:	f9 1f       	adc	r31, r25
    117c:	c2 aa       	std	Z+50, r12	; 0x32
    117e:	53 01       	movw	r10, r6
    1180:	ef ef       	ldi	r30, 0xFF	; 255
    1182:	ae 1a       	sub	r10, r30
    1184:	be 0a       	sbc	r11, r30
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	8c 83       	std	Y+4, r24	; 0x04
    118a:	c5 01       	movw	r24, r10
    118c:	89 2f       	mov	r24, r25
    118e:	99 27       	eor	r25, r25
    1190:	86 95       	lsr	r24
    1192:	4a a1       	ldd	r20, Y+34	; 0x22
    1194:	5b a1       	ldd	r21, Y+35	; 0x23
    1196:	6c a1       	ldd	r22, Y+36	; 0x24
    1198:	7d a1       	ldd	r23, Y+37	; 0x25
    119a:	48 0f       	add	r20, r24
    119c:	59 1f       	adc	r21, r25
    119e:	61 1d       	adc	r22, r1
    11a0:	71 1d       	adc	r23, r1
    11a2:	ce 01       	movw	r24, r28
    11a4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    11a8:	81 11       	cpse	r24, r1
    11aa:	68 c0       	rjmp	.+208    	; 0x127c <put_fat+0x1e2>
    11ac:	7a c0       	rjmp	.+244    	; 0x12a2 <put_fat+0x208>
    11ae:	fe 01       	movw	r30, r28
    11b0:	e8 0f       	add	r30, r24
    11b2:	f9 1f       	adc	r31, r25
    11b4:	c2 aa       	std	Z+50, r12	; 0x32
    11b6:	63 c0       	rjmp	.+198    	; 0x127e <put_fat+0x1e4>
    11b8:	45 2f       	mov	r20, r21
    11ba:	56 2f       	mov	r21, r22
    11bc:	67 2f       	mov	r22, r23
    11be:	77 27       	eor	r23, r23
    11c0:	82 a1       	ldd	r24, Z+34	; 0x22
    11c2:	93 a1       	ldd	r25, Z+35	; 0x23
    11c4:	a4 a1       	ldd	r26, Z+36	; 0x24
    11c6:	b5 a1       	ldd	r27, Z+37	; 0x25
    11c8:	48 0f       	add	r20, r24
    11ca:	59 1f       	adc	r21, r25
    11cc:	6a 1f       	adc	r22, r26
    11ce:	7b 1f       	adc	r23, r27
    11d0:	cf 01       	movw	r24, r30
    11d2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    11d6:	18 2f       	mov	r17, r24
    11d8:	81 11       	cpse	r24, r1
    11da:	51 c0       	rjmp	.+162    	; 0x127e <put_fat+0x1e4>
    11dc:	b5 01       	movw	r22, r10
    11de:	a4 01       	movw	r20, r8
    11e0:	44 0f       	add	r20, r20
    11e2:	55 1f       	adc	r21, r21
    11e4:	66 1f       	adc	r22, r22
    11e6:	77 1f       	adc	r23, r23
    11e8:	4e 7f       	andi	r20, 0xFE	; 254
    11ea:	51 70       	andi	r21, 0x01	; 1
    11ec:	66 27       	eor	r22, r22
    11ee:	77 27       	eor	r23, r23
    11f0:	4e 5c       	subi	r20, 0xCE	; 206
    11f2:	5f 4f       	sbci	r21, 0xFF	; 255
    11f4:	fe 01       	movw	r30, r28
    11f6:	e4 0f       	add	r30, r20
    11f8:	f5 1f       	adc	r31, r21
    11fa:	d1 82       	std	Z+1, r13	; 0x01
    11fc:	c0 82       	st	Z, r12
    11fe:	3f c0       	rjmp	.+126    	; 0x127e <put_fat+0x1e4>
    1200:	82 a1       	ldd	r24, Z+34	; 0x22
    1202:	93 a1       	ldd	r25, Z+35	; 0x23
    1204:	a4 a1       	ldd	r26, Z+36	; 0x24
    1206:	b5 a1       	ldd	r27, Z+37	; 0x25
    1208:	68 94       	set
    120a:	16 f8       	bld	r1, 6
    120c:	76 95       	lsr	r23
    120e:	67 95       	ror	r22
    1210:	57 95       	ror	r21
    1212:	47 95       	ror	r20
    1214:	16 94       	lsr	r1
    1216:	d1 f7       	brne	.-12     	; 0x120c <put_fat+0x172>
    1218:	48 0f       	add	r20, r24
    121a:	59 1f       	adc	r21, r25
    121c:	6a 1f       	adc	r22, r26
    121e:	7b 1f       	adc	r23, r27
    1220:	cf 01       	movw	r24, r30
    1222:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    1226:	18 2f       	mov	r17, r24
    1228:	81 11       	cpse	r24, r1
    122a:	29 c0       	rjmp	.+82     	; 0x127e <put_fat+0x1e4>
    122c:	b5 01       	movw	r22, r10
    122e:	a4 01       	movw	r20, r8
    1230:	44 0f       	add	r20, r20
    1232:	55 1f       	adc	r21, r21
    1234:	66 1f       	adc	r22, r22
    1236:	77 1f       	adc	r23, r23
    1238:	44 0f       	add	r20, r20
    123a:	55 1f       	adc	r21, r21
    123c:	66 1f       	adc	r22, r22
    123e:	77 1f       	adc	r23, r23
    1240:	4c 7f       	andi	r20, 0xFC	; 252
    1242:	51 70       	andi	r21, 0x01	; 1
    1244:	66 27       	eor	r22, r22
    1246:	77 27       	eor	r23, r23
    1248:	4e 5c       	subi	r20, 0xCE	; 206
    124a:	5f 4f       	sbci	r21, 0xFF	; 255
    124c:	fe 01       	movw	r30, r28
    124e:	e4 0f       	add	r30, r20
    1250:	f5 1f       	adc	r31, r21
    1252:	80 81       	ld	r24, Z
    1254:	91 81       	ldd	r25, Z+1	; 0x01
    1256:	a2 81       	ldd	r26, Z+2	; 0x02
    1258:	b3 81       	ldd	r27, Z+3	; 0x03
    125a:	88 27       	eor	r24, r24
    125c:	99 27       	eor	r25, r25
    125e:	aa 27       	eor	r26, r26
    1260:	b0 7f       	andi	r27, 0xF0	; 240
    1262:	c8 2a       	or	r12, r24
    1264:	d9 2a       	or	r13, r25
    1266:	ea 2a       	or	r14, r26
    1268:	fb 2a       	or	r15, r27
    126a:	c0 82       	st	Z, r12
    126c:	d1 82       	std	Z+1, r13	; 0x01
    126e:	e2 82       	std	Z+2, r14	; 0x02
    1270:	f3 82       	std	Z+3, r15	; 0x03
    1272:	05 c0       	rjmp	.+10     	; 0x127e <put_fat+0x1e4>
    1274:	12 e0       	ldi	r17, 0x02	; 2
    1276:	03 c0       	rjmp	.+6      	; 0x127e <put_fat+0x1e4>
    1278:	18 2f       	mov	r17, r24
    127a:	01 c0       	rjmp	.+2      	; 0x127e <put_fat+0x1e4>
    127c:	18 2f       	mov	r17, r24
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	8c 83       	std	Y+4, r24	; 0x04
    1282:	1b c0       	rjmp	.+54     	; 0x12ba <put_fat+0x220>
    1284:	12 e0       	ldi	r17, 0x02	; 2
    1286:	19 c0       	rjmp	.+50     	; 0x12ba <put_fat+0x220>
    1288:	12 e0       	ldi	r17, 0x02	; 2
    128a:	17 c0       	rjmp	.+46     	; 0x12ba <put_fat+0x220>
    128c:	c5 01       	movw	r24, r10
    128e:	91 70       	andi	r25, 0x01	; 1
    1290:	68 94       	set
    1292:	13 f8       	bld	r1, 3
    1294:	f6 94       	lsr	r15
    1296:	e7 94       	ror	r14
    1298:	d7 94       	ror	r13
    129a:	c7 94       	ror	r12
    129c:	16 94       	lsr	r1
    129e:	d1 f7       	brne	.-12     	; 0x1294 <put_fat+0x1fa>
    12a0:	86 cf       	rjmp	.-244    	; 0x11ae <put_fat+0x114>
    12a2:	c5 01       	movw	r24, r10
    12a4:	91 70       	andi	r25, 0x01	; 1
    12a6:	fe 01       	movw	r30, r28
    12a8:	e8 0f       	add	r30, r24
    12aa:	f9 1f       	adc	r31, r25
    12ac:	32 a9       	ldd	r19, Z+50	; 0x32
    12ae:	30 7f       	andi	r19, 0xF0	; 240
    12b0:	2d 2d       	mov	r18, r13
    12b2:	2f 70       	andi	r18, 0x0F	; 15
    12b4:	c3 2e       	mov	r12, r19
    12b6:	c2 2a       	or	r12, r18
    12b8:	7a cf       	rjmp	.-268    	; 0x11ae <put_fat+0x114>
    12ba:	81 2f       	mov	r24, r17
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	1f 91       	pop	r17
    12c2:	0f 91       	pop	r16
    12c4:	ff 90       	pop	r15
    12c6:	ef 90       	pop	r14
    12c8:	df 90       	pop	r13
    12ca:	cf 90       	pop	r12
    12cc:	bf 90       	pop	r11
    12ce:	af 90       	pop	r10
    12d0:	9f 90       	pop	r9
    12d2:	8f 90       	pop	r8
    12d4:	7f 90       	pop	r7
    12d6:	6f 90       	pop	r6
    12d8:	08 95       	ret

000012da <create_chain>:
    12da:	4f 92       	push	r4
    12dc:	5f 92       	push	r5
    12de:	6f 92       	push	r6
    12e0:	7f 92       	push	r7
    12e2:	8f 92       	push	r8
    12e4:	9f 92       	push	r9
    12e6:	af 92       	push	r10
    12e8:	bf 92       	push	r11
    12ea:	cf 92       	push	r12
    12ec:	df 92       	push	r13
    12ee:	ef 92       	push	r14
    12f0:	ff 92       	push	r15
    12f2:	0f 93       	push	r16
    12f4:	1f 93       	push	r17
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	ec 01       	movw	r28, r24
    12fc:	2a 01       	movw	r4, r20
    12fe:	3b 01       	movw	r6, r22
    1300:	41 15       	cp	r20, r1
    1302:	51 05       	cpc	r21, r1
    1304:	61 05       	cpc	r22, r1
    1306:	71 05       	cpc	r23, r1
    1308:	b9 f4       	brne	.+46     	; 0x1338 <create_chain+0x5e>
    130a:	8a 84       	ldd	r8, Y+10	; 0x0a
    130c:	9b 84       	ldd	r9, Y+11	; 0x0b
    130e:	ac 84       	ldd	r10, Y+12	; 0x0c
    1310:	bd 84       	ldd	r11, Y+13	; 0x0d
    1312:	81 14       	cp	r8, r1
    1314:	91 04       	cpc	r9, r1
    1316:	a1 04       	cpc	r10, r1
    1318:	b1 04       	cpc	r11, r1
    131a:	29 f1       	breq	.+74     	; 0x1366 <create_chain+0x8c>
    131c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    131e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1320:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1322:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1324:	88 16       	cp	r8, r24
    1326:	99 06       	cpc	r9, r25
    1328:	aa 06       	cpc	r10, r26
    132a:	bb 06       	cpc	r11, r27
    132c:	00 f1       	brcs	.+64     	; 0x136e <create_chain+0x94>
    132e:	81 2c       	mov	r8, r1
    1330:	91 2c       	mov	r9, r1
    1332:	54 01       	movw	r10, r8
    1334:	83 94       	inc	r8
    1336:	1b c0       	rjmp	.+54     	; 0x136e <create_chain+0x94>
    1338:	0e 94 b2 06 	call	0xd64	; 0xd64 <get_fat>
    133c:	6b 01       	movw	r12, r22
    133e:	7c 01       	movw	r14, r24
    1340:	62 30       	cpi	r22, 0x02	; 2
    1342:	71 05       	cpc	r23, r1
    1344:	81 05       	cpc	r24, r1
    1346:	91 05       	cpc	r25, r1
    1348:	08 f4       	brcc	.+2      	; 0x134c <create_chain+0x72>
    134a:	86 c0       	rjmp	.+268    	; 0x1458 <create_chain+0x17e>
    134c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    134e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1350:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1352:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1354:	c8 16       	cp	r12, r24
    1356:	d9 06       	cpc	r13, r25
    1358:	ea 06       	cpc	r14, r26
    135a:	fb 06       	cpc	r15, r27
    135c:	08 f4       	brcc	.+2      	; 0x1360 <create_chain+0x86>
    135e:	81 c0       	rjmp	.+258    	; 0x1462 <create_chain+0x188>
    1360:	53 01       	movw	r10, r6
    1362:	42 01       	movw	r8, r4
    1364:	04 c0       	rjmp	.+8      	; 0x136e <create_chain+0x94>
    1366:	81 2c       	mov	r8, r1
    1368:	91 2c       	mov	r9, r1
    136a:	54 01       	movw	r10, r8
    136c:	83 94       	inc	r8
    136e:	75 01       	movw	r14, r10
    1370:	64 01       	movw	r12, r8
    1372:	8f ef       	ldi	r24, 0xFF	; 255
    1374:	c8 1a       	sub	r12, r24
    1376:	d8 0a       	sbc	r13, r24
    1378:	e8 0a       	sbc	r14, r24
    137a:	f8 0a       	sbc	r15, r24
    137c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    137e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1380:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1382:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1384:	c8 16       	cp	r12, r24
    1386:	d9 06       	cpc	r13, r25
    1388:	ea 06       	cpc	r14, r26
    138a:	fb 06       	cpc	r15, r27
    138c:	60 f0       	brcs	.+24     	; 0x13a6 <create_chain+0xcc>
    138e:	22 e0       	ldi	r18, 0x02	; 2
    1390:	82 16       	cp	r8, r18
    1392:	91 04       	cpc	r9, r1
    1394:	a1 04       	cpc	r10, r1
    1396:	b1 04       	cpc	r11, r1
    1398:	08 f4       	brcc	.+2      	; 0x139c <create_chain+0xc2>
    139a:	68 c0       	rjmp	.+208    	; 0x146c <create_chain+0x192>
    139c:	c1 2c       	mov	r12, r1
    139e:	d1 2c       	mov	r13, r1
    13a0:	76 01       	movw	r14, r12
    13a2:	68 94       	set
    13a4:	c1 f8       	bld	r12, 1
    13a6:	b7 01       	movw	r22, r14
    13a8:	a6 01       	movw	r20, r12
    13aa:	ce 01       	movw	r24, r28
    13ac:	0e 94 b2 06 	call	0xd64	; 0xd64 <get_fat>
    13b0:	61 15       	cp	r22, r1
    13b2:	71 05       	cpc	r23, r1
    13b4:	81 05       	cpc	r24, r1
    13b6:	91 05       	cpc	r25, r1
    13b8:	99 f0       	breq	.+38     	; 0x13e0 <create_chain+0x106>
    13ba:	6f 3f       	cpi	r22, 0xFF	; 255
    13bc:	2f ef       	ldi	r18, 0xFF	; 255
    13be:	72 07       	cpc	r23, r18
    13c0:	82 07       	cpc	r24, r18
    13c2:	92 07       	cpc	r25, r18
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <create_chain+0xee>
    13c6:	57 c0       	rjmp	.+174    	; 0x1476 <create_chain+0x19c>
    13c8:	61 30       	cpi	r22, 0x01	; 1
    13ca:	71 05       	cpc	r23, r1
    13cc:	81 05       	cpc	r24, r1
    13ce:	91 05       	cpc	r25, r1
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <create_chain+0xfa>
    13d2:	56 c0       	rjmp	.+172    	; 0x1480 <create_chain+0x1a6>
    13d4:	c8 14       	cp	r12, r8
    13d6:	d9 04       	cpc	r13, r9
    13d8:	ea 04       	cpc	r14, r10
    13da:	fb 04       	cpc	r15, r11
    13dc:	51 f6       	brne	.-108    	; 0x1372 <create_chain+0x98>
    13de:	55 c0       	rjmp	.+170    	; 0x148a <create_chain+0x1b0>
    13e0:	0f ef       	ldi	r16, 0xFF	; 255
    13e2:	1f ef       	ldi	r17, 0xFF	; 255
    13e4:	2f ef       	ldi	r18, 0xFF	; 255
    13e6:	3f e0       	ldi	r19, 0x0F	; 15
    13e8:	b7 01       	movw	r22, r14
    13ea:	a6 01       	movw	r20, r12
    13ec:	ce 01       	movw	r24, r28
    13ee:	0e 94 4d 08 	call	0x109a	; 0x109a <put_fat>
    13f2:	81 11       	cpse	r24, r1
    13f4:	2a c0       	rjmp	.+84     	; 0x144a <create_chain+0x170>
    13f6:	41 14       	cp	r4, r1
    13f8:	51 04       	cpc	r5, r1
    13fa:	61 04       	cpc	r6, r1
    13fc:	71 04       	cpc	r7, r1
    13fe:	49 f0       	breq	.+18     	; 0x1412 <create_chain+0x138>
    1400:	97 01       	movw	r18, r14
    1402:	86 01       	movw	r16, r12
    1404:	b3 01       	movw	r22, r6
    1406:	a2 01       	movw	r20, r4
    1408:	ce 01       	movw	r24, r28
    140a:	0e 94 4d 08 	call	0x109a	; 0x109a <put_fat>
    140e:	81 11       	cpse	r24, r1
    1410:	1c c0       	rjmp	.+56     	; 0x144a <create_chain+0x170>
    1412:	ca 86       	std	Y+10, r12	; 0x0a
    1414:	db 86       	std	Y+11, r13	; 0x0b
    1416:	ec 86       	std	Y+12, r14	; 0x0c
    1418:	fd 86       	std	Y+13, r15	; 0x0d
    141a:	8e 85       	ldd	r24, Y+14	; 0x0e
    141c:	9f 85       	ldd	r25, Y+15	; 0x0f
    141e:	a8 89       	ldd	r26, Y+16	; 0x10
    1420:	b9 89       	ldd	r27, Y+17	; 0x11
    1422:	8f 3f       	cpi	r24, 0xFF	; 255
    1424:	2f ef       	ldi	r18, 0xFF	; 255
    1426:	92 07       	cpc	r25, r18
    1428:	a2 07       	cpc	r26, r18
    142a:	b2 07       	cpc	r27, r18
    142c:	99 f1       	breq	.+102    	; 0x1494 <create_chain+0x1ba>
    142e:	01 97       	sbiw	r24, 0x01	; 1
    1430:	a1 09       	sbc	r26, r1
    1432:	b1 09       	sbc	r27, r1
    1434:	8e 87       	std	Y+14, r24	; 0x0e
    1436:	9f 87       	std	Y+15, r25	; 0x0f
    1438:	a8 8b       	std	Y+16, r26	; 0x10
    143a:	b9 8b       	std	Y+17, r27	; 0x11
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	8d 83       	std	Y+5, r24	; 0x05
    1440:	6c 2d       	mov	r22, r12
    1442:	7d 2d       	mov	r23, r13
    1444:	8e 2d       	mov	r24, r14
    1446:	9f 2d       	mov	r25, r15
    1448:	2e c0       	rjmp	.+92     	; 0x14a6 <create_chain+0x1cc>
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	41 f1       	breq	.+80     	; 0x149e <create_chain+0x1c4>
    144e:	61 e0       	ldi	r22, 0x01	; 1
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	27 c0       	rjmp	.+78     	; 0x14a6 <create_chain+0x1cc>
    1458:	61 e0       	ldi	r22, 0x01	; 1
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	22 c0       	rjmp	.+68     	; 0x14a6 <create_chain+0x1cc>
    1462:	6c 2d       	mov	r22, r12
    1464:	7d 2d       	mov	r23, r13
    1466:	8e 2d       	mov	r24, r14
    1468:	9f 2d       	mov	r25, r15
    146a:	1d c0       	rjmp	.+58     	; 0x14a6 <create_chain+0x1cc>
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	70 e0       	ldi	r23, 0x00	; 0
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	18 c0       	rjmp	.+48     	; 0x14a6 <create_chain+0x1cc>
    1476:	6f ef       	ldi	r22, 0xFF	; 255
    1478:	7f ef       	ldi	r23, 0xFF	; 255
    147a:	8f ef       	ldi	r24, 0xFF	; 255
    147c:	9f ef       	ldi	r25, 0xFF	; 255
    147e:	13 c0       	rjmp	.+38     	; 0x14a6 <create_chain+0x1cc>
    1480:	61 e0       	ldi	r22, 0x01	; 1
    1482:	70 e0       	ldi	r23, 0x00	; 0
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e c0       	rjmp	.+28     	; 0x14a6 <create_chain+0x1cc>
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	70 e0       	ldi	r23, 0x00	; 0
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	09 c0       	rjmp	.+18     	; 0x14a6 <create_chain+0x1cc>
    1494:	6c 2d       	mov	r22, r12
    1496:	7d 2d       	mov	r23, r13
    1498:	8e 2d       	mov	r24, r14
    149a:	9f 2d       	mov	r25, r15
    149c:	04 c0       	rjmp	.+8      	; 0x14a6 <create_chain+0x1cc>
    149e:	6f ef       	ldi	r22, 0xFF	; 255
    14a0:	7f ef       	ldi	r23, 0xFF	; 255
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	9f ef       	ldi	r25, 0xFF	; 255
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	1f 91       	pop	r17
    14ac:	0f 91       	pop	r16
    14ae:	ff 90       	pop	r15
    14b0:	ef 90       	pop	r14
    14b2:	df 90       	pop	r13
    14b4:	cf 90       	pop	r12
    14b6:	bf 90       	pop	r11
    14b8:	af 90       	pop	r10
    14ba:	9f 90       	pop	r9
    14bc:	8f 90       	pop	r8
    14be:	7f 90       	pop	r7
    14c0:	6f 90       	pop	r6
    14c2:	5f 90       	pop	r5
    14c4:	4f 90       	pop	r4
    14c6:	08 95       	ret

000014c8 <dir_next>:
    14c8:	8f 92       	push	r8
    14ca:	9f 92       	push	r9
    14cc:	af 92       	push	r10
    14ce:	bf 92       	push	r11
    14d0:	cf 92       	push	r12
    14d2:	df 92       	push	r13
    14d4:	ef 92       	push	r14
    14d6:	ff 92       	push	r15
    14d8:	0f 93       	push	r16
    14da:	1f 93       	push	r17
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	dc 01       	movw	r26, r24
    14e2:	14 96       	adiw	r26, 0x04	; 4
    14e4:	cd 91       	ld	r28, X+
    14e6:	dc 91       	ld	r29, X
    14e8:	15 97       	sbiw	r26, 0x05	; 5
    14ea:	21 96       	adiw	r28, 0x01	; 1
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <dir_next+0x28>
    14ee:	02 c1       	rjmp	.+516    	; 0x16f4 <dir_next+0x22c>
    14f0:	1e 96       	adiw	r26, 0x0e	; 14
    14f2:	8d 90       	ld	r8, X+
    14f4:	9d 90       	ld	r9, X+
    14f6:	ad 90       	ld	r10, X+
    14f8:	bc 90       	ld	r11, X
    14fa:	51 97       	sbiw	r26, 0x11	; 17
    14fc:	81 14       	cp	r8, r1
    14fe:	91 04       	cpc	r9, r1
    1500:	a1 04       	cpc	r10, r1
    1502:	b1 04       	cpc	r11, r1
    1504:	09 f4       	brne	.+2      	; 0x1508 <dir_next+0x40>
    1506:	f8 c0       	rjmp	.+496    	; 0x16f8 <dir_next+0x230>
    1508:	7b 01       	movw	r14, r22
    150a:	8c 01       	movw	r16, r24
    150c:	6e 01       	movw	r12, r28
    150e:	bf e0       	ldi	r27, 0x0F	; 15
    1510:	cb 22       	and	r12, r27
    1512:	dd 24       	eor	r13, r13
    1514:	c1 14       	cp	r12, r1
    1516:	d1 04       	cpc	r13, r1
    1518:	09 f0       	breq	.+2      	; 0x151c <dir_next+0x54>
    151a:	d6 c0       	rjmp	.+428    	; 0x16c8 <dir_next+0x200>
    151c:	ef ef       	ldi	r30, 0xFF	; 255
    151e:	8e 1a       	sub	r8, r30
    1520:	9e 0a       	sbc	r9, r30
    1522:	ae 0a       	sbc	r10, r30
    1524:	be 0a       	sbc	r11, r30
    1526:	dc 01       	movw	r26, r24
    1528:	1e 96       	adiw	r26, 0x0e	; 14
    152a:	8d 92       	st	X+, r8
    152c:	9d 92       	st	X+, r9
    152e:	ad 92       	st	X+, r10
    1530:	bc 92       	st	X, r11
    1532:	51 97       	sbiw	r26, 0x11	; 17
    1534:	1a 96       	adiw	r26, 0x0a	; 10
    1536:	4d 91       	ld	r20, X+
    1538:	5d 91       	ld	r21, X+
    153a:	6d 91       	ld	r22, X+
    153c:	7c 91       	ld	r23, X
    153e:	1d 97       	sbiw	r26, 0x0d	; 13
    1540:	41 15       	cp	r20, r1
    1542:	51 05       	cpc	r21, r1
    1544:	61 05       	cpc	r22, r1
    1546:	71 05       	cpc	r23, r1
    1548:	49 f4       	brne	.+18     	; 0x155c <dir_next+0x94>
    154a:	ed 91       	ld	r30, X+
    154c:	fc 91       	ld	r31, X
    154e:	80 85       	ldd	r24, Z+8	; 0x08
    1550:	91 85       	ldd	r25, Z+9	; 0x09
    1552:	c8 17       	cp	r28, r24
    1554:	d9 07       	cpc	r29, r25
    1556:	08 f0       	brcs	.+2      	; 0x155a <dir_next+0x92>
    1558:	d1 c0       	rjmp	.+418    	; 0x16fc <dir_next+0x234>
    155a:	b6 c0       	rjmp	.+364    	; 0x16c8 <dir_next+0x200>
    155c:	dc 01       	movw	r26, r24
    155e:	ed 91       	ld	r30, X+
    1560:	fc 91       	ld	r31, X
    1562:	22 81       	ldd	r18, Z+2	; 0x02
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	21 50       	subi	r18, 0x01	; 1
    1568:	31 09       	sbc	r19, r1
    156a:	ce 01       	movw	r24, r28
    156c:	92 95       	swap	r25
    156e:	82 95       	swap	r24
    1570:	8f 70       	andi	r24, 0x0F	; 15
    1572:	89 27       	eor	r24, r25
    1574:	9f 70       	andi	r25, 0x0F	; 15
    1576:	89 27       	eor	r24, r25
    1578:	28 23       	and	r18, r24
    157a:	39 23       	and	r19, r25
    157c:	23 2b       	or	r18, r19
    157e:	09 f0       	breq	.+2      	; 0x1582 <dir_next+0xba>
    1580:	a3 c0       	rjmp	.+326    	; 0x16c8 <dir_next+0x200>
    1582:	cf 01       	movw	r24, r30
    1584:	0e 94 b2 06 	call	0xd64	; 0xd64 <get_fat>
    1588:	4b 01       	movw	r8, r22
    158a:	5c 01       	movw	r10, r24
    158c:	62 30       	cpi	r22, 0x02	; 2
    158e:	71 05       	cpc	r23, r1
    1590:	81 05       	cpc	r24, r1
    1592:	91 05       	cpc	r25, r1
    1594:	08 f4       	brcc	.+2      	; 0x1598 <dir_next+0xd0>
    1596:	b4 c0       	rjmp	.+360    	; 0x1700 <dir_next+0x238>
    1598:	6f 3f       	cpi	r22, 0xFF	; 255
    159a:	7f 4f       	sbci	r23, 0xFF	; 255
    159c:	8f 4f       	sbci	r24, 0xFF	; 255
    159e:	9f 4f       	sbci	r25, 0xFF	; 255
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <dir_next+0xdc>
    15a2:	b0 c0       	rjmp	.+352    	; 0x1704 <dir_next+0x23c>
    15a4:	d8 01       	movw	r26, r16
    15a6:	ed 91       	ld	r30, X+
    15a8:	fc 91       	ld	r31, X
    15aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    15ac:	93 8d       	ldd	r25, Z+27	; 0x1b
    15ae:	a4 8d       	ldd	r26, Z+28	; 0x1c
    15b0:	b5 8d       	ldd	r27, Z+29	; 0x1d
    15b2:	88 16       	cp	r8, r24
    15b4:	99 06       	cpc	r9, r25
    15b6:	aa 06       	cpc	r10, r26
    15b8:	bb 06       	cpc	r11, r27
    15ba:	08 f4       	brcc	.+2      	; 0x15be <dir_next+0xf6>
    15bc:	73 c0       	rjmp	.+230    	; 0x16a4 <dir_next+0x1dc>
    15be:	ef 28       	or	r14, r15
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <dir_next+0xfc>
    15c2:	a2 c0       	rjmp	.+324    	; 0x1708 <dir_next+0x240>
    15c4:	d8 01       	movw	r26, r16
    15c6:	1a 96       	adiw	r26, 0x0a	; 10
    15c8:	4d 91       	ld	r20, X+
    15ca:	5d 91       	ld	r21, X+
    15cc:	6d 91       	ld	r22, X+
    15ce:	7c 91       	ld	r23, X
    15d0:	1d 97       	sbiw	r26, 0x0d	; 13
    15d2:	cf 01       	movw	r24, r30
    15d4:	0e 94 6d 09 	call	0x12da	; 0x12da <create_chain>
    15d8:	4b 01       	movw	r8, r22
    15da:	5c 01       	movw	r10, r24
    15dc:	61 15       	cp	r22, r1
    15de:	71 05       	cpc	r23, r1
    15e0:	81 05       	cpc	r24, r1
    15e2:	91 05       	cpc	r25, r1
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <dir_next+0x120>
    15e6:	92 c0       	rjmp	.+292    	; 0x170c <dir_next+0x244>
    15e8:	61 30       	cpi	r22, 0x01	; 1
    15ea:	71 05       	cpc	r23, r1
    15ec:	81 05       	cpc	r24, r1
    15ee:	91 05       	cpc	r25, r1
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <dir_next+0x12c>
    15f2:	8e c0       	rjmp	.+284    	; 0x1710 <dir_next+0x248>
    15f4:	6f 3f       	cpi	r22, 0xFF	; 255
    15f6:	7f 4f       	sbci	r23, 0xFF	; 255
    15f8:	8f 4f       	sbci	r24, 0xFF	; 255
    15fa:	9f 4f       	sbci	r25, 0xFF	; 255
    15fc:	09 f4       	brne	.+2      	; 0x1600 <dir_next+0x138>
    15fe:	8a c0       	rjmp	.+276    	; 0x1714 <dir_next+0x24c>
    1600:	40 e0       	ldi	r20, 0x00	; 0
    1602:	50 e0       	ldi	r21, 0x00	; 0
    1604:	ba 01       	movw	r22, r20
    1606:	d8 01       	movw	r26, r16
    1608:	8d 91       	ld	r24, X+
    160a:	9c 91       	ld	r25, X
    160c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    1610:	81 11       	cpse	r24, r1
    1612:	82 c0       	rjmp	.+260    	; 0x1718 <dir_next+0x250>
    1614:	f8 01       	movw	r30, r16
    1616:	80 81       	ld	r24, Z
    1618:	91 81       	ldd	r25, Z+1	; 0x01
    161a:	fc 01       	movw	r30, r24
    161c:	f2 96       	adiw	r30, 0x32	; 50
    161e:	8e 5c       	subi	r24, 0xCE	; 206
    1620:	9d 4f       	sbci	r25, 0xFD	; 253
    1622:	11 92       	st	Z+, r1
    1624:	e8 17       	cp	r30, r24
    1626:	f9 07       	cpc	r31, r25
    1628:	e1 f7       	brne	.-8      	; 0x1622 <dir_next+0x15a>
    162a:	d8 01       	movw	r26, r16
    162c:	ed 90       	ld	r14, X+
    162e:	fc 90       	ld	r15, X
    1630:	b5 01       	movw	r22, r10
    1632:	a4 01       	movw	r20, r8
    1634:	c7 01       	movw	r24, r14
    1636:	0e 94 8a 06 	call	0xd14	; 0xd14 <clust2sect>
    163a:	f7 01       	movw	r30, r14
    163c:	66 a7       	std	Z+46, r22	; 0x2e
    163e:	77 a7       	std	Z+47, r23	; 0x2f
    1640:	80 ab       	std	Z+48, r24	; 0x30
    1642:	91 ab       	std	Z+49, r25	; 0x31
    1644:	f1 2c       	mov	r15, r1
    1646:	ee 24       	eor	r14, r14
    1648:	e3 94       	inc	r14
    164a:	1a c0       	rjmp	.+52     	; 0x1680 <dir_next+0x1b8>
    164c:	e4 82       	std	Z+4, r14	; 0x04
    164e:	40 e0       	ldi	r20, 0x00	; 0
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	ba 01       	movw	r22, r20
    1654:	d8 01       	movw	r26, r16
    1656:	8d 91       	ld	r24, X+
    1658:	9c 91       	ld	r25, X
    165a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    165e:	81 11       	cpse	r24, r1
    1660:	5d c0       	rjmp	.+186    	; 0x171c <dir_next+0x254>
    1662:	d8 01       	movw	r26, r16
    1664:	ed 91       	ld	r30, X+
    1666:	fc 91       	ld	r31, X
    1668:	86 a5       	ldd	r24, Z+46	; 0x2e
    166a:	97 a5       	ldd	r25, Z+47	; 0x2f
    166c:	a0 a9       	ldd	r26, Z+48	; 0x30
    166e:	b1 a9       	ldd	r27, Z+49	; 0x31
    1670:	01 96       	adiw	r24, 0x01	; 1
    1672:	a1 1d       	adc	r26, r1
    1674:	b1 1d       	adc	r27, r1
    1676:	86 a7       	std	Z+46, r24	; 0x2e
    1678:	97 a7       	std	Z+47, r25	; 0x2f
    167a:	a0 ab       	std	Z+48, r26	; 0x30
    167c:	b1 ab       	std	Z+49, r27	; 0x31
    167e:	f3 94       	inc	r15
    1680:	d8 01       	movw	r26, r16
    1682:	ed 91       	ld	r30, X+
    1684:	fc 91       	ld	r31, X
    1686:	82 81       	ldd	r24, Z+2	; 0x02
    1688:	f8 16       	cp	r15, r24
    168a:	00 f3       	brcs	.-64     	; 0x164c <dir_next+0x184>
    168c:	86 a5       	ldd	r24, Z+46	; 0x2e
    168e:	97 a5       	ldd	r25, Z+47	; 0x2f
    1690:	a0 a9       	ldd	r26, Z+48	; 0x30
    1692:	b1 a9       	ldd	r27, Z+49	; 0x31
    1694:	8f 19       	sub	r24, r15
    1696:	91 09       	sbc	r25, r1
    1698:	a1 09       	sbc	r26, r1
    169a:	b1 09       	sbc	r27, r1
    169c:	86 a7       	std	Z+46, r24	; 0x2e
    169e:	97 a7       	std	Z+47, r25	; 0x2f
    16a0:	a0 ab       	std	Z+48, r26	; 0x30
    16a2:	b1 ab       	std	Z+49, r27	; 0x31
    16a4:	f8 01       	movw	r30, r16
    16a6:	82 86       	std	Z+10, r8	; 0x0a
    16a8:	93 86       	std	Z+11, r9	; 0x0b
    16aa:	a4 86       	std	Z+12, r10	; 0x0c
    16ac:	b5 86       	std	Z+13, r11	; 0x0d
    16ae:	b5 01       	movw	r22, r10
    16b0:	a4 01       	movw	r20, r8
    16b2:	80 81       	ld	r24, Z
    16b4:	91 81       	ldd	r25, Z+1	; 0x01
    16b6:	0e 94 8a 06 	call	0xd14	; 0xd14 <clust2sect>
    16ba:	d8 01       	movw	r26, r16
    16bc:	1e 96       	adiw	r26, 0x0e	; 14
    16be:	6d 93       	st	X+, r22
    16c0:	7d 93       	st	X+, r23
    16c2:	8d 93       	st	X+, r24
    16c4:	9c 93       	st	X, r25
    16c6:	51 97       	sbiw	r26, 0x11	; 17
    16c8:	f8 01       	movw	r30, r16
    16ca:	d5 83       	std	Z+5, r29	; 0x05
    16cc:	c4 83       	std	Z+4, r28	; 0x04
    16ce:	80 81       	ld	r24, Z
    16d0:	91 81       	ldd	r25, Z+1	; 0x01
    16d2:	c2 96       	adiw	r24, 0x32	; 50
    16d4:	cc 0c       	add	r12, r12
    16d6:	dd 1c       	adc	r13, r13
    16d8:	cc 0c       	add	r12, r12
    16da:	dd 1c       	adc	r13, r13
    16dc:	cc 0c       	add	r12, r12
    16de:	dd 1c       	adc	r13, r13
    16e0:	cc 0c       	add	r12, r12
    16e2:	dd 1c       	adc	r13, r13
    16e4:	cc 0c       	add	r12, r12
    16e6:	dd 1c       	adc	r13, r13
    16e8:	c8 0e       	add	r12, r24
    16ea:	d9 1e       	adc	r13, r25
    16ec:	d3 8a       	std	Z+19, r13	; 0x13
    16ee:	c2 8a       	std	Z+18, r12	; 0x12
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	15 c0       	rjmp	.+42     	; 0x171e <dir_next+0x256>
    16f4:	84 e0       	ldi	r24, 0x04	; 4
    16f6:	13 c0       	rjmp	.+38     	; 0x171e <dir_next+0x256>
    16f8:	84 e0       	ldi	r24, 0x04	; 4
    16fa:	11 c0       	rjmp	.+34     	; 0x171e <dir_next+0x256>
    16fc:	84 e0       	ldi	r24, 0x04	; 4
    16fe:	0f c0       	rjmp	.+30     	; 0x171e <dir_next+0x256>
    1700:	82 e0       	ldi	r24, 0x02	; 2
    1702:	0d c0       	rjmp	.+26     	; 0x171e <dir_next+0x256>
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	0b c0       	rjmp	.+22     	; 0x171e <dir_next+0x256>
    1708:	84 e0       	ldi	r24, 0x04	; 4
    170a:	09 c0       	rjmp	.+18     	; 0x171e <dir_next+0x256>
    170c:	87 e0       	ldi	r24, 0x07	; 7
    170e:	07 c0       	rjmp	.+14     	; 0x171e <dir_next+0x256>
    1710:	82 e0       	ldi	r24, 0x02	; 2
    1712:	05 c0       	rjmp	.+10     	; 0x171e <dir_next+0x256>
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	03 c0       	rjmp	.+6      	; 0x171e <dir_next+0x256>
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	01 c0       	rjmp	.+2      	; 0x171e <dir_next+0x256>
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	1f 91       	pop	r17
    1724:	0f 91       	pop	r16
    1726:	ff 90       	pop	r15
    1728:	ef 90       	pop	r14
    172a:	df 90       	pop	r13
    172c:	cf 90       	pop	r12
    172e:	bf 90       	pop	r11
    1730:	af 90       	pop	r10
    1732:	9f 90       	pop	r9
    1734:	8f 90       	pop	r8
    1736:	08 95       	ret

00001738 <follow_path>:
    1738:	2f 92       	push	r2
    173a:	3f 92       	push	r3
    173c:	4f 92       	push	r4
    173e:	5f 92       	push	r5
    1740:	6f 92       	push	r6
    1742:	7f 92       	push	r7
    1744:	8f 92       	push	r8
    1746:	9f 92       	push	r9
    1748:	af 92       	push	r10
    174a:	bf 92       	push	r11
    174c:	cf 92       	push	r12
    174e:	df 92       	push	r13
    1750:	ef 92       	push	r14
    1752:	ff 92       	push	r15
    1754:	0f 93       	push	r16
    1756:	1f 93       	push	r17
    1758:	cf 93       	push	r28
    175a:	df 93       	push	r29
    175c:	00 d0       	rcall	.+0      	; 0x175e <follow_path+0x26>
    175e:	00 d0       	rcall	.+0      	; 0x1760 <follow_path+0x28>
    1760:	1f 92       	push	r1
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	9a 83       	std	Y+2, r25	; 0x02
    1768:	89 83       	std	Y+1, r24	; 0x01
    176a:	4b 01       	movw	r8, r22
    176c:	db 01       	movw	r26, r22
    176e:	8c 91       	ld	r24, X
    1770:	8f 32       	cpi	r24, 0x2F	; 47
    1772:	11 f0       	breq	.+4      	; 0x1778 <follow_path+0x40>
    1774:	8c 35       	cpi	r24, 0x5C	; 92
    1776:	51 f4       	brne	.+20     	; 0x178c <follow_path+0x54>
    1778:	bf ef       	ldi	r27, 0xFF	; 255
    177a:	8b 1a       	sub	r8, r27
    177c:	9b 0a       	sbc	r9, r27
    177e:	e9 81       	ldd	r30, Y+1	; 0x01
    1780:	fa 81       	ldd	r31, Y+2	; 0x02
    1782:	16 82       	std	Z+6, r1	; 0x06
    1784:	17 82       	std	Z+7, r1	; 0x07
    1786:	10 86       	std	Z+8, r1	; 0x08
    1788:	11 86       	std	Z+9, r1	; 0x09
    178a:	0e c0       	rjmp	.+28     	; 0x17a8 <follow_path+0x70>
    178c:	a9 81       	ldd	r26, Y+1	; 0x01
    178e:	ba 81       	ldd	r27, Y+2	; 0x02
    1790:	ed 91       	ld	r30, X+
    1792:	fc 91       	ld	r31, X
    1794:	86 89       	ldd	r24, Z+22	; 0x16
    1796:	97 89       	ldd	r25, Z+23	; 0x17
    1798:	a0 8d       	ldd	r26, Z+24	; 0x18
    179a:	b1 8d       	ldd	r27, Z+25	; 0x19
    179c:	e9 81       	ldd	r30, Y+1	; 0x01
    179e:	fa 81       	ldd	r31, Y+2	; 0x02
    17a0:	86 83       	std	Z+6, r24	; 0x06
    17a2:	97 83       	std	Z+7, r25	; 0x07
    17a4:	a0 87       	std	Z+8, r26	; 0x08
    17a6:	b1 87       	std	Z+9, r27	; 0x09
    17a8:	d4 01       	movw	r26, r8
    17aa:	8c 91       	ld	r24, X
    17ac:	80 32       	cpi	r24, 0x20	; 32
    17ae:	58 f4       	brcc	.+22     	; 0x17c6 <follow_path+0x8e>
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	9a 81       	ldd	r25, Y+2	; 0x02
    17b8:	0e 94 95 07 	call	0xf2a	; 0xf2a <dir_sdi>
    17bc:	e9 81       	ldd	r30, Y+1	; 0x01
    17be:	fa 81       	ldd	r31, Y+2	; 0x02
    17c0:	13 8a       	std	Z+19, r1	; 0x13
    17c2:	12 8a       	std	Z+18, r1	; 0x12
    17c4:	6b c1       	rjmp	.+726    	; 0x1a9c <follow_path+0x364>
    17c6:	10 e2       	ldi	r17, 0x20	; 32
    17c8:	0f 2e       	mov	r0, r31
    17ca:	fe e2       	ldi	r31, 0x2E	; 46
    17cc:	7f 2e       	mov	r7, r31
    17ce:	f0 2d       	mov	r31, r0
    17d0:	00 e0       	ldi	r16, 0x00	; 0
    17d2:	b1 2c       	mov	r11, r1
    17d4:	68 94       	set
    17d6:	66 24       	eor	r6, r6
    17d8:	63 f8       	bld	r6, 3
    17da:	51 2c       	mov	r5, r1
    17dc:	36 2c       	mov	r3, r6
    17de:	25 2c       	mov	r2, r5
    17e0:	0f 2e       	mov	r0, r31
    17e2:	fb e0       	ldi	r31, 0x0B	; 11
    17e4:	4f 2e       	mov	r4, r31
    17e6:	f0 2d       	mov	r31, r0
    17e8:	29 81       	ldd	r18, Y+1	; 0x01
    17ea:	3a 81       	ldd	r19, Y+2	; 0x02
    17ec:	3c 83       	std	Y+4, r19	; 0x04
    17ee:	2b 83       	std	Y+3, r18	; 0x03
    17f0:	eb 81       	ldd	r30, Y+3	; 0x03
    17f2:	fc 81       	ldd	r31, Y+4	; 0x04
    17f4:	a4 89       	ldd	r26, Z+20	; 0x14
    17f6:	b5 89       	ldd	r27, Z+21	; 0x15
    17f8:	fd 01       	movw	r30, r26
    17fa:	cd 01       	movw	r24, r26
    17fc:	0b 96       	adiw	r24, 0x0b	; 11
    17fe:	11 93       	st	Z+, r17
    1800:	e8 17       	cp	r30, r24
    1802:	f9 07       	cpc	r31, r25
    1804:	e1 f7       	brne	.-8      	; 0x17fe <follow_path+0xc6>
    1806:	f4 01       	movw	r30, r8
    1808:	80 81       	ld	r24, Z
    180a:	8e 32       	cpi	r24, 0x2E	; 46
    180c:	61 f0       	breq	.+24     	; 0x1826 <follow_path+0xee>
    180e:	74 01       	movw	r14, r8
    1810:	40 2f       	mov	r20, r16
    1812:	5b 2d       	mov	r21, r11
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	70 e0       	ldi	r23, 0x00	; 0
    1818:	c6 2c       	mov	r12, r6
    181a:	d5 2c       	mov	r13, r5
    181c:	a1 2c       	mov	r10, r1
    181e:	ba 83       	std	Y+2, r27	; 0x02
    1820:	a9 83       	std	Y+1, r26	; 0x01
    1822:	ad 82       	std	Y+5, r10	; 0x05
    1824:	1e c0       	rjmp	.+60     	; 0x1862 <follow_path+0x12a>
    1826:	7c 92       	st	X, r7
    1828:	f4 01       	movw	r30, r8
    182a:	81 81       	ldd	r24, Z+1	; 0x01
    182c:	8e 32       	cpi	r24, 0x2E	; 46
    182e:	51 f4       	brne	.+20     	; 0x1844 <follow_path+0x10c>
    1830:	11 96       	adiw	r26, 0x01	; 1
    1832:	7c 92       	st	X, r7
    1834:	11 97       	sbiw	r26, 0x01	; 1
    1836:	82 81       	ldd	r24, Z+2	; 0x02
    1838:	8e 32       	cpi	r24, 0x2E	; 46
    183a:	09 f4       	brne	.+2      	; 0x183e <follow_path+0x106>
    183c:	75 c0       	rjmp	.+234    	; 0x1928 <follow_path+0x1f0>
    183e:	23 e0       	ldi	r18, 0x03	; 3
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <follow_path+0x110>
    1844:	22 e0       	ldi	r18, 0x02	; 2
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	8f 32       	cpi	r24, 0x2F	; 47
    184a:	09 f4       	brne	.+2      	; 0x184e <follow_path+0x116>
    184c:	d6 c0       	rjmp	.+428    	; 0x19fa <follow_path+0x2c2>
    184e:	8c 35       	cpi	r24, 0x5C	; 92
    1850:	09 f4       	brne	.+2      	; 0x1854 <follow_path+0x11c>
    1852:	d3 c0       	rjmp	.+422    	; 0x19fa <follow_path+0x2c2>
    1854:	81 32       	cpi	r24, 0x21	; 33
    1856:	08 f4       	brcc	.+2      	; 0x185a <follow_path+0x122>
    1858:	d4 c0       	rjmp	.+424    	; 0x1a02 <follow_path+0x2ca>
    185a:	f4 c0       	rjmp	.+488    	; 0x1a44 <follow_path+0x30c>
    185c:	1b 96       	adiw	r26, 0x0b	; 11
    185e:	8c 93       	st	X, r24
    1860:	f3 c0       	rjmp	.+486    	; 0x1a48 <follow_path+0x310>
    1862:	6f 5f       	subi	r22, 0xFF	; 255
    1864:	7f 4f       	sbci	r23, 0xFF	; 255
    1866:	f7 01       	movw	r30, r14
    1868:	b1 91       	ld	r27, Z+
    186a:	7f 01       	movw	r14, r30
    186c:	b1 32       	cpi	r27, 0x21	; 33
    186e:	08 f4       	brcc	.+2      	; 0x1872 <follow_path+0x13a>
    1870:	e2 c0       	rjmp	.+452    	; 0x1a36 <follow_path+0x2fe>
    1872:	bf 32       	cpi	r27, 0x2F	; 47
    1874:	09 f4       	brne	.+2      	; 0x1878 <follow_path+0x140>
    1876:	d8 c0       	rjmp	.+432    	; 0x1a28 <follow_path+0x2f0>
    1878:	bc 35       	cpi	r27, 0x5C	; 92
    187a:	09 f4       	brne	.+2      	; 0x187e <follow_path+0x146>
    187c:	d5 c0       	rjmp	.+426    	; 0x1a28 <follow_path+0x2f0>
    187e:	be 32       	cpi	r27, 0x2E	; 46
    1880:	09 f4       	brne	.+2      	; 0x1884 <follow_path+0x14c>
    1882:	06 c1       	rjmp	.+524    	; 0x1a90 <follow_path+0x358>
    1884:	4c 15       	cp	r20, r12
    1886:	5d 05       	cpc	r21, r13
    1888:	08 f0       	brcs	.+2      	; 0x188c <follow_path+0x154>
    188a:	dc c0       	rjmp	.+440    	; 0x1a44 <follow_path+0x30c>
    188c:	09 c0       	rjmp	.+18     	; 0x18a0 <follow_path+0x168>
    188e:	fd 81       	ldd	r31, Y+5	; 0x05
    1890:	ff 0f       	add	r31, r31
    1892:	ff 0f       	add	r31, r31
    1894:	fd 83       	std	Y+5, r31	; 0x05
    1896:	43 2d       	mov	r20, r3
    1898:	52 2d       	mov	r21, r2
    189a:	c4 2c       	mov	r12, r4
    189c:	d1 2c       	mov	r13, r1
    189e:	e1 cf       	rjmp	.-62     	; 0x1862 <follow_path+0x12a>
    18a0:	bb 23       	and	r27, r27
    18a2:	0c f0       	brlt	.+2      	; 0x18a6 <follow_path+0x16e>
    18a4:	b2 c0       	rjmp	.+356    	; 0x1a0a <follow_path+0x2d2>
    18a6:	2d 81       	ldd	r18, Y+5	; 0x05
    18a8:	23 60       	ori	r18, 0x03	; 3
    18aa:	2d 83       	std	Y+5, r18	; 0x05
    18ac:	eb 2f       	mov	r30, r27
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	ed 5c       	subi	r30, 0xCD	; 205
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	b0 81       	ld	r27, Z
    18b6:	a9 c0       	rjmp	.+338    	; 0x1a0a <follow_path+0x2d2>
    18b8:	81 91       	ld	r24, Z+
    18ba:	88 23       	and	r24, r24
    18bc:	09 f4       	brne	.+2      	; 0x18c0 <follow_path+0x188>
    18be:	ae c0       	rjmp	.+348    	; 0x1a1c <follow_path+0x2e4>
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	28 17       	cp	r18, r24
    18c4:	39 07       	cpc	r19, r25
    18c6:	c1 f7       	brne	.-16     	; 0x18b8 <follow_path+0x180>
    18c8:	2f c0       	rjmp	.+94     	; 0x1928 <follow_path+0x1f0>
    18ca:	3d 81       	ldd	r19, Y+5	; 0x05
    18cc:	32 60       	ori	r19, 0x02	; 2
    18ce:	3d 83       	std	Y+5, r19	; 0x05
    18d0:	08 c0       	rjmp	.+16     	; 0x18e2 <follow_path+0x1aa>
    18d2:	8f e9       	ldi	r24, 0x9F	; 159
    18d4:	8b 0f       	add	r24, r27
    18d6:	8a 31       	cpi	r24, 0x1A	; 26
    18d8:	20 f4       	brcc	.+8      	; 0x18e2 <follow_path+0x1aa>
    18da:	8d 81       	ldd	r24, Y+5	; 0x05
    18dc:	81 60       	ori	r24, 0x01	; 1
    18de:	8d 83       	std	Y+5, r24	; 0x05
    18e0:	b0 52       	subi	r27, 0x20	; 32
    18e2:	e9 81       	ldd	r30, Y+1	; 0x01
    18e4:	fa 81       	ldd	r31, Y+2	; 0x02
    18e6:	e4 0f       	add	r30, r20
    18e8:	f5 1f       	adc	r31, r21
    18ea:	b0 83       	st	Z, r27
    18ec:	4f 5f       	subi	r20, 0xFF	; 255
    18ee:	5f 4f       	sbci	r21, 0xFF	; 255
    18f0:	b8 cf       	rjmp	.-144    	; 0x1862 <follow_path+0x12a>
    18f2:	45 2b       	or	r20, r21
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <follow_path+0x1c0>
    18f6:	a6 c0       	rjmp	.+332    	; 0x1a44 <follow_path+0x30c>
    18f8:	9c 91       	ld	r25, X
    18fa:	95 3e       	cpi	r25, 0xE5	; 229
    18fc:	11 f4       	brne	.+4      	; 0x1902 <follow_path+0x1ca>
    18fe:	95 e0       	ldi	r25, 0x05	; 5
    1900:	9c 93       	st	X, r25
    1902:	e8 e0       	ldi	r30, 0x08	; 8
    1904:	ce 16       	cp	r12, r30
    1906:	d1 04       	cpc	r13, r1
    1908:	11 f4       	brne	.+4      	; 0x190e <follow_path+0x1d6>
    190a:	aa 0c       	add	r10, r10
    190c:	aa 0c       	add	r10, r10
    190e:	9a 2d       	mov	r25, r10
    1910:	93 70       	andi	r25, 0x03	; 3
    1912:	91 30       	cpi	r25, 0x01	; 1
    1914:	09 f4       	brne	.+2      	; 0x1918 <follow_path+0x1e0>
    1916:	80 61       	ori	r24, 0x10	; 16
    1918:	9a 2d       	mov	r25, r10
    191a:	9c 70       	andi	r25, 0x0C	; 12
    191c:	94 30       	cpi	r25, 0x04	; 4
    191e:	09 f4       	brne	.+2      	; 0x1922 <follow_path+0x1ea>
    1920:	88 60       	ori	r24, 0x08	; 8
    1922:	1b 96       	adiw	r26, 0x0b	; 11
    1924:	8c 93       	st	X, r24
    1926:	90 c0       	rjmp	.+288    	; 0x1a48 <follow_path+0x310>
    1928:	86 e0       	ldi	r24, 0x06	; 6
    192a:	b8 c0       	rjmp	.+368    	; 0x1a9c <follow_path+0x364>
    192c:	ab 81       	ldd	r26, Y+3	; 0x03
    192e:	bc 81       	ldd	r27, Y+4	; 0x04
    1930:	1e 96       	adiw	r26, 0x0e	; 14
    1932:	4d 91       	ld	r20, X+
    1934:	5d 91       	ld	r21, X+
    1936:	6d 91       	ld	r22, X+
    1938:	7c 91       	ld	r23, X
    193a:	51 97       	sbiw	r26, 0x11	; 17
    193c:	8d 91       	ld	r24, X+
    193e:	9c 91       	ld	r25, X
    1940:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    1944:	81 11       	cpse	r24, r1
    1946:	99 c0       	rjmp	.+306    	; 0x1a7a <follow_path+0x342>
    1948:	eb 81       	ldd	r30, Y+3	; 0x03
    194a:	fc 81       	ldd	r31, Y+4	; 0x04
    194c:	42 89       	ldd	r20, Z+18	; 0x12
    194e:	53 89       	ldd	r21, Z+19	; 0x13
    1950:	da 01       	movw	r26, r20
    1952:	9c 91       	ld	r25, X
    1954:	99 23       	and	r25, r25
    1956:	09 f4       	brne	.+2      	; 0x195a <follow_path+0x222>
    1958:	81 c0       	rjmp	.+258    	; 0x1a5c <follow_path+0x324>
    195a:	1b 96       	adiw	r26, 0x0b	; 11
    195c:	ec 90       	ld	r14, X
    195e:	e3 fc       	sbrc	r14, 3
    1960:	11 c0       	rjmp	.+34     	; 0x1984 <follow_path+0x24c>
    1962:	64 89       	ldd	r22, Z+20	; 0x14
    1964:	75 89       	ldd	r23, Z+21	; 0x15
    1966:	fa 01       	movw	r30, r20
    1968:	db 01       	movw	r26, r22
    196a:	6a 01       	movw	r12, r20
    196c:	2b e0       	ldi	r18, 0x0B	; 11
    196e:	c2 0e       	add	r12, r18
    1970:	d1 1c       	adc	r13, r1
    1972:	04 c0       	rjmp	.+8      	; 0x197c <follow_path+0x244>
    1974:	ec 15       	cp	r30, r12
    1976:	fd 05       	cpc	r31, r13
    1978:	09 f4       	brne	.+2      	; 0x197c <follow_path+0x244>
    197a:	79 c0       	rjmp	.+242    	; 0x1a6e <follow_path+0x336>
    197c:	21 91       	ld	r18, Z+
    197e:	9d 91       	ld	r25, X+
    1980:	29 17       	cp	r18, r25
    1982:	c1 f3       	breq	.-16     	; 0x1974 <follow_path+0x23c>
    1984:	60 2f       	mov	r22, r16
    1986:	7b 2d       	mov	r23, r11
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	9c 81       	ldd	r25, Y+4	; 0x04
    198c:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <dir_next>
    1990:	88 23       	and	r24, r24
    1992:	61 f2       	breq	.-104    	; 0x192c <follow_path+0x1f4>
    1994:	72 c0       	rjmp	.+228    	; 0x1a7a <follow_path+0x342>
    1996:	95 ff       	sbrs	r25, 5
    1998:	0c c0       	rjmp	.+24     	; 0x19b2 <follow_path+0x27a>
    199a:	eb 81       	ldd	r30, Y+3	; 0x03
    199c:	fc 81       	ldd	r31, Y+4	; 0x04
    199e:	16 82       	std	Z+6, r1	; 0x06
    19a0:	17 82       	std	Z+7, r1	; 0x07
    19a2:	10 86       	std	Z+8, r1	; 0x08
    19a4:	11 86       	std	Z+9, r1	; 0x09
    19a6:	13 8a       	std	Z+19, r1	; 0x13
    19a8:	12 8a       	std	Z+18, r1	; 0x12
    19aa:	92 ff       	sbrs	r25, 2
    19ac:	21 cf       	rjmp	.-446    	; 0x17f0 <follow_path+0xb8>
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	75 c0       	rjmp	.+234    	; 0x1a9c <follow_path+0x364>
    19b2:	92 fd       	sbrc	r25, 2
    19b4:	1e c0       	rjmp	.+60     	; 0x19f2 <follow_path+0x2ba>
    19b6:	85 e0       	ldi	r24, 0x05	; 5
    19b8:	71 c0       	rjmp	.+226    	; 0x1a9c <follow_path+0x364>
    19ba:	e4 fe       	sbrs	r14, 4
    19bc:	1c c0       	rjmp	.+56     	; 0x19f6 <follow_path+0x2be>
    19be:	da 01       	movw	r26, r20
    19c0:	54 96       	adiw	r26, 0x14	; 20
    19c2:	8d 91       	ld	r24, X+
    19c4:	9c 91       	ld	r25, X
    19c6:	55 97       	sbiw	r26, 0x15	; 21
    19c8:	a0 e0       	ldi	r26, 0x00	; 0
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	dc 01       	movw	r26, r24
    19ce:	99 27       	eor	r25, r25
    19d0:	88 27       	eor	r24, r24
    19d2:	fa 01       	movw	r30, r20
    19d4:	42 8d       	ldd	r20, Z+26	; 0x1a
    19d6:	53 8d       	ldd	r21, Z+27	; 0x1b
    19d8:	60 e0       	ldi	r22, 0x00	; 0
    19da:	70 e0       	ldi	r23, 0x00	; 0
    19dc:	84 2b       	or	r24, r20
    19de:	95 2b       	or	r25, r21
    19e0:	a6 2b       	or	r26, r22
    19e2:	b7 2b       	or	r27, r23
    19e4:	eb 81       	ldd	r30, Y+3	; 0x03
    19e6:	fc 81       	ldd	r31, Y+4	; 0x04
    19e8:	86 83       	std	Z+6, r24	; 0x06
    19ea:	97 83       	std	Z+7, r25	; 0x07
    19ec:	a0 87       	std	Z+8, r26	; 0x08
    19ee:	b1 87       	std	Z+9, r27	; 0x09
    19f0:	ff ce       	rjmp	.-514    	; 0x17f0 <follow_path+0xb8>
    19f2:	84 e0       	ldi	r24, 0x04	; 4
    19f4:	53 c0       	rjmp	.+166    	; 0x1a9c <follow_path+0x364>
    19f6:	85 e0       	ldi	r24, 0x05	; 5
    19f8:	51 c0       	rjmp	.+162    	; 0x1a9c <follow_path+0x364>
    19fa:	82 0e       	add	r8, r18
    19fc:	93 1e       	adc	r9, r19
    19fe:	81 2f       	mov	r24, r17
    1a00:	2d cf       	rjmp	.-422    	; 0x185c <follow_path+0x124>
    1a02:	82 0e       	add	r8, r18
    1a04:	93 1e       	adc	r9, r19
    1a06:	84 e2       	ldi	r24, 0x24	; 36
    1a08:	29 cf       	rjmp	.-430    	; 0x185c <follow_path+0x124>
    1a0a:	2b 2f       	mov	r18, r27
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	22 32       	cpi	r18, 0x22	; 34
    1a10:	31 05       	cpc	r19, r1
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <follow_path+0x2de>
    1a14:	89 cf       	rjmp	.-238    	; 0x1928 <follow_path+0x1f0>
    1a16:	e5 ea       	ldi	r30, 0xA5	; 165
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	4e cf       	rjmp	.-356    	; 0x18b8 <follow_path+0x180>
    1a1c:	8f eb       	ldi	r24, 0xBF	; 191
    1a1e:	8b 0f       	add	r24, r27
    1a20:	8a 31       	cpi	r24, 0x1A	; 26
    1a22:	08 f4       	brcc	.+2      	; 0x1a26 <follow_path+0x2ee>
    1a24:	52 cf       	rjmp	.-348    	; 0x18ca <follow_path+0x192>
    1a26:	55 cf       	rjmp	.-342    	; 0x18d2 <follow_path+0x19a>
    1a28:	a9 81       	ldd	r26, Y+1	; 0x01
    1a2a:	ba 81       	ldd	r27, Y+2	; 0x02
    1a2c:	ad 80       	ldd	r10, Y+5	; 0x05
    1a2e:	86 0e       	add	r8, r22
    1a30:	97 1e       	adc	r9, r23
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	5e cf       	rjmp	.-324    	; 0x18f2 <follow_path+0x1ba>
    1a36:	a9 81       	ldd	r26, Y+1	; 0x01
    1a38:	ba 81       	ldd	r27, Y+2	; 0x02
    1a3a:	ad 80       	ldd	r10, Y+5	; 0x05
    1a3c:	86 0e       	add	r8, r22
    1a3e:	97 1e       	adc	r9, r23
    1a40:	84 e0       	ldi	r24, 0x04	; 4
    1a42:	57 cf       	rjmp	.-338    	; 0x18f2 <follow_path+0x1ba>
    1a44:	86 e0       	ldi	r24, 0x06	; 6
    1a46:	2a c0       	rjmp	.+84     	; 0x1a9c <follow_path+0x364>
    1a48:	60 2f       	mov	r22, r16
    1a4a:	7b 2d       	mov	r23, r11
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a50:	0e 94 95 07 	call	0xf2a	; 0xf2a <dir_sdi>
    1a54:	88 23       	and	r24, r24
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <follow_path+0x322>
    1a58:	69 cf       	rjmp	.-302    	; 0x192c <follow_path+0x1f4>
    1a5a:	0f c0       	rjmp	.+30     	; 0x1a7a <follow_path+0x342>
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a60:	dc 01       	movw	r26, r24
    1a62:	54 96       	adiw	r26, 0x14	; 20
    1a64:	ed 91       	ld	r30, X+
    1a66:	fc 91       	ld	r31, X
    1a68:	55 97       	sbiw	r26, 0x15	; 21
    1a6a:	93 85       	ldd	r25, Z+11	; 0x0b
    1a6c:	94 cf       	rjmp	.-216    	; 0x1996 <follow_path+0x25e>
    1a6e:	db 01       	movw	r26, r22
    1a70:	1b 96       	adiw	r26, 0x0b	; 11
    1a72:	9c 91       	ld	r25, X
    1a74:	92 ff       	sbrs	r25, 2
    1a76:	a1 cf       	rjmp	.-190    	; 0x19ba <follow_path+0x282>
    1a78:	11 c0       	rjmp	.+34     	; 0x1a9c <follow_path+0x364>
    1a7a:	ab 81       	ldd	r26, Y+3	; 0x03
    1a7c:	bc 81       	ldd	r27, Y+4	; 0x04
    1a7e:	54 96       	adiw	r26, 0x14	; 20
    1a80:	ed 91       	ld	r30, X+
    1a82:	fc 91       	ld	r31, X
    1a84:	55 97       	sbiw	r26, 0x15	; 21
    1a86:	93 85       	ldd	r25, Z+11	; 0x0b
    1a88:	84 30       	cpi	r24, 0x04	; 4
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <follow_path+0x356>
    1a8c:	84 cf       	rjmp	.-248    	; 0x1996 <follow_path+0x25e>
    1a8e:	06 c0       	rjmp	.+12     	; 0x1a9c <follow_path+0x364>
    1a90:	b8 e0       	ldi	r27, 0x08	; 8
    1a92:	cb 16       	cp	r12, r27
    1a94:	d1 04       	cpc	r13, r1
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <follow_path+0x362>
    1a98:	fa ce       	rjmp	.-524    	; 0x188e <follow_path+0x156>
    1a9a:	d4 cf       	rjmp	.-88     	; 0x1a44 <follow_path+0x30c>
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	1f 91       	pop	r17
    1aac:	0f 91       	pop	r16
    1aae:	ff 90       	pop	r15
    1ab0:	ef 90       	pop	r14
    1ab2:	df 90       	pop	r13
    1ab4:	cf 90       	pop	r12
    1ab6:	bf 90       	pop	r11
    1ab8:	af 90       	pop	r10
    1aba:	9f 90       	pop	r9
    1abc:	8f 90       	pop	r8
    1abe:	7f 90       	pop	r7
    1ac0:	6f 90       	pop	r6
    1ac2:	5f 90       	pop	r5
    1ac4:	4f 90       	pop	r4
    1ac6:	3f 90       	pop	r3
    1ac8:	2f 90       	pop	r2
    1aca:	08 95       	ret

00001acc <dir_register>:
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	8c 01       	movw	r16, r24
    1ad4:	60 e0       	ldi	r22, 0x00	; 0
    1ad6:	70 e0       	ldi	r23, 0x00	; 0
    1ad8:	0e 94 95 07 	call	0xf2a	; 0xf2a <dir_sdi>
    1adc:	c8 2f       	mov	r28, r24
    1ade:	81 11       	cpse	r24, r1
    1ae0:	47 c0       	rjmp	.+142    	; 0x1b70 <dir_register+0xa4>
    1ae2:	d8 01       	movw	r26, r16
    1ae4:	1e 96       	adiw	r26, 0x0e	; 14
    1ae6:	4d 91       	ld	r20, X+
    1ae8:	5d 91       	ld	r21, X+
    1aea:	6d 91       	ld	r22, X+
    1aec:	7c 91       	ld	r23, X
    1aee:	51 97       	sbiw	r26, 0x11	; 17
    1af0:	8d 91       	ld	r24, X+
    1af2:	9c 91       	ld	r25, X
    1af4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    1af8:	c8 2f       	mov	r28, r24
    1afa:	81 11       	cpse	r24, r1
    1afc:	39 c0       	rjmp	.+114    	; 0x1b70 <dir_register+0xa4>
    1afe:	d8 01       	movw	r26, r16
    1b00:	52 96       	adiw	r26, 0x12	; 18
    1b02:	ed 91       	ld	r30, X+
    1b04:	fc 91       	ld	r31, X
    1b06:	53 97       	sbiw	r26, 0x13	; 19
    1b08:	80 81       	ld	r24, Z
    1b0a:	85 3e       	cpi	r24, 0xE5	; 229
    1b0c:	29 f1       	breq	.+74     	; 0x1b58 <dir_register+0x8c>
    1b0e:	88 23       	and	r24, r24
    1b10:	19 f1       	breq	.+70     	; 0x1b58 <dir_register+0x8c>
    1b12:	61 e0       	ldi	r22, 0x01	; 1
    1b14:	70 e0       	ldi	r23, 0x00	; 0
    1b16:	c8 01       	movw	r24, r16
    1b18:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <dir_next>
    1b1c:	c8 2f       	mov	r28, r24
    1b1e:	88 23       	and	r24, r24
    1b20:	01 f3       	breq	.-64     	; 0x1ae2 <dir_register+0x16>
    1b22:	26 c0       	rjmp	.+76     	; 0x1b70 <dir_register+0xa4>
    1b24:	f8 01       	movw	r30, r16
    1b26:	82 89       	ldd	r24, Z+18	; 0x12
    1b28:	93 89       	ldd	r25, Z+19	; 0x13
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	9c 01       	movw	r18, r24
    1b2e:	20 5e       	subi	r18, 0xE0	; 224
    1b30:	3f 4f       	sbci	r19, 0xFF	; 255
    1b32:	11 92       	st	Z+, r1
    1b34:	e2 17       	cp	r30, r18
    1b36:	f3 07       	cpc	r31, r19
    1b38:	e1 f7       	brne	.-8      	; 0x1b32 <dir_register+0x66>
    1b3a:	d8 01       	movw	r26, r16
    1b3c:	54 96       	adiw	r26, 0x14	; 20
    1b3e:	6d 91       	ld	r22, X+
    1b40:	7c 91       	ld	r23, X
    1b42:	55 97       	sbiw	r26, 0x15	; 21
    1b44:	4b e0       	ldi	r20, 0x0B	; 11
    1b46:	50 e0       	ldi	r21, 0x00	; 0
    1b48:	0e 94 c5 01 	call	0x38a	; 0x38a <mem_cpy>
    1b4c:	d8 01       	movw	r26, r16
    1b4e:	ed 91       	ld	r30, X+
    1b50:	fc 91       	ld	r31, X
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	84 83       	std	Z+4, r24	; 0x04
    1b56:	0c c0       	rjmp	.+24     	; 0x1b70 <dir_register+0xa4>
    1b58:	f8 01       	movw	r30, r16
    1b5a:	46 85       	ldd	r20, Z+14	; 0x0e
    1b5c:	57 85       	ldd	r21, Z+15	; 0x0f
    1b5e:	60 89       	ldd	r22, Z+16	; 0x10
    1b60:	71 89       	ldd	r23, Z+17	; 0x11
    1b62:	80 81       	ld	r24, Z
    1b64:	91 81       	ldd	r25, Z+1	; 0x01
    1b66:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    1b6a:	c8 2f       	mov	r28, r24
    1b6c:	88 23       	and	r24, r24
    1b6e:	d1 f2       	breq	.-76     	; 0x1b24 <dir_register+0x58>
    1b70:	8c 2f       	mov	r24, r28
    1b72:	cf 91       	pop	r28
    1b74:	1f 91       	pop	r17
    1b76:	0f 91       	pop	r16
    1b78:	08 95       	ret

00001b7a <dir_read>:
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
    1b7e:	ec 01       	movw	r28, r24
    1b80:	84 e0       	ldi	r24, 0x04	; 4
    1b82:	17 c0       	rjmp	.+46     	; 0x1bb2 <dir_read+0x38>
    1b84:	88 81       	ld	r24, Y
    1b86:	99 81       	ldd	r25, Y+1	; 0x01
    1b88:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    1b8c:	81 11       	cpse	r24, r1
    1b8e:	1c c0       	rjmp	.+56     	; 0x1bc8 <dir_read+0x4e>
    1b90:	ea 89       	ldd	r30, Y+18	; 0x12
    1b92:	fb 89       	ldd	r31, Y+19	; 0x13
    1b94:	90 81       	ld	r25, Z
    1b96:	99 23       	and	r25, r25
    1b98:	e1 f0       	breq	.+56     	; 0x1bd2 <dir_read+0x58>
    1b9a:	95 3e       	cpi	r25, 0xE5	; 229
    1b9c:	19 f0       	breq	.+6      	; 0x1ba4 <dir_read+0x2a>
    1b9e:	93 85       	ldd	r25, Z+11	; 0x0b
    1ba0:	93 ff       	sbrs	r25, 3
    1ba2:	19 c0       	rjmp	.+50     	; 0x1bd6 <dir_read+0x5c>
    1ba4:	60 e0       	ldi	r22, 0x00	; 0
    1ba6:	70 e0       	ldi	r23, 0x00	; 0
    1ba8:	ce 01       	movw	r24, r28
    1baa:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <dir_next>
    1bae:	81 11       	cpse	r24, r1
    1bb0:	0b c0       	rjmp	.+22     	; 0x1bc8 <dir_read+0x4e>
    1bb2:	4e 85       	ldd	r20, Y+14	; 0x0e
    1bb4:	5f 85       	ldd	r21, Y+15	; 0x0f
    1bb6:	68 89       	ldd	r22, Y+16	; 0x10
    1bb8:	79 89       	ldd	r23, Y+17	; 0x11
    1bba:	41 15       	cp	r20, r1
    1bbc:	51 05       	cpc	r21, r1
    1bbe:	61 05       	cpc	r22, r1
    1bc0:	71 05       	cpc	r23, r1
    1bc2:	01 f7       	brne	.-64     	; 0x1b84 <dir_read+0xa>
    1bc4:	88 23       	and	r24, r24
    1bc6:	39 f0       	breq	.+14     	; 0x1bd6 <dir_read+0x5c>
    1bc8:	1e 86       	std	Y+14, r1	; 0x0e
    1bca:	1f 86       	std	Y+15, r1	; 0x0f
    1bcc:	18 8a       	std	Y+16, r1	; 0x10
    1bce:	19 8a       	std	Y+17, r1	; 0x11
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <dir_read+0x5c>
    1bd2:	84 e0       	ldi	r24, 0x04	; 4
    1bd4:	f9 cf       	rjmp	.-14     	; 0x1bc8 <dir_read+0x4e>
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	08 95       	ret

00001bdc <remove_chain>:
    1bdc:	7f 92       	push	r7
    1bde:	8f 92       	push	r8
    1be0:	9f 92       	push	r9
    1be2:	af 92       	push	r10
    1be4:	bf 92       	push	r11
    1be6:	cf 92       	push	r12
    1be8:	df 92       	push	r13
    1bea:	ef 92       	push	r14
    1bec:	ff 92       	push	r15
    1bee:	0f 93       	push	r16
    1bf0:	1f 93       	push	r17
    1bf2:	cf 93       	push	r28
    1bf4:	df 93       	push	r29
    1bf6:	ec 01       	movw	r28, r24
    1bf8:	6a 01       	movw	r12, r20
    1bfa:	7b 01       	movw	r14, r22
    1bfc:	42 30       	cpi	r20, 0x02	; 2
    1bfe:	51 05       	cpc	r21, r1
    1c00:	61 05       	cpc	r22, r1
    1c02:	71 05       	cpc	r23, r1
    1c04:	08 f4       	brcc	.+2      	; 0x1c08 <remove_chain+0x2c>
    1c06:	4c c0       	rjmp	.+152    	; 0x1ca0 <remove_chain+0xc4>
    1c08:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c0a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1c0c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1c0e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1c10:	48 17       	cp	r20, r24
    1c12:	59 07       	cpc	r21, r25
    1c14:	6a 07       	cpc	r22, r26
    1c16:	7b 07       	cpc	r23, r27
    1c18:	08 f0       	brcs	.+2      	; 0x1c1c <remove_chain+0x40>
    1c1a:	44 c0       	rjmp	.+136    	; 0x1ca4 <remove_chain+0xc8>
    1c1c:	77 24       	eor	r7, r7
    1c1e:	73 94       	inc	r7
    1c20:	b7 01       	movw	r22, r14
    1c22:	a6 01       	movw	r20, r12
    1c24:	ce 01       	movw	r24, r28
    1c26:	0e 94 b2 06 	call	0xd64	; 0xd64 <get_fat>
    1c2a:	4b 01       	movw	r8, r22
    1c2c:	5c 01       	movw	r10, r24
    1c2e:	67 2b       	or	r22, r23
    1c30:	68 2b       	or	r22, r24
    1c32:	69 2b       	or	r22, r25
    1c34:	c9 f1       	breq	.+114    	; 0x1ca8 <remove_chain+0xcc>
    1c36:	91 e0       	ldi	r25, 0x01	; 1
    1c38:	89 16       	cp	r8, r25
    1c3a:	91 04       	cpc	r9, r1
    1c3c:	a1 04       	cpc	r10, r1
    1c3e:	b1 04       	cpc	r11, r1
    1c40:	a9 f1       	breq	.+106    	; 0x1cac <remove_chain+0xd0>
    1c42:	8f ef       	ldi	r24, 0xFF	; 255
    1c44:	88 16       	cp	r8, r24
    1c46:	98 06       	cpc	r9, r24
    1c48:	a8 06       	cpc	r10, r24
    1c4a:	b8 06       	cpc	r11, r24
    1c4c:	89 f1       	breq	.+98     	; 0x1cb0 <remove_chain+0xd4>
    1c4e:	00 e0       	ldi	r16, 0x00	; 0
    1c50:	10 e0       	ldi	r17, 0x00	; 0
    1c52:	98 01       	movw	r18, r16
    1c54:	b7 01       	movw	r22, r14
    1c56:	a6 01       	movw	r20, r12
    1c58:	ce 01       	movw	r24, r28
    1c5a:	0e 94 4d 08 	call	0x109a	; 0x109a <put_fat>
    1c5e:	81 11       	cpse	r24, r1
    1c60:	28 c0       	rjmp	.+80     	; 0x1cb2 <remove_chain+0xd6>
    1c62:	4e 85       	ldd	r20, Y+14	; 0x0e
    1c64:	5f 85       	ldd	r21, Y+15	; 0x0f
    1c66:	68 89       	ldd	r22, Y+16	; 0x10
    1c68:	79 89       	ldd	r23, Y+17	; 0x11
    1c6a:	4f 3f       	cpi	r20, 0xFF	; 255
    1c6c:	9f ef       	ldi	r25, 0xFF	; 255
    1c6e:	59 07       	cpc	r21, r25
    1c70:	69 07       	cpc	r22, r25
    1c72:	79 07       	cpc	r23, r25
    1c74:	49 f0       	breq	.+18     	; 0x1c88 <remove_chain+0xac>
    1c76:	4f 5f       	subi	r20, 0xFF	; 255
    1c78:	5f 4f       	sbci	r21, 0xFF	; 255
    1c7a:	6f 4f       	sbci	r22, 0xFF	; 255
    1c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7e:	4e 87       	std	Y+14, r20	; 0x0e
    1c80:	5f 87       	std	Y+15, r21	; 0x0f
    1c82:	68 8b       	std	Y+16, r22	; 0x10
    1c84:	79 8b       	std	Y+17, r23	; 0x11
    1c86:	7d 82       	std	Y+5, r7	; 0x05
    1c88:	75 01       	movw	r14, r10
    1c8a:	64 01       	movw	r12, r8
    1c8c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1c8e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1c90:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1c92:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1c94:	84 16       	cp	r8, r20
    1c96:	95 06       	cpc	r9, r21
    1c98:	a6 06       	cpc	r10, r22
    1c9a:	b7 06       	cpc	r11, r23
    1c9c:	08 f2       	brcs	.-126    	; 0x1c20 <remove_chain+0x44>
    1c9e:	09 c0       	rjmp	.+18     	; 0x1cb2 <remove_chain+0xd6>
    1ca0:	82 e0       	ldi	r24, 0x02	; 2
    1ca2:	07 c0       	rjmp	.+14     	; 0x1cb2 <remove_chain+0xd6>
    1ca4:	82 e0       	ldi	r24, 0x02	; 2
    1ca6:	05 c0       	rjmp	.+10     	; 0x1cb2 <remove_chain+0xd6>
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	03 c0       	rjmp	.+6      	; 0x1cb2 <remove_chain+0xd6>
    1cac:	82 e0       	ldi	r24, 0x02	; 2
    1cae:	01 c0       	rjmp	.+2      	; 0x1cb2 <remove_chain+0xd6>
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	1f 91       	pop	r17
    1cb8:	0f 91       	pop	r16
    1cba:	ff 90       	pop	r15
    1cbc:	ef 90       	pop	r14
    1cbe:	df 90       	pop	r13
    1cc0:	cf 90       	pop	r12
    1cc2:	bf 90       	pop	r11
    1cc4:	af 90       	pop	r10
    1cc6:	9f 90       	pop	r9
    1cc8:	8f 90       	pop	r8
    1cca:	7f 90       	pop	r7
    1ccc:	08 95       	ret

00001cce <f_mount>:
    1cce:	81 11       	cpse	r24, r1
    1cd0:	12 c0       	rjmp	.+36     	; 0x1cf6 <f_mount+0x28>
    1cd2:	e0 91 7f 01 	lds	r30, 0x017F	; 0x80017f <FatFs>
    1cd6:	f0 91 80 01 	lds	r31, 0x0180	; 0x800180 <FatFs+0x1>
    1cda:	30 97       	sbiw	r30, 0x00	; 0
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <f_mount+0x12>
    1cde:	10 82       	st	Z, r1
    1ce0:	61 15       	cp	r22, r1
    1ce2:	71 05       	cpc	r23, r1
    1ce4:	11 f0       	breq	.+4      	; 0x1cea <f_mount+0x1c>
    1ce6:	fb 01       	movw	r30, r22
    1ce8:	10 82       	st	Z, r1
    1cea:	70 93 80 01 	sts	0x0180, r23	; 0x800180 <FatFs+0x1>
    1cee:	60 93 7f 01 	sts	0x017F, r22	; 0x80017f <FatFs>
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	08 95       	ret
    1cf6:	8b e0       	ldi	r24, 0x0B	; 11
    1cf8:	08 95       	ret

00001cfa <f_open>:
    1cfa:	4f 92       	push	r4
    1cfc:	5f 92       	push	r5
    1cfe:	6f 92       	push	r6
    1d00:	7f 92       	push	r7
    1d02:	8f 92       	push	r8
    1d04:	9f 92       	push	r9
    1d06:	af 92       	push	r10
    1d08:	bf 92       	push	r11
    1d0a:	cf 92       	push	r12
    1d0c:	df 92       	push	r13
    1d0e:	ef 92       	push	r14
    1d10:	ff 92       	push	r15
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
    1d1e:	a4 97       	sbiw	r28, 0x24	; 36
    1d20:	0f b6       	in	r0, 0x3f	; 63
    1d22:	f8 94       	cli
    1d24:	de bf       	out	0x3e, r29	; 62
    1d26:	0f be       	out	0x3f, r0	; 63
    1d28:	cd bf       	out	0x3d, r28	; 61
    1d2a:	8c 01       	movw	r16, r24
    1d2c:	7c a3       	std	Y+36, r23	; 0x24
    1d2e:	6b a3       	std	Y+35, r22	; 0x23
    1d30:	f4 2e       	mov	r15, r20
    1d32:	dc 01       	movw	r26, r24
    1d34:	1d 92       	st	X+, r1
    1d36:	1c 92       	st	X, r1
    1d38:	b4 2f       	mov	r27, r20
    1d3a:	bf 71       	andi	r27, 0x1F	; 31
    1d3c:	eb 2e       	mov	r14, r27
    1d3e:	4e 71       	andi	r20, 0x1E	; 30
    1d40:	be 01       	movw	r22, r28
    1d42:	6f 5f       	subi	r22, 0xFF	; 255
    1d44:	7f 4f       	sbci	r23, 0xFF	; 255
    1d46:	ce 01       	movw	r24, r28
    1d48:	83 96       	adiw	r24, 0x23	; 35
    1d4a:	0e 94 3f 03 	call	0x67e	; 0x67e <chk_mounted>
    1d4e:	9e 01       	movw	r18, r28
    1d50:	29 5e       	subi	r18, 0xE9	; 233
    1d52:	3f 4f       	sbci	r19, 0xFF	; 255
    1d54:	3e 8b       	std	Y+22, r19	; 0x16
    1d56:	2d 8b       	std	Y+21, r18	; 0x15
    1d58:	81 11       	cpse	r24, r1
    1d5a:	bd c0       	rjmp	.+378    	; 0x1ed6 <f_open+0x1dc>
    1d5c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d5e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d60:	ce 01       	movw	r24, r28
    1d62:	01 96       	adiw	r24, 0x01	; 1
    1d64:	0e 94 9c 0b 	call	0x1738	; 0x1738 <follow_path>
    1d68:	cb 88       	ldd	r12, Y+19	; 0x13
    1d6a:	dc 88       	ldd	r13, Y+20	; 0x14
    1d6c:	81 11       	cpse	r24, r1
    1d6e:	ba c0       	rjmp	.+372    	; 0x1ee4 <f_open+0x1ea>
    1d70:	c1 14       	cp	r12, r1
    1d72:	d1 04       	cpc	r13, r1
    1d74:	09 f0       	breq	.+2      	; 0x1d78 <f_open+0x7e>
    1d76:	c0 c0       	rjmp	.+384    	; 0x1ef8 <f_open+0x1fe>
    1d78:	ba c0       	rjmp	.+372    	; 0x1eee <f_open+0x1f4>
    1d7a:	84 30       	cpi	r24, 0x04	; 4
    1d7c:	21 f4       	brne	.+8      	; 0x1d86 <f_open+0x8c>
    1d7e:	ce 01       	movw	r24, r28
    1d80:	01 96       	adiw	r24, 0x01	; 1
    1d82:	0e 94 66 0d 	call	0x1acc	; 0x1acc <dir_register>
    1d86:	ee 2d       	mov	r30, r14
    1d88:	e8 60       	ori	r30, 0x08	; 8
    1d8a:	ee 2e       	mov	r14, r30
    1d8c:	cb 88       	ldd	r12, Y+19	; 0x13
    1d8e:	dc 88       	ldd	r13, Y+20	; 0x14
    1d90:	88 23       	and	r24, r24
    1d92:	49 f0       	breq	.+18     	; 0x1da6 <f_open+0xac>
    1d94:	cc c0       	rjmp	.+408    	; 0x1f2e <f_open+0x234>
    1d96:	f2 fc       	sbrc	r15, 2
    1d98:	c3 c0       	rjmp	.+390    	; 0x1f20 <f_open+0x226>
    1d9a:	d6 01       	movw	r26, r12
    1d9c:	1b 96       	adiw	r26, 0x0b	; 11
    1d9e:	8c 91       	ld	r24, X
    1da0:	81 71       	andi	r24, 0x11	; 17
    1da2:	09 f0       	breq	.+2      	; 0x1da6 <f_open+0xac>
    1da4:	bf c0       	rjmp	.+382    	; 0x1f24 <f_open+0x22a>
    1da6:	e3 fe       	sbrs	r14, 3
    1da8:	51 c0       	rjmp	.+162    	; 0x1e4c <f_open+0x152>
    1daa:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <get_fattime>
    1dae:	f6 01       	movw	r30, r12
    1db0:	66 87       	std	Z+14, r22	; 0x0e
    1db2:	77 87       	std	Z+15, r23	; 0x0f
    1db4:	80 8b       	std	Z+16, r24	; 0x10
    1db6:	91 8b       	std	Z+17, r25	; 0x11
    1db8:	13 86       	std	Z+11, r1	; 0x0b
    1dba:	14 8e       	std	Z+28, r1	; 0x1c
    1dbc:	15 8e       	std	Z+29, r1	; 0x1d
    1dbe:	16 8e       	std	Z+30, r1	; 0x1e
    1dc0:	17 8e       	std	Z+31, r1	; 0x1f
    1dc2:	84 88       	ldd	r8, Z+20	; 0x14
    1dc4:	95 88       	ldd	r9, Z+21	; 0x15
    1dc6:	a1 2c       	mov	r10, r1
    1dc8:	b1 2c       	mov	r11, r1
    1dca:	d4 01       	movw	r26, r8
    1dcc:	99 27       	eor	r25, r25
    1dce:	88 27       	eor	r24, r24
    1dd0:	82 8c       	ldd	r8, Z+26	; 0x1a
    1dd2:	93 8c       	ldd	r9, Z+27	; 0x1b
    1dd4:	a1 2c       	mov	r10, r1
    1dd6:	b1 2c       	mov	r11, r1
    1dd8:	88 2a       	or	r8, r24
    1dda:	99 2a       	or	r9, r25
    1ddc:	aa 2a       	or	r10, r26
    1dde:	bb 2a       	or	r11, r27
    1de0:	13 8e       	std	Z+27, r1	; 0x1b
    1de2:	12 8e       	std	Z+26, r1	; 0x1a
    1de4:	15 8a       	std	Z+21, r1	; 0x15
    1de6:	14 8a       	std	Z+20, r1	; 0x14
    1de8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dea:	fa 81       	ldd	r31, Y+2	; 0x02
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	84 83       	std	Z+4, r24	; 0x04
    1df0:	81 14       	cp	r8, r1
    1df2:	91 04       	cpc	r9, r1
    1df4:	a1 04       	cpc	r10, r1
    1df6:	b1 04       	cpc	r11, r1
    1df8:	31 f1       	breq	.+76     	; 0x1e46 <f_open+0x14c>
    1dfa:	46 a4       	ldd	r4, Z+46	; 0x2e
    1dfc:	57 a4       	ldd	r5, Z+47	; 0x2f
    1dfe:	60 a8       	ldd	r6, Z+48	; 0x30
    1e00:	71 a8       	ldd	r7, Z+49	; 0x31
    1e02:	b5 01       	movw	r22, r10
    1e04:	a4 01       	movw	r20, r8
    1e06:	cf 01       	movw	r24, r30
    1e08:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <remove_chain>
    1e0c:	81 11       	cpse	r24, r1
    1e0e:	8f c0       	rjmp	.+286    	; 0x1f2e <f_open+0x234>
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	9a 81       	ldd	r25, Y+2	; 0x02
    1e14:	f1 e0       	ldi	r31, 0x01	; 1
    1e16:	8f 1a       	sub	r8, r31
    1e18:	91 08       	sbc	r9, r1
    1e1a:	a1 08       	sbc	r10, r1
    1e1c:	b1 08       	sbc	r11, r1
    1e1e:	dc 01       	movw	r26, r24
    1e20:	1a 96       	adiw	r26, 0x0a	; 10
    1e22:	8d 92       	st	X+, r8
    1e24:	9d 92       	st	X+, r9
    1e26:	ad 92       	st	X+, r10
    1e28:	bc 92       	st	X, r11
    1e2a:	1d 97       	sbiw	r26, 0x0d	; 13
    1e2c:	b3 01       	movw	r22, r6
    1e2e:	a2 01       	movw	r20, r4
    1e30:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    1e34:	88 23       	and	r24, r24
    1e36:	39 f0       	breq	.+14     	; 0x1e46 <f_open+0x14c>
    1e38:	7a c0       	rjmp	.+244    	; 0x1f2e <f_open+0x234>
    1e3a:	f1 fe       	sbrs	r15, 1
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <f_open+0x148>
    1e3e:	80 fd       	sbrc	r24, 0
    1e40:	73 c0       	rjmp	.+230    	; 0x1f28 <f_open+0x22e>
    1e42:	f3 fe       	sbrs	r15, 3
    1e44:	03 c0       	rjmp	.+6      	; 0x1e4c <f_open+0x152>
    1e46:	be 2d       	mov	r27, r14
    1e48:	b0 62       	ori	r27, 0x20	; 32
    1e4a:	eb 2e       	mov	r14, r27
    1e4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e50:	86 a5       	ldd	r24, Z+46	; 0x2e
    1e52:	97 a5       	ldd	r25, Z+47	; 0x2f
    1e54:	a0 a9       	ldd	r26, Z+48	; 0x30
    1e56:	b1 a9       	ldd	r27, Z+49	; 0x31
    1e58:	f8 01       	movw	r30, r16
    1e5a:	82 8f       	std	Z+26, r24	; 0x1a
    1e5c:	93 8f       	std	Z+27, r25	; 0x1b
    1e5e:	a4 8f       	std	Z+28, r26	; 0x1c
    1e60:	b5 8f       	std	Z+29, r27	; 0x1d
    1e62:	d7 8e       	std	Z+31, r13	; 0x1f
    1e64:	c6 8e       	std	Z+30, r12	; 0x1e
    1e66:	d8 01       	movw	r26, r16
    1e68:	14 96       	adiw	r26, 0x04	; 4
    1e6a:	ec 92       	st	X, r14
    1e6c:	f6 01       	movw	r30, r12
    1e6e:	84 89       	ldd	r24, Z+20	; 0x14
    1e70:	95 89       	ldd	r25, Z+21	; 0x15
    1e72:	a0 e0       	ldi	r26, 0x00	; 0
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	dc 01       	movw	r26, r24
    1e78:	99 27       	eor	r25, r25
    1e7a:	88 27       	eor	r24, r24
    1e7c:	42 8d       	ldd	r20, Z+26	; 0x1a
    1e7e:	53 8d       	ldd	r21, Z+27	; 0x1b
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	70 e0       	ldi	r23, 0x00	; 0
    1e84:	84 2b       	or	r24, r20
    1e86:	95 2b       	or	r25, r21
    1e88:	a6 2b       	or	r26, r22
    1e8a:	b7 2b       	or	r27, r23
    1e8c:	f8 01       	movw	r30, r16
    1e8e:	86 87       	std	Z+14, r24	; 0x0e
    1e90:	97 87       	std	Z+15, r25	; 0x0f
    1e92:	a0 8b       	std	Z+16, r26	; 0x10
    1e94:	b1 8b       	std	Z+17, r27	; 0x11
    1e96:	f6 01       	movw	r30, r12
    1e98:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e9a:	95 8d       	ldd	r25, Z+29	; 0x1d
    1e9c:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1e9e:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1ea0:	f8 01       	movw	r30, r16
    1ea2:	82 87       	std	Z+10, r24	; 0x0a
    1ea4:	93 87       	std	Z+11, r25	; 0x0b
    1ea6:	a4 87       	std	Z+12, r26	; 0x0c
    1ea8:	b5 87       	std	Z+13, r27	; 0x0d
    1eaa:	d8 01       	movw	r26, r16
    1eac:	16 82       	std	Z+6, r1	; 0x06
    1eae:	17 82       	std	Z+7, r1	; 0x07
    1eb0:	10 86       	std	Z+8, r1	; 0x08
    1eb2:	11 86       	std	Z+9, r1	; 0x09
    1eb4:	16 8a       	std	Z+22, r1	; 0x16
    1eb6:	17 8a       	std	Z+23, r1	; 0x17
    1eb8:	10 8e       	std	Z+24, r1	; 0x18
    1eba:	11 8e       	std	Z+25, r1	; 0x19
    1ebc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ebe:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec0:	11 96       	adiw	r26, 0x01	; 1
    1ec2:	fc 93       	st	X, r31
    1ec4:	ee 93       	st	-X, r30
    1ec6:	86 81       	ldd	r24, Z+6	; 0x06
    1ec8:	97 81       	ldd	r25, Z+7	; 0x07
    1eca:	13 96       	adiw	r26, 0x03	; 3
    1ecc:	9c 93       	st	X, r25
    1ece:	8e 93       	st	-X, r24
    1ed0:	12 97       	sbiw	r26, 0x02	; 2
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	2c c0       	rjmp	.+88     	; 0x1f2e <f_open+0x234>
    1ed6:	cb 88       	ldd	r12, Y+19	; 0x13
    1ed8:	dc 88       	ldd	r13, Y+20	; 0x14
    1eda:	9f 2d       	mov	r25, r15
    1edc:	9c 71       	andi	r25, 0x1C	; 28
    1ede:	09 f0       	breq	.+2      	; 0x1ee2 <f_open+0x1e8>
    1ee0:	4c cf       	rjmp	.-360    	; 0x1d7a <f_open+0x80>
    1ee2:	0f c0       	rjmp	.+30     	; 0x1f02 <f_open+0x208>
    1ee4:	9f 2d       	mov	r25, r15
    1ee6:	9c 71       	andi	r25, 0x1C	; 28
    1ee8:	09 f0       	breq	.+2      	; 0x1eec <f_open+0x1f2>
    1eea:	47 cf       	rjmp	.-370    	; 0x1d7a <f_open+0x80>
    1eec:	0a c0       	rjmp	.+20     	; 0x1f02 <f_open+0x208>
    1eee:	8f 2d       	mov	r24, r15
    1ef0:	8c 71       	andi	r24, 0x1C	; 28
    1ef2:	51 f4       	brne	.+20     	; 0x1f08 <f_open+0x20e>
    1ef4:	86 e0       	ldi	r24, 0x06	; 6
    1ef6:	05 c0       	rjmp	.+10     	; 0x1f02 <f_open+0x208>
    1ef8:	8f 2d       	mov	r24, r15
    1efa:	8c 71       	andi	r24, 0x1C	; 28
    1efc:	09 f0       	breq	.+2      	; 0x1f00 <f_open+0x206>
    1efe:	4b cf       	rjmp	.-362    	; 0x1d96 <f_open+0x9c>
    1f00:	0a c0       	rjmp	.+20     	; 0x1f16 <f_open+0x21c>
    1f02:	81 11       	cpse	r24, r1
    1f04:	14 c0       	rjmp	.+40     	; 0x1f2e <f_open+0x234>
    1f06:	af cf       	rjmp	.-162    	; 0x1e66 <f_open+0x16c>
    1f08:	be 2d       	mov	r27, r14
    1f0a:	b8 60       	ori	r27, 0x08	; 8
    1f0c:	eb 2e       	mov	r14, r27
    1f0e:	cb 88       	ldd	r12, Y+19	; 0x13
    1f10:	dc 88       	ldd	r13, Y+20	; 0x14
    1f12:	86 e0       	ldi	r24, 0x06	; 6
    1f14:	f6 cf       	rjmp	.-20     	; 0x1f02 <f_open+0x208>
    1f16:	f6 01       	movw	r30, r12
    1f18:	83 85       	ldd	r24, Z+11	; 0x0b
    1f1a:	84 fd       	sbrc	r24, 4
    1f1c:	07 c0       	rjmp	.+14     	; 0x1f2c <f_open+0x232>
    1f1e:	8d cf       	rjmp	.-230    	; 0x1e3a <f_open+0x140>
    1f20:	88 e0       	ldi	r24, 0x08	; 8
    1f22:	05 c0       	rjmp	.+10     	; 0x1f2e <f_open+0x234>
    1f24:	87 e0       	ldi	r24, 0x07	; 7
    1f26:	03 c0       	rjmp	.+6      	; 0x1f2e <f_open+0x234>
    1f28:	87 e0       	ldi	r24, 0x07	; 7
    1f2a:	01 c0       	rjmp	.+2      	; 0x1f2e <f_open+0x234>
    1f2c:	84 e0       	ldi	r24, 0x04	; 4
    1f2e:	a4 96       	adiw	r28, 0x24	; 36
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	de bf       	out	0x3e, r29	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	df 91       	pop	r29
    1f3c:	cf 91       	pop	r28
    1f3e:	1f 91       	pop	r17
    1f40:	0f 91       	pop	r16
    1f42:	ff 90       	pop	r15
    1f44:	ef 90       	pop	r14
    1f46:	df 90       	pop	r13
    1f48:	cf 90       	pop	r12
    1f4a:	bf 90       	pop	r11
    1f4c:	af 90       	pop	r10
    1f4e:	9f 90       	pop	r9
    1f50:	8f 90       	pop	r8
    1f52:	7f 90       	pop	r7
    1f54:	6f 90       	pop	r6
    1f56:	5f 90       	pop	r5
    1f58:	4f 90       	pop	r4
    1f5a:	08 95       	ret

00001f5c <f_read>:
    1f5c:	2f 92       	push	r2
    1f5e:	3f 92       	push	r3
    1f60:	4f 92       	push	r4
    1f62:	5f 92       	push	r5
    1f64:	6f 92       	push	r6
    1f66:	7f 92       	push	r7
    1f68:	8f 92       	push	r8
    1f6a:	9f 92       	push	r9
    1f6c:	af 92       	push	r10
    1f6e:	bf 92       	push	r11
    1f70:	cf 92       	push	r12
    1f72:	df 92       	push	r13
    1f74:	ef 92       	push	r14
    1f76:	ff 92       	push	r15
    1f78:	0f 93       	push	r16
    1f7a:	1f 93       	push	r17
    1f7c:	cf 93       	push	r28
    1f7e:	df 93       	push	r29
    1f80:	ec 01       	movw	r28, r24
    1f82:	4b 01       	movw	r8, r22
    1f84:	6a 01       	movw	r12, r20
    1f86:	59 01       	movw	r10, r18
    1f88:	f9 01       	movw	r30, r18
    1f8a:	11 82       	std	Z+1, r1	; 0x01
    1f8c:	10 82       	st	Z, r1
    1f8e:	6a 81       	ldd	r22, Y+2	; 0x02
    1f90:	7b 81       	ldd	r23, Y+3	; 0x03
    1f92:	88 81       	ld	r24, Y
    1f94:	99 81       	ldd	r25, Y+1	; 0x01
    1f96:	0e 94 25 03 	call	0x64a	; 0x64a <validate>
    1f9a:	81 11       	cpse	r24, r1
    1f9c:	18 c1       	rjmp	.+560    	; 0x21ce <f_read+0x272>
    1f9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa0:	88 23       	and	r24, r24
    1fa2:	0c f4       	brge	.+2      	; 0x1fa6 <f_read+0x4a>
    1fa4:	0f c1       	rjmp	.+542    	; 0x21c4 <f_read+0x268>
    1fa6:	80 ff       	sbrs	r24, 0
    1fa8:	0f c1       	rjmp	.+542    	; 0x21c8 <f_read+0x26c>
    1faa:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fac:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fae:	ac 85       	ldd	r26, Y+12	; 0x0c
    1fb0:	bd 85       	ldd	r27, Y+13	; 0x0d
    1fb2:	4e 81       	ldd	r20, Y+6	; 0x06
    1fb4:	5f 81       	ldd	r21, Y+7	; 0x07
    1fb6:	68 85       	ldd	r22, Y+8	; 0x08
    1fb8:	79 85       	ldd	r23, Y+9	; 0x09
    1fba:	84 1b       	sub	r24, r20
    1fbc:	95 0b       	sbc	r25, r21
    1fbe:	a6 0b       	sbc	r26, r22
    1fc0:	b7 0b       	sbc	r27, r23
    1fc2:	a6 01       	movw	r20, r12
    1fc4:	60 e0       	ldi	r22, 0x00	; 0
    1fc6:	70 e0       	ldi	r23, 0x00	; 0
    1fc8:	84 17       	cp	r24, r20
    1fca:	95 07       	cpc	r25, r21
    1fcc:	a6 07       	cpc	r26, r22
    1fce:	b7 07       	cpc	r27, r23
    1fd0:	08 f4       	brcc	.+2      	; 0x1fd4 <f_read+0x78>
    1fd2:	6c 01       	movw	r12, r24
    1fd4:	c1 14       	cp	r12, r1
    1fd6:	d1 04       	cpc	r13, r1
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <f_read+0x80>
    1fda:	f8 c0       	rjmp	.+496    	; 0x21cc <f_read+0x270>
    1fdc:	4e 81       	ldd	r20, Y+6	; 0x06
    1fde:	5f 81       	ldd	r21, Y+7	; 0x07
    1fe0:	68 85       	ldd	r22, Y+8	; 0x08
    1fe2:	79 85       	ldd	r23, Y+9	; 0x09
    1fe4:	db 01       	movw	r26, r22
    1fe6:	ca 01       	movw	r24, r20
    1fe8:	91 70       	andi	r25, 0x01	; 1
    1fea:	aa 27       	eor	r26, r26
    1fec:	bb 27       	eor	r27, r27
    1fee:	89 2b       	or	r24, r25
    1ff0:	8a 2b       	or	r24, r26
    1ff2:	8b 2b       	or	r24, r27
    1ff4:	09 f0       	breq	.+2      	; 0x1ff8 <f_read+0x9c>
    1ff6:	a0 c0       	rjmp	.+320    	; 0x2138 <f_read+0x1dc>
    1ff8:	e8 81       	ld	r30, Y
    1ffa:	f9 81       	ldd	r31, Y+1	; 0x01
    1ffc:	12 81       	ldd	r17, Z+2	; 0x02
    1ffe:	11 50       	subi	r17, 0x01	; 1
    2000:	db 01       	movw	r26, r22
    2002:	ca 01       	movw	r24, r20
    2004:	07 2e       	mov	r0, r23
    2006:	79 e0       	ldi	r23, 0x09	; 9
    2008:	b6 95       	lsr	r27
    200a:	a7 95       	ror	r26
    200c:	97 95       	ror	r25
    200e:	87 95       	ror	r24
    2010:	7a 95       	dec	r23
    2012:	d1 f7       	brne	.-12     	; 0x2008 <f_read+0xac>
    2014:	70 2d       	mov	r23, r0
    2016:	18 23       	and	r17, r24
    2018:	49 f5       	brne	.+82     	; 0x206c <f_read+0x110>
    201a:	45 2b       	or	r20, r21
    201c:	46 2b       	or	r20, r22
    201e:	47 2b       	or	r20, r23
    2020:	29 f4       	brne	.+10     	; 0x202c <f_read+0xd0>
    2022:	6e 85       	ldd	r22, Y+14	; 0x0e
    2024:	7f 85       	ldd	r23, Y+15	; 0x0f
    2026:	88 89       	ldd	r24, Y+16	; 0x10
    2028:	99 89       	ldd	r25, Y+17	; 0x11
    202a:	07 c0       	rjmp	.+14     	; 0x203a <f_read+0xde>
    202c:	4a 89       	ldd	r20, Y+18	; 0x12
    202e:	5b 89       	ldd	r21, Y+19	; 0x13
    2030:	6c 89       	ldd	r22, Y+20	; 0x14
    2032:	7d 89       	ldd	r23, Y+21	; 0x15
    2034:	cf 01       	movw	r24, r30
    2036:	0e 94 b2 06 	call	0xd64	; 0xd64 <get_fat>
    203a:	62 30       	cpi	r22, 0x02	; 2
    203c:	71 05       	cpc	r23, r1
    203e:	81 05       	cpc	r24, r1
    2040:	91 05       	cpc	r25, r1
    2042:	28 f4       	brcc	.+10     	; 0x204e <f_read+0xf2>
    2044:	8c 81       	ldd	r24, Y+4	; 0x04
    2046:	80 68       	ori	r24, 0x80	; 128
    2048:	8c 83       	std	Y+4, r24	; 0x04
    204a:	82 e0       	ldi	r24, 0x02	; 2
    204c:	c0 c0       	rjmp	.+384    	; 0x21ce <f_read+0x272>
    204e:	6f 3f       	cpi	r22, 0xFF	; 255
    2050:	ff ef       	ldi	r31, 0xFF	; 255
    2052:	7f 07       	cpc	r23, r31
    2054:	8f 07       	cpc	r24, r31
    2056:	9f 07       	cpc	r25, r31
    2058:	29 f4       	brne	.+10     	; 0x2064 <f_read+0x108>
    205a:	8c 81       	ldd	r24, Y+4	; 0x04
    205c:	80 68       	ori	r24, 0x80	; 128
    205e:	8c 83       	std	Y+4, r24	; 0x04
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	b5 c0       	rjmp	.+362    	; 0x21ce <f_read+0x272>
    2064:	6a 8b       	std	Y+18, r22	; 0x12
    2066:	7b 8b       	std	Y+19, r23	; 0x13
    2068:	8c 8b       	std	Y+20, r24	; 0x14
    206a:	9d 8b       	std	Y+21, r25	; 0x15
    206c:	28 80       	ld	r2, Y
    206e:	39 80       	ldd	r3, Y+1	; 0x01
    2070:	4a 89       	ldd	r20, Y+18	; 0x12
    2072:	5b 89       	ldd	r21, Y+19	; 0x13
    2074:	6c 89       	ldd	r22, Y+20	; 0x14
    2076:	7d 89       	ldd	r23, Y+21	; 0x15
    2078:	c1 01       	movw	r24, r2
    207a:	0e 94 8a 06 	call	0xd14	; 0xd14 <clust2sect>
    207e:	61 15       	cp	r22, r1
    2080:	71 05       	cpc	r23, r1
    2082:	81 05       	cpc	r24, r1
    2084:	91 05       	cpc	r25, r1
    2086:	29 f4       	brne	.+10     	; 0x2092 <f_read+0x136>
    2088:	8c 81       	ldd	r24, Y+4	; 0x04
    208a:	80 68       	ori	r24, 0x80	; 128
    208c:	8c 83       	std	Y+4, r24	; 0x04
    208e:	82 e0       	ldi	r24, 0x02	; 2
    2090:	9e c0       	rjmp	.+316    	; 0x21ce <f_read+0x272>
    2092:	2b 01       	movw	r4, r22
    2094:	3c 01       	movw	r6, r24
    2096:	41 0e       	add	r4, r17
    2098:	51 1c       	adc	r5, r1
    209a:	61 1c       	adc	r6, r1
    209c:	71 1c       	adc	r7, r1
    209e:	76 01       	movw	r14, r12
    20a0:	ef 2c       	mov	r14, r15
    20a2:	ff 24       	eor	r15, r15
    20a4:	e6 94       	lsr	r14
    20a6:	e1 14       	cp	r14, r1
    20a8:	f1 04       	cpc	r15, r1
    20aa:	09 f4       	brne	.+2      	; 0x20ae <f_read+0x152>
    20ac:	41 c0       	rjmp	.+130    	; 0x2130 <f_read+0x1d4>
    20ae:	f1 01       	movw	r30, r2
    20b0:	42 81       	ldd	r20, Z+2	; 0x02
    20b2:	24 2f       	mov	r18, r20
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	c7 01       	movw	r24, r14
    20b8:	81 0f       	add	r24, r17
    20ba:	91 1d       	adc	r25, r1
    20bc:	28 17       	cp	r18, r24
    20be:	39 07       	cpc	r19, r25
    20c0:	18 f4       	brcc	.+6      	; 0x20c8 <f_read+0x16c>
    20c2:	79 01       	movw	r14, r18
    20c4:	e1 1a       	sub	r14, r17
    20c6:	f1 08       	sbc	r15, r1
    20c8:	0e 2d       	mov	r16, r14
    20ca:	a3 01       	movw	r20, r6
    20cc:	92 01       	movw	r18, r4
    20ce:	b4 01       	movw	r22, r8
    20d0:	f1 01       	movw	r30, r2
    20d2:	81 81       	ldd	r24, Z+1	; 0x01
    20d4:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <disk_read>
    20d8:	88 23       	and	r24, r24
    20da:	29 f0       	breq	.+10     	; 0x20e6 <f_read+0x18a>
    20dc:	8c 81       	ldd	r24, Y+4	; 0x04
    20de:	80 68       	ori	r24, 0x80	; 128
    20e0:	8c 83       	std	Y+4, r24	; 0x04
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	74 c0       	rjmp	.+232    	; 0x21ce <f_read+0x272>
    20e6:	e8 81       	ld	r30, Y
    20e8:	f9 81       	ldd	r31, Y+1	; 0x01
    20ea:	84 81       	ldd	r24, Z+4	; 0x04
    20ec:	88 23       	and	r24, r24
    20ee:	e1 f0       	breq	.+56     	; 0x2128 <f_read+0x1cc>
    20f0:	86 a5       	ldd	r24, Z+46	; 0x2e
    20f2:	97 a5       	ldd	r25, Z+47	; 0x2f
    20f4:	a0 a9       	ldd	r26, Z+48	; 0x30
    20f6:	b1 a9       	ldd	r27, Z+49	; 0x31
    20f8:	84 19       	sub	r24, r4
    20fa:	95 09       	sbc	r25, r5
    20fc:	a6 09       	sbc	r26, r6
    20fe:	b7 09       	sbc	r27, r7
    2100:	a7 01       	movw	r20, r14
    2102:	60 e0       	ldi	r22, 0x00	; 0
    2104:	70 e0       	ldi	r23, 0x00	; 0
    2106:	84 17       	cp	r24, r20
    2108:	95 07       	cpc	r25, r21
    210a:	a6 07       	cpc	r26, r22
    210c:	b7 07       	cpc	r27, r23
    210e:	60 f4       	brcc	.+24     	; 0x2128 <f_read+0x1cc>
    2110:	bf 01       	movw	r22, r30
    2112:	6e 5c       	subi	r22, 0xCE	; 206
    2114:	7f 4f       	sbci	r23, 0xFF	; 255
    2116:	98 2f       	mov	r25, r24
    2118:	88 27       	eor	r24, r24
    211a:	99 0f       	add	r25, r25
    211c:	40 e0       	ldi	r20, 0x00	; 0
    211e:	52 e0       	ldi	r21, 0x02	; 2
    2120:	88 0d       	add	r24, r8
    2122:	99 1d       	adc	r25, r9
    2124:	0e 94 c5 01 	call	0x38a	; 0x38a <mem_cpy>
    2128:	fe 2c       	mov	r15, r14
    212a:	ee 24       	eor	r14, r14
    212c:	ff 0c       	add	r15, r15
    212e:	2f c0       	rjmp	.+94     	; 0x218e <f_read+0x232>
    2130:	4e 8a       	std	Y+22, r4	; 0x16
    2132:	5f 8a       	std	Y+23, r5	; 0x17
    2134:	68 8e       	std	Y+24, r6	; 0x18
    2136:	79 8e       	std	Y+25, r7	; 0x19
    2138:	8e 81       	ldd	r24, Y+6	; 0x06
    213a:	9f 81       	ldd	r25, Y+7	; 0x07
    213c:	91 70       	andi	r25, 0x01	; 1
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	32 e0       	ldi	r19, 0x02	; 2
    2142:	79 01       	movw	r14, r18
    2144:	e8 1a       	sub	r14, r24
    2146:	f9 0a       	sbc	r15, r25
    2148:	ce 14       	cp	r12, r14
    214a:	df 04       	cpc	r13, r15
    214c:	08 f4       	brcc	.+2      	; 0x2150 <f_read+0x1f4>
    214e:	76 01       	movw	r14, r12
    2150:	4e 89       	ldd	r20, Y+22	; 0x16
    2152:	5f 89       	ldd	r21, Y+23	; 0x17
    2154:	68 8d       	ldd	r22, Y+24	; 0x18
    2156:	79 8d       	ldd	r23, Y+25	; 0x19
    2158:	88 81       	ld	r24, Y
    215a:	99 81       	ldd	r25, Y+1	; 0x01
    215c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    2160:	88 23       	and	r24, r24
    2162:	29 f0       	breq	.+10     	; 0x216e <f_read+0x212>
    2164:	8c 81       	ldd	r24, Y+4	; 0x04
    2166:	80 68       	ori	r24, 0x80	; 128
    2168:	8c 83       	std	Y+4, r24	; 0x04
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	30 c0       	rjmp	.+96     	; 0x21ce <f_read+0x272>
    216e:	8e 81       	ldd	r24, Y+6	; 0x06
    2170:	9f 81       	ldd	r25, Y+7	; 0x07
    2172:	a8 85       	ldd	r26, Y+8	; 0x08
    2174:	b9 85       	ldd	r27, Y+9	; 0x09
    2176:	91 70       	andi	r25, 0x01	; 1
    2178:	aa 27       	eor	r26, r26
    217a:	bb 27       	eor	r27, r27
    217c:	c2 96       	adiw	r24, 0x32	; 50
    217e:	68 81       	ld	r22, Y
    2180:	79 81       	ldd	r23, Y+1	; 0x01
    2182:	68 0f       	add	r22, r24
    2184:	79 1f       	adc	r23, r25
    2186:	a7 01       	movw	r20, r14
    2188:	c4 01       	movw	r24, r8
    218a:	0e 94 c5 01 	call	0x38a	; 0x38a <mem_cpy>
    218e:	8e 0c       	add	r8, r14
    2190:	9f 1c       	adc	r9, r15
    2192:	8e 81       	ldd	r24, Y+6	; 0x06
    2194:	9f 81       	ldd	r25, Y+7	; 0x07
    2196:	a8 85       	ldd	r26, Y+8	; 0x08
    2198:	b9 85       	ldd	r27, Y+9	; 0x09
    219a:	8e 0d       	add	r24, r14
    219c:	9f 1d       	adc	r25, r15
    219e:	a1 1d       	adc	r26, r1
    21a0:	b1 1d       	adc	r27, r1
    21a2:	8e 83       	std	Y+6, r24	; 0x06
    21a4:	9f 83       	std	Y+7, r25	; 0x07
    21a6:	a8 87       	std	Y+8, r26	; 0x08
    21a8:	b9 87       	std	Y+9, r27	; 0x09
    21aa:	f5 01       	movw	r30, r10
    21ac:	80 81       	ld	r24, Z
    21ae:	91 81       	ldd	r25, Z+1	; 0x01
    21b0:	8e 0d       	add	r24, r14
    21b2:	9f 1d       	adc	r25, r15
    21b4:	91 83       	std	Z+1, r25	; 0x01
    21b6:	80 83       	st	Z, r24
    21b8:	ce 18       	sub	r12, r14
    21ba:	df 08       	sbc	r13, r15
    21bc:	09 f0       	breq	.+2      	; 0x21c0 <f_read+0x264>
    21be:	0e cf       	rjmp	.-484    	; 0x1fdc <f_read+0x80>
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	05 c0       	rjmp	.+10     	; 0x21ce <f_read+0x272>
    21c4:	82 e0       	ldi	r24, 0x02	; 2
    21c6:	03 c0       	rjmp	.+6      	; 0x21ce <f_read+0x272>
    21c8:	87 e0       	ldi	r24, 0x07	; 7
    21ca:	01 c0       	rjmp	.+2      	; 0x21ce <f_read+0x272>
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	1f 91       	pop	r17
    21d4:	0f 91       	pop	r16
    21d6:	ff 90       	pop	r15
    21d8:	ef 90       	pop	r14
    21da:	df 90       	pop	r13
    21dc:	cf 90       	pop	r12
    21de:	bf 90       	pop	r11
    21e0:	af 90       	pop	r10
    21e2:	9f 90       	pop	r9
    21e4:	8f 90       	pop	r8
    21e6:	7f 90       	pop	r7
    21e8:	6f 90       	pop	r6
    21ea:	5f 90       	pop	r5
    21ec:	4f 90       	pop	r4
    21ee:	3f 90       	pop	r3
    21f0:	2f 90       	pop	r2
    21f2:	08 95       	ret

000021f4 <f_write>:
    21f4:	2f 92       	push	r2
    21f6:	3f 92       	push	r3
    21f8:	4f 92       	push	r4
    21fa:	5f 92       	push	r5
    21fc:	6f 92       	push	r6
    21fe:	7f 92       	push	r7
    2200:	8f 92       	push	r8
    2202:	9f 92       	push	r9
    2204:	af 92       	push	r10
    2206:	bf 92       	push	r11
    2208:	cf 92       	push	r12
    220a:	df 92       	push	r13
    220c:	ef 92       	push	r14
    220e:	ff 92       	push	r15
    2210:	0f 93       	push	r16
    2212:	1f 93       	push	r17
    2214:	cf 93       	push	r28
    2216:	df 93       	push	r29
    2218:	ec 01       	movw	r28, r24
    221a:	4b 01       	movw	r8, r22
    221c:	6a 01       	movw	r12, r20
    221e:	59 01       	movw	r10, r18
    2220:	f9 01       	movw	r30, r18
    2222:	11 82       	std	Z+1, r1	; 0x01
    2224:	10 82       	st	Z, r1
    2226:	6a 81       	ldd	r22, Y+2	; 0x02
    2228:	7b 81       	ldd	r23, Y+3	; 0x03
    222a:	88 81       	ld	r24, Y
    222c:	99 81       	ldd	r25, Y+1	; 0x01
    222e:	0e 94 25 03 	call	0x64a	; 0x64a <validate>
    2232:	81 11       	cpse	r24, r1
    2234:	7a c1       	rjmp	.+756    	; 0x252a <f_write+0x336>
    2236:	8c 81       	ldd	r24, Y+4	; 0x04
    2238:	88 23       	and	r24, r24
    223a:	0c f4       	brge	.+2      	; 0x223e <f_write+0x4a>
    223c:	73 c1       	rjmp	.+742    	; 0x2524 <f_write+0x330>
    223e:	81 ff       	sbrs	r24, 1
    2240:	73 c1       	rjmp	.+742    	; 0x2528 <f_write+0x334>
    2242:	8a 85       	ldd	r24, Y+10	; 0x0a
    2244:	9b 85       	ldd	r25, Y+11	; 0x0b
    2246:	ac 85       	ldd	r26, Y+12	; 0x0c
    2248:	bd 85       	ldd	r27, Y+13	; 0x0d
    224a:	ac 01       	movw	r20, r24
    224c:	bd 01       	movw	r22, r26
    224e:	4c 0d       	add	r20, r12
    2250:	5d 1d       	adc	r21, r13
    2252:	61 1d       	adc	r22, r1
    2254:	71 1d       	adc	r23, r1
    2256:	48 17       	cp	r20, r24
    2258:	59 07       	cpc	r21, r25
    225a:	6a 07       	cpc	r22, r26
    225c:	7b 07       	cpc	r23, r27
    225e:	08 f4       	brcc	.+2      	; 0x2262 <f_write+0x6e>
    2260:	4b c1       	rjmp	.+662    	; 0x24f8 <f_write+0x304>
    2262:	c1 14       	cp	r12, r1
    2264:	d1 04       	cpc	r13, r1
    2266:	09 f4       	brne	.+2      	; 0x226a <f_write+0x76>
    2268:	47 c1       	rjmp	.+654    	; 0x24f8 <f_write+0x304>
    226a:	4e 81       	ldd	r20, Y+6	; 0x06
    226c:	5f 81       	ldd	r21, Y+7	; 0x07
    226e:	68 85       	ldd	r22, Y+8	; 0x08
    2270:	79 85       	ldd	r23, Y+9	; 0x09
    2272:	db 01       	movw	r26, r22
    2274:	ca 01       	movw	r24, r20
    2276:	91 70       	andi	r25, 0x01	; 1
    2278:	aa 27       	eor	r26, r26
    227a:	bb 27       	eor	r27, r27
    227c:	89 2b       	or	r24, r25
    227e:	8a 2b       	or	r24, r26
    2280:	8b 2b       	or	r24, r27
    2282:	09 f0       	breq	.+2      	; 0x2286 <f_write+0x92>
    2284:	f1 c0       	rjmp	.+482    	; 0x2468 <f_write+0x274>
    2286:	e8 81       	ld	r30, Y
    2288:	f9 81       	ldd	r31, Y+1	; 0x01
    228a:	12 81       	ldd	r17, Z+2	; 0x02
    228c:	11 50       	subi	r17, 0x01	; 1
    228e:	db 01       	movw	r26, r22
    2290:	ca 01       	movw	r24, r20
    2292:	07 2e       	mov	r0, r23
    2294:	79 e0       	ldi	r23, 0x09	; 9
    2296:	b6 95       	lsr	r27
    2298:	a7 95       	ror	r26
    229a:	97 95       	ror	r25
    229c:	87 95       	ror	r24
    229e:	7a 95       	dec	r23
    22a0:	d1 f7       	brne	.-12     	; 0x2296 <f_write+0xa2>
    22a2:	70 2d       	mov	r23, r0
    22a4:	18 23       	and	r17, r24
    22a6:	f1 f5       	brne	.+124    	; 0x2324 <f_write+0x130>
    22a8:	45 2b       	or	r20, r21
    22aa:	46 2b       	or	r20, r22
    22ac:	47 2b       	or	r20, r23
    22ae:	a1 f4       	brne	.+40     	; 0x22d8 <f_write+0xe4>
    22b0:	6e 85       	ldd	r22, Y+14	; 0x0e
    22b2:	7f 85       	ldd	r23, Y+15	; 0x0f
    22b4:	88 89       	ldd	r24, Y+16	; 0x10
    22b6:	99 89       	ldd	r25, Y+17	; 0x11
    22b8:	61 15       	cp	r22, r1
    22ba:	71 05       	cpc	r23, r1
    22bc:	81 05       	cpc	r24, r1
    22be:	91 05       	cpc	r25, r1
    22c0:	c1 f4       	brne	.+48     	; 0x22f2 <f_write+0xfe>
    22c2:	40 e0       	ldi	r20, 0x00	; 0
    22c4:	50 e0       	ldi	r21, 0x00	; 0
    22c6:	ba 01       	movw	r22, r20
    22c8:	cf 01       	movw	r24, r30
    22ca:	0e 94 6d 09 	call	0x12da	; 0x12da <create_chain>
    22ce:	6e 87       	std	Y+14, r22	; 0x0e
    22d0:	7f 87       	std	Y+15, r23	; 0x0f
    22d2:	88 8b       	std	Y+16, r24	; 0x10
    22d4:	99 8b       	std	Y+17, r25	; 0x11
    22d6:	07 c0       	rjmp	.+14     	; 0x22e6 <f_write+0xf2>
    22d8:	4a 89       	ldd	r20, Y+18	; 0x12
    22da:	5b 89       	ldd	r21, Y+19	; 0x13
    22dc:	6c 89       	ldd	r22, Y+20	; 0x14
    22de:	7d 89       	ldd	r23, Y+21	; 0x15
    22e0:	cf 01       	movw	r24, r30
    22e2:	0e 94 6d 09 	call	0x12da	; 0x12da <create_chain>
    22e6:	61 15       	cp	r22, r1
    22e8:	71 05       	cpc	r23, r1
    22ea:	81 05       	cpc	r24, r1
    22ec:	91 05       	cpc	r25, r1
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <f_write+0xfe>
    22f0:	03 c1       	rjmp	.+518    	; 0x24f8 <f_write+0x304>
    22f2:	61 30       	cpi	r22, 0x01	; 1
    22f4:	71 05       	cpc	r23, r1
    22f6:	81 05       	cpc	r24, r1
    22f8:	91 05       	cpc	r25, r1
    22fa:	29 f4       	brne	.+10     	; 0x2306 <f_write+0x112>
    22fc:	8c 81       	ldd	r24, Y+4	; 0x04
    22fe:	80 68       	ori	r24, 0x80	; 128
    2300:	8c 83       	std	Y+4, r24	; 0x04
    2302:	82 e0       	ldi	r24, 0x02	; 2
    2304:	12 c1       	rjmp	.+548    	; 0x252a <f_write+0x336>
    2306:	6f 3f       	cpi	r22, 0xFF	; 255
    2308:	ff ef       	ldi	r31, 0xFF	; 255
    230a:	7f 07       	cpc	r23, r31
    230c:	8f 07       	cpc	r24, r31
    230e:	9f 07       	cpc	r25, r31
    2310:	29 f4       	brne	.+10     	; 0x231c <f_write+0x128>
    2312:	8c 81       	ldd	r24, Y+4	; 0x04
    2314:	80 68       	ori	r24, 0x80	; 128
    2316:	8c 83       	std	Y+4, r24	; 0x04
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	07 c1       	rjmp	.+526    	; 0x252a <f_write+0x336>
    231c:	6a 8b       	std	Y+18, r22	; 0x12
    231e:	7b 8b       	std	Y+19, r23	; 0x13
    2320:	8c 8b       	std	Y+20, r24	; 0x14
    2322:	9d 8b       	std	Y+21, r25	; 0x15
    2324:	e8 81       	ld	r30, Y
    2326:	f9 81       	ldd	r31, Y+1	; 0x01
    2328:	46 a5       	ldd	r20, Z+46	; 0x2e
    232a:	57 a5       	ldd	r21, Z+47	; 0x2f
    232c:	60 a9       	ldd	r22, Z+48	; 0x30
    232e:	71 a9       	ldd	r23, Z+49	; 0x31
    2330:	8e 89       	ldd	r24, Y+22	; 0x16
    2332:	9f 89       	ldd	r25, Y+23	; 0x17
    2334:	a8 8d       	ldd	r26, Y+24	; 0x18
    2336:	b9 8d       	ldd	r27, Y+25	; 0x19
    2338:	48 17       	cp	r20, r24
    233a:	59 07       	cpc	r21, r25
    233c:	6a 07       	cpc	r22, r26
    233e:	7b 07       	cpc	r23, r27
    2340:	69 f4       	brne	.+26     	; 0x235c <f_write+0x168>
    2342:	40 e0       	ldi	r20, 0x00	; 0
    2344:	50 e0       	ldi	r21, 0x00	; 0
    2346:	ba 01       	movw	r22, r20
    2348:	cf 01       	movw	r24, r30
    234a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    234e:	88 23       	and	r24, r24
    2350:	29 f0       	breq	.+10     	; 0x235c <f_write+0x168>
    2352:	8c 81       	ldd	r24, Y+4	; 0x04
    2354:	80 68       	ori	r24, 0x80	; 128
    2356:	8c 83       	std	Y+4, r24	; 0x04
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	e7 c0       	rjmp	.+462    	; 0x252a <f_write+0x336>
    235c:	28 80       	ld	r2, Y
    235e:	39 80       	ldd	r3, Y+1	; 0x01
    2360:	4a 89       	ldd	r20, Y+18	; 0x12
    2362:	5b 89       	ldd	r21, Y+19	; 0x13
    2364:	6c 89       	ldd	r22, Y+20	; 0x14
    2366:	7d 89       	ldd	r23, Y+21	; 0x15
    2368:	c1 01       	movw	r24, r2
    236a:	0e 94 8a 06 	call	0xd14	; 0xd14 <clust2sect>
    236e:	61 15       	cp	r22, r1
    2370:	71 05       	cpc	r23, r1
    2372:	81 05       	cpc	r24, r1
    2374:	91 05       	cpc	r25, r1
    2376:	29 f4       	brne	.+10     	; 0x2382 <f_write+0x18e>
    2378:	8c 81       	ldd	r24, Y+4	; 0x04
    237a:	80 68       	ori	r24, 0x80	; 128
    237c:	8c 83       	std	Y+4, r24	; 0x04
    237e:	82 e0       	ldi	r24, 0x02	; 2
    2380:	d4 c0       	rjmp	.+424    	; 0x252a <f_write+0x336>
    2382:	2b 01       	movw	r4, r22
    2384:	3c 01       	movw	r6, r24
    2386:	41 0e       	add	r4, r17
    2388:	51 1c       	adc	r5, r1
    238a:	61 1c       	adc	r6, r1
    238c:	71 1c       	adc	r7, r1
    238e:	76 01       	movw	r14, r12
    2390:	ef 2c       	mov	r14, r15
    2392:	ff 24       	eor	r15, r15
    2394:	e6 94       	lsr	r14
    2396:	e1 14       	cp	r14, r1
    2398:	f1 04       	cpc	r15, r1
    239a:	09 f4       	brne	.+2      	; 0x239e <f_write+0x1aa>
    239c:	41 c0       	rjmp	.+130    	; 0x2420 <f_write+0x22c>
    239e:	f1 01       	movw	r30, r2
    23a0:	42 81       	ldd	r20, Z+2	; 0x02
    23a2:	24 2f       	mov	r18, r20
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	c7 01       	movw	r24, r14
    23a8:	81 0f       	add	r24, r17
    23aa:	91 1d       	adc	r25, r1
    23ac:	28 17       	cp	r18, r24
    23ae:	39 07       	cpc	r19, r25
    23b0:	18 f4       	brcc	.+6      	; 0x23b8 <f_write+0x1c4>
    23b2:	79 01       	movw	r14, r18
    23b4:	e1 1a       	sub	r14, r17
    23b6:	f1 08       	sbc	r15, r1
    23b8:	0e 2d       	mov	r16, r14
    23ba:	a3 01       	movw	r20, r6
    23bc:	92 01       	movw	r18, r4
    23be:	b4 01       	movw	r22, r8
    23c0:	f1 01       	movw	r30, r2
    23c2:	81 81       	ldd	r24, Z+1	; 0x01
    23c4:	0e 94 c6 2b 	call	0x578c	; 0x578c <disk_write>
    23c8:	88 23       	and	r24, r24
    23ca:	29 f0       	breq	.+10     	; 0x23d6 <f_write+0x1e2>
    23cc:	8c 81       	ldd	r24, Y+4	; 0x04
    23ce:	80 68       	ori	r24, 0x80	; 128
    23d0:	8c 83       	std	Y+4, r24	; 0x04
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	aa c0       	rjmp	.+340    	; 0x252a <f_write+0x336>
    23d6:	e8 81       	ld	r30, Y
    23d8:	f9 81       	ldd	r31, Y+1	; 0x01
    23da:	86 a5       	ldd	r24, Z+46	; 0x2e
    23dc:	97 a5       	ldd	r25, Z+47	; 0x2f
    23de:	a0 a9       	ldd	r26, Z+48	; 0x30
    23e0:	b1 a9       	ldd	r27, Z+49	; 0x31
    23e2:	84 19       	sub	r24, r4
    23e4:	95 09       	sbc	r25, r5
    23e6:	a6 09       	sbc	r26, r6
    23e8:	b7 09       	sbc	r27, r7
    23ea:	a7 01       	movw	r20, r14
    23ec:	60 e0       	ldi	r22, 0x00	; 0
    23ee:	70 e0       	ldi	r23, 0x00	; 0
    23f0:	84 17       	cp	r24, r20
    23f2:	95 07       	cpc	r25, r21
    23f4:	a6 07       	cpc	r26, r22
    23f6:	b7 07       	cpc	r27, r23
    23f8:	78 f4       	brcc	.+30     	; 0x2418 <f_write+0x224>
    23fa:	98 2f       	mov	r25, r24
    23fc:	88 27       	eor	r24, r24
    23fe:	99 0f       	add	r25, r25
    2400:	b4 01       	movw	r22, r8
    2402:	68 0f       	add	r22, r24
    2404:	79 1f       	adc	r23, r25
    2406:	40 e0       	ldi	r20, 0x00	; 0
    2408:	52 e0       	ldi	r21, 0x02	; 2
    240a:	cf 01       	movw	r24, r30
    240c:	c2 96       	adiw	r24, 0x32	; 50
    240e:	0e 94 c5 01 	call	0x38a	; 0x38a <mem_cpy>
    2412:	e8 81       	ld	r30, Y
    2414:	f9 81       	ldd	r31, Y+1	; 0x01
    2416:	14 82       	std	Z+4, r1	; 0x04
    2418:	fe 2c       	mov	r15, r14
    241a:	ee 24       	eor	r14, r14
    241c:	ff 0c       	add	r15, r15
    241e:	53 c0       	rjmp	.+166    	; 0x24c6 <f_write+0x2d2>
    2420:	4e 81       	ldd	r20, Y+6	; 0x06
    2422:	5f 81       	ldd	r21, Y+7	; 0x07
    2424:	68 85       	ldd	r22, Y+8	; 0x08
    2426:	79 85       	ldd	r23, Y+9	; 0x09
    2428:	8a 85       	ldd	r24, Y+10	; 0x0a
    242a:	9b 85       	ldd	r25, Y+11	; 0x0b
    242c:	ac 85       	ldd	r26, Y+12	; 0x0c
    242e:	bd 85       	ldd	r27, Y+13	; 0x0d
    2430:	48 17       	cp	r20, r24
    2432:	59 07       	cpc	r21, r25
    2434:	6a 07       	cpc	r22, r26
    2436:	7b 07       	cpc	r23, r27
    2438:	98 f0       	brcs	.+38     	; 0x2460 <f_write+0x26c>
    243a:	40 e0       	ldi	r20, 0x00	; 0
    243c:	50 e0       	ldi	r21, 0x00	; 0
    243e:	ba 01       	movw	r22, r20
    2440:	c1 01       	movw	r24, r2
    2442:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    2446:	88 23       	and	r24, r24
    2448:	29 f0       	breq	.+10     	; 0x2454 <f_write+0x260>
    244a:	8c 81       	ldd	r24, Y+4	; 0x04
    244c:	80 68       	ori	r24, 0x80	; 128
    244e:	8c 83       	std	Y+4, r24	; 0x04
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	6b c0       	rjmp	.+214    	; 0x252a <f_write+0x336>
    2454:	e8 81       	ld	r30, Y
    2456:	f9 81       	ldd	r31, Y+1	; 0x01
    2458:	46 a6       	std	Z+46, r4	; 0x2e
    245a:	57 a6       	std	Z+47, r5	; 0x2f
    245c:	60 aa       	std	Z+48, r6	; 0x30
    245e:	71 aa       	std	Z+49, r7	; 0x31
    2460:	4e 8a       	std	Y+22, r4	; 0x16
    2462:	5f 8a       	std	Y+23, r5	; 0x17
    2464:	68 8e       	std	Y+24, r6	; 0x18
    2466:	79 8e       	std	Y+25, r7	; 0x19
    2468:	8e 81       	ldd	r24, Y+6	; 0x06
    246a:	9f 81       	ldd	r25, Y+7	; 0x07
    246c:	91 70       	andi	r25, 0x01	; 1
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	32 e0       	ldi	r19, 0x02	; 2
    2472:	79 01       	movw	r14, r18
    2474:	e8 1a       	sub	r14, r24
    2476:	f9 0a       	sbc	r15, r25
    2478:	ce 14       	cp	r12, r14
    247a:	df 04       	cpc	r13, r15
    247c:	08 f4       	brcc	.+2      	; 0x2480 <f_write+0x28c>
    247e:	76 01       	movw	r14, r12
    2480:	4e 89       	ldd	r20, Y+22	; 0x16
    2482:	5f 89       	ldd	r21, Y+23	; 0x17
    2484:	68 8d       	ldd	r22, Y+24	; 0x18
    2486:	79 8d       	ldd	r23, Y+25	; 0x19
    2488:	88 81       	ld	r24, Y
    248a:	99 81       	ldd	r25, Y+1	; 0x01
    248c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    2490:	88 23       	and	r24, r24
    2492:	29 f0       	breq	.+10     	; 0x249e <f_write+0x2aa>
    2494:	8c 81       	ldd	r24, Y+4	; 0x04
    2496:	80 68       	ori	r24, 0x80	; 128
    2498:	8c 83       	std	Y+4, r24	; 0x04
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	46 c0       	rjmp	.+140    	; 0x252a <f_write+0x336>
    249e:	8e 81       	ldd	r24, Y+6	; 0x06
    24a0:	9f 81       	ldd	r25, Y+7	; 0x07
    24a2:	a8 85       	ldd	r26, Y+8	; 0x08
    24a4:	b9 85       	ldd	r27, Y+9	; 0x09
    24a6:	91 70       	andi	r25, 0x01	; 1
    24a8:	aa 27       	eor	r26, r26
    24aa:	bb 27       	eor	r27, r27
    24ac:	c2 96       	adiw	r24, 0x32	; 50
    24ae:	28 81       	ld	r18, Y
    24b0:	39 81       	ldd	r19, Y+1	; 0x01
    24b2:	a7 01       	movw	r20, r14
    24b4:	b4 01       	movw	r22, r8
    24b6:	82 0f       	add	r24, r18
    24b8:	93 1f       	adc	r25, r19
    24ba:	0e 94 c5 01 	call	0x38a	; 0x38a <mem_cpy>
    24be:	e8 81       	ld	r30, Y
    24c0:	f9 81       	ldd	r31, Y+1	; 0x01
    24c2:	21 e0       	ldi	r18, 0x01	; 1
    24c4:	24 83       	std	Z+4, r18	; 0x04
    24c6:	8e 0c       	add	r8, r14
    24c8:	9f 1c       	adc	r9, r15
    24ca:	8e 81       	ldd	r24, Y+6	; 0x06
    24cc:	9f 81       	ldd	r25, Y+7	; 0x07
    24ce:	a8 85       	ldd	r26, Y+8	; 0x08
    24d0:	b9 85       	ldd	r27, Y+9	; 0x09
    24d2:	8e 0d       	add	r24, r14
    24d4:	9f 1d       	adc	r25, r15
    24d6:	a1 1d       	adc	r26, r1
    24d8:	b1 1d       	adc	r27, r1
    24da:	8e 83       	std	Y+6, r24	; 0x06
    24dc:	9f 83       	std	Y+7, r25	; 0x07
    24de:	a8 87       	std	Y+8, r26	; 0x08
    24e0:	b9 87       	std	Y+9, r27	; 0x09
    24e2:	f5 01       	movw	r30, r10
    24e4:	80 81       	ld	r24, Z
    24e6:	91 81       	ldd	r25, Z+1	; 0x01
    24e8:	8e 0d       	add	r24, r14
    24ea:	9f 1d       	adc	r25, r15
    24ec:	91 83       	std	Z+1, r25	; 0x01
    24ee:	80 83       	st	Z, r24
    24f0:	ce 18       	sub	r12, r14
    24f2:	df 08       	sbc	r13, r15
    24f4:	09 f0       	breq	.+2      	; 0x24f8 <f_write+0x304>
    24f6:	b9 ce       	rjmp	.-654    	; 0x226a <f_write+0x76>
    24f8:	8e 81       	ldd	r24, Y+6	; 0x06
    24fa:	9f 81       	ldd	r25, Y+7	; 0x07
    24fc:	a8 85       	ldd	r26, Y+8	; 0x08
    24fe:	b9 85       	ldd	r27, Y+9	; 0x09
    2500:	4a 85       	ldd	r20, Y+10	; 0x0a
    2502:	5b 85       	ldd	r21, Y+11	; 0x0b
    2504:	6c 85       	ldd	r22, Y+12	; 0x0c
    2506:	7d 85       	ldd	r23, Y+13	; 0x0d
    2508:	48 17       	cp	r20, r24
    250a:	59 07       	cpc	r21, r25
    250c:	6a 07       	cpc	r22, r26
    250e:	7b 07       	cpc	r23, r27
    2510:	20 f4       	brcc	.+8      	; 0x251a <f_write+0x326>
    2512:	8a 87       	std	Y+10, r24	; 0x0a
    2514:	9b 87       	std	Y+11, r25	; 0x0b
    2516:	ac 87       	std	Y+12, r26	; 0x0c
    2518:	bd 87       	std	Y+13, r27	; 0x0d
    251a:	8c 81       	ldd	r24, Y+4	; 0x04
    251c:	80 62       	ori	r24, 0x20	; 32
    251e:	8c 83       	std	Y+4, r24	; 0x04
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	03 c0       	rjmp	.+6      	; 0x252a <f_write+0x336>
    2524:	82 e0       	ldi	r24, 0x02	; 2
    2526:	01 c0       	rjmp	.+2      	; 0x252a <f_write+0x336>
    2528:	87 e0       	ldi	r24, 0x07	; 7
    252a:	df 91       	pop	r29
    252c:	cf 91       	pop	r28
    252e:	1f 91       	pop	r17
    2530:	0f 91       	pop	r16
    2532:	ff 90       	pop	r15
    2534:	ef 90       	pop	r14
    2536:	df 90       	pop	r13
    2538:	cf 90       	pop	r12
    253a:	bf 90       	pop	r11
    253c:	af 90       	pop	r10
    253e:	9f 90       	pop	r9
    2540:	8f 90       	pop	r8
    2542:	7f 90       	pop	r7
    2544:	6f 90       	pop	r6
    2546:	5f 90       	pop	r5
    2548:	4f 90       	pop	r4
    254a:	3f 90       	pop	r3
    254c:	2f 90       	pop	r2
    254e:	08 95       	ret

00002550 <f_sync>:
    2550:	0f 93       	push	r16
    2552:	1f 93       	push	r17
    2554:	cf 93       	push	r28
    2556:	df 93       	push	r29
    2558:	ec 01       	movw	r28, r24
    255a:	6a 81       	ldd	r22, Y+2	; 0x02
    255c:	7b 81       	ldd	r23, Y+3	; 0x03
    255e:	88 81       	ld	r24, Y
    2560:	99 81       	ldd	r25, Y+1	; 0x01
    2562:	0e 94 25 03 	call	0x64a	; 0x64a <validate>
    2566:	81 11       	cpse	r24, r1
    2568:	37 c0       	rjmp	.+110    	; 0x25d8 <f_sync+0x88>
    256a:	9c 81       	ldd	r25, Y+4	; 0x04
    256c:	95 ff       	sbrs	r25, 5
    256e:	34 c0       	rjmp	.+104    	; 0x25d8 <f_sync+0x88>
    2570:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2572:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2574:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2576:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2578:	88 81       	ld	r24, Y
    257a:	99 81       	ldd	r25, Y+1	; 0x01
    257c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <move_window>
    2580:	81 11       	cpse	r24, r1
    2582:	2a c0       	rjmp	.+84     	; 0x25d8 <f_sync+0x88>
    2584:	0e 8d       	ldd	r16, Y+30	; 0x1e
    2586:	1f 8d       	ldd	r17, Y+31	; 0x1f
    2588:	f8 01       	movw	r30, r16
    258a:	83 85       	ldd	r24, Z+11	; 0x0b
    258c:	80 62       	ori	r24, 0x20	; 32
    258e:	83 87       	std	Z+11, r24	; 0x0b
    2590:	8a 85       	ldd	r24, Y+10	; 0x0a
    2592:	9b 85       	ldd	r25, Y+11	; 0x0b
    2594:	ac 85       	ldd	r26, Y+12	; 0x0c
    2596:	bd 85       	ldd	r27, Y+13	; 0x0d
    2598:	84 8f       	std	Z+28, r24	; 0x1c
    259a:	95 8f       	std	Z+29, r25	; 0x1d
    259c:	a6 8f       	std	Z+30, r26	; 0x1e
    259e:	b7 8f       	std	Z+31, r27	; 0x1f
    25a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    25a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    25a4:	93 8f       	std	Z+27, r25	; 0x1b
    25a6:	82 8f       	std	Z+26, r24	; 0x1a
    25a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    25aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    25ac:	a8 89       	ldd	r26, Y+16	; 0x10
    25ae:	b9 89       	ldd	r27, Y+17	; 0x11
    25b0:	b5 8b       	std	Z+21, r27	; 0x15
    25b2:	a4 8b       	std	Z+20, r26	; 0x14
    25b4:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <get_fattime>
    25b8:	f8 01       	movw	r30, r16
    25ba:	66 8b       	std	Z+22, r22	; 0x16
    25bc:	77 8b       	std	Z+23, r23	; 0x17
    25be:	80 8f       	std	Z+24, r24	; 0x18
    25c0:	91 8f       	std	Z+25, r25	; 0x19
    25c2:	8c 81       	ldd	r24, Y+4	; 0x04
    25c4:	8f 7d       	andi	r24, 0xDF	; 223
    25c6:	8c 83       	std	Y+4, r24	; 0x04
    25c8:	e8 81       	ld	r30, Y
    25ca:	f9 81       	ldd	r31, Y+1	; 0x01
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	84 83       	std	Z+4, r24	; 0x04
    25d0:	88 81       	ld	r24, Y
    25d2:	99 81       	ldd	r25, Y+1	; 0x01
    25d4:	0e 94 25 06 	call	0xc4a	; 0xc4a <sync>
    25d8:	df 91       	pop	r29
    25da:	cf 91       	pop	r28
    25dc:	1f 91       	pop	r17
    25de:	0f 91       	pop	r16
    25e0:	08 95       	ret

000025e2 <f_close>:
    25e2:	cf 93       	push	r28
    25e4:	df 93       	push	r29
    25e6:	ec 01       	movw	r28, r24
    25e8:	0e 94 a8 12 	call	0x2550	; 0x2550 <f_sync>
    25ec:	81 11       	cpse	r24, r1
    25ee:	02 c0       	rjmp	.+4      	; 0x25f4 <f_close+0x12>
    25f0:	19 82       	std	Y+1, r1	; 0x01
    25f2:	18 82       	st	Y, r1
    25f4:	df 91       	pop	r29
    25f6:	cf 91       	pop	r28
    25f8:	08 95       	ret

000025fa <f_getcwd>:
#if _FS_RPATH >= 2
FRESULT f_getcwd (
	TCHAR *path,	/* Pointer to the directory path */
	UINT sz_path	/* Size of path */
)
{
    25fa:	4f 92       	push	r4
    25fc:	5f 92       	push	r5
    25fe:	6f 92       	push	r6
    2600:	7f 92       	push	r7
    2602:	9f 92       	push	r9
    2604:	af 92       	push	r10
    2606:	bf 92       	push	r11
    2608:	cf 92       	push	r12
    260a:	df 92       	push	r13
    260c:	ef 92       	push	r14
    260e:	ff 92       	push	r15
    2610:	0f 93       	push	r16
    2612:	1f 93       	push	r17
    2614:	cf 93       	push	r28
    2616:	df 93       	push	r29
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
    261c:	ea 97       	sbiw	r28, 0x3a	; 58
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	f8 94       	cli
    2622:	de bf       	out	0x3e, r29	; 62
    2624:	0f be       	out	0x3f, r0	; 63
    2626:	cd bf       	out	0x3d, r28	; 61
    2628:	9a af       	std	Y+58, r25	; 0x3a
    262a:	89 af       	std	Y+57, r24	; 0x39
    262c:	5b 01       	movw	r10, r22
	TCHAR *tp;
	FILINFO fno;
	DEF_NAMEBUF;


	*path = 0;
    262e:	fc 01       	movw	r30, r24
    2630:	10 82       	st	Z, r1
	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
    2632:	40 e0       	ldi	r20, 0x00	; 0
    2634:	be 01       	movw	r22, r28
    2636:	6f 5f       	subi	r22, 0xFF	; 255
    2638:	7f 4f       	sbci	r23, 0xFF	; 255
    263a:	ce 01       	movw	r24, r28
    263c:	c9 96       	adiw	r24, 0x39	; 57
    263e:	0e 94 3f 03 	call	0x67e	; 0x67e <chk_mounted>
    2642:	98 2e       	mov	r9, r24
	if (res == FR_OK) {
    2644:	81 11       	cpse	r24, r1
    2646:	03 c1       	rjmp	.+518    	; 0x284e <f_getcwd+0x254>
		INIT_BUF(dj);
    2648:	ce 01       	movw	r24, r28
    264a:	8d 96       	adiw	r24, 0x2d	; 45
    264c:	9e 8b       	std	Y+22, r25	; 0x16
    264e:	8d 8b       	std	Y+21, r24	; 0x15
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
    2650:	e9 81       	ldd	r30, Y+1	; 0x01
    2652:	fa 81       	ldd	r31, Y+2	; 0x02
    2654:	46 88       	ldd	r4, Z+22	; 0x16
    2656:	57 88       	ldd	r5, Z+23	; 0x17
    2658:	60 8c       	ldd	r6, Z+24	; 0x18
    265a:	71 8c       	ldd	r7, Z+25	; 0x19
    265c:	4f 82       	std	Y+7, r4	; 0x07
    265e:	58 86       	std	Y+8, r5	; 0x08
    2660:	69 86       	std	Y+9, r6	; 0x09
    2662:	7a 86       	std	Y+10, r7	; 0x0a
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
    2664:	41 14       	cp	r4, r1
    2666:	51 04       	cpc	r5, r1
    2668:	61 04       	cpc	r6, r1
    266a:	71 04       	cpc	r7, r1
    266c:	09 f4       	brne	.+2      	; 0x2670 <f_getcwd+0x76>
    266e:	e6 c0       	rjmp	.+460    	; 0x283c <f_getcwd+0x242>
    2670:	65 01       	movw	r12, r10
    2672:	7e 01       	movw	r14, r28
    2674:	f0 e2       	ldi	r31, 0x20	; 32
    2676:	ef 0e       	add	r14, r31
    2678:	f1 1c       	adc	r15, r1
			for (n = 0; tp[n]; n++) ;
			if (i < n + 3) {
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
    267a:	0f e2       	ldi	r16, 0x2F	; 47
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
			res = dir_sdi(&dj, 1);			/* Get parent dir */
    267c:	61 e0       	ldi	r22, 0x01	; 1
    267e:	70 e0       	ldi	r23, 0x00	; 0
    2680:	ce 01       	movw	r24, r28
    2682:	01 96       	adiw	r24, 0x01	; 1
    2684:	0e 94 95 07 	call	0xf2a	; 0xf2a <dir_sdi>
			if (res != FR_OK) break;
    2688:	81 11       	cpse	r24, r1
    268a:	b2 c0       	rjmp	.+356    	; 0x27f0 <f_getcwd+0x1f6>
			res = dir_read(&dj);
    268c:	ce 01       	movw	r24, r28
    268e:	01 96       	adiw	r24, 0x01	; 1
    2690:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <dir_read>
			if (res != FR_OK) break;
    2694:	81 11       	cpse	r24, r1
    2696:	ae c0       	rjmp	.+348    	; 0x27f4 <f_getcwd+0x1fa>
			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
    2698:	eb 89       	ldd	r30, Y+19	; 0x13
    269a:	fc 89       	ldd	r31, Y+20	; 0x14
    269c:	84 89       	ldd	r24, Z+20	; 0x14
    269e:	95 89       	ldd	r25, Z+21	; 0x15
    26a0:	a0 e0       	ldi	r26, 0x00	; 0
    26a2:	b0 e0       	ldi	r27, 0x00	; 0
    26a4:	dc 01       	movw	r26, r24
    26a6:	99 27       	eor	r25, r25
    26a8:	88 27       	eor	r24, r24
    26aa:	42 8d       	ldd	r20, Z+26	; 0x1a
    26ac:	53 8d       	ldd	r21, Z+27	; 0x1b
    26ae:	60 e0       	ldi	r22, 0x00	; 0
    26b0:	70 e0       	ldi	r23, 0x00	; 0
    26b2:	84 2b       	or	r24, r20
    26b4:	95 2b       	or	r25, r21
    26b6:	a6 2b       	or	r26, r22
    26b8:	b7 2b       	or	r27, r23
    26ba:	8f 83       	std	Y+7, r24	; 0x07
    26bc:	98 87       	std	Y+8, r25	; 0x08
    26be:	a9 87       	std	Y+9, r26	; 0x09
    26c0:	ba 87       	std	Y+10, r27	; 0x0a
			res = dir_sdi(&dj, 0);
    26c2:	60 e0       	ldi	r22, 0x00	; 0
    26c4:	70 e0       	ldi	r23, 0x00	; 0
    26c6:	ce 01       	movw	r24, r28
    26c8:	01 96       	adiw	r24, 0x01	; 1
    26ca:	0e 94 95 07 	call	0xf2a	; 0xf2a <dir_sdi>
			if (res != FR_OK) break;
    26ce:	81 11       	cpse	r24, r1
    26d0:	93 c0       	rjmp	.+294    	; 0x27f8 <f_getcwd+0x1fe>
			do {							/* Find the entry links to the child dir */
				res = dir_read(&dj);
    26d2:	ce 01       	movw	r24, r28
    26d4:	01 96       	adiw	r24, 0x01	; 1
    26d6:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <dir_read>
    26da:	18 2f       	mov	r17, r24
				if (res != FR_OK) break;
    26dc:	81 11       	cpse	r24, r1
    26de:	9a c0       	rjmp	.+308    	; 0x2814 <f_getcwd+0x21a>
				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
    26e0:	eb 89       	ldd	r30, Y+19	; 0x13
    26e2:	fc 89       	ldd	r31, Y+20	; 0x14
    26e4:	84 89       	ldd	r24, Z+20	; 0x14
    26e6:	95 89       	ldd	r25, Z+21	; 0x15
    26e8:	a0 e0       	ldi	r26, 0x00	; 0
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	dc 01       	movw	r26, r24
    26ee:	99 27       	eor	r25, r25
    26f0:	88 27       	eor	r24, r24
    26f2:	42 8d       	ldd	r20, Z+26	; 0x1a
    26f4:	53 8d       	ldd	r21, Z+27	; 0x1b
    26f6:	60 e0       	ldi	r22, 0x00	; 0
    26f8:	70 e0       	ldi	r23, 0x00	; 0
    26fa:	84 2b       	or	r24, r20
    26fc:	95 2b       	or	r25, r21
    26fe:	a6 2b       	or	r26, r22
    2700:	b7 2b       	or	r27, r23
    2702:	84 15       	cp	r24, r4
    2704:	95 05       	cpc	r25, r5
    2706:	a6 05       	cpc	r26, r6
    2708:	b7 05       	cpc	r27, r7
    270a:	09 f4       	brne	.+2      	; 0x270e <f_getcwd+0x114>
    270c:	87 c0       	rjmp	.+270    	; 0x281c <f_getcwd+0x222>
				res = dir_next(&dj, 0);	
    270e:	60 e0       	ldi	r22, 0x00	; 0
    2710:	70 e0       	ldi	r23, 0x00	; 0
    2712:	ce 01       	movw	r24, r28
    2714:	01 96       	adiw	r24, 0x01	; 1
    2716:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <dir_next>
    271a:	18 2f       	mov	r17, r24
			} while (res == FR_OK);
    271c:	88 23       	and	r24, r24
    271e:	c9 f2       	breq	.-78     	; 0x26d2 <f_getcwd+0xd8>
    2720:	79 c0       	rjmp	.+242    	; 0x2814 <f_getcwd+0x21a>
    2722:	de 01       	movw	r26, r28
    2724:	91 96       	adiw	r26, 0x21	; 33
			fno.lfsize = i;
#endif
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
    2726:	e0 e0       	ldi	r30, 0x00	; 0
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	01 c0       	rjmp	.+2      	; 0x272e <f_getcwd+0x134>
    272c:	f9 01       	movw	r30, r18
    272e:	9f 01       	movw	r18, r30
    2730:	2f 5f       	subi	r18, 0xFF	; 255
    2732:	3f 4f       	sbci	r19, 0xFF	; 255
    2734:	8d 91       	ld	r24, X+
    2736:	81 11       	cpse	r24, r1
    2738:	f9 cf       	rjmp	.-14     	; 0x272c <f_getcwd+0x132>
			if (i < n + 3) {
    273a:	cf 01       	movw	r24, r30
    273c:	04 96       	adiw	r24, 0x04	; 4
    273e:	c8 16       	cp	r12, r24
    2740:	d9 06       	cpc	r13, r25
    2742:	08 f4       	brcc	.+2      	; 0x2746 <f_getcwd+0x14c>
    2744:	5b c0       	rjmp	.+182    	; 0x27fc <f_getcwd+0x202>
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
    2746:	21 15       	cp	r18, r1
    2748:	31 05       	cpc	r19, r1
    274a:	a1 f0       	breq	.+40     	; 0x2774 <f_getcwd+0x17a>
    274c:	3a 96       	adiw	r30, 0x0a	; 10
    274e:	87 e1       	ldi	r24, 0x17	; 23
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	8c 0f       	add	r24, r28
    2754:	9d 1f       	adc	r25, r29
    2756:	e8 0f       	add	r30, r24
    2758:	f9 1f       	adc	r31, r25
    275a:	c6 01       	movw	r24, r12
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	42 91       	ld	r20, -Z
    2760:	a9 ad       	ldd	r26, Y+57	; 0x39
    2762:	ba ad       	ldd	r27, Y+58	; 0x3a
    2764:	a8 0f       	add	r26, r24
    2766:	b9 1f       	adc	r27, r25
    2768:	4c 93       	st	X, r20
    276a:	ee 15       	cp	r30, r14
    276c:	ff 05       	cpc	r31, r15
    276e:	b1 f7       	brne	.-20     	; 0x275c <f_getcwd+0x162>
    2770:	c2 1a       	sub	r12, r18
    2772:	d3 0a       	sbc	r13, r19
			path[--i] = '/';
    2774:	91 e0       	ldi	r25, 0x01	; 1
    2776:	c9 1a       	sub	r12, r25
    2778:	d1 08       	sbc	r13, r1
    277a:	e9 ad       	ldd	r30, Y+57	; 0x39
    277c:	fa ad       	ldd	r31, Y+58	; 0x3a
    277e:	ec 0d       	add	r30, r12
    2780:	fd 1d       	adc	r31, r13
    2782:	00 83       	st	Z, r16
	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
    2784:	4f 80       	ldd	r4, Y+7	; 0x07
    2786:	58 84       	ldd	r5, Y+8	; 0x08
    2788:	69 84       	ldd	r6, Y+9	; 0x09
    278a:	7a 84       	ldd	r7, Y+10	; 0x0a
    278c:	41 14       	cp	r4, r1
    278e:	51 04       	cpc	r5, r1
    2790:	61 04       	cpc	r6, r1
    2792:	71 04       	cpc	r7, r1
    2794:	09 f0       	breq	.+2      	; 0x2798 <f_getcwd+0x19e>
    2796:	72 cf       	rjmp	.-284    	; 0x267c <f_getcwd+0x82>
    2798:	1d c0       	rjmp	.+58     	; 0x27d4 <f_getcwd+0x1da>
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
    279a:	a9 ad       	ldd	r26, Y+57	; 0x39
    279c:	ba ad       	ldd	r27, Y+58	; 0x3a
				res = dir_read(&dj);
				if (res != FR_OK) break;
				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
				res = dir_next(&dj, 0);	
			} while (res == FR_OK);
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
    279e:	68 94       	set
    27a0:	99 24       	eor	r9, r9
    27a2:	91 f8       	bld	r9, 1
    27a4:	15 c0       	rjmp	.+42     	; 0x27d0 <f_getcwd+0x1d6>
		tp = path;
		if (res == FR_OK) {
			*tp++ = '0' + CurrVol;			/* Put drive number */
			*tp++ = ':';
			if (i == sz_path) {				/* Root-dir */
				*tp++ = '/';
    27a6:	df 01       	movw	r26, r30
    27a8:	13 96       	adiw	r26, 0x03	; 3
    27aa:	8f e2       	ldi	r24, 0x2F	; 47
    27ac:	82 83       	std	Z+2, r24	; 0x02
    27ae:	10 c0       	rjmp	.+32     	; 0x27d0 <f_getcwd+0x1d6>
			} else {						/* Sub-dir */
				do		/* Add stacked path str */
					*tp++ = path[i++];
    27b0:	11 96       	adiw	r26, 0x01	; 1
    27b2:	e9 ad       	ldd	r30, Y+57	; 0x39
    27b4:	fa ad       	ldd	r31, Y+58	; 0x3a
    27b6:	ec 0d       	add	r30, r12
    27b8:	fd 1d       	adc	r31, r13
    27ba:	80 81       	ld	r24, Z
    27bc:	fd 01       	movw	r30, r26
    27be:	31 97       	sbiw	r30, 0x01	; 1
    27c0:	80 83       	st	Z, r24
    27c2:	f6 01       	movw	r30, r12
    27c4:	31 96       	adiw	r30, 0x01	; 1
    27c6:	6f 01       	movw	r12, r30
				while (i < sz_path);
    27c8:	ea 15       	cp	r30, r10
    27ca:	fb 05       	cpc	r31, r11
    27cc:	88 f3       	brcs	.-30     	; 0x27b0 <f_getcwd+0x1b6>
    27ce:	91 2e       	mov	r9, r17
			}
		}
		*tp = 0;
    27d0:	1c 92       	st	X, r1
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
    27d2:	3d c0       	rjmp	.+122    	; 0x284e <f_getcwd+0x254>
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
    27d4:	e9 ad       	ldd	r30, Y+57	; 0x39
    27d6:	fa ad       	ldd	r31, Y+58	; 0x3a
		if (res == FR_OK) {
			*tp++ = '0' + CurrVol;			/* Put drive number */
    27d8:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
    27dc:	80 5d       	subi	r24, 0xD0	; 208
    27de:	80 83       	st	Z, r24
			*tp++ = ':';
    27e0:	8a e3       	ldi	r24, 0x3A	; 58
    27e2:	81 83       	std	Z+1, r24	; 0x01
			if (i == sz_path) {				/* Root-dir */
    27e4:	ac 14       	cp	r10, r12
    27e6:	bd 04       	cpc	r11, r13
    27e8:	f1 f2       	breq	.-68     	; 0x27a6 <f_getcwd+0x1ac>
			path[--i] = '/';
		}
		tp = path;
		if (res == FR_OK) {
			*tp++ = '0' + CurrVol;			/* Put drive number */
			*tp++ = ':';
    27ea:	df 01       	movw	r26, r30
    27ec:	12 96       	adiw	r26, 0x02	; 2
    27ee:	e0 cf       	rjmp	.-64     	; 0x27b0 <f_getcwd+0x1b6>
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
			res = dir_sdi(&dj, 1);			/* Get parent dir */
    27f0:	98 2e       	mov	r9, r24
    27f2:	0d c0       	rjmp	.+26     	; 0x280e <f_getcwd+0x214>
			if (res != FR_OK) break;
			res = dir_read(&dj);
    27f4:	98 2e       	mov	r9, r24
    27f6:	0b c0       	rjmp	.+22     	; 0x280e <f_getcwd+0x214>
			if (res != FR_OK) break;
			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
			res = dir_sdi(&dj, 0);
    27f8:	98 2e       	mov	r9, r24
    27fa:	09 c0       	rjmp	.+18     	; 0x280e <f_getcwd+0x214>
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
			if (i < n + 3) {
				res = FR_NOT_ENOUGH_CORE; break;
    27fc:	0f 2e       	mov	r0, r31
    27fe:	f1 e1       	ldi	r31, 0x11	; 17
    2800:	9f 2e       	mov	r9, r31
    2802:	f0 2d       	mov	r31, r0
    2804:	04 c0       	rjmp	.+8      	; 0x280e <f_getcwd+0x214>
    2806:	0f 2e       	mov	r0, r31
    2808:	f1 e1       	ldi	r31, 0x11	; 17
    280a:	9f 2e       	mov	r9, r31
    280c:	f0 2d       	mov	r31, r0
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
    280e:	a9 ad       	ldd	r26, Y+57	; 0x39
    2810:	ba ad       	ldd	r27, Y+58	; 0x3a
    2812:	de cf       	rjmp	.-68     	; 0x27d0 <f_getcwd+0x1d6>
				res = dir_read(&dj);
				if (res != FR_OK) break;
				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
				res = dir_next(&dj, 0);	
			} while (res == FR_OK);
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
    2814:	14 30       	cpi	r17, 0x04	; 4
    2816:	09 f2       	breq	.-126    	; 0x279a <f_getcwd+0x1a0>
    2818:	91 2e       	mov	r9, r17
    281a:	f9 cf       	rjmp	.-14     	; 0x280e <f_getcwd+0x214>
			if (res != FR_OK) break;
#if _USE_LFN
			fno.lfname = path;
			fno.lfsize = i;
#endif
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
    281c:	be 01       	movw	r22, r28
    281e:	69 5e       	subi	r22, 0xE9	; 233
    2820:	7f 4f       	sbci	r23, 0xFF	; 255
    2822:	ce 01       	movw	r24, r28
    2824:	01 96       	adiw	r24, 0x01	; 1
    2826:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <get_fileinfo>
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
    282a:	88 a1       	ldd	r24, Y+32	; 0x20
    282c:	81 11       	cpse	r24, r1
    282e:	79 cf       	rjmp	.-270    	; 0x2722 <f_getcwd+0x128>
			if (i < n + 3) {
    2830:	f3 e0       	ldi	r31, 0x03	; 3
    2832:	cf 16       	cp	r12, r31
    2834:	d1 04       	cpc	r13, r1
    2836:	08 f0       	brcs	.+2      	; 0x283a <f_getcwd+0x240>
    2838:	9d cf       	rjmp	.-198    	; 0x2774 <f_getcwd+0x17a>
    283a:	e5 cf       	rjmp	.-54     	; 0x2806 <f_getcwd+0x20c>
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
    283c:	e9 ad       	ldd	r30, Y+57	; 0x39
    283e:	fa ad       	ldd	r31, Y+58	; 0x3a
		if (res == FR_OK) {
			*tp++ = '0' + CurrVol;			/* Put drive number */
    2840:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
    2844:	80 5d       	subi	r24, 0xD0	; 208
    2846:	80 83       	st	Z, r24
			*tp++ = ':';
    2848:	8a e3       	ldi	r24, 0x3A	; 58
    284a:	81 83       	std	Z+1, r24	; 0x01
    284c:	ac cf       	rjmp	.-168    	; 0x27a6 <f_getcwd+0x1ac>
		*tp = 0;
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    284e:	89 2d       	mov	r24, r9
    2850:	ea 96       	adiw	r28, 0x3a	; 58
    2852:	0f b6       	in	r0, 0x3f	; 63
    2854:	f8 94       	cli
    2856:	de bf       	out	0x3e, r29	; 62
    2858:	0f be       	out	0x3f, r0	; 63
    285a:	cd bf       	out	0x3d, r28	; 61
    285c:	df 91       	pop	r29
    285e:	cf 91       	pop	r28
    2860:	1f 91       	pop	r17
    2862:	0f 91       	pop	r16
    2864:	ff 90       	pop	r15
    2866:	ef 90       	pop	r14
    2868:	df 90       	pop	r13
    286a:	cf 90       	pop	r12
    286c:	bf 90       	pop	r11
    286e:	af 90       	pop	r10
    2870:	9f 90       	pop	r9
    2872:	7f 90       	pop	r7
    2874:	6f 90       	pop	r6
    2876:	5f 90       	pop	r5
    2878:	4f 90       	pop	r4
    287a:	08 95       	ret

0000287c <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    287c:	4f 92       	push	r4
    287e:	5f 92       	push	r5
    2880:	6f 92       	push	r6
    2882:	7f 92       	push	r7
    2884:	8f 92       	push	r8
    2886:	9f 92       	push	r9
    2888:	af 92       	push	r10
    288a:	bf 92       	push	r11
    288c:	cf 92       	push	r12
    288e:	df 92       	push	r13
    2890:	ef 92       	push	r14
    2892:	ff 92       	push	r15
    2894:	0f 93       	push	r16
    2896:	1f 93       	push	r17
    2898:	cf 93       	push	r28
    289a:	df 93       	push	r29
    289c:	00 d0       	rcall	.+0      	; 0x289e <f_lseek+0x22>
    289e:	00 d0       	rcall	.+0      	; 0x28a0 <f_lseek+0x24>
    28a0:	00 d0       	rcall	.+0      	; 0x28a2 <f_lseek+0x26>
    28a2:	cd b7       	in	r28, 0x3d	; 61
    28a4:	de b7       	in	r29, 0x3e	; 62
    28a6:	9e 83       	std	Y+6, r25	; 0x06
    28a8:	8d 83       	std	Y+5, r24	; 0x05
    28aa:	6a 01       	movw	r12, r20
    28ac:	7b 01       	movw	r14, r22
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    28ae:	dc 01       	movw	r26, r24
    28b0:	12 96       	adiw	r26, 0x02	; 2
    28b2:	6d 91       	ld	r22, X+
    28b4:	7c 91       	ld	r23, X
    28b6:	13 97       	sbiw	r26, 0x03	; 3
    28b8:	8d 91       	ld	r24, X+
    28ba:	9c 91       	ld	r25, X
    28bc:	0e 94 25 03 	call	0x64a	; 0x64a <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    28c0:	81 11       	cpse	r24, r1
    28c2:	9d c1       	rjmp	.+826    	; 0x2bfe <f_lseek+0x382>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    28c4:	ed 81       	ldd	r30, Y+5	; 0x05
    28c6:	fe 81       	ldd	r31, Y+6	; 0x06
    28c8:	84 81       	ldd	r24, Z+4	; 0x04
    28ca:	88 23       	and	r24, r24
    28cc:	0c f4       	brge	.+2      	; 0x28d0 <f_lseek+0x54>
    28ce:	92 c1       	rjmp	.+804    	; 0x2bf4 <f_lseek+0x378>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    28d0:	42 85       	ldd	r20, Z+10	; 0x0a
    28d2:	53 85       	ldd	r21, Z+11	; 0x0b
    28d4:	64 85       	ldd	r22, Z+12	; 0x0c
    28d6:	75 85       	ldd	r23, Z+13	; 0x0d
    28d8:	4c 15       	cp	r20, r12
    28da:	5d 05       	cpc	r21, r13
    28dc:	6e 05       	cpc	r22, r14
    28de:	7f 05       	cpc	r23, r15
    28e0:	20 f4       	brcc	.+8      	; 0x28ea <f_lseek+0x6e>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    28e2:	81 fd       	sbrc	r24, 1
    28e4:	02 c0       	rjmp	.+4      	; 0x28ea <f_lseek+0x6e>
#endif
			) ofs = fp->fsize;
    28e6:	6a 01       	movw	r12, r20
    28e8:	7b 01       	movw	r14, r22

		ifptr = fp->fptr;
    28ea:	ad 81       	ldd	r26, Y+5	; 0x05
    28ec:	be 81       	ldd	r27, Y+6	; 0x06
    28ee:	16 96       	adiw	r26, 0x06	; 6
    28f0:	4d 90       	ld	r4, X+
    28f2:	5d 90       	ld	r5, X+
    28f4:	6d 90       	ld	r6, X+
    28f6:	7c 90       	ld	r7, X
    28f8:	19 97       	sbiw	r26, 0x09	; 9
		fp->fptr = nsect = 0;
    28fa:	fd 01       	movw	r30, r26
    28fc:	16 82       	std	Z+6, r1	; 0x06
    28fe:	17 82       	std	Z+7, r1	; 0x07
    2900:	10 86       	std	Z+8, r1	; 0x08
    2902:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    2904:	c1 14       	cp	r12, r1
    2906:	d1 04       	cpc	r13, r1
    2908:	e1 04       	cpc	r14, r1
    290a:	f1 04       	cpc	r15, r1
    290c:	09 f4       	brne	.+2      	; 0x2910 <f_lseek+0x94>
    290e:	74 c1       	rjmp	.+744    	; 0x2bf8 <f_lseek+0x37c>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    2910:	00 81       	ld	r16, Z
    2912:	11 81       	ldd	r17, Z+1	; 0x01
    2914:	d8 01       	movw	r26, r16
    2916:	12 96       	adiw	r26, 0x02	; 2
    2918:	8c 90       	ld	r8, X
    291a:	91 2c       	mov	r9, r1
    291c:	a1 2c       	mov	r10, r1
    291e:	b1 2c       	mov	r11, r1
    2920:	07 2e       	mov	r0, r23
    2922:	79 e0       	ldi	r23, 0x09	; 9
    2924:	88 0c       	add	r8, r8
    2926:	99 1c       	adc	r9, r9
    2928:	aa 1c       	adc	r10, r10
    292a:	bb 1c       	adc	r11, r11
    292c:	7a 95       	dec	r23
    292e:	d1 f7       	brne	.-12     	; 0x2924 <f_lseek+0xa8>
    2930:	70 2d       	mov	r23, r0
			if (ifptr > 0 &&
    2932:	41 14       	cp	r4, r1
    2934:	51 04       	cpc	r5, r1
    2936:	61 04       	cpc	r6, r1
    2938:	71 04       	cpc	r7, r1
    293a:	09 f4       	brne	.+2      	; 0x293e <f_lseek+0xc2>
    293c:	40 c0       	rjmp	.+128    	; 0x29be <f_lseek+0x142>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    293e:	b1 e0       	ldi	r27, 0x01	; 1
    2940:	4b 1a       	sub	r4, r27
    2942:	51 08       	sbc	r5, r1
    2944:	61 08       	sbc	r6, r1
    2946:	71 08       	sbc	r7, r1

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    2948:	c7 01       	movw	r24, r14
    294a:	b6 01       	movw	r22, r12
    294c:	61 50       	subi	r22, 0x01	; 1
    294e:	71 09       	sbc	r23, r1
    2950:	81 09       	sbc	r24, r1
    2952:	91 09       	sbc	r25, r1
    2954:	a5 01       	movw	r20, r10
    2956:	94 01       	movw	r18, r8
    2958:	0e 94 f7 35 	call	0x6bee	; 0x6bee <__udivmodsi4>
    295c:	29 83       	std	Y+1, r18	; 0x01
    295e:	3a 83       	std	Y+2, r19	; 0x02
    2960:	4b 83       	std	Y+3, r20	; 0x03
    2962:	5c 83       	std	Y+4, r21	; 0x04
    2964:	c3 01       	movw	r24, r6
    2966:	b2 01       	movw	r22, r4
    2968:	a5 01       	movw	r20, r10
    296a:	94 01       	movw	r18, r8
    296c:	0e 94 f7 35 	call	0x6bee	; 0x6bee <__udivmodsi4>
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	9a 81       	ldd	r25, Y+2	; 0x02
    2974:	ab 81       	ldd	r26, Y+3	; 0x03
    2976:	bc 81       	ldd	r27, Y+4	; 0x04
    2978:	82 17       	cp	r24, r18
    297a:	93 07       	cpc	r25, r19
    297c:	a4 07       	cpc	r26, r20
    297e:	b5 07       	cpc	r27, r21
    2980:	f0 f0       	brcs	.+60     	; 0x29be <f_lseek+0x142>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    2982:	88 27       	eor	r24, r24
    2984:	99 27       	eor	r25, r25
    2986:	dc 01       	movw	r26, r24
    2988:	88 19       	sub	r24, r8
    298a:	99 09       	sbc	r25, r9
    298c:	aa 09       	sbc	r26, r10
    298e:	bb 09       	sbc	r27, r11
    2990:	48 22       	and	r4, r24
    2992:	59 22       	and	r5, r25
    2994:	6a 22       	and	r6, r26
    2996:	7b 22       	and	r7, r27
    2998:	ad 81       	ldd	r26, Y+5	; 0x05
    299a:	be 81       	ldd	r27, Y+6	; 0x06
    299c:	16 96       	adiw	r26, 0x06	; 6
    299e:	4d 92       	st	X+, r4
    29a0:	5d 92       	st	X+, r5
    29a2:	6d 92       	st	X+, r6
    29a4:	7c 92       	st	X, r7
    29a6:	19 97       	sbiw	r26, 0x09	; 9
				ofs -= fp->fptr;
    29a8:	c4 18       	sub	r12, r4
    29aa:	d5 08       	sbc	r13, r5
    29ac:	e6 08       	sbc	r14, r6
    29ae:	f7 08       	sbc	r15, r7
				clst = fp->curr_clust;
    29b0:	52 96       	adiw	r26, 0x12	; 18
    29b2:	4d 91       	ld	r20, X+
    29b4:	5d 91       	ld	r21, X+
    29b6:	6d 91       	ld	r22, X+
    29b8:	7c 91       	ld	r23, X
    29ba:	55 97       	sbiw	r26, 0x15	; 21
    29bc:	3d c0       	rjmp	.+122    	; 0x2a38 <f_lseek+0x1bc>
			} else {									/* When seek to back cluster, */
				clst = fp->org_clust;					/* start from the first cluster */
    29be:	ed 81       	ldd	r30, Y+5	; 0x05
    29c0:	fe 81       	ldd	r31, Y+6	; 0x06
    29c2:	46 85       	ldd	r20, Z+14	; 0x0e
    29c4:	57 85       	ldd	r21, Z+15	; 0x0f
    29c6:	60 89       	ldd	r22, Z+16	; 0x10
    29c8:	71 89       	ldd	r23, Z+17	; 0x11
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    29ca:	41 15       	cp	r20, r1
    29cc:	51 05       	cpc	r21, r1
    29ce:	61 05       	cpc	r22, r1
    29d0:	71 05       	cpc	r23, r1
    29d2:	61 f5       	brne	.+88     	; 0x2a2c <f_lseek+0x1b0>
					clst = create_chain(fp->fs, 0);
    29d4:	40 e0       	ldi	r20, 0x00	; 0
    29d6:	50 e0       	ldi	r21, 0x00	; 0
    29d8:	ba 01       	movw	r22, r20
    29da:	c8 01       	movw	r24, r16
    29dc:	0e 94 6d 09 	call	0x12da	; 0x12da <create_chain>
    29e0:	ab 01       	movw	r20, r22
    29e2:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    29e4:	41 30       	cpi	r20, 0x01	; 1
    29e6:	51 05       	cpc	r21, r1
    29e8:	61 05       	cpc	r22, r1
    29ea:	71 05       	cpc	r23, r1
    29ec:	51 f4       	brne	.+20     	; 0x2a02 <f_lseek+0x186>
    29ee:	ad 81       	ldd	r26, Y+5	; 0x05
    29f0:	be 81       	ldd	r27, Y+6	; 0x06
    29f2:	14 96       	adiw	r26, 0x04	; 4
    29f4:	8c 91       	ld	r24, X
    29f6:	14 97       	sbiw	r26, 0x04	; 4
    29f8:	80 68       	ori	r24, 0x80	; 128
    29fa:	14 96       	adiw	r26, 0x04	; 4
    29fc:	8c 93       	st	X, r24
    29fe:	82 e0       	ldi	r24, 0x02	; 2
    2a00:	fe c0       	rjmp	.+508    	; 0x2bfe <f_lseek+0x382>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2a02:	4f 3f       	cpi	r20, 0xFF	; 255
    2a04:	bf ef       	ldi	r27, 0xFF	; 255
    2a06:	5b 07       	cpc	r21, r27
    2a08:	6b 07       	cpc	r22, r27
    2a0a:	7b 07       	cpc	r23, r27
    2a0c:	39 f4       	brne	.+14     	; 0x2a1c <f_lseek+0x1a0>
    2a0e:	ed 81       	ldd	r30, Y+5	; 0x05
    2a10:	fe 81       	ldd	r31, Y+6	; 0x06
    2a12:	84 81       	ldd	r24, Z+4	; 0x04
    2a14:	80 68       	ori	r24, 0x80	; 128
    2a16:	84 83       	std	Z+4, r24	; 0x04
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	f1 c0       	rjmp	.+482    	; 0x2bfe <f_lseek+0x382>
					fp->org_clust = clst;
    2a1c:	ad 81       	ldd	r26, Y+5	; 0x05
    2a1e:	be 81       	ldd	r27, Y+6	; 0x06
    2a20:	1e 96       	adiw	r26, 0x0e	; 14
    2a22:	4d 93       	st	X+, r20
    2a24:	5d 93       	st	X+, r21
    2a26:	6d 93       	st	X+, r22
    2a28:	7c 93       	st	X, r23
    2a2a:	51 97       	sbiw	r26, 0x11	; 17
				}
#endif
				fp->curr_clust = clst;
    2a2c:	ed 81       	ldd	r30, Y+5	; 0x05
    2a2e:	fe 81       	ldd	r31, Y+6	; 0x06
    2a30:	42 8b       	std	Z+18, r20	; 0x12
    2a32:	53 8b       	std	Z+19, r21	; 0x13
    2a34:	64 8b       	std	Z+20, r22	; 0x14
    2a36:	75 8b       	std	Z+21, r23	; 0x15
			}
			if (clst != 0) {
    2a38:	41 15       	cp	r20, r1
    2a3a:	51 05       	cpc	r21, r1
    2a3c:	61 05       	cpc	r22, r1
    2a3e:	71 05       	cpc	r23, r1
    2a40:	09 f4       	brne	.+2      	; 0x2a44 <f_lseek+0x1c8>
    2a42:	a1 c0       	rjmp	.+322    	; 0x2b86 <f_lseek+0x30a>
				while (ofs > bcs) {						/* Cluster following loop */
    2a44:	8c 14       	cp	r8, r12
    2a46:	9d 04       	cpc	r9, r13
    2a48:	ae 04       	cpc	r10, r14
    2a4a:	bf 04       	cpc	r11, r15
    2a4c:	08 f0       	brcs	.+2      	; 0x2a50 <f_lseek+0x1d4>
    2a4e:	63 c0       	rjmp	.+198    	; 0x2b16 <f_lseek+0x29a>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    2a50:	ad 81       	ldd	r26, Y+5	; 0x05
    2a52:	be 81       	ldd	r27, Y+6	; 0x06
    2a54:	14 96       	adiw	r26, 0x04	; 4
    2a56:	8c 91       	ld	r24, X
    2a58:	14 97       	sbiw	r26, 0x04	; 4
    2a5a:	81 ff       	sbrs	r24, 1
    2a5c:	0c c0       	rjmp	.+24     	; 0x2a76 <f_lseek+0x1fa>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    2a5e:	8d 91       	ld	r24, X+
    2a60:	9c 91       	ld	r25, X
    2a62:	0e 94 6d 09 	call	0x12da	; 0x12da <create_chain>
    2a66:	ab 01       	movw	r20, r22
    2a68:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    2a6a:	41 15       	cp	r20, r1
    2a6c:	51 05       	cpc	r21, r1
    2a6e:	61 05       	cpc	r22, r1
    2a70:	71 05       	cpc	r23, r1
    2a72:	49 f4       	brne	.+18     	; 0x2a86 <f_lseek+0x20a>
    2a74:	4e c0       	rjmp	.+156    	; 0x2b12 <f_lseek+0x296>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    2a76:	ad 81       	ldd	r26, Y+5	; 0x05
    2a78:	be 81       	ldd	r27, Y+6	; 0x06
    2a7a:	8d 91       	ld	r24, X+
    2a7c:	9c 91       	ld	r25, X
    2a7e:	0e 94 b2 06 	call	0xd64	; 0xd64 <get_fat>
    2a82:	ab 01       	movw	r20, r22
    2a84:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2a86:	4f 3f       	cpi	r20, 0xFF	; 255
    2a88:	bf ef       	ldi	r27, 0xFF	; 255
    2a8a:	5b 07       	cpc	r21, r27
    2a8c:	6b 07       	cpc	r22, r27
    2a8e:	7b 07       	cpc	r23, r27
    2a90:	39 f4       	brne	.+14     	; 0x2aa0 <f_lseek+0x224>
    2a92:	ed 81       	ldd	r30, Y+5	; 0x05
    2a94:	fe 81       	ldd	r31, Y+6	; 0x06
    2a96:	84 81       	ldd	r24, Z+4	; 0x04
    2a98:	80 68       	ori	r24, 0x80	; 128
    2a9a:	84 83       	std	Z+4, r24	; 0x04
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	af c0       	rjmp	.+350    	; 0x2bfe <f_lseek+0x382>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    2aa0:	42 30       	cpi	r20, 0x02	; 2
    2aa2:	51 05       	cpc	r21, r1
    2aa4:	61 05       	cpc	r22, r1
    2aa6:	71 05       	cpc	r23, r1
    2aa8:	68 f0       	brcs	.+26     	; 0x2ac4 <f_lseek+0x248>
    2aaa:	ad 81       	ldd	r26, Y+5	; 0x05
    2aac:	be 81       	ldd	r27, Y+6	; 0x06
    2aae:	ed 91       	ld	r30, X+
    2ab0:	fc 91       	ld	r31, X
    2ab2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ab4:	93 8d       	ldd	r25, Z+27	; 0x1b
    2ab6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2ab8:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2aba:	48 17       	cp	r20, r24
    2abc:	59 07       	cpc	r21, r25
    2abe:	6a 07       	cpc	r22, r26
    2ac0:	7b 07       	cpc	r23, r27
    2ac2:	38 f0       	brcs	.+14     	; 0x2ad2 <f_lseek+0x256>
    2ac4:	ed 81       	ldd	r30, Y+5	; 0x05
    2ac6:	fe 81       	ldd	r31, Y+6	; 0x06
    2ac8:	84 81       	ldd	r24, Z+4	; 0x04
    2aca:	80 68       	ori	r24, 0x80	; 128
    2acc:	84 83       	std	Z+4, r24	; 0x04
    2ace:	82 e0       	ldi	r24, 0x02	; 2
    2ad0:	96 c0       	rjmp	.+300    	; 0x2bfe <f_lseek+0x382>
					fp->curr_clust = clst;
    2ad2:	ad 81       	ldd	r26, Y+5	; 0x05
    2ad4:	be 81       	ldd	r27, Y+6	; 0x06
    2ad6:	52 96       	adiw	r26, 0x12	; 18
    2ad8:	4d 93       	st	X+, r20
    2ada:	5d 93       	st	X+, r21
    2adc:	6d 93       	st	X+, r22
    2ade:	7c 93       	st	X, r23
    2ae0:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    2ae2:	fd 01       	movw	r30, r26
    2ae4:	86 81       	ldd	r24, Z+6	; 0x06
    2ae6:	97 81       	ldd	r25, Z+7	; 0x07
    2ae8:	a0 85       	ldd	r26, Z+8	; 0x08
    2aea:	b1 85       	ldd	r27, Z+9	; 0x09
    2aec:	88 0d       	add	r24, r8
    2aee:	99 1d       	adc	r25, r9
    2af0:	aa 1d       	adc	r26, r10
    2af2:	bb 1d       	adc	r27, r11
    2af4:	86 83       	std	Z+6, r24	; 0x06
    2af6:	97 83       	std	Z+7, r25	; 0x07
    2af8:	a0 87       	std	Z+8, r26	; 0x08
    2afa:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    2afc:	c8 18       	sub	r12, r8
    2afe:	d9 08       	sbc	r13, r9
    2b00:	ea 08       	sbc	r14, r10
    2b02:	fb 08       	sbc	r15, r11
				}
#endif
				fp->curr_clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    2b04:	8c 14       	cp	r8, r12
    2b06:	9d 04       	cpc	r9, r13
    2b08:	ae 04       	cpc	r10, r14
    2b0a:	bf 04       	cpc	r11, r15
    2b0c:	08 f4       	brcc	.+2      	; 0x2b10 <f_lseek+0x294>
    2b0e:	a0 cf       	rjmp	.-192    	; 0x2a50 <f_lseek+0x1d4>
    2b10:	02 c0       	rjmp	.+4      	; 0x2b16 <f_lseek+0x29a>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
    2b12:	75 01       	movw	r14, r10
    2b14:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->curr_clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    2b16:	ed 81       	ldd	r30, Y+5	; 0x05
    2b18:	fe 81       	ldd	r31, Y+6	; 0x06
    2b1a:	86 81       	ldd	r24, Z+6	; 0x06
    2b1c:	97 81       	ldd	r25, Z+7	; 0x07
    2b1e:	a0 85       	ldd	r26, Z+8	; 0x08
    2b20:	b1 85       	ldd	r27, Z+9	; 0x09
    2b22:	8c 0d       	add	r24, r12
    2b24:	9d 1d       	adc	r25, r13
    2b26:	ae 1d       	adc	r26, r14
    2b28:	bf 1d       	adc	r27, r15
    2b2a:	86 83       	std	Z+6, r24	; 0x06
    2b2c:	97 83       	std	Z+7, r25	; 0x07
    2b2e:	a0 87       	std	Z+8, r26	; 0x08
    2b30:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    2b32:	d7 01       	movw	r26, r14
    2b34:	c6 01       	movw	r24, r12
    2b36:	91 70       	andi	r25, 0x01	; 1
    2b38:	aa 27       	eor	r26, r26
    2b3a:	bb 27       	eor	r27, r27
    2b3c:	89 2b       	or	r24, r25
    2b3e:	8a 2b       	or	r24, r26
    2b40:	8b 2b       	or	r24, r27
    2b42:	29 f1       	breq	.+74     	; 0x2b8e <f_lseek+0x312>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    2b44:	80 81       	ld	r24, Z
    2b46:	91 81       	ldd	r25, Z+1	; 0x01
    2b48:	0e 94 8a 06 	call	0xd14	; 0xd14 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    2b4c:	61 15       	cp	r22, r1
    2b4e:	71 05       	cpc	r23, r1
    2b50:	81 05       	cpc	r24, r1
    2b52:	91 05       	cpc	r25, r1
    2b54:	51 f4       	brne	.+20     	; 0x2b6a <f_lseek+0x2ee>
    2b56:	ad 81       	ldd	r26, Y+5	; 0x05
    2b58:	be 81       	ldd	r27, Y+6	; 0x06
    2b5a:	14 96       	adiw	r26, 0x04	; 4
    2b5c:	8c 91       	ld	r24, X
    2b5e:	14 97       	sbiw	r26, 0x04	; 4
    2b60:	80 68       	ori	r24, 0x80	; 128
    2b62:	14 96       	adiw	r26, 0x04	; 4
    2b64:	8c 93       	st	X, r24
    2b66:	82 e0       	ldi	r24, 0x02	; 2
    2b68:	4a c0       	rjmp	.+148    	; 0x2bfe <f_lseek+0x382>
					nsect += ofs / SS(fp->fs);
    2b6a:	0b 2e       	mov	r0, r27
    2b6c:	b9 e0       	ldi	r27, 0x09	; 9
    2b6e:	f6 94       	lsr	r15
    2b70:	e7 94       	ror	r14
    2b72:	d7 94       	ror	r13
    2b74:	c7 94       	ror	r12
    2b76:	ba 95       	dec	r27
    2b78:	d1 f7       	brne	.-12     	; 0x2b6e <f_lseek+0x2f2>
    2b7a:	b0 2d       	mov	r27, r0
    2b7c:	c6 0e       	add	r12, r22
    2b7e:	d7 1e       	adc	r13, r23
    2b80:	e8 1e       	adc	r14, r24
    2b82:	f9 1e       	adc	r15, r25
    2b84:	07 c0       	rjmp	.+14     	; 0x2b94 <f_lseek+0x318>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    2b86:	c1 2c       	mov	r12, r1
    2b88:	d1 2c       	mov	r13, r1
    2b8a:	76 01       	movw	r14, r12
    2b8c:	03 c0       	rjmp	.+6      	; 0x2b94 <f_lseek+0x318>
    2b8e:	c1 2c       	mov	r12, r1
    2b90:	d1 2c       	mov	r13, r1
    2b92:	76 01       	movw	r14, r12
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    2b94:	ed 81       	ldd	r30, Y+5	; 0x05
    2b96:	fe 81       	ldd	r31, Y+6	; 0x06
    2b98:	86 81       	ldd	r24, Z+6	; 0x06
    2b9a:	97 81       	ldd	r25, Z+7	; 0x07
    2b9c:	a0 85       	ldd	r26, Z+8	; 0x08
    2b9e:	b1 85       	ldd	r27, Z+9	; 0x09
    2ba0:	ac 01       	movw	r20, r24
    2ba2:	bd 01       	movw	r22, r26
    2ba4:	51 70       	andi	r21, 0x01	; 1
    2ba6:	66 27       	eor	r22, r22
    2ba8:	77 27       	eor	r23, r23
    2baa:	45 2b       	or	r20, r21
    2bac:	46 2b       	or	r20, r22
    2bae:	47 2b       	or	r20, r23
    2bb0:	69 f0       	breq	.+26     	; 0x2bcc <f_lseek+0x350>
    2bb2:	46 89       	ldd	r20, Z+22	; 0x16
    2bb4:	57 89       	ldd	r21, Z+23	; 0x17
    2bb6:	60 8d       	ldd	r22, Z+24	; 0x18
    2bb8:	71 8d       	ldd	r23, Z+25	; 0x19
    2bba:	c4 16       	cp	r12, r20
    2bbc:	d5 06       	cpc	r13, r21
    2bbe:	e6 06       	cpc	r14, r22
    2bc0:	f7 06       	cpc	r15, r23
    2bc2:	21 f0       	breq	.+8      	; 0x2bcc <f_lseek+0x350>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    2bc4:	c6 8a       	std	Z+22, r12	; 0x16
    2bc6:	d7 8a       	std	Z+23, r13	; 0x17
    2bc8:	e0 8e       	std	Z+24, r14	; 0x18
    2bca:	f1 8e       	std	Z+25, r15	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set change flag if the file size is extended */
    2bcc:	ed 81       	ldd	r30, Y+5	; 0x05
    2bce:	fe 81       	ldd	r31, Y+6	; 0x06
    2bd0:	42 85       	ldd	r20, Z+10	; 0x0a
    2bd2:	53 85       	ldd	r21, Z+11	; 0x0b
    2bd4:	64 85       	ldd	r22, Z+12	; 0x0c
    2bd6:	75 85       	ldd	r23, Z+13	; 0x0d
    2bd8:	48 17       	cp	r20, r24
    2bda:	59 07       	cpc	r21, r25
    2bdc:	6a 07       	cpc	r22, r26
    2bde:	7b 07       	cpc	r23, r27
    2be0:	68 f4       	brcc	.+26     	; 0x2bfc <f_lseek+0x380>
			fp->fsize = fp->fptr;
    2be2:	82 87       	std	Z+10, r24	; 0x0a
    2be4:	93 87       	std	Z+11, r25	; 0x0b
    2be6:	a4 87       	std	Z+12, r26	; 0x0c
    2be8:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    2bea:	84 81       	ldd	r24, Z+4	; 0x04
    2bec:	80 62       	ori	r24, 0x20	; 32
    2bee:	84 83       	std	Z+4, r24	; 0x04
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	05 c0       	rjmp	.+10     	; 0x2bfe <f_lseek+0x382>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    2bf4:	82 e0       	ldi	r24, 0x02	; 2
    2bf6:	03 c0       	rjmp	.+6      	; 0x2bfe <f_lseek+0x382>
			fp->flag |= FA__WRITTEN;
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	01 c0       	rjmp	.+2      	; 0x2bfe <f_lseek+0x382>
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
}
    2bfe:	26 96       	adiw	r28, 0x06	; 6
    2c00:	0f b6       	in	r0, 0x3f	; 63
    2c02:	f8 94       	cli
    2c04:	de bf       	out	0x3e, r29	; 62
    2c06:	0f be       	out	0x3f, r0	; 63
    2c08:	cd bf       	out	0x3d, r28	; 61
    2c0a:	df 91       	pop	r29
    2c0c:	cf 91       	pop	r28
    2c0e:	1f 91       	pop	r17
    2c10:	0f 91       	pop	r16
    2c12:	ff 90       	pop	r15
    2c14:	ef 90       	pop	r14
    2c16:	df 90       	pop	r13
    2c18:	cf 90       	pop	r12
    2c1a:	bf 90       	pop	r11
    2c1c:	af 90       	pop	r10
    2c1e:	9f 90       	pop	r9
    2c20:	8f 90       	pop	r8
    2c22:	7f 90       	pop	r7
    2c24:	6f 90       	pop	r6
    2c26:	5f 90       	pop	r5
    2c28:	4f 90       	pop	r4
    2c2a:	08 95       	ret

00002c2c <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
    2c2c:	0f 93       	push	r16
    2c2e:	1f 93       	push	r17
    2c30:	cf 93       	push	r28
    2c32:	df 93       	push	r29
    2c34:	cd b7       	in	r28, 0x3d	; 61
    2c36:	de b7       	in	r29, 0x3e	; 62
    2c38:	2e 97       	sbiw	r28, 0x0e	; 14
    2c3a:	0f b6       	in	r0, 0x3f	; 63
    2c3c:	f8 94       	cli
    2c3e:	de bf       	out	0x3e, r29	; 62
    2c40:	0f be       	out	0x3f, r0	; 63
    2c42:	cd bf       	out	0x3d, r28	; 61
    2c44:	8c 01       	movw	r16, r24
    2c46:	7e 87       	std	Y+14, r23	; 0x0e
    2c48:	6d 87       	std	Y+13, r22	; 0x0d
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
    2c4a:	40 e0       	ldi	r20, 0x00	; 0
    2c4c:	bc 01       	movw	r22, r24
    2c4e:	ce 01       	movw	r24, r28
    2c50:	0d 96       	adiw	r24, 0x0d	; 13
    2c52:	0e 94 3f 03 	call	0x67e	; 0x67e <chk_mounted>
	if (res == FR_OK) {
    2c56:	81 11       	cpse	r24, r1
    2c58:	43 c0       	rjmp	.+134    	; 0x2ce0 <f_opendir+0xb4>
		INIT_BUF(*dj);
    2c5a:	ce 01       	movw	r24, r28
    2c5c:	01 96       	adiw	r24, 0x01	; 1
    2c5e:	d8 01       	movw	r26, r16
    2c60:	55 96       	adiw	r26, 0x15	; 21
    2c62:	9c 93       	st	X, r25
    2c64:	8e 93       	st	-X, r24
    2c66:	54 97       	sbiw	r26, 0x14	; 20
		res = follow_path(dj, path);			/* Follow the path to the directory */
    2c68:	6d 85       	ldd	r22, Y+13	; 0x0d
    2c6a:	7e 85       	ldd	r23, Y+14	; 0x0e
    2c6c:	c8 01       	movw	r24, r16
    2c6e:	0e 94 9c 0b 	call	0x1738	; 0x1738 <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
    2c72:	81 11       	cpse	r24, r1
    2c74:	1f c0       	rjmp	.+62     	; 0x2cb4 <f_opendir+0x88>
			if (dj->dir) {						/* It is not the root dir */
    2c76:	d8 01       	movw	r26, r16
    2c78:	52 96       	adiw	r26, 0x12	; 18
    2c7a:	ed 91       	ld	r30, X+
    2c7c:	fc 91       	ld	r31, X
    2c7e:	53 97       	sbiw	r26, 0x13	; 19
    2c80:	30 97       	sbiw	r30, 0x00	; 0
    2c82:	f1 f0       	breq	.+60     	; 0x2cc0 <f_opendir+0x94>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    2c84:	83 85       	ldd	r24, Z+11	; 0x0b
    2c86:	84 ff       	sbrs	r24, 4
    2c88:	19 c0       	rjmp	.+50     	; 0x2cbc <f_opendir+0x90>
					dj->sclust = LD_CLUST(dj->dir);
    2c8a:	84 89       	ldd	r24, Z+20	; 0x14
    2c8c:	95 89       	ldd	r25, Z+21	; 0x15
    2c8e:	a0 e0       	ldi	r26, 0x00	; 0
    2c90:	b0 e0       	ldi	r27, 0x00	; 0
    2c92:	dc 01       	movw	r26, r24
    2c94:	99 27       	eor	r25, r25
    2c96:	88 27       	eor	r24, r24
    2c98:	42 8d       	ldd	r20, Z+26	; 0x1a
    2c9a:	53 8d       	ldd	r21, Z+27	; 0x1b
    2c9c:	60 e0       	ldi	r22, 0x00	; 0
    2c9e:	70 e0       	ldi	r23, 0x00	; 0
    2ca0:	84 2b       	or	r24, r20
    2ca2:	95 2b       	or	r25, r21
    2ca4:	a6 2b       	or	r26, r22
    2ca6:	b7 2b       	or	r27, r23
    2ca8:	f8 01       	movw	r30, r16
    2caa:	86 83       	std	Z+6, r24	; 0x06
    2cac:	97 83       	std	Z+7, r25	; 0x07
    2cae:	a0 87       	std	Z+8, r26	; 0x08
    2cb0:	b1 87       	std	Z+9, r27	; 0x09
    2cb2:	06 c0       	rjmp	.+12     	; 0x2cc0 <f_opendir+0x94>
			if (res == FR_OK) {
				dj->id = dj->fs->id;
				res = dir_sdi(dj, 0);			/* Rewind dir */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    2cb4:	84 30       	cpi	r24, 0x04	; 4
    2cb6:	a1 f4       	brne	.+40     	; 0x2ce0 <f_opendir+0xb4>
    2cb8:	85 e0       	ldi	r24, 0x05	; 5
    2cba:	12 c0       	rjmp	.+36     	; 0x2ce0 <f_opendir+0xb4>
		if (res == FR_OK) {						/* Follow completed */
			if (dj->dir) {						/* It is not the root dir */
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
					dj->sclust = LD_CLUST(dj->dir);
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
    2cbc:	85 e0       	ldi	r24, 0x05	; 5
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj->fs, res);
    2cbe:	10 c0       	rjmp	.+32     	; 0x2ce0 <f_opendir+0xb4>
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    2cc0:	d8 01       	movw	r26, r16
    2cc2:	ed 91       	ld	r30, X+
    2cc4:	fc 91       	ld	r31, X
    2cc6:	11 97       	sbiw	r26, 0x01	; 1
    2cc8:	86 81       	ldd	r24, Z+6	; 0x06
    2cca:	97 81       	ldd	r25, Z+7	; 0x07
    2ccc:	13 96       	adiw	r26, 0x03	; 3
    2cce:	9c 93       	st	X, r25
    2cd0:	8e 93       	st	-X, r24
    2cd2:	12 97       	sbiw	r26, 0x02	; 2
				res = dir_sdi(dj, 0);			/* Rewind dir */
    2cd4:	60 e0       	ldi	r22, 0x00	; 0
    2cd6:	70 e0       	ldi	r23, 0x00	; 0
    2cd8:	c8 01       	movw	r24, r16
    2cda:	0e 94 95 07 	call	0xf2a	; 0xf2a <dir_sdi>
    2cde:	ea cf       	rjmp	.-44     	; 0x2cb4 <f_opendir+0x88>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj->fs, res);
}
    2ce0:	2e 96       	adiw	r28, 0x0e	; 14
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	f8 94       	cli
    2ce6:	de bf       	out	0x3e, r29	; 62
    2ce8:	0f be       	out	0x3f, r0	; 63
    2cea:	cd bf       	out	0x3d, r28	; 61
    2cec:	df 91       	pop	r29
    2cee:	cf 91       	pop	r28
    2cf0:	1f 91       	pop	r17
    2cf2:	0f 91       	pop	r16
    2cf4:	08 95       	ret

00002cf6 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    2cf6:	cf 92       	push	r12
    2cf8:	df 92       	push	r13
    2cfa:	ff 92       	push	r15
    2cfc:	0f 93       	push	r16
    2cfe:	1f 93       	push	r17
    2d00:	cf 93       	push	r28
    2d02:	df 93       	push	r29
    2d04:	cd b7       	in	r28, 0x3d	; 61
    2d06:	de b7       	in	r29, 0x3e	; 62
    2d08:	2c 97       	sbiw	r28, 0x0c	; 12
    2d0a:	0f b6       	in	r0, 0x3f	; 63
    2d0c:	f8 94       	cli
    2d0e:	de bf       	out	0x3e, r29	; 62
    2d10:	0f be       	out	0x3f, r0	; 63
    2d12:	cd bf       	out	0x3d, r28	; 61
    2d14:	8c 01       	movw	r16, r24
    2d16:	6b 01       	movw	r12, r22
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    2d18:	fc 01       	movw	r30, r24
    2d1a:	62 81       	ldd	r22, Z+2	; 0x02
    2d1c:	73 81       	ldd	r23, Z+3	; 0x03
    2d1e:	80 81       	ld	r24, Z
    2d20:	91 81       	ldd	r25, Z+1	; 0x01
    2d22:	0e 94 25 03 	call	0x64a	; 0x64a <validate>
    2d26:	f8 2e       	mov	r15, r24
	if (res == FR_OK) {
    2d28:	81 11       	cpse	r24, r1
    2d2a:	30 c0       	rjmp	.+96     	; 0x2d8c <f_readdir+0x96>
		if (!fno) {
    2d2c:	c1 14       	cp	r12, r1
    2d2e:	d1 04       	cpc	r13, r1
    2d30:	39 f4       	brne	.+14     	; 0x2d40 <f_readdir+0x4a>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
    2d32:	60 e0       	ldi	r22, 0x00	; 0
    2d34:	70 e0       	ldi	r23, 0x00	; 0
    2d36:	c8 01       	movw	r24, r16
    2d38:	0e 94 95 07 	call	0xf2a	; 0xf2a <dir_sdi>
    2d3c:	f8 2e       	mov	r15, r24
    2d3e:	26 c0       	rjmp	.+76     	; 0x2d8c <f_readdir+0x96>
		} else {
			INIT_BUF(*dj);
    2d40:	ce 01       	movw	r24, r28
    2d42:	01 96       	adiw	r24, 0x01	; 1
    2d44:	f8 01       	movw	r30, r16
    2d46:	95 8b       	std	Z+21, r25	; 0x15
    2d48:	84 8b       	std	Z+20, r24	; 0x14
			res = dir_read(dj);				/* Read an directory item */
    2d4a:	c8 01       	movw	r24, r16
    2d4c:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <dir_read>
			if (res == FR_NO_FILE) {		/* Reached end of dir */
    2d50:	84 30       	cpi	r24, 0x04	; 4
    2d52:	31 f4       	brne	.+12     	; 0x2d60 <f_readdir+0x6a>
				dj->sect = 0;
    2d54:	f8 01       	movw	r30, r16
    2d56:	16 86       	std	Z+14, r1	; 0x0e
    2d58:	17 86       	std	Z+15, r1	; 0x0f
    2d5a:	10 8a       	std	Z+16, r1	; 0x10
    2d5c:	11 8a       	std	Z+17, r1	; 0x11
    2d5e:	02 c0       	rjmp	.+4      	; 0x2d64 <f_readdir+0x6e>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    2d60:	81 11       	cpse	r24, r1
    2d62:	11 c0       	rjmp	.+34     	; 0x2d86 <f_readdir+0x90>
				get_fileinfo(dj, fno);		/* Get the object information */
    2d64:	b6 01       	movw	r22, r12
    2d66:	c8 01       	movw	r24, r16
    2d68:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <get_fileinfo>
				res = dir_next(dj, 0);		/* Increment index for next */
    2d6c:	60 e0       	ldi	r22, 0x00	; 0
    2d6e:	70 e0       	ldi	r23, 0x00	; 0
    2d70:	c8 01       	movw	r24, r16
    2d72:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <dir_next>
				if (res == FR_NO_FILE) {
    2d76:	84 30       	cpi	r24, 0x04	; 4
    2d78:	41 f4       	brne	.+16     	; 0x2d8a <f_readdir+0x94>
					dj->sect = 0;
    2d7a:	f8 01       	movw	r30, r16
    2d7c:	16 86       	std	Z+14, r1	; 0x0e
    2d7e:	17 86       	std	Z+15, r1	; 0x0f
    2d80:	10 8a       	std	Z+16, r1	; 0x10
    2d82:	11 8a       	std	Z+17, r1	; 0x11
    2d84:	03 c0       	rjmp	.+6      	; 0x2d8c <f_readdir+0x96>
	if (res == FR_OK) {
		if (!fno) {
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
		} else {
			INIT_BUF(*dj);
			res = dir_read(dj);				/* Read an directory item */
    2d86:	f8 2e       	mov	r15, r24
    2d88:	01 c0       	rjmp	.+2      	; 0x2d8c <f_readdir+0x96>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, 0);		/* Increment index for next */
    2d8a:	f8 2e       	mov	r15, r24
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
    2d8c:	8f 2d       	mov	r24, r15
    2d8e:	2c 96       	adiw	r28, 0x0c	; 12
    2d90:	0f b6       	in	r0, 0x3f	; 63
    2d92:	f8 94       	cli
    2d94:	de bf       	out	0x3e, r29	; 62
    2d96:	0f be       	out	0x3f, r0	; 63
    2d98:	cd bf       	out	0x3d, r28	; 61
    2d9a:	df 91       	pop	r29
    2d9c:	cf 91       	pop	r28
    2d9e:	1f 91       	pop	r17
    2da0:	0f 91       	pop	r16
    2da2:	ff 90       	pop	r15
    2da4:	df 90       	pop	r13
    2da6:	cf 90       	pop	r12
    2da8:	08 95       	ret

00002daa <rx_handler>:
	return res;
}

void createSoundList(FIL *file,unsigned char *num){
	(*num) = file->fsize / sizeof(struct sound_entry); 
}
    2daa:	8e 3f       	cpi	r24, 0xFE	; 254
    2dac:	49 f0       	breq	.+18     	; 0x2dc0 <rx_handler+0x16>
    2dae:	68 2f       	mov	r22, r24
    2db0:	87 ea       	ldi	r24, 0xA7	; 167
    2db2:	94 e0       	ldi	r25, 0x04	; 4
    2db4:	0e 94 a2 01 	call	0x344	; 0x344 <bufferAddToEnd>
    2db8:	81 11       	cpse	r24, r1
    2dba:	02 c0       	rjmp	.+4      	; 0x2dc0 <rx_handler+0x16>
    2dbc:	0e 94 bf 33 	call	0x677e	; 0x677e <uartFlushReceiveBuffer>
    2dc0:	08 95       	ret

00002dc2 <get_fattime>:
    2dc2:	60 e0       	ldi	r22, 0x00	; 0
    2dc4:	70 e0       	ldi	r23, 0x00	; 0
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	08 95       	ret

00002dca <configTimers>:
    2dca:	83 b7       	in	r24, 0x33	; 51
    2dcc:	82 60       	ori	r24, 0x02	; 2
    2dce:	83 bf       	out	0x33, r24	; 51
    2dd0:	83 b7       	in	r24, 0x33	; 51
    2dd2:	81 60       	ori	r24, 0x01	; 1
    2dd4:	83 bf       	out	0x33, r24	; 51
    2dd6:	89 b7       	in	r24, 0x39	; 57
    2dd8:	81 60       	ori	r24, 0x01	; 1
    2dda:	89 bf       	out	0x39, r24	; 57
    2ddc:	8c e9       	ldi	r24, 0x9C	; 156
    2dde:	83 bd       	out	0x23, r24	; 35
    2de0:	85 b5       	in	r24, 0x25	; 37
    2de2:	88 60       	ori	r24, 0x08	; 8
    2de4:	85 bd       	out	0x25, r24	; 37
    2de6:	89 b7       	in	r24, 0x39	; 57
    2de8:	80 68       	ori	r24, 0x80	; 128
    2dea:	89 bf       	out	0x39, r24	; 57
    2dec:	85 b5       	in	r24, 0x25	; 37
    2dee:	87 60       	ori	r24, 0x07	; 7
    2df0:	85 bd       	out	0x25, r24	; 37
    2df2:	08 95       	ret

00002df4 <setInputs>:
    2df4:	d8 98       	cbi	0x1b, 0	; 27
    2df6:	d0 98       	cbi	0x1a, 0	; 26
    2df8:	b8 98       	cbi	0x17, 0	; 23
    2dfa:	b9 98       	cbi	0x17, 1	; 23
    2dfc:	ba 98       	cbi	0x17, 2	; 23
    2dfe:	bb 98       	cbi	0x17, 3	; 23
    2e00:	c0 9a       	sbi	0x18, 0	; 24
    2e02:	c1 9a       	sbi	0x18, 1	; 24
    2e04:	c2 9a       	sbi	0x18, 2	; 24
    2e06:	c3 9a       	sbi	0x18, 3	; 24
    2e08:	a6 98       	cbi	0x14, 6	; 20
    2e0a:	a7 98       	cbi	0x14, 7	; 20
    2e0c:	d1 98       	cbi	0x1a, 1	; 26
    2e0e:	d2 98       	cbi	0x1a, 2	; 26
    2e10:	d3 98       	cbi	0x1a, 3	; 26
    2e12:	ae 9a       	sbi	0x15, 6	; 21
    2e14:	af 9a       	sbi	0x15, 7	; 21
    2e16:	d9 9a       	sbi	0x1b, 1	; 27
    2e18:	df 9a       	sbi	0x1b, 7	; 27
    2e1a:	db 9a       	sbi	0x1b, 3	; 27
    2e1c:	8f 98       	cbi	0x11, 7	; 17
    2e1e:	97 9a       	sbi	0x12, 7	; 18
    2e20:	08 95       	ret

00002e22 <readInputs>:
    2e22:	cf 93       	push	r28
    2e24:	df 93       	push	r29
    2e26:	ec 01       	movw	r28, r24
    2e28:	80 e0       	ldi	r24, 0x00	; 0
    2e2a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <a2dConvert8bit>
    2e2e:	8a 87       	std	Y+10, r24	; 0x0a
    2e30:	26 b3       	in	r18, 0x16	; 22
    2e32:	91 e0       	ldi	r25, 0x01	; 1
    2e34:	29 27       	eor	r18, r25
    2e36:	21 70       	andi	r18, 0x01	; 1
    2e38:	28 83       	st	Y, r18
    2e3a:	26 b3       	in	r18, 0x16	; 22
    2e3c:	26 95       	lsr	r18
    2e3e:	21 70       	andi	r18, 0x01	; 1
    2e40:	29 27       	eor	r18, r25
    2e42:	29 83       	std	Y+1, r18	; 0x01
    2e44:	26 b3       	in	r18, 0x16	; 22
    2e46:	22 fb       	bst	r18, 2
    2e48:	22 27       	eor	r18, r18
    2e4a:	20 f9       	bld	r18, 0
    2e4c:	29 27       	eor	r18, r25
    2e4e:	2a 83       	std	Y+2, r18	; 0x02
    2e50:	26 b3       	in	r18, 0x16	; 22
    2e52:	23 fb       	bst	r18, 3
    2e54:	22 27       	eor	r18, r18
    2e56:	20 f9       	bld	r18, 0
    2e58:	29 27       	eor	r18, r25
    2e5a:	2b 83       	std	Y+3, r18	; 0x03
    2e5c:	23 b3       	in	r18, 0x13	; 19
    2e5e:	26 fb       	bst	r18, 6
    2e60:	22 27       	eor	r18, r18
    2e62:	20 f9       	bld	r18, 0
    2e64:	29 27       	eor	r18, r25
    2e66:	2c 83       	std	Y+4, r18	; 0x04
    2e68:	23 b3       	in	r18, 0x13	; 19
    2e6a:	20 95       	com	r18
    2e6c:	22 1f       	adc	r18, r18
    2e6e:	22 27       	eor	r18, r18
    2e70:	22 1f       	adc	r18, r18
    2e72:	2d 83       	std	Y+5, r18	; 0x05
    2e74:	29 b3       	in	r18, 0x19	; 25
    2e76:	26 95       	lsr	r18
    2e78:	21 70       	andi	r18, 0x01	; 1
    2e7a:	29 27       	eor	r18, r25
    2e7c:	2e 83       	std	Y+6, r18	; 0x06
    2e7e:	29 b3       	in	r18, 0x19	; 25
    2e80:	22 fb       	bst	r18, 2
    2e82:	22 27       	eor	r18, r18
    2e84:	20 f9       	bld	r18, 0
    2e86:	29 27       	eor	r18, r25
    2e88:	2f 83       	std	Y+7, r18	; 0x07
    2e8a:	29 b3       	in	r18, 0x19	; 25
    2e8c:	23 fb       	bst	r18, 3
    2e8e:	22 27       	eor	r18, r18
    2e90:	20 f9       	bld	r18, 0
    2e92:	92 27       	eor	r25, r18
    2e94:	98 87       	std	Y+8, r25	; 0x08
    2e96:	90 b3       	in	r25, 0x10	; 16
    2e98:	90 95       	com	r25
    2e9a:	99 1f       	adc	r25, r25
    2e9c:	99 27       	eor	r25, r25
    2e9e:	99 1f       	adc	r25, r25
    2ea0:	99 87       	std	Y+9, r25	; 0x09
    2ea2:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <inp_old.2533+0x9>
    2ea6:	92 17       	cp	r25, r18
    2ea8:	21 f0       	breq	.+8      	; 0x2eb2 <readInputs+0x90>
    2eaa:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <inp_old.2533+0x9>
    2eae:	89 e0       	ldi	r24, 0x09	; 9
    2eb0:	23 c0       	rjmp	.+70     	; 0x2ef8 <readInputs+0xd6>
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	29 2f       	mov	r18, r25
    2eb6:	09 2e       	mov	r0, r25
    2eb8:	00 0c       	add	r0, r0
    2eba:	33 0b       	sbc	r19, r19
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	e2 0f       	add	r30, r18
    2ec0:	f3 1f       	adc	r31, r19
    2ec2:	40 81       	ld	r20, Z
    2ec4:	f9 01       	movw	r30, r18
    2ec6:	ef 57       	subi	r30, 0x7F	; 127
    2ec8:	fe 4f       	sbci	r31, 0xFE	; 254
    2eca:	50 81       	ld	r21, Z
    2ecc:	45 17       	cp	r20, r21
    2ece:	31 f0       	breq	.+12     	; 0x2edc <readInputs+0xba>
    2ed0:	f9 01       	movw	r30, r18
    2ed2:	ef 57       	subi	r30, 0x7F	; 127
    2ed4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed6:	40 83       	st	Z, r20
    2ed8:	41 30       	cpi	r20, 0x01	; 1
    2eda:	59 f0       	breq	.+22     	; 0x2ef2 <readInputs+0xd0>
    2edc:	9f 5f       	subi	r25, 0xFF	; 255
    2ede:	9a 30       	cpi	r25, 0x0A	; 10
    2ee0:	4c f3       	brlt	.-46     	; 0x2eb4 <readInputs+0x92>
    2ee2:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <inp_old.2533+0xa>
    2ee6:	89 17       	cp	r24, r25
    2ee8:	31 f0       	breq	.+12     	; 0x2ef6 <readInputs+0xd4>
    2eea:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <inp_old.2533+0xa>
    2eee:	8a e0       	ldi	r24, 0x0A	; 10
    2ef0:	03 c0       	rjmp	.+6      	; 0x2ef8 <readInputs+0xd6>
    2ef2:	89 2f       	mov	r24, r25
    2ef4:	01 c0       	rjmp	.+2      	; 0x2ef8 <readInputs+0xd6>
    2ef6:	8f ef       	ldi	r24, 0xFF	; 255
    2ef8:	df 91       	pop	r29
    2efa:	cf 91       	pop	r28
    2efc:	08 95       	ret

00002efe <addMillis>:
    2efe:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <timer0_millis>
    2f02:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <timer0_millis+0x1>
    2f06:	a0 91 9f 01 	lds	r26, 0x019F	; 0x80019f <timer0_millis+0x2>
    2f0a:	b0 91 a0 01 	lds	r27, 0x01A0	; 0x8001a0 <timer0_millis+0x3>
    2f0e:	30 91 9c 01 	lds	r19, 0x019C	; 0x80019c <timer0_fract>
    2f12:	23 e0       	ldi	r18, 0x03	; 3
    2f14:	23 0f       	add	r18, r19
    2f16:	2d 37       	cpi	r18, 0x7D	; 125
    2f18:	20 f4       	brcc	.+8      	; 0x2f22 <addMillis+0x24>
    2f1a:	01 96       	adiw	r24, 0x01	; 1
    2f1c:	a1 1d       	adc	r26, r1
    2f1e:	b1 1d       	adc	r27, r1
    2f20:	05 c0       	rjmp	.+10     	; 0x2f2c <addMillis+0x2e>
    2f22:	26 e8       	ldi	r18, 0x86	; 134
    2f24:	23 0f       	add	r18, r19
    2f26:	02 96       	adiw	r24, 0x02	; 2
    2f28:	a1 1d       	adc	r26, r1
    2f2a:	b1 1d       	adc	r27, r1
    2f2c:	20 93 9c 01 	sts	0x019C, r18	; 0x80019c <timer0_fract>
    2f30:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <timer0_millis>
    2f34:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <timer0_millis+0x1>
    2f38:	a0 93 9f 01 	sts	0x019F, r26	; 0x80019f <timer0_millis+0x2>
    2f3c:	b0 93 a0 01 	sts	0x01A0, r27	; 0x8001a0 <timer0_millis+0x3>
    2f40:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <timer0_overflow_count>
    2f44:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <timer0_overflow_count+0x1>
    2f48:	a0 91 a3 01 	lds	r26, 0x01A3	; 0x8001a3 <timer0_overflow_count+0x2>
    2f4c:	b0 91 a4 01 	lds	r27, 0x01A4	; 0x8001a4 <timer0_overflow_count+0x3>
    2f50:	01 96       	adiw	r24, 0x01	; 1
    2f52:	a1 1d       	adc	r26, r1
    2f54:	b1 1d       	adc	r27, r1
    2f56:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <timer0_overflow_count>
    2f5a:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <timer0_overflow_count+0x1>
    2f5e:	a0 93 a3 01 	sts	0x01A3, r26	; 0x8001a3 <timer0_overflow_count+0x2>
    2f62:	b0 93 a4 01 	sts	0x01A4, r27	; 0x8001a4 <timer0_overflow_count+0x3>
    2f66:	08 95       	ret

00002f68 <getMicros>:
    2f68:	3f b7       	in	r19, 0x3f	; 63
    2f6a:	f8 94       	cli
    2f6c:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <timer0_overflow_count>
    2f70:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <timer0_overflow_count+0x1>
    2f74:	a0 91 a3 01 	lds	r26, 0x01A3	; 0x8001a3 <timer0_overflow_count+0x2>
    2f78:	b0 91 a4 01 	lds	r27, 0x01A4	; 0x8001a4 <timer0_overflow_count+0x3>
    2f7c:	22 b7       	in	r18, 0x32	; 50
    2f7e:	08 b6       	in	r0, 0x38	; 56
    2f80:	00 fe       	sbrs	r0, 0
    2f82:	05 c0       	rjmp	.+10     	; 0x2f8e <getMicros+0x26>
    2f84:	2f 3f       	cpi	r18, 0xFF	; 255
    2f86:	19 f0       	breq	.+6      	; 0x2f8e <getMicros+0x26>
    2f88:	01 96       	adiw	r24, 0x01	; 1
    2f8a:	a1 1d       	adc	r26, r1
    2f8c:	b1 1d       	adc	r27, r1
    2f8e:	3f bf       	out	0x3f, r19	; 63
    2f90:	ba 2f       	mov	r27, r26
    2f92:	a9 2f       	mov	r26, r25
    2f94:	98 2f       	mov	r25, r24
    2f96:	88 27       	eor	r24, r24
    2f98:	82 0f       	add	r24, r18
    2f9a:	91 1d       	adc	r25, r1
    2f9c:	a1 1d       	adc	r26, r1
    2f9e:	b1 1d       	adc	r27, r1
    2fa0:	bc 01       	movw	r22, r24
    2fa2:	cd 01       	movw	r24, r26
    2fa4:	66 0f       	add	r22, r22
    2fa6:	77 1f       	adc	r23, r23
    2fa8:	88 1f       	adc	r24, r24
    2faa:	99 1f       	adc	r25, r25
    2fac:	66 0f       	add	r22, r22
    2fae:	77 1f       	adc	r23, r23
    2fb0:	88 1f       	adc	r24, r24
    2fb2:	99 1f       	adc	r25, r25
    2fb4:	08 95       	ret

00002fb6 <getLCDString>:
    2fb6:	20 e1       	ldi	r18, 0x10	; 16
    2fb8:	ec e8       	ldi	r30, 0x8C	; 140
    2fba:	f1 e0       	ldi	r31, 0x01	; 1
    2fbc:	df 01       	movw	r26, r30
    2fbe:	1d 92       	st	X+, r1
    2fc0:	2a 95       	dec	r18
    2fc2:	e9 f7       	brne	.-6      	; 0x2fbe <getLCDString+0x8>
    2fc4:	46 2f       	mov	r20, r22
    2fc6:	50 e0       	ldi	r21, 0x00	; 0
    2fc8:	bc 01       	movw	r22, r24
    2fca:	cf 01       	movw	r24, r30
    2fcc:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <eeprom_read_block>
    2fd0:	8c e8       	ldi	r24, 0x8C	; 140
    2fd2:	91 e0       	ldi	r25, 0x01	; 1
    2fd4:	08 95       	ret

00002fd6 <setMidiFile>:
    2fd6:	0f 93       	push	r16
    2fd8:	1f 93       	push	r17
    2fda:	cf 93       	push	r28
    2fdc:	df 93       	push	r29
    2fde:	ec 01       	movw	r28, r24
    2fe0:	8b 01       	movw	r16, r22
    2fe2:	8b ed       	ldi	r24, 0xDB	; 219
    2fe4:	91 e0       	ldi	r25, 0x01	; 1
    2fe6:	fe 01       	movw	r30, r28
    2fe8:	9c 01       	movw	r18, r24
    2fea:	11 92       	st	Z+, r1
    2fec:	21 50       	subi	r18, 0x01	; 1
    2fee:	30 40       	sbci	r19, 0x00	; 0
    2ff0:	e1 f7       	brne	.-8      	; 0x2fea <setMidiFile+0x14>
    2ff2:	ce 01       	movw	r24, r28
    2ff4:	0e 94 b8 21 	call	0x4370	; 0x4370 <initialise>
    2ff8:	67 e6       	ldi	r22, 0x67	; 103
    2ffa:	79 e2       	ldi	r23, 0x29	; 41
    2ffc:	ce 01       	movw	r24, r28
    2ffe:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <setMidiHandler>
    3002:	66 e6       	ldi	r22, 0x66	; 102
    3004:	79 e2       	ldi	r23, 0x29	; 41
    3006:	ce 01       	movw	r24, r28
    3008:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <setSysexHandler>
    300c:	65 e6       	ldi	r22, 0x65	; 101
    300e:	79 e2       	ldi	r23, 0x29	; 41
    3010:	ce 01       	movw	r24, r28
    3012:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <setMetaHandler>
    3016:	b8 01       	movw	r22, r16
    3018:	ce 01       	movw	r24, r28
    301a:	0e 94 1a 24 	call	0x4834	; 0x4834 <setFilename>
    301e:	ce 01       	movw	r24, r28
    3020:	0e 94 16 23 	call	0x462c	; 0x462c <loadMIDIFile>
    3024:	01 96       	adiw	r24, 0x01	; 1
    3026:	99 f0       	breq	.+38     	; 0x304e <setMidiFile+0x78>
    3028:	6b e0       	ldi	r22, 0x0B	; 11
    302a:	8b e4       	ldi	r24, 0x4B	; 75
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    3032:	6b e0       	ldi	r22, 0x0B	; 11
    3034:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <lcdPrintData>
    3038:	8f ef       	ldi	r24, 0xFF	; 255
    303a:	99 e6       	ldi	r25, 0x69	; 105
    303c:	e8 e1       	ldi	r30, 0x18	; 24
    303e:	81 50       	subi	r24, 0x01	; 1
    3040:	90 40       	sbci	r25, 0x00	; 0
    3042:	e0 40       	sbci	r30, 0x00	; 0
    3044:	e1 f7       	brne	.-8      	; 0x303e <setMidiFile+0x68>
    3046:	00 c0       	rjmp	.+0      	; 0x3048 <setMidiFile+0x72>
    3048:	00 00       	nop
    304a:	81 e0       	ldi	r24, 0x01	; 1
    304c:	08 c0       	rjmp	.+16     	; 0x305e <setMidiFile+0x88>
    304e:	fe 01       	movw	r30, r28
    3050:	ee 5b       	subi	r30, 0xBE	; 190
    3052:	ff 4f       	sbci	r31, 0xFF	; 255
    3054:	10 82       	st	Z, r1
    3056:	cd 5b       	subi	r28, 0xBD	; 189
    3058:	df 4f       	sbci	r29, 0xFF	; 255
    305a:	18 82       	st	Y, r1
    305c:	80 e0       	ldi	r24, 0x00	; 0
    305e:	df 91       	pop	r29
    3060:	cf 91       	pop	r28
    3062:	1f 91       	pop	r17
    3064:	0f 91       	pop	r16
    3066:	08 95       	ret

00003068 <checkSD>:
    3068:	cf 93       	push	r28
    306a:	c8 2f       	mov	r28, r24
    306c:	60 e0       	ldi	r22, 0x00	; 0
    306e:	80 e0       	ldi	r24, 0x00	; 0
    3070:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <lcdGotoXY>
    3074:	c1 30       	cpi	r28, 0x01	; 1
    3076:	29 f5       	brne	.+74     	; 0x30c2 <checkSD+0x5a>
    3078:	6f e0       	ldi	r22, 0x0F	; 15
    307a:	80 e1       	ldi	r24, 0x10	; 16
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    3082:	6f e0       	ldi	r22, 0x0F	; 15
    3084:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <lcdPrintData>
    3088:	61 e0       	ldi	r22, 0x01	; 1
    308a:	80 e0       	ldi	r24, 0x00	; 0
    308c:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <lcdGotoXY>
    3090:	60 e0       	ldi	r22, 0x00	; 0
    3092:	70 e0       	ldi	r23, 0x00	; 0
    3094:	80 e0       	ldi	r24, 0x00	; 0
    3096:	0e 94 67 0e 	call	0x1cce	; 0x1cce <f_mount>
    309a:	88 23       	and	r24, r24
    309c:	49 f0       	breq	.+18     	; 0x30b0 <checkSD+0x48>
    309e:	6e e0       	ldi	r22, 0x0E	; 14
    30a0:	8d e3       	ldi	r24, 0x3D	; 61
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    30a8:	6e e0       	ldi	r22, 0x0E	; 14
    30aa:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <lcdPrintData>
    30ae:	2d c0       	rjmp	.+90     	; 0x310a <checkSD+0xa2>
    30b0:	6a e0       	ldi	r22, 0x0A	; 10
    30b2:	83 e3       	ldi	r24, 0x33	; 51
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    30ba:	6a e0       	ldi	r22, 0x0A	; 10
    30bc:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <lcdPrintData>
    30c0:	24 c0       	rjmp	.+72     	; 0x310a <checkSD+0xa2>
    30c2:	60 e1       	ldi	r22, 0x10	; 16
    30c4:	80 e0       	ldi	r24, 0x00	; 0
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    30cc:	60 e1       	ldi	r22, 0x10	; 16
    30ce:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <lcdPrintData>
    30d2:	61 e0       	ldi	r22, 0x01	; 1
    30d4:	80 e0       	ldi	r24, 0x00	; 0
    30d6:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <lcdGotoXY>
    30da:	67 e5       	ldi	r22, 0x57	; 87
    30dc:	72 e0       	ldi	r23, 0x02	; 2
    30de:	80 e0       	ldi	r24, 0x00	; 0
    30e0:	0e 94 67 0e 	call	0x1cce	; 0x1cce <f_mount>
    30e4:	88 23       	and	r24, r24
    30e6:	49 f0       	breq	.+18     	; 0x30fa <checkSD+0x92>
    30e8:	6c e0       	ldi	r22, 0x0C	; 12
    30ea:	87 e2       	ldi	r24, 0x27	; 39
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    30f2:	6c e0       	ldi	r22, 0x0C	; 12
    30f4:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <lcdPrintData>
    30f8:	08 c0       	rjmp	.+16     	; 0x310a <checkSD+0xa2>
    30fa:	68 e0       	ldi	r22, 0x08	; 8
    30fc:	8f e1       	ldi	r24, 0x1F	; 31
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    3104:	68 e0       	ldi	r22, 0x08	; 8
    3106:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <lcdPrintData>
    310a:	cf 91       	pop	r28
    310c:	08 95       	ret

0000310e <createFileList>:
    310e:	8f 92       	push	r8
    3110:	9f 92       	push	r9
    3112:	af 92       	push	r10
    3114:	bf 92       	push	r11
    3116:	cf 92       	push	r12
    3118:	df 92       	push	r13
    311a:	ef 92       	push	r14
    311c:	ff 92       	push	r15
    311e:	0f 93       	push	r16
    3120:	1f 93       	push	r17
    3122:	cf 93       	push	r28
    3124:	df 93       	push	r29
    3126:	cd b7       	in	r28, 0x3d	; 61
    3128:	de b7       	in	r29, 0x3e	; 62
    312a:	e5 97       	sbiw	r28, 0x35	; 53
    312c:	0f b6       	in	r0, 0x3f	; 63
    312e:	f8 94       	cli
    3130:	de bf       	out	0x3e, r29	; 62
    3132:	0f be       	out	0x3f, r0	; 63
    3134:	cd bf       	out	0x3d, r28	; 61
    3136:	5c 01       	movw	r10, r24
    3138:	4b 01       	movw	r8, r22
    313a:	6a 01       	movw	r12, r20
    313c:	68 e0       	ldi	r22, 0x08	; 8
    313e:	70 e0       	ldi	r23, 0x00	; 0
    3140:	ce 01       	movw	r24, r28
    3142:	01 96       	adiw	r24, 0x01	; 1
    3144:	0e 94 fd 12 	call	0x25fa	; 0x25fa <f_getcwd>
    3148:	be 01       	movw	r22, r28
    314a:	6f 5f       	subi	r22, 0xFF	; 255
    314c:	7f 4f       	sbci	r23, 0xFF	; 255
    314e:	ce 01       	movw	r24, r28
    3150:	80 96       	adiw	r24, 0x20	; 32
    3152:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <f_opendir>
    3156:	18 2f       	mov	r17, r24
    3158:	81 11       	cpse	r24, r1
    315a:	50 c0       	rjmp	.+160    	; 0x31fc <createFileList+0xee>
    315c:	7e 01       	movw	r14, r28
    315e:	23 e1       	ldi	r18, 0x13	; 19
    3160:	e2 0e       	add	r14, r18
    3162:	f1 1c       	adc	r15, r1
    3164:	00 e1       	ldi	r16, 0x10	; 16
    3166:	be 01       	movw	r22, r28
    3168:	66 5f       	subi	r22, 0xF6	; 246
    316a:	7f 4f       	sbci	r23, 0xFF	; 255
    316c:	ce 01       	movw	r24, r28
    316e:	80 96       	adiw	r24, 0x20	; 32
    3170:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <f_readdir>
    3174:	18 2f       	mov	r17, r24
    3176:	81 11       	cpse	r24, r1
    3178:	41 c0       	rjmp	.+130    	; 0x31fc <createFileList+0xee>
    317a:	8b 89       	ldd	r24, Y+19	; 0x13
    317c:	88 23       	and	r24, r24
    317e:	f1 f1       	breq	.+124    	; 0x31fc <createFileList+0xee>
    3180:	8e 32       	cpi	r24, 0x2E	; 46
    3182:	89 f3       	breq	.-30     	; 0x3166 <createFileList+0x58>
    3184:	8a 89       	ldd	r24, Y+18	; 0x12
    3186:	84 fd       	sbrc	r24, 4
    3188:	ee cf       	rjmp	.-36     	; 0x3166 <createFileList+0x58>
    318a:	f7 01       	movw	r30, r14
    318c:	01 90       	ld	r0, Z+
    318e:	00 20       	and	r0, r0
    3190:	e9 f7       	brne	.-6      	; 0x318c <createFileList+0x7e>
    3192:	31 97       	sbiw	r30, 0x01	; 1
    3194:	ee 19       	sub	r30, r14
    3196:	ff 09       	sbc	r31, r15
    3198:	70 97       	sbiw	r30, 0x10	; 16
    319a:	28 f7       	brcc	.-54     	; 0x3166 <createFileList+0x58>
    319c:	d6 01       	movw	r26, r12
    319e:	8c 91       	ld	r24, X
    31a0:	f5 01       	movw	r30, r10
    31a2:	b0 e1       	ldi	r27, 0x10	; 16
    31a4:	8b 9f       	mul	r24, r27
    31a6:	e0 0d       	add	r30, r0
    31a8:	f1 1d       	adc	r31, r1
    31aa:	11 24       	eor	r1, r1
    31ac:	df 01       	movw	r26, r30
    31ae:	20 2f       	mov	r18, r16
    31b0:	1d 92       	st	X+, r1
    31b2:	2a 95       	dec	r18
    31b4:	e9 f7       	brne	.-6      	; 0x31b0 <createFileList+0xa2>
    31b6:	b4 01       	movw	r22, r8
    31b8:	c7 01       	movw	r24, r14
    31ba:	0e 94 98 37 	call	0x6f30	; 0x6f30 <strstr>
    31be:	89 2b       	or	r24, r25
    31c0:	c1 f0       	breq	.+48     	; 0x31f2 <createFileList+0xe4>
    31c2:	f7 01       	movw	r30, r14
    31c4:	01 90       	ld	r0, Z+
    31c6:	00 20       	and	r0, r0
    31c8:	e9 f7       	brne	.-6      	; 0x31c4 <createFileList+0xb6>
    31ca:	31 97       	sbiw	r30, 0x01	; 1
    31cc:	af 01       	movw	r20, r30
    31ce:	4e 19       	sub	r20, r14
    31d0:	5f 09       	sbc	r21, r15
    31d2:	d6 01       	movw	r26, r12
    31d4:	8c 91       	ld	r24, X
    31d6:	b7 01       	movw	r22, r14
    31d8:	f5 01       	movw	r30, r10
    31da:	20 e1       	ldi	r18, 0x10	; 16
    31dc:	82 9f       	mul	r24, r18
    31de:	e0 0d       	add	r30, r0
    31e0:	f1 1d       	adc	r31, r1
    31e2:	11 24       	eor	r1, r1
    31e4:	cf 01       	movw	r24, r30
    31e6:	0e 94 89 37 	call	0x6f12	; 0x6f12 <strncpy>
    31ea:	d6 01       	movw	r26, r12
    31ec:	8c 91       	ld	r24, X
    31ee:	8f 5f       	subi	r24, 0xFF	; 255
    31f0:	8c 93       	st	X, r24
    31f2:	f6 01       	movw	r30, r12
    31f4:	80 81       	ld	r24, Z
    31f6:	8a 30       	cpi	r24, 0x0A	; 10
    31f8:	09 f0       	breq	.+2      	; 0x31fc <createFileList+0xee>
    31fa:	b5 cf       	rjmp	.-150    	; 0x3166 <createFileList+0x58>
    31fc:	81 2f       	mov	r24, r17
    31fe:	e5 96       	adiw	r28, 0x35	; 53
    3200:	0f b6       	in	r0, 0x3f	; 63
    3202:	f8 94       	cli
    3204:	de bf       	out	0x3e, r29	; 62
    3206:	0f be       	out	0x3f, r0	; 63
    3208:	cd bf       	out	0x3d, r28	; 61
    320a:	df 91       	pop	r29
    320c:	cf 91       	pop	r28
    320e:	1f 91       	pop	r17
    3210:	0f 91       	pop	r16
    3212:	ff 90       	pop	r15
    3214:	ef 90       	pop	r14
    3216:	df 90       	pop	r13
    3218:	cf 90       	pop	r12
    321a:	bf 90       	pop	r11
    321c:	af 90       	pop	r10
    321e:	9f 90       	pop	r9
    3220:	8f 90       	pop	r8
    3222:	08 95       	ret

00003224 <setSoundFile>:
    3224:	af 92       	push	r10
    3226:	bf 92       	push	r11
    3228:	cf 92       	push	r12
    322a:	df 92       	push	r13
    322c:	ff 92       	push	r15
    322e:	0f 93       	push	r16
    3230:	1f 93       	push	r17
    3232:	cf 93       	push	r28
    3234:	df 93       	push	r29
    3236:	00 d0       	rcall	.+0      	; 0x3238 <setSoundFile+0x14>
    3238:	cd b7       	in	r28, 0x3d	; 61
    323a:	de b7       	in	r29, 0x3e	; 62
    323c:	8c 01       	movw	r16, r24
    323e:	5b 01       	movw	r10, r22
    3240:	6a 01       	movw	r12, r20
    3242:	41 e0       	ldi	r20, 0x01	; 1
    3244:	b9 01       	movw	r22, r18
    3246:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <f_open>
    324a:	f8 2e       	mov	r15, r24
    324c:	88 23       	and	r24, r24
    324e:	49 f0       	breq	.+18     	; 0x3262 <setSoundFile+0x3e>
    3250:	6b e0       	ldi	r22, 0x0B	; 11
    3252:	8b e4       	ldi	r24, 0x4B	; 75
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    325a:	6b e0       	ldi	r22, 0x0B	; 11
    325c:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <lcdPrintData>
    3260:	20 c0       	rjmp	.+64     	; 0x32a2 <setSoundFile+0x7e>
    3262:	67 e0       	ldi	r22, 0x07	; 7
    3264:	8b e6       	ldi	r24, 0x6B	; 107
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    326c:	67 e0       	ldi	r22, 0x07	; 7
    326e:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <lcdPrintData>
    3272:	40 e0       	ldi	r20, 0x00	; 0
    3274:	50 e0       	ldi	r21, 0x00	; 0
    3276:	ba 01       	movw	r22, r20
    3278:	c8 01       	movw	r24, r16
    327a:	0e 94 3e 14 	call	0x287c	; 0x287c <f_lseek>
    327e:	9e 01       	movw	r18, r28
    3280:	2f 5f       	subi	r18, 0xFF	; 255
    3282:	3f 4f       	sbci	r19, 0xFF	; 255
    3284:	48 e1       	ldi	r20, 0x18	; 24
    3286:	50 e0       	ldi	r21, 0x00	; 0
    3288:	b5 01       	movw	r22, r10
    328a:	c8 01       	movw	r24, r16
    328c:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
    3290:	9e 01       	movw	r18, r28
    3292:	2f 5f       	subi	r18, 0xFF	; 255
    3294:	3f 4f       	sbci	r19, 0xFF	; 255
    3296:	42 e1       	ldi	r20, 0x12	; 18
    3298:	50 e0       	ldi	r21, 0x00	; 0
    329a:	b6 01       	movw	r22, r12
    329c:	c8 01       	movw	r24, r16
    329e:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
    32a2:	40 e0       	ldi	r20, 0x00	; 0
    32a4:	50 e0       	ldi	r21, 0x00	; 0
    32a6:	ba 01       	movw	r22, r20
    32a8:	c8 01       	movw	r24, r16
    32aa:	0e 94 3e 14 	call	0x287c	; 0x287c <f_lseek>
    32ae:	8f 2d       	mov	r24, r15
    32b0:	0f 90       	pop	r0
    32b2:	0f 90       	pop	r0
    32b4:	df 91       	pop	r29
    32b6:	cf 91       	pop	r28
    32b8:	1f 91       	pop	r17
    32ba:	0f 91       	pop	r16
    32bc:	ff 90       	pop	r15
    32be:	df 90       	pop	r13
    32c0:	cf 90       	pop	r12
    32c2:	bf 90       	pop	r11
    32c4:	af 90       	pop	r10
    32c6:	08 95       	ret

000032c8 <scrollSoundList>:

void scrollSoundList(FIL *file,INPUT joy, struct family_entry *fam, struct sound_entry *snd,struct sound_file_ptr *sptr){	
    32c8:	4f 92       	push	r4
    32ca:	5f 92       	push	r5
    32cc:	6f 92       	push	r6
    32ce:	7f 92       	push	r7
    32d0:	9f 92       	push	r9
    32d2:	af 92       	push	r10
    32d4:	bf 92       	push	r11
    32d6:	cf 92       	push	r12
    32d8:	df 92       	push	r13
    32da:	ef 92       	push	r14
    32dc:	ff 92       	push	r15
    32de:	0f 93       	push	r16
    32e0:	1f 93       	push	r17
    32e2:	cf 93       	push	r28
    32e4:	df 93       	push	r29
    32e6:	00 d0       	rcall	.+0      	; 0x32e8 <scrollSoundList+0x20>
    32e8:	cd b7       	in	r28, 0x3d	; 61
    32ea:	de b7       	in	r29, 0x3e	; 62
    32ec:	5c 01       	movw	r10, r24
    32ee:	96 2e       	mov	r9, r22
    32f0:	7a 01       	movw	r14, r20
    32f2:	69 01       	movw	r12, r18
	UINT numOfBytes;
	sptr->next_family = sptr->current_family + sizeof(struct family_entry) + fam->current_sounds * sizeof(struct sound_entry);
    32f4:	f8 01       	movw	r30, r16
    32f6:	44 81       	ldd	r20, Z+4	; 0x04
    32f8:	55 81       	ldd	r21, Z+5	; 0x05
    32fa:	66 81       	ldd	r22, Z+6	; 0x06
    32fc:	77 81       	ldd	r23, Z+7	; 0x07
    32fe:	f7 01       	movw	r30, r14
    3300:	84 81       	ldd	r24, Z+4	; 0x04
    3302:	95 81       	ldd	r25, Z+5	; 0x05
    3304:	a6 81       	ldd	r26, Z+6	; 0x06
    3306:	b7 81       	ldd	r27, Z+7	; 0x07
    3308:	2c 01       	movw	r4, r24
    330a:	3d 01       	movw	r6, r26
    330c:	44 0c       	add	r4, r4
    330e:	55 1c       	adc	r5, r5
    3310:	66 1c       	adc	r6, r6
    3312:	77 1c       	adc	r7, r7
    3314:	44 0c       	add	r4, r4
    3316:	55 1c       	adc	r5, r5
    3318:	66 1c       	adc	r6, r6
    331a:	77 1c       	adc	r7, r7
    331c:	44 0c       	add	r4, r4
    331e:	55 1c       	adc	r5, r5
    3320:	66 1c       	adc	r6, r6
    3322:	77 1c       	adc	r7, r7
    3324:	84 0d       	add	r24, r4
    3326:	95 1d       	adc	r25, r5
    3328:	a6 1d       	adc	r26, r6
    332a:	b7 1d       	adc	r27, r7
    332c:	88 0f       	add	r24, r24
    332e:	99 1f       	adc	r25, r25
    3330:	aa 1f       	adc	r26, r26
    3332:	bb 1f       	adc	r27, r27
    3334:	2a 01       	movw	r4, r20
    3336:	3b 01       	movw	r6, r22
    3338:	f8 e1       	ldi	r31, 0x18	; 24
    333a:	4f 0e       	add	r4, r31
    333c:	51 1c       	adc	r5, r1
    333e:	61 1c       	adc	r6, r1
    3340:	71 1c       	adc	r7, r1
    3342:	84 0d       	add	r24, r4
    3344:	95 1d       	adc	r25, r5
    3346:	a6 1d       	adc	r26, r6
    3348:	b7 1d       	adc	r27, r7
    334a:	f8 01       	movw	r30, r16
    334c:	80 87       	std	Z+8, r24	; 0x08
    334e:	91 87       	std	Z+9, r25	; 0x09
    3350:	a2 87       	std	Z+10, r26	; 0x0a
    3352:	b3 87       	std	Z+11, r27	; 0x0b
	if(fam->previous_sounds != 0)
    3354:	f7 01       	movw	r30, r14
    3356:	80 81       	ld	r24, Z
    3358:	91 81       	ldd	r25, Z+1	; 0x01
    335a:	a2 81       	ldd	r26, Z+2	; 0x02
    335c:	b3 81       	ldd	r27, Z+3	; 0x03
    335e:	00 97       	sbiw	r24, 0x00	; 0
    3360:	a1 05       	cpc	r26, r1
    3362:	b1 05       	cpc	r27, r1
    3364:	19 f1       	breq	.+70     	; 0x33ac <scrollSoundList+0xe4>
	sptr->previous_family = sptr->current_family - fam->previous_sounds * sizeof(struct sound_entry) - sizeof(struct family_entry);
    3366:	48 51       	subi	r20, 0x18	; 24
    3368:	51 09       	sbc	r21, r1
    336a:	61 09       	sbc	r22, r1
    336c:	71 09       	sbc	r23, r1
    336e:	2c 01       	movw	r4, r24
    3370:	3d 01       	movw	r6, r26
    3372:	44 0c       	add	r4, r4
    3374:	55 1c       	adc	r5, r5
    3376:	66 1c       	adc	r6, r6
    3378:	77 1c       	adc	r7, r7
    337a:	44 0c       	add	r4, r4
    337c:	55 1c       	adc	r5, r5
    337e:	66 1c       	adc	r6, r6
    3380:	77 1c       	adc	r7, r7
    3382:	44 0c       	add	r4, r4
    3384:	55 1c       	adc	r5, r5
    3386:	66 1c       	adc	r6, r6
    3388:	77 1c       	adc	r7, r7
    338a:	84 0d       	add	r24, r4
    338c:	95 1d       	adc	r25, r5
    338e:	a6 1d       	adc	r26, r6
    3390:	b7 1d       	adc	r27, r7
    3392:	88 0f       	add	r24, r24
    3394:	99 1f       	adc	r25, r25
    3396:	aa 1f       	adc	r26, r26
    3398:	bb 1f       	adc	r27, r27
    339a:	48 1b       	sub	r20, r24
    339c:	59 0b       	sbc	r21, r25
    339e:	6a 0b       	sbc	r22, r26
    33a0:	7b 0b       	sbc	r23, r27
    33a2:	f8 01       	movw	r30, r16
    33a4:	40 83       	st	Z, r20
    33a6:	51 83       	std	Z+1, r21	; 0x01
    33a8:	62 83       	std	Z+2, r22	; 0x02
    33aa:	73 83       	std	Z+3, r23	; 0x03
	lcdClear();	
    33ac:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <lcdClear>
	switch(joy){
    33b0:	f5 e0       	ldi	r31, 0x05	; 5
    33b2:	9f 16       	cp	r9, r31
    33b4:	c9 f0       	breq	.+50     	; 0x33e8 <scrollSoundList+0x120>
    33b6:	f9 15       	cp	r31, r9
    33b8:	24 f0       	brlt	.+8      	; 0x33c2 <scrollSoundList+0xfa>
    33ba:	24 e0       	ldi	r18, 0x04	; 4
    33bc:	92 16       	cp	r9, r18
    33be:	59 f1       	breq	.+86     	; 0x3416 <scrollSoundList+0x14e>
    33c0:	56 c0       	rjmp	.+172    	; 0x346e <scrollSoundList+0x1a6>
    33c2:	86 e0       	ldi	r24, 0x06	; 6
    33c4:	98 16       	cp	r9, r24
    33c6:	c1 f1       	breq	.+112    	; 0x3438 <scrollSoundList+0x170>
    33c8:	e7 e0       	ldi	r30, 0x07	; 7
    33ca:	9e 12       	cpse	r9, r30
    33cc:	50 c0       	rjmp	.+160    	; 0x346e <scrollSoundList+0x1a6>
				break;
		case JOY_PRESS:
				break;
		case NONE: break;
		case JOY_LEFT:
			sptr->current_sound = 0;
    33ce:	f8 01       	movw	r30, r16
    33d0:	14 86       	std	Z+12, r1	; 0x0c
    33d2:	15 86       	std	Z+13, r1	; 0x0d
    33d4:	16 86       	std	Z+14, r1	; 0x0e
    33d6:	17 86       	std	Z+15, r1	; 0x0f
			f_lseek(file,sptr->previous_family);
    33d8:	40 81       	ld	r20, Z
    33da:	51 81       	ldd	r21, Z+1	; 0x01
    33dc:	62 81       	ldd	r22, Z+2	; 0x02
    33de:	73 81       	ldd	r23, Z+3	; 0x03
    33e0:	c5 01       	movw	r24, r10
    33e2:	0e 94 3e 14 	call	0x287c	; 0x287c <f_lseek>
			break;
    33e6:	43 c0       	rjmp	.+134    	; 0x346e <scrollSoundList+0x1a6>
		case JOY_RIGHT:
			sptr->current_sound = 0;
    33e8:	f8 01       	movw	r30, r16
    33ea:	14 86       	std	Z+12, r1	; 0x0c
    33ec:	15 86       	std	Z+13, r1	; 0x0d
    33ee:	16 86       	std	Z+14, r1	; 0x0e
    33f0:	17 86       	std	Z+15, r1	; 0x0f
			if(sptr->next_family < file->fsize)
    33f2:	40 85       	ldd	r20, Z+8	; 0x08
    33f4:	51 85       	ldd	r21, Z+9	; 0x09
    33f6:	62 85       	ldd	r22, Z+10	; 0x0a
    33f8:	73 85       	ldd	r23, Z+11	; 0x0b
    33fa:	f5 01       	movw	r30, r10
    33fc:	82 85       	ldd	r24, Z+10	; 0x0a
    33fe:	93 85       	ldd	r25, Z+11	; 0x0b
    3400:	a4 85       	ldd	r26, Z+12	; 0x0c
    3402:	b5 85       	ldd	r27, Z+13	; 0x0d
    3404:	48 17       	cp	r20, r24
    3406:	59 07       	cpc	r21, r25
    3408:	6a 07       	cpc	r22, r26
    340a:	7b 07       	cpc	r23, r27
    340c:	80 f5       	brcc	.+96     	; 0x346e <scrollSoundList+0x1a6>
				f_lseek(file,sptr->next_family);
    340e:	c5 01       	movw	r24, r10
    3410:	0e 94 3e 14 	call	0x287c	; 0x287c <f_lseek>
    3414:	2c c0       	rjmp	.+88     	; 0x346e <scrollSoundList+0x1a6>
			break;
		case JOY_UP:
			if(sptr->current_sound > 0)
    3416:	f8 01       	movw	r30, r16
    3418:	84 85       	ldd	r24, Z+12	; 0x0c
    341a:	95 85       	ldd	r25, Z+13	; 0x0d
    341c:	a6 85       	ldd	r26, Z+14	; 0x0e
    341e:	b7 85       	ldd	r27, Z+15	; 0x0f
    3420:	00 97       	sbiw	r24, 0x00	; 0
    3422:	a1 05       	cpc	r26, r1
    3424:	b1 05       	cpc	r27, r1
    3426:	19 f1       	breq	.+70     	; 0x346e <scrollSoundList+0x1a6>
				sptr->current_sound--;
    3428:	01 97       	sbiw	r24, 0x01	; 1
    342a:	a1 09       	sbc	r26, r1
    342c:	b1 09       	sbc	r27, r1
    342e:	84 87       	std	Z+12, r24	; 0x0c
    3430:	95 87       	std	Z+13, r25	; 0x0d
    3432:	a6 87       	std	Z+14, r26	; 0x0e
    3434:	b7 87       	std	Z+15, r27	; 0x0f
    3436:	1b c0       	rjmp	.+54     	; 0x346e <scrollSoundList+0x1a6>
			break;
		case JOY_DOWN:
			if(sptr->current_sound < (fam->current_sounds - 1))
    3438:	f8 01       	movw	r30, r16
    343a:	44 85       	ldd	r20, Z+12	; 0x0c
    343c:	55 85       	ldd	r21, Z+13	; 0x0d
    343e:	66 85       	ldd	r22, Z+14	; 0x0e
    3440:	77 85       	ldd	r23, Z+15	; 0x0f
    3442:	f7 01       	movw	r30, r14
    3444:	84 81       	ldd	r24, Z+4	; 0x04
    3446:	95 81       	ldd	r25, Z+5	; 0x05
    3448:	a6 81       	ldd	r26, Z+6	; 0x06
    344a:	b7 81       	ldd	r27, Z+7	; 0x07
    344c:	01 97       	sbiw	r24, 0x01	; 1
    344e:	a1 09       	sbc	r26, r1
    3450:	b1 09       	sbc	r27, r1
    3452:	48 17       	cp	r20, r24
    3454:	59 07       	cpc	r21, r25
    3456:	6a 07       	cpc	r22, r26
    3458:	7b 07       	cpc	r23, r27
    345a:	48 f4       	brcc	.+18     	; 0x346e <scrollSoundList+0x1a6>
				sptr->current_sound++;
    345c:	4f 5f       	subi	r20, 0xFF	; 255
    345e:	5f 4f       	sbci	r21, 0xFF	; 255
    3460:	6f 4f       	sbci	r22, 0xFF	; 255
    3462:	7f 4f       	sbci	r23, 0xFF	; 255
    3464:	f8 01       	movw	r30, r16
    3466:	44 87       	std	Z+12, r20	; 0x0c
    3468:	55 87       	std	Z+13, r21	; 0x0d
    346a:	66 87       	std	Z+14, r22	; 0x0e
    346c:	77 87       	std	Z+15, r23	; 0x0f
			break;

	}

		sptr->current_family = f_tell(file);
    346e:	f5 01       	movw	r30, r10
    3470:	86 81       	ldd	r24, Z+6	; 0x06
    3472:	97 81       	ldd	r25, Z+7	; 0x07
    3474:	a0 85       	ldd	r26, Z+8	; 0x08
    3476:	b1 85       	ldd	r27, Z+9	; 0x09
    3478:	f8 01       	movw	r30, r16
    347a:	84 83       	std	Z+4, r24	; 0x04
    347c:	95 83       	std	Z+5, r25	; 0x05
    347e:	a6 83       	std	Z+6, r26	; 0x06
    3480:	b7 83       	std	Z+7, r27	; 0x07
		f_read(file,fam,sizeof(struct family_entry),&numOfBytes);		
    3482:	9e 01       	movw	r18, r28
    3484:	2f 5f       	subi	r18, 0xFF	; 255
    3486:	3f 4f       	sbci	r19, 0xFF	; 255
    3488:	48 e1       	ldi	r20, 0x18	; 24
    348a:	50 e0       	ldi	r21, 0x00	; 0
    348c:	b7 01       	movw	r22, r14
    348e:	c5 01       	movw	r24, r10
    3490:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
		lcdGotoXY(0,0);
    3494:	60 e0       	ldi	r22, 0x00	; 0
    3496:	80 e0       	ldi	r24, 0x00	; 0
    3498:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <lcdGotoXY>
		lcdPrintData(fam->name,strlen(fam->name));
    349c:	c7 01       	movw	r24, r14
    349e:	08 96       	adiw	r24, 0x08	; 8
    34a0:	fc 01       	movw	r30, r24
    34a2:	01 90       	ld	r0, Z+
    34a4:	00 20       	and	r0, r0
    34a6:	e9 f7       	brne	.-6      	; 0x34a2 <scrollSoundList+0x1da>
    34a8:	31 97       	sbiw	r30, 0x01	; 1
    34aa:	bf 01       	movw	r22, r30
    34ac:	68 1b       	sub	r22, r24
    34ae:	79 0b       	sbc	r23, r25
    34b0:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <lcdPrintData>
		f_lseek(file,sptr->current_family + sizeof(struct family_entry) + sptr->current_sound * sizeof(struct sound_entry));
    34b4:	f8 01       	movw	r30, r16
    34b6:	84 85       	ldd	r24, Z+12	; 0x0c
    34b8:	95 85       	ldd	r25, Z+13	; 0x0d
    34ba:	a6 85       	ldd	r26, Z+14	; 0x0e
    34bc:	b7 85       	ldd	r27, Z+15	; 0x0f
    34be:	ac 01       	movw	r20, r24
    34c0:	bd 01       	movw	r22, r26
    34c2:	44 0f       	add	r20, r20
    34c4:	55 1f       	adc	r21, r21
    34c6:	66 1f       	adc	r22, r22
    34c8:	77 1f       	adc	r23, r23
    34ca:	44 0f       	add	r20, r20
    34cc:	55 1f       	adc	r21, r21
    34ce:	66 1f       	adc	r22, r22
    34d0:	77 1f       	adc	r23, r23
    34d2:	44 0f       	add	r20, r20
    34d4:	55 1f       	adc	r21, r21
    34d6:	66 1f       	adc	r22, r22
    34d8:	77 1f       	adc	r23, r23
    34da:	84 0f       	add	r24, r20
    34dc:	95 1f       	adc	r25, r21
    34de:	a6 1f       	adc	r26, r22
    34e0:	b7 1f       	adc	r27, r23
    34e2:	88 0f       	add	r24, r24
    34e4:	99 1f       	adc	r25, r25
    34e6:	aa 1f       	adc	r26, r26
    34e8:	bb 1f       	adc	r27, r27
    34ea:	44 81       	ldd	r20, Z+4	; 0x04
    34ec:	55 81       	ldd	r21, Z+5	; 0x05
    34ee:	66 81       	ldd	r22, Z+6	; 0x06
    34f0:	77 81       	ldd	r23, Z+7	; 0x07
    34f2:	48 5e       	subi	r20, 0xE8	; 232
    34f4:	5f 4f       	sbci	r21, 0xFF	; 255
    34f6:	6f 4f       	sbci	r22, 0xFF	; 255
    34f8:	7f 4f       	sbci	r23, 0xFF	; 255
    34fa:	48 0f       	add	r20, r24
    34fc:	59 1f       	adc	r21, r25
    34fe:	6a 1f       	adc	r22, r26
    3500:	7b 1f       	adc	r23, r27
    3502:	c5 01       	movw	r24, r10
    3504:	0e 94 3e 14 	call	0x287c	; 0x287c <f_lseek>
		f_read(file,snd,sizeof(struct sound_entry),&numOfBytes);
    3508:	9e 01       	movw	r18, r28
    350a:	2f 5f       	subi	r18, 0xFF	; 255
    350c:	3f 4f       	sbci	r19, 0xFF	; 255
    350e:	42 e1       	ldi	r20, 0x12	; 18
    3510:	50 e0       	ldi	r21, 0x00	; 0
    3512:	b6 01       	movw	r22, r12
    3514:	c5 01       	movw	r24, r10
    3516:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
		f_lseek(file,sptr->current_family);
    351a:	f8 01       	movw	r30, r16
    351c:	44 81       	ldd	r20, Z+4	; 0x04
    351e:	55 81       	ldd	r21, Z+5	; 0x05
    3520:	66 81       	ldd	r22, Z+6	; 0x06
    3522:	77 81       	ldd	r23, Z+7	; 0x07
    3524:	c5 01       	movw	r24, r10
    3526:	0e 94 3e 14 	call	0x287c	; 0x287c <f_lseek>
		lcdGotoXY(0,1);
    352a:	61 e0       	ldi	r22, 0x01	; 1
    352c:	80 e0       	ldi	r24, 0x00	; 0
    352e:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <lcdGotoXY>
		lcdPrintData(snd->name,strlen(snd->name));
    3532:	c6 01       	movw	r24, r12
    3534:	02 96       	adiw	r24, 0x02	; 2
    3536:	fc 01       	movw	r30, r24
    3538:	01 90       	ld	r0, Z+
    353a:	00 20       	and	r0, r0
    353c:	e9 f7       	brne	.-6      	; 0x3538 <scrollSoundList+0x270>
    353e:	31 97       	sbiw	r30, 0x01	; 1
    3540:	bf 01       	movw	r22, r30
    3542:	68 1b       	sub	r22, r24
    3544:	79 0b       	sbc	r23, r25
    3546:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <lcdPrintData>
		
}
    354a:	0f 90       	pop	r0
    354c:	0f 90       	pop	r0
    354e:	df 91       	pop	r29
    3550:	cf 91       	pop	r28
    3552:	1f 91       	pop	r17
    3554:	0f 91       	pop	r16
    3556:	ff 90       	pop	r15
    3558:	ef 90       	pop	r14
    355a:	df 90       	pop	r13
    355c:	cf 90       	pop	r12
    355e:	bf 90       	pop	r11
    3560:	af 90       	pop	r10
    3562:	9f 90       	pop	r9
    3564:	7f 90       	pop	r7
    3566:	6f 90       	pop	r6
    3568:	5f 90       	pop	r5
    356a:	4f 90       	pop	r4
    356c:	08 95       	ret

0000356e <handleFileList>:

void handleFileList(unsigned char currentMode,unsigned char currentAction,unsigned char index,unsigned char number,char (*list)[MAX_FNAME]){
    356e:	af 92       	push	r10
    3570:	bf 92       	push	r11
    3572:	cf 92       	push	r12
    3574:	df 92       	push	r13
    3576:	ef 92       	push	r14
    3578:	ff 92       	push	r15
    357a:	0f 93       	push	r16
    357c:	1f 93       	push	r17
    357e:	cf 93       	push	r28
    3580:	df 93       	push	r29
    3582:	00 d0       	rcall	.+0      	; 0x3584 <handleFileList+0x16>
    3584:	00 d0       	rcall	.+0      	; 0x3586 <handleFileList+0x18>
    3586:	cd b7       	in	r28, 0x3d	; 61
    3588:	de b7       	in	r29, 0x3e	; 62
    358a:	f4 2e       	mov	r15, r20
    358c:	e2 2e       	mov	r14, r18
	unsigned char tmp = index - (index % 2);
	char *ch[2] = {"*"," "};
    358e:	83 e3       	ldi	r24, 0x33	; 51
    3590:	91 e0       	ldi	r25, 0x01	; 1
    3592:	9a 83       	std	Y+2, r25	; 0x02
    3594:	89 83       	std	Y+1, r24	; 0x01
    3596:	85 e3       	ldi	r24, 0x35	; 53
    3598:	91 e0       	ldi	r25, 0x01	; 1
    359a:	9c 83       	std	Y+4, r25	; 0x04
    359c:	8b 83       	std	Y+3, r24	; 0x03
	
	lcdGotoXY(0,0);
    359e:	60 e0       	ldi	r22, 0x00	; 0
    35a0:	80 e0       	ldi	r24, 0x00	; 0
    35a2:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <lcdGotoXY>
	if(number == 0){
    35a6:	e1 10       	cpse	r14, r1
    35a8:	09 c0       	rjmp	.+18     	; 0x35bc <handleFileList+0x4e>
		lcdPrintData(getLCDString(NO_SND,NO_SND_LEN),NO_SND_LEN);
    35aa:	69 e0       	ldi	r22, 0x09	; 9
    35ac:	82 e7       	ldi	r24, 0x72	; 114
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    35b4:	69 e0       	ldi	r22, 0x09	; 9
    35b6:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <lcdPrintData>
    35ba:	56 c0       	rjmp	.+172    	; 0x3668 <handleFileList+0xfa>
		return;
	}
	
	lcdGotoXY(1,0);
    35bc:	60 e0       	ldi	r22, 0x00	; 0
    35be:	81 e0       	ldi	r24, 0x01	; 1
    35c0:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <lcdGotoXY>
	lcdPrintData(list[tmp],strlen(list[tmp]));
    35c4:	8f 2d       	mov	r24, r15
    35c6:	8e 7f       	andi	r24, 0xFE	; 254
    35c8:	90 e1       	ldi	r25, 0x10	; 16
    35ca:	89 9f       	mul	r24, r25
    35cc:	50 01       	movw	r10, r0
    35ce:	11 24       	eor	r1, r1
    35d0:	c8 01       	movw	r24, r16
    35d2:	8a 0d       	add	r24, r10
    35d4:	9b 1d       	adc	r25, r11
    35d6:	fc 01       	movw	r30, r24
    35d8:	01 90       	ld	r0, Z+
    35da:	00 20       	and	r0, r0
    35dc:	e9 f7       	brne	.-6      	; 0x35d8 <handleFileList+0x6a>
    35de:	31 97       	sbiw	r30, 0x01	; 1
    35e0:	bf 01       	movw	r22, r30
    35e2:	68 1b       	sub	r22, r24
    35e4:	79 0b       	sbc	r23, r25
    35e6:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <lcdPrintData>
	lcdGotoXY(0,0);
    35ea:	60 e0       	ldi	r22, 0x00	; 0
    35ec:	80 e0       	ldi	r24, 0x00	; 0
    35ee:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <lcdGotoXY>
	lcdPrintData(ch[index % 2],1);
    35f2:	f0 fa       	bst	r15, 0
    35f4:	cc 24       	eor	r12, r12
    35f6:	c0 f8       	bld	r12, 0
    35f8:	d1 2c       	mov	r13, r1
    35fa:	cc 0c       	add	r12, r12
    35fc:	dd 1c       	adc	r13, r13
    35fe:	fe 01       	movw	r30, r28
    3600:	ec 0d       	add	r30, r12
    3602:	fd 1d       	adc	r31, r13
    3604:	61 e0       	ldi	r22, 0x01	; 1
    3606:	81 81       	ldd	r24, Z+1	; 0x01
    3608:	92 81       	ldd	r25, Z+2	; 0x02
    360a:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <lcdPrintData>
	if(index < number){
    360e:	fe 14       	cp	r15, r14
    3610:	58 f5       	brcc	.+86     	; 0x3668 <handleFileList+0xfa>
		lcdGotoXY(1,1);
    3612:	61 e0       	ldi	r22, 0x01	; 1
    3614:	81 e0       	ldi	r24, 0x01	; 1
    3616:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <lcdGotoXY>
		lcdPrintData(list[tmp + 1],strlen(list[tmp + 1]));
    361a:	c5 01       	movw	r24, r10
    361c:	40 96       	adiw	r24, 0x10	; 16
    361e:	80 0f       	add	r24, r16
    3620:	91 1f       	adc	r25, r17
    3622:	fc 01       	movw	r30, r24
    3624:	01 90       	ld	r0, Z+
    3626:	00 20       	and	r0, r0
    3628:	e9 f7       	brne	.-6      	; 0x3624 <handleFileList+0xb6>
    362a:	31 97       	sbiw	r30, 0x01	; 1
    362c:	bf 01       	movw	r22, r30
    362e:	68 1b       	sub	r22, r24
    3630:	79 0b       	sbc	r23, r25
    3632:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <lcdPrintData>
		lcdGotoXY(0,1);
    3636:	61 e0       	ldi	r22, 0x01	; 1
    3638:	80 e0       	ldi	r24, 0x00	; 0
    363a:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <lcdGotoXY>
		lcdPrintData(ch[(index + 1) % 2],1);
    363e:	8f 2d       	mov	r24, r15
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	01 96       	adiw	r24, 0x01	; 1
    3644:	81 70       	andi	r24, 0x01	; 1
    3646:	90 78       	andi	r25, 0x80	; 128
    3648:	99 23       	and	r25, r25
    364a:	24 f4       	brge	.+8      	; 0x3654 <handleFileList+0xe6>
    364c:	01 97       	sbiw	r24, 0x01	; 1
    364e:	8e 6f       	ori	r24, 0xFE	; 254
    3650:	9f 6f       	ori	r25, 0xFF	; 255
    3652:	01 96       	adiw	r24, 0x01	; 1
    3654:	88 0f       	add	r24, r24
    3656:	99 1f       	adc	r25, r25
    3658:	fe 01       	movw	r30, r28
    365a:	e8 0f       	add	r30, r24
    365c:	f9 1f       	adc	r31, r25
    365e:	61 e0       	ldi	r22, 0x01	; 1
    3660:	81 81       	ldd	r24, Z+1	; 0x01
    3662:	92 81       	ldd	r25, Z+2	; 0x02
    3664:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <lcdPrintData>
	}
}
    3668:	0f 90       	pop	r0
    366a:	0f 90       	pop	r0
    366c:	0f 90       	pop	r0
    366e:	0f 90       	pop	r0
    3670:	df 91       	pop	r29
    3672:	cf 91       	pop	r28
    3674:	1f 91       	pop	r17
    3676:	0f 91       	pop	r16
    3678:	ff 90       	pop	r15
    367a:	ef 90       	pop	r14
    367c:	df 90       	pop	r13
    367e:	cf 90       	pop	r12
    3680:	bf 90       	pop	r11
    3682:	af 90       	pop	r10
    3684:	08 95       	ret

00003686 <writeMidi>:

void writeMidi(FIL *file){
    3686:	08 95       	ret

00003688 <lcdInitHW>:
}

void lcdHome(void)
{
	// move cursor to home
	lcdControlWrite(1<<LCD_HOME);
    3688:	92 98       	cbi	0x12, 2	; 18
    368a:	93 98       	cbi	0x12, 3	; 18
    368c:	94 98       	cbi	0x12, 4	; 18
    368e:	8a 9a       	sbi	0x11, 2	; 17
    3690:	8b 9a       	sbi	0x11, 3	; 17
    3692:	8c 9a       	sbi	0x11, 4	; 17
    3694:	8a b3       	in	r24, 0x1a	; 26
    3696:	8f 70       	andi	r24, 0x0F	; 15
    3698:	8a bb       	out	0x1a, r24	; 26
    369a:	8b b3       	in	r24, 0x1b	; 27
    369c:	80 6f       	ori	r24, 0xF0	; 240
    369e:	8b bb       	out	0x1b, r24	; 27
    36a0:	08 95       	ret

000036a2 <lcdBusyWait>:
    36a2:	92 98       	cbi	0x12, 2	; 18
    36a4:	8a b3       	in	r24, 0x1a	; 26
    36a6:	8f 70       	andi	r24, 0x0F	; 15
    36a8:	8a bb       	out	0x1a, r24	; 26
    36aa:	8b b3       	in	r24, 0x1b	; 27
    36ac:	80 6f       	ori	r24, 0xF0	; 240
    36ae:	8b bb       	out	0x1b, r24	; 27
    36b0:	93 9a       	sbi	0x12, 3	; 18
    36b2:	94 9a       	sbi	0x12, 4	; 18
	...
    36d0:	cf 9b       	sbis	0x19, 7	; 25
    36d2:	76 c0       	rjmp	.+236    	; 0x37c0 <lcdBusyWait+0x11e>
    36d4:	94 98       	cbi	0x12, 4	; 18
	...
    370e:	94 9a       	sbi	0x12, 4	; 18
	...
    3748:	94 98       	cbi	0x12, 4	; 18
	...
    3782:	94 9a       	sbi	0x12, 4	; 18
	...
    37bc:	cf 99       	sbic	0x19, 7	; 25
    37be:	8a cf       	rjmp	.-236    	; 0x36d4 <lcdBusyWait+0x32>
    37c0:	94 98       	cbi	0x12, 4	; 18
    37c2:	08 95       	ret

000037c4 <lcdControlWrite>:
    37c4:	cf 93       	push	r28
    37c6:	c8 2f       	mov	r28, r24
    37c8:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <lcdBusyWait>
    37cc:	92 98       	cbi	0x12, 2	; 18
    37ce:	93 98       	cbi	0x12, 3	; 18
    37d0:	94 9a       	sbi	0x12, 4	; 18
    37d2:	8a b3       	in	r24, 0x1a	; 26
    37d4:	80 6f       	ori	r24, 0xF0	; 240
    37d6:	8a bb       	out	0x1a, r24	; 26
    37d8:	8b b3       	in	r24, 0x1b	; 27
    37da:	8f 70       	andi	r24, 0x0F	; 15
    37dc:	9c 2f       	mov	r25, r28
    37de:	90 7f       	andi	r25, 0xF0	; 240
    37e0:	89 2b       	or	r24, r25
    37e2:	8b bb       	out	0x1b, r24	; 27
	...
    381c:	94 98       	cbi	0x12, 4	; 18
	...
    3856:	94 9a       	sbi	0x12, 4	; 18
    3858:	8b b3       	in	r24, 0x1b	; 27
    385a:	28 2f       	mov	r18, r24
    385c:	2f 70       	andi	r18, 0x0F	; 15
    385e:	30 e1       	ldi	r19, 0x10	; 16
    3860:	c3 9f       	mul	r28, r19
    3862:	c0 01       	movw	r24, r0
    3864:	11 24       	eor	r1, r1
    3866:	82 2b       	or	r24, r18
    3868:	8b bb       	out	0x1b, r24	; 27
	...
    38a2:	94 98       	cbi	0x12, 4	; 18
    38a4:	8a b3       	in	r24, 0x1a	; 26
    38a6:	8f 70       	andi	r24, 0x0F	; 15
    38a8:	8a bb       	out	0x1a, r24	; 26
    38aa:	8b b3       	in	r24, 0x1b	; 27
    38ac:	80 6f       	ori	r24, 0xF0	; 240
    38ae:	8b bb       	out	0x1b, r24	; 27
    38b0:	cf 91       	pop	r28
    38b2:	08 95       	ret

000038b4 <lcdControlRead>:
    38b4:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <lcdBusyWait>
    38b8:	8a b3       	in	r24, 0x1a	; 26
    38ba:	8f 70       	andi	r24, 0x0F	; 15
    38bc:	8a bb       	out	0x1a, r24	; 26
    38be:	8b b3       	in	r24, 0x1b	; 27
    38c0:	80 6f       	ori	r24, 0xF0	; 240
    38c2:	8b bb       	out	0x1b, r24	; 27
    38c4:	92 98       	cbi	0x12, 2	; 18
    38c6:	93 9a       	sbi	0x12, 3	; 18
    38c8:	94 9a       	sbi	0x12, 4	; 18
	...
    3902:	99 b3       	in	r25, 0x19	; 25
    3904:	94 98       	cbi	0x12, 4	; 18
	...
    393e:	94 9a       	sbi	0x12, 4	; 18
	...
    3978:	29 b3       	in	r18, 0x19	; 25
    397a:	22 95       	swap	r18
    397c:	2f 70       	andi	r18, 0x0F	; 15
    397e:	89 2f       	mov	r24, r25
    3980:	80 7f       	andi	r24, 0xF0	; 240
    3982:	94 98       	cbi	0x12, 4	; 18
    3984:	82 2b       	or	r24, r18
    3986:	08 95       	ret

00003988 <lcdDataWrite>:
    3988:	cf 93       	push	r28
    398a:	c8 2f       	mov	r28, r24
    398c:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <lcdBusyWait>
    3990:	92 9a       	sbi	0x12, 2	; 18
    3992:	93 98       	cbi	0x12, 3	; 18
    3994:	94 9a       	sbi	0x12, 4	; 18
    3996:	8a b3       	in	r24, 0x1a	; 26
    3998:	80 6f       	ori	r24, 0xF0	; 240
    399a:	8a bb       	out	0x1a, r24	; 26
    399c:	8b b3       	in	r24, 0x1b	; 27
    399e:	8f 70       	andi	r24, 0x0F	; 15
    39a0:	9c 2f       	mov	r25, r28
    39a2:	90 7f       	andi	r25, 0xF0	; 240
    39a4:	89 2b       	or	r24, r25
    39a6:	8b bb       	out	0x1b, r24	; 27
	...
    39e0:	94 98       	cbi	0x12, 4	; 18
	...
    3a1a:	94 9a       	sbi	0x12, 4	; 18
    3a1c:	8b b3       	in	r24, 0x1b	; 27
    3a1e:	28 2f       	mov	r18, r24
    3a20:	2f 70       	andi	r18, 0x0F	; 15
    3a22:	30 e1       	ldi	r19, 0x10	; 16
    3a24:	c3 9f       	mul	r28, r19
    3a26:	c0 01       	movw	r24, r0
    3a28:	11 24       	eor	r1, r1
    3a2a:	82 2b       	or	r24, r18
    3a2c:	8b bb       	out	0x1b, r24	; 27
	...
    3a66:	94 98       	cbi	0x12, 4	; 18
    3a68:	8a b3       	in	r24, 0x1a	; 26
    3a6a:	8f 70       	andi	r24, 0x0F	; 15
    3a6c:	8a bb       	out	0x1a, r24	; 26
    3a6e:	8b b3       	in	r24, 0x1b	; 27
    3a70:	80 6f       	ori	r24, 0xF0	; 240
    3a72:	8b bb       	out	0x1b, r24	; 27
    3a74:	cf 91       	pop	r28
    3a76:	08 95       	ret

00003a78 <lcdClear>:
}

void lcdClear(void)
{
	// clear LCD
	lcdControlWrite(1<<LCD_CLR);
    3a78:	81 e0       	ldi	r24, 0x01	; 1
    3a7a:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <lcdControlWrite>
    3a7e:	08 95       	ret

00003a80 <lcdGotoXY>:
void lcdGotoXY(u08 x, u08 y)
{
	register u08 DDRAMAddr;

	// remap lines into proper order
	switch(y)
    3a80:	62 30       	cpi	r22, 0x02	; 2
    3a82:	31 f0       	breq	.+12     	; 0x3a90 <lcdGotoXY+0x10>
    3a84:	63 30       	cpi	r22, 0x03	; 3
    3a86:	31 f0       	breq	.+12     	; 0x3a94 <lcdGotoXY+0x14>
    3a88:	61 30       	cpi	r22, 0x01	; 1
    3a8a:	29 f4       	brne	.+10     	; 0x3a96 <lcdGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    3a8c:	80 5c       	subi	r24, 0xC0	; 192
    3a8e:	03 c0       	rjmp	.+6      	; 0x3a96 <lcdGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    3a90:	8c 5e       	subi	r24, 0xEC	; 236
    3a92:	01 c0       	rjmp	.+2      	; 0x3a96 <lcdGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    3a94:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}

	// set data address
	lcdControlWrite(1<<LCD_DDRAM | DDRAMAddr);
    3a96:	80 68       	ori	r24, 0x80	; 128
    3a98:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <lcdControlWrite>
    3a9c:	08 95       	ret

00003a9e <lcdLoadCustomChar>:
}

void lcdLoadCustomChar(u08* lcdCustomCharArray, u08 romCharNum, u08 lcdCharNum)
{
    3a9e:	0f 93       	push	r16
    3aa0:	1f 93       	push	r17
    3aa2:	cf 93       	push	r28
    3aa4:	df 93       	push	r29
    3aa6:	00 d0       	rcall	.+0      	; 0x3aa8 <lcdLoadCustomChar+0xa>
    3aa8:	1f 92       	push	r1
    3aaa:	cd b7       	in	r28, 0x3d	; 61
    3aac:	de b7       	in	r29, 0x3e	; 62
    3aae:	8c 01       	movw	r16, r24
    3ab0:	6b 83       	std	Y+3, r22	; 0x03
    3ab2:	4a 83       	std	Y+2, r20	; 0x02
	register u08 i;
	u08 saveDDRAMAddr;

	// backup the current cursor position
	saveDDRAMAddr = lcdControlRead() & 0x7F;
    3ab4:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <lcdControlRead>
    3ab8:	8f 77       	andi	r24, 0x7F	; 127
    3aba:	89 83       	std	Y+1, r24	; 0x01

	// multiply the character index by 8
	lcdCharNum = (lcdCharNum<<3);	// each character occupies 8 bytes
    3abc:	8a 81       	ldd	r24, Y+2	; 0x02
    3abe:	88 0f       	add	r24, r24
    3ac0:	88 0f       	add	r24, r24
    3ac2:	88 0f       	add	r24, r24
    3ac4:	8a 83       	std	Y+2, r24	; 0x02
    3ac6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ac8:	99 0f       	add	r25, r25
    3aca:	99 0f       	add	r25, r25
    3acc:	99 0f       	add	r25, r25
    3ace:	09 0f       	add	r16, r25
    3ad0:	11 1d       	adc	r17, r1
    3ad2:	88 5f       	subi	r24, 0xF8	; 248
    3ad4:	8b 83       	std	Y+3, r24	; 0x03

	// copy the 8 bytes into CG (character generator) RAM
	for(i=0; i<8; i++)
	{
		// set CG RAM address
		lcdControlWrite((1<<LCD_CGRAM) | (lcdCharNum+i));
    3ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad8:	80 64       	ori	r24, 0x40	; 64
    3ada:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <lcdControlWrite>
		// write character data
		lcdDataWrite( pgm_read_byte(lcdCustomCharArray+romCharNum+i) );
    3ade:	f8 01       	movw	r30, r16
    3ae0:	84 91       	lpm	r24, Z
    3ae2:	0e 94 c4 1c 	call	0x3988	; 0x3988 <lcdDataWrite>
    3ae6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ae8:	ff 5f       	subi	r31, 0xFF	; 255
    3aea:	fa 83       	std	Y+2, r31	; 0x02
    3aec:	0f 5f       	subi	r16, 0xFF	; 255
    3aee:	1f 4f       	sbci	r17, 0xFF	; 255
	// multiply the character index by 8
	lcdCharNum = (lcdCharNum<<3);	// each character occupies 8 bytes
	romCharNum = (romCharNum<<3);	// each character occupies 8 bytes

	// copy the 8 bytes into CG (character generator) RAM
	for(i=0; i<8; i++)
    3af0:	8b 81       	ldd	r24, Y+3	; 0x03
    3af2:	f8 13       	cpse	r31, r24
    3af4:	f0 cf       	rjmp	.-32     	; 0x3ad6 <lcdLoadCustomChar+0x38>
		// write character data
		lcdDataWrite( pgm_read_byte(lcdCustomCharArray+romCharNum+i) );
	}

	// restore the previous cursor position
	lcdControlWrite(1<<LCD_DDRAM | saveDDRAMAddr);
    3af6:	89 81       	ldd	r24, Y+1	; 0x01
    3af8:	80 68       	ori	r24, 0x80	; 128
    3afa:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <lcdControlWrite>

}
    3afe:	0f 90       	pop	r0
    3b00:	0f 90       	pop	r0
    3b02:	0f 90       	pop	r0
    3b04:	df 91       	pop	r29
    3b06:	cf 91       	pop	r28
    3b08:	1f 91       	pop	r17
    3b0a:	0f 91       	pop	r16
    3b0c:	08 95       	ret

00003b0e <lcdInit>:
/*************************************************************/

void lcdInit()
{
	// initialize hardware
	lcdInitHW();
    3b0e:	0e 94 44 1b 	call	0x3688	; 0x3688 <lcdInitHW>
	// LCD function set
	lcdControlWrite(LCD_FUNCTION_DEFAULT);
    3b12:	88 e2       	ldi	r24, 0x28	; 40
    3b14:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <lcdControlWrite>
	// clear LCD
	lcdControlWrite(1<<LCD_CLR);
    3b18:	81 e0       	ldi	r24, 0x01	; 1
    3b1a:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <lcdControlWrite>
	delay(60000);	// wait 60ms
    3b1e:	80 e6       	ldi	r24, 0x60	; 96
    3b20:	9a ee       	ldi	r25, 0xEA	; 234
    3b22:	0e 94 5f 31 	call	0x62be	; 0x62be <delay_us>
	// set entry mode
	lcdControlWrite(1<<LCD_ENTRY_MODE | 1<<LCD_ENTRY_INC);
    3b26:	86 e0       	ldi	r24, 0x06	; 6
    3b28:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <lcdControlWrite>
	// set display to on
	//lcdControlWrite(1<<LCD_ON_CTRL | 1<<LCD_ON_DISPLAY | 1<<LCD_ON_BLINK);
	lcdControlWrite(1<<LCD_ON_CTRL | 1<<LCD_ON_DISPLAY );
    3b2c:	8c e0       	ldi	r24, 0x0C	; 12
    3b2e:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <lcdControlWrite>
	// move cursor to home
	lcdControlWrite(1<<LCD_HOME);
    3b32:	82 e0       	ldi	r24, 0x02	; 2
    3b34:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <lcdControlWrite>
	// set data address to 0
	lcdControlWrite(1<<LCD_DDRAM | 0x00);
    3b38:	80 e8       	ldi	r24, 0x80	; 128
    3b3a:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <lcdControlWrite>

	// load the first 8 custom characters
	lcdLoadCustomChar((u08*)LcdCustomChar,0,0);
    3b3e:	40 e0       	ldi	r20, 0x00	; 0
    3b40:	60 e0       	ldi	r22, 0x00	; 0
    3b42:	86 e8       	ldi	r24, 0x86	; 134
    3b44:	91 e0       	ldi	r25, 0x01	; 1
    3b46:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,1,1);
    3b4a:	41 e0       	ldi	r20, 0x01	; 1
    3b4c:	61 e0       	ldi	r22, 0x01	; 1
    3b4e:	86 e8       	ldi	r24, 0x86	; 134
    3b50:	91 e0       	ldi	r25, 0x01	; 1
    3b52:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,2,2);
    3b56:	42 e0       	ldi	r20, 0x02	; 2
    3b58:	62 e0       	ldi	r22, 0x02	; 2
    3b5a:	86 e8       	ldi	r24, 0x86	; 134
    3b5c:	91 e0       	ldi	r25, 0x01	; 1
    3b5e:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,3,3);
    3b62:	43 e0       	ldi	r20, 0x03	; 3
    3b64:	63 e0       	ldi	r22, 0x03	; 3
    3b66:	86 e8       	ldi	r24, 0x86	; 134
    3b68:	91 e0       	ldi	r25, 0x01	; 1
    3b6a:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,4,4);
    3b6e:	44 e0       	ldi	r20, 0x04	; 4
    3b70:	64 e0       	ldi	r22, 0x04	; 4
    3b72:	86 e8       	ldi	r24, 0x86	; 134
    3b74:	91 e0       	ldi	r25, 0x01	; 1
    3b76:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,5,5);
    3b7a:	45 e0       	ldi	r20, 0x05	; 5
    3b7c:	65 e0       	ldi	r22, 0x05	; 5
    3b7e:	86 e8       	ldi	r24, 0x86	; 134
    3b80:	91 e0       	ldi	r25, 0x01	; 1
    3b82:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,6,6);
    3b86:	46 e0       	ldi	r20, 0x06	; 6
    3b88:	66 e0       	ldi	r22, 0x06	; 6
    3b8a:	86 e8       	ldi	r24, 0x86	; 134
    3b8c:	91 e0       	ldi	r25, 0x01	; 1
    3b8e:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,7,7);
    3b92:	47 e0       	ldi	r20, 0x07	; 7
    3b94:	67 e0       	ldi	r22, 0x07	; 7
    3b96:	86 e8       	ldi	r24, 0x86	; 134
    3b98:	91 e0       	ldi	r25, 0x01	; 1
    3b9a:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <lcdLoadCustomChar>
    3b9e:	08 95       	ret

00003ba0 <lcdPrintData>:
	lcdControlWrite(1<<LCD_DDRAM | saveDDRAMAddr);

}

void lcdPrintData(char* data, u08 nBytes)
{
    3ba0:	0f 93       	push	r16
    3ba2:	1f 93       	push	r17
    3ba4:	cf 93       	push	r28
    3ba6:	df 93       	push	r29
	register u08 i;

	// check to make sure we have a good pointer
	if (!data) return;
    3ba8:	00 97       	sbiw	r24, 0x00	; 0
    3baa:	81 f0       	breq	.+32     	; 0x3bcc <lcdPrintData+0x2c>

	// print data
	for(i=0; i<nBytes; i++)
    3bac:	66 23       	and	r22, r22
    3bae:	71 f0       	breq	.+28     	; 0x3bcc <lcdPrintData+0x2c>
    3bb0:	ec 01       	movw	r28, r24
    3bb2:	61 50       	subi	r22, 0x01	; 1
    3bb4:	06 2f       	mov	r16, r22
    3bb6:	10 e0       	ldi	r17, 0x00	; 0
    3bb8:	0f 5f       	subi	r16, 0xFF	; 255
    3bba:	1f 4f       	sbci	r17, 0xFF	; 255
    3bbc:	08 0f       	add	r16, r24
    3bbe:	19 1f       	adc	r17, r25
	{
		lcdDataWrite(data[i]);
    3bc0:	89 91       	ld	r24, Y+
    3bc2:	0e 94 c4 1c 	call	0x3988	; 0x3988 <lcdDataWrite>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    3bc6:	c0 17       	cp	r28, r16
    3bc8:	d1 07       	cpc	r29, r17
    3bca:	d1 f7       	brne	.-12     	; 0x3bc0 <lcdPrintData+0x20>
	{
		lcdDataWrite(data[i]);
	}
}
    3bcc:	df 91       	pop	r29
    3bce:	cf 91       	pop	r28
    3bd0:	1f 91       	pop	r17
    3bd2:	0f 91       	pop	r16
    3bd4:	08 95       	ret

00003bd6 <main>:
#define MIDI_FILE	0
#define SOUND_FILE	1
FATFS Fatfs;

int main(void)
{
    3bd6:	cf 93       	push	r28
    3bd8:	df 93       	push	r29
    3bda:	cd b7       	in	r28, 0x3d	; 61
    3bdc:	de b7       	in	r29, 0x3e	; 62
    3bde:	c2 57       	subi	r28, 0x72	; 114
    3be0:	d2 40       	sbci	r29, 0x02	; 2
    3be2:	0f b6       	in	r0, 0x3f	; 63
    3be4:	f8 94       	cli
    3be6:	de bf       	out	0x3e, r29	; 62
    3be8:	0f be       	out	0x3f, r0	; 63
    3bea:	cd bf       	out	0x3d, r28	; 61
    
	FIL open_files[2];
	FRESULT file_status[2] = {FR_INVALID_OBJECT,FR_INVALID_OBJECT};
	struct midi_time_event mtevent;
	struct sound_file_ptr snd_ptr = {0};
    3bec:	fe 01       	movw	r30, r28
    3bee:	e4 5b       	subi	r30, 0xB4	; 180
    3bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf2:	80 e1       	ldi	r24, 0x10	; 16
    3bf4:	df 01       	movw	r26, r30
    3bf6:	1d 92       	st	X+, r1
    3bf8:	8a 95       	dec	r24
    3bfa:	e9 f7       	brne	.-6      	; 0x3bf6 <main+0x20>
	char (*files)[MAX_FNAME];
    unsigned char byteValue = 0;
	unsigned char listIndex = 0;
    unsigned char numOfBytes = 0;
    3bfc:	6d 96       	adiw	r28, 0x1d	; 29
    3bfe:	1f ae       	std	Y+63, r1	; 0x3f
    3c00:	6d 97       	sbiw	r28, 0x1d	; 29
	unsigned char numOfItems = 0;
    3c02:	6e 96       	adiw	r28, 0x1e	; 30
    3c04:	1f ae       	std	Y+63, r1	; 0x3f
    3c06:	6e 97       	sbiw	r28, 0x1e	; 30
	struct MD_MIDIFile mf;
      
	unsigned long microseconds = 0;
	unsigned long delta = 0;
	//DDRA |= (1 << PA1);		// remove
	files = malloc(MAX_FNAME * MAX_FILES);
    3c08:	80 ea       	ldi	r24, 0xA0	; 160
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	0e 94 58 36 	call	0x6cb0	; 0x6cb0 <malloc>
    3c10:	5c 01       	movw	r10, r24
	
	configTimers();	
    3c12:	0e 94 e5 16 	call	0x2dca	; 0x2dca <configTimers>
	lcdInit();	
    3c16:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <lcdInit>
	uartInit();
    3c1a:	0e 94 37 33 	call	0x666e	; 0x666e <uartInit>
	midiInit();	
    3c1e:	0e 94 52 28 	call	0x50a4	; 0x50a4 <midiInit>
	spiInit();	
    3c22:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <spiInit>
	setInputs();
    3c26:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <setInputs>
	InitSRAM();
    3c2a:	0e 94 57 2f 	call	0x5eae	; 0x5eae <InitSRAM>
	
	// >> ADC
	a2dInit();
    3c2e:	0e 94 34 01 	call	0x268	; 0x268 <a2dInit>
	a2dSetPrescaler(ADC_PRESCALE_DIV32);
    3c32:	85 e0       	ldi	r24, 0x05	; 5
    3c34:	0e 94 26 01 	call	0x24c	; 0x24c <a2dSetPrescaler>
	a2dSetReference(ADC_REFERENCE_AVCC);
    3c38:	81 e0       	ldi	r24, 0x01	; 1
    3c3a:	0e 94 2b 01 	call	0x256	; 0x256 <a2dSetReference>
	a2dSetChannel(ADC_CH_ADC0);
    3c3e:	80 e0       	ldi	r24, 0x00	; 0
    3c40:	0e 94 42 01 	call	0x284	; 0x284 <a2dSetChannel>
	a2dStartConvert();		
    3c44:	0e 94 48 01 	call	0x290	; 0x290 <a2dStartConvert>
	// << ADC
	 
	timerAttach(TIMER2OUTCOMPARE_INT,disk_timerproc);
    3c48:	6a ee       	ldi	r22, 0xEA	; 234
    3c4a:	7d e2       	ldi	r23, 0x2D	; 45
    3c4c:	86 e0       	ldi	r24, 0x06	; 6
    3c4e:	0e 94 7a 31 	call	0x62f4	; 0x62f4 <timerAttach>
	timerAttach(TIMER0OVERFLOW_INT,addMillis);
    3c52:	6f e7       	ldi	r22, 0x7F	; 127
    3c54:	77 e1       	ldi	r23, 0x17	; 23
    3c56:	80 e0       	ldi	r24, 0x00	; 0
    3c58:	0e 94 7a 31 	call	0x62f4	; 0x62f4 <timerAttach>
	
	uartSetBaudRate(MIDI_BAUD_RATE);
    3c5c:	62 e1       	ldi	r22, 0x12	; 18
    3c5e:	7a e7       	ldi	r23, 0x7A	; 122
    3c60:	80 e0       	ldi	r24, 0x00	; 0
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	0e 94 54 33 	call	0x66a8	; 0x66a8 <uartSetBaudRate>
	uartSetRxHandler(rx_handler);
    3c68:	85 ed       	ldi	r24, 0xD5	; 213
    3c6a:	96 e1       	ldi	r25, 0x16	; 22
    3c6c:	0e 94 4f 33 	call	0x669e	; 0x669e <uartSetRxHandler>
	uartFlushReceiveBuffer();
    3c70:	0e 94 bf 33 	call	0x677e	; 0x677e <uartFlushReceiveBuffer>
	
	lcdGotoXY(0,0);		
    3c74:	60 e0       	ldi	r22, 0x00	; 0
    3c76:	80 e0       	ldi	r24, 0x00	; 0
    3c78:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <lcdGotoXY>
		
	checkSD(inputs[SD]);
    3c7c:	a8 96       	adiw	r28, 0x28	; 40
    3c7e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c80:	a8 97       	sbiw	r28, 0x28	; 40
    3c82:	0e 94 34 18 	call	0x3068	; 0x3068 <checkSD>
		f_close(&file);
	}
	*/
	
	
	midiPlayVolume(inputs[POT]);
    3c86:	a9 96       	adiw	r28, 0x29	; 41
    3c88:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c8a:	a9 97       	sbiw	r28, 0x29	; 41
    3c8c:	0e 94 a8 29 	call	0x5350	; 0x5350 <midiPlayVolume>
	readInputs(inputs);	
    3c90:	ce 01       	movw	r24, r28
    3c92:	82 5a       	subi	r24, 0xA2	; 162
    3c94:	9f 4f       	sbci	r25, 0xFF	; 255
    3c96:	0e 94 11 17 	call	0x2e22	; 0x2e22 <readInputs>

int main(void)
{
    
	FIL open_files[2];
	FRESULT file_status[2] = {FR_INVALID_OBJECT,FR_INVALID_OBJECT};
    3c9a:	b9 e0       	ldi	r27, 0x09	; 9
    3c9c:	c0 59       	subi	r28, 0x90	; 144
    3c9e:	dd 4f       	sbci	r29, 0xFD	; 253
    3ca0:	b8 83       	st	Y, r27
    3ca2:	c0 57       	subi	r28, 0x70	; 112
    3ca4:	d2 40       	sbci	r29, 0x02	; 2
	INPUT input = NONE;
    struct family_entry fam;
	struct sound_entry snd;
	struct MD_MIDIFile mf;
      
	unsigned long microseconds = 0;
    3ca6:	41 2c       	mov	r4, r1
    3ca8:	51 2c       	mov	r5, r1
    3caa:	32 01       	movw	r6, r4
    unsigned char byteValue = 0;
	unsigned char listIndex = 0;
    unsigned char numOfBytes = 0;
	unsigned char numOfItems = 0;
    unsigned char currentMode = SOUND_FAMILY,currentAction = NONE;
	BOOL endRecording = TRUE;
    3cac:	dd 24       	eor	r13, r13
    3cae:	d3 94       	inc	r13
	char (*files)[MAX_FNAME];
    unsigned char byteValue = 0;
	unsigned char listIndex = 0;
    unsigned char numOfBytes = 0;
	unsigned char numOfItems = 0;
    unsigned char currentMode = SOUND_FAMILY,currentAction = NONE;
    3cb0:	ee 24       	eor	r14, r14
    3cb2:	ea 94       	dec	r14
    3cb4:	f1 2c       	mov	r15, r1
	FRESULT file_status[2] = {FR_INVALID_OBJECT,FR_INVALID_OBJECT};
	struct midi_time_event mtevent;
	struct sound_file_ptr snd_ptr = {0};
	char (*files)[MAX_FNAME];
    unsigned char byteValue = 0;
	unsigned char listIndex = 0;
    3cb6:	c1 2c       	mov	r12, r1
					currentAction = NONE;
				}
			}
			else if(currentMode == MIDI_REC && endRecording == TRUE){
				if(getMicros() > microseconds){
					sendMidiBuffer(mtevent.event.data,mtevent.event.size);
    3cb8:	e1 e4       	ldi	r30, 0x41	; 65
    3cba:	f0 e0       	ldi	r31, 0x00	; 0
    3cbc:	ec 0f       	add	r30, r28
    3cbe:	fd 1f       	adc	r31, r29
    3cc0:	33 96       	adiw	r30, 0x03	; 3
    3cc2:	cf 58       	subi	r28, 0x8F	; 143
    3cc4:	dd 4f       	sbci	r29, 0xFD	; 253
    3cc6:	f9 83       	std	Y+1, r31	; 0x01
    3cc8:	e8 83       	st	Y, r30
    3cca:	c1 57       	subi	r28, 0x71	; 113
    3ccc:	d2 40       	sbci	r29, 0x02	; 2
									else if(currentMode == SOUND_SELECT){
										lcdClear();
										lcdGotoXY(0,0);
										lcdPrintData(getLCDString(SELECTED,SELECTED_LEN),SELECTED_LEN);
										lcdGotoXY(0,1);
										lcdPrintData(fam.name,strlen(fam.name));
    3cce:	0f 2e       	mov	r0, r31
    3cd0:	f9 e6       	ldi	r31, 0x69	; 105
    3cd2:	8f 2e       	mov	r8, r31
    3cd4:	91 2c       	mov	r9, r1
    3cd6:	f0 2d       	mov	r31, r0
    3cd8:	8c 0e       	add	r8, r28
    3cda:	9d 1e       	adc	r9, r29
    3cdc:	f8 e0       	ldi	r31, 0x08	; 8
    3cde:	8f 0e       	add	r8, r31
    3ce0:	91 1c       	adc	r9, r1
									else if(currentMode == SOUND_FAMILY){
										if(file_status[SOUND_FILE] == FR_OK){
											f_close(&open_files[SOUND_FILE]);
											file_status[SOUND_FILE] = FR_INVALID_OBJECT;
										}
										memset(&snd_ptr,0,sizeof(struct sound_file_ptr));
    3ce2:	ce 01       	movw	r24, r28
    3ce4:	84 5b       	subi	r24, 0xB4	; 180
    3ce6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ce8:	c2 59       	subi	r28, 0x92	; 146
    3cea:	dd 4f       	sbci	r29, 0xFD	; 253
    3cec:	99 83       	std	Y+1, r25	; 0x01
    3cee:	88 83       	st	Y, r24
    3cf0:	ce 56       	subi	r28, 0x6E	; 110
    3cf2:	d2 40       	sbci	r29, 0x02	; 2
										file_status[SOUND_FILE] = setSoundFile(&open_files[SOUND_FILE],&fam,&snd,files[listIndex]);	// f_open
										//createSoundList(&open_files[SOUND_FILE],&numOfItems);
										lcdClear();
										lcdPrintData(fam.name,strlen(fam.name));
										lcdGotoXY(0,1);
										lcdPrintData(snd.name,strlen(snd.name));
    3cf4:	0f 2e       	mov	r0, r31
    3cf6:	f1 e8       	ldi	r31, 0x81	; 129
    3cf8:	2f 2e       	mov	r2, r31
    3cfa:	31 2c       	mov	r3, r1
    3cfc:	f0 2d       	mov	r31, r0
    3cfe:	2c 0e       	add	r2, r28
    3d00:	3d 1e       	adc	r3, r29
    3d02:	92 e0       	ldi	r25, 0x02	; 2
    3d04:	29 0e       	add	r2, r25
    3d06:	31 1c       	adc	r3, r1
	
	midiPlayVolume(inputs[POT]);
	readInputs(inputs);	
	
	while(1){						
			if((input = readInputs(inputs)) >= BUTTON0 && input <= SD){	
    3d08:	ce 01       	movw	r24, r28
    3d0a:	82 5a       	subi	r24, 0xA2	; 162
    3d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d0e:	0e 94 11 17 	call	0x2e22	; 0x2e22 <readInputs>
    3d12:	08 2f       	mov	r16, r24
    3d14:	8a 30       	cpi	r24, 0x0A	; 10
    3d16:	08 f0       	brcs	.+2      	; 0x3d1a <main+0x144>
    3d18:	ca c1       	rjmp	.+916    	; 0x40ae <main+0x4d8>
				lcdClear();
    3d1a:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <lcdClear>
				if(input >= BUTTON0 && input <= BUTTON3){
    3d1e:	04 30       	cpi	r16, 0x04	; 4
    3d20:	40 f4       	brcc	.+16     	; 0x3d32 <main+0x15c>
					currentMode = input;
					currentAction = NONE;
					listIndex = 0;
					numOfItems = 0;					
    3d22:	6e 96       	adiw	r28, 0x1e	; 30
    3d24:	1f ae       	std	Y+63, r1	; 0x3f
    3d26:	6e 97       	sbiw	r28, 0x1e	; 30
	
	while(1){						
			if((input = readInputs(inputs)) >= BUTTON0 && input <= SD){	
				lcdClear();
				if(input >= BUTTON0 && input <= BUTTON3){
					currentMode = input;
    3d28:	f0 2e       	mov	r15, r16
					currentAction = NONE;
    3d2a:	ee 24       	eor	r14, r14
    3d2c:	ea 94       	dec	r14
					listIndex = 0;
    3d2e:	c1 2c       	mov	r12, r1
    3d30:	05 c0       	rjmp	.+10     	; 0x3d3c <main+0x166>
					numOfItems = 0;					
				}
				else if(input >= JOY_UP && input <= JOY_PRESS){
    3d32:	8c ef       	ldi	r24, 0xFC	; 252
    3d34:	80 0f       	add	r24, r16
    3d36:	85 30       	cpi	r24, 0x05	; 5
    3d38:	08 f4       	brcc	.+2      	; 0x3d3c <main+0x166>
					currentAction = input;
    3d3a:	e0 2e       	mov	r14, r16
				}
				switch(input){	
    3d3c:	80 2f       	mov	r24, r16
    3d3e:	00 0f       	add	r16, r16
    3d40:	99 0b       	sbc	r25, r25
    3d42:	aa 0b       	sbc	r26, r26
    3d44:	bb 0b       	sbc	r27, r27
    3d46:	8a 30       	cpi	r24, 0x0A	; 10
    3d48:	91 05       	cpc	r25, r1
    3d4a:	08 f0       	brcs	.+2      	; 0x3d4e <main+0x178>
    3d4c:	b7 c1       	rjmp	.+878    	; 0x40bc <main+0x4e6>
    3d4e:	fc 01       	movw	r30, r24
    3d50:	e6 5d       	subi	r30, 0xD6	; 214
    3d52:	ff 4f       	sbci	r31, 0xFF	; 255
    3d54:	0c 94 38 36 	jmp	0x6c70	; 0x6c70 <__tablejump2__>
					case NONE:	break;
					case POT:	break;					
					case SD:	checkSD(inputs[SD]);
    3d58:	a8 96       	adiw	r28, 0x28	; 40
    3d5a:	8f ad       	ldd	r24, Y+63	; 0x3f
    3d5c:	a8 97       	sbiw	r28, 0x28	; 40
    3d5e:	0e 94 34 18 	call	0x3068	; 0x3068 <checkSD>
								break; 			
    3d62:	ac c1       	rjmp	.+856    	; 0x40bc <main+0x4e6>
					case BUTTON0:	// select sound family file						
							createFileList(files,".FAM",&numOfItems);
    3d64:	ae 01       	movw	r20, r28
    3d66:	43 5a       	subi	r20, 0xA3	; 163
    3d68:	5f 4f       	sbci	r21, 0xFF	; 255
    3d6a:	67 e3       	ldi	r22, 0x37	; 55
    3d6c:	71 e0       	ldi	r23, 0x01	; 1
    3d6e:	c5 01       	movw	r24, r10
    3d70:	0e 94 87 18 	call	0x310e	; 0x310e <createFileList>
							handleFileList(currentMode,currentAction,listIndex,numOfItems,files);					
    3d74:	85 01       	movw	r16, r10
    3d76:	6e 96       	adiw	r28, 0x1e	; 30
    3d78:	2f ad       	ldd	r18, Y+63	; 0x3f
    3d7a:	6e 97       	sbiw	r28, 0x1e	; 30
    3d7c:	4c 2d       	mov	r20, r12
    3d7e:	6e 2d       	mov	r22, r14
    3d80:	8f 2d       	mov	r24, r15
    3d82:	0e 94 b7 1a 	call	0x356e	; 0x356e <handleFileList>
							break;						
    3d86:	9a c1       	rjmp	.+820    	; 0x40bc <main+0x4e6>
					case BUTTON1:	//select sound from file						
							break;						
					case BUTTON2:	// play midi
							createFileList(files,".MID",&numOfItems);
    3d88:	ae 01       	movw	r20, r28
    3d8a:	43 5a       	subi	r20, 0xA3	; 163
    3d8c:	5f 4f       	sbci	r21, 0xFF	; 255
    3d8e:	60 e4       	ldi	r22, 0x40	; 64
    3d90:	71 e0       	ldi	r23, 0x01	; 1
    3d92:	c5 01       	movw	r24, r10
    3d94:	0e 94 87 18 	call	0x310e	; 0x310e <createFileList>
							handleFileList(currentMode,currentAction,listIndex,numOfItems,files);
    3d98:	85 01       	movw	r16, r10
    3d9a:	6e 96       	adiw	r28, 0x1e	; 30
    3d9c:	2f ad       	ldd	r18, Y+63	; 0x3f
    3d9e:	6e 97       	sbiw	r28, 0x1e	; 30
    3da0:	4c 2d       	mov	r20, r12
    3da2:	6e 2d       	mov	r22, r14
    3da4:	8f 2d       	mov	r24, r15
    3da6:	0e 94 b7 1a 	call	0x356e	; 0x356e <handleFileList>
							break;
    3daa:	88 c1       	rjmp	.+784    	; 0x40bc <main+0x4e6>
					case BUTTON3:	// record midi
							endRecording = !endRecording;
    3dac:	11 e0       	ldi	r17, 0x01	; 1
    3dae:	d1 10       	cpse	r13, r1
    3db0:	10 e0       	ldi	r17, 0x00	; 0
									
							if(endRecording == FALSE){
    3db2:	dd 20       	and	r13, r13
    3db4:	19 f1       	breq	.+70     	; 0x3dfc <main+0x226>
								SRAM_seekWrite(0,SEEK_SET);										
    3db6:	60 e0       	ldi	r22, 0x00	; 0
    3db8:	70 e0       	ldi	r23, 0x00	; 0
    3dba:	80 e0       	ldi	r24, 0x00	; 0
    3dbc:	90 e0       	ldi	r25, 0x00	; 0
    3dbe:	0e 94 01 2f 	call	0x5e02	; 0x5e02 <SRAM_seekWrite>
								f_open(&open_files[MIDI_FILE],"SONG.MID",FA_WRITE | FA_CREATE_ALWAYS);
    3dc2:	4a e0       	ldi	r20, 0x0A	; 10
    3dc4:	6c e3       	ldi	r22, 0x3C	; 60
    3dc6:	71 e0       	ldi	r23, 0x01	; 1
    3dc8:	ce 01       	movw	r24, r28
    3dca:	01 96       	adiw	r24, 0x01	; 1
    3dcc:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <f_open>
								writeMidi(&open_files[MIDI_FILE]);
    3dd0:	ce 01       	movw	r24, r28
    3dd2:	01 96       	adiw	r24, 0x01	; 1
    3dd4:	0e 94 43 1b 	call	0x3686	; 0x3686 <writeMidi>
								lcdGotoXY(0,0);
    3dd8:	60 e0       	ldi	r22, 0x00	; 0
    3dda:	80 e0       	ldi	r24, 0x00	; 0
    3ddc:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <lcdGotoXY>
								lcdPrintData(getLCDString(RECORD,RECORD_LEN),RECORD_LEN);
    3de0:	69 e0       	ldi	r22, 0x09	; 9
    3de2:	8b e7       	ldi	r24, 0x7B	; 123
    3de4:	90 e0       	ldi	r25, 0x00	; 0
    3de6:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    3dea:	69 e0       	ldi	r22, 0x09	; 9
    3dec:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <lcdPrintData>
								microseconds = getMicros();
    3df0:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <getMicros>
    3df4:	2b 01       	movw	r4, r22
    3df6:	3c 01       	movw	r6, r24
					case BUTTON2:	// play midi
							createFileList(files,".MID",&numOfItems);
							handleFileList(currentMode,currentAction,listIndex,numOfItems,files);
							break;
					case BUTTON3:	// record midi
							endRecording = !endRecording;
    3df8:	d1 2e       	mov	r13, r17
    3dfa:	60 c1       	rjmp	.+704    	; 0x40bc <main+0x4e6>
								lcdGotoXY(0,0);
								lcdPrintData(getLCDString(RECORD,RECORD_LEN),RECORD_LEN);
								microseconds = getMicros();
							}
							else{
								SRAM_seekRead(0,SEEK_SET);
    3dfc:	60 e0       	ldi	r22, 0x00	; 0
    3dfe:	70 e0       	ldi	r23, 0x00	; 0
    3e00:	80 e0       	ldi	r24, 0x00	; 0
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	0e 94 8e 2e 	call	0x5d1c	; 0x5d1c <SRAM_seekRead>
								readSRAM(((unsigned char *)&mtevent),sizeof(struct midi_time_event));
    3e08:	6b e0       	ldi	r22, 0x0B	; 11
    3e0a:	70 e0       	ldi	r23, 0x00	; 0
    3e0c:	ce 01       	movw	r24, r28
    3e0e:	8f 5b       	subi	r24, 0xBF	; 191
    3e10:	9f 4f       	sbci	r25, 0xFF	; 255
    3e12:	0e 94 c5 30 	call	0x618a	; 0x618a <readSRAM>
								microseconds = getMicros() + mtevent.delta;
    3e16:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <getMicros>
    3e1a:	2c 96       	adiw	r28, 0x0c	; 12
    3e1c:	4c ac       	ldd	r4, Y+60	; 0x3c
    3e1e:	5d ac       	ldd	r5, Y+61	; 0x3d
    3e20:	6e ac       	ldd	r6, Y+62	; 0x3e
    3e22:	7f ac       	ldd	r7, Y+63	; 0x3f
    3e24:	2c 97       	sbiw	r28, 0x0c	; 12
    3e26:	46 0e       	add	r4, r22
    3e28:	57 1e       	adc	r5, r23
    3e2a:	68 1e       	adc	r6, r24
    3e2c:	79 1e       	adc	r7, r25
								lcdPrintData(getLCDString(STOPPED,STOPPED_LEN),STOPPED_LEN);
    3e2e:	67 e0       	ldi	r22, 0x07	; 7
    3e30:	84 e8       	ldi	r24, 0x84	; 132
    3e32:	90 e0       	ldi	r25, 0x00	; 0
    3e34:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    3e38:	67 e0       	ldi	r22, 0x07	; 7
    3e3a:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <lcdPrintData>
								f_write(&open_files[MIDI_FILE],"\x01\xFF\x2F\x00",4,(UINT *)&numOfBytes);
    3e3e:	9e 01       	movw	r18, r28
    3e40:	24 5a       	subi	r18, 0xA4	; 164
    3e42:	3f 4f       	sbci	r19, 0xFF	; 255
    3e44:	44 e0       	ldi	r20, 0x04	; 4
    3e46:	50 e0       	ldi	r21, 0x00	; 0
    3e48:	6b e7       	ldi	r22, 0x7B	; 123
    3e4a:	70 e0       	ldi	r23, 0x00	; 0
    3e4c:	ce 01       	movw	r24, r28
    3e4e:	01 96       	adiw	r24, 0x01	; 1
    3e50:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <f_write>
								f_close(&open_files[MIDI_FILE]);
    3e54:	ce 01       	movw	r24, r28
    3e56:	01 96       	adiw	r24, 0x01	; 1
    3e58:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <f_close>
					case BUTTON2:	// play midi
							createFileList(files,".MID",&numOfItems);
							handleFileList(currentMode,currentAction,listIndex,numOfItems,files);
							break;
					case BUTTON3:	// record midi
							endRecording = !endRecording;
    3e5c:	d1 2e       	mov	r13, r17
    3e5e:	2e c1       	rjmp	.+604    	; 0x40bc <main+0x4e6>
								f_close(&open_files[MIDI_FILE]);
										
							} 
							break;
					case JOY_UP:	
									if(listIndex > 0) listIndex--;
    3e60:	c1 10       	cpse	r12, r1
    3e62:	ca 94       	dec	r12
									if(currentMode == MIDI_PLAY || currentMode == SOUND_FAMILY)	
    3e64:	8f 2d       	mov	r24, r15
    3e66:	8d 7f       	andi	r24, 0xFD	; 253
    3e68:	51 f4       	brne	.+20     	; 0x3e7e <main+0x2a8>
										handleFileList(currentMode,currentAction,listIndex,numOfItems,files);
    3e6a:	85 01       	movw	r16, r10
    3e6c:	6e 96       	adiw	r28, 0x1e	; 30
    3e6e:	2f ad       	ldd	r18, Y+63	; 0x3f
    3e70:	6e 97       	sbiw	r28, 0x1e	; 30
    3e72:	4c 2d       	mov	r20, r12
    3e74:	6e 2d       	mov	r22, r14
    3e76:	8f 2d       	mov	r24, r15
    3e78:	0e 94 b7 1a 	call	0x356e	; 0x356e <handleFileList>
    3e7c:	1f c1       	rjmp	.+574    	; 0x40bc <main+0x4e6>
									else if(currentMode == SOUND_SELECT){
    3e7e:	a1 e0       	ldi	r26, 0x01	; 1
    3e80:	fa 12       	cpse	r15, r26
    3e82:	45 c1       	rjmp	.+650    	; 0x410e <main+0x538>
										scrollSoundList(&open_files[SOUND_FILE],JOY_UP,&fam,&snd,&snd_ptr);
    3e84:	8e 01       	movw	r16, r28
    3e86:	04 5b       	subi	r16, 0xB4	; 180
    3e88:	1f 4f       	sbci	r17, 0xFF	; 255
    3e8a:	9e 01       	movw	r18, r28
    3e8c:	2f 57       	subi	r18, 0x7F	; 127
    3e8e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e90:	ae 01       	movw	r20, r28
    3e92:	47 59       	subi	r20, 0x97	; 151
    3e94:	5f 4f       	sbci	r21, 0xFF	; 255
    3e96:	64 e0       	ldi	r22, 0x04	; 4
    3e98:	ce 01       	movw	r24, r28
    3e9a:	81 96       	adiw	r24, 0x21	; 33
    3e9c:	0e 94 64 19 	call	0x32c8	; 0x32c8 <scrollSoundList>
										sendProgramChange(snd.bank,snd.prog);
    3ea0:	ce 57       	subi	r28, 0x7E	; 126
    3ea2:	df 4f       	sbci	r29, 0xFF	; 255
    3ea4:	68 81       	ld	r22, Y
    3ea6:	c2 58       	subi	r28, 0x82	; 130
    3ea8:	d0 40       	sbci	r29, 0x00	; 0
    3eaa:	cf 57       	subi	r28, 0x7F	; 127
    3eac:	df 4f       	sbci	r29, 0xFF	; 255
    3eae:	88 81       	ld	r24, Y
    3eb0:	c1 58       	subi	r28, 0x81	; 129
    3eb2:	d0 40       	sbci	r29, 0x00	; 0
    3eb4:	0e 94 bf 28 	call	0x517e	; 0x517e <sendProgramChange>
    3eb8:	84 c1       	rjmp	.+776    	; 0x41c2 <main+0x5ec>
									}
									break;
					case JOY_RIGHT:	scrollSoundList(&open_files[SOUND_FILE],JOY_RIGHT, &fam,&snd,&snd_ptr);
    3eba:	8e 01       	movw	r16, r28
    3ebc:	04 5b       	subi	r16, 0xB4	; 180
    3ebe:	1f 4f       	sbci	r17, 0xFF	; 255
    3ec0:	9e 01       	movw	r18, r28
    3ec2:	2f 57       	subi	r18, 0x7F	; 127
    3ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ec6:	ae 01       	movw	r20, r28
    3ec8:	47 59       	subi	r20, 0x97	; 151
    3eca:	5f 4f       	sbci	r21, 0xFF	; 255
    3ecc:	65 e0       	ldi	r22, 0x05	; 5
    3ece:	ce 01       	movw	r24, r28
    3ed0:	81 96       	adiw	r24, 0x21	; 33
    3ed2:	0e 94 64 19 	call	0x32c8	; 0x32c8 <scrollSoundList>
									sendProgramChange(snd.bank,snd.prog);
    3ed6:	ce 57       	subi	r28, 0x7E	; 126
    3ed8:	df 4f       	sbci	r29, 0xFF	; 255
    3eda:	68 81       	ld	r22, Y
    3edc:	c2 58       	subi	r28, 0x82	; 130
    3ede:	d0 40       	sbci	r29, 0x00	; 0
    3ee0:	cf 57       	subi	r28, 0x7F	; 127
    3ee2:	df 4f       	sbci	r29, 0xFF	; 255
    3ee4:	88 81       	ld	r24, Y
    3ee6:	c1 58       	subi	r28, 0x81	; 129
    3ee8:	d0 40       	sbci	r29, 0x00	; 0
    3eea:	0e 94 bf 28 	call	0x517e	; 0x517e <sendProgramChange>
									break;
    3eee:	e6 c0       	rjmp	.+460    	; 0x40bc <main+0x4e6>
					case JOY_DOWN:	if(listIndex < (numOfItems - 1)) listIndex++;
    3ef0:	6e 96       	adiw	r28, 0x1e	; 30
    3ef2:	2f ad       	ldd	r18, Y+63	; 0x3f
    3ef4:	6e 97       	sbiw	r28, 0x1e	; 30
    3ef6:	4c 2d       	mov	r20, r12
    3ef8:	50 e0       	ldi	r21, 0x00	; 0
    3efa:	82 2f       	mov	r24, r18
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	01 97       	sbiw	r24, 0x01	; 1
    3f00:	48 17       	cp	r20, r24
    3f02:	59 07       	cpc	r21, r25
    3f04:	0c f4       	brge	.+2      	; 0x3f08 <main+0x332>
    3f06:	c3 94       	inc	r12
									if(currentMode == MIDI_PLAY || currentMode == SOUND_FAMILY) 
    3f08:	8f 2d       	mov	r24, r15
    3f0a:	8d 7f       	andi	r24, 0xFD	; 253
    3f0c:	39 f4       	brne	.+14     	; 0x3f1c <main+0x346>
										handleFileList(currentMode,currentAction,listIndex,numOfItems,files);
    3f0e:	85 01       	movw	r16, r10
    3f10:	4c 2d       	mov	r20, r12
    3f12:	6e 2d       	mov	r22, r14
    3f14:	8f 2d       	mov	r24, r15
    3f16:	0e 94 b7 1a 	call	0x356e	; 0x356e <handleFileList>
    3f1a:	d0 c0       	rjmp	.+416    	; 0x40bc <main+0x4e6>
									else if(currentMode == SOUND_SELECT){
    3f1c:	b1 e0       	ldi	r27, 0x01	; 1
    3f1e:	fb 12       	cpse	r15, r27
    3f20:	f6 c0       	rjmp	.+492    	; 0x410e <main+0x538>
										scrollSoundList(&open_files[SOUND_FILE],JOY_DOWN, &fam,&snd,&snd_ptr);
    3f22:	8e 01       	movw	r16, r28
    3f24:	04 5b       	subi	r16, 0xB4	; 180
    3f26:	1f 4f       	sbci	r17, 0xFF	; 255
    3f28:	9e 01       	movw	r18, r28
    3f2a:	2f 57       	subi	r18, 0x7F	; 127
    3f2c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f2e:	ae 01       	movw	r20, r28
    3f30:	47 59       	subi	r20, 0x97	; 151
    3f32:	5f 4f       	sbci	r21, 0xFF	; 255
    3f34:	66 e0       	ldi	r22, 0x06	; 6
    3f36:	ce 01       	movw	r24, r28
    3f38:	81 96       	adiw	r24, 0x21	; 33
    3f3a:	0e 94 64 19 	call	0x32c8	; 0x32c8 <scrollSoundList>
										sendProgramChange(snd.bank,snd.prog);
    3f3e:	ce 57       	subi	r28, 0x7E	; 126
    3f40:	df 4f       	sbci	r29, 0xFF	; 255
    3f42:	68 81       	ld	r22, Y
    3f44:	c2 58       	subi	r28, 0x82	; 130
    3f46:	d0 40       	sbci	r29, 0x00	; 0
    3f48:	cf 57       	subi	r28, 0x7F	; 127
    3f4a:	df 4f       	sbci	r29, 0xFF	; 255
    3f4c:	88 81       	ld	r24, Y
    3f4e:	c1 58       	subi	r28, 0x81	; 129
    3f50:	d0 40       	sbci	r29, 0x00	; 0
    3f52:	0e 94 bf 28 	call	0x517e	; 0x517e <sendProgramChange>
    3f56:	35 c1       	rjmp	.+618    	; 0x41c2 <main+0x5ec>
									}
									break;
					case JOY_LEFT:	scrollSoundList(&open_files[SOUND_FILE],JOY_LEFT,&fam,&snd,&snd_ptr);
    3f58:	8e 01       	movw	r16, r28
    3f5a:	04 5b       	subi	r16, 0xB4	; 180
    3f5c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f5e:	9e 01       	movw	r18, r28
    3f60:	2f 57       	subi	r18, 0x7F	; 127
    3f62:	3f 4f       	sbci	r19, 0xFF	; 255
    3f64:	ae 01       	movw	r20, r28
    3f66:	47 59       	subi	r20, 0x97	; 151
    3f68:	5f 4f       	sbci	r21, 0xFF	; 255
    3f6a:	67 e0       	ldi	r22, 0x07	; 7
    3f6c:	ce 01       	movw	r24, r28
    3f6e:	81 96       	adiw	r24, 0x21	; 33
    3f70:	0e 94 64 19 	call	0x32c8	; 0x32c8 <scrollSoundList>
									sendProgramChange(snd.bank,snd.prog);
    3f74:	ce 57       	subi	r28, 0x7E	; 126
    3f76:	df 4f       	sbci	r29, 0xFF	; 255
    3f78:	68 81       	ld	r22, Y
    3f7a:	c2 58       	subi	r28, 0x82	; 130
    3f7c:	d0 40       	sbci	r29, 0x00	; 0
    3f7e:	cf 57       	subi	r28, 0x7F	; 127
    3f80:	df 4f       	sbci	r29, 0xFF	; 255
    3f82:	88 81       	ld	r24, Y
    3f84:	c1 58       	subi	r28, 0x81	; 129
    3f86:	d0 40       	sbci	r29, 0x00	; 0
    3f88:	0e 94 bf 28 	call	0x517e	; 0x517e <sendProgramChange>
									break;
    3f8c:	97 c0       	rjmp	.+302    	; 0x40bc <main+0x4e6>
					case JOY_PRESS:	if(currentMode == MIDI_PLAY)										
    3f8e:	e2 e0       	ldi	r30, 0x02	; 2
    3f90:	fe 12       	cpse	r15, r30
    3f92:	0c c0       	rjmp	.+24     	; 0x3fac <main+0x3d6>
										setMidiFile(&mf,files[listIndex]);									
    3f94:	b5 01       	movw	r22, r10
    3f96:	f0 e1       	ldi	r31, 0x10	; 16
    3f98:	cf 9e       	mul	r12, r31
    3f9a:	60 0d       	add	r22, r0
    3f9c:	71 1d       	adc	r23, r1
    3f9e:	11 24       	eor	r1, r1
    3fa0:	ce 01       	movw	r24, r28
    3fa2:	8d 56       	subi	r24, 0x6D	; 109
    3fa4:	9f 4f       	sbci	r25, 0xFF	; 255
    3fa6:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <setMidiFile>
    3faa:	8b c0       	rjmp	.+278    	; 0x40c2 <main+0x4ec>
									else if(currentMode == SOUND_FAMILY){
    3fac:	f1 10       	cpse	r15, r1
    3fae:	54 c0       	rjmp	.+168    	; 0x4058 <main+0x482>
										if(file_status[SOUND_FILE] == FR_OK){
    3fb0:	c0 59       	subi	r28, 0x90	; 144
    3fb2:	dd 4f       	sbci	r29, 0xFD	; 253
    3fb4:	88 81       	ld	r24, Y
    3fb6:	c0 57       	subi	r28, 0x70	; 112
    3fb8:	d2 40       	sbci	r29, 0x02	; 2
    3fba:	81 11       	cpse	r24, r1
    3fbc:	04 c0       	rjmp	.+8      	; 0x3fc6 <main+0x3f0>
											f_close(&open_files[SOUND_FILE]);
    3fbe:	ce 01       	movw	r24, r28
    3fc0:	81 96       	adiw	r24, 0x21	; 33
    3fc2:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <f_close>
											file_status[SOUND_FILE] = FR_INVALID_OBJECT;
										}
										memset(&snd_ptr,0,sizeof(struct sound_file_ptr));
    3fc6:	80 e1       	ldi	r24, 0x10	; 16
    3fc8:	c2 59       	subi	r28, 0x92	; 146
    3fca:	dd 4f       	sbci	r29, 0xFD	; 253
    3fcc:	a8 81       	ld	r26, Y
    3fce:	b9 81       	ldd	r27, Y+1	; 0x01
    3fd0:	ce 56       	subi	r28, 0x6E	; 110
    3fd2:	d2 40       	sbci	r29, 0x02	; 2
    3fd4:	1d 92       	st	X+, r1
    3fd6:	8a 95       	dec	r24
    3fd8:	e9 f7       	brne	.-6      	; 0x3fd4 <main+0x3fe>
										// open selected file and get first family name and first sound of that family (fam/snd params)
										file_status[SOUND_FILE] = setSoundFile(&open_files[SOUND_FILE],&fam,&snd,files[listIndex]);	// f_open
    3fda:	95 01       	movw	r18, r10
    3fdc:	b0 e1       	ldi	r27, 0x10	; 16
    3fde:	cb 9e       	mul	r12, r27
    3fe0:	20 0d       	add	r18, r0
    3fe2:	31 1d       	adc	r19, r1
    3fe4:	11 24       	eor	r1, r1
    3fe6:	ae 01       	movw	r20, r28
    3fe8:	4f 57       	subi	r20, 0x7F	; 127
    3fea:	5f 4f       	sbci	r21, 0xFF	; 255
    3fec:	be 01       	movw	r22, r28
    3fee:	67 59       	subi	r22, 0x97	; 151
    3ff0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ff2:	ce 01       	movw	r24, r28
    3ff4:	81 96       	adiw	r24, 0x21	; 33
    3ff6:	0e 94 12 19 	call	0x3224	; 0x3224 <setSoundFile>
    3ffa:	18 2f       	mov	r17, r24
										//createSoundList(&open_files[SOUND_FILE],&numOfItems);
										lcdClear();
    3ffc:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <lcdClear>
										lcdPrintData(fam.name,strlen(fam.name));
    4000:	f4 01       	movw	r30, r8
    4002:	01 90       	ld	r0, Z+
    4004:	00 20       	and	r0, r0
    4006:	e9 f7       	brne	.-6      	; 0x4002 <main+0x42c>
    4008:	31 97       	sbiw	r30, 0x01	; 1
    400a:	bf 01       	movw	r22, r30
    400c:	68 19       	sub	r22, r8
    400e:	79 09       	sbc	r23, r9
    4010:	c4 01       	movw	r24, r8
    4012:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <lcdPrintData>
										lcdGotoXY(0,1);
    4016:	61 e0       	ldi	r22, 0x01	; 1
    4018:	80 e0       	ldi	r24, 0x00	; 0
    401a:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <lcdGotoXY>
										lcdPrintData(snd.name,strlen(snd.name));
    401e:	f1 01       	movw	r30, r2
    4020:	01 90       	ld	r0, Z+
    4022:	00 20       	and	r0, r0
    4024:	e9 f7       	brne	.-6      	; 0x4020 <main+0x44a>
    4026:	31 97       	sbiw	r30, 0x01	; 1
    4028:	bf 01       	movw	r22, r30
    402a:	62 19       	sub	r22, r2
    402c:	73 09       	sbc	r23, r3
    402e:	c1 01       	movw	r24, r2
    4030:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <lcdPrintData>
										sendProgramChange(snd.bank,snd.prog);
    4034:	ce 57       	subi	r28, 0x7E	; 126
    4036:	df 4f       	sbci	r29, 0xFF	; 255
    4038:	68 81       	ld	r22, Y
    403a:	c2 58       	subi	r28, 0x82	; 130
    403c:	d0 40       	sbci	r29, 0x00	; 0
    403e:	cf 57       	subi	r28, 0x7F	; 127
    4040:	df 4f       	sbci	r29, 0xFF	; 255
    4042:	88 81       	ld	r24, Y
    4044:	c1 58       	subi	r28, 0x81	; 129
    4046:	d0 40       	sbci	r29, 0x00	; 0
    4048:	0e 94 bf 28 	call	0x517e	; 0x517e <sendProgramChange>
											f_close(&open_files[SOUND_FILE]);
											file_status[SOUND_FILE] = FR_INVALID_OBJECT;
										}
										memset(&snd_ptr,0,sizeof(struct sound_file_ptr));
										// open selected file and get first family name and first sound of that family (fam/snd params)
										file_status[SOUND_FILE] = setSoundFile(&open_files[SOUND_FILE],&fam,&snd,files[listIndex]);	// f_open
    404c:	c0 59       	subi	r28, 0x90	; 144
    404e:	dd 4f       	sbci	r29, 0xFD	; 253
    4050:	18 83       	st	Y, r17
    4052:	c0 57       	subi	r28, 0x70	; 112
    4054:	d2 40       	sbci	r29, 0x02	; 2
    4056:	b5 c0       	rjmp	.+362    	; 0x41c2 <main+0x5ec>
										lcdGotoXY(0,1);
										lcdPrintData(snd.name,strlen(snd.name));
										sendProgramChange(snd.bank,snd.prog);
										currentMode = SOUND_SELECT;																				
									}
									else if(currentMode == SOUND_SELECT){
    4058:	e1 e0       	ldi	r30, 0x01	; 1
    405a:	fe 12       	cpse	r15, r30
    405c:	58 c0       	rjmp	.+176    	; 0x410e <main+0x538>
										lcdClear();
    405e:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <lcdClear>
										lcdGotoXY(0,0);
    4062:	60 e0       	ldi	r22, 0x00	; 0
    4064:	80 e0       	ldi	r24, 0x00	; 0
    4066:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <lcdGotoXY>
										lcdPrintData(getLCDString(SELECTED,SELECTED_LEN),SELECTED_LEN);
    406a:	68 e0       	ldi	r22, 0x08	; 8
    406c:	83 e9       	ldi	r24, 0x93	; 147
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    4074:	68 e0       	ldi	r22, 0x08	; 8
    4076:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <lcdPrintData>
										lcdGotoXY(0,1);
    407a:	61 e0       	ldi	r22, 0x01	; 1
    407c:	80 e0       	ldi	r24, 0x00	; 0
    407e:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <lcdGotoXY>
										lcdPrintData(fam.name,strlen(fam.name));
    4082:	f4 01       	movw	r30, r8
    4084:	01 90       	ld	r0, Z+
    4086:	00 20       	and	r0, r0
    4088:	e9 f7       	brne	.-6      	; 0x4084 <main+0x4ae>
    408a:	31 97       	sbiw	r30, 0x01	; 1
    408c:	bf 01       	movw	r22, r30
    408e:	68 19       	sub	r22, r8
    4090:	79 09       	sbc	r23, r9
    4092:	c4 01       	movw	r24, r8
    4094:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <lcdPrintData>
										f_close(&open_files[SOUND_FILE]);
    4098:	ce 01       	movw	r24, r28
    409a:	81 96       	adiw	r24, 0x21	; 33
    409c:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <f_close>
										file_status[SOUND_FILE] = FR_INVALID_OBJECT;
    40a0:	f9 e0       	ldi	r31, 0x09	; 9
    40a2:	c0 59       	subi	r28, 0x90	; 144
    40a4:	dd 4f       	sbci	r29, 0xFD	; 253
    40a6:	f8 83       	st	Y, r31
    40a8:	c0 57       	subi	r28, 0x70	; 112
    40aa:	d2 40       	sbci	r29, 0x02	; 2
    40ac:	8a c0       	rjmp	.+276    	; 0x41c2 <main+0x5ec>
				//lcdGotoXY(0,1);
				//lcdPrintData(fam.name,strlen(fam.name));
				
				//_delay_ms(250);
			}
			else if(input == POT){
    40ae:	8a 30       	cpi	r24, 0x0A	; 10
    40b0:	29 f4       	brne	.+10     	; 0x40bc <main+0x4e6>
				midiPlayVolume(inputs[POT]);
    40b2:	a9 96       	adiw	r28, 0x29	; 41
    40b4:	8f ad       	ldd	r24, Y+63	; 0x3f
    40b6:	a9 97       	sbiw	r28, 0x29	; 41
    40b8:	0e 94 a8 29 	call	0x5350	; 0x5350 <midiPlayVolume>
			}
			
			
			// >> process events
			if(currentMode == MIDI_PLAY && currentAction == JOY_PRESS){
    40bc:	82 e0       	ldi	r24, 0x02	; 2
    40be:	f8 12       	cpse	r15, r24
    40c0:	26 c0       	rjmp	.+76     	; 0x410e <main+0x538>
    40c2:	98 e0       	ldi	r25, 0x08	; 8
    40c4:	e9 12       	cpse	r14, r25
    40c6:	51 c0       	rjmp	.+162    	; 0x416a <main+0x594>
				if(!isEOF(&mf)){
    40c8:	ce 01       	movw	r24, r28
    40ca:	8d 56       	subi	r24, 0x6D	; 109
    40cc:	9f 4f       	sbci	r25, 0xFF	; 255
    40ce:	0e 94 28 22 	call	0x4450	; 0x4450 <isEOF>
    40d2:	81 11       	cpse	r24, r1
    40d4:	09 c0       	rjmp	.+18     	; 0x40e8 <main+0x512>
					getNextEvent(&mf);
    40d6:	ce 01       	movw	r24, r28
    40d8:	8d 56       	subi	r24, 0x6D	; 109
    40da:	9f 4f       	sbci	r25, 0xFF	; 255
    40dc:	0e 94 ef 22 	call	0x45de	; 0x45de <getNextEvent>
    40e0:	68 94       	set
    40e2:	ff 24       	eor	r15, r15
    40e4:	f1 f8       	bld	r15, 1
    40e6:	44 c0       	rjmp	.+136    	; 0x4170 <main+0x59a>
				}
				else{
					closeMIDIFile(&mf);
    40e8:	ce 01       	movw	r24, r28
    40ea:	8d 56       	subi	r24, 0x6D	; 109
    40ec:	9f 4f       	sbci	r25, 0xFF	; 255
    40ee:	0e 94 16 21 	call	0x422c	; 0x422c <closeMIDIFile>
					lcdPrintData(getLCDString(FINISHED,FINISHED_LEN),FINISHED_LEN);
    40f2:	68 e0       	ldi	r22, 0x08	; 8
    40f4:	8b e8       	ldi	r24, 0x8B	; 139
    40f6:	90 e0       	ldi	r25, 0x00	; 0
    40f8:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <getLCDString>
    40fc:	68 e0       	ldi	r22, 0x08	; 8
    40fe:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <lcdPrintData>
    4102:	68 94       	set
    4104:	ff 24       	eor	r15, r15
    4106:	f1 f8       	bld	r15, 1
					currentAction = NONE;
    4108:	ee 24       	eor	r14, r14
    410a:	ea 94       	dec	r14
    410c:	31 c0       	rjmp	.+98     	; 0x4170 <main+0x59a>
				}
			}
			else if(currentMode == MIDI_REC && endRecording == TRUE){
    410e:	a3 e0       	ldi	r26, 0x03	; 3
    4110:	fa 12       	cpse	r15, r26
    4112:	2e c0       	rjmp	.+92     	; 0x4170 <main+0x59a>
    4114:	b1 e0       	ldi	r27, 0x01	; 1
    4116:	db 12       	cpse	r13, r27
    4118:	2b c0       	rjmp	.+86     	; 0x4170 <main+0x59a>
				if(getMicros() > microseconds){
    411a:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <getMicros>
    411e:	46 16       	cp	r4, r22
    4120:	57 06       	cpc	r5, r23
    4122:	68 06       	cpc	r6, r24
    4124:	79 06       	cpc	r7, r25
    4126:	20 f5       	brcc	.+72     	; 0x4170 <main+0x59a>
					sendMidiBuffer(mtevent.event.data,mtevent.event.size);
    4128:	24 96       	adiw	r28, 0x04	; 4
    412a:	6f ad       	ldd	r22, Y+63	; 0x3f
    412c:	24 97       	sbiw	r28, 0x04	; 4
    412e:	cf 58       	subi	r28, 0x8F	; 143
    4130:	dd 4f       	sbci	r29, 0xFD	; 253
    4132:	88 81       	ld	r24, Y
    4134:	99 81       	ldd	r25, Y+1	; 0x01
    4136:	c1 57       	subi	r28, 0x71	; 113
    4138:	d2 40       	sbci	r29, 0x02	; 2
    413a:	0e 94 a6 28 	call	0x514c	; 0x514c <sendMidiBuffer>
					readSRAM(((unsigned char *)&mtevent),sizeof(struct midi_time_event));
    413e:	6b e0       	ldi	r22, 0x0B	; 11
    4140:	70 e0       	ldi	r23, 0x00	; 0
    4142:	ce 01       	movw	r24, r28
    4144:	8f 5b       	subi	r24, 0xBF	; 191
    4146:	9f 4f       	sbci	r25, 0xFF	; 255
    4148:	0e 94 c5 30 	call	0x618a	; 0x618a <readSRAM>
					microseconds = getMicros() + mtevent.delta; 
    414c:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <getMicros>
    4150:	2c 96       	adiw	r28, 0x0c	; 12
    4152:	0c ad       	ldd	r16, Y+60	; 0x3c
    4154:	1d ad       	ldd	r17, Y+61	; 0x3d
    4156:	2e ad       	ldd	r18, Y+62	; 0x3e
    4158:	3f ad       	ldd	r19, Y+63	; 0x3f
    415a:	2c 97       	sbiw	r28, 0x0c	; 12
    415c:	2b 01       	movw	r4, r22
    415e:	3c 01       	movw	r6, r24
    4160:	40 0e       	add	r4, r16
    4162:	51 1e       	adc	r5, r17
    4164:	62 1e       	adc	r6, r18
    4166:	73 1e       	adc	r7, r19
    4168:	03 c0       	rjmp	.+6      	; 0x4170 <main+0x59a>
    416a:	68 94       	set
    416c:	ff 24       	eor	r15, r15
    416e:	f1 f8       	bld	r15, 1
				}
			}
			if(!uartReceiveBufferIsEmpty()){
    4170:	0e 94 c4 33 	call	0x6788	; 0x6788 <uartReceiveBufferIsEmpty>
    4174:	81 11       	cpse	r24, r1
    4176:	c8 cd       	rjmp	.-1136   	; 0x3d08 <main+0x132>
				byteValue = (unsigned char)uartGetByte();
    4178:	0e 94 ab 33 	call	0x6756	; 0x6756 <uartGetByte>
				if(readMidiMessage(byteValue,&numOfBytes) == TRUE){
    417c:	be 01       	movw	r22, r28
    417e:	64 5a       	subi	r22, 0xA4	; 164
    4180:	7f 4f       	sbci	r23, 0xFF	; 255
    4182:	0e 94 ef 28 	call	0x51de	; 0x51de <readMidiMessage>
    4186:	81 30       	cpi	r24, 0x01	; 1
    4188:	09 f0       	breq	.+2      	; 0x418c <main+0x5b6>
    418a:	be cd       	rjmp	.-1156   	; 0x3d08 <main+0x132>
					sendMidiMessage(numOfBytes);
    418c:	6d 96       	adiw	r28, 0x1d	; 29
    418e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4190:	6d 97       	sbiw	r28, 0x1d	; 29
    4192:	0e 94 61 28 	call	0x50c2	; 0x50c2 <sendMidiMessage>
					if(currentMode == MIDI_REC && endRecording == FALSE){
    4196:	e3 e0       	ldi	r30, 0x03	; 3
    4198:	fe 12       	cpse	r15, r30
    419a:	b6 cd       	rjmp	.-1172   	; 0x3d08 <main+0x132>
    419c:	d1 10       	cpse	r13, r1
    419e:	b4 cd       	rjmp	.-1176   	; 0x3d08 <main+0x132>
						delta = (getMicros() - microseconds);
    41a0:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <getMicros>
						//WriteVarLen(&soundFile,delta);
						writeSRAM((unsigned char *)getMidiStruct(delta),sizeof(struct midi_time_event));						
    41a4:	64 19       	sub	r22, r4
    41a6:	75 09       	sbc	r23, r5
    41a8:	86 09       	sbc	r24, r6
    41aa:	97 09       	sbc	r25, r7
    41ac:	0e 94 56 28 	call	0x50ac	; 0x50ac <getMidiStruct>
    41b0:	6b e0       	ldi	r22, 0x0B	; 11
    41b2:	70 e0       	ldi	r23, 0x00	; 0
    41b4:	0e 94 eb 2f 	call	0x5fd6	; 0x5fd6 <writeSRAM>
						microseconds = getMicros();
    41b8:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <getMicros>
    41bc:	2b 01       	movw	r4, r22
    41be:	3c 01       	movw	r6, r24
    41c0:	a3 cd       	rjmp	.-1210   	; 0x3d08 <main+0x132>
    41c2:	ff 24       	eor	r15, r15
    41c4:	f3 94       	inc	r15
    41c6:	d4 cf       	rjmp	.-88     	; 0x4170 <main+0x59a>

000041c8 <setMidiHandler>:


const char * getFilename(struct MD_MIDIFile *m) 
{ 
	return(m->_fileName); 
}
    41c8:	fc 01       	movw	r30, r24
    41ca:	71 83       	std	Z+1, r23	; 0x01
    41cc:	60 83       	st	Z, r22
    41ce:	08 95       	ret

000041d0 <setMetaHandler>:
    41d0:	fc 01       	movw	r30, r24
    41d2:	75 83       	std	Z+5, r23	; 0x05
    41d4:	64 83       	std	Z+4, r22	; 0x04
    41d6:	08 95       	ret

000041d8 <setSysexHandler>:
    41d8:	fc 01       	movw	r30, r24
    41da:	73 83       	std	Z+3, r23	; 0x03
    41dc:	62 83       	std	Z+2, r22	; 0x02
    41de:	08 95       	ret

000041e0 <synchTracks>:
    41e0:	0f 93       	push	r16
    41e2:	1f 93       	push	r17
    41e4:	cf 93       	push	r28
    41e6:	df 93       	push	r29
    41e8:	8c 01       	movw	r16, r24
    41ea:	fc 01       	movw	r30, r24
    41ec:	84 a9       	ldd	r24, Z+52	; 0x34
    41ee:	88 23       	and	r24, r24
    41f0:	81 f0       	breq	.+32     	; 0x4212 <synchTracks+0x32>
    41f2:	c0 e0       	ldi	r28, 0x00	; 0
    41f4:	d9 e1       	ldi	r29, 0x19	; 25
    41f6:	c8 01       	movw	r24, r16
    41f8:	dc 9f       	mul	r29, r28
    41fa:	80 0d       	add	r24, r0
    41fc:	91 1d       	adc	r25, r1
    41fe:	11 24       	eor	r1, r1
    4200:	85 5b       	subi	r24, 0xB5	; 181
    4202:	9f 4f       	sbci	r25, 0xFF	; 255
    4204:	0e 94 b3 24 	call	0x4966	; 0x4966 <syncTime>
    4208:	cf 5f       	subi	r28, 0xFF	; 255
    420a:	f8 01       	movw	r30, r16
    420c:	84 a9       	ldd	r24, Z+52	; 0x34
    420e:	c8 17       	cp	r28, r24
    4210:	90 f3       	brcs	.-28     	; 0x41f6 <synchTracks+0x16>
    4212:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <getMicros>
    4216:	f8 01       	movw	r30, r16
    4218:	fd 96       	adiw	r30, 0x3d	; 61
    421a:	60 83       	st	Z, r22
    421c:	71 83       	std	Z+1, r23	; 0x01
    421e:	82 83       	std	Z+2, r24	; 0x02
    4220:	93 83       	std	Z+3, r25	; 0x03
    4222:	df 91       	pop	r29
    4224:	cf 91       	pop	r28
    4226:	1f 91       	pop	r17
    4228:	0f 91       	pop	r16
    422a:	08 95       	ret

0000422c <closeMIDIFile>:
    422c:	0f 93       	push	r16
    422e:	1f 93       	push	r17
    4230:	cf 93       	push	r28
    4232:	df 93       	push	r29
    4234:	8c 01       	movw	r16, r24
    4236:	fc 01       	movw	r30, r24
    4238:	84 a9       	ldd	r24, Z+52	; 0x34
    423a:	88 23       	and	r24, r24
    423c:	81 f0       	breq	.+32     	; 0x425e <closeMIDIFile+0x32>
    423e:	c0 e0       	ldi	r28, 0x00	; 0
    4240:	d9 e1       	ldi	r29, 0x19	; 25
    4242:	c8 01       	movw	r24, r16
    4244:	dc 9f       	mul	r29, r28
    4246:	80 0d       	add	r24, r0
    4248:	91 1d       	adc	r25, r1
    424a:	11 24       	eor	r1, r1
    424c:	85 5b       	subi	r24, 0xB5	; 181
    424e:	9f 4f       	sbci	r25, 0xFF	; 255
    4250:	0e 94 d6 24 	call	0x49ac	; 0x49ac <closeTrack>
    4254:	cf 5f       	subi	r28, 0xFF	; 255
    4256:	f8 01       	movw	r30, r16
    4258:	84 a9       	ldd	r24, Z+52	; 0x34
    425a:	c8 17       	cp	r28, r24
    425c:	90 f3       	brcs	.-28     	; 0x4242 <closeMIDIFile+0x16>
    425e:	f8 01       	movw	r30, r16
    4260:	14 aa       	std	Z+52, r1	; 0x34
    4262:	ef 5b       	subi	r30, 0xBF	; 191
    4264:	ff 4f       	sbci	r31, 0xFF	; 255
    4266:	10 82       	st	Z, r1
    4268:	31 96       	adiw	r30, 0x01	; 1
    426a:	10 82       	st	Z, r1
    426c:	f8 01       	movw	r30, r16
    426e:	16 a2       	std	Z+38, r1	; 0x26
    4270:	c8 01       	movw	r24, r16
    4272:	06 96       	adiw	r24, 0x06	; 6
    4274:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <f_close>
    4278:	df 91       	pop	r29
    427a:	cf 91       	pop	r28
    427c:	1f 91       	pop	r17
    427e:	0f 91       	pop	r16
    4280:	08 95       	ret

00004282 <calcTickTime>:
    4282:	0f 93       	push	r16
    4284:	1f 93       	push	r17
    4286:	cf 93       	push	r28
    4288:	df 93       	push	r29
    428a:	ec 01       	movw	r28, r24
    428c:	dc 01       	movw	r26, r24
    428e:	ac 5b       	subi	r26, 0xBC	; 188
    4290:	bf 4f       	sbci	r27, 0xFF	; 255
    4292:	fc 01       	movw	r30, r24
    4294:	ea 5b       	subi	r30, 0xBA	; 186
    4296:	ff 4f       	sbci	r31, 0xFF	; 255
    4298:	2d 91       	ld	r18, X+
    429a:	3c 91       	ld	r19, X
    429c:	80 81       	ld	r24, Z
    429e:	91 81       	ldd	r25, Z+1	; 0x01
    42a0:	28 0f       	add	r18, r24
    42a2:	39 1f       	adc	r19, r25
    42a4:	21 15       	cp	r18, r1
    42a6:	31 05       	cpc	r19, r1
    42a8:	e1 f0       	breq	.+56     	; 0x42e2 <calcTickTime+0x60>
    42aa:	0d a9       	ldd	r16, Y+53	; 0x35
    42ac:	1e a9       	ldd	r17, Y+54	; 0x36
    42ae:	01 15       	cp	r16, r1
    42b0:	11 05       	cpc	r17, r1
    42b2:	b9 f0       	breq	.+46     	; 0x42e2 <calcTickTime+0x60>
    42b4:	33 96       	adiw	r30, 0x03	; 3
    42b6:	80 81       	ld	r24, Z
    42b8:	88 23       	and	r24, r24
    42ba:	99 f0       	breq	.+38     	; 0x42e2 <calcTickTime+0x60>
    42bc:	40 e0       	ldi	r20, 0x00	; 0
    42be:	50 e0       	ldi	r21, 0x00	; 0
    42c0:	60 e0       	ldi	r22, 0x00	; 0
    42c2:	77 e8       	ldi	r23, 0x87	; 135
    42c4:	83 e9       	ldi	r24, 0x93	; 147
    42c6:	93 e0       	ldi	r25, 0x03	; 3
    42c8:	0e 94 19 36 	call	0x6c32	; 0x6c32 <__divmodsi4>
    42cc:	ca 01       	movw	r24, r20
    42ce:	b9 01       	movw	r22, r18
    42d0:	98 01       	movw	r18, r16
    42d2:	40 e0       	ldi	r20, 0x00	; 0
    42d4:	50 e0       	ldi	r21, 0x00	; 0
    42d6:	0e 94 f7 35 	call	0x6bee	; 0x6bee <__udivmodsi4>
    42da:	2f ab       	std	Y+55, r18	; 0x37
    42dc:	38 af       	std	Y+56, r19	; 0x38
    42de:	49 af       	std	Y+57, r20	; 0x39
    42e0:	5a af       	std	Y+58, r21	; 0x3a
    42e2:	df 91       	pop	r29
    42e4:	cf 91       	pop	r28
    42e6:	1f 91       	pop	r17
    42e8:	0f 91       	pop	r16
    42ea:	08 95       	ret

000042ec <setTempoAdjust>:
    42ec:	fc 01       	movw	r30, r24
    42ee:	ec 5b       	subi	r30, 0xBC	; 188
    42f0:	ff 4f       	sbci	r31, 0xFF	; 255
    42f2:	20 81       	ld	r18, Z
    42f4:	31 81       	ldd	r19, Z+1	; 0x01
    42f6:	26 0f       	add	r18, r22
    42f8:	37 1f       	adc	r19, r23
    42fa:	23 2b       	or	r18, r19
    42fc:	19 f0       	breq	.+6      	; 0x4304 <setTempoAdjust+0x18>
    42fe:	32 96       	adiw	r30, 0x02	; 2
    4300:	71 83       	std	Z+1, r23	; 0x01
    4302:	60 83       	st	Z, r22
    4304:	0e 94 41 21 	call	0x4282	; 0x4282 <calcTickTime>
    4308:	08 95       	ret

0000430a <setTempo>:
    430a:	fc 01       	movw	r30, r24
    430c:	ea 5b       	subi	r30, 0xBA	; 186
    430e:	ff 4f       	sbci	r31, 0xFF	; 255
    4310:	20 81       	ld	r18, Z
    4312:	31 81       	ldd	r19, Z+1	; 0x01
    4314:	26 0f       	add	r18, r22
    4316:	37 1f       	adc	r19, r23
    4318:	23 2b       	or	r18, r19
    431a:	19 f0       	breq	.+6      	; 0x4322 <setTempo+0x18>
    431c:	32 97       	sbiw	r30, 0x02	; 2
    431e:	71 83       	std	Z+1, r23	; 0x01
    4320:	60 83       	st	Z, r22
    4322:	0e 94 41 21 	call	0x4282	; 0x4282 <calcTickTime>
    4326:	08 95       	ret

00004328 <setTimeSignature>:
    4328:	fc 01       	movw	r30, r24
    432a:	e8 5b       	subi	r30, 0xB8	; 184
    432c:	ff 4f       	sbci	r31, 0xFF	; 255
    432e:	60 83       	st	Z, r22
    4330:	31 96       	adiw	r30, 0x01	; 1
    4332:	40 83       	st	Z, r20
    4334:	0e 94 41 21 	call	0x4282	; 0x4282 <calcTickTime>
    4338:	08 95       	ret

0000433a <setMicrosecondPerQuarterNote>:
    433a:	0f 93       	push	r16
    433c:	1f 93       	push	r17
    433e:	cf 93       	push	r28
    4340:	df 93       	push	r29
    4342:	ec 01       	movw	r28, r24
    4344:	9a 01       	movw	r18, r20
    4346:	ab 01       	movw	r20, r22
    4348:	8c 01       	movw	r16, r24
    434a:	0c 5b       	subi	r16, 0xBC	; 188
    434c:	1f 4f       	sbci	r17, 0xFF	; 255
    434e:	60 e0       	ldi	r22, 0x00	; 0
    4350:	77 e8       	ldi	r23, 0x87	; 135
    4352:	83 e9       	ldi	r24, 0x93	; 147
    4354:	93 e0       	ldi	r25, 0x03	; 3
    4356:	0e 94 f7 35 	call	0x6bee	; 0x6bee <__udivmodsi4>
    435a:	f8 01       	movw	r30, r16
    435c:	31 83       	std	Z+1, r19	; 0x01
    435e:	20 83       	st	Z, r18
    4360:	ce 01       	movw	r24, r28
    4362:	0e 94 41 21 	call	0x4282	; 0x4282 <calcTickTime>
    4366:	df 91       	pop	r29
    4368:	cf 91       	pop	r28
    436a:	1f 91       	pop	r17
    436c:	0f 91       	pop	r16
    436e:	08 95       	ret

00004370 <initialise>:
    4370:	cf 93       	push	r28
    4372:	df 93       	push	r29
    4374:	ec 01       	movw	r28, r24
    4376:	1c aa       	std	Y+52, r1	; 0x34
    4378:	1b aa       	std	Y+51, r1	; 0x33
    437a:	1f aa       	std	Y+55, r1	; 0x37
    437c:	18 ae       	std	Y+56, r1	; 0x38
    437e:	19 ae       	std	Y+57, r1	; 0x39
    4380:	1a ae       	std	Y+58, r1	; 0x3a
    4382:	1c ae       	std	Y+60, r1	; 0x3c
    4384:	1b ae       	std	Y+59, r1	; 0x3b
    4386:	fc 01       	movw	r30, r24
    4388:	ef 5b       	subi	r30, 0xBF	; 191
    438a:	ff 4f       	sbci	r31, 0xFF	; 255
    438c:	10 82       	st	Z, r1
    438e:	32 96       	adiw	r30, 0x02	; 2
    4390:	10 82       	st	Z, r1
    4392:	31 97       	sbiw	r30, 0x01	; 1
    4394:	10 82       	st	Z, r1
    4396:	19 82       	std	Y+1, r1	; 0x01
    4398:	18 82       	st	Y, r1
    439a:	1b 82       	std	Y+3, r1	; 0x03
    439c:	1a 82       	std	Y+2, r1	; 0x02
    439e:	1d 82       	std	Y+5, r1	; 0x05
    43a0:	1c 82       	std	Y+4, r1	; 0x04
    43a2:	1e a2       	std	Y+38, r1	; 0x26
    43a4:	80 e3       	ldi	r24, 0x30	; 48
    43a6:	90 e0       	ldi	r25, 0x00	; 0
    43a8:	9e ab       	std	Y+54, r25	; 0x36
    43aa:	8d ab       	std	Y+53, r24	; 0x35
    43ac:	ce 01       	movw	r24, r28
    43ae:	0e 94 41 21 	call	0x4282	; 0x4282 <calcTickTime>
    43b2:	68 e7       	ldi	r22, 0x78	; 120
    43b4:	70 e0       	ldi	r23, 0x00	; 0
    43b6:	ce 01       	movw	r24, r28
    43b8:	0e 94 85 21 	call	0x430a	; 0x430a <setTempo>
    43bc:	60 e0       	ldi	r22, 0x00	; 0
    43be:	70 e0       	ldi	r23, 0x00	; 0
    43c0:	ce 01       	movw	r24, r28
    43c2:	0e 94 76 21 	call	0x42ec	; 0x42ec <setTempoAdjust>
    43c6:	fe 01       	movw	r30, r28
    43c8:	ec 5b       	subi	r30, 0xBC	; 188
    43ca:	ff 4f       	sbci	r31, 0xFF	; 255
    43cc:	88 e7       	ldi	r24, 0x78	; 120
    43ce:	90 e0       	ldi	r25, 0x00	; 0
    43d0:	91 83       	std	Z+1, r25	; 0x01
    43d2:	80 83       	st	Z, r24
    43d4:	ce 01       	movw	r24, r28
    43d6:	0e 94 41 21 	call	0x4282	; 0x4282 <calcTickTime>
    43da:	fe 01       	movw	r30, r28
    43dc:	e8 5b       	subi	r30, 0xB8	; 184
    43de:	ff 4f       	sbci	r31, 0xFF	; 255
    43e0:	84 e0       	ldi	r24, 0x04	; 4
    43e2:	80 83       	st	Z, r24
    43e4:	31 96       	adiw	r30, 0x01	; 1
    43e6:	80 83       	st	Z, r24
    43e8:	ce 01       	movw	r24, r28
    43ea:	0e 94 41 21 	call	0x4282	; 0x4282 <calcTickTime>
    43ee:	df 91       	pop	r29
    43f0:	cf 91       	pop	r28
    43f2:	08 95       	ret

000043f4 <restart>:
    43f4:	0f 93       	push	r16
    43f6:	1f 93       	push	r17
    43f8:	cf 93       	push	r28
    43fa:	df 93       	push	r29
    43fc:	8c 01       	movw	r16, r24
    43fe:	fc 01       	movw	r30, r24
    4400:	ed 5b       	subi	r30, 0xBD	; 189
    4402:	ff 4f       	sbci	r31, 0xFF	; 255
    4404:	80 81       	ld	r24, Z
    4406:	88 23       	and	r24, r24
    4408:	21 f0       	breq	.+8      	; 0x4412 <restart+0x1e>
    440a:	f8 01       	movw	r30, r16
    440c:	84 a9       	ldd	r24, Z+52	; 0x34
    440e:	82 30       	cpi	r24, 0x02	; 2
    4410:	30 f4       	brcc	.+12     	; 0x441e <restart+0x2a>
    4412:	f8 01       	movw	r30, r16
    4414:	84 a9       	ldd	r24, Z+52	; 0x34
    4416:	88 23       	and	r24, r24
    4418:	91 f0       	breq	.+36     	; 0x443e <restart+0x4a>
    441a:	c0 e0       	ldi	r28, 0x00	; 0
    441c:	01 c0       	rjmp	.+2      	; 0x4420 <restart+0x2c>
    441e:	c1 e0       	ldi	r28, 0x01	; 1
    4420:	d9 e1       	ldi	r29, 0x19	; 25
    4422:	c8 01       	movw	r24, r16
    4424:	dc 9f       	mul	r29, r28
    4426:	80 0d       	add	r24, r0
    4428:	91 1d       	adc	r25, r1
    442a:	11 24       	eor	r1, r1
    442c:	85 5b       	subi	r24, 0xB5	; 181
    442e:	9f 4f       	sbci	r25, 0xFF	; 255
    4430:	0e 94 b9 24 	call	0x4972	; 0x4972 <restartTrack>
    4434:	cf 5f       	subi	r28, 0xFF	; 255
    4436:	f8 01       	movw	r30, r16
    4438:	84 a9       	ldd	r24, Z+52	; 0x34
    443a:	c8 17       	cp	r28, r24
    443c:	90 f3       	brcs	.-28     	; 0x4422 <restart+0x2e>
    443e:	f8 01       	movw	r30, r16
    4440:	ef 5b       	subi	r30, 0xBF	; 191
    4442:	ff 4f       	sbci	r31, 0xFF	; 255
    4444:	10 82       	st	Z, r1
    4446:	df 91       	pop	r29
    4448:	cf 91       	pop	r28
    444a:	1f 91       	pop	r17
    444c:	0f 91       	pop	r16
    444e:	08 95       	ret

00004450 <isEOF>:
    4450:	0f 93       	push	r16
    4452:	1f 93       	push	r17
    4454:	cf 93       	push	r28
    4456:	df 93       	push	r29
    4458:	8c 01       	movw	r16, r24
    445a:	fc 01       	movw	r30, r24
    445c:	84 a9       	ldd	r24, Z+52	; 0x34
    445e:	88 23       	and	r24, r24
    4460:	71 f0       	breq	.+28     	; 0x447e <isEOF+0x2e>
    4462:	c0 e0       	ldi	r28, 0x00	; 0
    4464:	d9 e1       	ldi	r29, 0x19	; 25
    4466:	c8 01       	movw	r24, r16
    4468:	dc 9f       	mul	r29, r28
    446a:	80 0d       	add	r24, r0
    446c:	91 1d       	adc	r25, r1
    446e:	11 24       	eor	r1, r1
    4470:	85 5b       	subi	r24, 0xB5	; 181
    4472:	9f 4f       	sbci	r25, 0xFF	; 255
    4474:	0e 94 b0 24 	call	0x4960	; 0x4960 <getEndOfTrack>
    4478:	81 11       	cpse	r24, r1
    447a:	0e c0       	rjmp	.+28     	; 0x4498 <isEOF+0x48>
    447c:	13 c0       	rjmp	.+38     	; 0x44a4 <isEOF+0x54>
    447e:	f8 01       	movw	r30, r16
    4480:	ed 5b       	subi	r30, 0xBD	; 189
    4482:	ff 4f       	sbci	r31, 0xFF	; 255
    4484:	80 81       	ld	r24, Z
    4486:	88 23       	and	r24, r24
    4488:	29 f0       	breq	.+10     	; 0x4494 <isEOF+0x44>
    448a:	c8 01       	movw	r24, r16
    448c:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <restart>
    4490:	80 e0       	ldi	r24, 0x00	; 0
    4492:	08 c0       	rjmp	.+16     	; 0x44a4 <isEOF+0x54>
    4494:	81 e0       	ldi	r24, 0x01	; 1
    4496:	06 c0       	rjmp	.+12     	; 0x44a4 <isEOF+0x54>
    4498:	cf 5f       	subi	r28, 0xFF	; 255
    449a:	f8 01       	movw	r30, r16
    449c:	84 a9       	ldd	r24, Z+52	; 0x34
    449e:	c8 17       	cp	r28, r24
    44a0:	10 f3       	brcs	.-60     	; 0x4466 <isEOF+0x16>
    44a2:	ed cf       	rjmp	.-38     	; 0x447e <isEOF+0x2e>
    44a4:	df 91       	pop	r29
    44a6:	cf 91       	pop	r28
    44a8:	1f 91       	pop	r17
    44aa:	0f 91       	pop	r16
    44ac:	08 95       	ret

000044ae <tickClock>:
    44ae:	8f 92       	push	r8
    44b0:	9f 92       	push	r9
    44b2:	af 92       	push	r10
    44b4:	bf 92       	push	r11
    44b6:	cf 92       	push	r12
    44b8:	df 92       	push	r13
    44ba:	ef 92       	push	r14
    44bc:	ff 92       	push	r15
    44be:	0f 93       	push	r16
    44c0:	1f 93       	push	r17
    44c2:	cf 93       	push	r28
    44c4:	df 93       	push	r29
    44c6:	ec 01       	movw	r28, r24
    44c8:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <getMicros>
    44cc:	2b ad       	ldd	r18, Y+59	; 0x3b
    44ce:	3c ad       	ldd	r19, Y+60	; 0x3c
    44d0:	69 01       	movw	r12, r18
    44d2:	e1 2c       	mov	r14, r1
    44d4:	f1 2c       	mov	r15, r1
    44d6:	fe 01       	movw	r30, r28
    44d8:	fd 96       	adiw	r30, 0x3d	; 61
    44da:	00 81       	ld	r16, Z
    44dc:	11 81       	ldd	r17, Z+1	; 0x01
    44de:	22 81       	ldd	r18, Z+2	; 0x02
    44e0:	33 81       	ldd	r19, Z+3	; 0x03
    44e2:	46 01       	movw	r8, r12
    44e4:	57 01       	movw	r10, r14
    44e6:	80 1a       	sub	r8, r16
    44e8:	91 0a       	sbc	r9, r17
    44ea:	a2 0a       	sbc	r10, r18
    44ec:	b3 0a       	sbc	r11, r19
    44ee:	75 01       	movw	r14, r10
    44f0:	64 01       	movw	r12, r8
    44f2:	c6 0e       	add	r12, r22
    44f4:	d7 1e       	adc	r13, r23
    44f6:	e8 1e       	adc	r14, r24
    44f8:	f9 1e       	adc	r15, r25
    44fa:	8f a8       	ldd	r8, Y+55	; 0x37
    44fc:	98 ac       	ldd	r9, Y+56	; 0x38
    44fe:	a9 ac       	ldd	r10, Y+57	; 0x39
    4500:	ba ac       	ldd	r11, Y+58	; 0x3a
    4502:	c8 14       	cp	r12, r8
    4504:	d9 04       	cpc	r13, r9
    4506:	ea 04       	cpc	r14, r10
    4508:	fb 04       	cpc	r15, r11
    450a:	d8 f0       	brcs	.+54     	; 0x4542 <tickClock+0x94>
    450c:	c7 01       	movw	r24, r14
    450e:	b6 01       	movw	r22, r12
    4510:	a5 01       	movw	r20, r10
    4512:	94 01       	movw	r18, r8
    4514:	0e 94 f7 35 	call	0x6bee	; 0x6bee <__udivmodsi4>
    4518:	89 01       	movw	r16, r18
    451a:	28 9d       	mul	r18, r8
    451c:	c0 01       	movw	r24, r0
    451e:	29 9d       	mul	r18, r9
    4520:	90 0d       	add	r25, r0
    4522:	38 9d       	mul	r19, r8
    4524:	90 0d       	add	r25, r0
    4526:	11 24       	eor	r1, r1
    4528:	56 01       	movw	r10, r12
    452a:	a8 1a       	sub	r10, r24
    452c:	b9 0a       	sbc	r11, r25
    452e:	bc ae       	std	Y+60, r11	; 0x3c
    4530:	ab ae       	std	Y+59, r10	; 0x3b
    4532:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <getMicros>
    4536:	ed 96       	adiw	r28, 0x3d	; 61
    4538:	68 83       	st	Y, r22
    453a:	79 83       	std	Y+1, r23	; 0x01
    453c:	8a 83       	std	Y+2, r24	; 0x02
    453e:	9b 83       	std	Y+3, r25	; 0x03
    4540:	02 c0       	rjmp	.+4      	; 0x4546 <tickClock+0x98>
    4542:	00 e0       	ldi	r16, 0x00	; 0
    4544:	10 e0       	ldi	r17, 0x00	; 0
    4546:	c8 01       	movw	r24, r16
    4548:	df 91       	pop	r29
    454a:	cf 91       	pop	r28
    454c:	1f 91       	pop	r17
    454e:	0f 91       	pop	r16
    4550:	ff 90       	pop	r15
    4552:	ef 90       	pop	r14
    4554:	df 90       	pop	r13
    4556:	cf 90       	pop	r12
    4558:	bf 90       	pop	r11
    455a:	af 90       	pop	r10
    455c:	9f 90       	pop	r9
    455e:	8f 90       	pop	r8
    4560:	08 95       	ret

00004562 <processEvents>:
    4562:	af 92       	push	r10
    4564:	bf 92       	push	r11
    4566:	cf 92       	push	r12
    4568:	df 92       	push	r13
    456a:	ef 92       	push	r14
    456c:	ff 92       	push	r15
    456e:	0f 93       	push	r16
    4570:	1f 93       	push	r17
    4572:	cf 93       	push	r28
    4574:	df 93       	push	r29
    4576:	c0 e0       	ldi	r28, 0x00	; 0
    4578:	fc 01       	movw	r30, r24
    457a:	24 a9       	ldd	r18, Z+52	; 0x34
    457c:	22 23       	and	r18, r18
    457e:	21 f1       	breq	.+72     	; 0x45c8 <processEvents+0x66>
    4580:	7b 01       	movw	r14, r22
    4582:	8c 01       	movw	r16, r24
    4584:	d0 e0       	ldi	r29, 0x00	; 0
    4586:	0f 2e       	mov	r0, r31
    4588:	f9 e1       	ldi	r31, 0x19	; 25
    458a:	df 2e       	mov	r13, r31
    458c:	f0 2d       	mov	r31, r0
    458e:	bb 24       	eor	r11, r11
    4590:	b3 94       	inc	r11
    4592:	cc 24       	eor	r12, r12
    4594:	c3 94       	inc	r12
    4596:	a1 2c       	mov	r10, r1
    4598:	b8 01       	movw	r22, r16
    459a:	dd 9e       	mul	r13, r29
    459c:	60 0d       	add	r22, r0
    459e:	71 1d       	adc	r23, r1
    45a0:	11 24       	eor	r1, r1
    45a2:	65 5b       	subi	r22, 0xB5	; 181
    45a4:	7f 4f       	sbci	r23, 0xFF	; 255
    45a6:	a7 01       	movw	r20, r14
    45a8:	c8 01       	movw	r24, r16
    45aa:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <getNextTrackEvent>
    45ae:	c1 11       	cpse	r28, r1
    45b0:	05 c0       	rjmp	.+10     	; 0x45bc <processEvents+0x5a>
    45b2:	cc 2d       	mov	r28, r12
    45b4:	81 11       	cpse	r24, r1
    45b6:	03 c0       	rjmp	.+6      	; 0x45be <processEvents+0x5c>
    45b8:	ca 2d       	mov	r28, r10
    45ba:	01 c0       	rjmp	.+2      	; 0x45be <processEvents+0x5c>
    45bc:	cb 2d       	mov	r28, r11
    45be:	df 5f       	subi	r29, 0xFF	; 255
    45c0:	f8 01       	movw	r30, r16
    45c2:	84 a9       	ldd	r24, Z+52	; 0x34
    45c4:	d8 17       	cp	r29, r24
    45c6:	40 f3       	brcs	.-48     	; 0x4598 <processEvents+0x36>
    45c8:	df 91       	pop	r29
    45ca:	cf 91       	pop	r28
    45cc:	1f 91       	pop	r17
    45ce:	0f 91       	pop	r16
    45d0:	ff 90       	pop	r15
    45d2:	ef 90       	pop	r14
    45d4:	df 90       	pop	r13
    45d6:	cf 90       	pop	r12
    45d8:	bf 90       	pop	r11
    45da:	af 90       	pop	r10
    45dc:	08 95       	ret

000045de <getNextEvent>:
    45de:	0f 93       	push	r16
    45e0:	1f 93       	push	r17
    45e2:	cf 93       	push	r28
    45e4:	fc 01       	movw	r30, r24
    45e6:	ee 5b       	subi	r30, 0xBE	; 190
    45e8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ea:	c0 81       	ld	r28, Z
    45ec:	c1 11       	cpse	r28, r1
    45ee:	18 c0       	rjmp	.+48     	; 0x4620 <getNextEvent+0x42>
    45f0:	8c 01       	movw	r16, r24
    45f2:	31 97       	sbiw	r30, 0x01	; 1
    45f4:	80 81       	ld	r24, Z
    45f6:	81 11       	cpse	r24, r1
    45f8:	08 c0       	rjmp	.+16     	; 0x460a <getNextEvent+0x2c>
    45fa:	c8 01       	movw	r24, r16
    45fc:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <synchTracks>
    4600:	81 e0       	ldi	r24, 0x01	; 1
    4602:	f8 01       	movw	r30, r16
    4604:	ef 5b       	subi	r30, 0xBF	; 191
    4606:	ff 4f       	sbci	r31, 0xFF	; 255
    4608:	80 83       	st	Z, r24
    460a:	c8 01       	movw	r24, r16
    460c:	0e 94 57 22 	call	0x44ae	; 0x44ae <tickClock>
    4610:	00 97       	sbiw	r24, 0x00	; 0
    4612:	39 f0       	breq	.+14     	; 0x4622 <getNextEvent+0x44>
    4614:	bc 01       	movw	r22, r24
    4616:	c8 01       	movw	r24, r16
    4618:	0e 94 b1 22 	call	0x4562	; 0x4562 <processEvents>
    461c:	c1 e0       	ldi	r28, 0x01	; 1
    461e:	01 c0       	rjmp	.+2      	; 0x4622 <getNextEvent+0x44>
    4620:	c0 e0       	ldi	r28, 0x00	; 0
    4622:	8c 2f       	mov	r24, r28
    4624:	cf 91       	pop	r28
    4626:	1f 91       	pop	r17
    4628:	0f 91       	pop	r16
    462a:	08 95       	ret

0000462c <loadMIDIFile>:
    462c:	8f 92       	push	r8
    462e:	9f 92       	push	r9
    4630:	af 92       	push	r10
    4632:	bf 92       	push	r11
    4634:	cf 92       	push	r12
    4636:	df 92       	push	r13
    4638:	ef 92       	push	r14
    463a:	ff 92       	push	r15
    463c:	0f 93       	push	r16
    463e:	1f 93       	push	r17
    4640:	cf 93       	push	r28
    4642:	df 93       	push	r29
    4644:	cd b7       	in	r28, 0x3d	; 61
    4646:	de b7       	in	r29, 0x3e	; 62
    4648:	29 97       	sbiw	r28, 0x09	; 9
    464a:	0f b6       	in	r0, 0x3f	; 63
    464c:	f8 94       	cli
    464e:	de bf       	out	0x3e, r29	; 62
    4650:	0f be       	out	0x3f, r0	; 63
    4652:	cd bf       	out	0x3d, r28	; 61
    4654:	fc 01       	movw	r30, r24
    4656:	26 a1       	ldd	r18, Z+38	; 0x26
    4658:	22 23       	and	r18, r18
    465a:	09 f4       	brne	.+2      	; 0x465e <loadMIDIFile+0x32>
    465c:	d0 c0       	rjmp	.+416    	; 0x47fe <loadMIDIFile+0x1d2>
    465e:	8c 01       	movw	r16, r24
    4660:	6c 01       	movw	r12, r24
    4662:	f6 e0       	ldi	r31, 0x06	; 6
    4664:	cf 0e       	add	r12, r31
    4666:	d1 1c       	adc	r13, r1
    4668:	bc 01       	movw	r22, r24
    466a:	6a 5d       	subi	r22, 0xDA	; 218
    466c:	7f 4f       	sbci	r23, 0xFF	; 255
    466e:	41 e0       	ldi	r20, 0x01	; 1
    4670:	c6 01       	movw	r24, r12
    4672:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <f_open>
    4676:	81 11       	cpse	r24, r1
    4678:	c5 c0       	rjmp	.+394    	; 0x4804 <loadMIDIFile+0x1d8>
    467a:	9e 01       	movw	r18, r28
    467c:	2f 5f       	subi	r18, 0xFF	; 255
    467e:	3f 4f       	sbci	r19, 0xFF	; 255
    4680:	44 e0       	ldi	r20, 0x04	; 4
    4682:	50 e0       	ldi	r21, 0x00	; 0
    4684:	be 01       	movw	r22, r28
    4686:	6b 5f       	subi	r22, 0xFB	; 251
    4688:	7f 4f       	sbci	r23, 0xFF	; 255
    468a:	c6 01       	movw	r24, r12
    468c:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
    4690:	19 86       	std	Y+9, r1	; 0x09
    4692:	65 e4       	ldi	r22, 0x45	; 69
    4694:	71 e0       	ldi	r23, 0x01	; 1
    4696:	ce 01       	movw	r24, r28
    4698:	05 96       	adiw	r24, 0x05	; 5
    469a:	0e 94 79 37 	call	0x6ef2	; 0x6ef2 <strcmp>
    469e:	89 2b       	or	r24, r25
    46a0:	31 f0       	breq	.+12     	; 0x46ae <loadMIDIFile+0x82>
    46a2:	c6 01       	movw	r24, r12
    46a4:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <f_close>
    46a8:	83 e0       	ldi	r24, 0x03	; 3
    46aa:	90 e0       	ldi	r25, 0x00	; 0
    46ac:	b0 c0       	rjmp	.+352    	; 0x480e <loadMIDIFile+0x1e2>
    46ae:	64 e0       	ldi	r22, 0x04	; 4
    46b0:	c6 01       	movw	r24, r12
    46b2:	0e 94 21 24 	call	0x4842	; 0x4842 <readMultiByte>
    46b6:	69 83       	std	Y+1, r22	; 0x01
    46b8:	7a 83       	std	Y+2, r23	; 0x02
    46ba:	8b 83       	std	Y+3, r24	; 0x03
    46bc:	9c 83       	std	Y+4, r25	; 0x04
    46be:	66 30       	cpi	r22, 0x06	; 6
    46c0:	71 05       	cpc	r23, r1
    46c2:	81 05       	cpc	r24, r1
    46c4:	91 05       	cpc	r25, r1
    46c6:	31 f0       	breq	.+12     	; 0x46d4 <loadMIDIFile+0xa8>
    46c8:	c6 01       	movw	r24, r12
    46ca:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <f_close>
    46ce:	84 e0       	ldi	r24, 0x04	; 4
    46d0:	90 e0       	ldi	r25, 0x00	; 0
    46d2:	9d c0       	rjmp	.+314    	; 0x480e <loadMIDIFile+0x1e2>
    46d4:	62 e0       	ldi	r22, 0x02	; 2
    46d6:	c6 01       	movw	r24, r12
    46d8:	0e 94 21 24 	call	0x4842	; 0x4842 <readMultiByte>
    46dc:	62 30       	cpi	r22, 0x02	; 2
    46de:	71 05       	cpc	r23, r1
    46e0:	30 f0       	brcs	.+12     	; 0x46ee <loadMIDIFile+0xc2>
    46e2:	c6 01       	movw	r24, r12
    46e4:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <f_close>
    46e8:	85 e0       	ldi	r24, 0x05	; 5
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	90 c0       	rjmp	.+288    	; 0x480e <loadMIDIFile+0x1e2>
    46ee:	f8 01       	movw	r30, r16
    46f0:	63 ab       	std	Z+51, r22	; 0x33
    46f2:	62 e0       	ldi	r22, 0x02	; 2
    46f4:	c6 01       	movw	r24, r12
    46f6:	0e 94 21 24 	call	0x4842	; 0x4842 <readMultiByte>
    46fa:	27 2f       	mov	r18, r23
    46fc:	86 2f       	mov	r24, r22
    46fe:	92 2f       	mov	r25, r18
    4700:	f8 01       	movw	r30, r16
    4702:	23 a9       	ldd	r18, Z+51	; 0x33
    4704:	21 11       	cpse	r18, r1
    4706:	08 c0       	rjmp	.+16     	; 0x4718 <loadMIDIFile+0xec>
    4708:	01 97       	sbiw	r24, 0x01	; 1
    470a:	71 f0       	breq	.+28     	; 0x4728 <loadMIDIFile+0xfc>
    470c:	c6 01       	movw	r24, r12
    470e:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <f_close>
    4712:	86 e0       	ldi	r24, 0x06	; 6
    4714:	90 e0       	ldi	r25, 0x00	; 0
    4716:	7b c0       	rjmp	.+246    	; 0x480e <loadMIDIFile+0x1e2>
    4718:	41 97       	sbiw	r24, 0x11	; 17
    471a:	30 f0       	brcs	.+12     	; 0x4728 <loadMIDIFile+0xfc>
    471c:	c6 01       	movw	r24, r12
    471e:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <f_close>
    4722:	87 e0       	ldi	r24, 0x07	; 7
    4724:	90 e0       	ldi	r25, 0x00	; 0
    4726:	73 c0       	rjmp	.+230    	; 0x480e <loadMIDIFile+0x1e2>
    4728:	f8 01       	movw	r30, r16
    472a:	64 ab       	std	Z+52, r22	; 0x34
    472c:	62 e0       	ldi	r22, 0x02	; 2
    472e:	c6 01       	movw	r24, r12
    4730:	0e 94 21 24 	call	0x4842	; 0x4842 <readMultiByte>
    4734:	ab 01       	movw	r20, r22
    4736:	77 23       	and	r23, r23
    4738:	54 f5       	brge	.+84     	; 0x478e <loadMIDIFile+0x162>
    473a:	27 2f       	mov	r18, r23
    473c:	33 27       	eor	r19, r19
    473e:	23 3e       	cpi	r18, 0xE3	; 227
    4740:	31 05       	cpc	r19, r1
    4742:	d9 f0       	breq	.+54     	; 0x477a <loadMIDIFile+0x14e>
    4744:	20 f4       	brcc	.+8      	; 0x474e <loadMIDIFile+0x122>
    4746:	22 3e       	cpi	r18, 0xE2	; 226
    4748:	31 05       	cpc	r19, r1
    474a:	59 f0       	breq	.+22     	; 0x4762 <loadMIDIFile+0x136>
    474c:	0d c0       	rjmp	.+26     	; 0x4768 <loadMIDIFile+0x13c>
    474e:	27 3e       	cpi	r18, 0xE7	; 231
    4750:	31 05       	cpc	r19, r1
    4752:	21 f0       	breq	.+8      	; 0x475c <loadMIDIFile+0x130>
    4754:	28 3e       	cpi	r18, 0xE8	; 232
    4756:	31 05       	cpc	r19, r1
    4758:	69 f0       	breq	.+26     	; 0x4774 <loadMIDIFile+0x148>
    475a:	06 c0       	rjmp	.+12     	; 0x4768 <loadMIDIFile+0x13c>
    475c:	29 e1       	ldi	r18, 0x19	; 25
    475e:	30 e0       	ldi	r19, 0x00	; 0
    4760:	0e c0       	rjmp	.+28     	; 0x477e <loadMIDIFile+0x152>
    4762:	2e e1       	ldi	r18, 0x1E	; 30
    4764:	30 e0       	ldi	r19, 0x00	; 0
    4766:	0b c0       	rjmp	.+22     	; 0x477e <loadMIDIFile+0x152>
    4768:	c6 01       	movw	r24, r12
    476a:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <f_close>
    476e:	87 e0       	ldi	r24, 0x07	; 7
    4770:	90 e0       	ldi	r25, 0x00	; 0
    4772:	4d c0       	rjmp	.+154    	; 0x480e <loadMIDIFile+0x1e2>
    4774:	28 e1       	ldi	r18, 0x18	; 24
    4776:	30 e0       	ldi	r19, 0x00	; 0
    4778:	02 c0       	rjmp	.+4      	; 0x477e <loadMIDIFile+0x152>
    477a:	2d e1       	ldi	r18, 0x1D	; 29
    477c:	30 e0       	ldi	r19, 0x00	; 0
    477e:	77 27       	eor	r23, r23
    4780:	62 9f       	mul	r22, r18
    4782:	a0 01       	movw	r20, r0
    4784:	63 9f       	mul	r22, r19
    4786:	50 0d       	add	r21, r0
    4788:	72 9f       	mul	r23, r18
    478a:	50 0d       	add	r21, r0
    478c:	11 24       	eor	r1, r1
    478e:	f8 01       	movw	r30, r16
    4790:	56 ab       	std	Z+54, r21	; 0x36
    4792:	45 ab       	std	Z+53, r20	; 0x35
    4794:	c8 01       	movw	r24, r16
    4796:	0e 94 41 21 	call	0x4282	; 0x4282 <calcTickTime>
    479a:	f8 01       	movw	r30, r16
    479c:	84 a9       	ldd	r24, Z+52	; 0x34
    479e:	88 23       	and	r24, r24
    47a0:	a1 f1       	breq	.+104    	; 0x480a <loadMIDIFile+0x1de>
    47a2:	b1 2c       	mov	r11, r1
    47a4:	0f 2e       	mov	r0, r31
    47a6:	f9 e1       	ldi	r31, 0x19	; 25
    47a8:	af 2e       	mov	r10, r31
    47aa:	f0 2d       	mov	r31, r0
    47ac:	8b 2c       	mov	r8, r11
    47ae:	91 2c       	mov	r9, r1
    47b0:	a8 9c       	mul	r10, r8
    47b2:	c0 01       	movw	r24, r0
    47b4:	a9 9c       	mul	r10, r9
    47b6:	90 0d       	add	r25, r0
    47b8:	11 24       	eor	r1, r1
    47ba:	85 5b       	subi	r24, 0xB5	; 181
    47bc:	9f 4f       	sbci	r25, 0xFF	; 255
    47be:	a8 01       	movw	r20, r16
    47c0:	6b 2d       	mov	r22, r11
    47c2:	80 0f       	add	r24, r16
    47c4:	91 1f       	adc	r25, r17
    47c6:	0e 94 e0 27 	call	0x4fc0	; 0x4fc0 <loadTrack>
    47ca:	7c 01       	movw	r14, r24
    47cc:	01 96       	adiw	r24, 0x01	; 1
    47ce:	79 f0       	breq	.+30     	; 0x47ee <loadMIDIFile+0x1c2>
    47d0:	c6 01       	movw	r24, r12
    47d2:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <f_close>
    47d6:	8f ef       	ldi	r24, 0xFF	; 255
    47d8:	88 1a       	sub	r8, r24
    47da:	98 0a       	sbc	r9, r24
    47dc:	2a e0       	ldi	r18, 0x0A	; 10
    47de:	28 9d       	mul	r18, r8
    47e0:	c0 01       	movw	r24, r0
    47e2:	29 9d       	mul	r18, r9
    47e4:	90 0d       	add	r25, r0
    47e6:	11 24       	eor	r1, r1
    47e8:	8e 0d       	add	r24, r14
    47ea:	9f 1d       	adc	r25, r15
    47ec:	10 c0       	rjmp	.+32     	; 0x480e <loadMIDIFile+0x1e2>
    47ee:	b3 94       	inc	r11
    47f0:	f8 01       	movw	r30, r16
    47f2:	84 a9       	ldd	r24, Z+52	; 0x34
    47f4:	b8 16       	cp	r11, r24
    47f6:	d0 f2       	brcs	.-76     	; 0x47ac <loadMIDIFile+0x180>
    47f8:	8f ef       	ldi	r24, 0xFF	; 255
    47fa:	9f ef       	ldi	r25, 0xFF	; 255
    47fc:	08 c0       	rjmp	.+16     	; 0x480e <loadMIDIFile+0x1e2>
    47fe:	80 e0       	ldi	r24, 0x00	; 0
    4800:	90 e0       	ldi	r25, 0x00	; 0
    4802:	05 c0       	rjmp	.+10     	; 0x480e <loadMIDIFile+0x1e2>
    4804:	82 e0       	ldi	r24, 0x02	; 2
    4806:	90 e0       	ldi	r25, 0x00	; 0
    4808:	02 c0       	rjmp	.+4      	; 0x480e <loadMIDIFile+0x1e2>
    480a:	8f ef       	ldi	r24, 0xFF	; 255
    480c:	9f ef       	ldi	r25, 0xFF	; 255
    480e:	29 96       	adiw	r28, 0x09	; 9
    4810:	0f b6       	in	r0, 0x3f	; 63
    4812:	f8 94       	cli
    4814:	de bf       	out	0x3e, r29	; 62
    4816:	0f be       	out	0x3f, r0	; 63
    4818:	cd bf       	out	0x3d, r28	; 61
    481a:	df 91       	pop	r29
    481c:	cf 91       	pop	r28
    481e:	1f 91       	pop	r17
    4820:	0f 91       	pop	r16
    4822:	ff 90       	pop	r15
    4824:	ef 90       	pop	r14
    4826:	df 90       	pop	r13
    4828:	cf 90       	pop	r12
    482a:	bf 90       	pop	r11
    482c:	af 90       	pop	r10
    482e:	9f 90       	pop	r9
    4830:	8f 90       	pop	r8
    4832:	08 95       	ret

00004834 <setFilename>:

void setFilename(struct MD_MIDIFile *m,const char* aname) 
{ 
	if (aname != NULL) strcpy(m->_fileName, aname); 
    4834:	61 15       	cp	r22, r1
    4836:	71 05       	cpc	r23, r1
    4838:	19 f0       	breq	.+6      	; 0x4840 <setFilename+0xc>
    483a:	86 96       	adiw	r24, 0x26	; 38
    483c:	0e 94 82 37 	call	0x6f04	; 0x6f04 <strcpy>
    4840:	08 95       	ret

00004842 <readMultiByte>:
 * \brief Main file for helper functions implementation
 */

uint32_t readMultiByte(FIL *f, uint8_t nLen)
// read fixed length parameter from input
{
    4842:	af 92       	push	r10
    4844:	bf 92       	push	r11
    4846:	cf 92       	push	r12
    4848:	df 92       	push	r13
    484a:	ef 92       	push	r14
    484c:	ff 92       	push	r15
    484e:	0f 93       	push	r16
    4850:	1f 93       	push	r17
    4852:	cf 93       	push	r28
    4854:	df 93       	push	r29
    4856:	00 d0       	rcall	.+0      	; 0x4858 <readMultiByte+0x16>
    4858:	1f 92       	push	r1
    485a:	cd b7       	in	r28, 0x3d	; 61
    485c:	de b7       	in	r29, 0x3e	; 62
  uint32_t  value = 0L;
  uint8_t c;
  UINT d;
  for (uint8_t i=0; i<nLen; i++)
    485e:	66 23       	and	r22, r22
    4860:	f1 f0       	breq	.+60     	; 0x489e <readMultiByte+0x5c>
    4862:	a6 2e       	mov	r10, r22
    4864:	8c 01       	movw	r16, r24
    4866:	b1 2c       	mov	r11, r1
    4868:	c1 2c       	mov	r12, r1
    486a:	d1 2c       	mov	r13, r1
    486c:	76 01       	movw	r14, r12
  {
    f_read(f,&c,1,&d);
    486e:	9e 01       	movw	r18, r28
    4870:	2e 5f       	subi	r18, 0xFE	; 254
    4872:	3f 4f       	sbci	r19, 0xFF	; 255
    4874:	41 e0       	ldi	r20, 0x01	; 1
    4876:	50 e0       	ldi	r21, 0x00	; 0
    4878:	be 01       	movw	r22, r28
    487a:	6f 5f       	subi	r22, 0xFF	; 255
    487c:	7f 4f       	sbci	r23, 0xFF	; 255
    487e:	c8 01       	movw	r24, r16
    4880:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
	value = (value << 8) + c;
    4884:	fe 2c       	mov	r15, r14
    4886:	ed 2c       	mov	r14, r13
    4888:	dc 2c       	mov	r13, r12
    488a:	cc 24       	eor	r12, r12
    488c:	89 81       	ldd	r24, Y+1	; 0x01
    488e:	c8 0e       	add	r12, r24
    4890:	d1 1c       	adc	r13, r1
    4892:	e1 1c       	adc	r14, r1
    4894:	f1 1c       	adc	r15, r1
// read fixed length parameter from input
{
  uint32_t  value = 0L;
  uint8_t c;
  UINT d;
  for (uint8_t i=0; i<nLen; i++)
    4896:	b3 94       	inc	r11
    4898:	ab 10       	cpse	r10, r11
    489a:	e9 cf       	rjmp	.-46     	; 0x486e <readMultiByte+0x2c>
    489c:	03 c0       	rjmp	.+6      	; 0x48a4 <readMultiByte+0x62>
 */

uint32_t readMultiByte(FIL *f, uint8_t nLen)
// read fixed length parameter from input
{
  uint32_t  value = 0L;
    489e:	c1 2c       	mov	r12, r1
    48a0:	d1 2c       	mov	r13, r1
    48a2:	76 01       	movw	r14, r12
    f_read(f,&c,1,&d);
	value = (value << 8) + c;
  }
  
  return(value);
}
    48a4:	c7 01       	movw	r24, r14
    48a6:	b6 01       	movw	r22, r12
    48a8:	0f 90       	pop	r0
    48aa:	0f 90       	pop	r0
    48ac:	0f 90       	pop	r0
    48ae:	df 91       	pop	r29
    48b0:	cf 91       	pop	r28
    48b2:	1f 91       	pop	r17
    48b4:	0f 91       	pop	r16
    48b6:	ff 90       	pop	r15
    48b8:	ef 90       	pop	r14
    48ba:	df 90       	pop	r13
    48bc:	cf 90       	pop	r12
    48be:	bf 90       	pop	r11
    48c0:	af 90       	pop	r10
    48c2:	08 95       	ret

000048c4 <readVarLen>:

uint32_t readVarLen(FIL *f)
// read variable length parameter from input
{
    48c4:	cf 92       	push	r12
    48c6:	df 92       	push	r13
    48c8:	ef 92       	push	r14
    48ca:	ff 92       	push	r15
    48cc:	0f 93       	push	r16
    48ce:	1f 93       	push	r17
    48d0:	cf 93       	push	r28
    48d2:	df 93       	push	r29
    48d4:	00 d0       	rcall	.+0      	; 0x48d6 <readVarLen+0x12>
    48d6:	1f 92       	push	r1
    48d8:	cd b7       	in	r28, 0x3d	; 61
    48da:	de b7       	in	r29, 0x3e	; 62
    48dc:	8c 01       	movw	r16, r24
  uint32_t  value = 0;
    48de:	c1 2c       	mov	r12, r1
    48e0:	d1 2c       	mov	r13, r1
    48e2:	76 01       	movw	r14, r12
  uint8_t      c;
  UINT d;

  do
  {
    f_read(f,&c,1,&d);	
    48e4:	9e 01       	movw	r18, r28
    48e6:	2e 5f       	subi	r18, 0xFE	; 254
    48e8:	3f 4f       	sbci	r19, 0xFF	; 255
    48ea:	41 e0       	ldi	r20, 0x01	; 1
    48ec:	50 e0       	ldi	r21, 0x00	; 0
    48ee:	be 01       	movw	r22, r28
    48f0:	6f 5f       	subi	r22, 0xFF	; 255
    48f2:	7f 4f       	sbci	r23, 0xFF	; 255
    48f4:	c8 01       	movw	r24, r16
    48f6:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
    value = (value << 7) + (c & 0x7f);
    48fa:	cc 0c       	add	r12, r12
    48fc:	dd 1c       	adc	r13, r13
    48fe:	ee 1c       	adc	r14, r14
    4900:	ff 1c       	adc	r15, r15
    4902:	cc 0c       	add	r12, r12
    4904:	dd 1c       	adc	r13, r13
    4906:	ee 1c       	adc	r14, r14
    4908:	ff 1c       	adc	r15, r15
    490a:	cc 0c       	add	r12, r12
    490c:	dd 1c       	adc	r13, r13
    490e:	ee 1c       	adc	r14, r14
    4910:	ff 1c       	adc	r15, r15
    4912:	cc 0c       	add	r12, r12
    4914:	dd 1c       	adc	r13, r13
    4916:	ee 1c       	adc	r14, r14
    4918:	ff 1c       	adc	r15, r15
    491a:	cc 0c       	add	r12, r12
    491c:	dd 1c       	adc	r13, r13
    491e:	ee 1c       	adc	r14, r14
    4920:	ff 1c       	adc	r15, r15
    4922:	cc 0c       	add	r12, r12
    4924:	dd 1c       	adc	r13, r13
    4926:	ee 1c       	adc	r14, r14
    4928:	ff 1c       	adc	r15, r15
    492a:	cc 0c       	add	r12, r12
    492c:	dd 1c       	adc	r13, r13
    492e:	ee 1c       	adc	r14, r14
    4930:	ff 1c       	adc	r15, r15
    4932:	89 81       	ldd	r24, Y+1	; 0x01
    4934:	98 2f       	mov	r25, r24
    4936:	9f 77       	andi	r25, 0x7F	; 127
    4938:	c9 0e       	add	r12, r25
    493a:	d1 1c       	adc	r13, r1
    493c:	e1 1c       	adc	r14, r1
    493e:	f1 1c       	adc	r15, r1
  }  while (c & 0x80);
    4940:	88 23       	and	r24, r24
    4942:	84 f2       	brlt	.-96     	; 0x48e4 <readVarLen+0x20>
  
  return(value);
}
    4944:	c7 01       	movw	r24, r14
    4946:	b6 01       	movw	r22, r12
    4948:	0f 90       	pop	r0
    494a:	0f 90       	pop	r0
    494c:	0f 90       	pop	r0
    494e:	df 91       	pop	r29
    4950:	cf 91       	pop	r28
    4952:	1f 91       	pop	r17
    4954:	0f 91       	pop	r16
    4956:	ff 90       	pop	r15
    4958:	ef 90       	pop	r14
    495a:	df 90       	pop	r13
    495c:	cf 90       	pop	r12
    495e:	08 95       	ret

00004960 <getEndOfTrack>:

BOOL getEndOfTrack(struct MD_MFTrack *t)
// true if end of track has been reached
{
  return t->_endOfTrack;
}
    4960:	fc 01       	movw	r30, r24
    4962:	85 85       	ldd	r24, Z+13	; 0x0d
    4964:	08 95       	ret

00004966 <syncTime>:

void syncTime(struct MD_MFTrack *t)
{
  t->_elapsedTicks = 0;
    4966:	fc 01       	movw	r30, r24
    4968:	16 86       	std	Z+14, r1	; 0x0e
    496a:	17 86       	std	Z+15, r1	; 0x0f
    496c:	10 8a       	std	Z+16, r1	; 0x10
    496e:	11 8a       	std	Z+17, r1	; 0x11
    4970:	08 95       	ret

00004972 <restartTrack>:
}

void restartTrack(struct MD_MFTrack *t)
// Start playing the track from the beginning again
{
    4972:	fc 01       	movw	r30, r24
  t->_currOffset = 0;
    4974:	11 86       	std	Z+9, r1	; 0x09
    4976:	12 86       	std	Z+10, r1	; 0x0a
    4978:	13 86       	std	Z+11, r1	; 0x0b
    497a:	14 86       	std	Z+12, r1	; 0x0c
  t->_endOfTrack = FALSE;
    497c:	15 86       	std	Z+13, r1	; 0x0d
  t->_elapsedTicks = 0;
    497e:	16 86       	std	Z+14, r1	; 0x0e
    4980:	17 86       	std	Z+15, r1	; 0x0f
    4982:	10 8a       	std	Z+16, r1	; 0x10
    4984:	11 8a       	std	Z+17, r1	; 0x11
    4986:	08 95       	ret

00004988 <resetTrack>:
 * \file
 * \brief Main file for the MFTrack class implementation
 */

void resetTrack(struct MD_MFTrack *t)
{
    4988:	cf 93       	push	r28
    498a:	df 93       	push	r29
    498c:	ec 01       	movw	r28, r24
  t->_length = 0;        // length of track in bytes
    498e:	19 82       	std	Y+1, r1	; 0x01
    4990:	1a 82       	std	Y+2, r1	; 0x02
    4992:	1b 82       	std	Y+3, r1	; 0x03
    4994:	1c 82       	std	Y+4, r1	; 0x04
  t->_startOffset = 0;   // start of the track in bytes from start of file
    4996:	1d 82       	std	Y+5, r1	; 0x05
    4998:	1e 82       	std	Y+6, r1	; 0x06
    499a:	1f 82       	std	Y+7, r1	; 0x07
    499c:	18 86       	std	Y+8, r1	; 0x08
  restartTrack(t);
    499e:	0e 94 b9 24 	call	0x4972	; 0x4972 <restartTrack>
  t->_trackId = 255;
    49a2:	8f ef       	ldi	r24, 0xFF	; 255
    49a4:	88 83       	st	Y, r24
}
    49a6:	df 91       	pop	r29
    49a8:	cf 91       	pop	r28
    49aa:	08 95       	ret

000049ac <closeTrack>:


void closeTrack(struct MD_MFTrack *t)
{
  resetTrack(t);
    49ac:	0e 94 c4 24 	call	0x4988	; 0x4988 <resetTrack>
    49b0:	08 95       	ret

000049b2 <parseEvent>:
  return(TRUE);
}

void parseEvent(struct MD_MIDIFile *mf,struct MD_MFTrack *t)
// process the event from the physical file
{
    49b2:	4f 92       	push	r4
    49b4:	5f 92       	push	r5
    49b6:	6f 92       	push	r6
    49b8:	7f 92       	push	r7
    49ba:	8f 92       	push	r8
    49bc:	9f 92       	push	r9
    49be:	af 92       	push	r10
    49c0:	bf 92       	push	r11
    49c2:	cf 92       	push	r12
    49c4:	df 92       	push	r13
    49c6:	ef 92       	push	r14
    49c8:	ff 92       	push	r15
    49ca:	0f 93       	push	r16
    49cc:	1f 93       	push	r17
    49ce:	cf 93       	push	r28
    49d0:	df 93       	push	r29
    49d2:	cd b7       	in	r28, 0x3d	; 61
    49d4:	de b7       	in	r29, 0x3e	; 62
    49d6:	cf 55       	subi	r28, 0x5F	; 95
    49d8:	d1 09       	sbc	r29, r1
    49da:	0f b6       	in	r0, 0x3f	; 63
    49dc:	f8 94       	cli
    49de:	de bf       	out	0x3e, r29	; 62
    49e0:	0f be       	out	0x3f, r0	; 63
    49e2:	cd bf       	out	0x3d, r28	; 61
    49e4:	6c 01       	movw	r12, r24
    49e6:	8b 01       	movw	r16, r22
  uint8_t eType;
  uint32_t mLen;
  UINT bRead;
  // now we have to process this event
  f_read(&mf->_fd,&eType,1,&bRead);
    49e8:	7c 01       	movw	r14, r24
    49ea:	86 e0       	ldi	r24, 0x06	; 6
    49ec:	e8 0e       	add	r14, r24
    49ee:	f1 1c       	adc	r15, r1
    49f0:	9e 01       	movw	r18, r28
    49f2:	2e 5f       	subi	r18, 0xFE	; 254
    49f4:	3f 4f       	sbci	r19, 0xFF	; 255
    49f6:	41 e0       	ldi	r20, 0x01	; 1
    49f8:	50 e0       	ldi	r21, 0x00	; 0
    49fa:	be 01       	movw	r22, r28
    49fc:	6f 5f       	subi	r22, 0xFF	; 255
    49fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4a00:	c7 01       	movw	r24, r14
    4a02:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>

  switch (eType)
    4a06:	89 81       	ldd	r24, Y+1	; 0x01
    4a08:	80 3e       	cpi	r24, 0xE0	; 224
    4a0a:	30 f4       	brcc	.+12     	; 0x4a18 <parseEvent+0x66>
    4a0c:	80 3c       	cpi	r24, 0xC0	; 192
    4a0e:	e0 f5       	brcc	.+120    	; 0x4a88 <parseEvent+0xd6>
    4a10:	80 38       	cpi	r24, 0x80	; 128
    4a12:	08 f4       	brcc	.+2      	; 0x4a16 <parseEvent+0x64>
    4a14:	56 c0       	rjmp	.+172    	; 0x4ac2 <parseEvent+0x110>
    4a16:	0b c0       	rjmp	.+22     	; 0x4a2e <parseEvent+0x7c>
    4a18:	80 3f       	cpi	r24, 0xF0	; 240
    4a1a:	09 f4       	brne	.+2      	; 0x4a1e <parseEvent+0x6c>
    4a1c:	7d c0       	rjmp	.+250    	; 0x4b18 <parseEvent+0x166>
    4a1e:	38 f0       	brcs	.+14     	; 0x4a2e <parseEvent+0x7c>
    4a20:	87 3f       	cpi	r24, 0xF7	; 247
    4a22:	09 f4       	brne	.+2      	; 0x4a26 <parseEvent+0x74>
    4a24:	79 c0       	rjmp	.+242    	; 0x4b18 <parseEvent+0x166>
    4a26:	8f 3f       	cpi	r24, 0xFF	; 255
    4a28:	09 f4       	brne	.+2      	; 0x4a2c <parseEvent+0x7a>
    4a2a:	d0 c0       	rjmp	.+416    	; 0x4bcc <parseEvent+0x21a>
    4a2c:	30 c2       	rjmp	.+1120   	; 0x4e8e <parseEvent+0x4dc>
    // Midi events (status bytes 0x8n - 0xEn) The standard Channel MIDI messages, where 'n' is the MIDI channel (0 - 15).
    // This status byte will be followed by 1 or 2 data bytes, as is usual for the particular MIDI message. 
    // Any valid Channel MIDI message can be included in a MIDI file.
  case 0x80 ... 0xBf: // MIDI message with 2 parameters
  case 0xe0 ... 0xef:
    t->_mev.size = 3;
    4a2e:	93 e0       	ldi	r25, 0x03	; 3
    4a30:	d8 01       	movw	r26, r16
    4a32:	54 96       	adiw	r26, 0x14	; 20
    4a34:	9c 93       	st	X, r25
    4a36:	54 97       	sbiw	r26, 0x14	; 20
    t->_mev.data[0] = eType;
    t->_mev.channel = t->_mev.data[0] & 0xf;  // mask off the channel
    4a38:	98 2f       	mov	r25, r24
    4a3a:	9f 70       	andi	r25, 0x0F	; 15
    4a3c:	53 96       	adiw	r26, 0x13	; 19
    4a3e:	9c 93       	st	X, r25
    4a40:	53 97       	sbiw	r26, 0x13	; 19
    t->_mev.data[0] = t->_mev.data[0] & 0xf0; // just the command byte
    4a42:	80 7f       	andi	r24, 0xF0	; 240
    4a44:	55 96       	adiw	r26, 0x15	; 21
    4a46:	8c 93       	st	X, r24
    f_read(&mf->_fd,&t->_mev.data[1],1,&bRead);
    4a48:	9e 01       	movw	r18, r28
    4a4a:	2e 5f       	subi	r18, 0xFE	; 254
    4a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a4e:	41 e0       	ldi	r20, 0x01	; 1
    4a50:	50 e0       	ldi	r21, 0x00	; 0
    4a52:	b8 01       	movw	r22, r16
    4a54:	6a 5e       	subi	r22, 0xEA	; 234
    4a56:	7f 4f       	sbci	r23, 0xFF	; 255
    4a58:	c7 01       	movw	r24, r14
    4a5a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
    f_read(&mf->_fd,&t->_mev.data[2],1,&bRead);
    4a5e:	9e 01       	movw	r18, r28
    4a60:	2e 5f       	subi	r18, 0xFE	; 254
    4a62:	3f 4f       	sbci	r19, 0xFF	; 255
    4a64:	41 e0       	ldi	r20, 0x01	; 1
    4a66:	50 e0       	ldi	r21, 0x00	; 0
    4a68:	b8 01       	movw	r22, r16
    4a6a:	69 5e       	subi	r22, 0xE9	; 233
    4a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a6e:	c7 01       	movw	r24, r14
    4a70:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
    DUMP("[MID2] Ch: ", _mev.channel);
    DUMPX(" Data: ", _mev.data[0]);
    DUMPX(" ", _mev.data[1]);
    DUMPX(" ", _mev.data[2]);	
#if !DUMP_DATA
    if (mf->_midiHandler != NULL)
    4a74:	d6 01       	movw	r26, r12
    4a76:	ed 91       	ld	r30, X+
    4a78:	fc 91       	ld	r31, X
    4a7a:	30 97       	sbiw	r30, 0x00	; 0
    4a7c:	09 f4       	brne	.+2      	; 0x4a80 <parseEvent+0xce>
    4a7e:	0a c2       	rjmp	.+1044   	; 0x4e94 <parseEvent+0x4e2>
      (mf->_midiHandler)(&t->_mev);
    4a80:	c8 01       	movw	r24, r16
    4a82:	42 96       	adiw	r24, 0x12	; 18
    4a84:	09 95       	icall
    4a86:	06 c2       	rjmp	.+1036   	; 0x4e94 <parseEvent+0x4e2>
#endif // !DUMP_DATA
  break;

  case 0xc0 ... 0xdf: // MIDI message with 1 parameter
    t->_mev.size = 2;
    4a88:	92 e0       	ldi	r25, 0x02	; 2
    4a8a:	f8 01       	movw	r30, r16
    4a8c:	94 8b       	std	Z+20, r25	; 0x14
    t->_mev.data[0] = eType;
    t->_mev.channel = t->_mev.data[0] & 0xf;  // mask off the channel
    4a8e:	98 2f       	mov	r25, r24
    4a90:	9f 70       	andi	r25, 0x0F	; 15
    4a92:	93 8b       	std	Z+19, r25	; 0x13
    t->_mev.data[0] = t->_mev.data[0] & 0xf0; // just the command byte
    4a94:	80 7f       	andi	r24, 0xF0	; 240
    4a96:	85 8b       	std	Z+21, r24	; 0x15
    f_read(&mf->_fd,&t->_mev.data[1],1,&bRead);
    4a98:	9e 01       	movw	r18, r28
    4a9a:	2e 5f       	subi	r18, 0xFE	; 254
    4a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a9e:	41 e0       	ldi	r20, 0x01	; 1
    4aa0:	50 e0       	ldi	r21, 0x00	; 0
    4aa2:	b8 01       	movw	r22, r16
    4aa4:	6a 5e       	subi	r22, 0xEA	; 234
    4aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    4aa8:	c7 01       	movw	r24, r14
    4aaa:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
    DUMP("[MID1] Ch: ", _mev.channel);
    DUMPX(" Data: ", _mev.data[0]);
    DUMPX(" ", _mev.data[1]);

#if !DUMP_DATA
    if (mf->_midiHandler != NULL)
    4aae:	d6 01       	movw	r26, r12
    4ab0:	ed 91       	ld	r30, X+
    4ab2:	fc 91       	ld	r31, X
    4ab4:	30 97       	sbiw	r30, 0x00	; 0
    4ab6:	09 f4       	brne	.+2      	; 0x4aba <parseEvent+0x108>
    4ab8:	ed c1       	rjmp	.+986    	; 0x4e94 <parseEvent+0x4e2>
      (mf->_midiHandler)(&t->_mev);
    4aba:	c8 01       	movw	r24, r16
    4abc:	42 96       	adiw	r24, 0x12	; 18
    4abe:	09 95       	icall
    4ac0:	e9 c1       	rjmp	.+978    	; 0x4e94 <parseEvent+0x4e2>
    // ie SysEx and Meta events clear running status. This means that the _mev structure 
    // should contain the info from the previous message in the structure's channel member 
    // and data[0] (for the MIDI command). 
    // Hence start saving the data at byte data[1] with the byte we have just read (eType) 
    // and use the size member to determine how large the message is (ie, same as before).
    t->_mev.data[1] = eType;
    4ac2:	f8 01       	movw	r30, r16
    4ac4:	86 8b       	std	Z+22, r24	; 0x16
    for (uint8_t i = 2; i < t->_mev.size; i++)
    4ac6:	84 89       	ldd	r24, Z+20	; 0x14
    4ac8:	83 30       	cpi	r24, 0x03	; 3
    4aca:	b0 f0       	brcs	.+44     	; 0x4af8 <parseEvent+0x146>
    4acc:	68 94       	set
    4ace:	bb 24       	eor	r11, r11
    4ad0:	b1 f8       	bld	r11, 1
    {
      f_read(&mf->_fd,&t->_mev.data[1],1,&bRead);  // next byte
    4ad2:	48 01       	movw	r8, r16
    4ad4:	f6 e1       	ldi	r31, 0x16	; 22
    4ad6:	8f 0e       	add	r8, r31
    4ad8:	91 1c       	adc	r9, r1
    4ada:	9e 01       	movw	r18, r28
    4adc:	2e 5f       	subi	r18, 0xFE	; 254
    4ade:	3f 4f       	sbci	r19, 0xFF	; 255
    4ae0:	41 e0       	ldi	r20, 0x01	; 1
    4ae2:	50 e0       	ldi	r21, 0x00	; 0
    4ae4:	b4 01       	movw	r22, r8
    4ae6:	c7 01       	movw	r24, r14
    4ae8:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
    // should contain the info from the previous message in the structure's channel member 
    // and data[0] (for the MIDI command). 
    // Hence start saving the data at byte data[1] with the byte we have just read (eType) 
    // and use the size member to determine how large the message is (ie, same as before).
    t->_mev.data[1] = eType;
    for (uint8_t i = 2; i < t->_mev.size; i++)
    4aec:	b3 94       	inc	r11
    4aee:	d8 01       	movw	r26, r16
    4af0:	54 96       	adiw	r26, 0x14	; 20
    4af2:	8c 91       	ld	r24, X
    4af4:	b8 16       	cp	r11, r24
    4af6:	88 f3       	brcs	.-30     	; 0x4ada <parseEvent+0x128>
      f_read(&mf->_fd,&t->_mev.data[1],1,&bRead);  // next byte
    } 

    DUMP("[MID+] Ch: ", _mev.channel);
    DUMPS(" Data:");
    for (uint8_t i = 0; i<t->_mev.size; i++)
    4af8:	88 23       	and	r24, r24
    4afa:	21 f0       	breq	.+8      	; 0x4b04 <parseEvent+0x152>
    4afc:	90 e0       	ldi	r25, 0x00	; 0
    4afe:	9f 5f       	subi	r25, 0xFF	; 255
    4b00:	98 13       	cpse	r25, r24
    4b02:	fd cf       	rjmp	.-6      	; 0x4afe <parseEvent+0x14c>
    {
      DUMPX(" ", t->_mev.data[i]);
    }

#if !DUMP_DATA
    if (mf->_midiHandler != NULL)
    4b04:	d6 01       	movw	r26, r12
    4b06:	ed 91       	ld	r30, X+
    4b08:	fc 91       	ld	r31, X
    4b0a:	30 97       	sbiw	r30, 0x00	; 0
    4b0c:	09 f4       	brne	.+2      	; 0x4b10 <parseEvent+0x15e>
    4b0e:	c2 c1       	rjmp	.+900    	; 0x4e94 <parseEvent+0x4e2>
      (mf->_midiHandler)(&t->_mev);
    4b10:	c8 01       	movw	r24, r16
    4b12:	42 96       	adiw	r24, 0x12	; 18
    4b14:	09 95       	icall
    4b16:	be c1       	rjmp	.+892    	; 0x4e94 <parseEvent+0x4e2>
  {
    sysex_event sev;
    uint16_t index = 0;

    // collect all the bytes until the 0xf7 - boundaries are included in the message
    sev.track = t->_trackId;
    4b18:	f8 01       	movw	r30, r16
    4b1a:	80 81       	ld	r24, Z
    4b1c:	8c 83       	std	Y+4, r24	; 0x04
    mLen = readVarLen(&mf->_fd);
    4b1e:	c7 01       	movw	r24, r14
    4b20:	0e 94 62 24 	call	0x48c4	; 0x48c4 <readVarLen>
    sev.size = mLen;
    4b24:	7e 83       	std	Y+6, r23	; 0x06
    4b26:	6d 83       	std	Y+5, r22	; 0x05
    if (eType==0xF0)       // add space for 0xF0
    4b28:	29 81       	ldd	r18, Y+1	; 0x01
    4b2a:	20 3f       	cpi	r18, 0xF0	; 240
    4b2c:	41 f4       	brne	.+16     	; 0x4b3e <parseEvent+0x18c>
    {
      sev.data[index++] = eType;
    4b2e:	2f 83       	std	Y+7, r18	; 0x07
      sev.size++;
    4b30:	6f 5f       	subi	r22, 0xFF	; 255
    4b32:	7f 4f       	sbci	r23, 0xFF	; 255
    4b34:	7e 83       	std	Y+6, r23	; 0x06
    4b36:	6d 83       	std	Y+5, r22	; 0x05
    sev.track = t->_trackId;
    mLen = readVarLen(&mf->_fd);
    sev.size = mLen;
    if (eType==0xF0)       // add space for 0xF0
    {
      sev.data[index++] = eType;
    4b38:	01 e0       	ldi	r16, 0x01	; 1
    4b3a:	10 e0       	ldi	r17, 0x00	; 0
    4b3c:	02 c0       	rjmp	.+4      	; 0x4b42 <parseEvent+0x190>
// ---------------------------- SYSEX
  case 0xf0:  // sysex_event = 0xF0 + <len:1> + <data_bytes> + 0xF7 
  case 0xf7:  // sysex_event = 0xF7 + <len:1> + <data_bytes> + 0xF7 
  {
    sysex_event sev;
    uint16_t index = 0;
    4b3e:	00 e0       	ldi	r16, 0x00	; 0
    4b40:	10 e0       	ldi	r17, 0x00	; 0
    if (eType==0xF0)       // add space for 0xF0
    {
      sev.data[index++] = eType;
      sev.size++;
    }
    uint16_t minLen = min(sev.size, ARRAY_SIZE(sev.data));
    4b42:	ad 80       	ldd	r10, Y+5	; 0x05
    4b44:	be 80       	ldd	r11, Y+6	; 0x06
    4b46:	f3 e3       	ldi	r31, 0x33	; 51
    4b48:	af 16       	cp	r10, r31
    4b4a:	b1 04       	cpc	r11, r1
    4b4c:	28 f0       	brcs	.+10     	; 0x4b58 <parseEvent+0x1a6>
    4b4e:	0f 2e       	mov	r0, r31
    4b50:	f2 e3       	ldi	r31, 0x32	; 50
    4b52:	af 2e       	mov	r10, r31
    4b54:	b1 2c       	mov	r11, r1
    4b56:	f0 2d       	mov	r31, r0
    // The length parameter includes the 0xF7 but not the start boundary.
    // However, it may be bigger than our buffer will allow us to store.
    for (uint16_t i=index; i<minLen; ++i)
    4b58:	0a 15       	cp	r16, r10
    4b5a:	1b 05       	cpc	r17, r11
    4b5c:	b0 f4       	brcc	.+44     	; 0x4b8a <parseEvent+0x1d8>
      f_read(&mf->_fd,&sev.data[i],1,&bRead);
    4b5e:	b8 01       	movw	r22, r16
    4b60:	6d 5f       	subi	r22, 0xFD	; 253
    4b62:	7f 4f       	sbci	r23, 0xFF	; 255
    4b64:	84 e0       	ldi	r24, 0x04	; 4
    4b66:	90 e0       	ldi	r25, 0x00	; 0
    4b68:	8c 0f       	add	r24, r28
    4b6a:	9d 1f       	adc	r25, r29
    4b6c:	68 0f       	add	r22, r24
    4b6e:	79 1f       	adc	r23, r25
    4b70:	9e 01       	movw	r18, r28
    4b72:	2e 5f       	subi	r18, 0xFE	; 254
    4b74:	3f 4f       	sbci	r19, 0xFF	; 255
    4b76:	41 e0       	ldi	r20, 0x01	; 1
    4b78:	50 e0       	ldi	r21, 0x00	; 0
    4b7a:	c7 01       	movw	r24, r14
    4b7c:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
      sev.size++;
    }
    uint16_t minLen = min(sev.size, ARRAY_SIZE(sev.data));
    // The length parameter includes the 0xF7 but not the start boundary.
    // However, it may be bigger than our buffer will allow us to store.
    for (uint16_t i=index; i<minLen; ++i)
    4b80:	0f 5f       	subi	r16, 0xFF	; 255
    4b82:	1f 4f       	sbci	r17, 0xFF	; 255
    4b84:	0a 15       	cp	r16, r10
    4b86:	1b 05       	cpc	r17, r11
    4b88:	50 f3       	brcs	.-44     	; 0x4b5e <parseEvent+0x1ac>
      f_read(&mf->_fd,&sev.data[i],1,&bRead);
    if (sev.size>minLen)
    4b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    4b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    4b8e:	a8 16       	cp	r10, r24
    4b90:	b9 06       	cpc	r11, r25
    4b92:	80 f4       	brcc	.+32     	; 0x4bb4 <parseEvent+0x202>
      f_lseek(&mf->_fd,f_tell(&mf->_fd) + (sev.size-minLen));
    4b94:	8a 19       	sub	r24, r10
    4b96:	9b 09       	sbc	r25, r11
    4b98:	d6 01       	movw	r26, r12
    4b9a:	1c 96       	adiw	r26, 0x0c	; 12
    4b9c:	4d 91       	ld	r20, X+
    4b9e:	5d 91       	ld	r21, X+
    4ba0:	6d 91       	ld	r22, X+
    4ba2:	7c 91       	ld	r23, X
    4ba4:	1f 97       	sbiw	r26, 0x0f	; 15
    4ba6:	48 0f       	add	r20, r24
    4ba8:	59 1f       	adc	r21, r25
    4baa:	61 1d       	adc	r22, r1
    4bac:	71 1d       	adc	r23, r1
    4bae:	c7 01       	movw	r24, r14
    4bb0:	0e 94 3e 14 	call	0x287c	; 0x287c <f_lseek>
      DUMPX(" ", sev.data[i]);
    }
    if (sev.size>minLen)
      DUMPS("...");
#else
    if (mf->_sysexHandler != NULL)
    4bb4:	d6 01       	movw	r26, r12
    4bb6:	12 96       	adiw	r26, 0x02	; 2
    4bb8:	ed 91       	ld	r30, X+
    4bba:	fc 91       	ld	r31, X
    4bbc:	13 97       	sbiw	r26, 0x03	; 3
    4bbe:	30 97       	sbiw	r30, 0x00	; 0
    4bc0:	09 f4       	brne	.+2      	; 0x4bc4 <parseEvent+0x212>
    4bc2:	68 c1       	rjmp	.+720    	; 0x4e94 <parseEvent+0x4e2>
      (mf->_sysexHandler)(&sev);
    4bc4:	ce 01       	movw	r24, r28
    4bc6:	04 96       	adiw	r24, 0x04	; 4
    4bc8:	09 95       	icall
#endif
  }
  break;
    4bca:	64 c1       	rjmp	.+712    	; 0x4e94 <parseEvent+0x4e2>
  case 0xff:  // meta_event = 0xFF + <meta_type:1> + <length:v> + <event_data_bytes>
  {
    meta_event mev;

    //eType = 
	f_read(&mf->_fd,&eType,1,&bRead);
    4bcc:	9e 01       	movw	r18, r28
    4bce:	2e 5f       	subi	r18, 0xFE	; 254
    4bd0:	3f 4f       	sbci	r19, 0xFF	; 255
    4bd2:	41 e0       	ldi	r20, 0x01	; 1
    4bd4:	50 e0       	ldi	r21, 0x00	; 0
    4bd6:	be 01       	movw	r22, r28
    4bd8:	6f 5f       	subi	r22, 0xFF	; 255
    4bda:	7f 4f       	sbci	r23, 0xFF	; 255
    4bdc:	c7 01       	movw	r24, r14
    4bde:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
    mLen =  readVarLen(&mf->_fd);
    4be2:	c7 01       	movw	r24, r14
    4be4:	0e 94 62 24 	call	0x48c4	; 0x48c4 <readVarLen>
    4be8:	2b 01       	movw	r4, r22
    4bea:	3c 01       	movw	r6, r24

    mev.track = t->_trackId;
    4bec:	f8 01       	movw	r30, r16
    4bee:	80 81       	ld	r24, Z
    4bf0:	8c 83       	std	Y+4, r24	; 0x04
    mev.size = mLen;
    4bf2:	5e 82       	std	Y+6, r5	; 0x06
    4bf4:	4d 82       	std	Y+5, r4	; 0x05
    mev.type = eType;
    4bf6:	89 81       	ldd	r24, Y+1	; 0x01
    4bf8:	8f 83       	std	Y+7, r24	; 0x07

    DUMPX("[META] Type: 0x", eType);
    DUMP("\tLen: ", mLen);
    DUMPS("\t");

    switch (eType)
    4bfa:	8f 32       	cpi	r24, 0x2F	; 47
    4bfc:	99 f0       	breq	.+38     	; 0x4c24 <parseEvent+0x272>
    4bfe:	48 f4       	brcc	.+18     	; 0x4c12 <parseEvent+0x260>
    4c00:	80 32       	cpi	r24, 0x20	; 32
    4c02:	09 f4       	brne	.+2      	; 0x4c06 <parseEvent+0x254>
    4c04:	e8 c0       	rjmp	.+464    	; 0x4dd6 <parseEvent+0x424>
    4c06:	81 32       	cpi	r24, 0x21	; 33
    4c08:	09 f4       	brne	.+2      	; 0x4c0c <parseEvent+0x25a>
    4c0a:	eb c0       	rjmp	.+470    	; 0x4de2 <parseEvent+0x430>
    4c0c:	81 11       	cpse	r24, r1
    4c0e:	ef c0       	rjmp	.+478    	; 0x4dee <parseEvent+0x43c>
    4c10:	db c0       	rjmp	.+438    	; 0x4dc8 <parseEvent+0x416>
    4c12:	88 35       	cpi	r24, 0x58	; 88
    4c14:	e1 f0       	breq	.+56     	; 0x4c4e <parseEvent+0x29c>
    4c16:	89 35       	cpi	r24, 0x59	; 89
    4c18:	09 f4       	brne	.+2      	; 0x4c1c <parseEvent+0x26a>
    4c1a:	56 c0       	rjmp	.+172    	; 0x4cc8 <parseEvent+0x316>
    4c1c:	81 35       	cpi	r24, 0x51	; 81
    4c1e:	09 f0       	breq	.+2      	; 0x4c22 <parseEvent+0x270>
    4c20:	e6 c0       	rjmp	.+460    	; 0x4dee <parseEvent+0x43c>
    4c22:	03 c0       	rjmp	.+6      	; 0x4c2a <parseEvent+0x278>
    {
      case 0x2f:  // End of track
      {
        t->_endOfTrack = TRUE;
    4c24:	81 e0       	ldi	r24, 0x01	; 1
    4c26:	85 87       	std	Z+13, r24	; 0x0d
        DUMPS("END OF TRACK");
      }
      break;
    4c28:	27 c1       	rjmp	.+590    	; 0x4e78 <parseEvent+0x4c6>

      case 0x51:  // set Tempo - really the microseconds per tick
      {
        uint32_t value = readMultiByte(&mf->_fd, MB_TRYTE);
    4c2a:	63 e0       	ldi	r22, 0x03	; 3
    4c2c:	c7 01       	movw	r24, r14
    4c2e:	0e 94 21 24 	call	0x4842	; 0x4842 <readMultiByte>
    4c32:	16 2f       	mov	r17, r22
    4c34:	07 2f       	mov	r16, r23
    4c36:	f8 2e       	mov	r15, r24
        
        setMicrosecondPerQuarterNote(mf,value);
    4c38:	46 2f       	mov	r20, r22
    4c3a:	57 2f       	mov	r21, r23
    4c3c:	68 2f       	mov	r22, r24
    4c3e:	79 2f       	mov	r23, r25
    4c40:	c6 01       	movw	r24, r12
    4c42:	0e 94 9d 21 	call	0x433a	; 0x433a <setMicrosecondPerQuarterNote>
        
        mev.data[0] = (value >> 16) & 0xFF;
    4c46:	f8 86       	std	Y+8, r15	; 0x08
        mev.data[1] = (value >> 8) & 0xFF;
    4c48:	09 87       	std	Y+9, r16	; 0x09
        mev.data[2] = value & 0xFF;
    4c4a:	1a 87       	std	Y+10, r17	; 0x0a
        
        DUMP("SET TEMPO to ", getTickTime(mf));
        DUMP(" us/tick or ", getTempo(mf));
        DUMPS(" beats/min");
      }
      break;
    4c4c:	15 c1       	rjmp	.+554    	; 0x4e78 <parseEvent+0x4c6>

      case 0x58:  // time signature
      {
        uint8_t n,d;
		f_read(&mf->_fd,&n,1,&bRead);
    4c4e:	9e 01       	movw	r18, r28
    4c50:	2e 5f       	subi	r18, 0xFE	; 254
    4c52:	3f 4f       	sbci	r19, 0xFF	; 255
    4c54:	41 e0       	ldi	r20, 0x01	; 1
    4c56:	50 e0       	ldi	r21, 0x00	; 0
    4c58:	be 01       	movw	r22, r28
    4c5a:	62 5a       	subi	r22, 0xA2	; 162
    4c5c:	7f 4f       	sbci	r23, 0xFF	; 255
    4c5e:	c7 01       	movw	r24, r14
    4c60:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
        f_read(&mf->_fd,&d,1,&bRead);
    4c64:	9e 01       	movw	r18, r28
    4c66:	2e 5f       	subi	r18, 0xFE	; 254
    4c68:	3f 4f       	sbci	r19, 0xFF	; 255
    4c6a:	41 e0       	ldi	r20, 0x01	; 1
    4c6c:	50 e0       	ldi	r21, 0x00	; 0
    4c6e:	be 01       	movw	r22, r28
    4c70:	66 5c       	subi	r22, 0xC6	; 198
    4c72:	7f 4f       	sbci	r23, 0xFF	; 255
    4c74:	c7 01       	movw	r24, r14
    4c76:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
        
        setTimeSignature(mf,n, 1 << d);  // denominator is 2^n
    4c7a:	41 e0       	ldi	r20, 0x01	; 1
    4c7c:	50 e0       	ldi	r21, 0x00	; 0
    4c7e:	0a ac       	ldd	r0, Y+58	; 0x3a
    4c80:	02 c0       	rjmp	.+4      	; 0x4c86 <parseEvent+0x2d4>
    4c82:	44 0f       	add	r20, r20
    4c84:	55 1f       	adc	r21, r21
    4c86:	0a 94       	dec	r0
    4c88:	e2 f7       	brpl	.-8      	; 0x4c82 <parseEvent+0x2d0>
    4c8a:	6f 96       	adiw	r28, 0x1f	; 31
    4c8c:	6f ad       	ldd	r22, Y+63	; 0x3f
    4c8e:	6f 97       	sbiw	r28, 0x1f	; 31
    4c90:	c6 01       	movw	r24, r12
    4c92:	0e 94 94 21 	call	0x4328	; 0x4328 <setTimeSignature>
        f_lseek(&mf->_fd,f_tell(&mf->_fd) + (mLen - 2));
    4c96:	f6 01       	movw	r30, r12
    4c98:	44 85       	ldd	r20, Z+12	; 0x0c
    4c9a:	55 85       	ldd	r21, Z+13	; 0x0d
    4c9c:	66 85       	ldd	r22, Z+14	; 0x0e
    4c9e:	77 85       	ldd	r23, Z+15	; 0x0f
    4ca0:	42 50       	subi	r20, 0x02	; 2
    4ca2:	51 09       	sbc	r21, r1
    4ca4:	61 09       	sbc	r22, r1
    4ca6:	71 09       	sbc	r23, r1
    4ca8:	44 0d       	add	r20, r4
    4caa:	55 1d       	adc	r21, r5
    4cac:	66 1d       	adc	r22, r6
    4cae:	77 1d       	adc	r23, r7
    4cb0:	c7 01       	movw	r24, r14
    4cb2:	0e 94 3e 14 	call	0x287c	; 0x287c <f_lseek>

        mev.data[0] = n;
    4cb6:	6f 96       	adiw	r28, 0x1f	; 31
    4cb8:	8f ad       	ldd	r24, Y+63	; 0x3f
    4cba:	6f 97       	sbiw	r28, 0x1f	; 31
    4cbc:	88 87       	std	Y+8, r24	; 0x08
        mev.data[1] = d;
    4cbe:	8a ad       	ldd	r24, Y+58	; 0x3a
    4cc0:	89 87       	std	Y+9, r24	; 0x09
        mev.data[2] = 0;
    4cc2:	1a 86       	std	Y+10, r1	; 0x0a
        mev.data[3] = 0;
    4cc4:	1b 86       	std	Y+11, r1	; 0x0b

        DUMP("SET TIME SIGNATURE to ", getTimeSignature(mf) >> 8);
        DUMP("/", getTimeSignature(mf) & 0xf);
      }
      break;
    4cc6:	d8 c0       	rjmp	.+432    	; 0x4e78 <parseEvent+0x4c6>

      case 0x59:  // Key Signature
      {
        int8_t sf,mi;
		DUMPS("KEY SIGNATURE");
        f_read(&mf->_fd,&sf,1,&bRead);
    4cc8:	9e 01       	movw	r18, r28
    4cca:	2e 5f       	subi	r18, 0xFE	; 254
    4ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    4cce:	41 e0       	ldi	r20, 0x01	; 1
    4cd0:	50 e0       	ldi	r21, 0x00	; 0
    4cd2:	be 01       	movw	r22, r28
    4cd4:	61 5a       	subi	r22, 0xA1	; 161
    4cd6:	7f 4f       	sbci	r23, 0xFF	; 255
    4cd8:	c7 01       	movw	r24, r14
    4cda:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
        f_read(&mf->_fd,&mi,1,&bRead);
    4cde:	9e 01       	movw	r18, r28
    4ce0:	2e 5f       	subi	r18, 0xFE	; 254
    4ce2:	3f 4f       	sbci	r19, 0xFF	; 255
    4ce4:	41 e0       	ldi	r20, 0x01	; 1
    4ce6:	50 e0       	ldi	r21, 0x00	; 0
    4ce8:	be 01       	movw	r22, r28
    4cea:	62 5a       	subi	r22, 0xA2	; 162
    4cec:	7f 4f       	sbci	r23, 0xFF	; 255
    4cee:	c7 01       	movw	r24, r14
    4cf0:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
        const char* aaa[] = {"Cb", "Gb", "Db", "Ab", "Eb", "Bb", "F", "C", "G", "D", "A", "E", "B", "F#", "C#", "G#", "D#", "A#"};
    4cf4:	84 e2       	ldi	r24, 0x24	; 36
    4cf6:	e0 e8       	ldi	r30, 0x80	; 128
    4cf8:	f0 e0       	ldi	r31, 0x00	; 0
    4cfa:	de 01       	movw	r26, r28
    4cfc:	da 96       	adiw	r26, 0x3a	; 58
    4cfe:	01 90       	ld	r0, Z+
    4d00:	0d 92       	st	X+, r0
    4d02:	8a 95       	dec	r24
    4d04:	e1 f7       	brne	.-8      	; 0x4cfe <parseEvent+0x34c>

        if (sf >= -7 && sf <= 7) 
    4d06:	a0 96       	adiw	r28, 0x20	; 32
    4d08:	ef ad       	ldd	r30, Y+63	; 0x3f
    4d0a:	a0 97       	sbiw	r28, 0x20	; 32
    4d0c:	87 e0       	ldi	r24, 0x07	; 7
    4d0e:	8e 0f       	add	r24, r30
    4d10:	8f 30       	cpi	r24, 0x0F	; 15
    4d12:	08 f0       	brcs	.+2      	; 0x4d16 <parseEvent+0x364>
    4d14:	45 c0       	rjmp	.+138    	; 0x4da0 <parseEvent+0x3ee>
        {
          switch(mi)
    4d16:	6f 96       	adiw	r28, 0x1f	; 31
    4d18:	8f ad       	ldd	r24, Y+63	; 0x3f
    4d1a:	6f 97       	sbiw	r28, 0x1f	; 31
    4d1c:	88 23       	and	r24, r24
    4d1e:	19 f0       	breq	.+6      	; 0x4d26 <parseEvent+0x374>
    4d20:	81 30       	cpi	r24, 0x01	; 1
    4d22:	d9 f0       	breq	.+54     	; 0x4d5a <parseEvent+0x3a8>
    4d24:	34 c0       	rjmp	.+104    	; 0x4d8e <parseEvent+0x3dc>
          {
            case 0:
              strcpy(mev.chars, aaa[sf+7]);
    4d26:	0e 2e       	mov	r0, r30
    4d28:	00 0c       	add	r0, r0
    4d2a:	ff 0b       	sbc	r31, r31
    4d2c:	37 96       	adiw	r30, 0x07	; 7
    4d2e:	ee 0f       	add	r30, r30
    4d30:	ff 1f       	adc	r31, r31
    4d32:	ec 0f       	add	r30, r28
    4d34:	fd 1f       	adc	r31, r29
    4d36:	62 ad       	ldd	r22, Z+58	; 0x3a
    4d38:	73 ad       	ldd	r23, Z+59	; 0x3b
    4d3a:	8e 01       	movw	r16, r28
    4d3c:	08 5f       	subi	r16, 0xF8	; 248
    4d3e:	1f 4f       	sbci	r17, 0xFF	; 255
    4d40:	c8 01       	movw	r24, r16
    4d42:	0e 94 82 37 	call	0x6f04	; 0x6f04 <strcpy>
              strcat(mev.chars, "M");
    4d46:	f8 01       	movw	r30, r16
    4d48:	01 90       	ld	r0, Z+
    4d4a:	00 20       	and	r0, r0
    4d4c:	e9 f7       	brne	.-6      	; 0x4d48 <parseEvent+0x396>
    4d4e:	31 97       	sbiw	r30, 0x01	; 1
    4d50:	8d e4       	ldi	r24, 0x4D	; 77
    4d52:	90 e0       	ldi	r25, 0x00	; 0
    4d54:	91 83       	std	Z+1, r25	; 0x01
    4d56:	80 83       	st	Z, r24
              break;
    4d58:	2b c0       	rjmp	.+86     	; 0x4db0 <parseEvent+0x3fe>
            case 1:
              strcpy(mev.chars, aaa[sf+10]);
    4d5a:	0e 2e       	mov	r0, r30
    4d5c:	00 0c       	add	r0, r0
    4d5e:	ff 0b       	sbc	r31, r31
    4d60:	3a 96       	adiw	r30, 0x0a	; 10
    4d62:	ee 0f       	add	r30, r30
    4d64:	ff 1f       	adc	r31, r31
    4d66:	ec 0f       	add	r30, r28
    4d68:	fd 1f       	adc	r31, r29
    4d6a:	62 ad       	ldd	r22, Z+58	; 0x3a
    4d6c:	73 ad       	ldd	r23, Z+59	; 0x3b
    4d6e:	8e 01       	movw	r16, r28
    4d70:	08 5f       	subi	r16, 0xF8	; 248
    4d72:	1f 4f       	sbci	r17, 0xFF	; 255
    4d74:	c8 01       	movw	r24, r16
    4d76:	0e 94 82 37 	call	0x6f04	; 0x6f04 <strcpy>
              strcat(mev.chars, "m");
    4d7a:	f8 01       	movw	r30, r16
    4d7c:	01 90       	ld	r0, Z+
    4d7e:	00 20       	and	r0, r0
    4d80:	e9 f7       	brne	.-6      	; 0x4d7c <parseEvent+0x3ca>
    4d82:	31 97       	sbiw	r30, 0x01	; 1
    4d84:	8d e6       	ldi	r24, 0x6D	; 109
    4d86:	90 e0       	ldi	r25, 0x00	; 0
    4d88:	91 83       	std	Z+1, r25	; 0x01
    4d8a:	80 83       	st	Z, r24
              break;
    4d8c:	11 c0       	rjmp	.+34     	; 0x4db0 <parseEvent+0x3fe>
            default:
              strcpy(mev.chars, "Err"); // error mi
    4d8e:	85 e4       	ldi	r24, 0x45	; 69
    4d90:	92 e7       	ldi	r25, 0x72	; 114
    4d92:	99 87       	std	Y+9, r25	; 0x09
    4d94:	88 87       	std	Y+8, r24	; 0x08
    4d96:	82 e7       	ldi	r24, 0x72	; 114
    4d98:	90 e0       	ldi	r25, 0x00	; 0
    4d9a:	9b 87       	std	Y+11, r25	; 0x0b
    4d9c:	8a 87       	std	Y+10, r24	; 0x0a
    4d9e:	08 c0       	rjmp	.+16     	; 0x4db0 <parseEvent+0x3fe>
          }
        } else
          strcpy(mev.chars, "Err"); // error sf
    4da0:	85 e4       	ldi	r24, 0x45	; 69
    4da2:	92 e7       	ldi	r25, 0x72	; 114
    4da4:	99 87       	std	Y+9, r25	; 0x09
    4da6:	88 87       	std	Y+8, r24	; 0x08
    4da8:	82 e7       	ldi	r24, 0x72	; 114
    4daa:	90 e0       	ldi	r25, 0x00	; 0
    4dac:	9b 87       	std	Y+11, r25	; 0x0b
    4dae:	8a 87       	std	Y+10, r24	; 0x0a

        mev.size = strlen(mev.chars); // change META length
    4db0:	de 01       	movw	r26, r28
    4db2:	18 96       	adiw	r26, 0x08	; 8
    4db4:	fd 01       	movw	r30, r26
    4db6:	01 90       	ld	r0, Z+
    4db8:	00 20       	and	r0, r0
    4dba:	e9 f7       	brne	.-6      	; 0x4db6 <parseEvent+0x404>
    4dbc:	31 97       	sbiw	r30, 0x01	; 1
    4dbe:	ea 1b       	sub	r30, r26
    4dc0:	fb 0b       	sbc	r31, r27
    4dc2:	fe 83       	std	Y+6, r31	; 0x06
    4dc4:	ed 83       	std	Y+5, r30	; 0x05
        DUMP(" ", mev.chars);
      }
      break;
    4dc6:	58 c0       	rjmp	.+176    	; 0x4e78 <parseEvent+0x4c6>

      case 0x00:  // Sequence Number
      {
        uint16_t x = readMultiByte(&mf->_fd, MB_WORD);
    4dc8:	62 e0       	ldi	r22, 0x02	; 2
    4dca:	c7 01       	movw	r24, r14
    4dcc:	0e 94 21 24 	call	0x4842	; 0x4842 <readMultiByte>

        mev.data[0] = (x >> 8) & 0xFF;
    4dd0:	78 87       	std	Y+8, r23	; 0x08
        mev.data[1] = x & 0xFF;
    4dd2:	69 87       	std	Y+9, r22	; 0x09

        DUMP("SEQUENCE NUMBER ", mev.data[0]);
        DUMP(" ", mev.data[1]);
      }
      break;
    4dd4:	51 c0       	rjmp	.+162    	; 0x4e78 <parseEvent+0x4c6>

      case 0x20:  // Channel Prefix
      mev.data[0] = readMultiByte(&mf->_fd, MB_BYTE);
    4dd6:	61 e0       	ldi	r22, 0x01	; 1
    4dd8:	c7 01       	movw	r24, r14
    4dda:	0e 94 21 24 	call	0x4842	; 0x4842 <readMultiByte>
    4dde:	68 87       	std	Y+8, r22	; 0x08
      DUMP("CHANNEL PREFIX ", mev.data[0]);
      break;
    4de0:	4b c0       	rjmp	.+150    	; 0x4e78 <parseEvent+0x4c6>

      case 0x21:  // Port Prefix
      mev.data[0] = readMultiByte(&mf->_fd, MB_BYTE);
    4de2:	61 e0       	ldi	r22, 0x01	; 1
    4de4:	c7 01       	movw	r24, r14
    4de6:	0e 94 21 24 	call	0x4842	; 0x4842 <readMultiByte>
    4dea:	68 87       	std	Y+8, r22	; 0x08
      DUMP("PORT PREFIX ", mev.data[0]);
      break;
    4dec:	45 c0       	rjmp	.+138    	; 0x4e78 <parseEvent+0x4c6>
      break;
#endif // SHOW_UNUSED_META

      default:
      {
        uint8_t minLen = min(ARRAY_SIZE(mev.data), mLen);
    4dee:	84 2d       	mov	r24, r4
    4df0:	f3 e3       	ldi	r31, 0x33	; 51
    4df2:	4f 16       	cp	r4, r31
    4df4:	51 04       	cpc	r5, r1
    4df6:	61 04       	cpc	r6, r1
    4df8:	71 04       	cpc	r7, r1
    4dfa:	08 f0       	brcs	.+2      	; 0x4dfe <parseEvent+0x44c>
    4dfc:	82 e3       	ldi	r24, 0x32	; 50
    4dfe:	98 2e       	mov	r9, r24
        
        for (uint8_t i = 0; i < minLen; ++i)
    4e00:	88 23       	and	r24, r24
    4e02:	01 f1       	breq	.+64     	; 0x4e44 <parseEvent+0x492>
    4e04:	04 e0       	ldi	r16, 0x04	; 4
    4e06:	10 e0       	ldi	r17, 0x00	; 0
    4e08:	0c 0f       	add	r16, r28
    4e0a:	1d 1f       	adc	r17, r29
    4e0c:	0c 5f       	subi	r16, 0xFC	; 252
    4e0e:	1f 4f       	sbci	r17, 0xFF	; 255
    4e10:	81 50       	subi	r24, 0x01	; 1
    4e12:	a8 2e       	mov	r10, r24
    4e14:	b1 2c       	mov	r11, r1
    4e16:	85 e0       	ldi	r24, 0x05	; 5
    4e18:	a8 0e       	add	r10, r24
    4e1a:	b1 1c       	adc	r11, r1
    4e1c:	a4 e0       	ldi	r26, 0x04	; 4
    4e1e:	b0 e0       	ldi	r27, 0x00	; 0
    4e20:	ac 0f       	add	r26, r28
    4e22:	bd 1f       	adc	r27, r29
    4e24:	aa 0e       	add	r10, r26
    4e26:	bb 1e       	adc	r11, r27
          f_read(&mf->_fd,&mev.data[i],1,&bRead); // read next
    4e28:	9e 01       	movw	r18, r28
    4e2a:	2e 5f       	subi	r18, 0xFE	; 254
    4e2c:	3f 4f       	sbci	r19, 0xFF	; 255
    4e2e:	41 e0       	ldi	r20, 0x01	; 1
    4e30:	50 e0       	ldi	r21, 0x00	; 0
    4e32:	b8 01       	movw	r22, r16
    4e34:	c7 01       	movw	r24, r14
    4e36:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
    4e3a:	0f 5f       	subi	r16, 0xFF	; 255
    4e3c:	1f 4f       	sbci	r17, 0xFF	; 255

      default:
      {
        uint8_t minLen = min(ARRAY_SIZE(mev.data), mLen);
        
        for (uint8_t i = 0; i < minLen; ++i)
    4e3e:	a0 16       	cp	r10, r16
    4e40:	b1 06       	cpc	r11, r17
    4e42:	91 f7       	brne	.-28     	; 0x4e28 <parseEvent+0x476>
          f_read(&mf->_fd,&mev.data[i],1,&bRead); // read next
		 		  
        mev.chars[minLen] = '\0'; // in case it is a string
    4e44:	fe 01       	movw	r30, r28
    4e46:	e9 0d       	add	r30, r9
    4e48:	f1 1d       	adc	r31, r1
    4e4a:	10 86       	std	Z+8, r1	; 0x08
        if (mLen > ARRAY_SIZE(mev.data))
    4e4c:	b3 e3       	ldi	r27, 0x33	; 51
    4e4e:	4b 16       	cp	r4, r27
    4e50:	51 04       	cpc	r5, r1
    4e52:	61 04       	cpc	r6, r1
    4e54:	71 04       	cpc	r7, r1
    4e56:	80 f0       	brcs	.+32     	; 0x4e78 <parseEvent+0x4c6>
          f_lseek(&mf->_fd,f_tell(&mf->_fd) + (mLen-ARRAY_SIZE(mev.data)));
    4e58:	f6 01       	movw	r30, r12
    4e5a:	44 85       	ldd	r20, Z+12	; 0x0c
    4e5c:	55 85       	ldd	r21, Z+13	; 0x0d
    4e5e:	66 85       	ldd	r22, Z+14	; 0x0e
    4e60:	77 85       	ldd	r23, Z+15	; 0x0f
    4e62:	42 53       	subi	r20, 0x32	; 50
    4e64:	51 09       	sbc	r21, r1
    4e66:	61 09       	sbc	r22, r1
    4e68:	71 09       	sbc	r23, r1
    4e6a:	44 0d       	add	r20, r4
    4e6c:	55 1d       	adc	r21, r5
    4e6e:	66 1d       	adc	r22, r6
    4e70:	77 1d       	adc	r23, r7
    4e72:	c7 01       	movw	r24, r14
    4e74:	0e 94 3e 14 	call	0x287c	; 0x287c <f_lseek>
  //    DUMPS("IGNORED");
      }
      break;
    }
    if (mf->_metaHandler != NULL)
    4e78:	d6 01       	movw	r26, r12
    4e7a:	14 96       	adiw	r26, 0x04	; 4
    4e7c:	ed 91       	ld	r30, X+
    4e7e:	fc 91       	ld	r31, X
    4e80:	15 97       	sbiw	r26, 0x05	; 5
    4e82:	30 97       	sbiw	r30, 0x00	; 0
    4e84:	39 f0       	breq	.+14     	; 0x4e94 <parseEvent+0x4e2>
      (mf->_metaHandler)(&mev);
    4e86:	ce 01       	movw	r24, r28
    4e88:	04 96       	adiw	r24, 0x04	; 4
    4e8a:	09 95       	icall
  }
  break;
    4e8c:	03 c0       	rjmp	.+6      	; 0x4e94 <parseEvent+0x4e2>
  
// ---------------------------- UNKNOWN
  default:
    // stop playing this track as we cannot identify the eType
    t->_endOfTrack = TRUE;
    4e8e:	81 e0       	ldi	r24, 0x01	; 1
    4e90:	f8 01       	movw	r30, r16
    4e92:	85 87       	std	Z+13, r24	; 0x0d
    DUMPX("[UKNOWN 0x", eType);
    DUMPS("] Track aborted");
    break;
  }
}
    4e94:	c1 5a       	subi	r28, 0xA1	; 161
    4e96:	df 4f       	sbci	r29, 0xFF	; 255
    4e98:	0f b6       	in	r0, 0x3f	; 63
    4e9a:	f8 94       	cli
    4e9c:	de bf       	out	0x3e, r29	; 62
    4e9e:	0f be       	out	0x3f, r0	; 63
    4ea0:	cd bf       	out	0x3d, r28	; 61
    4ea2:	df 91       	pop	r29
    4ea4:	cf 91       	pop	r28
    4ea6:	1f 91       	pop	r17
    4ea8:	0f 91       	pop	r16
    4eaa:	ff 90       	pop	r15
    4eac:	ef 90       	pop	r14
    4eae:	df 90       	pop	r13
    4eb0:	cf 90       	pop	r12
    4eb2:	bf 90       	pop	r11
    4eb4:	af 90       	pop	r10
    4eb6:	9f 90       	pop	r9
    4eb8:	8f 90       	pop	r8
    4eba:	7f 90       	pop	r7
    4ebc:	6f 90       	pop	r6
    4ebe:	5f 90       	pop	r5
    4ec0:	4f 90       	pop	r4
    4ec2:	08 95       	ret

00004ec4 <getNextTrackEvent>:
  t->_elapsedTicks = 0;
}

BOOL getNextTrackEvent(struct MD_MIDIFile *mf,struct MD_MFTrack *t, uint16_t tickCount)
// track_event = <time:v> + [<midi_event> | <meta_event> | <sysex_event>]
{
    4ec4:	8f 92       	push	r8
    4ec6:	9f 92       	push	r9
    4ec8:	af 92       	push	r10
    4eca:	bf 92       	push	r11
    4ecc:	cf 92       	push	r12
    4ece:	df 92       	push	r13
    4ed0:	ef 92       	push	r14
    4ed2:	ff 92       	push	r15
    4ed4:	1f 93       	push	r17
    4ed6:	cf 93       	push	r28
    4ed8:	df 93       	push	r29
  uint32_t deltaT;

  // is there anything to process?
  if (t->_endOfTrack)
    4eda:	fb 01       	movw	r30, r22
    4edc:	15 85       	ldd	r17, Z+13	; 0x0d
    4ede:	11 11       	cpse	r17, r1
    4ee0:	61 c0       	rjmp	.+194    	; 0x4fa4 <getNextTrackEvent+0xe0>
    4ee2:	6a 01       	movw	r12, r20
    4ee4:	eb 01       	movw	r28, r22
    4ee6:	7c 01       	movw	r14, r24
    return(FALSE);

  // move the file pointer to where we left off
  f_lseek(&mf->_fd,t->_startOffset+t->_currOffset);  
    4ee8:	5c 01       	movw	r10, r24
    4eea:	f6 e0       	ldi	r31, 0x06	; 6
    4eec:	af 0e       	add	r10, r31
    4eee:	b1 1c       	adc	r11, r1
    4ef0:	4d 81       	ldd	r20, Y+5	; 0x05
    4ef2:	5e 81       	ldd	r21, Y+6	; 0x06
    4ef4:	6f 81       	ldd	r22, Y+7	; 0x07
    4ef6:	78 85       	ldd	r23, Y+8	; 0x08
    4ef8:	89 85       	ldd	r24, Y+9	; 0x09
    4efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    4efc:	ab 85       	ldd	r26, Y+11	; 0x0b
    4efe:	bc 85       	ldd	r27, Y+12	; 0x0c
    4f00:	48 0f       	add	r20, r24
    4f02:	59 1f       	adc	r21, r25
    4f04:	6a 1f       	adc	r22, r26
    4f06:	7b 1f       	adc	r23, r27
    4f08:	c5 01       	movw	r24, r10
    4f0a:	0e 94 3e 14 	call	0x287c	; 0x287c <f_lseek>

  // Work out new total elapsed ticks - include the overshoot from
  // last event.
  t->_elapsedTicks += tickCount;
    4f0e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4f10:	9f 85       	ldd	r25, Y+15	; 0x0f
    4f12:	a8 89       	ldd	r26, Y+16	; 0x10
    4f14:	b9 89       	ldd	r27, Y+17	; 0x11
    4f16:	8c 0d       	add	r24, r12
    4f18:	9d 1d       	adc	r25, r13
    4f1a:	a1 1d       	adc	r26, r1
    4f1c:	b1 1d       	adc	r27, r1
    4f1e:	8e 87       	std	Y+14, r24	; 0x0e
    4f20:	9f 87       	std	Y+15, r25	; 0x0f
    4f22:	a8 8b       	std	Y+16, r26	; 0x10
    4f24:	b9 8b       	std	Y+17, r27	; 0x11

  // Get the DeltaT from the file in order to see if enough ticks have
  // passed for the event to be active.
  deltaT = readVarLen(&mf->_fd);
    4f26:	c5 01       	movw	r24, r10
    4f28:	0e 94 62 24 	call	0x48c4	; 0x48c4 <readVarLen>

  // If not enough ticks, just return without saving the file pointer and 
  // we will go back to the same spot next time.
  if (t->_elapsedTicks < deltaT)
    4f2c:	8e 84       	ldd	r8, Y+14	; 0x0e
    4f2e:	9f 84       	ldd	r9, Y+15	; 0x0f
    4f30:	a8 88       	ldd	r10, Y+16	; 0x10
    4f32:	b9 88       	ldd	r11, Y+17	; 0x11
    4f34:	86 16       	cp	r8, r22
    4f36:	97 06       	cpc	r9, r23
    4f38:	a8 06       	cpc	r10, r24
    4f3a:	b9 06       	cpc	r11, r25
    4f3c:	a0 f1       	brcs	.+104    	; 0x4fa6 <getNextTrackEvent+0xe2>
    return(FALSE);

  // Adjust the total elapsed time to the error against actual DeltaT to avoid 
  // accumulation of errors, as we only check for _elapsedTicks being >= ticks,
  // giving positive biased errors every time.
  t->_elapsedTicks -= deltaT;
    4f3e:	a5 01       	movw	r20, r10
    4f40:	94 01       	movw	r18, r8
    4f42:	26 1b       	sub	r18, r22
    4f44:	37 0b       	sbc	r19, r23
    4f46:	48 0b       	sbc	r20, r24
    4f48:	59 0b       	sbc	r21, r25
    4f4a:	2e 87       	std	Y+14, r18	; 0x0e
    4f4c:	3f 87       	std	Y+15, r19	; 0x0f
    4f4e:	48 8b       	std	Y+16, r20	; 0x10
    4f50:	59 8b       	std	Y+17, r21	; 0x11

  DUMP("\ndT: ", deltaT);
  DUMP(" + ", _elapsedTicks);
  DUMPS("\t");

  parseEvent(mf,t);
    4f52:	be 01       	movw	r22, r28
    4f54:	c7 01       	movw	r24, r14
    4f56:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <parseEvent>

  // remember the offset for next time
  t->_currOffset = mf->_fd.fptr - t->_startOffset;
    4f5a:	f7 01       	movw	r30, r14
    4f5c:	84 85       	ldd	r24, Z+12	; 0x0c
    4f5e:	95 85       	ldd	r25, Z+13	; 0x0d
    4f60:	a6 85       	ldd	r26, Z+14	; 0x0e
    4f62:	b7 85       	ldd	r27, Z+15	; 0x0f
    4f64:	4d 81       	ldd	r20, Y+5	; 0x05
    4f66:	5e 81       	ldd	r21, Y+6	; 0x06
    4f68:	6f 81       	ldd	r22, Y+7	; 0x07
    4f6a:	78 85       	ldd	r23, Y+8	; 0x08
    4f6c:	84 1b       	sub	r24, r20
    4f6e:	95 0b       	sbc	r25, r21
    4f70:	a6 0b       	sbc	r26, r22
    4f72:	b7 0b       	sbc	r27, r23
    4f74:	89 87       	std	Y+9, r24	; 0x09
    4f76:	9a 87       	std	Y+10, r25	; 0x0a
    4f78:	ab 87       	std	Y+11, r26	; 0x0b
    4f7a:	bc 87       	std	Y+12, r27	; 0x0c

  // catch end of track when there is no META event  
  t->_endOfTrack = t->_endOfTrack || (t->_currOffset >= t->_length);
    4f7c:	2d 85       	ldd	r18, Y+13	; 0x0d
    4f7e:	21 11       	cpse	r18, r1
    4f80:	0d c0       	rjmp	.+26     	; 0x4f9c <getNextTrackEvent+0xd8>
    4f82:	21 e0       	ldi	r18, 0x01	; 1
    4f84:	49 81       	ldd	r20, Y+1	; 0x01
    4f86:	5a 81       	ldd	r21, Y+2	; 0x02
    4f88:	6b 81       	ldd	r22, Y+3	; 0x03
    4f8a:	7c 81       	ldd	r23, Y+4	; 0x04
    4f8c:	84 17       	cp	r24, r20
    4f8e:	95 07       	cpc	r25, r21
    4f90:	a6 07       	cpc	r26, r22
    4f92:	b7 07       	cpc	r27, r23
    4f94:	08 f4       	brcc	.+2      	; 0x4f98 <getNextTrackEvent+0xd4>
    4f96:	20 e0       	ldi	r18, 0x00	; 0
    4f98:	82 2f       	mov	r24, r18
    4f9a:	01 c0       	rjmp	.+2      	; 0x4f9e <getNextTrackEvent+0xda>
    4f9c:	81 e0       	ldi	r24, 0x01	; 1
    4f9e:	8d 87       	std	Y+13, r24	; 0x0d
  if (t->_endOfTrack) DUMPS(" - OUT OF TRACK");

  return(TRUE);
    4fa0:	11 e0       	ldi	r17, 0x01	; 1
    4fa2:	01 c0       	rjmp	.+2      	; 0x4fa6 <getNextTrackEvent+0xe2>
{
  uint32_t deltaT;

  // is there anything to process?
  if (t->_endOfTrack)
    return(FALSE);
    4fa4:	10 e0       	ldi	r17, 0x00	; 0
  // catch end of track when there is no META event  
  t->_endOfTrack = t->_endOfTrack || (t->_currOffset >= t->_length);
  if (t->_endOfTrack) DUMPS(" - OUT OF TRACK");

  return(TRUE);
}
    4fa6:	81 2f       	mov	r24, r17
    4fa8:	df 91       	pop	r29
    4faa:	cf 91       	pop	r28
    4fac:	1f 91       	pop	r17
    4fae:	ff 90       	pop	r15
    4fb0:	ef 90       	pop	r14
    4fb2:	df 90       	pop	r13
    4fb4:	cf 90       	pop	r12
    4fb6:	bf 90       	pop	r11
    4fb8:	af 90       	pop	r10
    4fba:	9f 90       	pop	r9
    4fbc:	8f 90       	pop	r8
    4fbe:	08 95       	ret

00004fc0 <loadTrack>:
    break;
  }
}

int loadTrack(struct MD_MFTrack *t,uint8_t trackId, struct MD_MIDIFile *mf)
{
    4fc0:	8f 92       	push	r8
    4fc2:	9f 92       	push	r9
    4fc4:	af 92       	push	r10
    4fc6:	bf 92       	push	r11
    4fc8:	cf 92       	push	r12
    4fca:	df 92       	push	r13
    4fcc:	ef 92       	push	r14
    4fce:	ff 92       	push	r15
    4fd0:	0f 93       	push	r16
    4fd2:	1f 93       	push	r17
    4fd4:	cf 93       	push	r28
    4fd6:	df 93       	push	r29
    4fd8:	cd b7       	in	r28, 0x3d	; 61
    4fda:	de b7       	in	r29, 0x3e	; 62
    4fdc:	29 97       	sbiw	r28, 0x09	; 9
    4fde:	0f b6       	in	r0, 0x3f	; 63
    4fe0:	f8 94       	cli
    4fe2:	de bf       	out	0x3e, r29	; 62
    4fe4:	0f be       	out	0x3f, r0	; 63
    4fe6:	cd bf       	out	0x3d, r28	; 61
    4fe8:	8c 01       	movw	r16, r24
    4fea:	6a 01       	movw	r12, r20
  uint32_t  dat32;
  //uint16_t  dat16;

  // save the trackid for use later
  t->_trackId = t->_mev.track = trackId;
    4fec:	fc 01       	movw	r30, r24
    4fee:	62 8b       	std	Z+18, r22	; 0x12
    4ff0:	60 83       	st	Z, r22
  // Read the Track header
  // track_chunk = "MTrk" + <length:4> + <track_event> [+ <track_event> ...]
  {
    char    h[MTRK_HDR_SIZE+1]; // Header characters + nul
  
    f_read(&mf->_fd,h,MTRK_HDR_SIZE,(UINT *)&dat32);
    4ff2:	7a 01       	movw	r14, r20
    4ff4:	f6 e0       	ldi	r31, 0x06	; 6
    4ff6:	ef 0e       	add	r14, r31
    4ff8:	f1 1c       	adc	r15, r1
    4ffa:	9e 01       	movw	r18, r28
    4ffc:	2f 5f       	subi	r18, 0xFF	; 255
    4ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    5000:	44 e0       	ldi	r20, 0x04	; 4
    5002:	50 e0       	ldi	r21, 0x00	; 0
    5004:	be 01       	movw	r22, r28
    5006:	6b 5f       	subi	r22, 0xFB	; 251
    5008:	7f 4f       	sbci	r23, 0xFF	; 255
    500a:	c7 01       	movw	r24, r14
    500c:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <f_read>
    h[MTRK_HDR_SIZE] = '\0';
    5010:	19 86       	std	Y+9, r1	; 0x09

    if (strcmp(h, MTRK_HDR) != 0)
    5012:	67 e7       	ldi	r22, 0x77	; 119
    5014:	71 e0       	ldi	r23, 0x01	; 1
    5016:	ce 01       	movw	r24, r28
    5018:	05 96       	adiw	r24, 0x05	; 5
    501a:	0e 94 79 37 	call	0x6ef2	; 0x6ef2 <strcmp>
    501e:	89 2b       	or	r24, r25
    5020:	19 f0       	breq	.+6      	; 0x5028 <loadTrack+0x68>
      return(0);
    5022:	80 e0       	ldi	r24, 0x00	; 0
    5024:	90 e0       	ldi	r25, 0x00	; 0
    5026:	2b c0       	rjmp	.+86     	; 0x507e <loadTrack+0xbe>
  }

  // Row read track chunk size and in bytes. This is not really necessary 
  // since the track MUST end with an end of track meta event.
  dat32 = readMultiByte(&mf->_fd, MB_LONG);
    5028:	64 e0       	ldi	r22, 0x04	; 4
    502a:	c7 01       	movw	r24, r14
    502c:	0e 94 21 24 	call	0x4842	; 0x4842 <readMultiByte>
    5030:	69 83       	std	Y+1, r22	; 0x01
    5032:	7a 83       	std	Y+2, r23	; 0x02
    5034:	8b 83       	std	Y+3, r24	; 0x03
    5036:	9c 83       	std	Y+4, r25	; 0x04
  t->_length = dat32;
    5038:	f8 01       	movw	r30, r16
    503a:	61 83       	std	Z+1, r22	; 0x01
    503c:	72 83       	std	Z+2, r23	; 0x02
    503e:	83 83       	std	Z+3, r24	; 0x03
    5040:	94 83       	std	Z+4, r25	; 0x04

  // save where we are in the file as this is the start of offset for this track
  t->_startOffset = mf->_fd.fptr;
    5042:	f6 01       	movw	r30, r12
    5044:	84 84       	ldd	r8, Z+12	; 0x0c
    5046:	95 84       	ldd	r9, Z+13	; 0x0d
    5048:	a6 84       	ldd	r10, Z+14	; 0x0e
    504a:	b7 84       	ldd	r11, Z+15	; 0x0f
    504c:	f8 01       	movw	r30, r16
    504e:	85 82       	std	Z+5, r8	; 0x05
    5050:	96 82       	std	Z+6, r9	; 0x06
    5052:	a7 82       	std	Z+7, r10	; 0x07
    5054:	b0 86       	std	Z+8, r11	; 0x08
  t->_currOffset = 0;
    5056:	11 86       	std	Z+9, r1	; 0x09
    5058:	12 86       	std	Z+10, r1	; 0x0a
    505a:	13 86       	std	Z+11, r1	; 0x0b
    505c:	14 86       	std	Z+12, r1	; 0x0c

  // Advance the file pointer to the start of the next track;
  if (f_lseek(&mf->_fd,(t->_startOffset+t->_length)) != FR_OK)
    505e:	ab 01       	movw	r20, r22
    5060:	bc 01       	movw	r22, r24
    5062:	48 0d       	add	r20, r8
    5064:	59 1d       	adc	r21, r9
    5066:	6a 1d       	adc	r22, r10
    5068:	7b 1d       	adc	r23, r11
    506a:	c7 01       	movw	r24, r14
    506c:	0e 94 3e 14 	call	0x287c	; 0x287c <f_lseek>
    5070:	81 11       	cpse	r24, r1
    5072:	03 c0       	rjmp	.+6      	; 0x507a <loadTrack+0xba>
    return(1);

  return(-1);
    5074:	8f ef       	ldi	r24, 0xFF	; 255
    5076:	9f ef       	ldi	r25, 0xFF	; 255
    5078:	02 c0       	rjmp	.+4      	; 0x507e <loadTrack+0xbe>
  t->_startOffset = mf->_fd.fptr;
  t->_currOffset = 0;

  // Advance the file pointer to the start of the next track;
  if (f_lseek(&mf->_fd,(t->_startOffset+t->_length)) != FR_OK)
    return(1);
    507a:	81 e0       	ldi	r24, 0x01	; 1
    507c:	90 e0       	ldi	r25, 0x00	; 0

  return(-1);
}
    507e:	29 96       	adiw	r28, 0x09	; 9
    5080:	0f b6       	in	r0, 0x3f	; 63
    5082:	f8 94       	cli
    5084:	de bf       	out	0x3e, r29	; 62
    5086:	0f be       	out	0x3f, r0	; 63
    5088:	cd bf       	out	0x3d, r28	; 61
    508a:	df 91       	pop	r29
    508c:	cf 91       	pop	r28
    508e:	1f 91       	pop	r17
    5090:	0f 91       	pop	r16
    5092:	ff 90       	pop	r15
    5094:	ef 90       	pop	r14
    5096:	df 90       	pop	r13
    5098:	cf 90       	pop	r12
    509a:	bf 90       	pop	r11
    509c:	af 90       	pop	r10
    509e:	9f 90       	pop	r9
    50a0:	8f 90       	pop	r8
    50a2:	08 95       	ret

000050a4 <midiInit>:
	ev->data[0] = ev->data[0] | ev->channel;
	sendMidiBuffer(ev->data,ev->size);
}

void midiFileVolume(unsigned char vol){
	fileVolume = vol;
    50a4:	81 e0       	ldi	r24, 0x01	; 1
    50a6:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <midiState>
    50aa:	08 95       	ret

000050ac <getMidiStruct>:
    50ac:	ee e8       	ldi	r30, 0x8E	; 142
    50ae:	f4 e0       	ldi	r31, 0x04	; 4
    50b0:	20 91 8b 04 	lds	r18, 0x048B	; 0x80048b <midiReadIndex>
    50b4:	22 83       	std	Z+2, r18	; 0x02
    50b6:	67 83       	std	Z+7, r22	; 0x07
    50b8:	70 87       	std	Z+8, r23	; 0x08
    50ba:	81 87       	std	Z+9, r24	; 0x09
    50bc:	92 87       	std	Z+10, r25	; 0x0a
    50be:	cf 01       	movw	r24, r30
    50c0:	08 95       	ret

000050c2 <sendMidiMessage>:
    50c2:	cf 92       	push	r12
    50c4:	df 92       	push	r13
    50c6:	ef 92       	push	r14
    50c8:	ff 92       	push	r15
    50ca:	0f 93       	push	r16
    50cc:	1f 93       	push	r17
    50ce:	cf 93       	push	r28
    50d0:	df 93       	push	r29
    50d2:	08 2f       	mov	r16, r24
    50d4:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <work_event+0x3>
    50d8:	80 7f       	andi	r24, 0xF0	; 240
    50da:	80 39       	cpi	r24, 0x90	; 144
    50dc:	01 f5       	brne	.+64     	; 0x511e <sendMidiMessage+0x5c>
    50de:	ce e8       	ldi	r28, 0x8E	; 142
    50e0:	d4 e0       	ldi	r29, 0x04	; 4
    50e2:	60 91 8d 04 	lds	r22, 0x048D	; 0x80048d <playVolume>
    50e6:	70 e0       	ldi	r23, 0x00	; 0
    50e8:	80 e0       	ldi	r24, 0x00	; 0
    50ea:	90 e0       	ldi	r25, 0x00	; 0
    50ec:	0e 94 e8 34 	call	0x69d0	; 0x69d0 <__floatunsisf>
    50f0:	20 e0       	ldi	r18, 0x00	; 0
    50f2:	30 e0       	ldi	r19, 0x00	; 0
    50f4:	4f e7       	ldi	r20, 0x7F	; 127
    50f6:	53 e4       	ldi	r21, 0x43	; 67
    50f8:	0e 94 47 34 	call	0x688e	; 0x688e <__divsf3>
    50fc:	6b 01       	movw	r12, r22
    50fe:	7c 01       	movw	r14, r24
    5100:	6d 81       	ldd	r22, Y+5	; 0x05
    5102:	70 e0       	ldi	r23, 0x00	; 0
    5104:	80 e0       	ldi	r24, 0x00	; 0
    5106:	90 e0       	ldi	r25, 0x00	; 0
    5108:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <__floatsisf>
    510c:	9b 01       	movw	r18, r22
    510e:	ac 01       	movw	r20, r24
    5110:	c7 01       	movw	r24, r14
    5112:	b6 01       	movw	r22, r12
    5114:	0e 94 76 35 	call	0x6aec	; 0x6aec <__mulsf3>
    5118:	0e 94 b9 34 	call	0x6972	; 0x6972 <__fixunssfsi>
    511c:	6d 83       	std	Y+5, r22	; 0x05
    511e:	00 23       	and	r16, r16
    5120:	61 f0       	breq	.+24     	; 0x513a <sendMidiMessage+0x78>
    5122:	c1 e9       	ldi	r28, 0x91	; 145
    5124:	d4 e0       	ldi	r29, 0x04	; 4
    5126:	01 50       	subi	r16, 0x01	; 1
    5128:	10 e0       	ldi	r17, 0x00	; 0
    512a:	0e 56       	subi	r16, 0x6E	; 110
    512c:	1b 4f       	sbci	r17, 0xFB	; 251
    512e:	89 91       	ld	r24, Y+
    5130:	0e 94 87 33 	call	0x670e	; 0x670e <uartSendByte>
    5134:	c0 17       	cp	r28, r16
    5136:	d1 07       	cpc	r29, r17
    5138:	d1 f7       	brne	.-12     	; 0x512e <sendMidiMessage+0x6c>
    513a:	df 91       	pop	r29
    513c:	cf 91       	pop	r28
    513e:	1f 91       	pop	r17
    5140:	0f 91       	pop	r16
    5142:	ff 90       	pop	r15
    5144:	ef 90       	pop	r14
    5146:	df 90       	pop	r13
    5148:	cf 90       	pop	r12
    514a:	08 95       	ret

0000514c <sendMidiBuffer>:
    514c:	0f 93       	push	r16
    514e:	1f 93       	push	r17
    5150:	cf 93       	push	r28
    5152:	df 93       	push	r29
    5154:	66 23       	and	r22, r22
    5156:	71 f0       	breq	.+28     	; 0x5174 <sendMidiBuffer+0x28>
    5158:	ec 01       	movw	r28, r24
    515a:	61 50       	subi	r22, 0x01	; 1
    515c:	06 2f       	mov	r16, r22
    515e:	10 e0       	ldi	r17, 0x00	; 0
    5160:	0f 5f       	subi	r16, 0xFF	; 255
    5162:	1f 4f       	sbci	r17, 0xFF	; 255
    5164:	08 0f       	add	r16, r24
    5166:	19 1f       	adc	r17, r25
    5168:	89 91       	ld	r24, Y+
    516a:	0e 94 87 33 	call	0x670e	; 0x670e <uartSendByte>
    516e:	c0 17       	cp	r28, r16
    5170:	d1 07       	cpc	r29, r17
    5172:	d1 f7       	brne	.-12     	; 0x5168 <sendMidiBuffer+0x1c>
    5174:	df 91       	pop	r29
    5176:	cf 91       	pop	r28
    5178:	1f 91       	pop	r17
    517a:	0f 91       	pop	r16
    517c:	08 95       	ret

0000517e <sendProgramChange>:
    517e:	1f 93       	push	r17
    5180:	cf 93       	push	r28
    5182:	df 93       	push	r29
    5184:	16 2f       	mov	r17, r22
    5186:	ce e8       	ldi	r28, 0x8E	; 142
    5188:	d4 e0       	ldi	r29, 0x04	; 4
    518a:	90 eb       	ldi	r25, 0xB0	; 176
    518c:	9b 83       	std	Y+3, r25	; 0x03
    518e:	1c 82       	std	Y+4, r1	; 0x04
    5190:	8d 83       	std	Y+5, r24	; 0x05
    5192:	83 e0       	ldi	r24, 0x03	; 3
    5194:	0e 94 61 28 	call	0x50c2	; 0x50c2 <sendMidiMessage>
    5198:	80 ec       	ldi	r24, 0xC0	; 192
    519a:	8b 83       	std	Y+3, r24	; 0x03
    519c:	1c 83       	std	Y+4, r17	; 0x04
    519e:	82 e0       	ldi	r24, 0x02	; 2
    51a0:	0e 94 61 28 	call	0x50c2	; 0x50c2 <sendMidiMessage>
    51a4:	df 91       	pop	r29
    51a6:	cf 91       	pop	r28
    51a8:	1f 91       	pop	r17
    51aa:	08 95       	ret

000051ac <commandLen>:
    51ac:	e8 2f       	mov	r30, r24
    51ae:	e0 7f       	andi	r30, 0xF0	; 240
    51b0:	e0 3f       	cpi	r30, 0xF0	; 240
    51b2:	09 f4       	brne	.+2      	; 0x51b6 <commandLen+0xa>
    51b4:	e8 2f       	mov	r30, r24
    51b6:	8e 2f       	mov	r24, r30
    51b8:	90 e0       	ldi	r25, 0x00	; 0
    51ba:	fc 01       	movw	r30, r24
    51bc:	e0 58       	subi	r30, 0x80	; 128
    51be:	f1 09       	sbc	r31, r1
    51c0:	e0 38       	cpi	r30, 0x80	; 128
    51c2:	f1 05       	cpc	r31, r1
    51c4:	40 f4       	brcc	.+16     	; 0x51d6 <commandLen+0x2a>
    51c6:	ec 5c       	subi	r30, 0xCC	; 204
    51c8:	ff 4f       	sbci	r31, 0xFF	; 255
    51ca:	0c 94 38 36 	jmp	0x6c70	; 0x6c70 <__tablejump2__>
    51ce:	82 e0       	ldi	r24, 0x02	; 2
    51d0:	08 95       	ret
    51d2:	83 e0       	ldi	r24, 0x03	; 3
    51d4:	08 95       	ret
    51d6:	80 e0       	ldi	r24, 0x00	; 0
    51d8:	08 95       	ret
    51da:	81 e0       	ldi	r24, 0x01	; 1
    51dc:	08 95       	ret

000051de <readMidiMessage>:
    51de:	ff 92       	push	r15
    51e0:	0f 93       	push	r16
    51e2:	1f 93       	push	r17
    51e4:	cf 93       	push	r28
    51e6:	df 93       	push	r29
    51e8:	d8 2f       	mov	r29, r24
    51ea:	8b 01       	movw	r16, r22
    51ec:	c0 91 8a 04 	lds	r28, 0x048A	; 0x80048a <midiState>
    51f0:	c2 30       	cpi	r28, 0x02	; 2
    51f2:	51 f1       	breq	.+84     	; 0x5248 <readMidiMessage+0x6a>
    51f4:	c3 30       	cpi	r28, 0x03	; 3
    51f6:	09 f4       	brne	.+2      	; 0x51fa <readMidiMessage+0x1c>
    51f8:	53 c0       	rjmp	.+166    	; 0x52a0 <readMidiMessage+0xc2>
    51fa:	c1 30       	cpi	r28, 0x01	; 1
    51fc:	09 f0       	breq	.+2      	; 0x5200 <readMidiMessage+0x22>
    51fe:	57 c0       	rjmp	.+174    	; 0x52ae <readMidiMessage+0xd0>
    5200:	80 3f       	cpi	r24, 0xF0	; 240
    5202:	09 f4       	brne	.+2      	; 0x5206 <readMidiMessage+0x28>
    5204:	56 c0       	rjmp	.+172    	; 0x52b2 <readMidiMessage+0xd4>
    5206:	0e 94 d6 28 	call	0x51ac	; 0x51ac <commandLen>
    520a:	81 30       	cpi	r24, 0x01	; 1
    520c:	39 f4       	brne	.+14     	; 0x521c <readMidiMessage+0x3e>
    520e:	f8 01       	movw	r30, r16
    5210:	80 83       	st	Z, r24
    5212:	d0 93 91 04 	sts	0x0491, r29	; 0x800491 <work_event+0x3>
    5216:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <noteEvent>
    521a:	50 c0       	rjmp	.+160    	; 0x52bc <readMidiMessage+0xde>
    521c:	81 11       	cpse	r24, r1
    521e:	0a c0       	rjmp	.+20     	; 0x5234 <readMidiMessage+0x56>
    5220:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <noteEvent>
    5224:	81 30       	cpi	r24, 0x01	; 1
    5226:	59 f4       	brne	.+22     	; 0x523e <readMidiMessage+0x60>
    5228:	d0 93 92 04 	sts	0x0492, r29	; 0x800492 <work_event+0x4>
    522c:	82 e0       	ldi	r24, 0x02	; 2
    522e:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <midiReadIndex>
    5232:	05 c0       	rjmp	.+10     	; 0x523e <readMidiMessage+0x60>
    5234:	d0 93 91 04 	sts	0x0491, r29	; 0x800491 <work_event+0x3>
    5238:	81 e0       	ldi	r24, 0x01	; 1
    523a:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <midiReadIndex>
    523e:	82 e0       	ldi	r24, 0x02	; 2
    5240:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <midiState>
    5244:	c0 e0       	ldi	r28, 0x00	; 0
    5246:	3a c0       	rjmp	.+116    	; 0x52bc <readMidiMessage+0xde>
    5248:	0e 94 d6 28 	call	0x51ac	; 0x51ac <commandLen>
    524c:	c8 2f       	mov	r28, r24
    524e:	88 23       	and	r24, r24
    5250:	39 f0       	breq	.+14     	; 0x5260 <readMidiMessage+0x82>
    5252:	81 e0       	ldi	r24, 0x01	; 1
    5254:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <midiState>
    5258:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <noteEvent>
    525c:	c0 e0       	ldi	r28, 0x00	; 0
    525e:	2e c0       	rjmp	.+92     	; 0x52bc <readMidiMessage+0xde>
    5260:	e0 91 8b 04 	lds	r30, 0x048B	; 0x80048b <midiReadIndex>
    5264:	ff 24       	eor	r15, r15
    5266:	f3 94       	inc	r15
    5268:	fe 0e       	add	r15, r30
    526a:	f0 92 8b 04 	sts	0x048B, r15	; 0x80048b <midiReadIndex>
    526e:	f0 e0       	ldi	r31, 0x00	; 0
    5270:	e2 57       	subi	r30, 0x72	; 114
    5272:	fb 4f       	sbci	r31, 0xFB	; 251
    5274:	d3 83       	std	Z+3, r29	; 0x03
    5276:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <work_event+0x3>
    527a:	80 7f       	andi	r24, 0xF0	; 240
    527c:	0e 94 d6 28 	call	0x51ac	; 0x51ac <commandLen>
    5280:	f8 12       	cpse	r15, r24
    5282:	1c c0       	rjmp	.+56     	; 0x52bc <readMidiMessage+0xde>
    5284:	81 e0       	ldi	r24, 0x01	; 1
    5286:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <midiState>
    528a:	f8 01       	movw	r30, r16
    528c:	f0 82       	st	Z, r15
    528e:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <work_event+0x3>
    5292:	80 79       	andi	r24, 0x90	; 144
    5294:	81 f0       	breq	.+32     	; 0x52b6 <readMidiMessage+0xd8>
    5296:	81 e0       	ldi	r24, 0x01	; 1
    5298:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <noteEvent>
    529c:	c1 e0       	ldi	r28, 0x01	; 1
    529e:	0e c0       	rjmp	.+28     	; 0x52bc <readMidiMessage+0xde>
    52a0:	87 3f       	cpi	r24, 0xF7	; 247
    52a2:	59 f4       	brne	.+22     	; 0x52ba <readMidiMessage+0xdc>
    52a4:	81 e0       	ldi	r24, 0x01	; 1
    52a6:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <midiState>
    52aa:	c0 e0       	ldi	r28, 0x00	; 0
    52ac:	07 c0       	rjmp	.+14     	; 0x52bc <readMidiMessage+0xde>
    52ae:	c0 e0       	ldi	r28, 0x00	; 0
    52b0:	05 c0       	rjmp	.+10     	; 0x52bc <readMidiMessage+0xde>
    52b2:	c0 e0       	ldi	r28, 0x00	; 0
    52b4:	03 c0       	rjmp	.+6      	; 0x52bc <readMidiMessage+0xde>
    52b6:	c1 e0       	ldi	r28, 0x01	; 1
    52b8:	01 c0       	rjmp	.+2      	; 0x52bc <readMidiMessage+0xde>
    52ba:	c0 e0       	ldi	r28, 0x00	; 0
    52bc:	8c 2f       	mov	r24, r28
    52be:	df 91       	pop	r29
    52c0:	cf 91       	pop	r28
    52c2:	1f 91       	pop	r17
    52c4:	0f 91       	pop	r16
    52c6:	ff 90       	pop	r15
    52c8:	08 95       	ret

000052ca <metaFun>:
    52ca:	08 95       	ret

000052cc <sysexFun>:
    52cc:	08 95       	ret

000052ce <midiFun>:
    52ce:	cf 92       	push	r12
    52d0:	df 92       	push	r13
    52d2:	ef 92       	push	r14
    52d4:	ff 92       	push	r15
    52d6:	1f 93       	push	r17
    52d8:	cf 93       	push	r28
    52da:	df 93       	push	r29
    52dc:	ec 01       	movw	r28, r24
    52de:	1b 81       	ldd	r17, Y+3	; 0x03
    52e0:	81 2f       	mov	r24, r17
    52e2:	80 7f       	andi	r24, 0xF0	; 240
    52e4:	80 39       	cpi	r24, 0x90	; 144
    52e6:	21 f5       	brne	.+72     	; 0x5330 <midiFun+0x62>
    52e8:	60 91 8d 04 	lds	r22, 0x048D	; 0x80048d <playVolume>
    52ec:	70 e0       	ldi	r23, 0x00	; 0
    52ee:	6f 5f       	subi	r22, 0xFF	; 255
    52f0:	7f 4f       	sbci	r23, 0xFF	; 255
    52f2:	07 2e       	mov	r0, r23
    52f4:	00 0c       	add	r0, r0
    52f6:	88 0b       	sbc	r24, r24
    52f8:	99 0b       	sbc	r25, r25
    52fa:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <__floatsisf>
    52fe:	9b 01       	movw	r18, r22
    5300:	ac 01       	movw	r20, r24
    5302:	60 e0       	ldi	r22, 0x00	; 0
    5304:	70 e0       	ldi	r23, 0x00	; 0
    5306:	8e ef       	ldi	r24, 0xFE	; 254
    5308:	92 e4       	ldi	r25, 0x42	; 66
    530a:	0e 94 47 34 	call	0x688e	; 0x688e <__divsf3>
    530e:	6b 01       	movw	r12, r22
    5310:	7c 01       	movw	r14, r24
    5312:	6d 81       	ldd	r22, Y+5	; 0x05
    5314:	70 e0       	ldi	r23, 0x00	; 0
    5316:	80 e0       	ldi	r24, 0x00	; 0
    5318:	90 e0       	ldi	r25, 0x00	; 0
    531a:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <__floatsisf>
    531e:	9b 01       	movw	r18, r22
    5320:	ac 01       	movw	r20, r24
    5322:	c7 01       	movw	r24, r14
    5324:	b6 01       	movw	r22, r12
    5326:	0e 94 76 35 	call	0x6aec	; 0x6aec <__mulsf3>
    532a:	0e 94 b9 34 	call	0x6972	; 0x6972 <__fixunssfsi>
    532e:	6d 83       	std	Y+5, r22	; 0x05
    5330:	89 81       	ldd	r24, Y+1	; 0x01
    5332:	18 2b       	or	r17, r24
    5334:	1b 83       	std	Y+3, r17	; 0x03
    5336:	6a 81       	ldd	r22, Y+2	; 0x02
    5338:	ce 01       	movw	r24, r28
    533a:	03 96       	adiw	r24, 0x03	; 3
    533c:	0e 94 a6 28 	call	0x514c	; 0x514c <sendMidiBuffer>
    5340:	df 91       	pop	r29
    5342:	cf 91       	pop	r28
    5344:	1f 91       	pop	r17
    5346:	ff 90       	pop	r15
    5348:	ef 90       	pop	r14
    534a:	df 90       	pop	r13
    534c:	cf 90       	pop	r12
    534e:	08 95       	ret

00005350 <midiPlayVolume>:
}

void midiPlayVolume(unsigned char vol){	
	playVolume = vol;
    5350:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <playVolume>
    5354:	08 95       	ret

00005356 <rcvr_spi>:
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    5356:	8f ef       	ldi	r24, 0xFF	; 255
    5358:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    535a:	77 9b       	sbis	0x0e, 7	; 14
    535c:	fe cf       	rjmp	.-4      	; 0x535a <rcvr_spi+0x4>
	return SPDR;
    535e:	8f b1       	in	r24, 0x0f	; 15
}
    5360:	08 95       	ret

00005362 <wait_ready>:
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
    5362:	82 e3       	ldi	r24, 0x32	; 50
    5364:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <Timer2>
	rcvr_spi();
    5368:	0e 94 ab 29 	call	0x5356	; 0x5356 <rcvr_spi>
	do
		if (rcvr_spi() == 0xFF) return 1;
    536c:	0e 94 ab 29 	call	0x5356	; 0x5356 <rcvr_spi>
    5370:	8f 3f       	cpi	r24, 0xFF	; 255
    5372:	39 f0       	breq	.+14     	; 0x5382 <wait_ready+0x20>
	while (Timer2);
    5374:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <Timer2>
    5378:	81 11       	cpse	r24, r1
    537a:	f8 cf       	rjmp	.-16     	; 0x536c <wait_ready+0xa>

	return 0;
    537c:	80 e0       	ldi	r24, 0x00	; 0
    537e:	90 e0       	ldi	r25, 0x00	; 0
    5380:	08 95       	ret
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		if (rcvr_spi() == 0xFF) return 1;
    5382:	81 e0       	ldi	r24, 0x01	; 1
    5384:	90 e0       	ldi	r25, 0x00	; 0
	while (Timer2);

	return 0;
}
    5386:	08 95       	ret

00005388 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    5388:	c4 9a       	sbi	0x18, 4	; 24
	rcvr_spi();
    538a:	0e 94 ab 29 	call	0x5356	; 0x5356 <rcvr_spi>
    538e:	08 95       	ret

00005390 <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
    5390:	cf 93       	push	r28
    5392:	df 93       	push	r29
	CS_LOW();
    5394:	c4 98       	cbi	0x18, 4	; 24
	if (!wait_ready()) {
    5396:	0e 94 b1 29 	call	0x5362	; 0x5362 <wait_ready>
    539a:	ec 01       	movw	r28, r24
    539c:	89 2b       	or	r24, r25
    539e:	19 f4       	brne	.+6      	; 0x53a6 <select+0x16>
		deselect();
    53a0:	0e 94 c4 29 	call	0x5388	; 0x5388 <deselect>
		return 0;
    53a4:	02 c0       	rjmp	.+4      	; 0x53aa <select+0x1a>
	}
	return 1;
    53a6:	c1 e0       	ldi	r28, 0x01	; 1
    53a8:	d0 e0       	ldi	r29, 0x00	; 0
}
    53aa:	ce 01       	movw	r24, r28
    53ac:	df 91       	pop	r29
    53ae:	cf 91       	pop	r28
    53b0:	08 95       	ret

000053b2 <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    53b2:	0f 93       	push	r16
    53b4:	1f 93       	push	r17
    53b6:	cf 93       	push	r28
    53b8:	df 93       	push	r29
    53ba:	08 2f       	mov	r16, r24
    53bc:	19 2f       	mov	r17, r25
    53be:	eb 01       	movw	r28, r22
	BYTE token;


	Timer1 = 20;
    53c0:	84 e1       	ldi	r24, 0x14	; 20
    53c2:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <Timer1>
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
    53c6:	0e 94 ab 29 	call	0x5356	; 0x5356 <rcvr_spi>
	} while ((token == 0xFF) && Timer1);
    53ca:	8f 3f       	cpi	r24, 0xFF	; 255
    53cc:	39 f4       	brne	.+14     	; 0x53dc <rcvr_datablock+0x2a>
    53ce:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Timer1>
    53d2:	81 11       	cpse	r24, r1
    53d4:	f8 cf       	rjmp	.-16     	; 0x53c6 <rcvr_datablock+0x14>
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
    53d6:	80 e0       	ldi	r24, 0x00	; 0
    53d8:	90 e0       	ldi	r25, 0x00	; 0
    53da:	2c c0       	rjmp	.+88     	; 0x5434 <rcvr_datablock+0x82>
    53dc:	8e 3f       	cpi	r24, 0xFE	; 254
    53de:	41 f5       	brne	.+80     	; 0x5430 <rcvr_datablock+0x7e>
    53e0:	e0 2f       	mov	r30, r16
    53e2:	f1 2f       	mov	r31, r17

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
    53e4:	8f ef       	ldi	r24, 0xFF	; 255
    53e6:	8f b9       	out	0x0f, r24	; 15
    53e8:	77 9b       	sbis	0x0e, 7	; 14
    53ea:	fe cf       	rjmp	.-4      	; 0x53e8 <rcvr_datablock+0x36>
    53ec:	9f b1       	in	r25, 0x0f	; 15
    53ee:	df 01       	movw	r26, r30
    53f0:	90 83       	st	Z, r25
		rcvr_spi_m(buff++);
    53f2:	8f b9       	out	0x0f, r24	; 15
    53f4:	77 9b       	sbis	0x0e, 7	; 14
    53f6:	fe cf       	rjmp	.-4      	; 0x53f4 <rcvr_datablock+0x42>
    53f8:	9f b1       	in	r25, 0x0f	; 15
    53fa:	11 96       	adiw	r26, 0x01	; 1
    53fc:	9c 93       	st	X, r25
    53fe:	11 97       	sbiw	r26, 0x01	; 1
		rcvr_spi_m(buff++);
    5400:	8f b9       	out	0x0f, r24	; 15
    5402:	77 9b       	sbis	0x0e, 7	; 14
    5404:	fe cf       	rjmp	.-4      	; 0x5402 <rcvr_datablock+0x50>
    5406:	9f b1       	in	r25, 0x0f	; 15
    5408:	12 96       	adiw	r26, 0x02	; 2
    540a:	9c 93       	st	X, r25
    540c:	12 97       	sbiw	r26, 0x02	; 2
		rcvr_spi_m(buff++);
    540e:	8f b9       	out	0x0f, r24	; 15
    5410:	77 9b       	sbis	0x0e, 7	; 14
    5412:	fe cf       	rjmp	.-4      	; 0x5410 <rcvr_datablock+0x5e>
    5414:	9f b1       	in	r25, 0x0f	; 15
    5416:	13 96       	adiw	r26, 0x03	; 3
    5418:	9c 93       	st	X, r25
	} while (btr -= 4);
    541a:	24 97       	sbiw	r28, 0x04	; 4
    541c:	34 96       	adiw	r30, 0x04	; 4
    541e:	20 97       	sbiw	r28, 0x00	; 0
    5420:	11 f7       	brne	.-60     	; 0x53e6 <rcvr_datablock+0x34>
	rcvr_spi();						/* Discard CRC */
    5422:	0e 94 ab 29 	call	0x5356	; 0x5356 <rcvr_spi>
	rcvr_spi();
    5426:	0e 94 ab 29 	call	0x5356	; 0x5356 <rcvr_spi>

	return 1;						/* Return with success */
    542a:	81 e0       	ldi	r24, 0x01	; 1
    542c:	90 e0       	ldi	r25, 0x00	; 0
    542e:	02 c0       	rjmp	.+4      	; 0x5434 <rcvr_datablock+0x82>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
    5430:	80 e0       	ldi	r24, 0x00	; 0
    5432:	90 e0       	ldi	r25, 0x00	; 0
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return 1;						/* Return with success */
}
    5434:	df 91       	pop	r29
    5436:	cf 91       	pop	r28
    5438:	1f 91       	pop	r17
    543a:	0f 91       	pop	r16
    543c:	08 95       	ret

0000543e <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    543e:	0f 93       	push	r16
    5440:	1f 93       	push	r17
    5442:	cf 93       	push	r28
    5444:	8c 01       	movw	r16, r24
    5446:	c6 2f       	mov	r28, r22
	BYTE resp, wc;


	if (!wait_ready()) return 0;
    5448:	0e 94 b1 29 	call	0x5362	; 0x5362 <wait_ready>
    544c:	00 97       	sbiw	r24, 0x00	; 0
    544e:	59 f1       	breq	.+86     	; 0x54a6 <xmit_datablock+0x68>

	xmit_spi(token);					/* Xmit data token */
    5450:	cf b9       	out	0x0f, r28	; 15
    5452:	77 9b       	sbis	0x0e, 7	; 14
    5454:	fe cf       	rjmp	.-4      	; 0x5452 <xmit_datablock+0x14>
	if (token != 0xFD) {	/* Is data token */
    5456:	cd 3f       	cpi	r28, 0xFD	; 253
    5458:	21 f1       	breq	.+72     	; 0x54a2 <xmit_datablock+0x64>
    545a:	f8 01       	movw	r30, r16
    545c:	98 01       	movw	r18, r16
    545e:	3e 5f       	subi	r19, 0xFE	; 254
    5460:	df 01       	movw	r26, r30
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
    5462:	80 81       	ld	r24, Z
    5464:	8f b9       	out	0x0f, r24	; 15
    5466:	77 9b       	sbis	0x0e, 7	; 14
    5468:	fe cf       	rjmp	.-4      	; 0x5466 <xmit_datablock+0x28>
			xmit_spi(*buff++);
    546a:	11 96       	adiw	r26, 0x01	; 1
    546c:	8c 91       	ld	r24, X
    546e:	8f b9       	out	0x0f, r24	; 15
    5470:	77 9b       	sbis	0x0e, 7	; 14
    5472:	fe cf       	rjmp	.-4      	; 0x5470 <xmit_datablock+0x32>
    5474:	32 96       	adiw	r30, 0x02	; 2
		} while (--wc);
    5476:	e2 17       	cp	r30, r18
    5478:	f3 07       	cpc	r31, r19
    547a:	91 f7       	brne	.-28     	; 0x5460 <xmit_datablock+0x22>
		xmit_spi(0xFF);					/* CRC (Dummy) */
    547c:	8f ef       	ldi	r24, 0xFF	; 255
    547e:	8f b9       	out	0x0f, r24	; 15
    5480:	77 9b       	sbis	0x0e, 7	; 14
    5482:	fe cf       	rjmp	.-4      	; 0x5480 <xmit_datablock+0x42>
		xmit_spi(0xFF);
    5484:	8f ef       	ldi	r24, 0xFF	; 255
    5486:	8f b9       	out	0x0f, r24	; 15
    5488:	77 9b       	sbis	0x0e, 7	; 14
    548a:	fe cf       	rjmp	.-4      	; 0x5488 <xmit_datablock+0x4a>
		resp = rcvr_spi();				/* Reveive data response */
    548c:	0e 94 ab 29 	call	0x5356	; 0x5356 <rcvr_spi>
)
{
	BYTE resp, wc;


	if (!wait_ready()) return 0;
    5490:	8f 71       	andi	r24, 0x1F	; 31
    5492:	31 e0       	ldi	r19, 0x01	; 1
    5494:	20 e0       	ldi	r18, 0x00	; 0
    5496:	85 30       	cpi	r24, 0x05	; 5
    5498:	09 f0       	breq	.+2      	; 0x549c <xmit_datablock+0x5e>
    549a:	30 e0       	ldi	r19, 0x00	; 0
    549c:	83 2f       	mov	r24, r19
    549e:	92 2f       	mov	r25, r18
    54a0:	02 c0       	rjmp	.+4      	; 0x54a6 <xmit_datablock+0x68>
		resp = rcvr_spi();				/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
    54a2:	81 e0       	ldi	r24, 0x01	; 1
    54a4:	90 e0       	ldi	r25, 0x00	; 0
}
    54a6:	cf 91       	pop	r28
    54a8:	1f 91       	pop	r17
    54aa:	0f 91       	pop	r16
    54ac:	08 95       	ret

000054ae <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    54ae:	cf 92       	push	r12
    54b0:	df 92       	push	r13
    54b2:	ef 92       	push	r14
    54b4:	ff 92       	push	r15
    54b6:	cf 93       	push	r28
    54b8:	c8 2f       	mov	r28, r24
    54ba:	6a 01       	movw	r12, r20
    54bc:	7b 01       	movw	r14, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    54be:	88 23       	and	r24, r24
    54c0:	4c f4       	brge	.+18     	; 0x54d4 <send_cmd+0x26>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    54c2:	40 e0       	ldi	r20, 0x00	; 0
    54c4:	50 e0       	ldi	r21, 0x00	; 0
    54c6:	ba 01       	movw	r22, r20
    54c8:	87 e3       	ldi	r24, 0x37	; 55
    54ca:	0e 94 57 2a 	call	0x54ae	; 0x54ae <send_cmd>
		if (res > 1) return res;
    54ce:	82 30       	cpi	r24, 0x02	; 2
    54d0:	e0 f5       	brcc	.+120    	; 0x554a <send_cmd+0x9c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    54d2:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
    54d4:	0e 94 c4 29 	call	0x5388	; 0x5388 <deselect>
	if (!select()) return 0xFF;
    54d8:	0e 94 c8 29 	call	0x5390	; 0x5390 <select>
    54dc:	89 2b       	or	r24, r25
    54de:	a1 f1       	breq	.+104    	; 0x5548 <send_cmd+0x9a>

	/* Send command packet */
	xmit_spi(0x40 | cmd);				/* Start + Command index */
    54e0:	8c 2f       	mov	r24, r28
    54e2:	80 64       	ori	r24, 0x40	; 64
    54e4:	8f b9       	out	0x0f, r24	; 15
    54e6:	77 9b       	sbis	0x0e, 7	; 14
    54e8:	fe cf       	rjmp	.-4      	; 0x54e6 <send_cmd+0x38>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    54ea:	8f 2d       	mov	r24, r15
    54ec:	99 27       	eor	r25, r25
    54ee:	aa 27       	eor	r26, r26
    54f0:	bb 27       	eor	r27, r27
    54f2:	8f b9       	out	0x0f, r24	; 15
    54f4:	77 9b       	sbis	0x0e, 7	; 14
    54f6:	fe cf       	rjmp	.-4      	; 0x54f4 <send_cmd+0x46>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    54f8:	c7 01       	movw	r24, r14
    54fa:	aa 27       	eor	r26, r26
    54fc:	bb 27       	eor	r27, r27
    54fe:	8f b9       	out	0x0f, r24	; 15
    5500:	77 9b       	sbis	0x0e, 7	; 14
    5502:	fe cf       	rjmp	.-4      	; 0x5500 <send_cmd+0x52>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    5504:	bb 27       	eor	r27, r27
    5506:	af 2d       	mov	r26, r15
    5508:	9e 2d       	mov	r25, r14
    550a:	8d 2d       	mov	r24, r13
    550c:	8f b9       	out	0x0f, r24	; 15
    550e:	77 9b       	sbis	0x0e, 7	; 14
    5510:	fe cf       	rjmp	.-4      	; 0x550e <send_cmd+0x60>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    5512:	cf b8       	out	0x0f, r12	; 15
    5514:	77 9b       	sbis	0x0e, 7	; 14
    5516:	fe cf       	rjmp	.-4      	; 0x5514 <send_cmd+0x66>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    5518:	cc 23       	and	r28, r28
    551a:	21 f0       	breq	.+8      	; 0x5524 <send_cmd+0x76>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    551c:	c8 30       	cpi	r28, 0x08	; 8
    551e:	21 f4       	brne	.+8      	; 0x5528 <send_cmd+0x7a>
    5520:	87 e8       	ldi	r24, 0x87	; 135
    5522:	03 c0       	rjmp	.+6      	; 0x552a <send_cmd+0x7c>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    5524:	85 e9       	ldi	r24, 0x95	; 149
    5526:	01 c0       	rjmp	.+2      	; 0x552a <send_cmd+0x7c>
	xmit_spi(0x40 | cmd);				/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
    5528:	81 e0       	ldi	r24, 0x01	; 1
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
	xmit_spi(n);
    552a:	8f b9       	out	0x0f, r24	; 15
    552c:	77 9b       	sbis	0x0e, 7	; 14
    552e:	fe cf       	rjmp	.-4      	; 0x552c <send_cmd+0x7e>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
    5530:	cc 30       	cpi	r28, 0x0C	; 12
    5532:	11 f4       	brne	.+4      	; 0x5538 <send_cmd+0x8a>
    5534:	0e 94 ab 29 	call	0x5356	; 0x5356 <rcvr_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    5538:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
    553a:	0e 94 ab 29 	call	0x5356	; 0x5356 <rcvr_spi>
	while ((res & 0x80) && --n);
    553e:	88 23       	and	r24, r24
    5540:	24 f4       	brge	.+8      	; 0x554a <send_cmd+0x9c>
    5542:	c1 50       	subi	r28, 0x01	; 1
    5544:	d1 f7       	brne	.-12     	; 0x553a <send_cmd+0x8c>
    5546:	01 c0       	rjmp	.+2      	; 0x554a <send_cmd+0x9c>
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
    5548:	8f ef       	ldi	r24, 0xFF	; 255
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    554a:	cf 91       	pop	r28
    554c:	ff 90       	pop	r15
    554e:	ef 90       	pop	r14
    5550:	df 90       	pop	r13
    5552:	cf 90       	pop	r12
    5554:	08 95       	ret

00005556 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    5556:	cf 92       	push	r12
    5558:	df 92       	push	r13
    555a:	ef 92       	push	r14
    555c:	ff 92       	push	r15
    555e:	0f 93       	push	r16
    5560:	1f 93       	push	r17
    5562:	cf 93       	push	r28
    5564:	df 93       	push	r29
    5566:	00 d0       	rcall	.+0      	; 0x5568 <disk_initialize+0x12>
    5568:	00 d0       	rcall	.+0      	; 0x556a <disk_initialize+0x14>
    556a:	cd b7       	in	r28, 0x3d	; 61
    556c:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    556e:	81 11       	cpse	r24, r1
    5570:	99 c0       	rjmp	.+306    	; 0x56a4 <disk_initialize+0x14e>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    5572:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    5576:	81 ff       	sbrs	r24, 1
    5578:	03 c0       	rjmp	.+6      	; 0x5580 <disk_initialize+0x2a>
    557a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    557e:	9f c0       	rjmp	.+318    	; 0x56be <disk_initialize+0x168>

	power_on();							/* Force socket power on */
	FCLK_SLOW();
    5580:	69 9a       	sbi	0x0d, 1	; 13
    5582:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
    5584:	0e 94 ab 29 	call	0x5356	; 0x5356 <rcvr_spi>
    5588:	11 50       	subi	r17, 0x01	; 1
    558a:	e1 f7       	brne	.-8      	; 0x5584 <disk_initialize+0x2e>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    558c:	40 e0       	ldi	r20, 0x00	; 0
    558e:	50 e0       	ldi	r21, 0x00	; 0
    5590:	ba 01       	movw	r22, r20
    5592:	80 e0       	ldi	r24, 0x00	; 0
    5594:	0e 94 57 2a 	call	0x54ae	; 0x54ae <send_cmd>
    5598:	81 30       	cpi	r24, 0x01	; 1
    559a:	09 f0       	breq	.+2      	; 0x559e <disk_initialize+0x48>
    559c:	8b c0       	rjmp	.+278    	; 0x56b4 <disk_initialize+0x15e>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    559e:	84 e6       	ldi	r24, 0x64	; 100
    55a0:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <Timer1>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    55a4:	4a ea       	ldi	r20, 0xAA	; 170
    55a6:	51 e0       	ldi	r21, 0x01	; 1
    55a8:	60 e0       	ldi	r22, 0x00	; 0
    55aa:	70 e0       	ldi	r23, 0x00	; 0
    55ac:	88 e0       	ldi	r24, 0x08	; 8
    55ae:	0e 94 57 2a 	call	0x54ae	; 0x54ae <send_cmd>
    55b2:	81 30       	cpi	r24, 0x01	; 1
    55b4:	09 f0       	breq	.+2      	; 0x55b8 <disk_initialize+0x62>
    55b6:	3f c0       	rjmp	.+126    	; 0x5636 <disk_initialize+0xe0>
    55b8:	ce 01       	movw	r24, r28
    55ba:	01 96       	adiw	r24, 0x01	; 1
    55bc:	6c 01       	movw	r12, r24
    55be:	7e 01       	movw	r14, r28
    55c0:	95 e0       	ldi	r25, 0x05	; 5
    55c2:	e9 0e       	add	r14, r25
    55c4:	f1 1c       	adc	r15, r1
    55c6:	86 01       	movw	r16, r12
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
    55c8:	0e 94 ab 29 	call	0x5356	; 0x5356 <rcvr_spi>
    55cc:	f8 01       	movw	r30, r16
    55ce:	81 93       	st	Z+, r24
    55d0:	8f 01       	movw	r16, r30
    55d2:	ee 16       	cp	r14, r30
    55d4:	ff 06       	cpc	r15, r31
    55d6:	c1 f7       	brne	.-16     	; 0x55c8 <disk_initialize+0x72>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    55d8:	8b 81       	ldd	r24, Y+3	; 0x03
    55da:	81 30       	cpi	r24, 0x01	; 1
    55dc:	09 f0       	breq	.+2      	; 0x55e0 <disk_initialize+0x8a>
    55de:	6a c0       	rjmp	.+212    	; 0x56b4 <disk_initialize+0x15e>
    55e0:	8c 81       	ldd	r24, Y+4	; 0x04
    55e2:	8a 3a       	cpi	r24, 0xAA	; 170
    55e4:	09 f0       	breq	.+2      	; 0x55e8 <disk_initialize+0x92>
    55e6:	66 c0       	rjmp	.+204    	; 0x56b4 <disk_initialize+0x15e>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    55e8:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Timer1>
    55ec:	88 23       	and	r24, r24
    55ee:	49 f0       	breq	.+18     	; 0x5602 <disk_initialize+0xac>
    55f0:	40 e0       	ldi	r20, 0x00	; 0
    55f2:	50 e0       	ldi	r21, 0x00	; 0
    55f4:	60 e0       	ldi	r22, 0x00	; 0
    55f6:	70 e4       	ldi	r23, 0x40	; 64
    55f8:	89 ea       	ldi	r24, 0xA9	; 169
    55fa:	0e 94 57 2a 	call	0x54ae	; 0x54ae <send_cmd>
    55fe:	81 11       	cpse	r24, r1
    5600:	f3 cf       	rjmp	.-26     	; 0x55e8 <disk_initialize+0x92>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    5602:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Timer1>
    5606:	88 23       	and	r24, r24
    5608:	09 f4       	brne	.+2      	; 0x560c <disk_initialize+0xb6>
    560a:	54 c0       	rjmp	.+168    	; 0x56b4 <disk_initialize+0x15e>
    560c:	40 e0       	ldi	r20, 0x00	; 0
    560e:	50 e0       	ldi	r21, 0x00	; 0
    5610:	ba 01       	movw	r22, r20
    5612:	8a e3       	ldi	r24, 0x3A	; 58
    5614:	0e 94 57 2a 	call	0x54ae	; 0x54ae <send_cmd>
    5618:	81 11       	cpse	r24, r1
    561a:	4c c0       	rjmp	.+152    	; 0x56b4 <disk_initialize+0x15e>
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
    561c:	0e 94 ab 29 	call	0x5356	; 0x5356 <rcvr_spi>
    5620:	f6 01       	movw	r30, r12
    5622:	81 93       	st	Z+, r24
    5624:	6f 01       	movw	r12, r30
    5626:	ee 16       	cp	r14, r30
    5628:	ff 06       	cpc	r15, r31
    562a:	c1 f7       	brne	.-16     	; 0x561c <disk_initialize+0xc6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    562c:	89 81       	ldd	r24, Y+1	; 0x01
    562e:	86 fd       	sbrc	r24, 6
    5630:	3b c0       	rjmp	.+118    	; 0x56a8 <disk_initialize+0x152>
    5632:	84 e0       	ldi	r24, 0x04	; 4
    5634:	3a c0       	rjmp	.+116    	; 0x56aa <disk_initialize+0x154>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    5636:	40 e0       	ldi	r20, 0x00	; 0
    5638:	50 e0       	ldi	r21, 0x00	; 0
    563a:	ba 01       	movw	r22, r20
    563c:	89 ea       	ldi	r24, 0xA9	; 169
    563e:	0e 94 57 2a 	call	0x54ae	; 0x54ae <send_cmd>
    5642:	82 30       	cpi	r24, 0x02	; 2
    5644:	18 f0       	brcs	.+6      	; 0x564c <disk_initialize+0xf6>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    5646:	01 e0       	ldi	r16, 0x01	; 1
    5648:	11 e0       	ldi	r17, 0x01	; 1
    564a:	02 c0       	rjmp	.+4      	; 0x5650 <disk_initialize+0xfa>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    564c:	02 e0       	ldi	r16, 0x02	; 2
    564e:	19 ea       	ldi	r17, 0xA9	; 169
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    5650:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Timer1>
    5654:	88 23       	and	r24, r24
    5656:	41 f0       	breq	.+16     	; 0x5668 <disk_initialize+0x112>
    5658:	40 e0       	ldi	r20, 0x00	; 0
    565a:	50 e0       	ldi	r21, 0x00	; 0
    565c:	ba 01       	movw	r22, r20
    565e:	81 2f       	mov	r24, r17
    5660:	0e 94 57 2a 	call	0x54ae	; 0x54ae <send_cmd>
    5664:	81 11       	cpse	r24, r1
    5666:	f4 cf       	rjmp	.-24     	; 0x5650 <disk_initialize+0xfa>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    5668:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Timer1>
    566c:	88 23       	and	r24, r24
    566e:	11 f1       	breq	.+68     	; 0x56b4 <disk_initialize+0x15e>
    5670:	40 e0       	ldi	r20, 0x00	; 0
    5672:	52 e0       	ldi	r21, 0x02	; 2
    5674:	60 e0       	ldi	r22, 0x00	; 0
    5676:	70 e0       	ldi	r23, 0x00	; 0
    5678:	80 e1       	ldi	r24, 0x10	; 16
    567a:	0e 94 57 2a 	call	0x54ae	; 0x54ae <send_cmd>
    567e:	81 11       	cpse	r24, r1
    5680:	19 c0       	rjmp	.+50     	; 0x56b4 <disk_initialize+0x15e>
				ty = 0;
		}
	}
	//blinkWhiteLEDnrazy(ty);
	CardType = ty;
    5682:	00 93 a6 01 	sts	0x01A6, r16	; 0x8001a6 <CardType>
	deselect();
    5686:	0e 94 c4 29 	call	0x5388	; 0x5388 <deselect>

	if (ty) {			/* Initialization succeded */
    568a:	00 23       	and	r16, r16
    568c:	41 f0       	breq	.+16     	; 0x569e <disk_initialize+0x148>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    568e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    5692:	8e 7f       	andi	r24, 0xFE	; 254
    5694:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Stat>
		FCLK_FAST();
    5698:	8d b1       	in	r24, 0x0d	; 13
    569a:	8c 7f       	andi	r24, 0xFC	; 252
    569c:	8d b9       	out	0x0d, r24	; 13
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
    569e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    56a2:	0d c0       	rjmp	.+26     	; 0x56be <disk_initialize+0x168>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    56a4:	81 e0       	ldi	r24, 0x01	; 1
    56a6:	0b c0       	rjmp	.+22     	; 0x56be <disk_initialize+0x168>
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    56a8:	8c e0       	ldi	r24, 0x0C	; 12
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	//blinkWhiteLEDnrazy(ty);
	CardType = ty;
    56aa:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <CardType>
	deselect();
    56ae:	0e 94 c4 29 	call	0x5388	; 0x5388 <deselect>
    56b2:	ed cf       	rjmp	.-38     	; 0x568e <disk_initialize+0x138>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	//blinkWhiteLEDnrazy(ty);
	CardType = ty;
    56b4:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <CardType>
	deselect();
    56b8:	0e 94 c4 29 	call	0x5388	; 0x5388 <deselect>
    56bc:	f0 cf       	rjmp	.-32     	; 0x569e <disk_initialize+0x148>
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    56be:	0f 90       	pop	r0
    56c0:	0f 90       	pop	r0
    56c2:	0f 90       	pop	r0
    56c4:	0f 90       	pop	r0
    56c6:	df 91       	pop	r29
    56c8:	cf 91       	pop	r28
    56ca:	1f 91       	pop	r17
    56cc:	0f 91       	pop	r16
    56ce:	ff 90       	pop	r15
    56d0:	ef 90       	pop	r14
    56d2:	df 90       	pop	r13
    56d4:	cf 90       	pop	r12
    56d6:	08 95       	ret

000056d8 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    56d8:	81 11       	cpse	r24, r1
    56da:	03 c0       	rjmp	.+6      	; 0x56e2 <disk_status+0xa>
	return Stat;
    56dc:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    56e0:	08 95       	ret

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    56e2:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    56e4:	08 95       	ret

000056e6 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    56e6:	0f 93       	push	r16
    56e8:	cf 93       	push	r28
    56ea:	df 93       	push	r29
    56ec:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
    56ee:	81 11       	cpse	r24, r1
    56f0:	44 c0       	rjmp	.+136    	; 0x577a <disk_read+0x94>
    56f2:	00 23       	and	r16, r16
    56f4:	09 f4       	brne	.+2      	; 0x56f8 <disk_read+0x12>
    56f6:	43 c0       	rjmp	.+134    	; 0x577e <disk_read+0x98>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    56f8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    56fc:	80 fd       	sbrc	r24, 0
    56fe:	41 c0       	rjmp	.+130    	; 0x5782 <disk_read+0x9c>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    5700:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <CardType>
    5704:	83 fd       	sbrc	r24, 3
    5706:	09 c0       	rjmp	.+18     	; 0x571a <disk_read+0x34>
    5708:	01 2e       	mov	r0, r17
    570a:	19 e0       	ldi	r17, 0x09	; 9
    570c:	22 0f       	add	r18, r18
    570e:	33 1f       	adc	r19, r19
    5710:	44 1f       	adc	r20, r20
    5712:	55 1f       	adc	r21, r21
    5714:	1a 95       	dec	r17
    5716:	d1 f7       	brne	.-12     	; 0x570c <disk_read+0x26>
    5718:	10 2d       	mov	r17, r0

	if (count == 1) {	/* Single block read */
    571a:	01 30       	cpi	r16, 0x01	; 1
    571c:	81 f4       	brne	.+32     	; 0x573e <disk_read+0x58>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
    571e:	ba 01       	movw	r22, r20
    5720:	a9 01       	movw	r20, r18
    5722:	81 e1       	ldi	r24, 0x11	; 17
    5724:	0e 94 57 2a 	call	0x54ae	; 0x54ae <send_cmd>
    5728:	81 11       	cpse	r24, r1
    572a:	20 c0       	rjmp	.+64     	; 0x576c <disk_read+0x86>
			&& rcvr_datablock(buff, 512))
    572c:	60 e0       	ldi	r22, 0x00	; 0
    572e:	72 e0       	ldi	r23, 0x02	; 2
    5730:	ce 01       	movw	r24, r28
    5732:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <rcvr_datablock>
    5736:	89 2b       	or	r24, r25
    5738:	c9 f0       	breq	.+50     	; 0x576c <disk_read+0x86>
    573a:	00 e0       	ldi	r16, 0x00	; 0
    573c:	17 c0       	rjmp	.+46     	; 0x576c <disk_read+0x86>
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
    573e:	ba 01       	movw	r22, r20
    5740:	a9 01       	movw	r20, r18
    5742:	82 e1       	ldi	r24, 0x12	; 18
    5744:	0e 94 57 2a 	call	0x54ae	; 0x54ae <send_cmd>
    5748:	81 11       	cpse	r24, r1
    574a:	10 c0       	rjmp	.+32     	; 0x576c <disk_read+0x86>
			do {
				if (!rcvr_datablock(buff, 512)) break;
    574c:	60 e0       	ldi	r22, 0x00	; 0
    574e:	72 e0       	ldi	r23, 0x02	; 2
    5750:	ce 01       	movw	r24, r28
    5752:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <rcvr_datablock>
    5756:	89 2b       	or	r24, r25
    5758:	19 f0       	breq	.+6      	; 0x5760 <disk_read+0x7a>
				buff += 512;
    575a:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    575c:	01 50       	subi	r16, 0x01	; 1
    575e:	b1 f7       	brne	.-20     	; 0x574c <disk_read+0x66>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
    5760:	40 e0       	ldi	r20, 0x00	; 0
    5762:	50 e0       	ldi	r21, 0x00	; 0
    5764:	ba 01       	movw	r22, r20
    5766:	8c e0       	ldi	r24, 0x0C	; 12
    5768:	0e 94 57 2a 	call	0x54ae	; 0x54ae <send_cmd>
		}
	}
	deselect();
    576c:	0e 94 c4 29 	call	0x5388	; 0x5388 <deselect>

	return count ? RES_ERROR : RES_OK;
    5770:	81 e0       	ldi	r24, 0x01	; 1
    5772:	01 11       	cpse	r16, r1
    5774:	07 c0       	rjmp	.+14     	; 0x5784 <disk_read+0x9e>
    5776:	80 e0       	ldi	r24, 0x00	; 0
    5778:	05 c0       	rjmp	.+10     	; 0x5784 <disk_read+0x9e>
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
    577a:	84 e0       	ldi	r24, 0x04	; 4
    577c:	03 c0       	rjmp	.+6      	; 0x5784 <disk_read+0x9e>
    577e:	84 e0       	ldi	r24, 0x04	; 4
    5780:	01 c0       	rjmp	.+2      	; 0x5784 <disk_read+0x9e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    5782:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    5784:	df 91       	pop	r29
    5786:	cf 91       	pop	r28
    5788:	0f 91       	pop	r16
    578a:	08 95       	ret

0000578c <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    578c:	cf 92       	push	r12
    578e:	df 92       	push	r13
    5790:	ef 92       	push	r14
    5792:	ff 92       	push	r15
    5794:	0f 93       	push	r16
    5796:	cf 93       	push	r28
    5798:	df 93       	push	r29
    579a:	eb 01       	movw	r28, r22
    579c:	69 01       	movw	r12, r18
    579e:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
    57a0:	81 11       	cpse	r24, r1
    57a2:	51 c0       	rjmp	.+162    	; 0x5846 <disk_write+0xba>
    57a4:	00 23       	and	r16, r16
    57a6:	09 f4       	brne	.+2      	; 0x57aa <disk_write+0x1e>
    57a8:	50 c0       	rjmp	.+160    	; 0x584a <disk_write+0xbe>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    57aa:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    57ae:	80 fd       	sbrc	r24, 0
    57b0:	4e c0       	rjmp	.+156    	; 0x584e <disk_write+0xc2>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    57b2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    57b6:	82 fd       	sbrc	r24, 2
    57b8:	4c c0       	rjmp	.+152    	; 0x5852 <disk_write+0xc6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    57ba:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <CardType>
    57be:	83 fd       	sbrc	r24, 3
    57c0:	09 c0       	rjmp	.+18     	; 0x57d4 <disk_write+0x48>
    57c2:	0b 2e       	mov	r0, r27
    57c4:	b9 e0       	ldi	r27, 0x09	; 9
    57c6:	cc 0c       	add	r12, r12
    57c8:	dd 1c       	adc	r13, r13
    57ca:	ee 1c       	adc	r14, r14
    57cc:	ff 1c       	adc	r15, r15
    57ce:	ba 95       	dec	r27
    57d0:	d1 f7       	brne	.-12     	; 0x57c6 <disk_write+0x3a>
    57d2:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    57d4:	01 30       	cpi	r16, 0x01	; 1
    57d6:	79 f4       	brne	.+30     	; 0x57f6 <disk_write+0x6a>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    57d8:	b7 01       	movw	r22, r14
    57da:	a6 01       	movw	r20, r12
    57dc:	88 e1       	ldi	r24, 0x18	; 24
    57de:	0e 94 57 2a 	call	0x54ae	; 0x54ae <send_cmd>
    57e2:	81 11       	cpse	r24, r1
    57e4:	29 c0       	rjmp	.+82     	; 0x5838 <disk_write+0xac>
			&& xmit_datablock(buff, 0xFE))
    57e6:	6e ef       	ldi	r22, 0xFE	; 254
    57e8:	ce 01       	movw	r24, r28
    57ea:	0e 94 1f 2a 	call	0x543e	; 0x543e <xmit_datablock>
    57ee:	89 2b       	or	r24, r25
    57f0:	19 f1       	breq	.+70     	; 0x5838 <disk_write+0xac>
    57f2:	00 e0       	ldi	r16, 0x00	; 0
    57f4:	21 c0       	rjmp	.+66     	; 0x5838 <disk_write+0xac>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    57f6:	86 70       	andi	r24, 0x06	; 6
    57f8:	39 f0       	breq	.+14     	; 0x5808 <disk_write+0x7c>
    57fa:	40 2f       	mov	r20, r16
    57fc:	50 e0       	ldi	r21, 0x00	; 0
    57fe:	60 e0       	ldi	r22, 0x00	; 0
    5800:	70 e0       	ldi	r23, 0x00	; 0
    5802:	87 e9       	ldi	r24, 0x97	; 151
    5804:	0e 94 57 2a 	call	0x54ae	; 0x54ae <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    5808:	b7 01       	movw	r22, r14
    580a:	a6 01       	movw	r20, r12
    580c:	89 e1       	ldi	r24, 0x19	; 25
    580e:	0e 94 57 2a 	call	0x54ae	; 0x54ae <send_cmd>
    5812:	81 11       	cpse	r24, r1
    5814:	11 c0       	rjmp	.+34     	; 0x5838 <disk_write+0xac>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    5816:	6c ef       	ldi	r22, 0xFC	; 252
    5818:	ce 01       	movw	r24, r28
    581a:	0e 94 1f 2a 	call	0x543e	; 0x543e <xmit_datablock>
    581e:	89 2b       	or	r24, r25
    5820:	19 f0       	breq	.+6      	; 0x5828 <disk_write+0x9c>
				buff += 512;
    5822:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    5824:	01 50       	subi	r16, 0x01	; 1
    5826:	b9 f7       	brne	.-18     	; 0x5816 <disk_write+0x8a>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    5828:	6d ef       	ldi	r22, 0xFD	; 253
    582a:	80 e0       	ldi	r24, 0x00	; 0
    582c:	90 e0       	ldi	r25, 0x00	; 0
    582e:	0e 94 1f 2a 	call	0x543e	; 0x543e <xmit_datablock>
    5832:	89 2b       	or	r24, r25
    5834:	09 f4       	brne	.+2      	; 0x5838 <disk_write+0xac>
				count = 1;
    5836:	01 e0       	ldi	r16, 0x01	; 1
		}
	}
	deselect();
    5838:	0e 94 c4 29 	call	0x5388	; 0x5388 <deselect>

	return count ? RES_ERROR : RES_OK;
    583c:	81 e0       	ldi	r24, 0x01	; 1
    583e:	01 11       	cpse	r16, r1
    5840:	09 c0       	rjmp	.+18     	; 0x5854 <disk_write+0xc8>
    5842:	80 e0       	ldi	r24, 0x00	; 0
    5844:	07 c0       	rjmp	.+14     	; 0x5854 <disk_write+0xc8>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
    5846:	84 e0       	ldi	r24, 0x04	; 4
    5848:	05 c0       	rjmp	.+10     	; 0x5854 <disk_write+0xc8>
    584a:	84 e0       	ldi	r24, 0x04	; 4
    584c:	03 c0       	rjmp	.+6      	; 0x5854 <disk_write+0xc8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    584e:	83 e0       	ldi	r24, 0x03	; 3
    5850:	01 c0       	rjmp	.+2      	; 0x5854 <disk_write+0xc8>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    5852:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    5854:	df 91       	pop	r29
    5856:	cf 91       	pop	r28
    5858:	0f 91       	pop	r16
    585a:	ff 90       	pop	r15
    585c:	ef 90       	pop	r14
    585e:	df 90       	pop	r13
    5860:	cf 90       	pop	r12
    5862:	08 95       	ret

00005864 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    5864:	ef 92       	push	r14
    5866:	ff 92       	push	r15
    5868:	0f 93       	push	r16
    586a:	1f 93       	push	r17
    586c:	cf 93       	push	r28
    586e:	df 93       	push	r29
    5870:	cd b7       	in	r28, 0x3d	; 61
    5872:	de b7       	in	r29, 0x3e	; 62
    5874:	60 97       	sbiw	r28, 0x10	; 16
    5876:	0f b6       	in	r0, 0x3f	; 63
    5878:	f8 94       	cli
    587a:	de bf       	out	0x3e, r29	; 62
    587c:	0f be       	out	0x3f, r0	; 63
    587e:	cd bf       	out	0x3d, r28	; 61
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
    5880:	81 11       	cpse	r24, r1
    5882:	96 c1       	rjmp	.+812    	; 0x5bb0 <disk_ioctl+0x34c>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
    5884:	65 30       	cpi	r22, 0x05	; 5
    5886:	71 f4       	brne	.+28     	; 0x58a4 <disk_ioctl+0x40>
		switch (ptr[0]) {
    5888:	fa 01       	movw	r30, r20
    588a:	80 81       	ld	r24, Z
    588c:	88 23       	and	r24, r24
    588e:	19 f0       	breq	.+6      	; 0x5896 <disk_ioctl+0x32>
    5890:	81 30       	cpi	r24, 0x01	; 1
    5892:	19 f0       	breq	.+6      	; 0x589a <disk_ioctl+0x36>
    5894:	8f c1       	rjmp	.+798    	; 0x5bb4 <disk_ioctl+0x350>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
			res = RES_OK;
    5896:	80 e0       	ldi	r24, 0x00	; 0
    5898:	90 c1       	rjmp	.+800    	; 0x5bba <disk_ioctl+0x356>
			break;
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
    589a:	81 e0       	ldi	r24, 0x01	; 1
    589c:	fa 01       	movw	r30, r20
    589e:	81 83       	std	Z+1, r24	; 0x01
			res = RES_OK;
    58a0:	80 e0       	ldi	r24, 0x00	; 0
			break;
    58a2:	8b c1       	rjmp	.+790    	; 0x5bba <disk_ioctl+0x356>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    58a4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    58a8:	80 fd       	sbrc	r24, 0
    58aa:	86 c1       	rjmp	.+780    	; 0x5bb8 <disk_ioctl+0x354>
    58ac:	8a 01       	movw	r16, r20

		switch (ctrl) {
    58ae:	86 2f       	mov	r24, r22
    58b0:	90 e0       	ldi	r25, 0x00	; 0
    58b2:	8f 30       	cpi	r24, 0x0F	; 15
    58b4:	91 05       	cpc	r25, r1
    58b6:	08 f0       	brcs	.+2      	; 0x58ba <disk_ioctl+0x56>
    58b8:	60 c1       	rjmp	.+704    	; 0x5b7a <disk_ioctl+0x316>
    58ba:	fc 01       	movw	r30, r24
    58bc:	ec 54       	subi	r30, 0x4C	; 76
    58be:	ff 4f       	sbci	r31, 0xFF	; 255
    58c0:	0c 94 38 36 	jmp	0x6c70	; 0x6c70 <__tablejump2__>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
    58c4:	0e 94 c8 29 	call	0x5390	; 0x5390 <select>
    58c8:	89 2b       	or	r24, r25
    58ca:	09 f4       	brne	.+2      	; 0x58ce <disk_ioctl+0x6a>
    58cc:	58 c1       	rjmp	.+688    	; 0x5b7e <disk_ioctl+0x31a>
				deselect();
    58ce:	0e 94 c4 29 	call	0x5388	; 0x5388 <deselect>
				res = RES_OK;
    58d2:	10 e0       	ldi	r17, 0x00	; 0
    58d4:	69 c1       	rjmp	.+722    	; 0x5ba8 <disk_ioctl+0x344>
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    58d6:	40 e0       	ldi	r20, 0x00	; 0
    58d8:	50 e0       	ldi	r21, 0x00	; 0
    58da:	ba 01       	movw	r22, r20
    58dc:	89 e0       	ldi	r24, 0x09	; 9
    58de:	0e 94 57 2a 	call	0x54ae	; 0x54ae <send_cmd>
    58e2:	81 11       	cpse	r24, r1
    58e4:	4e c1       	rjmp	.+668    	; 0x5b82 <disk_ioctl+0x31e>
    58e6:	60 e1       	ldi	r22, 0x10	; 16
    58e8:	70 e0       	ldi	r23, 0x00	; 0
    58ea:	ce 01       	movw	r24, r28
    58ec:	01 96       	adiw	r24, 0x01	; 1
    58ee:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <rcvr_datablock>
    58f2:	89 2b       	or	r24, r25
    58f4:	09 f4       	brne	.+2      	; 0x58f8 <disk_ioctl+0x94>
    58f6:	47 c1       	rjmp	.+654    	; 0x5b86 <disk_ioctl+0x322>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    58f8:	89 81       	ldd	r24, Y+1	; 0x01
    58fa:	82 95       	swap	r24
    58fc:	86 95       	lsr	r24
    58fe:	86 95       	lsr	r24
    5900:	83 70       	andi	r24, 0x03	; 3
    5902:	81 30       	cpi	r24, 0x01	; 1
    5904:	d9 f4       	brne	.+54     	; 0x593c <disk_ioctl+0xd8>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
    5906:	89 85       	ldd	r24, Y+9	; 0x09
    5908:	90 e0       	ldi	r25, 0x00	; 0
    590a:	38 2f       	mov	r19, r24
    590c:	22 27       	eor	r18, r18
    590e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5910:	90 e0       	ldi	r25, 0x00	; 0
    5912:	01 96       	adiw	r24, 0x01	; 1
    5914:	82 0f       	add	r24, r18
    5916:	93 1f       	adc	r25, r19
    5918:	a0 e0       	ldi	r26, 0x00	; 0
    591a:	b0 e0       	ldi	r27, 0x00	; 0
    591c:	07 2e       	mov	r0, r23
    591e:	7a e0       	ldi	r23, 0x0A	; 10
    5920:	88 0f       	add	r24, r24
    5922:	99 1f       	adc	r25, r25
    5924:	aa 1f       	adc	r26, r26
    5926:	bb 1f       	adc	r27, r27
    5928:	7a 95       	dec	r23
    592a:	d1 f7       	brne	.-12     	; 0x5920 <disk_ioctl+0xbc>
    592c:	70 2d       	mov	r23, r0
    592e:	f8 01       	movw	r30, r16
    5930:	80 83       	st	Z, r24
    5932:	91 83       	std	Z+1, r25	; 0x01
    5934:	a2 83       	std	Z+2, r26	; 0x02
    5936:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
				}
				res = RES_OK;
    5938:	10 e0       	ldi	r17, 0x00	; 0
    593a:	36 c1       	rjmp	.+620    	; 0x5ba8 <disk_ioctl+0x344>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
    593c:	29 85       	ldd	r18, Y+9	; 0x09
    593e:	22 95       	swap	r18
    5940:	26 95       	lsr	r18
    5942:	26 95       	lsr	r18
    5944:	23 70       	andi	r18, 0x03	; 3
    5946:	88 85       	ldd	r24, Y+8	; 0x08
    5948:	f4 e0       	ldi	r31, 0x04	; 4
    594a:	8f 9f       	mul	r24, r31
    594c:	c0 01       	movw	r24, r0
    594e:	11 24       	eor	r1, r1
    5950:	82 0f       	add	r24, r18
    5952:	91 1d       	adc	r25, r1
    5954:	9c 01       	movw	r18, r24
    5956:	2f 5f       	subi	r18, 0xFF	; 255
    5958:	3f 4f       	sbci	r19, 0xFF	; 255
    595a:	8f 81       	ldd	r24, Y+7	; 0x07
    595c:	83 70       	andi	r24, 0x03	; 3
    595e:	90 e0       	ldi	r25, 0x00	; 0
    5960:	98 2f       	mov	r25, r24
    5962:	88 27       	eor	r24, r24
    5964:	99 0f       	add	r25, r25
    5966:	99 0f       	add	r25, r25
    5968:	82 0f       	add	r24, r18
    596a:	93 1f       	adc	r25, r19
    596c:	a0 e0       	ldi	r26, 0x00	; 0
    596e:	b0 e0       	ldi	r27, 0x00	; 0
    5970:	3e 81       	ldd	r19, Y+6	; 0x06
    5972:	3f 70       	andi	r19, 0x0F	; 15
    5974:	2b 85       	ldd	r18, Y+11	; 0x0b
    5976:	22 1f       	adc	r18, r18
    5978:	22 27       	eor	r18, r18
    597a:	22 1f       	adc	r18, r18
    597c:	32 0f       	add	r19, r18
    597e:	2a 85       	ldd	r18, Y+10	; 0x0a
    5980:	23 70       	andi	r18, 0x03	; 3
    5982:	22 0f       	add	r18, r18
    5984:	23 0f       	add	r18, r19
    5986:	27 50       	subi	r18, 0x07	; 7
    5988:	04 c0       	rjmp	.+8      	; 0x5992 <disk_ioctl+0x12e>
    598a:	88 0f       	add	r24, r24
    598c:	99 1f       	adc	r25, r25
    598e:	aa 1f       	adc	r26, r26
    5990:	bb 1f       	adc	r27, r27
    5992:	2a 95       	dec	r18
    5994:	d2 f7       	brpl	.-12     	; 0x598a <disk_ioctl+0x126>
    5996:	f8 01       	movw	r30, r16
    5998:	80 83       	st	Z, r24
    599a:	91 83       	std	Z+1, r25	; 0x01
    599c:	a2 83       	std	Z+2, r26	; 0x02
    599e:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    59a0:	10 e0       	ldi	r17, 0x00	; 0
    59a2:	02 c1       	rjmp	.+516    	; 0x5ba8 <disk_ioctl+0x344>
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    59a4:	80 e0       	ldi	r24, 0x00	; 0
    59a6:	92 e0       	ldi	r25, 0x02	; 2
    59a8:	fa 01       	movw	r30, r20
    59aa:	91 83       	std	Z+1, r25	; 0x01
    59ac:	80 83       	st	Z, r24
			res = RES_OK;
    59ae:	10 e0       	ldi	r17, 0x00	; 0
			break;
    59b0:	fb c0       	rjmp	.+502    	; 0x5ba8 <disk_ioctl+0x344>

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
    59b2:	f0 90 a6 01 	lds	r15, 0x01A6	; 0x8001a6 <CardType>
    59b6:	f2 fe       	sbrs	r15, 2
    59b8:	31 c0       	rjmp	.+98     	; 0x5a1c <disk_ioctl+0x1b8>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    59ba:	40 e0       	ldi	r20, 0x00	; 0
    59bc:	50 e0       	ldi	r21, 0x00	; 0
    59be:	ba 01       	movw	r22, r20
    59c0:	8d e8       	ldi	r24, 0x8D	; 141
    59c2:	0e 94 57 2a 	call	0x54ae	; 0x54ae <send_cmd>
    59c6:	81 11       	cpse	r24, r1
    59c8:	e0 c0       	rjmp	.+448    	; 0x5b8a <disk_ioctl+0x326>
					rcvr_spi();
    59ca:	0e 94 ab 29 	call	0x5356	; 0x5356 <rcvr_spi>
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    59ce:	60 e1       	ldi	r22, 0x10	; 16
    59d0:	70 e0       	ldi	r23, 0x00	; 0
    59d2:	ce 01       	movw	r24, r28
    59d4:	01 96       	adiw	r24, 0x01	; 1
    59d6:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <rcvr_datablock>
    59da:	89 2b       	or	r24, r25
    59dc:	09 f4       	brne	.+2      	; 0x59e0 <disk_ioctl+0x17c>
    59de:	d7 c0       	rjmp	.+430    	; 0x5b8e <disk_ioctl+0x32a>
    59e0:	0f 2e       	mov	r0, r31
    59e2:	f0 e3       	ldi	r31, 0x30	; 48
    59e4:	ff 2e       	mov	r15, r31
    59e6:	f0 2d       	mov	r31, r0
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
    59e8:	0e 94 ab 29 	call	0x5356	; 0x5356 <rcvr_spi>
    59ec:	fa 94       	dec	r15
    59ee:	f1 10       	cpse	r15, r1
    59f0:	fb cf       	rjmp	.-10     	; 0x59e8 <disk_ioctl+0x184>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    59f2:	2b 85       	ldd	r18, Y+11	; 0x0b
    59f4:	22 95       	swap	r18
    59f6:	2f 70       	andi	r18, 0x0F	; 15
    59f8:	80 e1       	ldi	r24, 0x10	; 16
    59fa:	90 e0       	ldi	r25, 0x00	; 0
    59fc:	a0 e0       	ldi	r26, 0x00	; 0
    59fe:	b0 e0       	ldi	r27, 0x00	; 0
    5a00:	04 c0       	rjmp	.+8      	; 0x5a0a <disk_ioctl+0x1a6>
    5a02:	88 0f       	add	r24, r24
    5a04:	99 1f       	adc	r25, r25
    5a06:	aa 1f       	adc	r26, r26
    5a08:	bb 1f       	adc	r27, r27
    5a0a:	2a 95       	dec	r18
    5a0c:	d2 f7       	brpl	.-12     	; 0x5a02 <disk_ioctl+0x19e>
    5a0e:	f8 01       	movw	r30, r16
    5a10:	80 83       	st	Z, r24
    5a12:	91 83       	std	Z+1, r25	; 0x01
    5a14:	a2 83       	std	Z+2, r26	; 0x02
    5a16:	b3 83       	std	Z+3, r27	; 0x03
						res = RES_OK;
    5a18:	10 e0       	ldi	r17, 0x00	; 0
    5a1a:	c6 c0       	rjmp	.+396    	; 0x5ba8 <disk_ioctl+0x344>
					}
				}
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    5a1c:	40 e0       	ldi	r20, 0x00	; 0
    5a1e:	50 e0       	ldi	r21, 0x00	; 0
    5a20:	ba 01       	movw	r22, r20
    5a22:	89 e0       	ldi	r24, 0x09	; 9
    5a24:	0e 94 57 2a 	call	0x54ae	; 0x54ae <send_cmd>
    5a28:	81 11       	cpse	r24, r1
    5a2a:	b3 c0       	rjmp	.+358    	; 0x5b92 <disk_ioctl+0x32e>
    5a2c:	60 e1       	ldi	r22, 0x10	; 16
    5a2e:	70 e0       	ldi	r23, 0x00	; 0
    5a30:	ce 01       	movw	r24, r28
    5a32:	01 96       	adiw	r24, 0x01	; 1
    5a34:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <rcvr_datablock>
    5a38:	89 2b       	or	r24, r25
    5a3a:	09 f4       	brne	.+2      	; 0x5a3e <disk_ioctl+0x1da>
    5a3c:	ac c0       	rjmp	.+344    	; 0x5b96 <disk_ioctl+0x332>
					if (CardType & CT_SD1) {	/* SDv1 */
    5a3e:	f1 fe       	sbrs	r15, 1
    5a40:	20 c0       	rjmp	.+64     	; 0x5a82 <disk_ioctl+0x21e>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    5a42:	2b 85       	ldd	r18, Y+11	; 0x0b
    5a44:	2f 73       	andi	r18, 0x3F	; 63
    5a46:	8c 85       	ldd	r24, Y+12	; 0x0c
    5a48:	88 1f       	adc	r24, r24
    5a4a:	88 27       	eor	r24, r24
    5a4c:	88 1f       	adc	r24, r24
    5a4e:	90 e0       	ldi	r25, 0x00	; 0
    5a50:	01 96       	adiw	r24, 0x01	; 1
    5a52:	82 0f       	add	r24, r18
    5a54:	91 1d       	adc	r25, r1
    5a56:	82 0f       	add	r24, r18
    5a58:	91 1d       	adc	r25, r1
    5a5a:	2e 85       	ldd	r18, Y+14	; 0x0e
    5a5c:	22 95       	swap	r18
    5a5e:	26 95       	lsr	r18
    5a60:	26 95       	lsr	r18
    5a62:	23 70       	andi	r18, 0x03	; 3
    5a64:	21 50       	subi	r18, 0x01	; 1
    5a66:	02 c0       	rjmp	.+4      	; 0x5a6c <disk_ioctl+0x208>
    5a68:	88 0f       	add	r24, r24
    5a6a:	99 1f       	adc	r25, r25
    5a6c:	2a 95       	dec	r18
    5a6e:	e2 f7       	brpl	.-8      	; 0x5a68 <disk_ioctl+0x204>
    5a70:	a0 e0       	ldi	r26, 0x00	; 0
    5a72:	b0 e0       	ldi	r27, 0x00	; 0
    5a74:	f8 01       	movw	r30, r16
    5a76:	80 83       	st	Z, r24
    5a78:	91 83       	std	Z+1, r25	; 0x01
    5a7a:	a2 83       	std	Z+2, r26	; 0x02
    5a7c:	b3 83       	std	Z+3, r27	; 0x03
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
					}
					res = RES_OK;
    5a7e:	10 e0       	ldi	r17, 0x00	; 0
    5a80:	93 c0       	rjmp	.+294    	; 0x5ba8 <disk_ioctl+0x344>
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
					if (CardType & CT_SD1) {	/* SDv1 */
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    5a82:	8c 85       	ldd	r24, Y+12	; 0x0c
    5a84:	28 2f       	mov	r18, r24
    5a86:	23 70       	andi	r18, 0x03	; 3
    5a88:	82 95       	swap	r24
    5a8a:	86 95       	lsr	r24
    5a8c:	87 70       	andi	r24, 0x07	; 7
    5a8e:	90 e0       	ldi	r25, 0x00	; 0
    5a90:	f8 e0       	ldi	r31, 0x08	; 8
    5a92:	2f 9f       	mul	r18, r31
    5a94:	80 0d       	add	r24, r0
    5a96:	91 1d       	adc	r25, r1
    5a98:	11 24       	eor	r1, r1
    5a9a:	01 96       	adiw	r24, 0x01	; 1
    5a9c:	2b 85       	ldd	r18, Y+11	; 0x0b
    5a9e:	2c 77       	andi	r18, 0x7C	; 124
    5aa0:	30 e0       	ldi	r19, 0x00	; 0
    5aa2:	35 95       	asr	r19
    5aa4:	27 95       	ror	r18
    5aa6:	35 95       	asr	r19
    5aa8:	27 95       	ror	r18
    5aaa:	2f 5f       	subi	r18, 0xFF	; 255
    5aac:	3f 4f       	sbci	r19, 0xFF	; 255
    5aae:	82 9f       	mul	r24, r18
    5ab0:	a0 01       	movw	r20, r0
    5ab2:	83 9f       	mul	r24, r19
    5ab4:	50 0d       	add	r21, r0
    5ab6:	92 9f       	mul	r25, r18
    5ab8:	50 0d       	add	r21, r0
    5aba:	11 24       	eor	r1, r1
    5abc:	ca 01       	movw	r24, r20
    5abe:	a0 e0       	ldi	r26, 0x00	; 0
    5ac0:	b0 e0       	ldi	r27, 0x00	; 0
    5ac2:	f8 01       	movw	r30, r16
    5ac4:	80 83       	st	Z, r24
    5ac6:	91 83       	std	Z+1, r25	; 0x01
    5ac8:	a2 83       	std	Z+2, r26	; 0x02
    5aca:	b3 83       	std	Z+3, r27	; 0x03
					}
					res = RES_OK;
    5acc:	10 e0       	ldi	r17, 0x00	; 0
    5ace:	6c c0       	rjmp	.+216    	; 0x5ba8 <disk_ioctl+0x344>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    5ad0:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <CardType>
    5ad4:	fa 01       	movw	r30, r20
    5ad6:	80 83       	st	Z, r24
			res = RES_OK;
    5ad8:	10 e0       	ldi	r17, 0x00	; 0
			break;
    5ada:	66 c0       	rjmp	.+204    	; 0x5ba8 <disk_ioctl+0x344>

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    5adc:	40 e0       	ldi	r20, 0x00	; 0
    5ade:	50 e0       	ldi	r21, 0x00	; 0
    5ae0:	ba 01       	movw	r22, r20
    5ae2:	89 e0       	ldi	r24, 0x09	; 9
    5ae4:	0e 94 57 2a 	call	0x54ae	; 0x54ae <send_cmd>
    5ae8:	81 11       	cpse	r24, r1
    5aea:	57 c0       	rjmp	.+174    	; 0x5b9a <disk_ioctl+0x336>
				&& rcvr_datablock(ptr, 16))
    5aec:	60 e1       	ldi	r22, 0x10	; 16
    5aee:	70 e0       	ldi	r23, 0x00	; 0
    5af0:	c8 01       	movw	r24, r16
    5af2:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <rcvr_datablock>

		switch (ctrl) {
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
				deselect();
				res = RES_OK;
    5af6:	11 e0       	ldi	r17, 0x01	; 1
    5af8:	89 2b       	or	r24, r25
    5afa:	09 f4       	brne	.+2      	; 0x5afe <disk_ioctl+0x29a>
    5afc:	55 c0       	rjmp	.+170    	; 0x5ba8 <disk_ioctl+0x344>
    5afe:	10 e0       	ldi	r17, 0x00	; 0
    5b00:	53 c0       	rjmp	.+166    	; 0x5ba8 <disk_ioctl+0x344>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    5b02:	40 e0       	ldi	r20, 0x00	; 0
    5b04:	50 e0       	ldi	r21, 0x00	; 0
    5b06:	ba 01       	movw	r22, r20
    5b08:	8a e0       	ldi	r24, 0x0A	; 10
    5b0a:	0e 94 57 2a 	call	0x54ae	; 0x54ae <send_cmd>
    5b0e:	81 11       	cpse	r24, r1
    5b10:	46 c0       	rjmp	.+140    	; 0x5b9e <disk_ioctl+0x33a>
				&& rcvr_datablock(ptr, 16))
    5b12:	60 e1       	ldi	r22, 0x10	; 16
    5b14:	70 e0       	ldi	r23, 0x00	; 0
    5b16:	c8 01       	movw	r24, r16
    5b18:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <rcvr_datablock>

		switch (ctrl) {
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
				deselect();
				res = RES_OK;
    5b1c:	11 e0       	ldi	r17, 0x01	; 1
    5b1e:	89 2b       	or	r24, r25
    5b20:	09 f4       	brne	.+2      	; 0x5b24 <disk_ioctl+0x2c0>
    5b22:	42 c0       	rjmp	.+132    	; 0x5ba8 <disk_ioctl+0x344>
    5b24:	10 e0       	ldi	r17, 0x00	; 0
    5b26:	40 c0       	rjmp	.+128    	; 0x5ba8 <disk_ioctl+0x344>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    5b28:	40 e0       	ldi	r20, 0x00	; 0
    5b2a:	50 e0       	ldi	r21, 0x00	; 0
    5b2c:	ba 01       	movw	r22, r20
    5b2e:	8a e3       	ldi	r24, 0x3A	; 58
    5b30:	0e 94 57 2a 	call	0x54ae	; 0x54ae <send_cmd>
    5b34:	81 11       	cpse	r24, r1
    5b36:	35 c0       	rjmp	.+106    	; 0x5ba2 <disk_ioctl+0x33e>
    5b38:	78 01       	movw	r14, r16
    5b3a:	0c 5f       	subi	r16, 0xFC	; 252
    5b3c:	1f 4f       	sbci	r17, 0xFF	; 255
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    5b3e:	0e 94 ab 29 	call	0x5356	; 0x5356 <rcvr_spi>
    5b42:	f7 01       	movw	r30, r14
    5b44:	81 93       	st	Z+, r24
    5b46:	7f 01       	movw	r14, r30
    5b48:	0e 17       	cp	r16, r30
    5b4a:	1f 07       	cpc	r17, r31
    5b4c:	c1 f7       	brne	.-16     	; 0x5b3e <disk_ioctl+0x2da>
				res = RES_OK;
    5b4e:	10 e0       	ldi	r17, 0x00	; 0
    5b50:	2b c0       	rjmp	.+86     	; 0x5ba8 <disk_ioctl+0x344>
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    5b52:	40 e0       	ldi	r20, 0x00	; 0
    5b54:	50 e0       	ldi	r21, 0x00	; 0
    5b56:	ba 01       	movw	r22, r20
    5b58:	8d e8       	ldi	r24, 0x8D	; 141
    5b5a:	0e 94 57 2a 	call	0x54ae	; 0x54ae <send_cmd>
    5b5e:	81 11       	cpse	r24, r1
    5b60:	22 c0       	rjmp	.+68     	; 0x5ba6 <disk_ioctl+0x342>
				rcvr_spi();
    5b62:	0e 94 ab 29 	call	0x5356	; 0x5356 <rcvr_spi>
				if (rcvr_datablock(ptr, 64))
    5b66:	60 e4       	ldi	r22, 0x40	; 64
    5b68:	70 e0       	ldi	r23, 0x00	; 0
    5b6a:	c8 01       	movw	r24, r16
    5b6c:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <rcvr_datablock>

		switch (ctrl) {
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
				deselect();
				res = RES_OK;
    5b70:	11 e0       	ldi	r17, 0x01	; 1
    5b72:	89 2b       	or	r24, r25
    5b74:	c9 f0       	breq	.+50     	; 0x5ba8 <disk_ioctl+0x344>
    5b76:	10 e0       	ldi	r17, 0x00	; 0
    5b78:	17 c0       	rjmp	.+46     	; 0x5ba8 <disk_ioctl+0x344>
					res = RES_OK;
			}
			break;

		default:
			res = RES_PARERR;
    5b7a:	14 e0       	ldi	r17, 0x04	; 4
    5b7c:	15 c0       	rjmp	.+42     	; 0x5ba8 <disk_ioctl+0x344>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
    5b7e:	11 e0       	ldi	r17, 0x01	; 1
    5b80:	13 c0       	rjmp	.+38     	; 0x5ba8 <disk_ioctl+0x344>
    5b82:	11 e0       	ldi	r17, 0x01	; 1
    5b84:	11 c0       	rjmp	.+34     	; 0x5ba8 <disk_ioctl+0x344>
    5b86:	11 e0       	ldi	r17, 0x01	; 1
    5b88:	0f c0       	rjmp	.+30     	; 0x5ba8 <disk_ioctl+0x344>
    5b8a:	11 e0       	ldi	r17, 0x01	; 1
    5b8c:	0d c0       	rjmp	.+26     	; 0x5ba8 <disk_ioctl+0x344>
    5b8e:	11 e0       	ldi	r17, 0x01	; 1
    5b90:	0b c0       	rjmp	.+22     	; 0x5ba8 <disk_ioctl+0x344>
    5b92:	11 e0       	ldi	r17, 0x01	; 1
    5b94:	09 c0       	rjmp	.+18     	; 0x5ba8 <disk_ioctl+0x344>
    5b96:	11 e0       	ldi	r17, 0x01	; 1
    5b98:	07 c0       	rjmp	.+14     	; 0x5ba8 <disk_ioctl+0x344>
    5b9a:	11 e0       	ldi	r17, 0x01	; 1
    5b9c:	05 c0       	rjmp	.+10     	; 0x5ba8 <disk_ioctl+0x344>
    5b9e:	11 e0       	ldi	r17, 0x01	; 1
    5ba0:	03 c0       	rjmp	.+6      	; 0x5ba8 <disk_ioctl+0x344>
    5ba2:	11 e0       	ldi	r17, 0x01	; 1
    5ba4:	01 c0       	rjmp	.+2      	; 0x5ba8 <disk_ioctl+0x344>
    5ba6:	11 e0       	ldi	r17, 0x01	; 1

		default:
			res = RES_PARERR;
		}

		deselect();
    5ba8:	0e 94 c4 29 	call	0x5388	; 0x5388 <deselect>
    5bac:	81 2f       	mov	r24, r17
    5bae:	05 c0       	rjmp	.+10     	; 0x5bba <disk_ioctl+0x356>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
    5bb0:	84 e0       	ldi	r24, 0x04	; 4
    5bb2:	03 c0       	rjmp	.+6      	; 0x5bba <disk_ioctl+0x356>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
			res = RES_OK;
			break;
		default :
			res = RES_PARERR;
    5bb4:	84 e0       	ldi	r24, 0x04	; 4
    5bb6:	01 c0       	rjmp	.+2      	; 0x5bba <disk_ioctl+0x356>
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    5bb8:	83 e0       	ldi	r24, 0x03	; 3

		deselect();
	}

	return res;
}
    5bba:	60 96       	adiw	r28, 0x10	; 16
    5bbc:	0f b6       	in	r0, 0x3f	; 63
    5bbe:	f8 94       	cli
    5bc0:	de bf       	out	0x3e, r29	; 62
    5bc2:	0f be       	out	0x3f, r0	; 63
    5bc4:	cd bf       	out	0x3d, r28	; 61
    5bc6:	df 91       	pop	r29
    5bc8:	cf 91       	pop	r28
    5bca:	1f 91       	pop	r17
    5bcc:	0f 91       	pop	r16
    5bce:	ff 90       	pop	r15
    5bd0:	ef 90       	pop	r14
    5bd2:	08 95       	ret

00005bd4 <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;						/* 100Hz decrement timer */
    5bd4:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Timer1>
	if (n) Timer1 = --n;
    5bd8:	88 23       	and	r24, r24
    5bda:	19 f0       	breq	.+6      	; 0x5be2 <disk_timerproc+0xe>
    5bdc:	81 50       	subi	r24, 0x01	; 1
    5bde:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <Timer1>
	n = Timer2;
    5be2:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <Timer2>
	if (n) Timer2 = --n;
    5be6:	88 23       	and	r24, r24
    5be8:	19 f0       	breq	.+6      	; 0x5bf0 <disk_timerproc+0x1c>
    5bea:	81 50       	subi	r24, 0x01	; 1
    5bec:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <Timer2>

	s = Stat;
    5bf0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
	//else					/* Write enabled */
		s &= ~STA_PROTECT;
	//if ( (SOCKINS & SOCKPORT))			/* Card inserted */
	//	s |= (STA_NODISK | STA_NOINIT);
	//else					/* Socket empty */ 
		s &= ~STA_NODISK;
    5bf4:	89 7f       	andi	r24, 0xF9	; 249
	Stat = s;
    5bf6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Stat>
    5bfa:	08 95       	ret

00005bfc <spiInit>:
    cbi(DDRB, 4);   // set MISO as input
    sbi(DDRB, 3);   // set MOSI as output
    sbi(DDRB, 2);   // SS must be output for Master mode to work
#else
	// setup SPI I/O pins
	sbi(PORTB, SCK);	// set SCK hi
    5bfc:	c7 9a       	sbi	0x18, 7	; 24
	sbi(PORTB,MISO);	// set pull-up for MISO
    5bfe:	c6 9a       	sbi	0x18, 6	; 24
	sbi(DDRB, SCK);	// set SCK as output
    5c00:	bf 9a       	sbi	0x17, 7	; 23
	cbi(DDRB, MISO);	// set MISO as input
    5c02:	be 98       	cbi	0x17, 6	; 23
	sbi(DDRB, MOSI);	// set MOSI as output
    5c04:	bd 9a       	sbi	0x17, 5	; 23
	sbi(DDRB, CS);	// SS must be output for Master mode to work
    5c06:	bc 9a       	sbi	0x17, 4	; 23
#endif
	
	// setup SPI interface :
	// master mode
	sbi(SPCR, MSTR);
    5c08:	6c 9a       	sbi	0x0d, 4	; 13
	// clock = f/4
//	cbi(SPCR, SPR0);
//	cbi(SPCR, SPR1);
	// clock = f/16
	sbi(SPCR, SPR0);
    5c0a:	68 9a       	sbi	0x0d, 0	; 13
	sbi(SPCR, SPR1);
    5c0c:	69 9a       	sbi	0x0d, 1	; 13
	// select clock phase positive-going in middle of data
	cbi(SPCR, CPOL);
    5c0e:	6b 98       	cbi	0x0d, 3	; 13
	// Data order MSB first
	cbi(SPCR,DORD);
    5c10:	6d 98       	cbi	0x0d, 5	; 13
	// enable SPI
	sbi(SPCR, SPE);
    5c12:	6e 9a       	sbi	0x0d, 6	; 13
	//outp((1<<MSTR)|(1<<SPE)|(1<<SPR0), SPCR );
	//outp((1<<CPHA)|(1<<CPOL)|(1<<MSTR)|(1<<SPE)|(1<<SPR0)|(1<<SPR1), SPCR );
	//outp((1<<CPHA)|(1<<MSTR)|(1<<SPE)|(1<<SPR0), SPCR );
	
	// clear status
	inb(SPSR);
    5c14:	8e b1       	in	r24, 0x0e	; 14
	spiTransferComplete = TRUE;
    5c16:	81 e0       	ldi	r24, 0x01	; 1
    5c18:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <spiTransferComplete>
    5c1c:	08 95       	ret

00005c1e <spiSendByte>:
}
*/
void spiSendByte(u08 data)
{
	// send a byte over SPI and ignore reply
	outb(SPDR, data);
    5c1e:	8f b9       	out	0x0f, r24	; 15
	#ifdef SPI_USEINT
		while(!spiTransferComplete);
		spiTransferComplete = FALSE;
	#else
		while(!(inb(SPSR) & (1<<SPIF)));
    5c20:	77 9b       	sbis	0x0e, 7	; 14
    5c22:	fe cf       	rjmp	.-4      	; 0x5c20 <spiSendByte+0x2>
	#endif

	
}
    5c24:	08 95       	ret

00005c26 <spiTransferByte>:
	outb(SPDR, data);
	// wait for transfer to complete
	while(!spiTransferComplete);
	#else
	// send the given data
	outb(SPDR, data);
    5c26:	8f b9       	out	0x0f, r24	; 15
	// wait for transfer to complete
	while(!(inb(SPSR) & (1<<SPIF)));
    5c28:	77 9b       	sbis	0x0e, 7	; 14
    5c2a:	fe cf       	rjmp	.-4      	; 0x5c28 <spiTransferByte+0x2>
	#endif
	// return the received data
	return inb(SPDR);
    5c2c:	8f b1       	in	r24, 0x0f	; 15
}
    5c2e:	08 95       	ret

00005c30 <SRAM_resetReader>:
		//while(!SPI_Rx_Buf_Full);
		*ReadData++ = ReadSPI();
	}
	SRAMDisable(currentSRAM);
	return ReadCnt;			//Return no# of bytes read from SRAM
}
    5c30:	e6 eb       	ldi	r30, 0xB6	; 182
    5c32:	f1 e0       	ldi	r31, 0x01	; 1
    5c34:	10 82       	st	Z, r1
    5c36:	11 82       	std	Z+1, r1	; 0x01
    5c38:	12 82       	std	Z+2, r1	; 0x02
    5c3a:	13 82       	std	Z+3, r1	; 0x03
    5c3c:	14 82       	std	Z+4, r1	; 0x04
    5c3e:	15 82       	std	Z+5, r1	; 0x05
    5c40:	16 82       	std	Z+6, r1	; 0x06
    5c42:	17 82       	std	Z+7, r1	; 0x07
    5c44:	10 86       	std	Z+8, r1	; 0x08
    5c46:	11 86       	std	Z+9, r1	; 0x09
    5c48:	12 86       	std	Z+10, r1	; 0x0a
    5c4a:	13 86       	std	Z+11, r1	; 0x0b
    5c4c:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <currentSRAM>
    5c50:	08 95       	ret

00005c52 <SRAM_resetWriter>:
    5c52:	e9 ea       	ldi	r30, 0xA9	; 169
    5c54:	f1 e0       	ldi	r31, 0x01	; 1
    5c56:	10 82       	st	Z, r1
    5c58:	11 82       	std	Z+1, r1	; 0x01
    5c5a:	12 82       	std	Z+2, r1	; 0x02
    5c5c:	13 82       	std	Z+3, r1	; 0x03
    5c5e:	14 82       	std	Z+4, r1	; 0x04
    5c60:	15 82       	std	Z+5, r1	; 0x05
    5c62:	16 82       	std	Z+6, r1	; 0x06
    5c64:	17 82       	std	Z+7, r1	; 0x07
    5c66:	10 86       	std	Z+8, r1	; 0x08
    5c68:	11 86       	std	Z+9, r1	; 0x09
    5c6a:	12 86       	std	Z+10, r1	; 0x0a
    5c6c:	13 86       	std	Z+11, r1	; 0x0b
    5c6e:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <currentSRAM>
    5c72:	08 95       	ret

00005c74 <incrementReader>:
    5c74:	09 2e       	mov	r0, r25
    5c76:	00 0c       	add	r0, r0
    5c78:	aa 0b       	sbc	r26, r26
    5c7a:	bb 0b       	sbc	r27, r27
    5c7c:	40 91 be 01 	lds	r20, 0x01BE	; 0x8001be <currentReader+0x8>
    5c80:	50 91 bf 01 	lds	r21, 0x01BF	; 0x8001bf <currentReader+0x9>
    5c84:	60 91 c0 01 	lds	r22, 0x01C0	; 0x8001c0 <currentReader+0xa>
    5c88:	70 91 c1 01 	lds	r23, 0x01C1	; 0x8001c1 <currentReader+0xb>
    5c8c:	84 0f       	add	r24, r20
    5c8e:	95 1f       	adc	r25, r21
    5c90:	a6 1f       	adc	r26, r22
    5c92:	b7 1f       	adc	r27, r23
    5c94:	00 97       	sbiw	r24, 0x00	; 0
    5c96:	28 e0       	ldi	r18, 0x08	; 8
    5c98:	a2 07       	cpc	r26, r18
    5c9a:	b1 05       	cpc	r27, r1
    5c9c:	48 f4       	brcc	.+18     	; 0x5cb0 <incrementReader+0x3c>
    5c9e:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <currentReader+0x8>
    5ca2:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <currentReader+0x9>
    5ca6:	a0 93 c0 01 	sts	0x01C0, r26	; 0x8001c0 <currentReader+0xa>
    5caa:	b0 93 c1 01 	sts	0x01C1, r27	; 0x8001c1 <currentReader+0xb>
    5cae:	0a c0       	rjmp	.+20     	; 0x5cc4 <incrementReader+0x50>
    5cb0:	a7 70       	andi	r26, 0x07	; 7
    5cb2:	bb 27       	eor	r27, r27
    5cb4:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <currentReader+0x8>
    5cb8:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <currentReader+0x9>
    5cbc:	a0 93 c0 01 	sts	0x01C0, r26	; 0x8001c0 <currentReader+0xa>
    5cc0:	b0 93 c1 01 	sts	0x01C1, r27	; 0x8001c1 <currentReader+0xb>
    5cc4:	e6 eb       	ldi	r30, 0xB6	; 182
    5cc6:	f1 e0       	ldi	r31, 0x01	; 1
    5cc8:	80 85       	ldd	r24, Z+8	; 0x08
    5cca:	91 85       	ldd	r25, Z+9	; 0x09
    5ccc:	a2 85       	ldd	r26, Z+10	; 0x0a
    5cce:	b3 85       	ldd	r27, Z+11	; 0x0b
    5cd0:	ac 01       	movw	r20, r24
    5cd2:	bd 01       	movw	r22, r26
    5cd4:	61 70       	andi	r22, 0x01	; 1
    5cd6:	77 27       	eor	r23, r23
    5cd8:	40 83       	st	Z, r20
    5cda:	51 83       	std	Z+1, r21	; 0x01
    5cdc:	62 83       	std	Z+2, r22	; 0x02
    5cde:	73 83       	std	Z+3, r23	; 0x03
    5ce0:	ac 01       	movw	r20, r24
    5ce2:	bd 01       	movw	r22, r26
    5ce4:	68 94       	set
    5ce6:	14 f8       	bld	r1, 4
    5ce8:	76 95       	lsr	r23
    5cea:	67 95       	ror	r22
    5cec:	57 95       	ror	r21
    5cee:	47 95       	ror	r20
    5cf0:	16 94       	lsr	r1
    5cf2:	d1 f7       	brne	.-12     	; 0x5ce8 <incrementReader+0x74>
    5cf4:	5f 70       	andi	r21, 0x0F	; 15
    5cf6:	66 27       	eor	r22, r22
    5cf8:	77 27       	eor	r23, r23
    5cfa:	44 83       	std	Z+4, r20	; 0x04
    5cfc:	55 83       	std	Z+5, r21	; 0x05
    5cfe:	66 83       	std	Z+6, r22	; 0x06
    5d00:	77 83       	std	Z+7, r23	; 0x07
    5d02:	07 2e       	mov	r0, r23
    5d04:	71 e1       	ldi	r23, 0x11	; 17
    5d06:	b6 95       	lsr	r27
    5d08:	a7 95       	ror	r26
    5d0a:	97 95       	ror	r25
    5d0c:	87 95       	ror	r24
    5d0e:	7a 95       	dec	r23
    5d10:	d1 f7       	brne	.-12     	; 0x5d06 <incrementReader+0x92>
    5d12:	70 2d       	mov	r23, r0
    5d14:	84 87       	std	Z+12, r24	; 0x0c
    5d16:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <currentSRAM>
    5d1a:	08 95       	ret

00005d1c <SRAM_seekRead>:
    5d1c:	cf 93       	push	r28
    5d1e:	df 93       	push	r29
    5d20:	ec 01       	movw	r28, r24
    5d22:	61 30       	cpi	r22, 0x01	; 1
    5d24:	71 05       	cpc	r23, r1
    5d26:	71 f0       	breq	.+28     	; 0x5d44 <SRAM_seekRead+0x28>
    5d28:	20 f0       	brcs	.+8      	; 0x5d32 <SRAM_seekRead+0x16>
    5d2a:	62 30       	cpi	r22, 0x02	; 2
    5d2c:	71 05       	cpc	r23, r1
    5d2e:	39 f0       	breq	.+14     	; 0x5d3e <SRAM_seekRead+0x22>
    5d30:	11 c0       	rjmp	.+34     	; 0x5d54 <SRAM_seekRead+0x38>
    5d32:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <SRAM_resetReader>
    5d36:	ce 01       	movw	r24, r28
    5d38:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <incrementReader>
    5d3c:	0b c0       	rjmp	.+22     	; 0x5d54 <SRAM_seekRead+0x38>
    5d3e:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <incrementReader>
    5d42:	08 c0       	rjmp	.+16     	; 0x5d54 <SRAM_seekRead+0x38>
    5d44:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <SRAM_resetReader>
    5d48:	88 27       	eor	r24, r24
    5d4a:	99 27       	eor	r25, r25
    5d4c:	8c 1b       	sub	r24, r28
    5d4e:	9d 0b       	sbc	r25, r29
    5d50:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <incrementReader>
    5d54:	df 91       	pop	r29
    5d56:	cf 91       	pop	r28
    5d58:	08 95       	ret

00005d5a <incrementWriter>:
    5d5a:	09 2e       	mov	r0, r25
    5d5c:	00 0c       	add	r0, r0
    5d5e:	aa 0b       	sbc	r26, r26
    5d60:	bb 0b       	sbc	r27, r27
    5d62:	40 91 b1 01 	lds	r20, 0x01B1	; 0x8001b1 <currentWriter+0x8>
    5d66:	50 91 b2 01 	lds	r21, 0x01B2	; 0x8001b2 <currentWriter+0x9>
    5d6a:	60 91 b3 01 	lds	r22, 0x01B3	; 0x8001b3 <currentWriter+0xa>
    5d6e:	70 91 b4 01 	lds	r23, 0x01B4	; 0x8001b4 <currentWriter+0xb>
    5d72:	84 0f       	add	r24, r20
    5d74:	95 1f       	adc	r25, r21
    5d76:	a6 1f       	adc	r26, r22
    5d78:	b7 1f       	adc	r27, r23
    5d7a:	00 97       	sbiw	r24, 0x00	; 0
    5d7c:	28 e0       	ldi	r18, 0x08	; 8
    5d7e:	a2 07       	cpc	r26, r18
    5d80:	b1 05       	cpc	r27, r1
    5d82:	48 f4       	brcc	.+18     	; 0x5d96 <incrementWriter+0x3c>
    5d84:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <currentWriter+0x8>
    5d88:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <currentWriter+0x9>
    5d8c:	a0 93 b3 01 	sts	0x01B3, r26	; 0x8001b3 <currentWriter+0xa>
    5d90:	b0 93 b4 01 	sts	0x01B4, r27	; 0x8001b4 <currentWriter+0xb>
    5d94:	0a c0       	rjmp	.+20     	; 0x5daa <incrementWriter+0x50>
    5d96:	a7 70       	andi	r26, 0x07	; 7
    5d98:	bb 27       	eor	r27, r27
    5d9a:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <currentWriter+0x8>
    5d9e:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <currentWriter+0x9>
    5da2:	a0 93 b3 01 	sts	0x01B3, r26	; 0x8001b3 <currentWriter+0xa>
    5da6:	b0 93 b4 01 	sts	0x01B4, r27	; 0x8001b4 <currentWriter+0xb>
    5daa:	e9 ea       	ldi	r30, 0xA9	; 169
    5dac:	f1 e0       	ldi	r31, 0x01	; 1
    5dae:	80 85       	ldd	r24, Z+8	; 0x08
    5db0:	91 85       	ldd	r25, Z+9	; 0x09
    5db2:	a2 85       	ldd	r26, Z+10	; 0x0a
    5db4:	b3 85       	ldd	r27, Z+11	; 0x0b
    5db6:	ac 01       	movw	r20, r24
    5db8:	bd 01       	movw	r22, r26
    5dba:	61 70       	andi	r22, 0x01	; 1
    5dbc:	77 27       	eor	r23, r23
    5dbe:	40 83       	st	Z, r20
    5dc0:	51 83       	std	Z+1, r21	; 0x01
    5dc2:	62 83       	std	Z+2, r22	; 0x02
    5dc4:	73 83       	std	Z+3, r23	; 0x03
    5dc6:	ac 01       	movw	r20, r24
    5dc8:	bd 01       	movw	r22, r26
    5dca:	68 94       	set
    5dcc:	14 f8       	bld	r1, 4
    5dce:	76 95       	lsr	r23
    5dd0:	67 95       	ror	r22
    5dd2:	57 95       	ror	r21
    5dd4:	47 95       	ror	r20
    5dd6:	16 94       	lsr	r1
    5dd8:	d1 f7       	brne	.-12     	; 0x5dce <incrementWriter+0x74>
    5dda:	5f 70       	andi	r21, 0x0F	; 15
    5ddc:	66 27       	eor	r22, r22
    5dde:	77 27       	eor	r23, r23
    5de0:	44 83       	std	Z+4, r20	; 0x04
    5de2:	55 83       	std	Z+5, r21	; 0x05
    5de4:	66 83       	std	Z+6, r22	; 0x06
    5de6:	77 83       	std	Z+7, r23	; 0x07
    5de8:	07 2e       	mov	r0, r23
    5dea:	71 e1       	ldi	r23, 0x11	; 17
    5dec:	b6 95       	lsr	r27
    5dee:	a7 95       	ror	r26
    5df0:	97 95       	ror	r25
    5df2:	87 95       	ror	r24
    5df4:	7a 95       	dec	r23
    5df6:	d1 f7       	brne	.-12     	; 0x5dec <incrementWriter+0x92>
    5df8:	70 2d       	mov	r23, r0
    5dfa:	84 87       	std	Z+12, r24	; 0x0c
    5dfc:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <currentSRAM>
    5e00:	08 95       	ret

00005e02 <SRAM_seekWrite>:
    5e02:	cf 93       	push	r28
    5e04:	df 93       	push	r29
    5e06:	ec 01       	movw	r28, r24
    5e08:	61 30       	cpi	r22, 0x01	; 1
    5e0a:	71 05       	cpc	r23, r1
    5e0c:	71 f0       	breq	.+28     	; 0x5e2a <SRAM_seekWrite+0x28>
    5e0e:	20 f0       	brcs	.+8      	; 0x5e18 <SRAM_seekWrite+0x16>
    5e10:	62 30       	cpi	r22, 0x02	; 2
    5e12:	71 05       	cpc	r23, r1
    5e14:	39 f0       	breq	.+14     	; 0x5e24 <SRAM_seekWrite+0x22>
    5e16:	11 c0       	rjmp	.+34     	; 0x5e3a <SRAM_seekWrite+0x38>
    5e18:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <SRAM_resetWriter>
    5e1c:	ce 01       	movw	r24, r28
    5e1e:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <incrementWriter>
    5e22:	0b c0       	rjmp	.+22     	; 0x5e3a <SRAM_seekWrite+0x38>
    5e24:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <incrementWriter>
    5e28:	08 c0       	rjmp	.+16     	; 0x5e3a <SRAM_seekWrite+0x38>
    5e2a:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <SRAM_resetWriter>
    5e2e:	88 27       	eor	r24, r24
    5e30:	99 27       	eor	r25, r25
    5e32:	8c 1b       	sub	r24, r28
    5e34:	9d 0b       	sbc	r25, r29
    5e36:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <incrementWriter>
    5e3a:	df 91       	pop	r29
    5e3c:	cf 91       	pop	r28
    5e3e:	08 95       	ret

00005e40 <ReadSPI>:
    5e40:	8f ef       	ldi	r24, 0xFF	; 255
    5e42:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <spiTransferByte>
    5e46:	08 95       	ret

00005e48 <SRAMEnable>:
    5e48:	90 e0       	ldi	r25, 0x00	; 0
    5e4a:	fc 01       	movw	r30, r24
    5e4c:	ee 0f       	add	r30, r30
    5e4e:	ff 1f       	adc	r31, r31
    5e50:	e5 59       	subi	r30, 0x95	; 149
    5e52:	ff 4f       	sbci	r31, 0xFF	; 255
    5e54:	01 90       	ld	r0, Z+
    5e56:	f0 81       	ld	r31, Z
    5e58:	e0 2d       	mov	r30, r0
    5e5a:	40 81       	ld	r20, Z
    5e5c:	dc 01       	movw	r26, r24
    5e5e:	a9 59       	subi	r26, 0x99	; 153
    5e60:	bf 4f       	sbci	r27, 0xFF	; 255
    5e62:	21 e0       	ldi	r18, 0x01	; 1
    5e64:	30 e0       	ldi	r19, 0x00	; 0
    5e66:	c9 01       	movw	r24, r18
    5e68:	0c 90       	ld	r0, X
    5e6a:	02 c0       	rjmp	.+4      	; 0x5e70 <SRAMEnable+0x28>
    5e6c:	88 0f       	add	r24, r24
    5e6e:	99 1f       	adc	r25, r25
    5e70:	0a 94       	dec	r0
    5e72:	e2 f7       	brpl	.-8      	; 0x5e6c <SRAMEnable+0x24>
    5e74:	80 95       	com	r24
    5e76:	84 23       	and	r24, r20
    5e78:	80 83       	st	Z, r24
    5e7a:	08 95       	ret

00005e7c <SRAMDisable>:
    5e7c:	90 e0       	ldi	r25, 0x00	; 0
    5e7e:	fc 01       	movw	r30, r24
    5e80:	ee 0f       	add	r30, r30
    5e82:	ff 1f       	adc	r31, r31
    5e84:	e5 59       	subi	r30, 0x95	; 149
    5e86:	ff 4f       	sbci	r31, 0xFF	; 255
    5e88:	01 90       	ld	r0, Z+
    5e8a:	f0 81       	ld	r31, Z
    5e8c:	e0 2d       	mov	r30, r0
    5e8e:	40 81       	ld	r20, Z
    5e90:	dc 01       	movw	r26, r24
    5e92:	a9 59       	subi	r26, 0x99	; 153
    5e94:	bf 4f       	sbci	r27, 0xFF	; 255
    5e96:	21 e0       	ldi	r18, 0x01	; 1
    5e98:	30 e0       	ldi	r19, 0x00	; 0
    5e9a:	c9 01       	movw	r24, r18
    5e9c:	0c 90       	ld	r0, X
    5e9e:	02 c0       	rjmp	.+4      	; 0x5ea4 <SRAMDisable+0x28>
    5ea0:	88 0f       	add	r24, r24
    5ea2:	99 1f       	adc	r25, r25
    5ea4:	0a 94       	dec	r0
    5ea6:	e2 f7       	brpl	.-8      	; 0x5ea0 <SRAMDisable+0x24>
    5ea8:	84 2b       	or	r24, r20
    5eaa:	80 83       	st	Z, r24
    5eac:	08 95       	ret

00005eae <InitSRAM>:
    5eae:	cf 93       	push	r28
    5eb0:	df 93       	push	r29
    5eb2:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <currentSRAM>
    5eb6:	80 e0       	ldi	r24, 0x00	; 0
    5eb8:	c1 e0       	ldi	r28, 0x01	; 1
    5eba:	d0 e0       	ldi	r29, 0x00	; 0
    5ebc:	90 e0       	ldi	r25, 0x00	; 0
    5ebe:	fc 01       	movw	r30, r24
    5ec0:	ee 0f       	add	r30, r30
    5ec2:	ff 1f       	adc	r31, r31
    5ec4:	ed 58       	subi	r30, 0x8D	; 141
    5ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ec8:	01 90       	ld	r0, Z+
    5eca:	f0 81       	ld	r31, Z
    5ecc:	e0 2d       	mov	r30, r0
    5ece:	20 81       	ld	r18, Z
    5ed0:	dc 01       	movw	r26, r24
    5ed2:	a9 59       	subi	r26, 0x99	; 153
    5ed4:	bf 4f       	sbci	r27, 0xFF	; 255
    5ed6:	ce 01       	movw	r24, r28
    5ed8:	0c 90       	ld	r0, X
    5eda:	02 c0       	rjmp	.+4      	; 0x5ee0 <InitSRAM+0x32>
    5edc:	88 0f       	add	r24, r24
    5ede:	99 1f       	adc	r25, r25
    5ee0:	0a 94       	dec	r0
    5ee2:	e2 f7       	brpl	.-8      	; 0x5edc <InitSRAM+0x2e>
    5ee4:	82 2b       	or	r24, r18
    5ee6:	80 83       	st	Z, r24
    5ee8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    5eec:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <SRAMDisable>
    5ef0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    5ef4:	8f 5f       	subi	r24, 0xFF	; 255
    5ef6:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <currentSRAM>
    5efa:	84 30       	cpi	r24, 0x04	; 4
    5efc:	f8 f2       	brcs	.-66     	; 0x5ebc <InitSRAM+0xe>
    5efe:	df 91       	pop	r29
    5f00:	cf 91       	pop	r28
    5f02:	08 95       	ret

00005f04 <SRAMWriteStatusReg>:
    5f04:	cf 93       	push	r28
    5f06:	c8 2f       	mov	r28, r24
    5f08:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    5f0c:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <SRAMEnable>
    5f10:	81 e0       	ldi	r24, 0x01	; 1
    5f12:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <spiSendByte>
    5f16:	8c 2f       	mov	r24, r28
    5f18:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <spiSendByte>
    5f1c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    5f20:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <SRAMDisable>
    5f24:	80 e0       	ldi	r24, 0x00	; 0
    5f26:	cf 91       	pop	r28
    5f28:	08 95       	ret

00005f2a <SRAMCommand>:
    5f2a:	1f 93       	push	r17
    5f2c:	cf 93       	push	r28
    5f2e:	df 93       	push	r29
    5f30:	c8 2f       	mov	r28, r24
    5f32:	d6 2f       	mov	r29, r22
    5f34:	14 2f       	mov	r17, r20
    5f36:	82 2f       	mov	r24, r18
    5f38:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <spiSendByte>
    5f3c:	81 2f       	mov	r24, r17
    5f3e:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <spiSendByte>
    5f42:	8d 2f       	mov	r24, r29
    5f44:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <spiSendByte>
    5f48:	8c 2f       	mov	r24, r28
    5f4a:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <spiSendByte>
    5f4e:	df 91       	pop	r29
    5f50:	cf 91       	pop	r28
    5f52:	1f 91       	pop	r17
    5f54:	08 95       	ret

00005f56 <SRAMWriteSeq>:

uint8_t SRAMWriteSeq(uint8_t AddLB, uint8_t AddMB,uint8_t AddHB, uint8_t *WriteData,uint32_t WriteCnt)
{
    5f56:	9f 92       	push	r9
    5f58:	af 92       	push	r10
    5f5a:	bf 92       	push	r11
    5f5c:	cf 92       	push	r12
    5f5e:	df 92       	push	r13
    5f60:	ef 92       	push	r14
    5f62:	ff 92       	push	r15
    5f64:	0f 93       	push	r16
    5f66:	1f 93       	push	r17
    5f68:	cf 93       	push	r28
    5f6a:	df 93       	push	r29
    5f6c:	c8 2f       	mov	r28, r24
    5f6e:	d6 2f       	mov	r29, r22
    5f70:	b4 2e       	mov	r11, r20
    5f72:	92 2e       	mov	r9, r18
    5f74:	a3 2e       	mov	r10, r19
    5f76:	67 01       	movw	r12, r14
    5f78:	78 01       	movw	r14, r16
	SRAMWriteStatusReg(SRAMSeqMode);
    5f7a:	80 e4       	ldi	r24, 0x40	; 64
    5f7c:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <SRAMWriteStatusReg>
	//Send Write command to SRAM along with address
	SRAMEnable(currentSRAM);
    5f80:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    5f84:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <SRAMEnable>
	SRAMCommand(AddLB,AddMB,AddHB,CMD_SRAMWrite);
    5f88:	22 e0       	ldi	r18, 0x02	; 2
    5f8a:	4b 2d       	mov	r20, r11
    5f8c:	6d 2f       	mov	r22, r29
    5f8e:	8c 2f       	mov	r24, r28
    5f90:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <SRAMCommand>
	//Send Data to be written to SRAM
	for(;WriteCnt > 0;WriteCnt--)
    5f94:	c1 14       	cp	r12, r1
    5f96:	d1 04       	cpc	r13, r1
    5f98:	e1 04       	cpc	r14, r1
    5f9a:	f1 04       	cpc	r15, r1
    5f9c:	59 f0       	breq	.+22     	; 0x5fb4 <SRAMWriteSeq+0x5e>
    5f9e:	c9 2d       	mov	r28, r9
    5fa0:	da 2d       	mov	r29, r10
uint8_t ReadSPI(){
	return (uint8_t)spiTransferByte(DummyByte);
}

void WriteSPI(uint8_t byte){
	spiSendByte(byte);
    5fa2:	89 91       	ld	r24, Y+
    5fa4:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <spiSendByte>
	SRAMWriteStatusReg(SRAMSeqMode);
	//Send Write command to SRAM along with address
	SRAMEnable(currentSRAM);
	SRAMCommand(AddLB,AddMB,AddHB,CMD_SRAMWrite);
	//Send Data to be written to SRAM
	for(;WriteCnt > 0;WriteCnt--)
    5fa8:	81 e0       	ldi	r24, 0x01	; 1
    5faa:	c8 1a       	sub	r12, r24
    5fac:	d1 08       	sbc	r13, r1
    5fae:	e1 08       	sbc	r14, r1
    5fb0:	f1 08       	sbc	r15, r1
    5fb2:	b9 f7       	brne	.-18     	; 0x5fa2 <SRAMWriteSeq+0x4c>
	{
		WriteSPI(*WriteData++);
		//while(!SPI_Rx_Buf_Full);
		//DummyRead =ReadSPI();
	}
	SRAMDisable(currentSRAM);
    5fb4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    5fb8:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <SRAMDisable>
	return 0;			//Return non -ve nuber indicating success
}
    5fbc:	80 e0       	ldi	r24, 0x00	; 0
    5fbe:	df 91       	pop	r29
    5fc0:	cf 91       	pop	r28
    5fc2:	1f 91       	pop	r17
    5fc4:	0f 91       	pop	r16
    5fc6:	ff 90       	pop	r15
    5fc8:	ef 90       	pop	r14
    5fca:	df 90       	pop	r13
    5fcc:	cf 90       	pop	r12
    5fce:	bf 90       	pop	r11
    5fd0:	af 90       	pop	r10
    5fd2:	9f 90       	pop	r9
    5fd4:	08 95       	ret

00005fd6 <writeSRAM>:
	currentWriter.currentPage.value = (currentWriter.totalBytes.value / SRAMPageSize) % SRAMPageCount;
	currentWriter.currentSram = currentWriter.totalBytes.value / SRAMChipSize;
	currentSRAM = currentWriter.currentSram;
}

void writeSRAM(unsigned char *buf,unsigned int size){
    5fd6:	af 92       	push	r10
    5fd8:	bf 92       	push	r11
    5fda:	cf 92       	push	r12
    5fdc:	df 92       	push	r13
    5fde:	ef 92       	push	r14
    5fe0:	ff 92       	push	r15
    5fe2:	0f 93       	push	r16
    5fe4:	1f 93       	push	r17
    5fe6:	cf 93       	push	r28
    5fe8:	df 93       	push	r29
	unsigned int unaligned = currentWriter.currentByte.value % SRAMPageSize; // byte between start and end of page
    5fea:	40 91 a9 01 	lds	r20, 0x01A9	; 0x8001a9 <currentWriter>
    5fee:	50 91 aa 01 	lds	r21, 0x01AA	; 0x8001aa <currentWriter+0x1>
    5ff2:	4f 71       	andi	r20, 0x1F	; 31
    5ff4:	55 27       	eor	r21, r21
	unsigned int remainder = (unaligned > 0?(SRAMPageSize - unaligned):0); // bytes remaining to end of page
    5ff6:	41 15       	cp	r20, r1
    5ff8:	51 05       	cpc	r21, r1
    5ffa:	31 f0       	breq	.+12     	; 0x6008 <writeSRAM+0x32>
    5ffc:	20 e2       	ldi	r18, 0x20	; 32
    5ffe:	30 e0       	ldi	r19, 0x00	; 0
    6000:	59 01       	movw	r10, r18
    6002:	a4 1a       	sub	r10, r20
    6004:	b5 0a       	sbc	r11, r21
    6006:	02 c0       	rjmp	.+4      	; 0x600c <writeSRAM+0x36>
    6008:	a1 2c       	mov	r10, r1
    600a:	b1 2c       	mov	r11, r1
	if(size == 0)
    600c:	61 15       	cp	r22, r1
    600e:	71 05       	cpc	r23, r1
    6010:	09 f4       	brne	.+2      	; 0x6014 <writeSRAM+0x3e>
    6012:	70 c0       	rjmp	.+224    	; 0x60f4 <writeSRAM+0x11e>
    6014:	6b 01       	movw	r12, r22
    6016:	ec 01       	movw	r28, r24
		return;

	if(size >= SRAMPageSize){
    6018:	60 32       	cpi	r22, 0x20	; 32
    601a:	71 05       	cpc	r23, r1
    601c:	90 f1       	brcs	.+100    	; 0x6082 <writeSRAM+0xac>
		if(unaligned == 0){
    601e:	45 2b       	or	r20, r21
    6020:	c9 f4       	brne	.+50     	; 0x6054 <writeSRAM+0x7e>
			// write page only, pass remaining size to next call
			SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,SRAMPageSize);
    6022:	e9 ea       	ldi	r30, 0xA9	; 169
    6024:	f1 e0       	ldi	r31, 0x01	; 1
    6026:	10 e2       	ldi	r17, 0x20	; 32
    6028:	e1 2e       	mov	r14, r17
    602a:	f1 2c       	mov	r15, r1
    602c:	00 e0       	ldi	r16, 0x00	; 0
    602e:	10 e0       	ldi	r17, 0x00	; 0
    6030:	9e 01       	movw	r18, r28
    6032:	42 81       	ldd	r20, Z+2	; 0x02
    6034:	61 81       	ldd	r22, Z+1	; 0x01
    6036:	80 81       	ld	r24, Z
    6038:	0e 94 ab 2f 	call	0x5f56	; 0x5f56 <SRAMWriteSeq>
			incrementWriter(SRAMPageSize);
    603c:	80 e2       	ldi	r24, 0x20	; 32
    603e:	90 e0       	ldi	r25, 0x00	; 0
    6040:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <incrementWriter>
			writeSRAM(buf + SRAMPageSize,size - SRAMPageSize);
    6044:	b6 01       	movw	r22, r12
    6046:	60 52       	subi	r22, 0x20	; 32
    6048:	71 09       	sbc	r23, r1
    604a:	ce 01       	movw	r24, r28
    604c:	80 96       	adiw	r24, 0x20	; 32
    604e:	0e 94 eb 2f 	call	0x5fd6	; 0x5fd6 <writeSRAM>
    6052:	50 c0       	rjmp	.+160    	; 0x60f4 <writeSRAM+0x11e>
		}
		else{
			// write remainder, pass remaining size to next call
			SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,remainder);
    6054:	75 01       	movw	r14, r10
    6056:	00 e0       	ldi	r16, 0x00	; 0
    6058:	10 e0       	ldi	r17, 0x00	; 0
    605a:	e9 ea       	ldi	r30, 0xA9	; 169
    605c:	f1 e0       	ldi	r31, 0x01	; 1
    605e:	9e 01       	movw	r18, r28
    6060:	42 81       	ldd	r20, Z+2	; 0x02
    6062:	61 81       	ldd	r22, Z+1	; 0x01
    6064:	80 81       	ld	r24, Z
    6066:	0e 94 ab 2f 	call	0x5f56	; 0x5f56 <SRAMWriteSeq>
			incrementWriter(remainder);
    606a:	c5 01       	movw	r24, r10
    606c:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <incrementWriter>
			writeSRAM(buf + remainder,size - remainder);
    6070:	b6 01       	movw	r22, r12
    6072:	6a 19       	sub	r22, r10
    6074:	7b 09       	sbc	r23, r11
    6076:	ce 01       	movw	r24, r28
    6078:	8a 0d       	add	r24, r10
    607a:	9b 1d       	adc	r25, r11
    607c:	0e 94 eb 2f 	call	0x5fd6	; 0x5fd6 <writeSRAM>
    6080:	39 c0       	rjmp	.+114    	; 0x60f4 <writeSRAM+0x11e>


	}
	else{

		if(unaligned > 0){
    6082:	45 2b       	or	r20, r21
    6084:	49 f1       	breq	.+82     	; 0x60d8 <writeSRAM+0x102>
			if(size > remainder){
    6086:	a6 16       	cp	r10, r22
    6088:	b7 06       	cpc	r11, r23
    608a:	b8 f4       	brcc	.+46     	; 0x60ba <writeSRAM+0xe4>
				size -= remainder;
    608c:	ca 18       	sub	r12, r10
    608e:	db 08       	sbc	r13, r11
				SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,remainder);
    6090:	75 01       	movw	r14, r10
    6092:	00 e0       	ldi	r16, 0x00	; 0
    6094:	10 e0       	ldi	r17, 0x00	; 0
    6096:	e9 ea       	ldi	r30, 0xA9	; 169
    6098:	f1 e0       	ldi	r31, 0x01	; 1
    609a:	9e 01       	movw	r18, r28
    609c:	42 81       	ldd	r20, Z+2	; 0x02
    609e:	61 81       	ldd	r22, Z+1	; 0x01
    60a0:	80 81       	ld	r24, Z
    60a2:	0e 94 ab 2f 	call	0x5f56	; 0x5f56 <SRAMWriteSeq>
				incrementWriter(remainder);
    60a6:	c5 01       	movw	r24, r10
    60a8:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <incrementWriter>
				writeSRAM(buf + remainder,size);
    60ac:	b6 01       	movw	r22, r12
    60ae:	ce 01       	movw	r24, r28
    60b0:	8a 0d       	add	r24, r10
    60b2:	9b 1d       	adc	r25, r11
    60b4:	0e 94 eb 2f 	call	0x5fd6	; 0x5fd6 <writeSRAM>
    60b8:	1d c0       	rjmp	.+58     	; 0x60f4 <writeSRAM+0x11e>
			}
			else{
				SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,size);
    60ba:	7b 01       	movw	r14, r22
    60bc:	00 e0       	ldi	r16, 0x00	; 0
    60be:	10 e0       	ldi	r17, 0x00	; 0
    60c0:	e9 ea       	ldi	r30, 0xA9	; 169
    60c2:	f1 e0       	ldi	r31, 0x01	; 1
    60c4:	9e 01       	movw	r18, r28
    60c6:	42 81       	ldd	r20, Z+2	; 0x02
    60c8:	61 81       	ldd	r22, Z+1	; 0x01
    60ca:	80 81       	ld	r24, Z
    60cc:	0e 94 ab 2f 	call	0x5f56	; 0x5f56 <SRAMWriteSeq>
				incrementWriter(size);
    60d0:	c6 01       	movw	r24, r12
    60d2:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <incrementWriter>
    60d6:	0e c0       	rjmp	.+28     	; 0x60f4 <writeSRAM+0x11e>
			}

		}
		else{
			SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,size);
    60d8:	7b 01       	movw	r14, r22
    60da:	00 e0       	ldi	r16, 0x00	; 0
    60dc:	10 e0       	ldi	r17, 0x00	; 0
    60de:	e9 ea       	ldi	r30, 0xA9	; 169
    60e0:	f1 e0       	ldi	r31, 0x01	; 1
    60e2:	9e 01       	movw	r18, r28
    60e4:	42 81       	ldd	r20, Z+2	; 0x02
    60e6:	61 81       	ldd	r22, Z+1	; 0x01
    60e8:	80 81       	ld	r24, Z
    60ea:	0e 94 ab 2f 	call	0x5f56	; 0x5f56 <SRAMWriteSeq>
			incrementWriter(size);
    60ee:	c6 01       	movw	r24, r12
    60f0:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <incrementWriter>
		}
	}
}
    60f4:	df 91       	pop	r29
    60f6:	cf 91       	pop	r28
    60f8:	1f 91       	pop	r17
    60fa:	0f 91       	pop	r16
    60fc:	ff 90       	pop	r15
    60fe:	ef 90       	pop	r14
    6100:	df 90       	pop	r13
    6102:	cf 90       	pop	r12
    6104:	bf 90       	pop	r11
    6106:	af 90       	pop	r10
    6108:	08 95       	ret

0000610a <SRAMReadSeq>:
	SRAMDisable(currentSRAM);
	return 0;			//Return non -ve nuber indicating success
}

uint8_t SRAMReadSeq(uint8_t AddLB, uint8_t AddMB,uint8_t AddHB, uint8_t *ReadData,uint32_t ReadCnt)
{
    610a:	9f 92       	push	r9
    610c:	af 92       	push	r10
    610e:	bf 92       	push	r11
    6110:	cf 92       	push	r12
    6112:	df 92       	push	r13
    6114:	ef 92       	push	r14
    6116:	ff 92       	push	r15
    6118:	0f 93       	push	r16
    611a:	1f 93       	push	r17
    611c:	cf 93       	push	r28
    611e:	df 93       	push	r29
    6120:	c8 2f       	mov	r28, r24
    6122:	d6 2f       	mov	r29, r22
    6124:	b4 2e       	mov	r11, r20
    6126:	92 2e       	mov	r9, r18
    6128:	a3 2e       	mov	r10, r19
    612a:	67 01       	movw	r12, r14
    612c:	78 01       	movw	r14, r16
	SRAMWriteStatusReg(SRAMSeqMode);
    612e:	80 e4       	ldi	r24, 0x40	; 64
    6130:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <SRAMWriteStatusReg>
	//Send Read command to SRAM along with address
	SRAMEnable(currentSRAM);
    6134:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    6138:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <SRAMEnable>
	SRAMCommand(AddLB,AddMB,AddHB,CMD_SRAMRead);
    613c:	23 e0       	ldi	r18, 0x03	; 3
    613e:	4b 2d       	mov	r20, r11
    6140:	6d 2f       	mov	r22, r29
    6142:	8c 2f       	mov	r24, r28
    6144:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <SRAMCommand>
	//Send dummy data so SRAM can put desired Data read from SRAM
	for(; ReadCnt > 0; ReadCnt--)
    6148:	c1 14       	cp	r12, r1
    614a:	d1 04       	cpc	r13, r1
    614c:	e1 04       	cpc	r14, r1
    614e:	f1 04       	cpc	r15, r1
    6150:	59 f0       	breq	.+22     	; 0x6168 <SRAMReadSeq+0x5e>
    6152:	c9 2d       	mov	r28, r9
    6154:	da 2d       	mov	r29, r10
	{
		//while(!SPI_Rx_Buf_Full);
		*ReadData++ = ReadSPI();
    6156:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <ReadSPI>
    615a:	89 93       	st	Y+, r24
	SRAMWriteStatusReg(SRAMSeqMode);
	//Send Read command to SRAM along with address
	SRAMEnable(currentSRAM);
	SRAMCommand(AddLB,AddMB,AddHB,CMD_SRAMRead);
	//Send dummy data so SRAM can put desired Data read from SRAM
	for(; ReadCnt > 0; ReadCnt--)
    615c:	81 e0       	ldi	r24, 0x01	; 1
    615e:	c8 1a       	sub	r12, r24
    6160:	d1 08       	sbc	r13, r1
    6162:	e1 08       	sbc	r14, r1
    6164:	f1 08       	sbc	r15, r1
    6166:	b9 f7       	brne	.-18     	; 0x6156 <SRAMReadSeq+0x4c>
	{
		//while(!SPI_Rx_Buf_Full);
		*ReadData++ = ReadSPI();
	}
	SRAMDisable(currentSRAM);
    6168:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <currentSRAM>
    616c:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <SRAMDisable>
	return 0;			//Return non -ve nuber indicating success
}
    6170:	80 e0       	ldi	r24, 0x00	; 0
    6172:	df 91       	pop	r29
    6174:	cf 91       	pop	r28
    6176:	1f 91       	pop	r17
    6178:	0f 91       	pop	r16
    617a:	ff 90       	pop	r15
    617c:	ef 90       	pop	r14
    617e:	df 90       	pop	r13
    6180:	cf 90       	pop	r12
    6182:	bf 90       	pop	r11
    6184:	af 90       	pop	r10
    6186:	9f 90       	pop	r9
    6188:	08 95       	ret

0000618a <readSRAM>:
		}
	}
}


void readSRAM(unsigned char *buf,unsigned int size){
    618a:	af 92       	push	r10
    618c:	bf 92       	push	r11
    618e:	cf 92       	push	r12
    6190:	df 92       	push	r13
    6192:	ef 92       	push	r14
    6194:	ff 92       	push	r15
    6196:	0f 93       	push	r16
    6198:	1f 93       	push	r17
    619a:	cf 93       	push	r28
    619c:	df 93       	push	r29
	unsigned int unaligned = currentReader.currentByte.value % SRAMPageSize; // byte between start and end of page
    619e:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <currentReader>
    61a2:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <currentReader+0x1>
    61a6:	4f 71       	andi	r20, 0x1F	; 31
    61a8:	55 27       	eor	r21, r21
	unsigned int remainder = (unaligned > 0?(SRAMPageSize - unaligned):0); // bytes remaining to end of page
    61aa:	41 15       	cp	r20, r1
    61ac:	51 05       	cpc	r21, r1
    61ae:	31 f0       	breq	.+12     	; 0x61bc <readSRAM+0x32>
    61b0:	20 e2       	ldi	r18, 0x20	; 32
    61b2:	30 e0       	ldi	r19, 0x00	; 0
    61b4:	59 01       	movw	r10, r18
    61b6:	a4 1a       	sub	r10, r20
    61b8:	b5 0a       	sbc	r11, r21
    61ba:	02 c0       	rjmp	.+4      	; 0x61c0 <readSRAM+0x36>
    61bc:	a1 2c       	mov	r10, r1
    61be:	b1 2c       	mov	r11, r1

	if(size == 0)
    61c0:	61 15       	cp	r22, r1
    61c2:	71 05       	cpc	r23, r1
    61c4:	09 f4       	brne	.+2      	; 0x61c8 <readSRAM+0x3e>
    61c6:	70 c0       	rjmp	.+224    	; 0x62a8 <readSRAM+0x11e>
    61c8:	6b 01       	movw	r12, r22
    61ca:	ec 01       	movw	r28, r24
		return;

	if(size >= SRAMPageSize){
    61cc:	60 32       	cpi	r22, 0x20	; 32
    61ce:	71 05       	cpc	r23, r1
    61d0:	90 f1       	brcs	.+100    	; 0x6236 <readSRAM+0xac>
		if(unaligned == 0){
    61d2:	45 2b       	or	r20, r21
    61d4:	c9 f4       	brne	.+50     	; 0x6208 <readSRAM+0x7e>
			// read page only, pass remaining size to next call
			SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,SRAMPageSize);
    61d6:	e6 eb       	ldi	r30, 0xB6	; 182
    61d8:	f1 e0       	ldi	r31, 0x01	; 1
    61da:	10 e2       	ldi	r17, 0x20	; 32
    61dc:	e1 2e       	mov	r14, r17
    61de:	f1 2c       	mov	r15, r1
    61e0:	00 e0       	ldi	r16, 0x00	; 0
    61e2:	10 e0       	ldi	r17, 0x00	; 0
    61e4:	9e 01       	movw	r18, r28
    61e6:	42 81       	ldd	r20, Z+2	; 0x02
    61e8:	61 81       	ldd	r22, Z+1	; 0x01
    61ea:	80 81       	ld	r24, Z
    61ec:	0e 94 85 30 	call	0x610a	; 0x610a <SRAMReadSeq>
			incrementReader(SRAMPageSize);
    61f0:	80 e2       	ldi	r24, 0x20	; 32
    61f2:	90 e0       	ldi	r25, 0x00	; 0
    61f4:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <incrementReader>
			readSRAM(buf + SRAMPageSize,size - SRAMPageSize);
    61f8:	b6 01       	movw	r22, r12
    61fa:	60 52       	subi	r22, 0x20	; 32
    61fc:	71 09       	sbc	r23, r1
    61fe:	ce 01       	movw	r24, r28
    6200:	80 96       	adiw	r24, 0x20	; 32
    6202:	0e 94 c5 30 	call	0x618a	; 0x618a <readSRAM>
    6206:	50 c0       	rjmp	.+160    	; 0x62a8 <readSRAM+0x11e>
		}
		else{
			// read remainder, pass remaining size to next call
			SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,remainder);
    6208:	75 01       	movw	r14, r10
    620a:	00 e0       	ldi	r16, 0x00	; 0
    620c:	10 e0       	ldi	r17, 0x00	; 0
    620e:	e6 eb       	ldi	r30, 0xB6	; 182
    6210:	f1 e0       	ldi	r31, 0x01	; 1
    6212:	9e 01       	movw	r18, r28
    6214:	42 81       	ldd	r20, Z+2	; 0x02
    6216:	61 81       	ldd	r22, Z+1	; 0x01
    6218:	80 81       	ld	r24, Z
    621a:	0e 94 85 30 	call	0x610a	; 0x610a <SRAMReadSeq>
			incrementReader(remainder);
    621e:	c5 01       	movw	r24, r10
    6220:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <incrementReader>
			readSRAM(buf + remainder,size - remainder);
    6224:	b6 01       	movw	r22, r12
    6226:	6a 19       	sub	r22, r10
    6228:	7b 09       	sbc	r23, r11
    622a:	ce 01       	movw	r24, r28
    622c:	8a 0d       	add	r24, r10
    622e:	9b 1d       	adc	r25, r11
    6230:	0e 94 c5 30 	call	0x618a	; 0x618a <readSRAM>
    6234:	39 c0       	rjmp	.+114    	; 0x62a8 <readSRAM+0x11e>


	}
	else{

		if(unaligned > 0){
    6236:	45 2b       	or	r20, r21
    6238:	49 f1       	breq	.+82     	; 0x628c <readSRAM+0x102>
			if(size > remainder){
    623a:	a6 16       	cp	r10, r22
    623c:	b7 06       	cpc	r11, r23
    623e:	b8 f4       	brcc	.+46     	; 0x626e <readSRAM+0xe4>
				size -= remainder;
    6240:	ca 18       	sub	r12, r10
    6242:	db 08       	sbc	r13, r11
				SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,remainder);
    6244:	75 01       	movw	r14, r10
    6246:	00 e0       	ldi	r16, 0x00	; 0
    6248:	10 e0       	ldi	r17, 0x00	; 0
    624a:	e6 eb       	ldi	r30, 0xB6	; 182
    624c:	f1 e0       	ldi	r31, 0x01	; 1
    624e:	9e 01       	movw	r18, r28
    6250:	42 81       	ldd	r20, Z+2	; 0x02
    6252:	61 81       	ldd	r22, Z+1	; 0x01
    6254:	80 81       	ld	r24, Z
    6256:	0e 94 85 30 	call	0x610a	; 0x610a <SRAMReadSeq>
				incrementReader(remainder);
    625a:	c5 01       	movw	r24, r10
    625c:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <incrementReader>
				readSRAM(buf + remainder,size);
    6260:	b6 01       	movw	r22, r12
    6262:	ce 01       	movw	r24, r28
    6264:	8a 0d       	add	r24, r10
    6266:	9b 1d       	adc	r25, r11
    6268:	0e 94 c5 30 	call	0x618a	; 0x618a <readSRAM>
    626c:	1d c0       	rjmp	.+58     	; 0x62a8 <readSRAM+0x11e>
			}
			else{
				SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,size);
    626e:	7b 01       	movw	r14, r22
    6270:	00 e0       	ldi	r16, 0x00	; 0
    6272:	10 e0       	ldi	r17, 0x00	; 0
    6274:	e6 eb       	ldi	r30, 0xB6	; 182
    6276:	f1 e0       	ldi	r31, 0x01	; 1
    6278:	9e 01       	movw	r18, r28
    627a:	42 81       	ldd	r20, Z+2	; 0x02
    627c:	61 81       	ldd	r22, Z+1	; 0x01
    627e:	80 81       	ld	r24, Z
    6280:	0e 94 85 30 	call	0x610a	; 0x610a <SRAMReadSeq>
				incrementReader(size);
    6284:	c6 01       	movw	r24, r12
    6286:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <incrementReader>
    628a:	0e c0       	rjmp	.+28     	; 0x62a8 <readSRAM+0x11e>
			}

		}
		else{
			SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,size);
    628c:	7b 01       	movw	r14, r22
    628e:	00 e0       	ldi	r16, 0x00	; 0
    6290:	10 e0       	ldi	r17, 0x00	; 0
    6292:	e6 eb       	ldi	r30, 0xB6	; 182
    6294:	f1 e0       	ldi	r31, 0x01	; 1
    6296:	9e 01       	movw	r18, r28
    6298:	42 81       	ldd	r20, Z+2	; 0x02
    629a:	61 81       	ldd	r22, Z+1	; 0x01
    629c:	80 81       	ld	r24, Z
    629e:	0e 94 85 30 	call	0x610a	; 0x610a <SRAMReadSeq>
			incrementReader(size);
    62a2:	c6 01       	movw	r24, r12
    62a4:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <incrementReader>
		}
	}


}
    62a8:	df 91       	pop	r29
    62aa:	cf 91       	pop	r28
    62ac:	1f 91       	pop	r17
    62ae:	0f 91       	pop	r16
    62b0:	ff 90       	pop	r15
    62b2:	ef 90       	pop	r14
    62b4:	df 90       	pop	r13
    62b6:	cf 90       	pop	r12
    62b8:	bf 90       	pop	r11
    62ba:	af 90       	pop	r10
    62bc:	08 95       	ret

000062be <delay_us>:
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1BH);		// set the high 8bits of OCR1B
	//outp( (pwmDuty&0x00FF), OCR1BL);	// set the low 8bits of OCR1B
	OCR1B = pwmDuty;
    62be:	9c 01       	movw	r18, r24
    62c0:	2d 5f       	subi	r18, 0xFD	; 253
    62c2:	3f 4f       	sbci	r19, 0xFF	; 255
    62c4:	ad ec       	ldi	r26, 0xCD	; 205
    62c6:	bc ec       	ldi	r27, 0xCC	; 204
    62c8:	0e 94 3e 36 	call	0x6c7c	; 0x6c7c <__umulhisi3>
    62cc:	96 95       	lsr	r25
    62ce:	87 95       	ror	r24
    62d0:	96 95       	lsr	r25
    62d2:	87 95       	ror	r24
    62d4:	82 95       	swap	r24
    62d6:	92 95       	swap	r25
    62d8:	90 7f       	andi	r25, 0xF0	; 240
    62da:	98 27       	eor	r25, r24
    62dc:	80 7f       	andi	r24, 0xF0	; 240
    62de:	98 27       	eor	r25, r24
    62e0:	00 97       	sbiw	r24, 0x00	; 0
    62e2:	39 f0       	breq	.+14     	; 0x62f2 <delay_us+0x34>
    62e4:	20 e0       	ldi	r18, 0x00	; 0
    62e6:	30 e0       	ldi	r19, 0x00	; 0
    62e8:	2f 5f       	subi	r18, 0xFF	; 255
    62ea:	3f 4f       	sbci	r19, 0xFF	; 255
    62ec:	82 17       	cp	r24, r18
    62ee:	93 07       	cpc	r25, r19
    62f0:	d9 f7       	brne	.-10     	; 0x62e8 <delay_us+0x2a>
    62f2:	08 95       	ret

000062f4 <timerAttach>:
    62f4:	88 30       	cpi	r24, 0x08	; 8
    62f6:	40 f4       	brcc	.+16     	; 0x6308 <timerAttach+0x14>
    62f8:	e8 2f       	mov	r30, r24
    62fa:	f0 e0       	ldi	r31, 0x00	; 0
    62fc:	ee 0f       	add	r30, r30
    62fe:	ff 1f       	adc	r31, r31
    6300:	ec 53       	subi	r30, 0x3C	; 60
    6302:	fe 4f       	sbci	r31, 0xFE	; 254
    6304:	71 83       	std	Z+1, r23	; 0x01
    6306:	60 83       	st	Z, r22
    6308:	08 95       	ret

0000630a <__vector_11>:
}

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect)
{
    630a:	1f 92       	push	r1
    630c:	0f 92       	push	r0
    630e:	0f b6       	in	r0, 0x3f	; 63
    6310:	0f 92       	push	r0
    6312:	11 24       	eor	r1, r1
    6314:	2f 93       	push	r18
    6316:	3f 93       	push	r19
    6318:	4f 93       	push	r20
    631a:	5f 93       	push	r21
    631c:	6f 93       	push	r22
    631e:	7f 93       	push	r23
    6320:	8f 93       	push	r24
    6322:	9f 93       	push	r25
    6324:	af 93       	push	r26
    6326:	bf 93       	push	r27
    6328:	ef 93       	push	r30
    632a:	ff 93       	push	r31
	Timer0Reg0++;			// increment low-order counter
    632c:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <Timer0Reg0>
    6330:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <Timer0Reg0+0x1>
    6334:	a0 91 9c 04 	lds	r26, 0x049C	; 0x80049c <Timer0Reg0+0x2>
    6338:	b0 91 9d 04 	lds	r27, 0x049D	; 0x80049d <Timer0Reg0+0x3>
    633c:	01 96       	adiw	r24, 0x01	; 1
    633e:	a1 1d       	adc	r26, r1
    6340:	b1 1d       	adc	r27, r1
    6342:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <Timer0Reg0>
    6346:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <Timer0Reg0+0x1>
    634a:	a0 93 9c 04 	sts	0x049C, r26	; 0x80049c <Timer0Reg0+0x2>
    634e:	b0 93 9d 04 	sts	0x049D, r27	; 0x80049d <Timer0Reg0+0x3>

	// increment pause counter
	TimerPauseReg++;
    6352:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <TimerPauseReg>
    6356:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <TimerPauseReg+0x1>
    635a:	a0 91 a0 04 	lds	r26, 0x04A0	; 0x8004a0 <TimerPauseReg+0x2>
    635e:	b0 91 a1 04 	lds	r27, 0x04A1	; 0x8004a1 <TimerPauseReg+0x3>
    6362:	01 96       	adiw	r24, 0x01	; 1
    6364:	a1 1d       	adc	r26, r1
    6366:	b1 1d       	adc	r27, r1
    6368:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <TimerPauseReg>
    636c:	90 93 9f 04 	sts	0x049F, r25	; 0x80049f <TimerPauseReg+0x1>
    6370:	a0 93 a0 04 	sts	0x04A0, r26	; 0x8004a0 <TimerPauseReg+0x2>
    6374:	b0 93 a1 04 	sts	0x04A1, r27	; 0x8004a1 <TimerPauseReg+0x3>

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
    6378:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <TimerIntFunc>
    637c:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <TimerIntFunc+0x1>
    6380:	89 2b       	or	r24, r25
    6382:	29 f0       	breq	.+10     	; 0x638e <__vector_11+0x84>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
    6384:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <TimerIntFunc>
    6388:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <TimerIntFunc+0x1>
    638c:	09 95       	icall
}
    638e:	ff 91       	pop	r31
    6390:	ef 91       	pop	r30
    6392:	bf 91       	pop	r27
    6394:	af 91       	pop	r26
    6396:	9f 91       	pop	r25
    6398:	8f 91       	pop	r24
    639a:	7f 91       	pop	r23
    639c:	6f 91       	pop	r22
    639e:	5f 91       	pop	r21
    63a0:	4f 91       	pop	r20
    63a2:	3f 91       	pop	r19
    63a4:	2f 91       	pop	r18
    63a6:	0f 90       	pop	r0
    63a8:	0f be       	out	0x3f, r0	; 63
    63aa:	0f 90       	pop	r0
    63ac:	1f 90       	pop	r1
    63ae:	18 95       	reti

000063b0 <__vector_9>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect)
{
    63b0:	1f 92       	push	r1
    63b2:	0f 92       	push	r0
    63b4:	0f b6       	in	r0, 0x3f	; 63
    63b6:	0f 92       	push	r0
    63b8:	11 24       	eor	r1, r1
    63ba:	2f 93       	push	r18
    63bc:	3f 93       	push	r19
    63be:	4f 93       	push	r20
    63c0:	5f 93       	push	r21
    63c2:	6f 93       	push	r22
    63c4:	7f 93       	push	r23
    63c6:	8f 93       	push	r24
    63c8:	9f 93       	push	r25
    63ca:	af 93       	push	r26
    63cc:	bf 93       	push	r27
    63ce:	ef 93       	push	r30
    63d0:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
    63d2:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <TimerIntFunc+0x2>
    63d6:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <TimerIntFunc+0x3>
    63da:	89 2b       	or	r24, r25
    63dc:	29 f0       	breq	.+10     	; 0x63e8 <__vector_9+0x38>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
    63de:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <TimerIntFunc+0x2>
    63e2:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <TimerIntFunc+0x3>
    63e6:	09 95       	icall
}
    63e8:	ff 91       	pop	r31
    63ea:	ef 91       	pop	r30
    63ec:	bf 91       	pop	r27
    63ee:	af 91       	pop	r26
    63f0:	9f 91       	pop	r25
    63f2:	8f 91       	pop	r24
    63f4:	7f 91       	pop	r23
    63f6:	6f 91       	pop	r22
    63f8:	5f 91       	pop	r21
    63fa:	4f 91       	pop	r20
    63fc:	3f 91       	pop	r19
    63fe:	2f 91       	pop	r18
    6400:	0f 90       	pop	r0
    6402:	0f be       	out	0x3f, r0	; 63
    6404:	0f 90       	pop	r0
    6406:	1f 90       	pop	r1
    6408:	18 95       	reti

0000640a <__vector_5>:

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_OVF_vect)
{
    640a:	1f 92       	push	r1
    640c:	0f 92       	push	r0
    640e:	0f b6       	in	r0, 0x3f	; 63
    6410:	0f 92       	push	r0
    6412:	11 24       	eor	r1, r1
    6414:	2f 93       	push	r18
    6416:	3f 93       	push	r19
    6418:	4f 93       	push	r20
    641a:	5f 93       	push	r21
    641c:	6f 93       	push	r22
    641e:	7f 93       	push	r23
    6420:	8f 93       	push	r24
    6422:	9f 93       	push	r25
    6424:	af 93       	push	r26
    6426:	bf 93       	push	r27
    6428:	ef 93       	push	r30
    642a:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
    642c:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <Timer2Reg0>
    6430:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <Timer2Reg0+0x1>
    6434:	a0 91 a4 04 	lds	r26, 0x04A4	; 0x8004a4 <Timer2Reg0+0x2>
    6438:	b0 91 a5 04 	lds	r27, 0x04A5	; 0x8004a5 <Timer2Reg0+0x3>
    643c:	01 96       	adiw	r24, 0x01	; 1
    643e:	a1 1d       	adc	r26, r1
    6440:	b1 1d       	adc	r27, r1
    6442:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <Timer2Reg0>
    6446:	90 93 a3 04 	sts	0x04A3, r25	; 0x8004a3 <Timer2Reg0+0x1>
    644a:	a0 93 a4 04 	sts	0x04A4, r26	; 0x8004a4 <Timer2Reg0+0x2>
    644e:	b0 93 a5 04 	sts	0x04A5, r27	; 0x8004a5 <Timer2Reg0+0x3>

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
    6452:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <TimerIntFunc+0xa>
    6456:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <TimerIntFunc+0xb>
    645a:	89 2b       	or	r24, r25
    645c:	29 f0       	breq	.+10     	; 0x6468 <__vector_5+0x5e>
		TimerIntFunc[TIMER2OVERFLOW_INT]();
    645e:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <TimerIntFunc+0xa>
    6462:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <TimerIntFunc+0xb>
    6466:	09 95       	icall
}
    6468:	ff 91       	pop	r31
    646a:	ef 91       	pop	r30
    646c:	bf 91       	pop	r27
    646e:	af 91       	pop	r26
    6470:	9f 91       	pop	r25
    6472:	8f 91       	pop	r24
    6474:	7f 91       	pop	r23
    6476:	6f 91       	pop	r22
    6478:	5f 91       	pop	r21
    647a:	4f 91       	pop	r20
    647c:	3f 91       	pop	r19
    647e:	2f 91       	pop	r18
    6480:	0f 90       	pop	r0
    6482:	0f be       	out	0x3f, r0	; 63
    6484:	0f 90       	pop	r0
    6486:	1f 90       	pop	r1
    6488:	18 95       	reti

0000648a <__vector_10>:

#ifdef OCR0
// include support for Output Compare 0 for new AVR processors that support it
//! Interrupt handler for OutputCompare0 match (OC0) interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_COMP_vect)
{
    648a:	1f 92       	push	r1
    648c:	0f 92       	push	r0
    648e:	0f b6       	in	r0, 0x3f	; 63
    6490:	0f 92       	push	r0
    6492:	11 24       	eor	r1, r1
    6494:	2f 93       	push	r18
    6496:	3f 93       	push	r19
    6498:	4f 93       	push	r20
    649a:	5f 93       	push	r21
    649c:	6f 93       	push	r22
    649e:	7f 93       	push	r23
    64a0:	8f 93       	push	r24
    64a2:	9f 93       	push	r25
    64a4:	af 93       	push	r26
    64a6:	bf 93       	push	r27
    64a8:	ef 93       	push	r30
    64aa:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER0OUTCOMPARE_INT])
    64ac:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <TimerIntFunc+0xe>
    64b0:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <TimerIntFunc+0xf>
    64b4:	89 2b       	or	r24, r25
    64b6:	29 f0       	breq	.+10     	; 0x64c2 <__vector_10+0x38>
		TimerIntFunc[TIMER0OUTCOMPARE_INT]();
    64b8:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <TimerIntFunc+0xe>
    64bc:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <TimerIntFunc+0xf>
    64c0:	09 95       	icall
}
    64c2:	ff 91       	pop	r31
    64c4:	ef 91       	pop	r30
    64c6:	bf 91       	pop	r27
    64c8:	af 91       	pop	r26
    64ca:	9f 91       	pop	r25
    64cc:	8f 91       	pop	r24
    64ce:	7f 91       	pop	r23
    64d0:	6f 91       	pop	r22
    64d2:	5f 91       	pop	r21
    64d4:	4f 91       	pop	r20
    64d6:	3f 91       	pop	r19
    64d8:	2f 91       	pop	r18
    64da:	0f 90       	pop	r0
    64dc:	0f be       	out	0x3f, r0	; 63
    64de:	0f 90       	pop	r0
    64e0:	1f 90       	pop	r1
    64e2:	18 95       	reti

000064e4 <__vector_7>:
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect)
{
    64e4:	1f 92       	push	r1
    64e6:	0f 92       	push	r0
    64e8:	0f b6       	in	r0, 0x3f	; 63
    64ea:	0f 92       	push	r0
    64ec:	11 24       	eor	r1, r1
    64ee:	2f 93       	push	r18
    64f0:	3f 93       	push	r19
    64f2:	4f 93       	push	r20
    64f4:	5f 93       	push	r21
    64f6:	6f 93       	push	r22
    64f8:	7f 93       	push	r23
    64fa:	8f 93       	push	r24
    64fc:	9f 93       	push	r25
    64fe:	af 93       	push	r26
    6500:	bf 93       	push	r27
    6502:	ef 93       	push	r30
    6504:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
    6506:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <TimerIntFunc+0x4>
    650a:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <TimerIntFunc+0x5>
    650e:	89 2b       	or	r24, r25
    6510:	29 f0       	breq	.+10     	; 0x651c <__vector_7+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
    6512:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <TimerIntFunc+0x4>
    6516:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <TimerIntFunc+0x5>
    651a:	09 95       	icall
}
    651c:	ff 91       	pop	r31
    651e:	ef 91       	pop	r30
    6520:	bf 91       	pop	r27
    6522:	af 91       	pop	r26
    6524:	9f 91       	pop	r25
    6526:	8f 91       	pop	r24
    6528:	7f 91       	pop	r23
    652a:	6f 91       	pop	r22
    652c:	5f 91       	pop	r21
    652e:	4f 91       	pop	r20
    6530:	3f 91       	pop	r19
    6532:	2f 91       	pop	r18
    6534:	0f 90       	pop	r0
    6536:	0f be       	out	0x3f, r0	; 63
    6538:	0f 90       	pop	r0
    653a:	1f 90       	pop	r1
    653c:	18 95       	reti

0000653e <__vector_8>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect)
{
    653e:	1f 92       	push	r1
    6540:	0f 92       	push	r0
    6542:	0f b6       	in	r0, 0x3f	; 63
    6544:	0f 92       	push	r0
    6546:	11 24       	eor	r1, r1
    6548:	2f 93       	push	r18
    654a:	3f 93       	push	r19
    654c:	4f 93       	push	r20
    654e:	5f 93       	push	r21
    6550:	6f 93       	push	r22
    6552:	7f 93       	push	r23
    6554:	8f 93       	push	r24
    6556:	9f 93       	push	r25
    6558:	af 93       	push	r26
    655a:	bf 93       	push	r27
    655c:	ef 93       	push	r30
    655e:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
    6560:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <TimerIntFunc+0x6>
    6564:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <TimerIntFunc+0x7>
    6568:	89 2b       	or	r24, r25
    656a:	29 f0       	breq	.+10     	; 0x6576 <__vector_8+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
    656c:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <TimerIntFunc+0x6>
    6570:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <TimerIntFunc+0x7>
    6574:	09 95       	icall
}
    6576:	ff 91       	pop	r31
    6578:	ef 91       	pop	r30
    657a:	bf 91       	pop	r27
    657c:	af 91       	pop	r26
    657e:	9f 91       	pop	r25
    6580:	8f 91       	pop	r24
    6582:	7f 91       	pop	r23
    6584:	6f 91       	pop	r22
    6586:	5f 91       	pop	r21
    6588:	4f 91       	pop	r20
    658a:	3f 91       	pop	r19
    658c:	2f 91       	pop	r18
    658e:	0f 90       	pop	r0
    6590:	0f be       	out	0x3f, r0	; 63
    6592:	0f 90       	pop	r0
    6594:	1f 90       	pop	r1
    6596:	18 95       	reti

00006598 <__vector_6>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect)
{
    6598:	1f 92       	push	r1
    659a:	0f 92       	push	r0
    659c:	0f b6       	in	r0, 0x3f	; 63
    659e:	0f 92       	push	r0
    65a0:	11 24       	eor	r1, r1
    65a2:	2f 93       	push	r18
    65a4:	3f 93       	push	r19
    65a6:	4f 93       	push	r20
    65a8:	5f 93       	push	r21
    65aa:	6f 93       	push	r22
    65ac:	7f 93       	push	r23
    65ae:	8f 93       	push	r24
    65b0:	9f 93       	push	r25
    65b2:	af 93       	push	r26
    65b4:	bf 93       	push	r27
    65b6:	ef 93       	push	r30
    65b8:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
    65ba:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <TimerIntFunc+0x8>
    65be:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <TimerIntFunc+0x9>
    65c2:	89 2b       	or	r24, r25
    65c4:	29 f0       	breq	.+10     	; 0x65d0 <__vector_6+0x38>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
    65c6:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <TimerIntFunc+0x8>
    65ca:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <TimerIntFunc+0x9>
    65ce:	09 95       	icall
}
    65d0:	ff 91       	pop	r31
    65d2:	ef 91       	pop	r30
    65d4:	bf 91       	pop	r27
    65d6:	af 91       	pop	r26
    65d8:	9f 91       	pop	r25
    65da:	8f 91       	pop	r24
    65dc:	7f 91       	pop	r23
    65de:	6f 91       	pop	r22
    65e0:	5f 91       	pop	r21
    65e2:	4f 91       	pop	r20
    65e4:	3f 91       	pop	r19
    65e6:	2f 91       	pop	r18
    65e8:	0f 90       	pop	r0
    65ea:	0f be       	out	0x3f, r0	; 63
    65ec:	0f 90       	pop	r0
    65ee:	1f 90       	pop	r1
    65f0:	18 95       	reti

000065f2 <__vector_4>:

//! Interrupt handler for OutputCompare2 match (OC2) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMP_vect)
{
    65f2:	1f 92       	push	r1
    65f4:	0f 92       	push	r0
    65f6:	0f b6       	in	r0, 0x3f	; 63
    65f8:	0f 92       	push	r0
    65fa:	11 24       	eor	r1, r1
    65fc:	2f 93       	push	r18
    65fe:	3f 93       	push	r19
    6600:	4f 93       	push	r20
    6602:	5f 93       	push	r21
    6604:	6f 93       	push	r22
    6606:	7f 93       	push	r23
    6608:	8f 93       	push	r24
    660a:	9f 93       	push	r25
    660c:	af 93       	push	r26
    660e:	bf 93       	push	r27
    6610:	ef 93       	push	r30
    6612:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
    6614:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <TimerIntFunc+0xc>
    6618:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <TimerIntFunc+0xd>
    661c:	89 2b       	or	r24, r25
    661e:	29 f0       	breq	.+10     	; 0x662a <__vector_4+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
    6620:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <TimerIntFunc+0xc>
    6624:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <TimerIntFunc+0xd>
    6628:	09 95       	icall
}
    662a:	ff 91       	pop	r31
    662c:	ef 91       	pop	r30
    662e:	bf 91       	pop	r27
    6630:	af 91       	pop	r26
    6632:	9f 91       	pop	r25
    6634:	8f 91       	pop	r24
    6636:	7f 91       	pop	r23
    6638:	6f 91       	pop	r22
    663a:	5f 91       	pop	r21
    663c:	4f 91       	pop	r20
    663e:	3f 91       	pop	r19
    6640:	2f 91       	pop	r18
    6642:	0f 90       	pop	r0
    6644:	0f be       	out	0x3f, r0	; 63
    6646:	0f 90       	pop	r0
    6648:	1f 90       	pop	r1
    664a:	18 95       	reti

0000664c <uartInitBuffers>:
	else
	{
		// return failure
		return FALSE;
	}
}
    664c:	40 e4       	ldi	r20, 0x40	; 64
    664e:	50 e0       	ldi	r21, 0x00	; 0
    6650:	66 e1       	ldi	r22, 0x16	; 22
    6652:	72 e0       	ldi	r23, 0x02	; 2
    6654:	87 ea       	ldi	r24, 0xA7	; 167
    6656:	94 e0       	ldi	r25, 0x04	; 4
    6658:	0e 94 71 01 	call	0x2e2	; 0x2e2 <bufferInit>
    665c:	40 e4       	ldi	r20, 0x40	; 64
    665e:	50 e0       	ldi	r21, 0x00	; 0
    6660:	66 ed       	ldi	r22, 0xD6	; 214
    6662:	71 e0       	ldi	r23, 0x01	; 1
    6664:	81 eb       	ldi	r24, 0xB1	; 177
    6666:	94 e0       	ldi	r25, 0x04	; 4
    6668:	0e 94 71 01 	call	0x2e2	; 0x2e2 <bufferInit>
    666c:	08 95       	ret

0000666e <uartInit>:
    666e:	0e 94 26 33 	call	0x664c	; 0x664c <uartInitBuffers>
    6672:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <UartRxFunc+0x1>
    6676:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <UartRxFunc>
    667a:	88 ed       	ldi	r24, 0xD8	; 216
    667c:	8a b9       	out	0x0a, r24	; 10
    667e:	86 e8       	ldi	r24, 0x86	; 134
    6680:	80 bd       	out	0x20, r24	; 32
    6682:	87 e6       	ldi	r24, 0x67	; 103
    6684:	89 b9       	out	0x09, r24	; 9
    6686:	10 bc       	out	0x20, r1	; 32
    6688:	81 e0       	ldi	r24, 0x01	; 1
    668a:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <uartReadyTx>
    668e:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <uartBufferedTx>
    6692:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <uartRxOverflow+0x1>
    6696:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <uartRxOverflow>
    669a:	78 94       	sei
    669c:	08 95       	ret

0000669e <uartSetRxHandler>:
    669e:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <UartRxFunc+0x1>
    66a2:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <UartRxFunc>
    66a6:	08 95       	ret

000066a8 <uartSetBaudRate>:
    66a8:	0f 93       	push	r16
    66aa:	1f 93       	push	r17
    66ac:	8b 01       	movw	r16, r22
    66ae:	9c 01       	movw	r18, r24
    66b0:	dc 01       	movw	r26, r24
    66b2:	cb 01       	movw	r24, r22
    66b4:	80 58       	subi	r24, 0x80	; 128
    66b6:	9b 47       	sbci	r25, 0x7B	; 123
    66b8:	a1 4e       	sbci	r26, 0xE1	; 225
    66ba:	bf 4f       	sbci	r27, 0xFF	; 255
    66bc:	88 0f       	add	r24, r24
    66be:	99 1f       	adc	r25, r25
    66c0:	aa 1f       	adc	r26, r26
    66c2:	bb 1f       	adc	r27, r27
    66c4:	88 0f       	add	r24, r24
    66c6:	99 1f       	adc	r25, r25
    66c8:	aa 1f       	adc	r26, r26
    66ca:	bb 1f       	adc	r27, r27
    66cc:	bc 01       	movw	r22, r24
    66ce:	cd 01       	movw	r24, r26
    66d0:	66 0f       	add	r22, r22
    66d2:	77 1f       	adc	r23, r23
    66d4:	88 1f       	adc	r24, r24
    66d6:	99 1f       	adc	r25, r25
    66d8:	00 0f       	add	r16, r16
    66da:	11 1f       	adc	r17, r17
    66dc:	22 1f       	adc	r18, r18
    66de:	33 1f       	adc	r19, r19
    66e0:	00 0f       	add	r16, r16
    66e2:	11 1f       	adc	r17, r17
    66e4:	22 1f       	adc	r18, r18
    66e6:	33 1f       	adc	r19, r19
    66e8:	a9 01       	movw	r20, r18
    66ea:	98 01       	movw	r18, r16
    66ec:	22 0f       	add	r18, r18
    66ee:	33 1f       	adc	r19, r19
    66f0:	44 1f       	adc	r20, r20
    66f2:	55 1f       	adc	r21, r21
    66f4:	22 0f       	add	r18, r18
    66f6:	33 1f       	adc	r19, r19
    66f8:	44 1f       	adc	r20, r20
    66fa:	55 1f       	adc	r21, r21
    66fc:	0e 94 f7 35 	call	0x6bee	; 0x6bee <__udivmodsi4>
    6700:	21 50       	subi	r18, 0x01	; 1
    6702:	31 09       	sbc	r19, r1
    6704:	29 b9       	out	0x09, r18	; 9
    6706:	30 bd       	out	0x20, r19	; 32
    6708:	1f 91       	pop	r17
    670a:	0f 91       	pop	r16
    670c:	08 95       	ret

0000670e <uartSendByte>:
    670e:	90 91 a6 04 	lds	r25, 0x04A6	; 0x8004a6 <uartReadyTx>
    6712:	99 23       	and	r25, r25
    6714:	e1 f3       	breq	.-8      	; 0x670e <uartSendByte>
    6716:	8c b9       	out	0x0c, r24	; 12
    6718:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <uartReadyTx>
    671c:	08 95       	ret

0000671e <uartReceiveByte>:
    671e:	cf 93       	push	r28
    6720:	df 93       	push	r29
    6722:	20 91 a9 04 	lds	r18, 0x04A9	; 0x8004a9 <uartRxBuffer+0x2>
    6726:	30 91 aa 04 	lds	r19, 0x04AA	; 0x8004aa <uartRxBuffer+0x3>
    672a:	23 2b       	or	r18, r19
    672c:	71 f0       	breq	.+28     	; 0x674a <uartReceiveByte+0x2c>
    672e:	20 91 ab 04 	lds	r18, 0x04AB	; 0x8004ab <uartRxBuffer+0x4>
    6732:	30 91 ac 04 	lds	r19, 0x04AC	; 0x8004ac <uartRxBuffer+0x5>
    6736:	23 2b       	or	r18, r19
    6738:	51 f0       	breq	.+20     	; 0x674e <uartReceiveByte+0x30>
    673a:	ec 01       	movw	r28, r24
    673c:	87 ea       	ldi	r24, 0xA7	; 167
    673e:	94 e0       	ldi	r25, 0x04	; 4
    6740:	0e 94 7e 01 	call	0x2fc	; 0x2fc <bufferGetFromFront>
    6744:	88 83       	st	Y, r24
    6746:	81 e0       	ldi	r24, 0x01	; 1
    6748:	03 c0       	rjmp	.+6      	; 0x6750 <uartReceiveByte+0x32>
    674a:	80 e0       	ldi	r24, 0x00	; 0
    674c:	01 c0       	rjmp	.+2      	; 0x6750 <uartReceiveByte+0x32>
    674e:	80 e0       	ldi	r24, 0x00	; 0
    6750:	df 91       	pop	r29
    6752:	cf 91       	pop	r28
    6754:	08 95       	ret

00006756 <uartGetByte>:
    6756:	cf 93       	push	r28
    6758:	df 93       	push	r29
    675a:	1f 92       	push	r1
    675c:	cd b7       	in	r28, 0x3d	; 61
    675e:	de b7       	in	r29, 0x3e	; 62
    6760:	ce 01       	movw	r24, r28
    6762:	01 96       	adiw	r24, 0x01	; 1
    6764:	0e 94 8f 33 	call	0x671e	; 0x671e <uartReceiveByte>
    6768:	88 23       	and	r24, r24
    676a:	19 f0       	breq	.+6      	; 0x6772 <uartGetByte+0x1c>
    676c:	89 81       	ldd	r24, Y+1	; 0x01
    676e:	90 e0       	ldi	r25, 0x00	; 0
    6770:	02 c0       	rjmp	.+4      	; 0x6776 <uartGetByte+0x20>
    6772:	8f ef       	ldi	r24, 0xFF	; 255
    6774:	9f ef       	ldi	r25, 0xFF	; 255
    6776:	0f 90       	pop	r0
    6778:	df 91       	pop	r29
    677a:	cf 91       	pop	r28
    677c:	08 95       	ret

0000677e <uartFlushReceiveBuffer>:
    677e:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <uartRxBuffer+0x5>
    6782:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <uartRxBuffer+0x4>
    6786:	08 95       	ret

00006788 <uartReceiveBufferIsEmpty>:
    6788:	81 e0       	ldi	r24, 0x01	; 1
    678a:	20 91 ab 04 	lds	r18, 0x04AB	; 0x8004ab <uartRxBuffer+0x4>
    678e:	30 91 ac 04 	lds	r19, 0x04AC	; 0x8004ac <uartRxBuffer+0x5>
    6792:	23 2b       	or	r18, r19
    6794:	09 f0       	breq	.+2      	; 0x6798 <uartReceiveBufferIsEmpty+0x10>
    6796:	80 e0       	ldi	r24, 0x00	; 0
    6798:	08 95       	ret

0000679a <__vector_15>:

// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(USART_TXC_vect)
{
    679a:	1f 92       	push	r1
    679c:	0f 92       	push	r0
    679e:	0f b6       	in	r0, 0x3f	; 63
    67a0:	0f 92       	push	r0
    67a2:	11 24       	eor	r1, r1
    67a4:	2f 93       	push	r18
    67a6:	3f 93       	push	r19
    67a8:	4f 93       	push	r20
    67aa:	5f 93       	push	r21
    67ac:	6f 93       	push	r22
    67ae:	7f 93       	push	r23
    67b0:	8f 93       	push	r24
    67b2:	9f 93       	push	r25
    67b4:	af 93       	push	r26
    67b6:	bf 93       	push	r27
    67b8:	ef 93       	push	r30
    67ba:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
    67bc:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <uartBufferedTx>
    67c0:	88 23       	and	r24, r24
    67c2:	91 f0       	breq	.+36     	; 0x67e8 <__vector_15+0x4e>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
    67c4:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <uartTxBuffer+0x4>
    67c8:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <uartTxBuffer+0x5>
    67cc:	89 2b       	or	r24, r25
    67ce:	31 f0       	breq	.+12     	; 0x67dc <__vector_15+0x42>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
    67d0:	81 eb       	ldi	r24, 0xB1	; 177
    67d2:	94 e0       	ldi	r25, 0x04	; 4
    67d4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <bufferGetFromFront>
    67d8:	8c b9       	out	0x0c, r24	; 12
    67da:	09 c0       	rjmp	.+18     	; 0x67ee <__vector_15+0x54>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
    67dc:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <uartBufferedTx>
			// return to ready state
			uartReadyTx = TRUE;
    67e0:	81 e0       	ldi	r24, 0x01	; 1
    67e2:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <uartReadyTx>
    67e6:	03 c0       	rjmp	.+6      	; 0x67ee <__vector_15+0x54>
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
    67e8:	81 e0       	ldi	r24, 0x01	; 1
    67ea:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <uartReadyTx>
	}
}
    67ee:	ff 91       	pop	r31
    67f0:	ef 91       	pop	r30
    67f2:	bf 91       	pop	r27
    67f4:	af 91       	pop	r26
    67f6:	9f 91       	pop	r25
    67f8:	8f 91       	pop	r24
    67fa:	7f 91       	pop	r23
    67fc:	6f 91       	pop	r22
    67fe:	5f 91       	pop	r21
    6800:	4f 91       	pop	r20
    6802:	3f 91       	pop	r19
    6804:	2f 91       	pop	r18
    6806:	0f 90       	pop	r0
    6808:	0f be       	out	0x3f, r0	; 63
    680a:	0f 90       	pop	r0
    680c:	1f 90       	pop	r1
    680e:	18 95       	reti

00006810 <__vector_13>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(USART_RXC_vect)
{
    6810:	1f 92       	push	r1
    6812:	0f 92       	push	r0
    6814:	0f b6       	in	r0, 0x3f	; 63
    6816:	0f 92       	push	r0
    6818:	11 24       	eor	r1, r1
    681a:	2f 93       	push	r18
    681c:	3f 93       	push	r19
    681e:	4f 93       	push	r20
    6820:	5f 93       	push	r21
    6822:	6f 93       	push	r22
    6824:	7f 93       	push	r23
    6826:	8f 93       	push	r24
    6828:	9f 93       	push	r25
    682a:	af 93       	push	r26
    682c:	bf 93       	push	r27
    682e:	ef 93       	push	r30
    6830:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
    6832:	8c b1       	in	r24, 0x0c	; 12
	
	// if there's a user function to handle this receive event
	if(UartRxFunc)
    6834:	20 91 d4 01 	lds	r18, 0x01D4	; 0x8001d4 <UartRxFunc>
    6838:	30 91 d5 01 	lds	r19, 0x01D5	; 0x8001d5 <UartRxFunc+0x1>
    683c:	23 2b       	or	r18, r19
    683e:	31 f0       	breq	.+12     	; 0x684c <__vector_13+0x3c>
	{
		// call it and pass the received data
		UartRxFunc(c);
    6840:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <UartRxFunc>
    6844:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <UartRxFunc+0x1>
    6848:	09 95       	icall
    684a:	10 c0       	rjmp	.+32     	; 0x686c <__vector_13+0x5c>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
    684c:	68 2f       	mov	r22, r24
    684e:	87 ea       	ldi	r24, 0xA7	; 167
    6850:	94 e0       	ldi	r25, 0x04	; 4
    6852:	0e 94 a2 01 	call	0x344	; 0x344 <bufferAddToEnd>
    6856:	81 11       	cpse	r24, r1
    6858:	09 c0       	rjmp	.+18     	; 0x686c <__vector_13+0x5c>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
    685a:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <uartRxOverflow>
    685e:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <uartRxOverflow+0x1>
    6862:	01 96       	adiw	r24, 0x01	; 1
    6864:	90 93 ba 04 	sts	0x04BA, r25	; 0x8004ba <uartRxOverflow+0x1>
    6868:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <uartRxOverflow>
		}
	}
}
    686c:	ff 91       	pop	r31
    686e:	ef 91       	pop	r30
    6870:	bf 91       	pop	r27
    6872:	af 91       	pop	r26
    6874:	9f 91       	pop	r25
    6876:	8f 91       	pop	r24
    6878:	7f 91       	pop	r23
    687a:	6f 91       	pop	r22
    687c:	5f 91       	pop	r21
    687e:	4f 91       	pop	r20
    6880:	3f 91       	pop	r19
    6882:	2f 91       	pop	r18
    6884:	0f 90       	pop	r0
    6886:	0f be       	out	0x3f, r0	; 63
    6888:	0f 90       	pop	r0
    688a:	1f 90       	pop	r1
    688c:	18 95       	reti

0000688e <__divsf3>:
    688e:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <__divsf3x>
    6892:	0c 94 3c 35 	jmp	0x6a78	; 0x6a78 <__fp_round>
    6896:	0e 94 35 35 	call	0x6a6a	; 0x6a6a <__fp_pscB>
    689a:	58 f0       	brcs	.+22     	; 0x68b2 <__divsf3+0x24>
    689c:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <__fp_pscA>
    68a0:	40 f0       	brcs	.+16     	; 0x68b2 <__divsf3+0x24>
    68a2:	29 f4       	brne	.+10     	; 0x68ae <__divsf3+0x20>
    68a4:	5f 3f       	cpi	r21, 0xFF	; 255
    68a6:	29 f0       	breq	.+10     	; 0x68b2 <__divsf3+0x24>
    68a8:	0c 94 25 35 	jmp	0x6a4a	; 0x6a4a <__fp_inf>
    68ac:	51 11       	cpse	r21, r1
    68ae:	0c 94 70 35 	jmp	0x6ae0	; 0x6ae0 <__fp_szero>
    68b2:	0c 94 2b 35 	jmp	0x6a56	; 0x6a56 <__fp_nan>

000068b6 <__divsf3x>:
    68b6:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <__fp_split3>
    68ba:	68 f3       	brcs	.-38     	; 0x6896 <__divsf3+0x8>

000068bc <__divsf3_pse>:
    68bc:	99 23       	and	r25, r25
    68be:	b1 f3       	breq	.-20     	; 0x68ac <__divsf3+0x1e>
    68c0:	55 23       	and	r21, r21
    68c2:	91 f3       	breq	.-28     	; 0x68a8 <__divsf3+0x1a>
    68c4:	95 1b       	sub	r25, r21
    68c6:	55 0b       	sbc	r21, r21
    68c8:	bb 27       	eor	r27, r27
    68ca:	aa 27       	eor	r26, r26
    68cc:	62 17       	cp	r22, r18
    68ce:	73 07       	cpc	r23, r19
    68d0:	84 07       	cpc	r24, r20
    68d2:	38 f0       	brcs	.+14     	; 0x68e2 <__divsf3_pse+0x26>
    68d4:	9f 5f       	subi	r25, 0xFF	; 255
    68d6:	5f 4f       	sbci	r21, 0xFF	; 255
    68d8:	22 0f       	add	r18, r18
    68da:	33 1f       	adc	r19, r19
    68dc:	44 1f       	adc	r20, r20
    68de:	aa 1f       	adc	r26, r26
    68e0:	a9 f3       	breq	.-22     	; 0x68cc <__divsf3_pse+0x10>
    68e2:	35 d0       	rcall	.+106    	; 0x694e <__divsf3_pse+0x92>
    68e4:	0e 2e       	mov	r0, r30
    68e6:	3a f0       	brmi	.+14     	; 0x68f6 <__divsf3_pse+0x3a>
    68e8:	e0 e8       	ldi	r30, 0x80	; 128
    68ea:	32 d0       	rcall	.+100    	; 0x6950 <__divsf3_pse+0x94>
    68ec:	91 50       	subi	r25, 0x01	; 1
    68ee:	50 40       	sbci	r21, 0x00	; 0
    68f0:	e6 95       	lsr	r30
    68f2:	00 1c       	adc	r0, r0
    68f4:	ca f7       	brpl	.-14     	; 0x68e8 <__divsf3_pse+0x2c>
    68f6:	2b d0       	rcall	.+86     	; 0x694e <__divsf3_pse+0x92>
    68f8:	fe 2f       	mov	r31, r30
    68fa:	29 d0       	rcall	.+82     	; 0x694e <__divsf3_pse+0x92>
    68fc:	66 0f       	add	r22, r22
    68fe:	77 1f       	adc	r23, r23
    6900:	88 1f       	adc	r24, r24
    6902:	bb 1f       	adc	r27, r27
    6904:	26 17       	cp	r18, r22
    6906:	37 07       	cpc	r19, r23
    6908:	48 07       	cpc	r20, r24
    690a:	ab 07       	cpc	r26, r27
    690c:	b0 e8       	ldi	r27, 0x80	; 128
    690e:	09 f0       	breq	.+2      	; 0x6912 <__divsf3_pse+0x56>
    6910:	bb 0b       	sbc	r27, r27
    6912:	80 2d       	mov	r24, r0
    6914:	bf 01       	movw	r22, r30
    6916:	ff 27       	eor	r31, r31
    6918:	93 58       	subi	r25, 0x83	; 131
    691a:	5f 4f       	sbci	r21, 0xFF	; 255
    691c:	3a f0       	brmi	.+14     	; 0x692c <__divsf3_pse+0x70>
    691e:	9e 3f       	cpi	r25, 0xFE	; 254
    6920:	51 05       	cpc	r21, r1
    6922:	78 f0       	brcs	.+30     	; 0x6942 <__divsf3_pse+0x86>
    6924:	0c 94 25 35 	jmp	0x6a4a	; 0x6a4a <__fp_inf>
    6928:	0c 94 70 35 	jmp	0x6ae0	; 0x6ae0 <__fp_szero>
    692c:	5f 3f       	cpi	r21, 0xFF	; 255
    692e:	e4 f3       	brlt	.-8      	; 0x6928 <__divsf3_pse+0x6c>
    6930:	98 3e       	cpi	r25, 0xE8	; 232
    6932:	d4 f3       	brlt	.-12     	; 0x6928 <__divsf3_pse+0x6c>
    6934:	86 95       	lsr	r24
    6936:	77 95       	ror	r23
    6938:	67 95       	ror	r22
    693a:	b7 95       	ror	r27
    693c:	f7 95       	ror	r31
    693e:	9f 5f       	subi	r25, 0xFF	; 255
    6940:	c9 f7       	brne	.-14     	; 0x6934 <__divsf3_pse+0x78>
    6942:	88 0f       	add	r24, r24
    6944:	91 1d       	adc	r25, r1
    6946:	96 95       	lsr	r25
    6948:	87 95       	ror	r24
    694a:	97 f9       	bld	r25, 7
    694c:	08 95       	ret
    694e:	e1 e0       	ldi	r30, 0x01	; 1
    6950:	66 0f       	add	r22, r22
    6952:	77 1f       	adc	r23, r23
    6954:	88 1f       	adc	r24, r24
    6956:	bb 1f       	adc	r27, r27
    6958:	62 17       	cp	r22, r18
    695a:	73 07       	cpc	r23, r19
    695c:	84 07       	cpc	r24, r20
    695e:	ba 07       	cpc	r27, r26
    6960:	20 f0       	brcs	.+8      	; 0x696a <__divsf3_pse+0xae>
    6962:	62 1b       	sub	r22, r18
    6964:	73 0b       	sbc	r23, r19
    6966:	84 0b       	sbc	r24, r20
    6968:	ba 0b       	sbc	r27, r26
    696a:	ee 1f       	adc	r30, r30
    696c:	88 f7       	brcc	.-30     	; 0x6950 <__divsf3_pse+0x94>
    696e:	e0 95       	com	r30
    6970:	08 95       	ret

00006972 <__fixunssfsi>:
    6972:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <__fp_splitA>
    6976:	88 f0       	brcs	.+34     	; 0x699a <__fixunssfsi+0x28>
    6978:	9f 57       	subi	r25, 0x7F	; 127
    697a:	98 f0       	brcs	.+38     	; 0x69a2 <__fixunssfsi+0x30>
    697c:	b9 2f       	mov	r27, r25
    697e:	99 27       	eor	r25, r25
    6980:	b7 51       	subi	r27, 0x17	; 23
    6982:	b0 f0       	brcs	.+44     	; 0x69b0 <__fixunssfsi+0x3e>
    6984:	e1 f0       	breq	.+56     	; 0x69be <__fixunssfsi+0x4c>
    6986:	66 0f       	add	r22, r22
    6988:	77 1f       	adc	r23, r23
    698a:	88 1f       	adc	r24, r24
    698c:	99 1f       	adc	r25, r25
    698e:	1a f0       	brmi	.+6      	; 0x6996 <__fixunssfsi+0x24>
    6990:	ba 95       	dec	r27
    6992:	c9 f7       	brne	.-14     	; 0x6986 <__fixunssfsi+0x14>
    6994:	14 c0       	rjmp	.+40     	; 0x69be <__fixunssfsi+0x4c>
    6996:	b1 30       	cpi	r27, 0x01	; 1
    6998:	91 f0       	breq	.+36     	; 0x69be <__fixunssfsi+0x4c>
    699a:	0e 94 6f 35 	call	0x6ade	; 0x6ade <__fp_zero>
    699e:	b1 e0       	ldi	r27, 0x01	; 1
    69a0:	08 95       	ret
    69a2:	0c 94 6f 35 	jmp	0x6ade	; 0x6ade <__fp_zero>
    69a6:	67 2f       	mov	r22, r23
    69a8:	78 2f       	mov	r23, r24
    69aa:	88 27       	eor	r24, r24
    69ac:	b8 5f       	subi	r27, 0xF8	; 248
    69ae:	39 f0       	breq	.+14     	; 0x69be <__fixunssfsi+0x4c>
    69b0:	b9 3f       	cpi	r27, 0xF9	; 249
    69b2:	cc f3       	brlt	.-14     	; 0x69a6 <__fixunssfsi+0x34>
    69b4:	86 95       	lsr	r24
    69b6:	77 95       	ror	r23
    69b8:	67 95       	ror	r22
    69ba:	b3 95       	inc	r27
    69bc:	d9 f7       	brne	.-10     	; 0x69b4 <__fixunssfsi+0x42>
    69be:	3e f4       	brtc	.+14     	; 0x69ce <__fixunssfsi+0x5c>
    69c0:	90 95       	com	r25
    69c2:	80 95       	com	r24
    69c4:	70 95       	com	r23
    69c6:	61 95       	neg	r22
    69c8:	7f 4f       	sbci	r23, 0xFF	; 255
    69ca:	8f 4f       	sbci	r24, 0xFF	; 255
    69cc:	9f 4f       	sbci	r25, 0xFF	; 255
    69ce:	08 95       	ret

000069d0 <__floatunsisf>:
    69d0:	e8 94       	clt
    69d2:	09 c0       	rjmp	.+18     	; 0x69e6 <__floatsisf+0x12>

000069d4 <__floatsisf>:
    69d4:	97 fb       	bst	r25, 7
    69d6:	3e f4       	brtc	.+14     	; 0x69e6 <__floatsisf+0x12>
    69d8:	90 95       	com	r25
    69da:	80 95       	com	r24
    69dc:	70 95       	com	r23
    69de:	61 95       	neg	r22
    69e0:	7f 4f       	sbci	r23, 0xFF	; 255
    69e2:	8f 4f       	sbci	r24, 0xFF	; 255
    69e4:	9f 4f       	sbci	r25, 0xFF	; 255
    69e6:	99 23       	and	r25, r25
    69e8:	a9 f0       	breq	.+42     	; 0x6a14 <__floatsisf+0x40>
    69ea:	f9 2f       	mov	r31, r25
    69ec:	96 e9       	ldi	r25, 0x96	; 150
    69ee:	bb 27       	eor	r27, r27
    69f0:	93 95       	inc	r25
    69f2:	f6 95       	lsr	r31
    69f4:	87 95       	ror	r24
    69f6:	77 95       	ror	r23
    69f8:	67 95       	ror	r22
    69fa:	b7 95       	ror	r27
    69fc:	f1 11       	cpse	r31, r1
    69fe:	f8 cf       	rjmp	.-16     	; 0x69f0 <__floatsisf+0x1c>
    6a00:	fa f4       	brpl	.+62     	; 0x6a40 <__floatsisf+0x6c>
    6a02:	bb 0f       	add	r27, r27
    6a04:	11 f4       	brne	.+4      	; 0x6a0a <__floatsisf+0x36>
    6a06:	60 ff       	sbrs	r22, 0
    6a08:	1b c0       	rjmp	.+54     	; 0x6a40 <__floatsisf+0x6c>
    6a0a:	6f 5f       	subi	r22, 0xFF	; 255
    6a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    6a0e:	8f 4f       	sbci	r24, 0xFF	; 255
    6a10:	9f 4f       	sbci	r25, 0xFF	; 255
    6a12:	16 c0       	rjmp	.+44     	; 0x6a40 <__floatsisf+0x6c>
    6a14:	88 23       	and	r24, r24
    6a16:	11 f0       	breq	.+4      	; 0x6a1c <__floatsisf+0x48>
    6a18:	96 e9       	ldi	r25, 0x96	; 150
    6a1a:	11 c0       	rjmp	.+34     	; 0x6a3e <__floatsisf+0x6a>
    6a1c:	77 23       	and	r23, r23
    6a1e:	21 f0       	breq	.+8      	; 0x6a28 <__floatsisf+0x54>
    6a20:	9e e8       	ldi	r25, 0x8E	; 142
    6a22:	87 2f       	mov	r24, r23
    6a24:	76 2f       	mov	r23, r22
    6a26:	05 c0       	rjmp	.+10     	; 0x6a32 <__floatsisf+0x5e>
    6a28:	66 23       	and	r22, r22
    6a2a:	71 f0       	breq	.+28     	; 0x6a48 <__floatsisf+0x74>
    6a2c:	96 e8       	ldi	r25, 0x86	; 134
    6a2e:	86 2f       	mov	r24, r22
    6a30:	70 e0       	ldi	r23, 0x00	; 0
    6a32:	60 e0       	ldi	r22, 0x00	; 0
    6a34:	2a f0       	brmi	.+10     	; 0x6a40 <__floatsisf+0x6c>
    6a36:	9a 95       	dec	r25
    6a38:	66 0f       	add	r22, r22
    6a3a:	77 1f       	adc	r23, r23
    6a3c:	88 1f       	adc	r24, r24
    6a3e:	da f7       	brpl	.-10     	; 0x6a36 <__floatsisf+0x62>
    6a40:	88 0f       	add	r24, r24
    6a42:	96 95       	lsr	r25
    6a44:	87 95       	ror	r24
    6a46:	97 f9       	bld	r25, 7
    6a48:	08 95       	ret

00006a4a <__fp_inf>:
    6a4a:	97 f9       	bld	r25, 7
    6a4c:	9f 67       	ori	r25, 0x7F	; 127
    6a4e:	80 e8       	ldi	r24, 0x80	; 128
    6a50:	70 e0       	ldi	r23, 0x00	; 0
    6a52:	60 e0       	ldi	r22, 0x00	; 0
    6a54:	08 95       	ret

00006a56 <__fp_nan>:
    6a56:	9f ef       	ldi	r25, 0xFF	; 255
    6a58:	80 ec       	ldi	r24, 0xC0	; 192
    6a5a:	08 95       	ret

00006a5c <__fp_pscA>:
    6a5c:	00 24       	eor	r0, r0
    6a5e:	0a 94       	dec	r0
    6a60:	16 16       	cp	r1, r22
    6a62:	17 06       	cpc	r1, r23
    6a64:	18 06       	cpc	r1, r24
    6a66:	09 06       	cpc	r0, r25
    6a68:	08 95       	ret

00006a6a <__fp_pscB>:
    6a6a:	00 24       	eor	r0, r0
    6a6c:	0a 94       	dec	r0
    6a6e:	12 16       	cp	r1, r18
    6a70:	13 06       	cpc	r1, r19
    6a72:	14 06       	cpc	r1, r20
    6a74:	05 06       	cpc	r0, r21
    6a76:	08 95       	ret

00006a78 <__fp_round>:
    6a78:	09 2e       	mov	r0, r25
    6a7a:	03 94       	inc	r0
    6a7c:	00 0c       	add	r0, r0
    6a7e:	11 f4       	brne	.+4      	; 0x6a84 <__fp_round+0xc>
    6a80:	88 23       	and	r24, r24
    6a82:	52 f0       	brmi	.+20     	; 0x6a98 <__fp_round+0x20>
    6a84:	bb 0f       	add	r27, r27
    6a86:	40 f4       	brcc	.+16     	; 0x6a98 <__fp_round+0x20>
    6a88:	bf 2b       	or	r27, r31
    6a8a:	11 f4       	brne	.+4      	; 0x6a90 <__fp_round+0x18>
    6a8c:	60 ff       	sbrs	r22, 0
    6a8e:	04 c0       	rjmp	.+8      	; 0x6a98 <__fp_round+0x20>
    6a90:	6f 5f       	subi	r22, 0xFF	; 255
    6a92:	7f 4f       	sbci	r23, 0xFF	; 255
    6a94:	8f 4f       	sbci	r24, 0xFF	; 255
    6a96:	9f 4f       	sbci	r25, 0xFF	; 255
    6a98:	08 95       	ret

00006a9a <__fp_split3>:
    6a9a:	57 fd       	sbrc	r21, 7
    6a9c:	90 58       	subi	r25, 0x80	; 128
    6a9e:	44 0f       	add	r20, r20
    6aa0:	55 1f       	adc	r21, r21
    6aa2:	59 f0       	breq	.+22     	; 0x6aba <__fp_splitA+0x10>
    6aa4:	5f 3f       	cpi	r21, 0xFF	; 255
    6aa6:	71 f0       	breq	.+28     	; 0x6ac4 <__fp_splitA+0x1a>
    6aa8:	47 95       	ror	r20

00006aaa <__fp_splitA>:
    6aaa:	88 0f       	add	r24, r24
    6aac:	97 fb       	bst	r25, 7
    6aae:	99 1f       	adc	r25, r25
    6ab0:	61 f0       	breq	.+24     	; 0x6aca <__fp_splitA+0x20>
    6ab2:	9f 3f       	cpi	r25, 0xFF	; 255
    6ab4:	79 f0       	breq	.+30     	; 0x6ad4 <__fp_splitA+0x2a>
    6ab6:	87 95       	ror	r24
    6ab8:	08 95       	ret
    6aba:	12 16       	cp	r1, r18
    6abc:	13 06       	cpc	r1, r19
    6abe:	14 06       	cpc	r1, r20
    6ac0:	55 1f       	adc	r21, r21
    6ac2:	f2 cf       	rjmp	.-28     	; 0x6aa8 <__fp_split3+0xe>
    6ac4:	46 95       	lsr	r20
    6ac6:	f1 df       	rcall	.-30     	; 0x6aaa <__fp_splitA>
    6ac8:	08 c0       	rjmp	.+16     	; 0x6ada <__fp_splitA+0x30>
    6aca:	16 16       	cp	r1, r22
    6acc:	17 06       	cpc	r1, r23
    6ace:	18 06       	cpc	r1, r24
    6ad0:	99 1f       	adc	r25, r25
    6ad2:	f1 cf       	rjmp	.-30     	; 0x6ab6 <__fp_splitA+0xc>
    6ad4:	86 95       	lsr	r24
    6ad6:	71 05       	cpc	r23, r1
    6ad8:	61 05       	cpc	r22, r1
    6ada:	08 94       	sec
    6adc:	08 95       	ret

00006ade <__fp_zero>:
    6ade:	e8 94       	clt

00006ae0 <__fp_szero>:
    6ae0:	bb 27       	eor	r27, r27
    6ae2:	66 27       	eor	r22, r22
    6ae4:	77 27       	eor	r23, r23
    6ae6:	cb 01       	movw	r24, r22
    6ae8:	97 f9       	bld	r25, 7
    6aea:	08 95       	ret

00006aec <__mulsf3>:
    6aec:	0e 94 89 35 	call	0x6b12	; 0x6b12 <__mulsf3x>
    6af0:	0c 94 3c 35 	jmp	0x6a78	; 0x6a78 <__fp_round>
    6af4:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <__fp_pscA>
    6af8:	38 f0       	brcs	.+14     	; 0x6b08 <__mulsf3+0x1c>
    6afa:	0e 94 35 35 	call	0x6a6a	; 0x6a6a <__fp_pscB>
    6afe:	20 f0       	brcs	.+8      	; 0x6b08 <__mulsf3+0x1c>
    6b00:	95 23       	and	r25, r21
    6b02:	11 f0       	breq	.+4      	; 0x6b08 <__mulsf3+0x1c>
    6b04:	0c 94 25 35 	jmp	0x6a4a	; 0x6a4a <__fp_inf>
    6b08:	0c 94 2b 35 	jmp	0x6a56	; 0x6a56 <__fp_nan>
    6b0c:	11 24       	eor	r1, r1
    6b0e:	0c 94 70 35 	jmp	0x6ae0	; 0x6ae0 <__fp_szero>

00006b12 <__mulsf3x>:
    6b12:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <__fp_split3>
    6b16:	70 f3       	brcs	.-36     	; 0x6af4 <__mulsf3+0x8>

00006b18 <__mulsf3_pse>:
    6b18:	95 9f       	mul	r25, r21
    6b1a:	c1 f3       	breq	.-16     	; 0x6b0c <__mulsf3+0x20>
    6b1c:	95 0f       	add	r25, r21
    6b1e:	50 e0       	ldi	r21, 0x00	; 0
    6b20:	55 1f       	adc	r21, r21
    6b22:	62 9f       	mul	r22, r18
    6b24:	f0 01       	movw	r30, r0
    6b26:	72 9f       	mul	r23, r18
    6b28:	bb 27       	eor	r27, r27
    6b2a:	f0 0d       	add	r31, r0
    6b2c:	b1 1d       	adc	r27, r1
    6b2e:	63 9f       	mul	r22, r19
    6b30:	aa 27       	eor	r26, r26
    6b32:	f0 0d       	add	r31, r0
    6b34:	b1 1d       	adc	r27, r1
    6b36:	aa 1f       	adc	r26, r26
    6b38:	64 9f       	mul	r22, r20
    6b3a:	66 27       	eor	r22, r22
    6b3c:	b0 0d       	add	r27, r0
    6b3e:	a1 1d       	adc	r26, r1
    6b40:	66 1f       	adc	r22, r22
    6b42:	82 9f       	mul	r24, r18
    6b44:	22 27       	eor	r18, r18
    6b46:	b0 0d       	add	r27, r0
    6b48:	a1 1d       	adc	r26, r1
    6b4a:	62 1f       	adc	r22, r18
    6b4c:	73 9f       	mul	r23, r19
    6b4e:	b0 0d       	add	r27, r0
    6b50:	a1 1d       	adc	r26, r1
    6b52:	62 1f       	adc	r22, r18
    6b54:	83 9f       	mul	r24, r19
    6b56:	a0 0d       	add	r26, r0
    6b58:	61 1d       	adc	r22, r1
    6b5a:	22 1f       	adc	r18, r18
    6b5c:	74 9f       	mul	r23, r20
    6b5e:	33 27       	eor	r19, r19
    6b60:	a0 0d       	add	r26, r0
    6b62:	61 1d       	adc	r22, r1
    6b64:	23 1f       	adc	r18, r19
    6b66:	84 9f       	mul	r24, r20
    6b68:	60 0d       	add	r22, r0
    6b6a:	21 1d       	adc	r18, r1
    6b6c:	82 2f       	mov	r24, r18
    6b6e:	76 2f       	mov	r23, r22
    6b70:	6a 2f       	mov	r22, r26
    6b72:	11 24       	eor	r1, r1
    6b74:	9f 57       	subi	r25, 0x7F	; 127
    6b76:	50 40       	sbci	r21, 0x00	; 0
    6b78:	9a f0       	brmi	.+38     	; 0x6ba0 <__mulsf3_pse+0x88>
    6b7a:	f1 f0       	breq	.+60     	; 0x6bb8 <__mulsf3_pse+0xa0>
    6b7c:	88 23       	and	r24, r24
    6b7e:	4a f0       	brmi	.+18     	; 0x6b92 <__mulsf3_pse+0x7a>
    6b80:	ee 0f       	add	r30, r30
    6b82:	ff 1f       	adc	r31, r31
    6b84:	bb 1f       	adc	r27, r27
    6b86:	66 1f       	adc	r22, r22
    6b88:	77 1f       	adc	r23, r23
    6b8a:	88 1f       	adc	r24, r24
    6b8c:	91 50       	subi	r25, 0x01	; 1
    6b8e:	50 40       	sbci	r21, 0x00	; 0
    6b90:	a9 f7       	brne	.-22     	; 0x6b7c <__mulsf3_pse+0x64>
    6b92:	9e 3f       	cpi	r25, 0xFE	; 254
    6b94:	51 05       	cpc	r21, r1
    6b96:	80 f0       	brcs	.+32     	; 0x6bb8 <__mulsf3_pse+0xa0>
    6b98:	0c 94 25 35 	jmp	0x6a4a	; 0x6a4a <__fp_inf>
    6b9c:	0c 94 70 35 	jmp	0x6ae0	; 0x6ae0 <__fp_szero>
    6ba0:	5f 3f       	cpi	r21, 0xFF	; 255
    6ba2:	e4 f3       	brlt	.-8      	; 0x6b9c <__mulsf3_pse+0x84>
    6ba4:	98 3e       	cpi	r25, 0xE8	; 232
    6ba6:	d4 f3       	brlt	.-12     	; 0x6b9c <__mulsf3_pse+0x84>
    6ba8:	86 95       	lsr	r24
    6baa:	77 95       	ror	r23
    6bac:	67 95       	ror	r22
    6bae:	b7 95       	ror	r27
    6bb0:	f7 95       	ror	r31
    6bb2:	e7 95       	ror	r30
    6bb4:	9f 5f       	subi	r25, 0xFF	; 255
    6bb6:	c1 f7       	brne	.-16     	; 0x6ba8 <__mulsf3_pse+0x90>
    6bb8:	fe 2b       	or	r31, r30
    6bba:	88 0f       	add	r24, r24
    6bbc:	91 1d       	adc	r25, r1
    6bbe:	96 95       	lsr	r25
    6bc0:	87 95       	ror	r24
    6bc2:	97 f9       	bld	r25, 7
    6bc4:	08 95       	ret

00006bc6 <__udivmodhi4>:
    6bc6:	aa 1b       	sub	r26, r26
    6bc8:	bb 1b       	sub	r27, r27
    6bca:	51 e1       	ldi	r21, 0x11	; 17
    6bcc:	07 c0       	rjmp	.+14     	; 0x6bdc <__udivmodhi4_ep>

00006bce <__udivmodhi4_loop>:
    6bce:	aa 1f       	adc	r26, r26
    6bd0:	bb 1f       	adc	r27, r27
    6bd2:	a6 17       	cp	r26, r22
    6bd4:	b7 07       	cpc	r27, r23
    6bd6:	10 f0       	brcs	.+4      	; 0x6bdc <__udivmodhi4_ep>
    6bd8:	a6 1b       	sub	r26, r22
    6bda:	b7 0b       	sbc	r27, r23

00006bdc <__udivmodhi4_ep>:
    6bdc:	88 1f       	adc	r24, r24
    6bde:	99 1f       	adc	r25, r25
    6be0:	5a 95       	dec	r21
    6be2:	a9 f7       	brne	.-22     	; 0x6bce <__udivmodhi4_loop>
    6be4:	80 95       	com	r24
    6be6:	90 95       	com	r25
    6be8:	bc 01       	movw	r22, r24
    6bea:	cd 01       	movw	r24, r26
    6bec:	08 95       	ret

00006bee <__udivmodsi4>:
    6bee:	a1 e2       	ldi	r26, 0x21	; 33
    6bf0:	1a 2e       	mov	r1, r26
    6bf2:	aa 1b       	sub	r26, r26
    6bf4:	bb 1b       	sub	r27, r27
    6bf6:	fd 01       	movw	r30, r26
    6bf8:	0d c0       	rjmp	.+26     	; 0x6c14 <__udivmodsi4_ep>

00006bfa <__udivmodsi4_loop>:
    6bfa:	aa 1f       	adc	r26, r26
    6bfc:	bb 1f       	adc	r27, r27
    6bfe:	ee 1f       	adc	r30, r30
    6c00:	ff 1f       	adc	r31, r31
    6c02:	a2 17       	cp	r26, r18
    6c04:	b3 07       	cpc	r27, r19
    6c06:	e4 07       	cpc	r30, r20
    6c08:	f5 07       	cpc	r31, r21
    6c0a:	20 f0       	brcs	.+8      	; 0x6c14 <__udivmodsi4_ep>
    6c0c:	a2 1b       	sub	r26, r18
    6c0e:	b3 0b       	sbc	r27, r19
    6c10:	e4 0b       	sbc	r30, r20
    6c12:	f5 0b       	sbc	r31, r21

00006c14 <__udivmodsi4_ep>:
    6c14:	66 1f       	adc	r22, r22
    6c16:	77 1f       	adc	r23, r23
    6c18:	88 1f       	adc	r24, r24
    6c1a:	99 1f       	adc	r25, r25
    6c1c:	1a 94       	dec	r1
    6c1e:	69 f7       	brne	.-38     	; 0x6bfa <__udivmodsi4_loop>
    6c20:	60 95       	com	r22
    6c22:	70 95       	com	r23
    6c24:	80 95       	com	r24
    6c26:	90 95       	com	r25
    6c28:	9b 01       	movw	r18, r22
    6c2a:	ac 01       	movw	r20, r24
    6c2c:	bd 01       	movw	r22, r26
    6c2e:	cf 01       	movw	r24, r30
    6c30:	08 95       	ret

00006c32 <__divmodsi4>:
    6c32:	05 2e       	mov	r0, r21
    6c34:	97 fb       	bst	r25, 7
    6c36:	1e f4       	brtc	.+6      	; 0x6c3e <__divmodsi4+0xc>
    6c38:	00 94       	com	r0
    6c3a:	0e 94 30 36 	call	0x6c60	; 0x6c60 <__negsi2>
    6c3e:	57 fd       	sbrc	r21, 7
    6c40:	07 d0       	rcall	.+14     	; 0x6c50 <__divmodsi4_neg2>
    6c42:	0e 94 f7 35 	call	0x6bee	; 0x6bee <__udivmodsi4>
    6c46:	07 fc       	sbrc	r0, 7
    6c48:	03 d0       	rcall	.+6      	; 0x6c50 <__divmodsi4_neg2>
    6c4a:	4e f4       	brtc	.+18     	; 0x6c5e <__divmodsi4_exit>
    6c4c:	0c 94 30 36 	jmp	0x6c60	; 0x6c60 <__negsi2>

00006c50 <__divmodsi4_neg2>:
    6c50:	50 95       	com	r21
    6c52:	40 95       	com	r20
    6c54:	30 95       	com	r19
    6c56:	21 95       	neg	r18
    6c58:	3f 4f       	sbci	r19, 0xFF	; 255
    6c5a:	4f 4f       	sbci	r20, 0xFF	; 255
    6c5c:	5f 4f       	sbci	r21, 0xFF	; 255

00006c5e <__divmodsi4_exit>:
    6c5e:	08 95       	ret

00006c60 <__negsi2>:
    6c60:	90 95       	com	r25
    6c62:	80 95       	com	r24
    6c64:	70 95       	com	r23
    6c66:	61 95       	neg	r22
    6c68:	7f 4f       	sbci	r23, 0xFF	; 255
    6c6a:	8f 4f       	sbci	r24, 0xFF	; 255
    6c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    6c6e:	08 95       	ret

00006c70 <__tablejump2__>:
    6c70:	ee 0f       	add	r30, r30
    6c72:	ff 1f       	adc	r31, r31
    6c74:	05 90       	lpm	r0, Z+
    6c76:	f4 91       	lpm	r31, Z
    6c78:	e0 2d       	mov	r30, r0
    6c7a:	09 94       	ijmp

00006c7c <__umulhisi3>:
    6c7c:	a2 9f       	mul	r26, r18
    6c7e:	b0 01       	movw	r22, r0
    6c80:	b3 9f       	mul	r27, r19
    6c82:	c0 01       	movw	r24, r0
    6c84:	a3 9f       	mul	r26, r19
    6c86:	70 0d       	add	r23, r0
    6c88:	81 1d       	adc	r24, r1
    6c8a:	11 24       	eor	r1, r1
    6c8c:	91 1d       	adc	r25, r1
    6c8e:	b2 9f       	mul	r27, r18
    6c90:	70 0d       	add	r23, r0
    6c92:	81 1d       	adc	r24, r1
    6c94:	11 24       	eor	r1, r1
    6c96:	91 1d       	adc	r25, r1
    6c98:	08 95       	ret

00006c9a <__muluhisi3>:
    6c9a:	0e 94 3e 36 	call	0x6c7c	; 0x6c7c <__umulhisi3>
    6c9e:	a5 9f       	mul	r26, r21
    6ca0:	90 0d       	add	r25, r0
    6ca2:	b4 9f       	mul	r27, r20
    6ca4:	90 0d       	add	r25, r0
    6ca6:	a4 9f       	mul	r26, r20
    6ca8:	80 0d       	add	r24, r0
    6caa:	91 1d       	adc	r25, r1
    6cac:	11 24       	eor	r1, r1
    6cae:	08 95       	ret

00006cb0 <malloc>:
    6cb0:	0f 93       	push	r16
    6cb2:	1f 93       	push	r17
    6cb4:	cf 93       	push	r28
    6cb6:	df 93       	push	r29
    6cb8:	82 30       	cpi	r24, 0x02	; 2
    6cba:	91 05       	cpc	r25, r1
    6cbc:	10 f4       	brcc	.+4      	; 0x6cc2 <malloc+0x12>
    6cbe:	82 e0       	ldi	r24, 0x02	; 2
    6cc0:	90 e0       	ldi	r25, 0x00	; 0
    6cc2:	e0 91 bd 04 	lds	r30, 0x04BD	; 0x8004bd <__flp>
    6cc6:	f0 91 be 04 	lds	r31, 0x04BE	; 0x8004be <__flp+0x1>
    6cca:	20 e0       	ldi	r18, 0x00	; 0
    6ccc:	30 e0       	ldi	r19, 0x00	; 0
    6cce:	a0 e0       	ldi	r26, 0x00	; 0
    6cd0:	b0 e0       	ldi	r27, 0x00	; 0
    6cd2:	30 97       	sbiw	r30, 0x00	; 0
    6cd4:	19 f1       	breq	.+70     	; 0x6d1c <malloc+0x6c>
    6cd6:	40 81       	ld	r20, Z
    6cd8:	51 81       	ldd	r21, Z+1	; 0x01
    6cda:	02 81       	ldd	r16, Z+2	; 0x02
    6cdc:	13 81       	ldd	r17, Z+3	; 0x03
    6cde:	48 17       	cp	r20, r24
    6ce0:	59 07       	cpc	r21, r25
    6ce2:	c8 f0       	brcs	.+50     	; 0x6d16 <malloc+0x66>
    6ce4:	84 17       	cp	r24, r20
    6ce6:	95 07       	cpc	r25, r21
    6ce8:	69 f4       	brne	.+26     	; 0x6d04 <malloc+0x54>
    6cea:	10 97       	sbiw	r26, 0x00	; 0
    6cec:	31 f0       	breq	.+12     	; 0x6cfa <malloc+0x4a>
    6cee:	12 96       	adiw	r26, 0x02	; 2
    6cf0:	0c 93       	st	X, r16
    6cf2:	12 97       	sbiw	r26, 0x02	; 2
    6cf4:	13 96       	adiw	r26, 0x03	; 3
    6cf6:	1c 93       	st	X, r17
    6cf8:	27 c0       	rjmp	.+78     	; 0x6d48 <malloc+0x98>
    6cfa:	00 93 bd 04 	sts	0x04BD, r16	; 0x8004bd <__flp>
    6cfe:	10 93 be 04 	sts	0x04BE, r17	; 0x8004be <__flp+0x1>
    6d02:	22 c0       	rjmp	.+68     	; 0x6d48 <malloc+0x98>
    6d04:	21 15       	cp	r18, r1
    6d06:	31 05       	cpc	r19, r1
    6d08:	19 f0       	breq	.+6      	; 0x6d10 <malloc+0x60>
    6d0a:	42 17       	cp	r20, r18
    6d0c:	53 07       	cpc	r21, r19
    6d0e:	18 f4       	brcc	.+6      	; 0x6d16 <malloc+0x66>
    6d10:	9a 01       	movw	r18, r20
    6d12:	bd 01       	movw	r22, r26
    6d14:	ef 01       	movw	r28, r30
    6d16:	df 01       	movw	r26, r30
    6d18:	f8 01       	movw	r30, r16
    6d1a:	db cf       	rjmp	.-74     	; 0x6cd2 <malloc+0x22>
    6d1c:	21 15       	cp	r18, r1
    6d1e:	31 05       	cpc	r19, r1
    6d20:	f9 f0       	breq	.+62     	; 0x6d60 <malloc+0xb0>
    6d22:	28 1b       	sub	r18, r24
    6d24:	39 0b       	sbc	r19, r25
    6d26:	24 30       	cpi	r18, 0x04	; 4
    6d28:	31 05       	cpc	r19, r1
    6d2a:	80 f4       	brcc	.+32     	; 0x6d4c <malloc+0x9c>
    6d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    6d2e:	9b 81       	ldd	r25, Y+3	; 0x03
    6d30:	61 15       	cp	r22, r1
    6d32:	71 05       	cpc	r23, r1
    6d34:	21 f0       	breq	.+8      	; 0x6d3e <malloc+0x8e>
    6d36:	fb 01       	movw	r30, r22
    6d38:	93 83       	std	Z+3, r25	; 0x03
    6d3a:	82 83       	std	Z+2, r24	; 0x02
    6d3c:	04 c0       	rjmp	.+8      	; 0x6d46 <malloc+0x96>
    6d3e:	90 93 be 04 	sts	0x04BE, r25	; 0x8004be <__flp+0x1>
    6d42:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <__flp>
    6d46:	fe 01       	movw	r30, r28
    6d48:	32 96       	adiw	r30, 0x02	; 2
    6d4a:	44 c0       	rjmp	.+136    	; 0x6dd4 <malloc+0x124>
    6d4c:	fe 01       	movw	r30, r28
    6d4e:	e2 0f       	add	r30, r18
    6d50:	f3 1f       	adc	r31, r19
    6d52:	81 93       	st	Z+, r24
    6d54:	91 93       	st	Z+, r25
    6d56:	22 50       	subi	r18, 0x02	; 2
    6d58:	31 09       	sbc	r19, r1
    6d5a:	39 83       	std	Y+1, r19	; 0x01
    6d5c:	28 83       	st	Y, r18
    6d5e:	3a c0       	rjmp	.+116    	; 0x6dd4 <malloc+0x124>
    6d60:	20 91 bb 04 	lds	r18, 0x04BB	; 0x8004bb <__brkval>
    6d64:	30 91 bc 04 	lds	r19, 0x04BC	; 0x8004bc <__brkval+0x1>
    6d68:	23 2b       	or	r18, r19
    6d6a:	41 f4       	brne	.+16     	; 0x6d7c <malloc+0xcc>
    6d6c:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    6d70:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    6d74:	30 93 bc 04 	sts	0x04BC, r19	; 0x8004bc <__brkval+0x1>
    6d78:	20 93 bb 04 	sts	0x04BB, r18	; 0x8004bb <__brkval>
    6d7c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
    6d80:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
    6d84:	21 15       	cp	r18, r1
    6d86:	31 05       	cpc	r19, r1
    6d88:	41 f4       	brne	.+16     	; 0x6d9a <malloc+0xea>
    6d8a:	2d b7       	in	r18, 0x3d	; 61
    6d8c:	3e b7       	in	r19, 0x3e	; 62
    6d8e:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    6d92:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    6d96:	24 1b       	sub	r18, r20
    6d98:	35 0b       	sbc	r19, r21
    6d9a:	e0 91 bb 04 	lds	r30, 0x04BB	; 0x8004bb <__brkval>
    6d9e:	f0 91 bc 04 	lds	r31, 0x04BC	; 0x8004bc <__brkval+0x1>
    6da2:	e2 17       	cp	r30, r18
    6da4:	f3 07       	cpc	r31, r19
    6da6:	a0 f4       	brcc	.+40     	; 0x6dd0 <malloc+0x120>
    6da8:	2e 1b       	sub	r18, r30
    6daa:	3f 0b       	sbc	r19, r31
    6dac:	28 17       	cp	r18, r24
    6dae:	39 07       	cpc	r19, r25
    6db0:	78 f0       	brcs	.+30     	; 0x6dd0 <malloc+0x120>
    6db2:	ac 01       	movw	r20, r24
    6db4:	4e 5f       	subi	r20, 0xFE	; 254
    6db6:	5f 4f       	sbci	r21, 0xFF	; 255
    6db8:	24 17       	cp	r18, r20
    6dba:	35 07       	cpc	r19, r21
    6dbc:	48 f0       	brcs	.+18     	; 0x6dd0 <malloc+0x120>
    6dbe:	4e 0f       	add	r20, r30
    6dc0:	5f 1f       	adc	r21, r31
    6dc2:	50 93 bc 04 	sts	0x04BC, r21	; 0x8004bc <__brkval+0x1>
    6dc6:	40 93 bb 04 	sts	0x04BB, r20	; 0x8004bb <__brkval>
    6dca:	81 93       	st	Z+, r24
    6dcc:	91 93       	st	Z+, r25
    6dce:	02 c0       	rjmp	.+4      	; 0x6dd4 <malloc+0x124>
    6dd0:	e0 e0       	ldi	r30, 0x00	; 0
    6dd2:	f0 e0       	ldi	r31, 0x00	; 0
    6dd4:	cf 01       	movw	r24, r30
    6dd6:	df 91       	pop	r29
    6dd8:	cf 91       	pop	r28
    6dda:	1f 91       	pop	r17
    6ddc:	0f 91       	pop	r16
    6dde:	08 95       	ret

00006de0 <free>:
    6de0:	cf 93       	push	r28
    6de2:	df 93       	push	r29
    6de4:	00 97       	sbiw	r24, 0x00	; 0
    6de6:	09 f4       	brne	.+2      	; 0x6dea <free+0xa>
    6de8:	81 c0       	rjmp	.+258    	; 0x6eec <free+0x10c>
    6dea:	fc 01       	movw	r30, r24
    6dec:	32 97       	sbiw	r30, 0x02	; 2
    6dee:	13 82       	std	Z+3, r1	; 0x03
    6df0:	12 82       	std	Z+2, r1	; 0x02
    6df2:	a0 91 bd 04 	lds	r26, 0x04BD	; 0x8004bd <__flp>
    6df6:	b0 91 be 04 	lds	r27, 0x04BE	; 0x8004be <__flp+0x1>
    6dfa:	10 97       	sbiw	r26, 0x00	; 0
    6dfc:	81 f4       	brne	.+32     	; 0x6e1e <free+0x3e>
    6dfe:	20 81       	ld	r18, Z
    6e00:	31 81       	ldd	r19, Z+1	; 0x01
    6e02:	82 0f       	add	r24, r18
    6e04:	93 1f       	adc	r25, r19
    6e06:	20 91 bb 04 	lds	r18, 0x04BB	; 0x8004bb <__brkval>
    6e0a:	30 91 bc 04 	lds	r19, 0x04BC	; 0x8004bc <__brkval+0x1>
    6e0e:	28 17       	cp	r18, r24
    6e10:	39 07       	cpc	r19, r25
    6e12:	51 f5       	brne	.+84     	; 0x6e68 <free+0x88>
    6e14:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <__brkval+0x1>
    6e18:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <__brkval>
    6e1c:	67 c0       	rjmp	.+206    	; 0x6eec <free+0x10c>
    6e1e:	ed 01       	movw	r28, r26
    6e20:	20 e0       	ldi	r18, 0x00	; 0
    6e22:	30 e0       	ldi	r19, 0x00	; 0
    6e24:	ce 17       	cp	r28, r30
    6e26:	df 07       	cpc	r29, r31
    6e28:	40 f4       	brcc	.+16     	; 0x6e3a <free+0x5a>
    6e2a:	4a 81       	ldd	r20, Y+2	; 0x02
    6e2c:	5b 81       	ldd	r21, Y+3	; 0x03
    6e2e:	9e 01       	movw	r18, r28
    6e30:	41 15       	cp	r20, r1
    6e32:	51 05       	cpc	r21, r1
    6e34:	f1 f0       	breq	.+60     	; 0x6e72 <free+0x92>
    6e36:	ea 01       	movw	r28, r20
    6e38:	f5 cf       	rjmp	.-22     	; 0x6e24 <free+0x44>
    6e3a:	d3 83       	std	Z+3, r29	; 0x03
    6e3c:	c2 83       	std	Z+2, r28	; 0x02
    6e3e:	40 81       	ld	r20, Z
    6e40:	51 81       	ldd	r21, Z+1	; 0x01
    6e42:	84 0f       	add	r24, r20
    6e44:	95 1f       	adc	r25, r21
    6e46:	c8 17       	cp	r28, r24
    6e48:	d9 07       	cpc	r29, r25
    6e4a:	59 f4       	brne	.+22     	; 0x6e62 <free+0x82>
    6e4c:	88 81       	ld	r24, Y
    6e4e:	99 81       	ldd	r25, Y+1	; 0x01
    6e50:	84 0f       	add	r24, r20
    6e52:	95 1f       	adc	r25, r21
    6e54:	02 96       	adiw	r24, 0x02	; 2
    6e56:	91 83       	std	Z+1, r25	; 0x01
    6e58:	80 83       	st	Z, r24
    6e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    6e5c:	9b 81       	ldd	r25, Y+3	; 0x03
    6e5e:	93 83       	std	Z+3, r25	; 0x03
    6e60:	82 83       	std	Z+2, r24	; 0x02
    6e62:	21 15       	cp	r18, r1
    6e64:	31 05       	cpc	r19, r1
    6e66:	29 f4       	brne	.+10     	; 0x6e72 <free+0x92>
    6e68:	f0 93 be 04 	sts	0x04BE, r31	; 0x8004be <__flp+0x1>
    6e6c:	e0 93 bd 04 	sts	0x04BD, r30	; 0x8004bd <__flp>
    6e70:	3d c0       	rjmp	.+122    	; 0x6eec <free+0x10c>
    6e72:	e9 01       	movw	r28, r18
    6e74:	fb 83       	std	Y+3, r31	; 0x03
    6e76:	ea 83       	std	Y+2, r30	; 0x02
    6e78:	49 91       	ld	r20, Y+
    6e7a:	59 91       	ld	r21, Y+
    6e7c:	c4 0f       	add	r28, r20
    6e7e:	d5 1f       	adc	r29, r21
    6e80:	ec 17       	cp	r30, r28
    6e82:	fd 07       	cpc	r31, r29
    6e84:	61 f4       	brne	.+24     	; 0x6e9e <free+0xbe>
    6e86:	80 81       	ld	r24, Z
    6e88:	91 81       	ldd	r25, Z+1	; 0x01
    6e8a:	84 0f       	add	r24, r20
    6e8c:	95 1f       	adc	r25, r21
    6e8e:	02 96       	adiw	r24, 0x02	; 2
    6e90:	e9 01       	movw	r28, r18
    6e92:	99 83       	std	Y+1, r25	; 0x01
    6e94:	88 83       	st	Y, r24
    6e96:	82 81       	ldd	r24, Z+2	; 0x02
    6e98:	93 81       	ldd	r25, Z+3	; 0x03
    6e9a:	9b 83       	std	Y+3, r25	; 0x03
    6e9c:	8a 83       	std	Y+2, r24	; 0x02
    6e9e:	e0 e0       	ldi	r30, 0x00	; 0
    6ea0:	f0 e0       	ldi	r31, 0x00	; 0
    6ea2:	12 96       	adiw	r26, 0x02	; 2
    6ea4:	8d 91       	ld	r24, X+
    6ea6:	9c 91       	ld	r25, X
    6ea8:	13 97       	sbiw	r26, 0x03	; 3
    6eaa:	00 97       	sbiw	r24, 0x00	; 0
    6eac:	19 f0       	breq	.+6      	; 0x6eb4 <free+0xd4>
    6eae:	fd 01       	movw	r30, r26
    6eb0:	dc 01       	movw	r26, r24
    6eb2:	f7 cf       	rjmp	.-18     	; 0x6ea2 <free+0xc2>
    6eb4:	8d 91       	ld	r24, X+
    6eb6:	9c 91       	ld	r25, X
    6eb8:	11 97       	sbiw	r26, 0x01	; 1
    6eba:	9d 01       	movw	r18, r26
    6ebc:	2e 5f       	subi	r18, 0xFE	; 254
    6ebe:	3f 4f       	sbci	r19, 0xFF	; 255
    6ec0:	82 0f       	add	r24, r18
    6ec2:	93 1f       	adc	r25, r19
    6ec4:	20 91 bb 04 	lds	r18, 0x04BB	; 0x8004bb <__brkval>
    6ec8:	30 91 bc 04 	lds	r19, 0x04BC	; 0x8004bc <__brkval+0x1>
    6ecc:	28 17       	cp	r18, r24
    6ece:	39 07       	cpc	r19, r25
    6ed0:	69 f4       	brne	.+26     	; 0x6eec <free+0x10c>
    6ed2:	30 97       	sbiw	r30, 0x00	; 0
    6ed4:	29 f4       	brne	.+10     	; 0x6ee0 <free+0x100>
    6ed6:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <__flp+0x1>
    6eda:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <__flp>
    6ede:	02 c0       	rjmp	.+4      	; 0x6ee4 <free+0x104>
    6ee0:	13 82       	std	Z+3, r1	; 0x03
    6ee2:	12 82       	std	Z+2, r1	; 0x02
    6ee4:	b0 93 bc 04 	sts	0x04BC, r27	; 0x8004bc <__brkval+0x1>
    6ee8:	a0 93 bb 04 	sts	0x04BB, r26	; 0x8004bb <__brkval>
    6eec:	df 91       	pop	r29
    6eee:	cf 91       	pop	r28
    6ef0:	08 95       	ret

00006ef2 <strcmp>:
    6ef2:	fb 01       	movw	r30, r22
    6ef4:	dc 01       	movw	r26, r24
    6ef6:	8d 91       	ld	r24, X+
    6ef8:	01 90       	ld	r0, Z+
    6efa:	80 19       	sub	r24, r0
    6efc:	01 10       	cpse	r0, r1
    6efe:	d9 f3       	breq	.-10     	; 0x6ef6 <strcmp+0x4>
    6f00:	99 0b       	sbc	r25, r25
    6f02:	08 95       	ret

00006f04 <strcpy>:
    6f04:	fb 01       	movw	r30, r22
    6f06:	dc 01       	movw	r26, r24
    6f08:	01 90       	ld	r0, Z+
    6f0a:	0d 92       	st	X+, r0
    6f0c:	00 20       	and	r0, r0
    6f0e:	e1 f7       	brne	.-8      	; 0x6f08 <strcpy+0x4>
    6f10:	08 95       	ret

00006f12 <strncpy>:
    6f12:	fb 01       	movw	r30, r22
    6f14:	dc 01       	movw	r26, r24
    6f16:	41 50       	subi	r20, 0x01	; 1
    6f18:	50 40       	sbci	r21, 0x00	; 0
    6f1a:	48 f0       	brcs	.+18     	; 0x6f2e <strncpy+0x1c>
    6f1c:	01 90       	ld	r0, Z+
    6f1e:	0d 92       	st	X+, r0
    6f20:	00 20       	and	r0, r0
    6f22:	c9 f7       	brne	.-14     	; 0x6f16 <strncpy+0x4>
    6f24:	01 c0       	rjmp	.+2      	; 0x6f28 <strncpy+0x16>
    6f26:	1d 92       	st	X+, r1
    6f28:	41 50       	subi	r20, 0x01	; 1
    6f2a:	50 40       	sbci	r21, 0x00	; 0
    6f2c:	e0 f7       	brcc	.-8      	; 0x6f26 <strncpy+0x14>
    6f2e:	08 95       	ret

00006f30 <strstr>:
    6f30:	fb 01       	movw	r30, r22
    6f32:	51 91       	ld	r21, Z+
    6f34:	55 23       	and	r21, r21
    6f36:	a9 f0       	breq	.+42     	; 0x6f62 <strstr+0x32>
    6f38:	bf 01       	movw	r22, r30
    6f3a:	dc 01       	movw	r26, r24
    6f3c:	4d 91       	ld	r20, X+
    6f3e:	45 17       	cp	r20, r21
    6f40:	41 11       	cpse	r20, r1
    6f42:	e1 f7       	brne	.-8      	; 0x6f3c <strstr+0xc>
    6f44:	59 f4       	brne	.+22     	; 0x6f5c <strstr+0x2c>
    6f46:	cd 01       	movw	r24, r26
    6f48:	01 90       	ld	r0, Z+
    6f4a:	00 20       	and	r0, r0
    6f4c:	49 f0       	breq	.+18     	; 0x6f60 <strstr+0x30>
    6f4e:	4d 91       	ld	r20, X+
    6f50:	40 15       	cp	r20, r0
    6f52:	41 11       	cpse	r20, r1
    6f54:	c9 f3       	breq	.-14     	; 0x6f48 <strstr+0x18>
    6f56:	fb 01       	movw	r30, r22
    6f58:	41 11       	cpse	r20, r1
    6f5a:	ef cf       	rjmp	.-34     	; 0x6f3a <strstr+0xa>
    6f5c:	81 e0       	ldi	r24, 0x01	; 1
    6f5e:	90 e0       	ldi	r25, 0x00	; 0
    6f60:	01 97       	sbiw	r24, 0x01	; 1
    6f62:	08 95       	ret

00006f64 <eeprom_read_block>:
    6f64:	dc 01       	movw	r26, r24
    6f66:	cb 01       	movw	r24, r22

00006f68 <eeprom_read_blraw>:
    6f68:	fc 01       	movw	r30, r24
    6f6a:	e1 99       	sbic	0x1c, 1	; 28
    6f6c:	fe cf       	rjmp	.-4      	; 0x6f6a <eeprom_read_blraw+0x2>
    6f6e:	06 c0       	rjmp	.+12     	; 0x6f7c <eeprom_read_blraw+0x14>
    6f70:	ff bb       	out	0x1f, r31	; 31
    6f72:	ee bb       	out	0x1e, r30	; 30
    6f74:	e0 9a       	sbi	0x1c, 0	; 28
    6f76:	31 96       	adiw	r30, 0x01	; 1
    6f78:	0d b2       	in	r0, 0x1d	; 29
    6f7a:	0d 92       	st	X+, r0
    6f7c:	41 50       	subi	r20, 0x01	; 1
    6f7e:	50 40       	sbci	r21, 0x00	; 0
    6f80:	b8 f7       	brcc	.-18     	; 0x6f70 <eeprom_read_blraw+0x8>
    6f82:	08 95       	ret

00006f84 <_exit>:
    6f84:	f8 94       	cli

00006f86 <__stop_program>:
    6f86:	ff cf       	rjmp	.-2      	; 0x6f86 <__stop_program>
