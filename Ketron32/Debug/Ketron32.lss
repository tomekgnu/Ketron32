
Ketron32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d6  00800060  000033e4  00003478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002fc  00800136  00800136  0000354e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000354e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003580  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005d0  00000000  00000000  000035bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006ca0  00000000  00000000  00003b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019a5  00000000  00000000  0000a82c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000040d3  00000000  00000000  0000c1d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000016f4  00000000  00000000  000102a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000121e  00000000  00000000  00011998  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008499  00000000  00000000  00012bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000638  00000000  00000000  0001b04f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__ctors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__vector_4>
      14:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__vector_5>
      18:	0c 94 05 18 	jmp	0x300a	; 0x300a <__vector_6>
      1c:	0c 94 ab 17 	jmp	0x2f56	; 0x2f56 <__vector_7>
      20:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <__vector_8>
      24:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <__vector_9>
      28:	0c 94 7e 17 	jmp	0x2efc	; 0x2efc <__vector_10>
      2c:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__vector_11>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 2c 19 	jmp	0x3258	; 0x3258 <__vector_13>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 f5 18 	jmp	0x31ea	; 0x31ea <__vector_15>
      40:	0c 94 c9 00 	jmp	0x192	; 0x192 <__vector_16>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000054 <LcdCustomChar>:
      54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      84:	03 07 0f 1f 0f 07 03 00 00 1f 1f 1f 1f 1f 1f 00     ................
      94:	1b 1b 1b 1b 1b 1b 1b 00 18 1c 1e 1f 1e 1c 18 00     ................
      a4:	00 04 04 0e 0e 1f 1f 00 00 1f 1f 0e 0e 04 04 00     ................
	...
      bc:	00 0e 19 15 13 0e 00 00 00 0e 15 15 15 0e 00 00     ................
      cc:	00 0e 13 15 19 0e 00 00 00 0e 11 1f 11 0e 00 00     ................

000000dc <__ctors_end>:
      dc:	11 24       	eor	r1, r1
      de:	1f be       	out	0x3f, r1	; 63
      e0:	cf e5       	ldi	r28, 0x5F	; 95
      e2:	d8 e0       	ldi	r29, 0x08	; 8
      e4:	de bf       	out	0x3e, r29	; 62
      e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
      e8:	11 e0       	ldi	r17, 0x01	; 1
      ea:	a0 e6       	ldi	r26, 0x60	; 96
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	e4 ee       	ldi	r30, 0xE4	; 228
      f0:	f3 e3       	ldi	r31, 0x33	; 51
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x10>
      f4:	05 90       	lpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	a6 33       	cpi	r26, 0x36	; 54
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0xc>

000000fe <__do_clear_bss>:
      fe:	24 e0       	ldi	r18, 0x04	; 4
     100:	a6 e3       	ldi	r26, 0x36	; 54
     102:	b1 e0       	ldi	r27, 0x01	; 1
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	a2 33       	cpi	r26, 0x32	; 50
     10a:	b2 07       	cpc	r27, r18
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
     10e:	0e 94 4f 12 	call	0x249e	; 0x249e <main>
     112:	0c 94 f0 19 	jmp	0x33e0	; 0x33e0 <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <a2dSetPrescaler>:

// return TRUE if conversion is complete
u08 a2dIsComplete(void)
{
	return bit_is_set(ADCSR, ADSC);
}
     11a:	96 b1       	in	r25, 0x06	; 6
     11c:	98 7f       	andi	r25, 0xF8	; 248
     11e:	89 2b       	or	r24, r25
     120:	86 b9       	out	0x06, r24	; 6
     122:	08 95       	ret

00000124 <a2dSetReference>:
     124:	27 b1       	in	r18, 0x07	; 7
     126:	2f 73       	andi	r18, 0x3F	; 63
     128:	30 e4       	ldi	r19, 0x40	; 64
     12a:	83 9f       	mul	r24, r19
     12c:	c0 01       	movw	r24, r0
     12e:	11 24       	eor	r1, r1
     130:	82 2b       	or	r24, r18
     132:	87 b9       	out	0x07, r24	; 7
     134:	08 95       	ret

00000136 <a2dInit>:
     136:	37 9a       	sbi	0x06, 7	; 6
     138:	35 98       	cbi	0x06, 5	; 6
     13a:	86 e0       	ldi	r24, 0x06	; 6
     13c:	0e 94 8d 00 	call	0x11a	; 0x11a <a2dSetPrescaler>
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	0e 94 92 00 	call	0x124	; 0x124 <a2dSetReference>
     146:	3d 98       	cbi	0x07, 5	; 7
     148:	33 9a       	sbi	0x06, 3	; 6
     14a:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <a2dCompleteFlag>
     14e:	78 94       	sei
     150:	08 95       	ret

00000152 <a2dSetChannel>:
     152:	97 b1       	in	r25, 0x07	; 7
     154:	90 7e       	andi	r25, 0xE0	; 224
     156:	8f 71       	andi	r24, 0x1F	; 31
     158:	89 2b       	or	r24, r25
     15a:	87 b9       	out	0x07, r24	; 7
     15c:	08 95       	ret

0000015e <a2dStartConvert>:
     15e:	34 9a       	sbi	0x06, 4	; 6
     160:	36 9a       	sbi	0x06, 6	; 6
     162:	08 95       	ret

00000164 <a2dConvert10bit>:

// Perform a 10-bit conversion
// starts conversion, waits until conversion is done, and returns result
unsigned short a2dConvert10bit(unsigned char ch)
{
	a2dCompleteFlag = FALSE;				// clear conversion complete flag
     164:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <a2dCompleteFlag>
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
     168:	97 b1       	in	r25, 0x07	; 7
     16a:	90 7e       	andi	r25, 0xE0	; 224
     16c:	8f 71       	andi	r24, 0x1F	; 31
     16e:	89 2b       	or	r24, r25
     170:	87 b9       	out	0x07, r24	; 7
	sbi(ADCSR, ADIF);						// clear hardware "conversion complete" flag 
     172:	34 9a       	sbi	0x06, 4	; 6
	sbi(ADCSR, ADSC);						// start conversion
     174:	36 9a       	sbi	0x06, 6	; 6
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSR, ADSC) );		// wait until conversion complete
     176:	36 99       	sbic	0x06, 6	; 6
     178:	fe cf       	rjmp	.-4      	; 0x176 <a2dConvert10bit+0x12>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	return (inb(ADCL) | (inb(ADCH)<<8));	// read ADC (full 10 bits);
     17a:	84 b1       	in	r24, 0x04	; 4
     17c:	25 b1       	in	r18, 0x05	; 5
     17e:	90 e0       	ldi	r25, 0x00	; 0
}
     180:	92 2b       	or	r25, r18
     182:	08 95       	ret

00000184 <a2dConvert8bit>:
// Perform a 8-bit conversion.
// starts conversion, waits until conversion is done, and returns result
unsigned char a2dConvert8bit(unsigned char ch)
{
	// do 10-bit conversion and return highest 8 bits
	return a2dConvert10bit(ch)>>2;			// return ADC MSB byte
     184:	0e 94 b2 00 	call	0x164	; 0x164 <a2dConvert10bit>
     188:	96 95       	lsr	r25
     18a:	87 95       	ror	r24
     18c:	96 95       	lsr	r25
     18e:	87 95       	ror	r24
}
     190:	08 95       	ret

00000192 <__vector_16>:

//! Interrupt handler for ADC complete interrupt.
SIGNAL(ADC_vect)
{
     192:	1f 92       	push	r1
     194:	0f 92       	push	r0
     196:	0f b6       	in	r0, 0x3f	; 63
     198:	0f 92       	push	r0
     19a:	11 24       	eor	r1, r1
     19c:	8f 93       	push	r24
	// set the a2d conversion flag to indicate "complete"
	a2dCompleteFlag = TRUE;
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <a2dCompleteFlag>
	
}
     1a4:	8f 91       	pop	r24
     1a6:	0f 90       	pop	r0
     1a8:	0f be       	out	0x3f, r0	; 63
     1aa:	0f 90       	pop	r0
     1ac:	1f 90       	pop	r1
     1ae:	18 95       	reti

000001b0 <bufferInit>:
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
	return data;
}
     1b0:	fc 01       	movw	r30, r24
     1b2:	8f b7       	in	r24, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	71 83       	std	Z+1, r23	; 0x01
     1b8:	60 83       	st	Z, r22
     1ba:	53 83       	std	Z+3, r21	; 0x03
     1bc:	42 83       	std	Z+2, r20	; 0x02
     1be:	17 82       	std	Z+7, r1	; 0x07
     1c0:	16 82       	std	Z+6, r1	; 0x06
     1c2:	15 82       	std	Z+5, r1	; 0x05
     1c4:	14 82       	std	Z+4, r1	; 0x04
     1c6:	8f bf       	out	0x3f, r24	; 63
     1c8:	08 95       	ret

000001ca <bufferGetFromFront>:
     1ca:	fc 01       	movw	r30, r24
     1cc:	9f b7       	in	r25, 0x3f	; 63
     1ce:	f8 94       	cli
     1d0:	44 81       	ldd	r20, Z+4	; 0x04
     1d2:	55 81       	ldd	r21, Z+5	; 0x05
     1d4:	41 15       	cp	r20, r1
     1d6:	51 05       	cpc	r21, r1
     1d8:	c9 f0       	breq	.+50     	; 0x20c <bufferGetFromFront+0x42>
     1da:	26 81       	ldd	r18, Z+6	; 0x06
     1dc:	37 81       	ldd	r19, Z+7	; 0x07
     1de:	a0 81       	ld	r26, Z
     1e0:	b1 81       	ldd	r27, Z+1	; 0x01
     1e2:	a2 0f       	add	r26, r18
     1e4:	b3 1f       	adc	r27, r19
     1e6:	8c 91       	ld	r24, X
     1e8:	2f 5f       	subi	r18, 0xFF	; 255
     1ea:	3f 4f       	sbci	r19, 0xFF	; 255
     1ec:	37 83       	std	Z+7, r19	; 0x07
     1ee:	26 83       	std	Z+6, r18	; 0x06
     1f0:	62 81       	ldd	r22, Z+2	; 0x02
     1f2:	73 81       	ldd	r23, Z+3	; 0x03
     1f4:	26 17       	cp	r18, r22
     1f6:	37 07       	cpc	r19, r23
     1f8:	20 f0       	brcs	.+8      	; 0x202 <bufferGetFromFront+0x38>
     1fa:	26 1b       	sub	r18, r22
     1fc:	37 0b       	sbc	r19, r23
     1fe:	37 83       	std	Z+7, r19	; 0x07
     200:	26 83       	std	Z+6, r18	; 0x06
     202:	41 50       	subi	r20, 0x01	; 1
     204:	51 09       	sbc	r21, r1
     206:	55 83       	std	Z+5, r21	; 0x05
     208:	44 83       	std	Z+4, r20	; 0x04
     20a:	01 c0       	rjmp	.+2      	; 0x20e <bufferGetFromFront+0x44>
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	9f bf       	out	0x3f, r25	; 63
     210:	08 95       	ret

00000212 <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     212:	fc 01       	movw	r30, r24
     214:	36 2f       	mov	r19, r22
	// begin critical section
	CRITICAL_SECTION_START;
     216:	2f b7       	in	r18, 0x3f	; 63
     218:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     21a:	44 81       	ldd	r20, Z+4	; 0x04
     21c:	55 81       	ldd	r21, Z+5	; 0x05
     21e:	62 81       	ldd	r22, Z+2	; 0x02
     220:	73 81       	ldd	r23, Z+3	; 0x03
     222:	46 17       	cp	r20, r22
     224:	57 07       	cpc	r21, r23
     226:	98 f4       	brcc	.+38     	; 0x24e <bufferAddToEnd+0x3c>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     228:	86 81       	ldd	r24, Z+6	; 0x06
     22a:	97 81       	ldd	r25, Z+7	; 0x07
     22c:	84 0f       	add	r24, r20
     22e:	95 1f       	adc	r25, r21
     230:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__udivmodhi4>
     234:	a0 81       	ld	r26, Z
     236:	b1 81       	ldd	r27, Z+1	; 0x01
     238:	a8 0f       	add	r26, r24
     23a:	b9 1f       	adc	r27, r25
     23c:	3c 93       	st	X, r19
		// increment the length
		buffer->datalength++;
     23e:	84 81       	ldd	r24, Z+4	; 0x04
     240:	95 81       	ldd	r25, Z+5	; 0x05
     242:	01 96       	adiw	r24, 0x01	; 1
     244:	95 83       	std	Z+5, r25	; 0x05
     246:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     248:	2f bf       	out	0x3f, r18	; 63
		// return success
		return -1;
     24a:	8f ef       	ldi	r24, 0xFF	; 255
     24c:	08 95       	ret
	}
	// end critical section
	CRITICAL_SECTION_END;
     24e:	2f bf       	out	0x3f, r18	; 63
	// return failure
	return 0;
     250:	80 e0       	ldi	r24, 0x00	; 0
}
     252:	08 95       	ret

00000254 <mem_cpy>:
		*tp = 0;
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
     254:	cf 93       	push	r28
     256:	df 93       	push	r29
     258:	db 01       	movw	r26, r22
     25a:	fc 01       	movw	r30, r24
     25c:	9a 01       	movw	r18, r20
     25e:	22 30       	cpi	r18, 0x02	; 2
     260:	31 05       	cpc	r19, r1
     262:	38 f0       	brcs	.+14     	; 0x272 <mem_cpy+0x1e>
     264:	cd 91       	ld	r28, X+
     266:	dd 91       	ld	r29, X+
     268:	c1 93       	st	Z+, r28
     26a:	d1 93       	st	Z+, r29
     26c:	22 50       	subi	r18, 0x02	; 2
     26e:	31 09       	sbc	r19, r1
     270:	f6 cf       	rjmp	.-20     	; 0x25e <mem_cpy+0xa>
     272:	9a 01       	movw	r18, r20
     274:	2e 7f       	andi	r18, 0xFE	; 254
     276:	fc 01       	movw	r30, r24
     278:	e2 0f       	add	r30, r18
     27a:	f3 1f       	adc	r31, r19
     27c:	db 01       	movw	r26, r22
     27e:	a2 0f       	add	r26, r18
     280:	b3 1f       	adc	r27, r19
     282:	42 17       	cp	r20, r18
     284:	53 07       	cpc	r21, r19
     286:	11 f0       	breq	.+4      	; 0x28c <mem_cpy+0x38>
     288:	2c 91       	ld	r18, X
     28a:	20 83       	st	Z, r18
     28c:	df 91       	pop	r29
     28e:	cf 91       	pop	r28
     290:	08 95       	ret

00000292 <move_window>:
     292:	4f 92       	push	r4
     294:	5f 92       	push	r5
     296:	6f 92       	push	r6
     298:	7f 92       	push	r7
     29a:	af 92       	push	r10
     29c:	bf 92       	push	r11
     29e:	cf 92       	push	r12
     2a0:	df 92       	push	r13
     2a2:	ef 92       	push	r14
     2a4:	ff 92       	push	r15
     2a6:	0f 93       	push	r16
     2a8:	1f 93       	push	r17
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	fc 01       	movw	r30, r24
     2b0:	46 a4       	ldd	r4, Z+46	; 0x2e
     2b2:	57 a4       	ldd	r5, Z+47	; 0x2f
     2b4:	60 a8       	ldd	r6, Z+48	; 0x30
     2b6:	71 a8       	ldd	r7, Z+49	; 0x31
     2b8:	44 16       	cp	r4, r20
     2ba:	55 06       	cpc	r5, r21
     2bc:	66 06       	cpc	r6, r22
     2be:	77 06       	cpc	r7, r23
     2c0:	11 f4       	brne	.+4      	; 0x2c6 <move_window+0x34>
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	50 c0       	rjmp	.+160    	; 0x366 <move_window+0xd4>
     2c6:	6a 01       	movw	r12, r20
     2c8:	7b 01       	movw	r14, r22
     2ca:	ec 01       	movw	r28, r24
     2cc:	84 81       	ldd	r24, Z+4	; 0x04
     2ce:	81 11       	cpse	r24, r1
     2d0:	06 c0       	rjmp	.+12     	; 0x2de <move_window+0x4c>
     2d2:	c1 14       	cp	r12, r1
     2d4:	d1 04       	cpc	r13, r1
     2d6:	e1 04       	cpc	r14, r1
     2d8:	f1 04       	cpc	r15, r1
     2da:	99 f3       	breq	.-26     	; 0x2c2 <move_window+0x30>
     2dc:	35 c0       	rjmp	.+106    	; 0x348 <move_window+0xb6>
     2de:	5f 01       	movw	r10, r30
     2e0:	f2 e3       	ldi	r31, 0x32	; 50
     2e2:	af 0e       	add	r10, r31
     2e4:	b1 1c       	adc	r11, r1
     2e6:	01 e0       	ldi	r16, 0x01	; 1
     2e8:	a3 01       	movw	r20, r6
     2ea:	92 01       	movw	r18, r4
     2ec:	b5 01       	movw	r22, r10
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
     2f0:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <disk_write>
     2f4:	88 23       	and	r24, r24
     2f6:	11 f0       	breq	.+4      	; 0x2fc <move_window+0x6a>
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	35 c0       	rjmp	.+106    	; 0x366 <move_window+0xd4>
     2fc:	1c 82       	std	Y+4, r1	; 0x04
     2fe:	4a a1       	ldd	r20, Y+34	; 0x22
     300:	5b a1       	ldd	r21, Y+35	; 0x23
     302:	6c a1       	ldd	r22, Y+36	; 0x24
     304:	7d a1       	ldd	r23, Y+37	; 0x25
     306:	8e 8d       	ldd	r24, Y+30	; 0x1e
     308:	9f 8d       	ldd	r25, Y+31	; 0x1f
     30a:	a8 a1       	ldd	r26, Y+32	; 0x20
     30c:	b9 a1       	ldd	r27, Y+33	; 0x21
     30e:	84 0f       	add	r24, r20
     310:	95 1f       	adc	r25, r21
     312:	a6 1f       	adc	r26, r22
     314:	b7 1f       	adc	r27, r23
     316:	48 16       	cp	r4, r24
     318:	59 06       	cpc	r5, r25
     31a:	6a 06       	cpc	r6, r26
     31c:	7b 06       	cpc	r7, r27
     31e:	c8 f6       	brcc	.-78     	; 0x2d2 <move_window+0x40>
     320:	1b 81       	ldd	r17, Y+3	; 0x03
     322:	12 30       	cpi	r17, 0x02	; 2
     324:	b0 f2       	brcs	.-84     	; 0x2d2 <move_window+0x40>
     326:	8e 8d       	ldd	r24, Y+30	; 0x1e
     328:	9f 8d       	ldd	r25, Y+31	; 0x1f
     32a:	a8 a1       	ldd	r26, Y+32	; 0x20
     32c:	b9 a1       	ldd	r27, Y+33	; 0x21
     32e:	48 0e       	add	r4, r24
     330:	59 1e       	adc	r5, r25
     332:	6a 1e       	adc	r6, r26
     334:	7b 1e       	adc	r7, r27
     336:	01 e0       	ldi	r16, 0x01	; 1
     338:	a3 01       	movw	r20, r6
     33a:	92 01       	movw	r18, r4
     33c:	b5 01       	movw	r22, r10
     33e:	89 81       	ldd	r24, Y+1	; 0x01
     340:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <disk_write>
     344:	11 50       	subi	r17, 0x01	; 1
     346:	ed cf       	rjmp	.-38     	; 0x322 <move_window+0x90>
     348:	01 e0       	ldi	r16, 0x01	; 1
     34a:	a7 01       	movw	r20, r14
     34c:	96 01       	movw	r18, r12
     34e:	be 01       	movw	r22, r28
     350:	6e 5c       	subi	r22, 0xCE	; 206
     352:	7f 4f       	sbci	r23, 0xFF	; 255
     354:	89 81       	ldd	r24, Y+1	; 0x01
     356:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <disk_read>
     35a:	81 11       	cpse	r24, r1
     35c:	cd cf       	rjmp	.-102    	; 0x2f8 <move_window+0x66>
     35e:	ce a6       	std	Y+46, r12	; 0x2e
     360:	df a6       	std	Y+47, r13	; 0x2f
     362:	e8 aa       	std	Y+48, r14	; 0x30
     364:	f9 aa       	std	Y+49, r15	; 0x31
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	ff 90       	pop	r15
     370:	ef 90       	pop	r14
     372:	df 90       	pop	r13
     374:	cf 90       	pop	r12
     376:	bf 90       	pop	r11
     378:	af 90       	pop	r10
     37a:	7f 90       	pop	r7
     37c:	6f 90       	pop	r6
     37e:	5f 90       	pop	r5
     380:	4f 90       	pop	r4
     382:	08 95       	ret

00000384 <check_fs>:
     384:	0f 93       	push	r16
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	ec 01       	movw	r28, r24
     38c:	9a 01       	movw	r18, r20
     38e:	ab 01       	movw	r20, r22
     390:	bc 01       	movw	r22, r24
     392:	6e 5c       	subi	r22, 0xCE	; 206
     394:	7f 4f       	sbci	r23, 0xFF	; 255
     396:	01 e0       	ldi	r16, 0x01	; 1
     398:	89 81       	ldd	r24, Y+1	; 0x01
     39a:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <disk_read>
     39e:	81 11       	cpse	r24, r1
     3a0:	22 c0       	rjmp	.+68     	; 0x3e6 <check_fs+0x62>
     3a2:	fe 01       	movw	r30, r28
     3a4:	e0 5d       	subi	r30, 0xD0	; 208
     3a6:	fd 4f       	sbci	r31, 0xFD	; 253
     3a8:	80 81       	ld	r24, Z
     3aa:	91 81       	ldd	r25, Z+1	; 0x01
     3ac:	85 35       	cpi	r24, 0x55	; 85
     3ae:	9a 4a       	sbci	r25, 0xAA	; 170
     3b0:	e1 f4       	brne	.+56     	; 0x3ea <check_fs+0x66>
     3b2:	e8 5c       	subi	r30, 0xC8	; 200
     3b4:	f1 40       	sbci	r31, 0x01	; 1
     3b6:	80 81       	ld	r24, Z
     3b8:	91 81       	ldd	r25, Z+1	; 0x01
     3ba:	a2 81       	ldd	r26, Z+2	; 0x02
     3bc:	b3 81       	ldd	r27, Z+3	; 0x03
     3be:	bb 27       	eor	r27, r27
     3c0:	86 34       	cpi	r24, 0x46	; 70
     3c2:	91 44       	sbci	r25, 0x41	; 65
     3c4:	a4 45       	sbci	r26, 0x54	; 84
     3c6:	b1 05       	cpc	r27, r1
     3c8:	91 f0       	breq	.+36     	; 0x3ee <check_fs+0x6a>
     3ca:	cc 57       	subi	r28, 0x7C	; 124
     3cc:	df 4f       	sbci	r29, 0xFF	; 255
     3ce:	48 81       	ld	r20, Y
     3d0:	59 81       	ldd	r21, Y+1	; 0x01
     3d2:	6a 81       	ldd	r22, Y+2	; 0x02
     3d4:	7b 81       	ldd	r23, Y+3	; 0x03
     3d6:	77 27       	eor	r23, r23
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	46 34       	cpi	r20, 0x46	; 70
     3dc:	51 44       	sbci	r21, 0x41	; 65
     3de:	64 45       	sbci	r22, 0x54	; 84
     3e0:	71 05       	cpc	r23, r1
     3e2:	31 f4       	brne	.+12     	; 0x3f0 <check_fs+0x6c>
     3e4:	04 c0       	rjmp	.+8      	; 0x3ee <check_fs+0x6a>
     3e6:	83 e0       	ldi	r24, 0x03	; 3
     3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <check_fs+0x6c>
     3ea:	82 e0       	ldi	r24, 0x02	; 2
     3ec:	01 c0       	rjmp	.+2      	; 0x3f0 <check_fs+0x6c>
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	0f 91       	pop	r16
     3f6:	08 95       	ret

000003f8 <chk_mounted>:
     3f8:	2f 92       	push	r2
     3fa:	3f 92       	push	r3
     3fc:	4f 92       	push	r4
     3fe:	5f 92       	push	r5
     400:	6f 92       	push	r6
     402:	7f 92       	push	r7
     404:	8f 92       	push	r8
     406:	9f 92       	push	r9
     408:	af 92       	push	r10
     40a:	bf 92       	push	r11
     40c:	cf 92       	push	r12
     40e:	df 92       	push	r13
     410:	ef 92       	push	r14
     412:	ff 92       	push	r15
     414:	0f 93       	push	r16
     416:	1f 93       	push	r17
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
     420:	2e 97       	sbiw	r28, 0x0e	; 14
     422:	0f b6       	in	r0, 0x3f	; 63
     424:	f8 94       	cli
     426:	de bf       	out	0x3e, r29	; 62
     428:	0f be       	out	0x3f, r0	; 63
     42a:	cd bf       	out	0x3d, r28	; 61
     42c:	dc 01       	movw	r26, r24
     42e:	ed 91       	ld	r30, X+
     430:	fc 91       	ld	r31, X
     432:	11 97       	sbiw	r26, 0x01	; 1
     434:	20 81       	ld	r18, Z
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	20 53       	subi	r18, 0x30	; 48
     43a:	31 09       	sbc	r19, r1
     43c:	2a 30       	cpi	r18, 0x0A	; 10
     43e:	31 05       	cpc	r19, r1
     440:	38 f4       	brcc	.+14     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     442:	51 81       	ldd	r21, Z+1	; 0x01
     444:	5a 33       	cpi	r21, 0x3A	; 58
     446:	21 f4       	brne	.+8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     448:	32 96       	adiw	r30, 0x02	; 2
     44a:	ed 93       	st	X+, r30
     44c:	fc 93       	st	X, r31
     44e:	03 c0       	rjmp	.+6      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     450:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__data_end>
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	23 2b       	or	r18, r19
     458:	09 f0       	breq	.+2      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     45a:	0c c2       	rjmp	.+1048   	; 0x874 <__stack+0x15>
     45c:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <FatFs>
     460:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <FatFs+0x1>
     464:	fe 87       	std	Y+14, r31	; 0x0e
     466:	ed 87       	std	Y+13, r30	; 0x0d
     468:	db 01       	movw	r26, r22
     46a:	ed 93       	st	X+, r30
     46c:	fc 93       	st	X, r31
     46e:	30 97       	sbiw	r30, 0x00	; 0
     470:	09 f4       	brne	.+2      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     472:	02 c2       	rjmp	.+1028   	; 0x878 <__stack+0x19>
     474:	14 2f       	mov	r17, r20
     476:	80 81       	ld	r24, Z
     478:	88 23       	and	r24, r24
     47a:	61 f0       	breq	.+24     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     47c:	81 81       	ldd	r24, Z+1	; 0x01
     47e:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <disk_status>
     482:	80 fd       	sbrc	r24, 0
     484:	07 c0       	rjmp	.+14     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     486:	11 23       	and	r17, r17
     488:	09 f4       	brne	.+2      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     48a:	f8 c1       	rjmp	.+1008   	; 0x87c <__stack+0x1d>
     48c:	82 ff       	sbrs	r24, 2
     48e:	f6 c1       	rjmp	.+1004   	; 0x87c <__stack+0x1d>
     490:	8a e0       	ldi	r24, 0x0A	; 10
     492:	13 c2       	rjmp	.+1062   	; 0x8ba <__stack+0x5b>
     494:	ed 85       	ldd	r30, Y+13	; 0x0d
     496:	fe 85       	ldd	r31, Y+14	; 0x0e
     498:	10 82       	st	Z, r1
     49a:	11 82       	std	Z+1, r1	; 0x01
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	0e 94 19 15 	call	0x2a32	; 0x2a32 <disk_initialize>
     4a2:	80 fd       	sbrc	r24, 0
     4a4:	ed c1       	rjmp	.+986    	; 0x880 <__stack+0x21>
     4a6:	11 23       	and	r17, r17
     4a8:	11 f0       	breq	.+4      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4aa:	82 fd       	sbrc	r24, 2
     4ac:	f1 cf       	rjmp	.-30     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     4ae:	40 e0       	ldi	r20, 0x00	; 0
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	ba 01       	movw	r22, r20
     4b4:	8d 85       	ldd	r24, Y+13	; 0x0d
     4b6:	9e 85       	ldd	r25, Y+14	; 0x0e
     4b8:	0e 94 c2 01 	call	0x384	; 0x384 <check_fs>
     4bc:	81 30       	cpi	r24, 0x01	; 1
     4be:	c1 f4       	brne	.+48     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4c0:	ed 85       	ldd	r30, Y+13	; 0x0d
     4c2:	fe 85       	ldd	r31, Y+14	; 0x0e
     4c4:	ec 50       	subi	r30, 0x0C	; 12
     4c6:	fe 4f       	sbci	r31, 0xFE	; 254
     4c8:	80 81       	ld	r24, Z
     4ca:	81 11       	cpse	r24, r1
     4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4ce:	8d e0       	ldi	r24, 0x0D	; 13
     4d0:	f4 c1       	rjmp	.+1000   	; 0x8ba <__stack+0x5b>
     4d2:	ed 85       	ldd	r30, Y+13	; 0x0d
     4d4:	fe 85       	ldd	r31, Y+14	; 0x0e
     4d6:	e8 50       	subi	r30, 0x08	; 8
     4d8:	fe 4f       	sbci	r31, 0xFE	; 254
     4da:	40 80       	ld	r4, Z
     4dc:	51 80       	ldd	r5, Z+1	; 0x01
     4de:	62 80       	ldd	r6, Z+2	; 0x02
     4e0:	73 80       	ldd	r7, Z+3	; 0x03
     4e2:	b3 01       	movw	r22, r6
     4e4:	a2 01       	movw	r20, r4
     4e6:	8d 85       	ldd	r24, Y+13	; 0x0d
     4e8:	9e 85       	ldd	r25, Y+14	; 0x0e
     4ea:	0e 94 c2 01 	call	0x384	; 0x384 <check_fs>
     4ee:	03 c0       	rjmp	.+6      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     4f0:	41 2c       	mov	r4, r1
     4f2:	51 2c       	mov	r5, r1
     4f4:	32 01       	movw	r6, r4
     4f6:	83 30       	cpi	r24, 0x03	; 3
     4f8:	09 f4       	brne	.+2      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     4fa:	c4 c1       	rjmp	.+904    	; 0x884 <__stack+0x25>
     4fc:	81 11       	cpse	r24, r1
     4fe:	e7 cf       	rjmp	.-50     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     500:	ad 85       	ldd	r26, Y+13	; 0x0d
     502:	be 85       	ldd	r27, Y+14	; 0x0e
     504:	dd 96       	adiw	r26, 0x3d	; 61
     506:	8d 91       	ld	r24, X+
     508:	9c 91       	ld	r25, X
     50a:	de 97       	sbiw	r26, 0x3e	; 62
     50c:	81 15       	cp	r24, r1
     50e:	92 40       	sbci	r25, 0x02	; 2
     510:	f1 f6       	brne	.-68     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     512:	ed 85       	ldd	r30, Y+13	; 0x0d
     514:	fe 85       	ldd	r31, Y+14	; 0x0e
     516:	e8 5b       	subi	r30, 0xB8	; 184
     518:	ff 4f       	sbci	r31, 0xFF	; 255
     51a:	80 80       	ld	r8, Z
     51c:	91 80       	ldd	r9, Z+1	; 0x01
     51e:	a1 2c       	mov	r10, r1
     520:	b1 2c       	mov	r11, r1
     522:	81 14       	cp	r8, r1
     524:	91 04       	cpc	r9, r1
     526:	a1 04       	cpc	r10, r1
     528:	b1 04       	cpc	r11, r1
     52a:	41 f4       	brne	.+16     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
     52c:	ed 85       	ldd	r30, Y+13	; 0x0d
     52e:	fe 85       	ldd	r31, Y+14	; 0x0e
     530:	ea 5a       	subi	r30, 0xAA	; 170
     532:	ff 4f       	sbci	r31, 0xFF	; 255
     534:	80 80       	ld	r8, Z
     536:	91 80       	ldd	r9, Z+1	; 0x01
     538:	a2 80       	ldd	r10, Z+2	; 0x02
     53a:	b3 80       	ldd	r11, Z+3	; 0x03
     53c:	ed 85       	ldd	r30, Y+13	; 0x0d
     53e:	fe 85       	ldd	r31, Y+14	; 0x0e
     540:	86 8e       	std	Z+30, r8	; 0x1e
     542:	97 8e       	std	Z+31, r9	; 0x1f
     544:	a0 a2       	std	Z+32, r10	; 0x20
     546:	b1 a2       	std	Z+33, r11	; 0x21
     548:	ee 5b       	subi	r30, 0xBE	; 190
     54a:	ff 4f       	sbci	r31, 0xFF	; 255
     54c:	a0 81       	ld	r26, Z
     54e:	ed 85       	ldd	r30, Y+13	; 0x0d
     550:	fe 85       	ldd	r31, Y+14	; 0x0e
     552:	a3 83       	std	Z+3, r26	; 0x03
     554:	8f ef       	ldi	r24, 0xFF	; 255
     556:	8a 0f       	add	r24, r26
     558:	82 30       	cpi	r24, 0x02	; 2
     55a:	08 f0       	brcs	.+2      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     55c:	b8 cf       	rjmp	.-144    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     55e:	17 ad       	ldd	r17, Z+63	; 0x3f
     560:	12 83       	std	Z+2, r17	; 0x02
     562:	11 23       	and	r17, r17
     564:	09 f4       	brne	.+2      	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
     566:	b3 cf       	rjmp	.-154    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     568:	81 2f       	mov	r24, r17
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	9c 01       	movw	r18, r24
     56e:	21 50       	subi	r18, 0x01	; 1
     570:	31 09       	sbc	r19, r1
     572:	82 23       	and	r24, r18
     574:	93 23       	and	r25, r19
     576:	89 2b       	or	r24, r25
     578:	09 f0       	breq	.+2      	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
     57a:	a9 cf       	rjmp	.-174    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     57c:	ed 5b       	subi	r30, 0xBD	; 189
     57e:	ff 4f       	sbci	r31, 0xFF	; 255
     580:	20 80       	ld	r2, Z
     582:	31 80       	ldd	r3, Z+1	; 0x01
     584:	ed 85       	ldd	r30, Y+13	; 0x0d
     586:	fe 85       	ldd	r31, Y+14	; 0x0e
     588:	31 86       	std	Z+9, r3	; 0x09
     58a:	20 86       	std	Z+8, r2	; 0x08
     58c:	c1 01       	movw	r24, r2
     58e:	8f 70       	andi	r24, 0x0F	; 15
     590:	99 27       	eor	r25, r25
     592:	89 2b       	or	r24, r25
     594:	09 f0       	breq	.+2      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
     596:	9b cf       	rjmp	.-202    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     598:	eb 5b       	subi	r30, 0xBB	; 187
     59a:	ff 4f       	sbci	r31, 0xFF	; 255
     59c:	c0 80       	ld	r12, Z
     59e:	d1 80       	ldd	r13, Z+1	; 0x01
     5a0:	e1 2c       	mov	r14, r1
     5a2:	f1 2c       	mov	r15, r1
     5a4:	c1 14       	cp	r12, r1
     5a6:	d1 04       	cpc	r13, r1
     5a8:	e1 04       	cpc	r14, r1
     5aa:	f1 04       	cpc	r15, r1
     5ac:	41 f4       	brne	.+16     	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
     5ae:	ed 85       	ldd	r30, Y+13	; 0x0d
     5b0:	fe 85       	ldd	r31, Y+14	; 0x0e
     5b2:	ee 5a       	subi	r30, 0xAE	; 174
     5b4:	ff 4f       	sbci	r31, 0xFF	; 255
     5b6:	c0 80       	ld	r12, Z
     5b8:	d1 80       	ldd	r13, Z+1	; 0x01
     5ba:	e2 80       	ldd	r14, Z+2	; 0x02
     5bc:	f3 80       	ldd	r15, Z+3	; 0x03
     5be:	ed 85       	ldd	r30, Y+13	; 0x0d
     5c0:	fe 85       	ldd	r31, Y+14	; 0x0e
     5c2:	e0 5c       	subi	r30, 0xC0	; 192
     5c4:	ff 4f       	sbci	r31, 0xFF	; 255
     5c6:	01 90       	ld	r0, Z+
     5c8:	f0 81       	ld	r31, Z
     5ca:	e0 2d       	mov	r30, r0
     5cc:	30 97       	sbiw	r30, 0x00	; 0
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
     5d0:	7e cf       	rjmp	.-260    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     5d2:	b0 e0       	ldi	r27, 0x00	; 0
     5d4:	a5 01       	movw	r20, r10
     5d6:	94 01       	movw	r18, r8
     5d8:	0e 94 a1 19 	call	0x3342	; 0x3342 <__muluhisi3>
     5dc:	6d 83       	std	Y+5, r22	; 0x05
     5de:	7e 83       	std	Y+6, r23	; 0x06
     5e0:	8f 83       	std	Y+7, r24	; 0x07
     5e2:	98 87       	std	Y+8, r25	; 0x08
     5e4:	9f 01       	movw	r18, r30
     5e6:	40 e0       	ldi	r20, 0x00	; 0
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	29 87       	std	Y+9, r18	; 0x09
     5ec:	3a 87       	std	Y+10, r19	; 0x0a
     5ee:	4b 87       	std	Y+11, r20	; 0x0b
     5f0:	5c 87       	std	Y+12, r21	; 0x0c
     5f2:	c1 01       	movw	r24, r2
     5f4:	64 e0       	ldi	r22, 0x04	; 4
     5f6:	96 95       	lsr	r25
     5f8:	87 95       	ror	r24
     5fa:	6a 95       	dec	r22
     5fc:	e1 f7       	brne	.-8      	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
     5fe:	28 0f       	add	r18, r24
     600:	39 1f       	adc	r19, r25
     602:	41 1d       	adc	r20, r1
     604:	51 1d       	adc	r21, r1
     606:	da 01       	movw	r26, r20
     608:	c9 01       	movw	r24, r18
     60a:	2d 81       	ldd	r18, Y+5	; 0x05
     60c:	3e 81       	ldd	r19, Y+6	; 0x06
     60e:	4f 81       	ldd	r20, Y+7	; 0x07
     610:	58 85       	ldd	r21, Y+8	; 0x08
     612:	28 0f       	add	r18, r24
     614:	39 1f       	adc	r19, r25
     616:	4a 1f       	adc	r20, r26
     618:	5b 1f       	adc	r21, r27
     61a:	29 83       	std	Y+1, r18	; 0x01
     61c:	3a 83       	std	Y+2, r19	; 0x02
     61e:	4b 83       	std	Y+3, r20	; 0x03
     620:	5c 83       	std	Y+4, r21	; 0x04
     622:	c2 16       	cp	r12, r18
     624:	d3 06       	cpc	r13, r19
     626:	e4 06       	cpc	r14, r20
     628:	f5 06       	cpc	r15, r21
     62a:	08 f4       	brcc	.+2      	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
     62c:	50 cf       	rjmp	.-352    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     62e:	c7 01       	movw	r24, r14
     630:	b6 01       	movw	r22, r12
     632:	62 1b       	sub	r22, r18
     634:	73 0b       	sbc	r23, r19
     636:	84 0b       	sbc	r24, r20
     638:	95 0b       	sbc	r25, r21
     63a:	21 2f       	mov	r18, r17
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	40 e0       	ldi	r20, 0x00	; 0
     640:	50 e0       	ldi	r21, 0x00	; 0
     642:	0e 94 7f 19 	call	0x32fe	; 0x32fe <__udivmodsi4>
     646:	21 15       	cp	r18, r1
     648:	31 05       	cpc	r19, r1
     64a:	41 05       	cpc	r20, r1
     64c:	51 05       	cpc	r21, r1
     64e:	09 f4       	brne	.+2      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
     650:	3e cf       	rjmp	.-388    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     652:	69 01       	movw	r12, r18
     654:	7a 01       	movw	r14, r20
     656:	62 e0       	ldi	r22, 0x02	; 2
     658:	c6 0e       	add	r12, r22
     65a:	d1 1c       	adc	r13, r1
     65c:	e1 1c       	adc	r14, r1
     65e:	f1 1c       	adc	r15, r1
     660:	89 81       	ldd	r24, Y+1	; 0x01
     662:	9a 81       	ldd	r25, Y+2	; 0x02
     664:	ab 81       	ldd	r26, Y+3	; 0x03
     666:	bc 81       	ldd	r27, Y+4	; 0x04
     668:	84 0d       	add	r24, r4
     66a:	95 1d       	adc	r25, r5
     66c:	a6 1d       	adc	r26, r6
     66e:	b7 1d       	adc	r27, r7
     670:	89 83       	std	Y+1, r24	; 0x01
     672:	9a 83       	std	Y+2, r25	; 0x02
     674:	ab 83       	std	Y+3, r26	; 0x03
     676:	bc 83       	std	Y+4, r27	; 0x04
     678:	89 85       	ldd	r24, Y+9	; 0x09
     67a:	9a 85       	ldd	r25, Y+10	; 0x0a
     67c:	ab 85       	ldd	r26, Y+11	; 0x0b
     67e:	bc 85       	ldd	r27, Y+12	; 0x0c
     680:	84 0d       	add	r24, r4
     682:	95 1d       	adc	r25, r5
     684:	a6 1d       	adc	r26, r6
     686:	b7 1d       	adc	r27, r7
     688:	26 3f       	cpi	r18, 0xF6	; 246
     68a:	ef e0       	ldi	r30, 0x0F	; 15
     68c:	3e 07       	cpc	r19, r30
     68e:	41 05       	cpc	r20, r1
     690:	51 05       	cpc	r21, r1
     692:	80 f1       	brcs	.+96     	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
     694:	26 3f       	cpi	r18, 0xF6	; 246
     696:	3f 4f       	sbci	r19, 0xFF	; 255
     698:	41 05       	cpc	r20, r1
     69a:	51 05       	cpc	r21, r1
     69c:	08 f4       	brcc	.+2      	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
     69e:	f4 c0       	rjmp	.+488    	; 0x888 <__stack+0x29>
     6a0:	ed 85       	ldd	r30, Y+13	; 0x0d
     6a2:	fe 85       	ldd	r31, Y+14	; 0x0e
     6a4:	c2 8e       	std	Z+26, r12	; 0x1a
     6a6:	d3 8e       	std	Z+27, r13	; 0x1b
     6a8:	e4 8e       	std	Z+28, r14	; 0x1c
     6aa:	f5 8e       	std	Z+29, r15	; 0x1d
     6ac:	29 81       	ldd	r18, Y+1	; 0x01
     6ae:	3a 81       	ldd	r19, Y+2	; 0x02
     6b0:	4b 81       	ldd	r20, Y+3	; 0x03
     6b2:	5c 81       	ldd	r21, Y+4	; 0x04
     6b4:	22 a7       	std	Z+42, r18	; 0x2a
     6b6:	33 a7       	std	Z+43, r19	; 0x2b
     6b8:	44 a7       	std	Z+44, r20	; 0x2c
     6ba:	55 a7       	std	Z+45, r21	; 0x2d
     6bc:	82 a3       	std	Z+34, r24	; 0x22
     6be:	93 a3       	std	Z+35, r25	; 0x23
     6c0:	a4 a3       	std	Z+36, r26	; 0x24
     6c2:	b5 a3       	std	Z+37, r27	; 0x25
     6c4:	23 28       	or	r2, r3
     6c6:	09 f0       	breq	.+2      	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
     6c8:	02 cf       	rjmp	.-508    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     6ca:	e2 5a       	subi	r30, 0xA2	; 162
     6cc:	ff 4f       	sbci	r31, 0xFF	; 255
     6ce:	80 81       	ld	r24, Z
     6d0:	91 81       	ldd	r25, Z+1	; 0x01
     6d2:	a2 81       	ldd	r26, Z+2	; 0x02
     6d4:	b3 81       	ldd	r27, Z+3	; 0x03
     6d6:	ed 85       	ldd	r30, Y+13	; 0x0d
     6d8:	fe 85       	ldd	r31, Y+14	; 0x0e
     6da:	86 a3       	std	Z+38, r24	; 0x26
     6dc:	97 a3       	std	Z+39, r25	; 0x27
     6de:	a0 a7       	std	Z+40, r26	; 0x28
     6e0:	b1 a7       	std	Z+41, r27	; 0x29
     6e2:	42 e0       	ldi	r20, 0x02	; 2
     6e4:	cc 0c       	add	r12, r12
     6e6:	dd 1c       	adc	r13, r13
     6e8:	ee 1c       	adc	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	4a 95       	dec	r20
     6ee:	d1 f7       	brne	.-12     	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
     6f0:	13 e0       	ldi	r17, 0x03	; 3
     6f2:	2b c0       	rjmp	.+86     	; 0x74a <__LOCK_REGION_LENGTH__+0x34a>
     6f4:	11 e0       	ldi	r17, 0x01	; 1
     6f6:	ed 85       	ldd	r30, Y+13	; 0x0d
     6f8:	fe 85       	ldd	r31, Y+14	; 0x0e
     6fa:	c2 8e       	std	Z+26, r12	; 0x1a
     6fc:	d3 8e       	std	Z+27, r13	; 0x1b
     6fe:	e4 8e       	std	Z+28, r14	; 0x1c
     700:	f5 8e       	std	Z+29, r15	; 0x1d
     702:	29 81       	ldd	r18, Y+1	; 0x01
     704:	3a 81       	ldd	r19, Y+2	; 0x02
     706:	4b 81       	ldd	r20, Y+3	; 0x03
     708:	5c 81       	ldd	r21, Y+4	; 0x04
     70a:	22 a7       	std	Z+42, r18	; 0x2a
     70c:	33 a7       	std	Z+43, r19	; 0x2b
     70e:	44 a7       	std	Z+44, r20	; 0x2c
     710:	55 a7       	std	Z+45, r21	; 0x2d
     712:	82 a3       	std	Z+34, r24	; 0x22
     714:	93 a3       	std	Z+35, r25	; 0x23
     716:	a4 a3       	std	Z+36, r26	; 0x24
     718:	b5 a3       	std	Z+37, r27	; 0x25
     71a:	23 28       	or	r2, r3
     71c:	09 f4       	brne	.+2      	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
     71e:	d7 ce       	rjmp	.-594    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     720:	2d 81       	ldd	r18, Y+5	; 0x05
     722:	3e 81       	ldd	r19, Y+6	; 0x06
     724:	4f 81       	ldd	r20, Y+7	; 0x07
     726:	58 85       	ldd	r21, Y+8	; 0x08
     728:	82 0f       	add	r24, r18
     72a:	93 1f       	adc	r25, r19
     72c:	a4 1f       	adc	r26, r20
     72e:	b5 1f       	adc	r27, r21
     730:	ed 85       	ldd	r30, Y+13	; 0x0d
     732:	fe 85       	ldd	r31, Y+14	; 0x0e
     734:	86 a3       	std	Z+38, r24	; 0x26
     736:	97 a3       	std	Z+39, r25	; 0x27
     738:	a0 a7       	std	Z+40, r26	; 0x28
     73a:	b1 a7       	std	Z+41, r27	; 0x29
     73c:	12 30       	cpi	r17, 0x02	; 2
     73e:	09 f0       	breq	.+2      	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
     740:	a5 c0       	rjmp	.+330    	; 0x88c <__stack+0x2d>
     742:	cc 0c       	add	r12, r12
     744:	dd 1c       	adc	r13, r13
     746:	ee 1c       	adc	r14, r14
     748:	ff 1c       	adc	r15, r15
     74a:	2f ef       	ldi	r18, 0xFF	; 255
     74c:	c2 0e       	add	r12, r18
     74e:	21 e0       	ldi	r18, 0x01	; 1
     750:	d2 1e       	adc	r13, r18
     752:	e1 1c       	adc	r14, r1
     754:	f1 1c       	adc	r15, r1
     756:	89 e0       	ldi	r24, 0x09	; 9
     758:	f6 94       	lsr	r15
     75a:	e7 94       	ror	r14
     75c:	d7 94       	ror	r13
     75e:	c7 94       	ror	r12
     760:	8a 95       	dec	r24
     762:	d1 f7       	brne	.-12     	; 0x758 <__LOCK_REGION_LENGTH__+0x358>
     764:	8c 14       	cp	r8, r12
     766:	9d 04       	cpc	r9, r13
     768:	ae 04       	cpc	r10, r14
     76a:	bf 04       	cpc	r11, r15
     76c:	08 f4       	brcc	.+2      	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
     76e:	af ce       	rjmp	.-674    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     770:	8f ef       	ldi	r24, 0xFF	; 255
     772:	9f ef       	ldi	r25, 0xFF	; 255
     774:	dc 01       	movw	r26, r24
     776:	ed 85       	ldd	r30, Y+13	; 0x0d
     778:	fe 85       	ldd	r31, Y+14	; 0x0e
     77a:	86 87       	std	Z+14, r24	; 0x0e
     77c:	97 87       	std	Z+15, r25	; 0x0f
     77e:	a0 8b       	std	Z+16, r26	; 0x10
     780:	b1 8b       	std	Z+17, r27	; 0x11
     782:	df 01       	movw	r26, r30
     784:	12 86       	std	Z+10, r1	; 0x0a
     786:	13 86       	std	Z+11, r1	; 0x0b
     788:	14 86       	std	Z+12, r1	; 0x0c
     78a:	15 86       	std	Z+13, r1	; 0x0d
     78c:	13 30       	cpi	r17, 0x03	; 3
     78e:	09 f0       	breq	.+2      	; 0x792 <__LOCK_REGION_LENGTH__+0x392>
     790:	54 c0       	rjmp	.+168    	; 0x83a <__LOCK_REGION_LENGTH__+0x43a>
     792:	15 82       	std	Z+5, r1	; 0x05
     794:	ee 59       	subi	r30, 0x9E	; 158
     796:	ff 4f       	sbci	r31, 0xFF	; 255
     798:	80 81       	ld	r24, Z
     79a:	91 81       	ldd	r25, Z+1	; 0x01
     79c:	a3 01       	movw	r20, r6
     79e:	92 01       	movw	r18, r4
     7a0:	28 0f       	add	r18, r24
     7a2:	39 1f       	adc	r19, r25
     7a4:	41 1d       	adc	r20, r1
     7a6:	51 1d       	adc	r21, r1
     7a8:	fd 01       	movw	r30, r26
     7aa:	22 8b       	std	Z+18, r18	; 0x12
     7ac:	33 8b       	std	Z+19, r19	; 0x13
     7ae:	44 8b       	std	Z+20, r20	; 0x14
     7b0:	55 8b       	std	Z+21, r21	; 0x15
     7b2:	01 e0       	ldi	r16, 0x01	; 1
     7b4:	bd 01       	movw	r22, r26
     7b6:	6e 5c       	subi	r22, 0xCE	; 206
     7b8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ba:	81 81       	ldd	r24, Z+1	; 0x01
     7bc:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <disk_read>
     7c0:	81 11       	cpse	r24, r1
     7c2:	3b c0       	rjmp	.+118    	; 0x83a <__LOCK_REGION_LENGTH__+0x43a>
     7c4:	ed 85       	ldd	r30, Y+13	; 0x0d
     7c6:	fe 85       	ldd	r31, Y+14	; 0x0e
     7c8:	e0 5d       	subi	r30, 0xD0	; 208
     7ca:	fd 4f       	sbci	r31, 0xFD	; 253
     7cc:	80 81       	ld	r24, Z
     7ce:	91 81       	ldd	r25, Z+1	; 0x01
     7d0:	85 35       	cpi	r24, 0x55	; 85
     7d2:	9a 4a       	sbci	r25, 0xAA	; 170
     7d4:	91 f5       	brne	.+100    	; 0x83a <__LOCK_REGION_LENGTH__+0x43a>
     7d6:	ed 85       	ldd	r30, Y+13	; 0x0d
     7d8:	fe 85       	ldd	r31, Y+14	; 0x0e
     7da:	82 a9       	ldd	r24, Z+50	; 0x32
     7dc:	93 a9       	ldd	r25, Z+51	; 0x33
     7de:	a4 a9       	ldd	r26, Z+52	; 0x34
     7e0:	b5 a9       	ldd	r27, Z+53	; 0x35
     7e2:	82 35       	cpi	r24, 0x52	; 82
     7e4:	92 45       	sbci	r25, 0x52	; 82
     7e6:	a1 46       	sbci	r26, 0x61	; 97
     7e8:	b1 44       	sbci	r27, 0x41	; 65
     7ea:	39 f5       	brne	.+78     	; 0x83a <__LOCK_REGION_LENGTH__+0x43a>
     7ec:	ed 85       	ldd	r30, Y+13	; 0x0d
     7ee:	fe 85       	ldd	r31, Y+14	; 0x0e
     7f0:	ea 5e       	subi	r30, 0xEA	; 234
     7f2:	fd 4f       	sbci	r31, 0xFD	; 253
     7f4:	80 81       	ld	r24, Z
     7f6:	91 81       	ldd	r25, Z+1	; 0x01
     7f8:	a2 81       	ldd	r26, Z+2	; 0x02
     7fa:	b3 81       	ldd	r27, Z+3	; 0x03
     7fc:	82 37       	cpi	r24, 0x72	; 114
     7fe:	92 47       	sbci	r25, 0x72	; 114
     800:	a1 44       	sbci	r26, 0x41	; 65
     802:	b1 46       	sbci	r27, 0x61	; 97
     804:	d1 f4       	brne	.+52     	; 0x83a <__LOCK_REGION_LENGTH__+0x43a>
     806:	ed 85       	ldd	r30, Y+13	; 0x0d
     808:	fe 85       	ldd	r31, Y+14	; 0x0e
     80a:	e2 5e       	subi	r30, 0xE2	; 226
     80c:	fd 4f       	sbci	r31, 0xFD	; 253
     80e:	80 81       	ld	r24, Z
     810:	91 81       	ldd	r25, Z+1	; 0x01
     812:	a2 81       	ldd	r26, Z+2	; 0x02
     814:	b3 81       	ldd	r27, Z+3	; 0x03
     816:	ed 85       	ldd	r30, Y+13	; 0x0d
     818:	fe 85       	ldd	r31, Y+14	; 0x0e
     81a:	82 87       	std	Z+10, r24	; 0x0a
     81c:	93 87       	std	Z+11, r25	; 0x0b
     81e:	a4 87       	std	Z+12, r26	; 0x0c
     820:	b5 87       	std	Z+13, r27	; 0x0d
     822:	e6 5e       	subi	r30, 0xE6	; 230
     824:	fd 4f       	sbci	r31, 0xFD	; 253
     826:	80 81       	ld	r24, Z
     828:	91 81       	ldd	r25, Z+1	; 0x01
     82a:	a2 81       	ldd	r26, Z+2	; 0x02
     82c:	b3 81       	ldd	r27, Z+3	; 0x03
     82e:	ed 85       	ldd	r30, Y+13	; 0x0d
     830:	fe 85       	ldd	r31, Y+14	; 0x0e
     832:	86 87       	std	Z+14, r24	; 0x0e
     834:	97 87       	std	Z+15, r25	; 0x0f
     836:	a0 8b       	std	Z+16, r26	; 0x10
     838:	b1 8b       	std	Z+17, r27	; 0x11
     83a:	ad 85       	ldd	r26, Y+13	; 0x0d
     83c:	be 85       	ldd	r27, Y+14	; 0x0e
     83e:	1c 93       	st	X, r17
     840:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <Fsid>
     844:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <Fsid+0x1>
     848:	01 96       	adiw	r24, 0x01	; 1
     84a:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <Fsid+0x1>
     84e:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <Fsid>
     852:	17 96       	adiw	r26, 0x07	; 7
     854:	9c 93       	st	X, r25
     856:	8e 93       	st	-X, r24
     858:	16 97       	sbiw	r26, 0x06	; 6
     85a:	fd 01       	movw	r30, r26
     85c:	16 a6       	std	Z+46, r1	; 0x2e
     85e:	17 a6       	std	Z+47, r1	; 0x2f
     860:	10 aa       	std	Z+48, r1	; 0x30
     862:	11 aa       	std	Z+49, r1	; 0x31
     864:	14 82       	std	Z+4, r1	; 0x04
     866:	56 96       	adiw	r26, 0x16	; 22
     868:	1d 92       	st	X+, r1
     86a:	1d 92       	st	X+, r1
     86c:	1d 92       	st	X+, r1
     86e:	1c 92       	st	X, r1
     870:	59 97       	sbiw	r26, 0x19	; 25
     872:	04 c0       	rjmp	.+8      	; 0x87c <__stack+0x1d>
     874:	8b e0       	ldi	r24, 0x0B	; 11
     876:	21 c0       	rjmp	.+66     	; 0x8ba <__stack+0x5b>
     878:	8c e0       	ldi	r24, 0x0C	; 12
     87a:	1f c0       	rjmp	.+62     	; 0x8ba <__stack+0x5b>
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	1d c0       	rjmp	.+58     	; 0x8ba <__stack+0x5b>
     880:	83 e0       	ldi	r24, 0x03	; 3
     882:	1b c0       	rjmp	.+54     	; 0x8ba <__stack+0x5b>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	19 c0       	rjmp	.+50     	; 0x8ba <__stack+0x5b>
     888:	12 e0       	ldi	r17, 0x02	; 2
     88a:	35 cf       	rjmp	.-406    	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
     88c:	a3 e0       	ldi	r26, 0x03	; 3
     88e:	b0 e0       	ldi	r27, 0x00	; 0
     890:	a7 01       	movw	r20, r14
     892:	96 01       	movw	r18, r12
     894:	0e 94 a1 19 	call	0x3342	; 0x3342 <__muluhisi3>
     898:	dc 01       	movw	r26, r24
     89a:	cb 01       	movw	r24, r22
     89c:	b6 95       	lsr	r27
     89e:	a7 95       	ror	r26
     8a0:	97 95       	ror	r25
     8a2:	87 95       	ror	r24
     8a4:	f1 e0       	ldi	r31, 0x01	; 1
     8a6:	cf 22       	and	r12, r31
     8a8:	dd 24       	eor	r13, r13
     8aa:	ee 24       	eor	r14, r14
     8ac:	ff 24       	eor	r15, r15
     8ae:	c8 0e       	add	r12, r24
     8b0:	d9 1e       	adc	r13, r25
     8b2:	ea 1e       	adc	r14, r26
     8b4:	fb 1e       	adc	r15, r27
     8b6:	11 e0       	ldi	r17, 0x01	; 1
     8b8:	48 cf       	rjmp	.-368    	; 0x74a <__LOCK_REGION_LENGTH__+0x34a>
     8ba:	2e 96       	adiw	r28, 0x0e	; 14
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	f8 94       	cli
     8c0:	de bf       	out	0x3e, r29	; 62
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	cd bf       	out	0x3d, r28	; 61
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	1f 91       	pop	r17
     8cc:	0f 91       	pop	r16
     8ce:	ff 90       	pop	r15
     8d0:	ef 90       	pop	r14
     8d2:	df 90       	pop	r13
     8d4:	cf 90       	pop	r12
     8d6:	bf 90       	pop	r11
     8d8:	af 90       	pop	r10
     8da:	9f 90       	pop	r9
     8dc:	8f 90       	pop	r8
     8de:	7f 90       	pop	r7
     8e0:	6f 90       	pop	r6
     8e2:	5f 90       	pop	r5
     8e4:	4f 90       	pop	r4
     8e6:	3f 90       	pop	r3
     8e8:	2f 90       	pop	r2
     8ea:	08 95       	ret

000008ec <validate>:
     8ec:	00 97       	sbiw	r24, 0x00	; 0
     8ee:	81 f0       	breq	.+32     	; 0x910 <validate+0x24>
     8f0:	fc 01       	movw	r30, r24
     8f2:	20 81       	ld	r18, Z
     8f4:	22 23       	and	r18, r18
     8f6:	61 f0       	breq	.+24     	; 0x910 <validate+0x24>
     8f8:	26 81       	ldd	r18, Z+6	; 0x06
     8fa:	37 81       	ldd	r19, Z+7	; 0x07
     8fc:	26 17       	cp	r18, r22
     8fe:	37 07       	cpc	r19, r23
     900:	39 f4       	brne	.+14     	; 0x910 <validate+0x24>
     902:	81 81       	ldd	r24, Z+1	; 0x01
     904:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <disk_status>
     908:	80 fd       	sbrc	r24, 0
     90a:	04 c0       	rjmp	.+8      	; 0x914 <validate+0x28>
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	08 95       	ret
     910:	89 e0       	ldi	r24, 0x09	; 9
     912:	08 95       	ret
     914:	83 e0       	ldi	r24, 0x03	; 3
     916:	08 95       	ret

00000918 <clust2sect>:
     918:	0f 93       	push	r16
     91a:	1f 93       	push	r17
     91c:	fc 01       	movw	r30, r24
     91e:	9a 01       	movw	r18, r20
     920:	ab 01       	movw	r20, r22
     922:	22 50       	subi	r18, 0x02	; 2
     924:	31 09       	sbc	r19, r1
     926:	41 09       	sbc	r20, r1
     928:	51 09       	sbc	r21, r1
     92a:	82 8d       	ldd	r24, Z+26	; 0x1a
     92c:	93 8d       	ldd	r25, Z+27	; 0x1b
     92e:	a4 8d       	ldd	r26, Z+28	; 0x1c
     930:	b5 8d       	ldd	r27, Z+29	; 0x1d
     932:	02 97       	sbiw	r24, 0x02	; 2
     934:	a1 09       	sbc	r26, r1
     936:	b1 09       	sbc	r27, r1
     938:	28 17       	cp	r18, r24
     93a:	39 07       	cpc	r19, r25
     93c:	4a 07       	cpc	r20, r26
     93e:	5b 07       	cpc	r21, r27
     940:	68 f4       	brcc	.+26     	; 0x95c <clust2sect+0x44>
     942:	a2 81       	ldd	r26, Z+2	; 0x02
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	0e 94 a1 19 	call	0x3342	; 0x3342 <__muluhisi3>
     94a:	02 a5       	ldd	r16, Z+42	; 0x2a
     94c:	13 a5       	ldd	r17, Z+43	; 0x2b
     94e:	24 a5       	ldd	r18, Z+44	; 0x2c
     950:	35 a5       	ldd	r19, Z+45	; 0x2d
     952:	60 0f       	add	r22, r16
     954:	71 1f       	adc	r23, r17
     956:	82 1f       	adc	r24, r18
     958:	93 1f       	adc	r25, r19
     95a:	03 c0       	rjmp	.+6      	; 0x962 <clust2sect+0x4a>
     95c:	60 e0       	ldi	r22, 0x00	; 0
     95e:	70 e0       	ldi	r23, 0x00	; 0
     960:	cb 01       	movw	r24, r22
     962:	1f 91       	pop	r17
     964:	0f 91       	pop	r16
     966:	08 95       	ret

00000968 <get_fat>:
     968:	af 92       	push	r10
     96a:	bf 92       	push	r11
     96c:	cf 92       	push	r12
     96e:	df 92       	push	r13
     970:	ef 92       	push	r14
     972:	ff 92       	push	r15
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	42 30       	cpi	r20, 0x02	; 2
     97e:	51 05       	cpc	r21, r1
     980:	61 05       	cpc	r22, r1
     982:	71 05       	cpc	r23, r1
     984:	08 f4       	brcc	.+2      	; 0x988 <get_fat+0x20>
     986:	a9 c0       	rjmp	.+338    	; 0xada <get_fat+0x172>
     988:	fc 01       	movw	r30, r24
     98a:	02 8d       	ldd	r16, Z+26	; 0x1a
     98c:	13 8d       	ldd	r17, Z+27	; 0x1b
     98e:	24 8d       	ldd	r18, Z+28	; 0x1c
     990:	35 8d       	ldd	r19, Z+29	; 0x1d
     992:	40 17       	cp	r20, r16
     994:	51 07       	cpc	r21, r17
     996:	62 07       	cpc	r22, r18
     998:	73 07       	cpc	r23, r19
     99a:	08 f0       	brcs	.+2      	; 0x99e <get_fat+0x36>
     99c:	9e c0       	rjmp	.+316    	; 0xada <get_fat+0x172>
     99e:	6a 01       	movw	r12, r20
     9a0:	7b 01       	movw	r14, r22
     9a2:	ec 01       	movw	r28, r24
     9a4:	80 81       	ld	r24, Z
     9a6:	82 30       	cpi	r24, 0x02	; 2
     9a8:	09 f4       	brne	.+2      	; 0x9ac <get_fat+0x44>
     9aa:	48 c0       	rjmp	.+144    	; 0xa3c <get_fat+0xd4>
     9ac:	83 30       	cpi	r24, 0x03	; 3
     9ae:	09 f4       	brne	.+2      	; 0x9b2 <get_fat+0x4a>
     9b0:	68 c0       	rjmp	.+208    	; 0xa82 <get_fat+0x11a>
     9b2:	81 30       	cpi	r24, 0x01	; 1
     9b4:	09 f0       	breq	.+2      	; 0x9b8 <get_fat+0x50>
     9b6:	96 c0       	rjmp	.+300    	; 0xae4 <get_fat+0x17c>
     9b8:	5a 01       	movw	r10, r20
     9ba:	b6 94       	lsr	r11
     9bc:	a7 94       	ror	r10
     9be:	ac 0c       	add	r10, r12
     9c0:	bd 1c       	adc	r11, r13
     9c2:	c5 01       	movw	r24, r10
     9c4:	89 2f       	mov	r24, r25
     9c6:	99 27       	eor	r25, r25
     9c8:	86 95       	lsr	r24
     9ca:	4a a1       	ldd	r20, Y+34	; 0x22
     9cc:	5b a1       	ldd	r21, Y+35	; 0x23
     9ce:	6c a1       	ldd	r22, Y+36	; 0x24
     9d0:	7d a1       	ldd	r23, Y+37	; 0x25
     9d2:	48 0f       	add	r20, r24
     9d4:	59 1f       	adc	r21, r25
     9d6:	61 1d       	adc	r22, r1
     9d8:	71 1d       	adc	r23, r1
     9da:	ce 01       	movw	r24, r28
     9dc:	0e 94 49 01 	call	0x292	; 0x292 <move_window>
     9e0:	81 11       	cpse	r24, r1
     9e2:	80 c0       	rjmp	.+256    	; 0xae4 <get_fat+0x17c>
     9e4:	f5 01       	movw	r30, r10
     9e6:	f1 70       	andi	r31, 0x01	; 1
     9e8:	ec 0f       	add	r30, r28
     9ea:	fd 1f       	adc	r31, r29
     9ec:	12 a9       	ldd	r17, Z+50	; 0x32
     9ee:	ff ef       	ldi	r31, 0xFF	; 255
     9f0:	af 1a       	sub	r10, r31
     9f2:	bf 0a       	sbc	r11, r31
     9f4:	c5 01       	movw	r24, r10
     9f6:	89 2f       	mov	r24, r25
     9f8:	99 27       	eor	r25, r25
     9fa:	86 95       	lsr	r24
     9fc:	4a a1       	ldd	r20, Y+34	; 0x22
     9fe:	5b a1       	ldd	r21, Y+35	; 0x23
     a00:	6c a1       	ldd	r22, Y+36	; 0x24
     a02:	7d a1       	ldd	r23, Y+37	; 0x25
     a04:	48 0f       	add	r20, r24
     a06:	59 1f       	adc	r21, r25
     a08:	61 1d       	adc	r22, r1
     a0a:	71 1d       	adc	r23, r1
     a0c:	ce 01       	movw	r24, r28
     a0e:	0e 94 49 01 	call	0x292	; 0x292 <move_window>
     a12:	81 11       	cpse	r24, r1
     a14:	67 c0       	rjmp	.+206    	; 0xae4 <get_fat+0x17c>
     a16:	c5 01       	movw	r24, r10
     a18:	91 70       	andi	r25, 0x01	; 1
     a1a:	fe 01       	movw	r30, r28
     a1c:	e8 0f       	add	r30, r24
     a1e:	f9 1f       	adc	r31, r25
     a20:	82 a9       	ldd	r24, Z+50	; 0x32
     a22:	61 2f       	mov	r22, r17
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	78 2b       	or	r23, r24
     a28:	c0 fe       	sbrs	r12, 0
     a2a:	06 c0       	rjmp	.+12     	; 0xa38 <get_fat+0xd0>
     a2c:	54 e0       	ldi	r21, 0x04	; 4
     a2e:	76 95       	lsr	r23
     a30:	67 95       	ror	r22
     a32:	5a 95       	dec	r21
     a34:	e1 f7       	brne	.-8      	; 0xa2e <get_fat+0xc6>
     a36:	22 c0       	rjmp	.+68     	; 0xa7c <get_fat+0x114>
     a38:	7f 70       	andi	r23, 0x0F	; 15
     a3a:	20 c0       	rjmp	.+64     	; 0xa7c <get_fat+0x114>
     a3c:	77 27       	eor	r23, r23
     a3e:	6f 2d       	mov	r22, r15
     a40:	5e 2d       	mov	r21, r14
     a42:	4d 2d       	mov	r20, r13
     a44:	82 a1       	ldd	r24, Z+34	; 0x22
     a46:	93 a1       	ldd	r25, Z+35	; 0x23
     a48:	a4 a1       	ldd	r26, Z+36	; 0x24
     a4a:	b5 a1       	ldd	r27, Z+37	; 0x25
     a4c:	48 0f       	add	r20, r24
     a4e:	59 1f       	adc	r21, r25
     a50:	6a 1f       	adc	r22, r26
     a52:	7b 1f       	adc	r23, r27
     a54:	cf 01       	movw	r24, r30
     a56:	0e 94 49 01 	call	0x292	; 0x292 <move_window>
     a5a:	81 11       	cpse	r24, r1
     a5c:	43 c0       	rjmp	.+134    	; 0xae4 <get_fat+0x17c>
     a5e:	cc 0c       	add	r12, r12
     a60:	dd 1c       	adc	r13, r13
     a62:	ee 1c       	adc	r14, r14
     a64:	ff 1c       	adc	r15, r15
     a66:	e8 94       	clt
     a68:	c0 f8       	bld	r12, 0
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	d8 22       	and	r13, r24
     a6e:	ee 24       	eor	r14, r14
     a70:	ff 24       	eor	r15, r15
     a72:	fe 01       	movw	r30, r28
     a74:	ec 0d       	add	r30, r12
     a76:	fd 1d       	adc	r31, r13
     a78:	62 a9       	ldd	r22, Z+50	; 0x32
     a7a:	73 a9       	ldd	r23, Z+51	; 0x33
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	34 c0       	rjmp	.+104    	; 0xaea <get_fat+0x182>
     a82:	82 a1       	ldd	r24, Z+34	; 0x22
     a84:	93 a1       	ldd	r25, Z+35	; 0x23
     a86:	a4 a1       	ldd	r26, Z+36	; 0x24
     a88:	b5 a1       	ldd	r27, Z+37	; 0x25
     a8a:	27 e0       	ldi	r18, 0x07	; 7
     a8c:	76 95       	lsr	r23
     a8e:	67 95       	ror	r22
     a90:	57 95       	ror	r21
     a92:	47 95       	ror	r20
     a94:	2a 95       	dec	r18
     a96:	d1 f7       	brne	.-12     	; 0xa8c <get_fat+0x124>
     a98:	48 0f       	add	r20, r24
     a9a:	59 1f       	adc	r21, r25
     a9c:	6a 1f       	adc	r22, r26
     a9e:	7b 1f       	adc	r23, r27
     aa0:	cf 01       	movw	r24, r30
     aa2:	0e 94 49 01 	call	0x292	; 0x292 <move_window>
     aa6:	81 11       	cpse	r24, r1
     aa8:	1d c0       	rjmp	.+58     	; 0xae4 <get_fat+0x17c>
     aaa:	82 e0       	ldi	r24, 0x02	; 2
     aac:	cc 0c       	add	r12, r12
     aae:	dd 1c       	adc	r13, r13
     ab0:	ee 1c       	adc	r14, r14
     ab2:	ff 1c       	adc	r15, r15
     ab4:	8a 95       	dec	r24
     ab6:	d1 f7       	brne	.-12     	; 0xaac <get_fat+0x144>
     ab8:	ec ef       	ldi	r30, 0xFC	; 252
     aba:	ce 22       	and	r12, r30
     abc:	e1 e0       	ldi	r30, 0x01	; 1
     abe:	de 22       	and	r13, r30
     ac0:	ee 24       	eor	r14, r14
     ac2:	ff 24       	eor	r15, r15
     ac4:	fe 01       	movw	r30, r28
     ac6:	ec 0d       	add	r30, r12
     ac8:	fd 1d       	adc	r31, r13
     aca:	82 a9       	ldd	r24, Z+50	; 0x32
     acc:	93 a9       	ldd	r25, Z+51	; 0x33
     ace:	a4 a9       	ldd	r26, Z+52	; 0x34
     ad0:	b5 a9       	ldd	r27, Z+53	; 0x35
     ad2:	bc 01       	movw	r22, r24
     ad4:	cd 01       	movw	r24, r26
     ad6:	9f 70       	andi	r25, 0x0F	; 15
     ad8:	08 c0       	rjmp	.+16     	; 0xaea <get_fat+0x182>
     ada:	61 e0       	ldi	r22, 0x01	; 1
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	03 c0       	rjmp	.+6      	; 0xaea <get_fat+0x182>
     ae4:	6f ef       	ldi	r22, 0xFF	; 255
     ae6:	7f ef       	ldi	r23, 0xFF	; 255
     ae8:	cb 01       	movw	r24, r22
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	ff 90       	pop	r15
     af4:	ef 90       	pop	r14
     af6:	df 90       	pop	r13
     af8:	cf 90       	pop	r12
     afa:	bf 90       	pop	r11
     afc:	af 90       	pop	r10
     afe:	08 95       	ret

00000b00 <dir_sdi>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	8c 01       	movw	r16, r24
     b0e:	eb 01       	movw	r28, r22
     b10:	dc 01       	movw	r26, r24
     b12:	15 96       	adiw	r26, 0x05	; 5
     b14:	7c 93       	st	X, r23
     b16:	6e 93       	st	-X, r22
     b18:	14 97       	sbiw	r26, 0x04	; 4
     b1a:	16 96       	adiw	r26, 0x06	; 6
     b1c:	4d 91       	ld	r20, X+
     b1e:	5d 91       	ld	r21, X+
     b20:	6d 91       	ld	r22, X+
     b22:	7c 91       	ld	r23, X
     b24:	19 97       	sbiw	r26, 0x09	; 9
     b26:	41 30       	cpi	r20, 0x01	; 1
     b28:	51 05       	cpc	r21, r1
     b2a:	61 05       	cpc	r22, r1
     b2c:	71 05       	cpc	r23, r1
     b2e:	11 f4       	brne	.+4      	; 0xb34 <dir_sdi+0x34>
     b30:	82 e0       	ldi	r24, 0x02	; 2
     b32:	87 c0       	rjmp	.+270    	; 0xc42 <dir_sdi+0x142>
     b34:	dc 01       	movw	r26, r24
     b36:	ed 91       	ld	r30, X+
     b38:	fc 91       	ld	r31, X
     b3a:	82 8d       	ldd	r24, Z+26	; 0x1a
     b3c:	93 8d       	ldd	r25, Z+27	; 0x1b
     b3e:	a4 8d       	ldd	r26, Z+28	; 0x1c
     b40:	b5 8d       	ldd	r27, Z+29	; 0x1d
     b42:	48 17       	cp	r20, r24
     b44:	59 07       	cpc	r21, r25
     b46:	6a 07       	cpc	r22, r26
     b48:	7b 07       	cpc	r23, r27
     b4a:	90 f7       	brcc	.-28     	; 0xb30 <dir_sdi+0x30>
     b4c:	41 15       	cp	r20, r1
     b4e:	51 05       	cpc	r21, r1
     b50:	61 05       	cpc	r22, r1
     b52:	71 05       	cpc	r23, r1
     b54:	19 f5       	brne	.+70     	; 0xb9c <dir_sdi+0x9c>
     b56:	80 81       	ld	r24, Z
     b58:	83 30       	cpi	r24, 0x03	; 3
     b5a:	49 f4       	brne	.+18     	; 0xb6e <dir_sdi+0x6e>
     b5c:	46 a1       	ldd	r20, Z+38	; 0x26
     b5e:	57 a1       	ldd	r21, Z+39	; 0x27
     b60:	60 a5       	ldd	r22, Z+40	; 0x28
     b62:	71 a5       	ldd	r23, Z+41	; 0x29
     b64:	41 15       	cp	r20, r1
     b66:	51 05       	cpc	r21, r1
     b68:	61 05       	cpc	r22, r1
     b6a:	71 05       	cpc	r23, r1
     b6c:	b9 f4       	brne	.+46     	; 0xb9c <dir_sdi+0x9c>
     b6e:	d8 01       	movw	r26, r16
     b70:	1a 96       	adiw	r26, 0x0a	; 10
     b72:	1d 92       	st	X+, r1
     b74:	1d 92       	st	X+, r1
     b76:	1d 92       	st	X+, r1
     b78:	1c 92       	st	X, r1
     b7a:	1d 97       	sbiw	r26, 0x0d	; 13
     b7c:	80 85       	ldd	r24, Z+8	; 0x08
     b7e:	91 85       	ldd	r25, Z+9	; 0x09
     b80:	c8 17       	cp	r28, r24
     b82:	d9 07       	cpc	r29, r25
     b84:	a8 f6       	brcc	.-86     	; 0xb30 <dir_sdi+0x30>
     b86:	86 a1       	ldd	r24, Z+38	; 0x26
     b88:	97 a1       	ldd	r25, Z+39	; 0x27
     b8a:	a0 a5       	ldd	r26, Z+40	; 0x28
     b8c:	b1 a5       	ldd	r27, Z+41	; 0x29
     b8e:	9e 01       	movw	r18, r28
     b90:	54 e0       	ldi	r21, 0x04	; 4
     b92:	36 95       	lsr	r19
     b94:	27 95       	ror	r18
     b96:	5a 95       	dec	r21
     b98:	e1 f7       	brne	.-8      	; 0xb92 <dir_sdi+0x92>
     b9a:	39 c0       	rjmp	.+114    	; 0xc0e <dir_sdi+0x10e>
     b9c:	e2 80       	ldd	r14, Z+2	; 0x02
     b9e:	f0 e1       	ldi	r31, 0x10	; 16
     ba0:	ef 9e       	mul	r14, r31
     ba2:	70 01       	movw	r14, r0
     ba4:	11 24       	eor	r1, r1
     ba6:	f8 01       	movw	r30, r16
     ba8:	80 81       	ld	r24, Z
     baa:	91 81       	ldd	r25, Z+1	; 0x01
     bac:	ce 15       	cp	r28, r14
     bae:	df 05       	cpc	r29, r15
     bb0:	00 f1       	brcs	.+64     	; 0xbf2 <dir_sdi+0xf2>
     bb2:	0e 94 b4 04 	call	0x968	; 0x968 <get_fat>
     bb6:	ab 01       	movw	r20, r22
     bb8:	bc 01       	movw	r22, r24
     bba:	4f 3f       	cpi	r20, 0xFF	; 255
     bbc:	8f ef       	ldi	r24, 0xFF	; 255
     bbe:	58 07       	cpc	r21, r24
     bc0:	68 07       	cpc	r22, r24
     bc2:	78 07       	cpc	r23, r24
     bc4:	e9 f1       	breq	.+122    	; 0xc40 <dir_sdi+0x140>
     bc6:	42 30       	cpi	r20, 0x02	; 2
     bc8:	51 05       	cpc	r21, r1
     bca:	61 05       	cpc	r22, r1
     bcc:	71 05       	cpc	r23, r1
     bce:	08 f4       	brcc	.+2      	; 0xbd2 <dir_sdi+0xd2>
     bd0:	af cf       	rjmp	.-162    	; 0xb30 <dir_sdi+0x30>
     bd2:	d8 01       	movw	r26, r16
     bd4:	ed 91       	ld	r30, X+
     bd6:	fc 91       	ld	r31, X
     bd8:	82 8d       	ldd	r24, Z+26	; 0x1a
     bda:	93 8d       	ldd	r25, Z+27	; 0x1b
     bdc:	a4 8d       	ldd	r26, Z+28	; 0x1c
     bde:	b5 8d       	ldd	r27, Z+29	; 0x1d
     be0:	48 17       	cp	r20, r24
     be2:	59 07       	cpc	r21, r25
     be4:	6a 07       	cpc	r22, r26
     be6:	7b 07       	cpc	r23, r27
     be8:	08 f0       	brcs	.+2      	; 0xbec <dir_sdi+0xec>
     bea:	a2 cf       	rjmp	.-188    	; 0xb30 <dir_sdi+0x30>
     bec:	ce 19       	sub	r28, r14
     bee:	df 09       	sbc	r29, r15
     bf0:	da cf       	rjmp	.-76     	; 0xba6 <dir_sdi+0xa6>
     bf2:	42 87       	std	Z+10, r20	; 0x0a
     bf4:	53 87       	std	Z+11, r21	; 0x0b
     bf6:	64 87       	std	Z+12, r22	; 0x0c
     bf8:	75 87       	std	Z+13, r23	; 0x0d
     bfa:	0e 94 8c 04 	call	0x918	; 0x918 <clust2sect>
     bfe:	9e 01       	movw	r18, r28
     c00:	44 e0       	ldi	r20, 0x04	; 4
     c02:	36 95       	lsr	r19
     c04:	27 95       	ror	r18
     c06:	4a 95       	dec	r20
     c08:	e1 f7       	brne	.-8      	; 0xc02 <dir_sdi+0x102>
     c0a:	dc 01       	movw	r26, r24
     c0c:	cb 01       	movw	r24, r22
     c0e:	82 0f       	add	r24, r18
     c10:	93 1f       	adc	r25, r19
     c12:	a1 1d       	adc	r26, r1
     c14:	b1 1d       	adc	r27, r1
     c16:	f8 01       	movw	r30, r16
     c18:	86 87       	std	Z+14, r24	; 0x0e
     c1a:	97 87       	std	Z+15, r25	; 0x0f
     c1c:	a0 8b       	std	Z+16, r26	; 0x10
     c1e:	b1 8b       	std	Z+17, r27	; 0x11
     c20:	80 81       	ld	r24, Z
     c22:	91 81       	ldd	r25, Z+1	; 0x01
     c24:	c2 96       	adiw	r24, 0x32	; 50
     c26:	cf 70       	andi	r28, 0x0F	; 15
     c28:	dd 27       	eor	r29, r29
     c2a:	25 e0       	ldi	r18, 0x05	; 5
     c2c:	cc 0f       	add	r28, r28
     c2e:	dd 1f       	adc	r29, r29
     c30:	2a 95       	dec	r18
     c32:	e1 f7       	brne	.-8      	; 0xc2c <dir_sdi+0x12c>
     c34:	c8 0f       	add	r28, r24
     c36:	d9 1f       	adc	r29, r25
     c38:	d3 8b       	std	Z+19, r29	; 0x13
     c3a:	c2 8b       	std	Z+18, r28	; 0x12
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	01 c0       	rjmp	.+2      	; 0xc42 <dir_sdi+0x142>
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	ff 90       	pop	r15
     c4c:	ef 90       	pop	r14
     c4e:	08 95       	ret

00000c50 <put_fat>:
     c50:	4f 92       	push	r4
     c52:	5f 92       	push	r5
     c54:	6f 92       	push	r6
     c56:	7f 92       	push	r7
     c58:	af 92       	push	r10
     c5a:	bf 92       	push	r11
     c5c:	cf 92       	push	r12
     c5e:	df 92       	push	r13
     c60:	ef 92       	push	r14
     c62:	ff 92       	push	r15
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	00 d0       	rcall	.+0      	; 0xc6e <put_fat+0x1e>
     c6e:	00 d0       	rcall	.+0      	; 0xc70 <put_fat+0x20>
     c70:	00 d0       	rcall	.+0      	; 0xc72 <put_fat+0x22>
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62
     c76:	42 30       	cpi	r20, 0x02	; 2
     c78:	51 05       	cpc	r21, r1
     c7a:	61 05       	cpc	r22, r1
     c7c:	71 05       	cpc	r23, r1
     c7e:	08 f4       	brcc	.+2      	; 0xc82 <put_fat+0x32>
     c80:	f0 c0       	rjmp	.+480    	; 0xe62 <put_fat+0x212>
     c82:	dc 01       	movw	r26, r24
     c84:	5a 96       	adiw	r26, 0x1a	; 26
     c86:	cd 90       	ld	r12, X+
     c88:	dd 90       	ld	r13, X+
     c8a:	ed 90       	ld	r14, X+
     c8c:	fc 90       	ld	r15, X
     c8e:	5d 97       	sbiw	r26, 0x1d	; 29
     c90:	4c 15       	cp	r20, r12
     c92:	5d 05       	cpc	r21, r13
     c94:	6e 05       	cpc	r22, r14
     c96:	7f 05       	cpc	r23, r15
     c98:	08 f0       	brcs	.+2      	; 0xc9c <put_fat+0x4c>
     c9a:	e3 c0       	rjmp	.+454    	; 0xe62 <put_fat+0x212>
     c9c:	28 01       	movw	r4, r16
     c9e:	39 01       	movw	r6, r18
     ca0:	6a 01       	movw	r12, r20
     ca2:	7b 01       	movw	r14, r22
     ca4:	9e 83       	std	Y+6, r25	; 0x06
     ca6:	8d 83       	std	Y+5, r24	; 0x05
     ca8:	fc 01       	movw	r30, r24
     caa:	80 81       	ld	r24, Z
     cac:	82 30       	cpi	r24, 0x02	; 2
     cae:	09 f4       	brne	.+2      	; 0xcb2 <put_fat+0x62>
     cb0:	6f c0       	rjmp	.+222    	; 0xd90 <put_fat+0x140>
     cb2:	83 30       	cpi	r24, 0x03	; 3
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <put_fat+0x68>
     cb6:	93 c0       	rjmp	.+294    	; 0xdde <put_fat+0x18e>
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	09 f0       	breq	.+2      	; 0xcbe <put_fat+0x6e>
     cbc:	cb c0       	rjmp	.+406    	; 0xe54 <put_fat+0x204>
     cbe:	5a 01       	movw	r10, r20
     cc0:	b6 94       	lsr	r11
     cc2:	a7 94       	ror	r10
     cc4:	ac 0c       	add	r10, r12
     cc6:	bd 1c       	adc	r11, r13
     cc8:	c5 01       	movw	r24, r10
     cca:	89 2f       	mov	r24, r25
     ccc:	99 27       	eor	r25, r25
     cce:	86 95       	lsr	r24
     cd0:	42 a1       	ldd	r20, Z+34	; 0x22
     cd2:	53 a1       	ldd	r21, Z+35	; 0x23
     cd4:	64 a1       	ldd	r22, Z+36	; 0x24
     cd6:	75 a1       	ldd	r23, Z+37	; 0x25
     cd8:	48 0f       	add	r20, r24
     cda:	59 1f       	adc	r21, r25
     cdc:	61 1d       	adc	r22, r1
     cde:	71 1d       	adc	r23, r1
     ce0:	cf 01       	movw	r24, r30
     ce2:	0e 94 49 01 	call	0x292	; 0x292 <move_window>
     ce6:	81 11       	cpse	r24, r1
     ce8:	b6 c0       	rjmp	.+364    	; 0xe56 <put_fat+0x206>
     cea:	f5 01       	movw	r30, r10
     cec:	f1 70       	andi	r31, 0x01	; 1
     cee:	2d 81       	ldd	r18, Y+5	; 0x05
     cf0:	3e 81       	ldd	r19, Y+6	; 0x06
     cf2:	e2 0f       	add	r30, r18
     cf4:	f3 1f       	adc	r31, r19
     cf6:	d7 01       	movw	r26, r14
     cf8:	c6 01       	movw	r24, r12
     cfa:	81 70       	andi	r24, 0x01	; 1
     cfc:	99 27       	eor	r25, r25
     cfe:	aa 27       	eor	r26, r26
     d00:	bb 27       	eor	r27, r27
     d02:	89 83       	std	Y+1, r24	; 0x01
     d04:	9a 83       	std	Y+2, r25	; 0x02
     d06:	ab 83       	std	Y+3, r26	; 0x03
     d08:	bc 83       	std	Y+4, r27	; 0x04
     d0a:	c0 fe       	sbrs	r12, 0
     d0c:	09 c0       	rjmp	.+18     	; 0xd20 <put_fat+0xd0>
     d0e:	82 a9       	ldd	r24, Z+50	; 0x32
     d10:	28 2f       	mov	r18, r24
     d12:	2f 70       	andi	r18, 0x0F	; 15
     d14:	a0 e1       	ldi	r26, 0x10	; 16
     d16:	4a 9e       	mul	r4, r26
     d18:	c0 01       	movw	r24, r0
     d1a:	11 24       	eor	r1, r1
     d1c:	82 2b       	or	r24, r18
     d1e:	01 c0       	rjmp	.+2      	; 0xd22 <put_fat+0xd2>
     d20:	84 2d       	mov	r24, r4
     d22:	82 ab       	std	Z+50, r24	; 0x32
     d24:	bf ef       	ldi	r27, 0xFF	; 255
     d26:	ab 1a       	sub	r10, r27
     d28:	bb 0a       	sbc	r11, r27
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	ed 81       	ldd	r30, Y+5	; 0x05
     d2e:	fe 81       	ldd	r31, Y+6	; 0x06
     d30:	84 83       	std	Z+4, r24	; 0x04
     d32:	c5 01       	movw	r24, r10
     d34:	89 2f       	mov	r24, r25
     d36:	99 27       	eor	r25, r25
     d38:	86 95       	lsr	r24
     d3a:	42 a1       	ldd	r20, Z+34	; 0x22
     d3c:	53 a1       	ldd	r21, Z+35	; 0x23
     d3e:	64 a1       	ldd	r22, Z+36	; 0x24
     d40:	75 a1       	ldd	r23, Z+37	; 0x25
     d42:	48 0f       	add	r20, r24
     d44:	59 1f       	adc	r21, r25
     d46:	61 1d       	adc	r22, r1
     d48:	71 1d       	adc	r23, r1
     d4a:	cf 01       	movw	r24, r30
     d4c:	0e 94 49 01 	call	0x292	; 0x292 <move_window>
     d50:	81 11       	cpse	r24, r1
     d52:	81 c0       	rjmp	.+258    	; 0xe56 <put_fat+0x206>
     d54:	f1 e0       	ldi	r31, 0x01	; 1
     d56:	bf 22       	and	r11, r31
     d58:	ed 81       	ldd	r30, Y+5	; 0x05
     d5a:	fe 81       	ldd	r31, Y+6	; 0x06
     d5c:	ea 0d       	add	r30, r10
     d5e:	fb 1d       	adc	r31, r11
     d60:	29 81       	ldd	r18, Y+1	; 0x01
     d62:	3a 81       	ldd	r19, Y+2	; 0x02
     d64:	4b 81       	ldd	r20, Y+3	; 0x03
     d66:	5c 81       	ldd	r21, Y+4	; 0x04
     d68:	23 2b       	or	r18, r19
     d6a:	24 2b       	or	r18, r20
     d6c:	25 2b       	or	r18, r21
     d6e:	41 f0       	breq	.+16     	; 0xd80 <put_fat+0x130>
     d70:	54 e0       	ldi	r21, 0x04	; 4
     d72:	76 94       	lsr	r7
     d74:	67 94       	ror	r6
     d76:	57 94       	ror	r5
     d78:	47 94       	ror	r4
     d7a:	5a 95       	dec	r21
     d7c:	d1 f7       	brne	.-12     	; 0xd72 <put_fat+0x122>
     d7e:	06 c0       	rjmp	.+12     	; 0xd8c <put_fat+0x13c>
     d80:	02 a9       	ldd	r16, Z+50	; 0x32
     d82:	00 7f       	andi	r16, 0xF0	; 240
     d84:	95 2d       	mov	r25, r5
     d86:	9f 70       	andi	r25, 0x0F	; 15
     d88:	40 2e       	mov	r4, r16
     d8a:	49 2a       	or	r4, r25
     d8c:	42 aa       	std	Z+50, r4	; 0x32
     d8e:	63 c0       	rjmp	.+198    	; 0xe56 <put_fat+0x206>
     d90:	77 27       	eor	r23, r23
     d92:	6f 2d       	mov	r22, r15
     d94:	5e 2d       	mov	r21, r14
     d96:	4d 2d       	mov	r20, r13
     d98:	ed 81       	ldd	r30, Y+5	; 0x05
     d9a:	fe 81       	ldd	r31, Y+6	; 0x06
     d9c:	82 a1       	ldd	r24, Z+34	; 0x22
     d9e:	93 a1       	ldd	r25, Z+35	; 0x23
     da0:	a4 a1       	ldd	r26, Z+36	; 0x24
     da2:	b5 a1       	ldd	r27, Z+37	; 0x25
     da4:	48 0f       	add	r20, r24
     da6:	59 1f       	adc	r21, r25
     da8:	6a 1f       	adc	r22, r26
     daa:	7b 1f       	adc	r23, r27
     dac:	cf 01       	movw	r24, r30
     dae:	0e 94 49 01 	call	0x292	; 0x292 <move_window>
     db2:	81 11       	cpse	r24, r1
     db4:	50 c0       	rjmp	.+160    	; 0xe56 <put_fat+0x206>
     db6:	cc 0c       	add	r12, r12
     db8:	dd 1c       	adc	r13, r13
     dba:	ee 1c       	adc	r14, r14
     dbc:	ff 1c       	adc	r15, r15
     dbe:	e8 94       	clt
     dc0:	c0 f8       	bld	r12, 0
     dc2:	f1 e0       	ldi	r31, 0x01	; 1
     dc4:	df 22       	and	r13, r31
     dc6:	ee 24       	eor	r14, r14
     dc8:	ff 24       	eor	r15, r15
     dca:	22 e3       	ldi	r18, 0x32	; 50
     dcc:	c2 0e       	add	r12, r18
     dce:	d1 1c       	adc	r13, r1
     dd0:	ed 81       	ldd	r30, Y+5	; 0x05
     dd2:	fe 81       	ldd	r31, Y+6	; 0x06
     dd4:	ec 0d       	add	r30, r12
     dd6:	fd 1d       	adc	r31, r13
     dd8:	51 82       	std	Z+1, r5	; 0x01
     dda:	40 82       	st	Z, r4
     ddc:	3c c0       	rjmp	.+120    	; 0xe56 <put_fat+0x206>
     dde:	ed 81       	ldd	r30, Y+5	; 0x05
     de0:	fe 81       	ldd	r31, Y+6	; 0x06
     de2:	82 a1       	ldd	r24, Z+34	; 0x22
     de4:	93 a1       	ldd	r25, Z+35	; 0x23
     de6:	a4 a1       	ldd	r26, Z+36	; 0x24
     de8:	b5 a1       	ldd	r27, Z+37	; 0x25
     dea:	27 e0       	ldi	r18, 0x07	; 7
     dec:	76 95       	lsr	r23
     dee:	67 95       	ror	r22
     df0:	57 95       	ror	r21
     df2:	47 95       	ror	r20
     df4:	2a 95       	dec	r18
     df6:	d1 f7       	brne	.-12     	; 0xdec <put_fat+0x19c>
     df8:	48 0f       	add	r20, r24
     dfa:	59 1f       	adc	r21, r25
     dfc:	6a 1f       	adc	r22, r26
     dfe:	7b 1f       	adc	r23, r27
     e00:	cf 01       	movw	r24, r30
     e02:	0e 94 49 01 	call	0x292	; 0x292 <move_window>
     e06:	81 11       	cpse	r24, r1
     e08:	26 c0       	rjmp	.+76     	; 0xe56 <put_fat+0x206>
     e0a:	92 e0       	ldi	r25, 0x02	; 2
     e0c:	cc 0c       	add	r12, r12
     e0e:	dd 1c       	adc	r13, r13
     e10:	ee 1c       	adc	r14, r14
     e12:	ff 1c       	adc	r15, r15
     e14:	9a 95       	dec	r25
     e16:	d1 f7       	brne	.-12     	; 0xe0c <put_fat+0x1bc>
     e18:	fc ef       	ldi	r31, 0xFC	; 252
     e1a:	cf 22       	and	r12, r31
     e1c:	f1 e0       	ldi	r31, 0x01	; 1
     e1e:	df 22       	and	r13, r31
     e20:	ee 24       	eor	r14, r14
     e22:	ff 24       	eor	r15, r15
     e24:	22 e3       	ldi	r18, 0x32	; 50
     e26:	c2 0e       	add	r12, r18
     e28:	d1 1c       	adc	r13, r1
     e2a:	ed 81       	ldd	r30, Y+5	; 0x05
     e2c:	fe 81       	ldd	r31, Y+6	; 0x06
     e2e:	ec 0d       	add	r30, r12
     e30:	fd 1d       	adc	r31, r13
     e32:	00 81       	ld	r16, Z
     e34:	11 81       	ldd	r17, Z+1	; 0x01
     e36:	22 81       	ldd	r18, Z+2	; 0x02
     e38:	33 81       	ldd	r19, Z+3	; 0x03
     e3a:	00 27       	eor	r16, r16
     e3c:	11 27       	eor	r17, r17
     e3e:	22 27       	eor	r18, r18
     e40:	30 7f       	andi	r19, 0xF0	; 240
     e42:	40 2a       	or	r4, r16
     e44:	51 2a       	or	r5, r17
     e46:	62 2a       	or	r6, r18
     e48:	73 2a       	or	r7, r19
     e4a:	40 82       	st	Z, r4
     e4c:	51 82       	std	Z+1, r5	; 0x01
     e4e:	62 82       	std	Z+2, r6	; 0x02
     e50:	73 82       	std	Z+3, r7	; 0x03
     e52:	01 c0       	rjmp	.+2      	; 0xe56 <put_fat+0x206>
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	91 e0       	ldi	r25, 0x01	; 1
     e58:	ad 81       	ldd	r26, Y+5	; 0x05
     e5a:	be 81       	ldd	r27, Y+6	; 0x06
     e5c:	14 96       	adiw	r26, 0x04	; 4
     e5e:	9c 93       	st	X, r25
     e60:	01 c0       	rjmp	.+2      	; 0xe64 <put_fat+0x214>
     e62:	82 e0       	ldi	r24, 0x02	; 2
     e64:	26 96       	adiw	r28, 0x06	; 6
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	ff 90       	pop	r15
     e7a:	ef 90       	pop	r14
     e7c:	df 90       	pop	r13
     e7e:	cf 90       	pop	r12
     e80:	bf 90       	pop	r11
     e82:	af 90       	pop	r10
     e84:	7f 90       	pop	r7
     e86:	6f 90       	pop	r6
     e88:	5f 90       	pop	r5
     e8a:	4f 90       	pop	r4
     e8c:	08 95       	ret

00000e8e <create_chain>:
     e8e:	4f 92       	push	r4
     e90:	5f 92       	push	r5
     e92:	6f 92       	push	r6
     e94:	7f 92       	push	r7
     e96:	8f 92       	push	r8
     e98:	9f 92       	push	r9
     e9a:	af 92       	push	r10
     e9c:	bf 92       	push	r11
     e9e:	cf 92       	push	r12
     ea0:	df 92       	push	r13
     ea2:	ef 92       	push	r14
     ea4:	ff 92       	push	r15
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	ec 01       	movw	r28, r24
     eb0:	2a 01       	movw	r4, r20
     eb2:	3b 01       	movw	r6, r22
     eb4:	41 15       	cp	r20, r1
     eb6:	51 05       	cpc	r21, r1
     eb8:	61 05       	cpc	r22, r1
     eba:	71 05       	cpc	r23, r1
     ebc:	99 f4       	brne	.+38     	; 0xee4 <create_chain+0x56>
     ebe:	8a 84       	ldd	r8, Y+10	; 0x0a
     ec0:	9b 84       	ldd	r9, Y+11	; 0x0b
     ec2:	ac 84       	ldd	r10, Y+12	; 0x0c
     ec4:	bd 84       	ldd	r11, Y+13	; 0x0d
     ec6:	81 14       	cp	r8, r1
     ec8:	91 04       	cpc	r9, r1
     eca:	a1 04       	cpc	r10, r1
     ecc:	b1 04       	cpc	r11, r1
     ece:	09 f1       	breq	.+66     	; 0xf12 <create_chain+0x84>
     ed0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ed2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ed4:	ac 8d       	ldd	r26, Y+28	; 0x1c
     ed6:	bd 8d       	ldd	r27, Y+29	; 0x1d
     ed8:	88 16       	cp	r8, r24
     eda:	99 06       	cpc	r9, r25
     edc:	aa 06       	cpc	r10, r26
     ede:	bb 06       	cpc	r11, r27
     ee0:	e0 f0       	brcs	.+56     	; 0xf1a <create_chain+0x8c>
     ee2:	17 c0       	rjmp	.+46     	; 0xf12 <create_chain+0x84>
     ee4:	0e 94 b4 04 	call	0x968	; 0x968 <get_fat>
     ee8:	6b 01       	movw	r12, r22
     eea:	7c 01       	movw	r14, r24
     eec:	62 30       	cpi	r22, 0x02	; 2
     eee:	71 05       	cpc	r23, r1
     ef0:	81 05       	cpc	r24, r1
     ef2:	91 05       	cpc	r25, r1
     ef4:	08 f4       	brcc	.+2      	; 0xef8 <create_chain+0x6a>
     ef6:	82 c0       	rjmp	.+260    	; 0xffc <create_chain+0x16e>
     ef8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     efa:	9b 8d       	ldd	r25, Y+27	; 0x1b
     efc:	ac 8d       	ldd	r26, Y+28	; 0x1c
     efe:	bd 8d       	ldd	r27, Y+29	; 0x1d
     f00:	c8 16       	cp	r12, r24
     f02:	d9 06       	cpc	r13, r25
     f04:	ea 06       	cpc	r14, r26
     f06:	fb 06       	cpc	r15, r27
     f08:	08 f4       	brcc	.+2      	; 0xf0c <create_chain+0x7e>
     f0a:	7d c0       	rjmp	.+250    	; 0x1006 <create_chain+0x178>
     f0c:	53 01       	movw	r10, r6
     f0e:	42 01       	movw	r8, r4
     f10:	04 c0       	rjmp	.+8      	; 0xf1a <create_chain+0x8c>
     f12:	81 2c       	mov	r8, r1
     f14:	91 2c       	mov	r9, r1
     f16:	54 01       	movw	r10, r8
     f18:	83 94       	inc	r8
     f1a:	75 01       	movw	r14, r10
     f1c:	64 01       	movw	r12, r8
     f1e:	8f ef       	ldi	r24, 0xFF	; 255
     f20:	c8 1a       	sub	r12, r24
     f22:	d8 0a       	sbc	r13, r24
     f24:	e8 0a       	sbc	r14, r24
     f26:	f8 0a       	sbc	r15, r24
     f28:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f2a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f2c:	ac 8d       	ldd	r26, Y+28	; 0x1c
     f2e:	bd 8d       	ldd	r27, Y+29	; 0x1d
     f30:	c8 16       	cp	r12, r24
     f32:	d9 06       	cpc	r13, r25
     f34:	ea 06       	cpc	r14, r26
     f36:	fb 06       	cpc	r15, r27
     f38:	68 f0       	brcs	.+26     	; 0xf54 <create_chain+0xc6>
     f3a:	22 e0       	ldi	r18, 0x02	; 2
     f3c:	82 16       	cp	r8, r18
     f3e:	91 04       	cpc	r9, r1
     f40:	a1 04       	cpc	r10, r1
     f42:	b1 04       	cpc	r11, r1
     f44:	10 f4       	brcc	.+4      	; 0xf4a <create_chain+0xbc>
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	5a c0       	rjmp	.+180    	; 0xffe <create_chain+0x170>
     f4a:	82 e0       	ldi	r24, 0x02	; 2
     f4c:	c8 2e       	mov	r12, r24
     f4e:	d1 2c       	mov	r13, r1
     f50:	e1 2c       	mov	r14, r1
     f52:	f1 2c       	mov	r15, r1
     f54:	b7 01       	movw	r22, r14
     f56:	a6 01       	movw	r20, r12
     f58:	ce 01       	movw	r24, r28
     f5a:	0e 94 b4 04 	call	0x968	; 0x968 <get_fat>
     f5e:	61 15       	cp	r22, r1
     f60:	71 05       	cpc	r23, r1
     f62:	81 05       	cpc	r24, r1
     f64:	91 05       	cpc	r25, r1
     f66:	b1 f0       	breq	.+44     	; 0xf94 <create_chain+0x106>
     f68:	6f 3f       	cpi	r22, 0xFF	; 255
     f6a:	2f ef       	ldi	r18, 0xFF	; 255
     f6c:	72 07       	cpc	r23, r18
     f6e:	82 07       	cpc	r24, r18
     f70:	92 07       	cpc	r25, r18
     f72:	29 f4       	brne	.+10     	; 0xf7e <create_chain+0xf0>
     f74:	6f ef       	ldi	r22, 0xFF	; 255
     f76:	7f ef       	ldi	r23, 0xFF	; 255
     f78:	8f ef       	ldi	r24, 0xFF	; 255
     f7a:	9f ef       	ldi	r25, 0xFF	; 255
     f7c:	46 c0       	rjmp	.+140    	; 0x100a <create_chain+0x17c>
     f7e:	61 30       	cpi	r22, 0x01	; 1
     f80:	71 05       	cpc	r23, r1
     f82:	81 05       	cpc	r24, r1
     f84:	91 05       	cpc	r25, r1
     f86:	d1 f1       	breq	.+116    	; 0xffc <create_chain+0x16e>
     f88:	c8 14       	cp	r12, r8
     f8a:	d9 04       	cpc	r13, r9
     f8c:	ea 04       	cpc	r14, r10
     f8e:	fb 04       	cpc	r15, r11
     f90:	31 f6       	brne	.-116    	; 0xf1e <create_chain+0x90>
     f92:	d9 cf       	rjmp	.-78     	; 0xf46 <create_chain+0xb8>
     f94:	0f ef       	ldi	r16, 0xFF	; 255
     f96:	1f ef       	ldi	r17, 0xFF	; 255
     f98:	2f ef       	ldi	r18, 0xFF	; 255
     f9a:	3f e0       	ldi	r19, 0x0F	; 15
     f9c:	b7 01       	movw	r22, r14
     f9e:	a6 01       	movw	r20, r12
     fa0:	ce 01       	movw	r24, r28
     fa2:	0e 94 28 06 	call	0xc50	; 0xc50 <put_fat>
     fa6:	81 11       	cpse	r24, r1
     fa8:	26 c0       	rjmp	.+76     	; 0xff6 <create_chain+0x168>
     faa:	41 14       	cp	r4, r1
     fac:	51 04       	cpc	r5, r1
     fae:	61 04       	cpc	r6, r1
     fb0:	71 04       	cpc	r7, r1
     fb2:	c1 f4       	brne	.+48     	; 0xfe4 <create_chain+0x156>
     fb4:	ca 86       	std	Y+10, r12	; 0x0a
     fb6:	db 86       	std	Y+11, r13	; 0x0b
     fb8:	ec 86       	std	Y+12, r14	; 0x0c
     fba:	fd 86       	std	Y+13, r15	; 0x0d
     fbc:	8e 85       	ldd	r24, Y+14	; 0x0e
     fbe:	9f 85       	ldd	r25, Y+15	; 0x0f
     fc0:	a8 89       	ldd	r26, Y+16	; 0x10
     fc2:	b9 89       	ldd	r27, Y+17	; 0x11
     fc4:	8f 3f       	cpi	r24, 0xFF	; 255
     fc6:	2f ef       	ldi	r18, 0xFF	; 255
     fc8:	92 07       	cpc	r25, r18
     fca:	a2 07       	cpc	r26, r18
     fcc:	b2 07       	cpc	r27, r18
     fce:	d9 f0       	breq	.+54     	; 0x1006 <create_chain+0x178>
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	a1 09       	sbc	r26, r1
     fd4:	b1 09       	sbc	r27, r1
     fd6:	8e 87       	std	Y+14, r24	; 0x0e
     fd8:	9f 87       	std	Y+15, r25	; 0x0f
     fda:	a8 8b       	std	Y+16, r26	; 0x10
     fdc:	b9 8b       	std	Y+17, r27	; 0x11
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	8d 83       	std	Y+5, r24	; 0x05
     fe2:	11 c0       	rjmp	.+34     	; 0x1006 <create_chain+0x178>
     fe4:	97 01       	movw	r18, r14
     fe6:	86 01       	movw	r16, r12
     fe8:	b3 01       	movw	r22, r6
     fea:	a2 01       	movw	r20, r4
     fec:	ce 01       	movw	r24, r28
     fee:	0e 94 28 06 	call	0xc50	; 0xc50 <put_fat>
     ff2:	88 23       	and	r24, r24
     ff4:	f9 f2       	breq	.-66     	; 0xfb4 <create_chain+0x126>
     ff6:	81 30       	cpi	r24, 0x01	; 1
     ff8:	09 f4       	brne	.+2      	; 0xffc <create_chain+0x16e>
     ffa:	bc cf       	rjmp	.-136    	; 0xf74 <create_chain+0xe6>
     ffc:	61 e0       	ldi	r22, 0x01	; 1
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 c0       	rjmp	.+4      	; 0x100a <create_chain+0x17c>
    1006:	b6 01       	movw	r22, r12
    1008:	c7 01       	movw	r24, r14
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	1f 91       	pop	r17
    1010:	0f 91       	pop	r16
    1012:	ff 90       	pop	r15
    1014:	ef 90       	pop	r14
    1016:	df 90       	pop	r13
    1018:	cf 90       	pop	r12
    101a:	bf 90       	pop	r11
    101c:	af 90       	pop	r10
    101e:	9f 90       	pop	r9
    1020:	8f 90       	pop	r8
    1022:	7f 90       	pop	r7
    1024:	6f 90       	pop	r6
    1026:	5f 90       	pop	r5
    1028:	4f 90       	pop	r4
    102a:	08 95       	ret

0000102c <dir_next>:
    102c:	8f 92       	push	r8
    102e:	9f 92       	push	r9
    1030:	af 92       	push	r10
    1032:	bf 92       	push	r11
    1034:	cf 92       	push	r12
    1036:	df 92       	push	r13
    1038:	ef 92       	push	r14
    103a:	ff 92       	push	r15
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	ec 01       	movw	r28, r24
    1046:	6b 01       	movw	r12, r22
    1048:	0c 81       	ldd	r16, Y+4	; 0x04
    104a:	1d 81       	ldd	r17, Y+5	; 0x05
    104c:	0f 5f       	subi	r16, 0xFF	; 255
    104e:	1f 4f       	sbci	r17, 0xFF	; 255
    1050:	11 f4       	brne	.+4      	; 0x1056 <dir_next+0x2a>
    1052:	84 e0       	ldi	r24, 0x04	; 4
    1054:	e2 c0       	rjmp	.+452    	; 0x121a <dir_next+0x1ee>
    1056:	4e 85       	ldd	r20, Y+14	; 0x0e
    1058:	5f 85       	ldd	r21, Y+15	; 0x0f
    105a:	68 89       	ldd	r22, Y+16	; 0x10
    105c:	79 89       	ldd	r23, Y+17	; 0x11
    105e:	41 15       	cp	r20, r1
    1060:	51 05       	cpc	r21, r1
    1062:	61 05       	cpc	r22, r1
    1064:	71 05       	cpc	r23, r1
    1066:	a9 f3       	breq	.-22     	; 0x1052 <dir_next+0x26>
    1068:	78 01       	movw	r14, r16
    106a:	8f e0       	ldi	r24, 0x0F	; 15
    106c:	e8 22       	and	r14, r24
    106e:	ff 24       	eor	r15, r15
    1070:	e1 14       	cp	r14, r1
    1072:	f1 04       	cpc	r15, r1
    1074:	09 f0       	breq	.+2      	; 0x1078 <dir_next+0x4c>
    1076:	c0 c0       	rjmp	.+384    	; 0x11f8 <dir_next+0x1cc>
    1078:	4f 5f       	subi	r20, 0xFF	; 255
    107a:	5f 4f       	sbci	r21, 0xFF	; 255
    107c:	6f 4f       	sbci	r22, 0xFF	; 255
    107e:	7f 4f       	sbci	r23, 0xFF	; 255
    1080:	4e 87       	std	Y+14, r20	; 0x0e
    1082:	5f 87       	std	Y+15, r21	; 0x0f
    1084:	68 8b       	std	Y+16, r22	; 0x10
    1086:	79 8b       	std	Y+17, r23	; 0x11
    1088:	4a 85       	ldd	r20, Y+10	; 0x0a
    108a:	5b 85       	ldd	r21, Y+11	; 0x0b
    108c:	6c 85       	ldd	r22, Y+12	; 0x0c
    108e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1090:	88 81       	ld	r24, Y
    1092:	99 81       	ldd	r25, Y+1	; 0x01
    1094:	fc 01       	movw	r30, r24
    1096:	41 15       	cp	r20, r1
    1098:	51 05       	cpc	r21, r1
    109a:	61 05       	cpc	r22, r1
    109c:	71 05       	cpc	r23, r1
    109e:	31 f4       	brne	.+12     	; 0x10ac <dir_next+0x80>
    10a0:	80 85       	ldd	r24, Z+8	; 0x08
    10a2:	91 85       	ldd	r25, Z+9	; 0x09
    10a4:	08 17       	cp	r16, r24
    10a6:	19 07       	cpc	r17, r25
    10a8:	a0 f6       	brcc	.-88     	; 0x1052 <dir_next+0x26>
    10aa:	a6 c0       	rjmp	.+332    	; 0x11f8 <dir_next+0x1cc>
    10ac:	22 81       	ldd	r18, Z+2	; 0x02
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	21 50       	subi	r18, 0x01	; 1
    10b2:	31 09       	sbc	r19, r1
    10b4:	f8 01       	movw	r30, r16
    10b6:	a4 e0       	ldi	r26, 0x04	; 4
    10b8:	f6 95       	lsr	r31
    10ba:	e7 95       	ror	r30
    10bc:	aa 95       	dec	r26
    10be:	e1 f7       	brne	.-8      	; 0x10b8 <dir_next+0x8c>
    10c0:	2e 23       	and	r18, r30
    10c2:	3f 23       	and	r19, r31
    10c4:	23 2b       	or	r18, r19
    10c6:	09 f0       	breq	.+2      	; 0x10ca <dir_next+0x9e>
    10c8:	97 c0       	rjmp	.+302    	; 0x11f8 <dir_next+0x1cc>
    10ca:	0e 94 b4 04 	call	0x968	; 0x968 <get_fat>
    10ce:	4b 01       	movw	r8, r22
    10d0:	5c 01       	movw	r10, r24
    10d2:	62 30       	cpi	r22, 0x02	; 2
    10d4:	71 05       	cpc	r23, r1
    10d6:	81 05       	cpc	r24, r1
    10d8:	91 05       	cpc	r25, r1
    10da:	10 f4       	brcc	.+4      	; 0x10e0 <dir_next+0xb4>
    10dc:	82 e0       	ldi	r24, 0x02	; 2
    10de:	9d c0       	rjmp	.+314    	; 0x121a <dir_next+0x1ee>
    10e0:	8f ef       	ldi	r24, 0xFF	; 255
    10e2:	88 16       	cp	r8, r24
    10e4:	98 06       	cpc	r9, r24
    10e6:	a8 06       	cpc	r10, r24
    10e8:	b8 06       	cpc	r11, r24
    10ea:	11 f4       	brne	.+4      	; 0x10f0 <dir_next+0xc4>
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	95 c0       	rjmp	.+298    	; 0x121a <dir_next+0x1ee>
    10f0:	88 81       	ld	r24, Y
    10f2:	99 81       	ldd	r25, Y+1	; 0x01
    10f4:	fc 01       	movw	r30, r24
    10f6:	42 8d       	ldd	r20, Z+26	; 0x1a
    10f8:	53 8d       	ldd	r21, Z+27	; 0x1b
    10fa:	64 8d       	ldd	r22, Z+28	; 0x1c
    10fc:	75 8d       	ldd	r23, Z+29	; 0x1d
    10fe:	84 16       	cp	r8, r20
    1100:	95 06       	cpc	r9, r21
    1102:	a6 06       	cpc	r10, r22
    1104:	b7 06       	cpc	r11, r23
    1106:	08 f4       	brcc	.+2      	; 0x110a <dir_next+0xde>
    1108:	69 c0       	rjmp	.+210    	; 0x11dc <dir_next+0x1b0>
    110a:	cd 28       	or	r12, r13
    110c:	09 f4       	brne	.+2      	; 0x1110 <dir_next+0xe4>
    110e:	a1 cf       	rjmp	.-190    	; 0x1052 <dir_next+0x26>
    1110:	4a 85       	ldd	r20, Y+10	; 0x0a
    1112:	5b 85       	ldd	r21, Y+11	; 0x0b
    1114:	6c 85       	ldd	r22, Y+12	; 0x0c
    1116:	7d 85       	ldd	r23, Y+13	; 0x0d
    1118:	0e 94 47 07 	call	0xe8e	; 0xe8e <create_chain>
    111c:	4b 01       	movw	r8, r22
    111e:	5c 01       	movw	r10, r24
    1120:	61 15       	cp	r22, r1
    1122:	71 05       	cpc	r23, r1
    1124:	81 05       	cpc	r24, r1
    1126:	91 05       	cpc	r25, r1
    1128:	09 f4       	brne	.+2      	; 0x112c <dir_next+0x100>
    112a:	76 c0       	rjmp	.+236    	; 0x1218 <dir_next+0x1ec>
    112c:	61 30       	cpi	r22, 0x01	; 1
    112e:	71 05       	cpc	r23, r1
    1130:	81 05       	cpc	r24, r1
    1132:	91 05       	cpc	r25, r1
    1134:	99 f2       	breq	.-90     	; 0x10dc <dir_next+0xb0>
    1136:	8f ef       	ldi	r24, 0xFF	; 255
    1138:	88 16       	cp	r8, r24
    113a:	98 06       	cpc	r9, r24
    113c:	a8 06       	cpc	r10, r24
    113e:	b8 06       	cpc	r11, r24
    1140:	a9 f2       	breq	.-86     	; 0x10ec <dir_next+0xc0>
    1142:	40 e0       	ldi	r20, 0x00	; 0
    1144:	50 e0       	ldi	r21, 0x00	; 0
    1146:	ba 01       	movw	r22, r20
    1148:	88 81       	ld	r24, Y
    114a:	99 81       	ldd	r25, Y+1	; 0x01
    114c:	0e 94 49 01 	call	0x292	; 0x292 <move_window>
    1150:	81 11       	cpse	r24, r1
    1152:	cc cf       	rjmp	.-104    	; 0x10ec <dir_next+0xc0>
    1154:	88 81       	ld	r24, Y
    1156:	99 81       	ldd	r25, Y+1	; 0x01
    1158:	fc 01       	movw	r30, r24
    115a:	f2 96       	adiw	r30, 0x32	; 50
    115c:	8e 5c       	subi	r24, 0xCE	; 206
    115e:	9d 4f       	sbci	r25, 0xFD	; 253
    1160:	8e 17       	cp	r24, r30
    1162:	9f 07       	cpc	r25, r31
    1164:	11 f0       	breq	.+4      	; 0x116a <dir_next+0x13e>
    1166:	11 92       	st	Z+, r1
    1168:	fb cf       	rjmp	.-10     	; 0x1160 <dir_next+0x134>
    116a:	c8 80       	ld	r12, Y
    116c:	d9 80       	ldd	r13, Y+1	; 0x01
    116e:	b5 01       	movw	r22, r10
    1170:	a4 01       	movw	r20, r8
    1172:	c6 01       	movw	r24, r12
    1174:	0e 94 8c 04 	call	0x918	; 0x918 <clust2sect>
    1178:	f6 01       	movw	r30, r12
    117a:	66 a7       	std	Z+46, r22	; 0x2e
    117c:	77 a7       	std	Z+47, r23	; 0x2f
    117e:	80 ab       	std	Z+48, r24	; 0x30
    1180:	91 ab       	std	Z+49, r25	; 0x31
    1182:	d1 2c       	mov	r13, r1
    1184:	cc 24       	eor	r12, r12
    1186:	c3 94       	inc	r12
    1188:	e8 81       	ld	r30, Y
    118a:	f9 81       	ldd	r31, Y+1	; 0x01
    118c:	82 81       	ldd	r24, Z+2	; 0x02
    118e:	d8 16       	cp	r13, r24
    1190:	c8 f4       	brcc	.+50     	; 0x11c4 <dir_next+0x198>
    1192:	c4 82       	std	Z+4, r12	; 0x04
    1194:	40 e0       	ldi	r20, 0x00	; 0
    1196:	50 e0       	ldi	r21, 0x00	; 0
    1198:	ba 01       	movw	r22, r20
    119a:	88 81       	ld	r24, Y
    119c:	99 81       	ldd	r25, Y+1	; 0x01
    119e:	0e 94 49 01 	call	0x292	; 0x292 <move_window>
    11a2:	81 11       	cpse	r24, r1
    11a4:	a3 cf       	rjmp	.-186    	; 0x10ec <dir_next+0xc0>
    11a6:	e8 81       	ld	r30, Y
    11a8:	f9 81       	ldd	r31, Y+1	; 0x01
    11aa:	86 a5       	ldd	r24, Z+46	; 0x2e
    11ac:	97 a5       	ldd	r25, Z+47	; 0x2f
    11ae:	a0 a9       	ldd	r26, Z+48	; 0x30
    11b0:	b1 a9       	ldd	r27, Z+49	; 0x31
    11b2:	01 96       	adiw	r24, 0x01	; 1
    11b4:	a1 1d       	adc	r26, r1
    11b6:	b1 1d       	adc	r27, r1
    11b8:	86 a7       	std	Z+46, r24	; 0x2e
    11ba:	97 a7       	std	Z+47, r25	; 0x2f
    11bc:	a0 ab       	std	Z+48, r26	; 0x30
    11be:	b1 ab       	std	Z+49, r27	; 0x31
    11c0:	d3 94       	inc	r13
    11c2:	e2 cf       	rjmp	.-60     	; 0x1188 <dir_next+0x15c>
    11c4:	86 a5       	ldd	r24, Z+46	; 0x2e
    11c6:	97 a5       	ldd	r25, Z+47	; 0x2f
    11c8:	a0 a9       	ldd	r26, Z+48	; 0x30
    11ca:	b1 a9       	ldd	r27, Z+49	; 0x31
    11cc:	8d 19       	sub	r24, r13
    11ce:	91 09       	sbc	r25, r1
    11d0:	a1 09       	sbc	r26, r1
    11d2:	b1 09       	sbc	r27, r1
    11d4:	86 a7       	std	Z+46, r24	; 0x2e
    11d6:	97 a7       	std	Z+47, r25	; 0x2f
    11d8:	a0 ab       	std	Z+48, r26	; 0x30
    11da:	b1 ab       	std	Z+49, r27	; 0x31
    11dc:	8a 86       	std	Y+10, r8	; 0x0a
    11de:	9b 86       	std	Y+11, r9	; 0x0b
    11e0:	ac 86       	std	Y+12, r10	; 0x0c
    11e2:	bd 86       	std	Y+13, r11	; 0x0d
    11e4:	b5 01       	movw	r22, r10
    11e6:	a4 01       	movw	r20, r8
    11e8:	88 81       	ld	r24, Y
    11ea:	99 81       	ldd	r25, Y+1	; 0x01
    11ec:	0e 94 8c 04 	call	0x918	; 0x918 <clust2sect>
    11f0:	6e 87       	std	Y+14, r22	; 0x0e
    11f2:	7f 87       	std	Y+15, r23	; 0x0f
    11f4:	88 8b       	std	Y+16, r24	; 0x10
    11f6:	99 8b       	std	Y+17, r25	; 0x11
    11f8:	1d 83       	std	Y+5, r17	; 0x05
    11fa:	0c 83       	std	Y+4, r16	; 0x04
    11fc:	88 81       	ld	r24, Y
    11fe:	99 81       	ldd	r25, Y+1	; 0x01
    1200:	c2 96       	adiw	r24, 0x32	; 50
    1202:	25 e0       	ldi	r18, 0x05	; 5
    1204:	ee 0c       	add	r14, r14
    1206:	ff 1c       	adc	r15, r15
    1208:	2a 95       	dec	r18
    120a:	e1 f7       	brne	.-8      	; 0x1204 <dir_next+0x1d8>
    120c:	e8 0e       	add	r14, r24
    120e:	f9 1e       	adc	r15, r25
    1210:	fb 8a       	std	Y+19, r15	; 0x13
    1212:	ea 8a       	std	Y+18, r14	; 0x12
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	01 c0       	rjmp	.+2      	; 0x121a <dir_next+0x1ee>
    1218:	87 e0       	ldi	r24, 0x07	; 7
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
    1222:	ff 90       	pop	r15
    1224:	ef 90       	pop	r14
    1226:	df 90       	pop	r13
    1228:	cf 90       	pop	r12
    122a:	bf 90       	pop	r11
    122c:	af 90       	pop	r10
    122e:	9f 90       	pop	r9
    1230:	8f 90       	pop	r8
    1232:	08 95       	ret

00001234 <follow_path>:
    1234:	6f 92       	push	r6
    1236:	7f 92       	push	r7
    1238:	8f 92       	push	r8
    123a:	9f 92       	push	r9
    123c:	af 92       	push	r10
    123e:	bf 92       	push	r11
    1240:	cf 92       	push	r12
    1242:	df 92       	push	r13
    1244:	ef 92       	push	r14
    1246:	ff 92       	push	r15
    1248:	0f 93       	push	r16
    124a:	1f 93       	push	r17
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	ec 01       	movw	r28, r24
    1252:	8b 01       	movw	r16, r22
    1254:	db 01       	movw	r26, r22
    1256:	8c 91       	ld	r24, X
    1258:	8f 32       	cpi	r24, 0x2F	; 47
    125a:	11 f0       	breq	.+4      	; 0x1260 <follow_path+0x2c>
    125c:	8c 35       	cpi	r24, 0x5C	; 92
    125e:	39 f4       	brne	.+14     	; 0x126e <follow_path+0x3a>
    1260:	0f 5f       	subi	r16, 0xFF	; 255
    1262:	1f 4f       	sbci	r17, 0xFF	; 255
    1264:	1e 82       	std	Y+6, r1	; 0x06
    1266:	1f 82       	std	Y+7, r1	; 0x07
    1268:	18 86       	std	Y+8, r1	; 0x08
    126a:	19 86       	std	Y+9, r1	; 0x09
    126c:	0a c0       	rjmp	.+20     	; 0x1282 <follow_path+0x4e>
    126e:	e8 81       	ld	r30, Y
    1270:	f9 81       	ldd	r31, Y+1	; 0x01
    1272:	86 89       	ldd	r24, Z+22	; 0x16
    1274:	97 89       	ldd	r25, Z+23	; 0x17
    1276:	a0 8d       	ldd	r26, Z+24	; 0x18
    1278:	b1 8d       	ldd	r27, Z+25	; 0x19
    127a:	8e 83       	std	Y+6, r24	; 0x06
    127c:	9f 83       	std	Y+7, r25	; 0x07
    127e:	a8 87       	std	Y+8, r26	; 0x08
    1280:	b9 87       	std	Y+9, r27	; 0x09
    1282:	f8 01       	movw	r30, r16
    1284:	80 81       	ld	r24, Z
    1286:	80 32       	cpi	r24, 0x20	; 32
    1288:	28 f0       	brcs	.+10     	; 0x1294 <follow_path+0x60>
    128a:	50 e2       	ldi	r21, 0x20	; 32
    128c:	a5 2e       	mov	r10, r21
    128e:	65 e0       	ldi	r22, 0x05	; 5
    1290:	b6 2e       	mov	r11, r22
    1292:	43 c0       	rjmp	.+134    	; 0x131a <follow_path+0xe6>
    1294:	60 e0       	ldi	r22, 0x00	; 0
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	ce 01       	movw	r24, r28
    129a:	0e 94 80 05 	call	0xb00	; 0xb00 <dir_sdi>
    129e:	1b 8a       	std	Y+19, r1	; 0x13
    12a0:	1a 8a       	std	Y+18, r1	; 0x12
    12a2:	06 c1       	rjmp	.+524    	; 0x14b0 <follow_path+0x27c>
    12a4:	ea 89       	ldd	r30, Y+18	; 0x12
    12a6:	fb 89       	ldd	r31, Y+19	; 0x13
    12a8:	90 81       	ld	r25, Z
    12aa:	99 23       	and	r25, r25
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <follow_path+0x7c>
    12ae:	dd c0       	rjmp	.+442    	; 0x146a <follow_path+0x236>
    12b0:	93 85       	ldd	r25, Z+11	; 0x0b
    12b2:	93 fd       	sbrc	r25, 3
    12b4:	0c c0       	rjmp	.+24     	; 0x12ce <follow_path+0x9a>
    12b6:	ac 89       	ldd	r26, Y+20	; 0x14
    12b8:	bd 89       	ldd	r27, Y+21	; 0x15
    12ba:	af 01       	movw	r20, r30
    12bc:	45 5f       	subi	r20, 0xF5	; 245
    12be:	5f 4f       	sbci	r21, 0xFF	; 255
    12c0:	4e 17       	cp	r20, r30
    12c2:	5f 07       	cpc	r21, r31
    12c4:	a9 f0       	breq	.+42     	; 0x12f0 <follow_path+0xbc>
    12c6:	21 91       	ld	r18, Z+
    12c8:	9d 91       	ld	r25, X+
    12ca:	29 17       	cp	r18, r25
    12cc:	c9 f3       	breq	.-14     	; 0x12c0 <follow_path+0x8c>
    12ce:	60 e0       	ldi	r22, 0x00	; 0
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	ce 01       	movw	r24, r28
    12d4:	0e 94 16 08 	call	0x102c	; 0x102c <dir_next>
    12d8:	81 11       	cpse	r24, r1
    12da:	0a c0       	rjmp	.+20     	; 0x12f0 <follow_path+0xbc>
    12dc:	4e 85       	ldd	r20, Y+14	; 0x0e
    12de:	5f 85       	ldd	r21, Y+15	; 0x0f
    12e0:	68 89       	ldd	r22, Y+16	; 0x10
    12e2:	79 89       	ldd	r23, Y+17	; 0x11
    12e4:	88 81       	ld	r24, Y
    12e6:	99 81       	ldd	r25, Y+1	; 0x01
    12e8:	0e 94 49 01 	call	0x292	; 0x292 <move_window>
    12ec:	88 23       	and	r24, r24
    12ee:	d1 f2       	breq	.-76     	; 0x12a4 <follow_path+0x70>
    12f0:	ec 89       	ldd	r30, Y+20	; 0x14
    12f2:	fd 89       	ldd	r31, Y+21	; 0x15
    12f4:	93 85       	ldd	r25, Z+11	; 0x0b
    12f6:	88 23       	and	r24, r24
    12f8:	09 f4       	brne	.+2      	; 0x12fc <follow_path+0xc8>
    12fa:	b9 c0       	rjmp	.+370    	; 0x146e <follow_path+0x23a>
    12fc:	84 30       	cpi	r24, 0x04	; 4
    12fe:	09 f0       	breq	.+2      	; 0x1302 <follow_path+0xce>
    1300:	d7 c0       	rjmp	.+430    	; 0x14b0 <follow_path+0x27c>
    1302:	29 2f       	mov	r18, r25
    1304:	24 70       	andi	r18, 0x04	; 4
    1306:	95 ff       	sbrs	r25, 5
    1308:	b6 c0       	rjmp	.+364    	; 0x1476 <follow_path+0x242>
    130a:	1e 82       	std	Y+6, r1	; 0x06
    130c:	1f 82       	std	Y+7, r1	; 0x07
    130e:	18 86       	std	Y+8, r1	; 0x08
    1310:	19 86       	std	Y+9, r1	; 0x09
    1312:	1b 8a       	std	Y+19, r1	; 0x13
    1314:	1a 8a       	std	Y+18, r1	; 0x12
    1316:	21 11       	cpse	r18, r1
    1318:	ac c0       	rjmp	.+344    	; 0x1472 <follow_path+0x23e>
    131a:	6c 88       	ldd	r6, Y+20	; 0x14
    131c:	7d 88       	ldd	r7, Y+21	; 0x15
    131e:	a3 01       	movw	r20, r6
    1320:	c3 01       	movw	r24, r6
    1322:	0b 96       	adiw	r24, 0x0b	; 11
    1324:	d3 01       	movw	r26, r6
    1326:	a8 17       	cp	r26, r24
    1328:	b9 07       	cpc	r27, r25
    132a:	11 f0       	breq	.+4      	; 0x1330 <follow_path+0xfc>
    132c:	ad 92       	st	X+, r10
    132e:	fb cf       	rjmp	.-10     	; 0x1326 <follow_path+0xf2>
    1330:	d8 01       	movw	r26, r16
    1332:	8c 91       	ld	r24, X
    1334:	8e 32       	cpi	r24, 0x2E	; 46
    1336:	49 f0       	breq	.+18     	; 0x134a <follow_path+0x116>
    1338:	48 01       	movw	r8, r16
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	60 e0       	ldi	r22, 0x00	; 0
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	28 e0       	ldi	r18, 0x08	; 8
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	a0 e0       	ldi	r26, 0x00	; 0
    1348:	31 c0       	rjmp	.+98     	; 0x13ac <follow_path+0x178>
    134a:	f8 01       	movw	r30, r16
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	2f 5f       	subi	r18, 0xFF	; 255
    1352:	3f 4f       	sbci	r19, 0xFF	; 255
    1354:	81 91       	ld	r24, Z+
    1356:	8e 32       	cpi	r24, 0x2E	; 46
    1358:	41 f4       	brne	.+16     	; 0x136a <follow_path+0x136>
    135a:	23 30       	cpi	r18, 0x03	; 3
    135c:	31 05       	cpc	r19, r1
    135e:	09 f4       	brne	.+2      	; 0x1362 <follow_path+0x12e>
    1360:	7c c0       	rjmp	.+248    	; 0x145a <follow_path+0x226>
    1362:	da 01       	movw	r26, r20
    1364:	8d 93       	st	X+, r24
    1366:	ad 01       	movw	r20, r26
    1368:	f3 cf       	rjmp	.-26     	; 0x1350 <follow_path+0x11c>
    136a:	8f 32       	cpi	r24, 0x2F	; 47
    136c:	29 f0       	breq	.+10     	; 0x1378 <follow_path+0x144>
    136e:	8c 35       	cpi	r24, 0x5C	; 92
    1370:	19 f0       	breq	.+6      	; 0x1378 <follow_path+0x144>
    1372:	81 32       	cpi	r24, 0x21	; 33
    1374:	08 f0       	brcs	.+2      	; 0x1378 <follow_path+0x144>
    1376:	71 c0       	rjmp	.+226    	; 0x145a <follow_path+0x226>
    1378:	02 0f       	add	r16, r18
    137a:	13 1f       	adc	r17, r19
    137c:	81 32       	cpi	r24, 0x21	; 33
    137e:	10 f0       	brcs	.+4      	; 0x1384 <follow_path+0x150>
    1380:	80 e2       	ldi	r24, 0x20	; 32
    1382:	01 c0       	rjmp	.+2      	; 0x1386 <follow_path+0x152>
    1384:	84 e2       	ldi	r24, 0x24	; 36
    1386:	f3 01       	movw	r30, r6
    1388:	83 87       	std	Z+11, r24	; 0x0b
    138a:	69 c0       	rjmp	.+210    	; 0x145e <follow_path+0x22a>
    138c:	bf 32       	cpi	r27, 0x2F	; 47
    138e:	a9 f1       	breq	.+106    	; 0x13fa <follow_path+0x1c6>
    1390:	bc 35       	cpi	r27, 0x5C	; 92
    1392:	99 f1       	breq	.+102    	; 0x13fa <follow_path+0x1c6>
    1394:	be 32       	cpi	r27, 0x2E	; 46
    1396:	91 f4       	brne	.+36     	; 0x13bc <follow_path+0x188>
    1398:	28 30       	cpi	r18, 0x08	; 8
    139a:	31 05       	cpc	r19, r1
    139c:	09 f0       	breq	.+2      	; 0x13a0 <follow_path+0x16c>
    139e:	5d c0       	rjmp	.+186    	; 0x145a <follow_path+0x226>
    13a0:	aa 0f       	add	r26, r26
    13a2:	aa 0f       	add	r26, r26
    13a4:	88 e0       	ldi	r24, 0x08	; 8
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	2b e0       	ldi	r18, 0x0B	; 11
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	6f 5f       	subi	r22, 0xFF	; 255
    13ae:	7f 4f       	sbci	r23, 0xFF	; 255
    13b0:	f4 01       	movw	r30, r8
    13b2:	b1 91       	ld	r27, Z+
    13b4:	4f 01       	movw	r8, r30
    13b6:	b1 32       	cpi	r27, 0x21	; 33
    13b8:	48 f7       	brcc	.-46     	; 0x138c <follow_path+0x158>
    13ba:	1d c0       	rjmp	.+58     	; 0x13f6 <follow_path+0x1c2>
    13bc:	82 17       	cp	r24, r18
    13be:	93 07       	cpc	r25, r19
    13c0:	08 f0       	brcs	.+2      	; 0x13c4 <follow_path+0x190>
    13c2:	4b c0       	rjmp	.+150    	; 0x145a <follow_path+0x226>
    13c4:	b7 ff       	sbrs	r27, 7
    13c6:	07 c0       	rjmp	.+14     	; 0x13d6 <follow_path+0x1a2>
    13c8:	a3 60       	ori	r26, 0x03	; 3
    13ca:	4b 2f       	mov	r20, r27
    13cc:	50 e0       	ldi	r21, 0x00	; 0
    13ce:	40 51       	subi	r20, 0x10	; 16
    13d0:	50 40       	sbci	r21, 0x00	; 0
    13d2:	fa 01       	movw	r30, r20
    13d4:	b0 81       	ld	r27, Z
    13d6:	cb 2e       	mov	r12, r27
    13d8:	d1 2c       	mov	r13, r1
    13da:	41 e6       	ldi	r20, 0x61	; 97
    13dc:	e4 2e       	mov	r14, r20
    13de:	40 e0       	ldi	r20, 0x00	; 0
    13e0:	f4 2e       	mov	r15, r20
    13e2:	f7 01       	movw	r30, r14
    13e4:	41 91       	ld	r20, Z+
    13e6:	7f 01       	movw	r14, r30
    13e8:	44 23       	and	r20, r20
    13ea:	21 f1       	breq	.+72     	; 0x1434 <follow_path+0x200>
    13ec:	50 e0       	ldi	r21, 0x00	; 0
    13ee:	c4 16       	cp	r12, r20
    13f0:	d5 06       	cpc	r13, r21
    13f2:	b9 f7       	brne	.-18     	; 0x13e2 <follow_path+0x1ae>
    13f4:	32 c0       	rjmp	.+100    	; 0x145a <follow_path+0x226>
    13f6:	44 e0       	ldi	r20, 0x04	; 4
    13f8:	01 c0       	rjmp	.+2      	; 0x13fc <follow_path+0x1c8>
    13fa:	40 e0       	ldi	r20, 0x00	; 0
    13fc:	89 2b       	or	r24, r25
    13fe:	69 f1       	breq	.+90     	; 0x145a <follow_path+0x226>
    1400:	f3 01       	movw	r30, r6
    1402:	80 81       	ld	r24, Z
    1404:	85 3e       	cpi	r24, 0xE5	; 229
    1406:	09 f4       	brne	.+2      	; 0x140a <follow_path+0x1d6>
    1408:	b0 82       	st	Z, r11
    140a:	28 30       	cpi	r18, 0x08	; 8
    140c:	31 05       	cpc	r19, r1
    140e:	11 f4       	brne	.+4      	; 0x1414 <follow_path+0x1e0>
    1410:	aa 0f       	add	r26, r26
    1412:	aa 0f       	add	r26, r26
    1414:	8a 2f       	mov	r24, r26
    1416:	83 70       	andi	r24, 0x03	; 3
    1418:	81 30       	cpi	r24, 0x01	; 1
    141a:	09 f4       	brne	.+2      	; 0x141e <follow_path+0x1ea>
    141c:	40 61       	ori	r20, 0x10	; 16
    141e:	8a 2f       	mov	r24, r26
    1420:	8c 70       	andi	r24, 0x0C	; 12
    1422:	84 30       	cpi	r24, 0x04	; 4
    1424:	09 f4       	brne	.+2      	; 0x1428 <follow_path+0x1f4>
    1426:	48 60       	ori	r20, 0x08	; 8
    1428:	06 0f       	add	r16, r22
    142a:	17 1f       	adc	r17, r23
    142c:	d3 01       	movw	r26, r6
    142e:	1b 96       	adiw	r26, 0x0b	; 11
    1430:	4c 93       	st	X, r20
    1432:	15 c0       	rjmp	.+42     	; 0x145e <follow_path+0x22a>
    1434:	4f eb       	ldi	r20, 0xBF	; 191
    1436:	4b 0f       	add	r20, r27
    1438:	4a 31       	cpi	r20, 0x1A	; 26
    143a:	10 f4       	brcc	.+4      	; 0x1440 <follow_path+0x20c>
    143c:	a2 60       	ori	r26, 0x02	; 2
    143e:	06 c0       	rjmp	.+12     	; 0x144c <follow_path+0x218>
    1440:	4f e9       	ldi	r20, 0x9F	; 159
    1442:	4b 0f       	add	r20, r27
    1444:	4a 31       	cpi	r20, 0x1A	; 26
    1446:	10 f4       	brcc	.+4      	; 0x144c <follow_path+0x218>
    1448:	a1 60       	ori	r26, 0x01	; 1
    144a:	b0 52       	subi	r27, 0x20	; 32
    144c:	a3 01       	movw	r20, r6
    144e:	48 0f       	add	r20, r24
    1450:	59 1f       	adc	r21, r25
    1452:	fa 01       	movw	r30, r20
    1454:	b0 83       	st	Z, r27
    1456:	01 96       	adiw	r24, 0x01	; 1
    1458:	a9 cf       	rjmp	.-174    	; 0x13ac <follow_path+0x178>
    145a:	86 e0       	ldi	r24, 0x06	; 6
    145c:	29 c0       	rjmp	.+82     	; 0x14b0 <follow_path+0x27c>
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	70 e0       	ldi	r23, 0x00	; 0
    1462:	ce 01       	movw	r24, r28
    1464:	0e 94 80 05 	call	0xb00	; 0xb00 <dir_sdi>
    1468:	37 cf       	rjmp	.-402    	; 0x12d8 <follow_path+0xa4>
    146a:	84 e0       	ldi	r24, 0x04	; 4
    146c:	41 cf       	rjmp	.-382    	; 0x12f0 <follow_path+0xbc>
    146e:	92 ff       	sbrs	r25, 2
    1470:	05 c0       	rjmp	.+10     	; 0x147c <follow_path+0x248>
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	1d c0       	rjmp	.+58     	; 0x14b0 <follow_path+0x27c>
    1476:	22 23       	and	r18, r18
    1478:	d1 f0       	breq	.+52     	; 0x14ae <follow_path+0x27a>
    147a:	1a c0       	rjmp	.+52     	; 0x14b0 <follow_path+0x27c>
    147c:	ea 89       	ldd	r30, Y+18	; 0x12
    147e:	fb 89       	ldd	r31, Y+19	; 0x13
    1480:	83 85       	ldd	r24, Z+11	; 0x0b
    1482:	84 ff       	sbrs	r24, 4
    1484:	14 c0       	rjmp	.+40     	; 0x14ae <follow_path+0x27a>
    1486:	84 89       	ldd	r24, Z+20	; 0x14
    1488:	95 89       	ldd	r25, Z+21	; 0x15
    148a:	a0 e0       	ldi	r26, 0x00	; 0
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	dc 01       	movw	r26, r24
    1490:	99 27       	eor	r25, r25
    1492:	88 27       	eor	r24, r24
    1494:	42 8d       	ldd	r20, Z+26	; 0x1a
    1496:	53 8d       	ldd	r21, Z+27	; 0x1b
    1498:	60 e0       	ldi	r22, 0x00	; 0
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	84 2b       	or	r24, r20
    149e:	95 2b       	or	r25, r21
    14a0:	a6 2b       	or	r26, r22
    14a2:	b7 2b       	or	r27, r23
    14a4:	8e 83       	std	Y+6, r24	; 0x06
    14a6:	9f 83       	std	Y+7, r25	; 0x07
    14a8:	a8 87       	std	Y+8, r26	; 0x08
    14aa:	b9 87       	std	Y+9, r27	; 0x09
    14ac:	36 cf       	rjmp	.-404    	; 0x131a <follow_path+0xe6>
    14ae:	85 e0       	ldi	r24, 0x05	; 5
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	1f 91       	pop	r17
    14b6:	0f 91       	pop	r16
    14b8:	ff 90       	pop	r15
    14ba:	ef 90       	pop	r14
    14bc:	df 90       	pop	r13
    14be:	cf 90       	pop	r12
    14c0:	bf 90       	pop	r11
    14c2:	af 90       	pop	r10
    14c4:	9f 90       	pop	r9
    14c6:	8f 90       	pop	r8
    14c8:	7f 90       	pop	r7
    14ca:	6f 90       	pop	r6
    14cc:	08 95       	ret

000014ce <dir_register>:
    14ce:	1f 93       	push	r17
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	ec 01       	movw	r28, r24
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	0e 94 80 05 	call	0xb00	; 0xb00 <dir_sdi>
    14de:	18 2f       	mov	r17, r24
    14e0:	81 11       	cpse	r24, r1
    14e2:	38 c0       	rjmp	.+112    	; 0x1554 <dir_register+0x86>
    14e4:	4e 85       	ldd	r20, Y+14	; 0x0e
    14e6:	5f 85       	ldd	r21, Y+15	; 0x0f
    14e8:	68 89       	ldd	r22, Y+16	; 0x10
    14ea:	79 89       	ldd	r23, Y+17	; 0x11
    14ec:	88 81       	ld	r24, Y
    14ee:	99 81       	ldd	r25, Y+1	; 0x01
    14f0:	0e 94 49 01 	call	0x292	; 0x292 <move_window>
    14f4:	18 2f       	mov	r17, r24
    14f6:	81 11       	cpse	r24, r1
    14f8:	2d c0       	rjmp	.+90     	; 0x1554 <dir_register+0x86>
    14fa:	ea 89       	ldd	r30, Y+18	; 0x12
    14fc:	fb 89       	ldd	r31, Y+19	; 0x13
    14fe:	80 81       	ld	r24, Z
    1500:	85 3e       	cpi	r24, 0xE5	; 229
    1502:	41 f0       	breq	.+16     	; 0x1514 <dir_register+0x46>
    1504:	88 23       	and	r24, r24
    1506:	31 f0       	breq	.+12     	; 0x1514 <dir_register+0x46>
    1508:	61 e0       	ldi	r22, 0x01	; 1
    150a:	70 e0       	ldi	r23, 0x00	; 0
    150c:	ce 01       	movw	r24, r28
    150e:	0e 94 16 08 	call	0x102c	; 0x102c <dir_next>
    1512:	e5 cf       	rjmp	.-54     	; 0x14de <dir_register+0x10>
    1514:	4e 85       	ldd	r20, Y+14	; 0x0e
    1516:	5f 85       	ldd	r21, Y+15	; 0x0f
    1518:	68 89       	ldd	r22, Y+16	; 0x10
    151a:	79 89       	ldd	r23, Y+17	; 0x11
    151c:	88 81       	ld	r24, Y
    151e:	99 81       	ldd	r25, Y+1	; 0x01
    1520:	0e 94 49 01 	call	0x292	; 0x292 <move_window>
    1524:	18 2f       	mov	r17, r24
    1526:	81 11       	cpse	r24, r1
    1528:	15 c0       	rjmp	.+42     	; 0x1554 <dir_register+0x86>
    152a:	8a 89       	ldd	r24, Y+18	; 0x12
    152c:	9b 89       	ldd	r25, Y+19	; 0x13
    152e:	fc 01       	movw	r30, r24
    1530:	9c 01       	movw	r18, r24
    1532:	20 5e       	subi	r18, 0xE0	; 224
    1534:	3f 4f       	sbci	r19, 0xFF	; 255
    1536:	e2 17       	cp	r30, r18
    1538:	f3 07       	cpc	r31, r19
    153a:	11 f0       	breq	.+4      	; 0x1540 <dir_register+0x72>
    153c:	11 92       	st	Z+, r1
    153e:	fb cf       	rjmp	.-10     	; 0x1536 <dir_register+0x68>
    1540:	6c 89       	ldd	r22, Y+20	; 0x14
    1542:	7d 89       	ldd	r23, Y+21	; 0x15
    1544:	4b e0       	ldi	r20, 0x0B	; 11
    1546:	50 e0       	ldi	r21, 0x00	; 0
    1548:	0e 94 2a 01 	call	0x254	; 0x254 <mem_cpy>
    154c:	e8 81       	ld	r30, Y
    154e:	f9 81       	ldd	r31, Y+1	; 0x01
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	84 83       	std	Z+4, r24	; 0x04
    1554:	81 2f       	mov	r24, r17
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	1f 91       	pop	r17
    155c:	08 95       	ret

0000155e <remove_chain>:
    155e:	7f 92       	push	r7
    1560:	8f 92       	push	r8
    1562:	9f 92       	push	r9
    1564:	af 92       	push	r10
    1566:	bf 92       	push	r11
    1568:	cf 92       	push	r12
    156a:	df 92       	push	r13
    156c:	ef 92       	push	r14
    156e:	ff 92       	push	r15
    1570:	0f 93       	push	r16
    1572:	1f 93       	push	r17
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	ec 01       	movw	r28, r24
    157a:	6a 01       	movw	r12, r20
    157c:	7b 01       	movw	r14, r22
    157e:	42 30       	cpi	r20, 0x02	; 2
    1580:	51 05       	cpc	r21, r1
    1582:	61 05       	cpc	r22, r1
    1584:	71 05       	cpc	r23, r1
    1586:	10 f4       	brcc	.+4      	; 0x158c <remove_chain+0x2e>
    1588:	82 e0       	ldi	r24, 0x02	; 2
    158a:	4d c0       	rjmp	.+154    	; 0x1626 <remove_chain+0xc8>
    158c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    158e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1590:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1592:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1594:	48 17       	cp	r20, r24
    1596:	59 07       	cpc	r21, r25
    1598:	6a 07       	cpc	r22, r26
    159a:	7b 07       	cpc	r23, r27
    159c:	a8 f7       	brcc	.-22     	; 0x1588 <remove_chain+0x2a>
    159e:	77 24       	eor	r7, r7
    15a0:	73 94       	inc	r7
    15a2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15a4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    15a6:	ac 8d       	ldd	r26, Y+28	; 0x1c
    15a8:	bd 8d       	ldd	r27, Y+29	; 0x1d
    15aa:	c8 16       	cp	r12, r24
    15ac:	d9 06       	cpc	r13, r25
    15ae:	ea 06       	cpc	r14, r26
    15b0:	fb 06       	cpc	r15, r27
    15b2:	58 f4       	brcc	.+22     	; 0x15ca <remove_chain+0x6c>
    15b4:	b7 01       	movw	r22, r14
    15b6:	a6 01       	movw	r20, r12
    15b8:	ce 01       	movw	r24, r28
    15ba:	0e 94 b4 04 	call	0x968	; 0x968 <get_fat>
    15be:	4b 01       	movw	r8, r22
    15c0:	5c 01       	movw	r10, r24
    15c2:	67 2b       	or	r22, r23
    15c4:	68 2b       	or	r22, r24
    15c6:	69 2b       	or	r22, r25
    15c8:	11 f4       	brne	.+4      	; 0x15ce <remove_chain+0x70>
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	2c c0       	rjmp	.+88     	; 0x1626 <remove_chain+0xc8>
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	88 16       	cp	r8, r24
    15d2:	91 04       	cpc	r9, r1
    15d4:	a1 04       	cpc	r10, r1
    15d6:	b1 04       	cpc	r11, r1
    15d8:	b9 f2       	breq	.-82     	; 0x1588 <remove_chain+0x2a>
    15da:	2f ef       	ldi	r18, 0xFF	; 255
    15dc:	82 16       	cp	r8, r18
    15de:	92 06       	cpc	r9, r18
    15e0:	a2 06       	cpc	r10, r18
    15e2:	b2 06       	cpc	r11, r18
    15e4:	f9 f0       	breq	.+62     	; 0x1624 <remove_chain+0xc6>
    15e6:	00 e0       	ldi	r16, 0x00	; 0
    15e8:	10 e0       	ldi	r17, 0x00	; 0
    15ea:	98 01       	movw	r18, r16
    15ec:	b7 01       	movw	r22, r14
    15ee:	a6 01       	movw	r20, r12
    15f0:	ce 01       	movw	r24, r28
    15f2:	0e 94 28 06 	call	0xc50	; 0xc50 <put_fat>
    15f6:	81 11       	cpse	r24, r1
    15f8:	16 c0       	rjmp	.+44     	; 0x1626 <remove_chain+0xc8>
    15fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    15fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    15fe:	a8 89       	ldd	r26, Y+16	; 0x10
    1600:	b9 89       	ldd	r27, Y+17	; 0x11
    1602:	8f 3f       	cpi	r24, 0xFF	; 255
    1604:	2f ef       	ldi	r18, 0xFF	; 255
    1606:	92 07       	cpc	r25, r18
    1608:	a2 07       	cpc	r26, r18
    160a:	b2 07       	cpc	r27, r18
    160c:	41 f0       	breq	.+16     	; 0x161e <remove_chain+0xc0>
    160e:	01 96       	adiw	r24, 0x01	; 1
    1610:	a1 1d       	adc	r26, r1
    1612:	b1 1d       	adc	r27, r1
    1614:	8e 87       	std	Y+14, r24	; 0x0e
    1616:	9f 87       	std	Y+15, r25	; 0x0f
    1618:	a8 8b       	std	Y+16, r26	; 0x10
    161a:	b9 8b       	std	Y+17, r27	; 0x11
    161c:	7d 82       	std	Y+5, r7	; 0x05
    161e:	75 01       	movw	r14, r10
    1620:	64 01       	movw	r12, r8
    1622:	bf cf       	rjmp	.-130    	; 0x15a2 <remove_chain+0x44>
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	ff 90       	pop	r15
    1630:	ef 90       	pop	r14
    1632:	df 90       	pop	r13
    1634:	cf 90       	pop	r12
    1636:	bf 90       	pop	r11
    1638:	af 90       	pop	r10
    163a:	9f 90       	pop	r9
    163c:	8f 90       	pop	r8
    163e:	7f 90       	pop	r7
    1640:	08 95       	ret

00001642 <f_mount>:
    1642:	81 11       	cpse	r24, r1
    1644:	12 c0       	rjmp	.+36     	; 0x166a <f_mount+0x28>
    1646:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <FatFs>
    164a:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <FatFs+0x1>
    164e:	30 97       	sbiw	r30, 0x00	; 0
    1650:	09 f0       	breq	.+2      	; 0x1654 <f_mount+0x12>
    1652:	10 82       	st	Z, r1
    1654:	61 15       	cp	r22, r1
    1656:	71 05       	cpc	r23, r1
    1658:	11 f0       	breq	.+4      	; 0x165e <f_mount+0x1c>
    165a:	fb 01       	movw	r30, r22
    165c:	10 82       	st	Z, r1
    165e:	70 93 3a 01 	sts	0x013A, r23	; 0x80013a <FatFs+0x1>
    1662:	60 93 39 01 	sts	0x0139, r22	; 0x800139 <FatFs>
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	08 95       	ret
    166a:	8b e0       	ldi	r24, 0x0B	; 11
    166c:	08 95       	ret

0000166e <f_open>:
    166e:	4f 92       	push	r4
    1670:	5f 92       	push	r5
    1672:	6f 92       	push	r6
    1674:	7f 92       	push	r7
    1676:	8f 92       	push	r8
    1678:	9f 92       	push	r9
    167a:	af 92       	push	r10
    167c:	bf 92       	push	r11
    167e:	df 92       	push	r13
    1680:	ef 92       	push	r14
    1682:	ff 92       	push	r15
    1684:	0f 93       	push	r16
    1686:	1f 93       	push	r17
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	a4 97       	sbiw	r28, 0x24	; 36
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	de bf       	out	0x3e, r29	; 62
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	cd bf       	out	0x3d, r28	; 61
    169c:	7c 01       	movw	r14, r24
    169e:	7c a3       	std	Y+36, r23	; 0x24
    16a0:	6b a3       	std	Y+35, r22	; 0x23
    16a2:	b4 2e       	mov	r11, r20
    16a4:	dc 01       	movw	r26, r24
    16a6:	1d 92       	st	X+, r1
    16a8:	1c 92       	st	X, r1
    16aa:	b4 2f       	mov	r27, r20
    16ac:	bf 71       	andi	r27, 0x1F	; 31
    16ae:	db 2e       	mov	r13, r27
    16b0:	4e 71       	andi	r20, 0x1E	; 30
    16b2:	be 01       	movw	r22, r28
    16b4:	6f 5f       	subi	r22, 0xFF	; 255
    16b6:	7f 4f       	sbci	r23, 0xFF	; 255
    16b8:	ce 01       	movw	r24, r28
    16ba:	83 96       	adiw	r24, 0x23	; 35
    16bc:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <chk_mounted>
    16c0:	9e 01       	movw	r18, r28
    16c2:	29 5e       	subi	r18, 0xE9	; 233
    16c4:	3f 4f       	sbci	r19, 0xFF	; 255
    16c6:	3e 8b       	std	Y+22, r19	; 0x16
    16c8:	2d 8b       	std	Y+21, r18	; 0x15
    16ca:	81 11       	cpse	r24, r1
    16cc:	06 c0       	rjmp	.+12     	; 0x16da <f_open+0x6c>
    16ce:	6b a1       	ldd	r22, Y+35	; 0x23
    16d0:	7c a1       	ldd	r23, Y+36	; 0x24
    16d2:	ce 01       	movw	r24, r28
    16d4:	01 96       	adiw	r24, 0x01	; 1
    16d6:	0e 94 1a 09 	call	0x1234	; 0x1234 <follow_path>
    16da:	0b 89       	ldd	r16, Y+19	; 0x13
    16dc:	1c 89       	ldd	r17, Y+20	; 0x14
    16de:	81 11       	cpse	r24, r1
    16e0:	04 c0       	rjmp	.+8      	; 0x16ea <f_open+0x7c>
    16e2:	01 15       	cp	r16, r1
    16e4:	11 05       	cpc	r17, r1
    16e6:	09 f4       	brne	.+2      	; 0x16ea <f_open+0x7c>
    16e8:	86 e0       	ldi	r24, 0x06	; 6
    16ea:	9b 2d       	mov	r25, r11
    16ec:	9c 71       	andi	r25, 0x1C	; 28
    16ee:	09 f4       	brne	.+2      	; 0x16f2 <f_open+0x84>
    16f0:	64 c0       	rjmp	.+200    	; 0x17ba <f_open+0x14c>
    16f2:	88 23       	and	r24, r24
    16f4:	71 f0       	breq	.+28     	; 0x1712 <f_open+0xa4>
    16f6:	84 30       	cpi	r24, 0x04	; 4
    16f8:	21 f4       	brne	.+8      	; 0x1702 <f_open+0x94>
    16fa:	ce 01       	movw	r24, r28
    16fc:	01 96       	adiw	r24, 0x01	; 1
    16fe:	0e 94 67 0a 	call	0x14ce	; 0x14ce <dir_register>
    1702:	ed 2d       	mov	r30, r13
    1704:	e8 60       	ori	r30, 0x08	; 8
    1706:	de 2e       	mov	r13, r30
    1708:	81 11       	cpse	r24, r1
    170a:	c0 c0       	rjmp	.+384    	; 0x188c <f_open+0x21e>
    170c:	0b 89       	ldd	r16, Y+19	; 0x13
    170e:	1c 89       	ldd	r17, Y+20	; 0x14
    1710:	08 c0       	rjmp	.+16     	; 0x1722 <f_open+0xb4>
    1712:	b2 fc       	sbrc	r11, 2
    1714:	b6 c0       	rjmp	.+364    	; 0x1882 <f_open+0x214>
    1716:	d8 01       	movw	r26, r16
    1718:	1b 96       	adiw	r26, 0x0b	; 11
    171a:	8c 91       	ld	r24, X
    171c:	81 71       	andi	r24, 0x11	; 17
    171e:	09 f0       	breq	.+2      	; 0x1722 <f_open+0xb4>
    1720:	b4 c0       	rjmp	.+360    	; 0x188a <f_open+0x21c>
    1722:	d3 fe       	sbrs	r13, 3
    1724:	5a c0       	rjmp	.+180    	; 0x17da <f_open+0x16c>
    1726:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <get_fattime>
    172a:	f8 01       	movw	r30, r16
    172c:	66 87       	std	Z+14, r22	; 0x0e
    172e:	77 87       	std	Z+15, r23	; 0x0f
    1730:	80 8b       	std	Z+16, r24	; 0x10
    1732:	91 8b       	std	Z+17, r25	; 0x11
    1734:	13 86       	std	Z+11, r1	; 0x0b
    1736:	14 8e       	std	Z+28, r1	; 0x1c
    1738:	15 8e       	std	Z+29, r1	; 0x1d
    173a:	16 8e       	std	Z+30, r1	; 0x1e
    173c:	17 8e       	std	Z+31, r1	; 0x1f
    173e:	84 88       	ldd	r8, Z+20	; 0x14
    1740:	95 88       	ldd	r9, Z+21	; 0x15
    1742:	a1 2c       	mov	r10, r1
    1744:	b1 2c       	mov	r11, r1
    1746:	d4 01       	movw	r26, r8
    1748:	99 27       	eor	r25, r25
    174a:	88 27       	eor	r24, r24
    174c:	82 8c       	ldd	r8, Z+26	; 0x1a
    174e:	93 8c       	ldd	r9, Z+27	; 0x1b
    1750:	a1 2c       	mov	r10, r1
    1752:	b1 2c       	mov	r11, r1
    1754:	88 2a       	or	r8, r24
    1756:	99 2a       	or	r9, r25
    1758:	aa 2a       	or	r10, r26
    175a:	bb 2a       	or	r11, r27
    175c:	13 8e       	std	Z+27, r1	; 0x1b
    175e:	12 8e       	std	Z+26, r1	; 0x1a
    1760:	15 8a       	std	Z+21, r1	; 0x15
    1762:	14 8a       	std	Z+20, r1	; 0x14
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	9a 81       	ldd	r25, Y+2	; 0x02
    1768:	21 e0       	ldi	r18, 0x01	; 1
    176a:	dc 01       	movw	r26, r24
    176c:	14 96       	adiw	r26, 0x04	; 4
    176e:	2c 93       	st	X, r18
    1770:	14 97       	sbiw	r26, 0x04	; 4
    1772:	81 14       	cp	r8, r1
    1774:	91 04       	cpc	r9, r1
    1776:	a1 04       	cpc	r10, r1
    1778:	b1 04       	cpc	r11, r1
    177a:	61 f1       	breq	.+88     	; 0x17d4 <f_open+0x166>
    177c:	9e 96       	adiw	r26, 0x2e	; 46
    177e:	4d 90       	ld	r4, X+
    1780:	5d 90       	ld	r5, X+
    1782:	6d 90       	ld	r6, X+
    1784:	7c 90       	ld	r7, X
    1786:	d1 97       	sbiw	r26, 0x31	; 49
    1788:	b5 01       	movw	r22, r10
    178a:	a4 01       	movw	r20, r8
    178c:	0e 94 af 0a 	call	0x155e	; 0x155e <remove_chain>
    1790:	81 11       	cpse	r24, r1
    1792:	7c c0       	rjmp	.+248    	; 0x188c <f_open+0x21e>
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	9a 81       	ldd	r25, Y+2	; 0x02
    1798:	b1 e0       	ldi	r27, 0x01	; 1
    179a:	8b 1a       	sub	r8, r27
    179c:	91 08       	sbc	r9, r1
    179e:	a1 08       	sbc	r10, r1
    17a0:	b1 08       	sbc	r11, r1
    17a2:	fc 01       	movw	r30, r24
    17a4:	82 86       	std	Z+10, r8	; 0x0a
    17a6:	93 86       	std	Z+11, r9	; 0x0b
    17a8:	a4 86       	std	Z+12, r10	; 0x0c
    17aa:	b5 86       	std	Z+13, r11	; 0x0d
    17ac:	b3 01       	movw	r22, r6
    17ae:	a2 01       	movw	r20, r4
    17b0:	0e 94 49 01 	call	0x292	; 0x292 <move_window>
    17b4:	88 23       	and	r24, r24
    17b6:	61 f0       	breq	.+24     	; 0x17d0 <f_open+0x162>
    17b8:	69 c0       	rjmp	.+210    	; 0x188c <f_open+0x21e>
    17ba:	81 11       	cpse	r24, r1
    17bc:	67 c0       	rjmp	.+206    	; 0x188c <f_open+0x21e>
    17be:	d8 01       	movw	r26, r16
    17c0:	1b 96       	adiw	r26, 0x0b	; 11
    17c2:	8c 91       	ld	r24, X
    17c4:	84 fd       	sbrc	r24, 4
    17c6:	5f c0       	rjmp	.+190    	; 0x1886 <f_open+0x218>
    17c8:	b1 fe       	sbrs	r11, 1
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <f_open+0x162>
    17cc:	80 fd       	sbrc	r24, 0
    17ce:	5d c0       	rjmp	.+186    	; 0x188a <f_open+0x21c>
    17d0:	d3 fe       	sbrs	r13, 3
    17d2:	03 c0       	rjmp	.+6      	; 0x17da <f_open+0x16c>
    17d4:	bd 2d       	mov	r27, r13
    17d6:	b0 62       	ori	r27, 0x20	; 32
    17d8:	db 2e       	mov	r13, r27
    17da:	e9 81       	ldd	r30, Y+1	; 0x01
    17dc:	fa 81       	ldd	r31, Y+2	; 0x02
    17de:	46 a5       	ldd	r20, Z+46	; 0x2e
    17e0:	57 a5       	ldd	r21, Z+47	; 0x2f
    17e2:	60 a9       	ldd	r22, Z+48	; 0x30
    17e4:	71 a9       	ldd	r23, Z+49	; 0x31
    17e6:	d7 01       	movw	r26, r14
    17e8:	5a 96       	adiw	r26, 0x1a	; 26
    17ea:	4d 93       	st	X+, r20
    17ec:	5d 93       	st	X+, r21
    17ee:	6d 93       	st	X+, r22
    17f0:	7c 93       	st	X, r23
    17f2:	5d 97       	sbiw	r26, 0x1d	; 29
    17f4:	5f 96       	adiw	r26, 0x1f	; 31
    17f6:	1c 93       	st	X, r17
    17f8:	0e 93       	st	-X, r16
    17fa:	5e 97       	sbiw	r26, 0x1e	; 30
    17fc:	14 96       	adiw	r26, 0x04	; 4
    17fe:	dc 92       	st	X, r13
    1800:	d8 01       	movw	r26, r16
    1802:	54 96       	adiw	r26, 0x14	; 20
    1804:	8d 91       	ld	r24, X+
    1806:	9c 91       	ld	r25, X
    1808:	55 97       	sbiw	r26, 0x15	; 21
    180a:	a0 e0       	ldi	r26, 0x00	; 0
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	5c 01       	movw	r10, r24
    1810:	99 24       	eor	r9, r9
    1812:	88 24       	eor	r8, r8
    1814:	d8 01       	movw	r26, r16
    1816:	5a 96       	adiw	r26, 0x1a	; 26
    1818:	4d 91       	ld	r20, X+
    181a:	5c 91       	ld	r21, X
    181c:	5b 97       	sbiw	r26, 0x1b	; 27
    181e:	60 e0       	ldi	r22, 0x00	; 0
    1820:	70 e0       	ldi	r23, 0x00	; 0
    1822:	48 29       	or	r20, r8
    1824:	59 29       	or	r21, r9
    1826:	6a 29       	or	r22, r10
    1828:	7b 29       	or	r23, r11
    182a:	d7 01       	movw	r26, r14
    182c:	1e 96       	adiw	r26, 0x0e	; 14
    182e:	4d 93       	st	X+, r20
    1830:	5d 93       	st	X+, r21
    1832:	6d 93       	st	X+, r22
    1834:	7c 93       	st	X, r23
    1836:	51 97       	sbiw	r26, 0x11	; 17
    1838:	d8 01       	movw	r26, r16
    183a:	5c 96       	adiw	r26, 0x1c	; 28
    183c:	4d 91       	ld	r20, X+
    183e:	5d 91       	ld	r21, X+
    1840:	6d 91       	ld	r22, X+
    1842:	7c 91       	ld	r23, X
    1844:	5f 97       	sbiw	r26, 0x1f	; 31
    1846:	d7 01       	movw	r26, r14
    1848:	1a 96       	adiw	r26, 0x0a	; 10
    184a:	4d 93       	st	X+, r20
    184c:	5d 93       	st	X+, r21
    184e:	6d 93       	st	X+, r22
    1850:	7c 93       	st	X, r23
    1852:	1d 97       	sbiw	r26, 0x0d	; 13
    1854:	16 96       	adiw	r26, 0x06	; 6
    1856:	1d 92       	st	X+, r1
    1858:	1d 92       	st	X+, r1
    185a:	1d 92       	st	X+, r1
    185c:	1c 92       	st	X, r1
    185e:	19 97       	sbiw	r26, 0x09	; 9
    1860:	56 96       	adiw	r26, 0x16	; 22
    1862:	1d 92       	st	X+, r1
    1864:	1d 92       	st	X+, r1
    1866:	1d 92       	st	X+, r1
    1868:	1c 92       	st	X, r1
    186a:	59 97       	sbiw	r26, 0x19	; 25
    186c:	11 96       	adiw	r26, 0x01	; 1
    186e:	fc 93       	st	X, r31
    1870:	ee 93       	st	-X, r30
    1872:	86 81       	ldd	r24, Z+6	; 0x06
    1874:	97 81       	ldd	r25, Z+7	; 0x07
    1876:	13 96       	adiw	r26, 0x03	; 3
    1878:	9c 93       	st	X, r25
    187a:	8e 93       	st	-X, r24
    187c:	12 97       	sbiw	r26, 0x02	; 2
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	05 c0       	rjmp	.+10     	; 0x188c <f_open+0x21e>
    1882:	88 e0       	ldi	r24, 0x08	; 8
    1884:	03 c0       	rjmp	.+6      	; 0x188c <f_open+0x21e>
    1886:	84 e0       	ldi	r24, 0x04	; 4
    1888:	01 c0       	rjmp	.+2      	; 0x188c <f_open+0x21e>
    188a:	87 e0       	ldi	r24, 0x07	; 7
    188c:	a4 96       	adiw	r28, 0x24	; 36
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	ff 90       	pop	r15
    18a2:	ef 90       	pop	r14
    18a4:	df 90       	pop	r13
    18a6:	bf 90       	pop	r11
    18a8:	af 90       	pop	r10
    18aa:	9f 90       	pop	r9
    18ac:	8f 90       	pop	r8
    18ae:	7f 90       	pop	r7
    18b0:	6f 90       	pop	r6
    18b2:	5f 90       	pop	r5
    18b4:	4f 90       	pop	r4
    18b6:	08 95       	ret

000018b8 <f_read>:
    18b8:	2f 92       	push	r2
    18ba:	3f 92       	push	r3
    18bc:	4f 92       	push	r4
    18be:	5f 92       	push	r5
    18c0:	6f 92       	push	r6
    18c2:	7f 92       	push	r7
    18c4:	8f 92       	push	r8
    18c6:	9f 92       	push	r9
    18c8:	af 92       	push	r10
    18ca:	bf 92       	push	r11
    18cc:	cf 92       	push	r12
    18ce:	df 92       	push	r13
    18d0:	ef 92       	push	r14
    18d2:	ff 92       	push	r15
    18d4:	0f 93       	push	r16
    18d6:	1f 93       	push	r17
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
    18dc:	ec 01       	movw	r28, r24
    18de:	5b 01       	movw	r10, r22
    18e0:	6a 01       	movw	r12, r20
    18e2:	19 01       	movw	r2, r18
    18e4:	f9 01       	movw	r30, r18
    18e6:	11 82       	std	Z+1, r1	; 0x01
    18e8:	10 82       	st	Z, r1
    18ea:	6a 81       	ldd	r22, Y+2	; 0x02
    18ec:	7b 81       	ldd	r23, Y+3	; 0x03
    18ee:	88 81       	ld	r24, Y
    18f0:	99 81       	ldd	r25, Y+1	; 0x01
    18f2:	0e 94 76 04 	call	0x8ec	; 0x8ec <validate>
    18f6:	81 11       	cpse	r24, r1
    18f8:	0c c1       	rjmp	.+536    	; 0x1b12 <f_read+0x25a>
    18fa:	8c 81       	ldd	r24, Y+4	; 0x04
    18fc:	87 fd       	sbrc	r24, 7
    18fe:	06 c1       	rjmp	.+524    	; 0x1b0c <f_read+0x254>
    1900:	80 ff       	sbrs	r24, 0
    1902:	06 c1       	rjmp	.+524    	; 0x1b10 <f_read+0x258>
    1904:	8a 85       	ldd	r24, Y+10	; 0x0a
    1906:	9b 85       	ldd	r25, Y+11	; 0x0b
    1908:	ac 85       	ldd	r26, Y+12	; 0x0c
    190a:	bd 85       	ldd	r27, Y+13	; 0x0d
    190c:	4e 81       	ldd	r20, Y+6	; 0x06
    190e:	5f 81       	ldd	r21, Y+7	; 0x07
    1910:	68 85       	ldd	r22, Y+8	; 0x08
    1912:	79 85       	ldd	r23, Y+9	; 0x09
    1914:	84 1b       	sub	r24, r20
    1916:	95 0b       	sbc	r25, r21
    1918:	a6 0b       	sbc	r26, r22
    191a:	b7 0b       	sbc	r27, r23
    191c:	a6 01       	movw	r20, r12
    191e:	60 e0       	ldi	r22, 0x00	; 0
    1920:	70 e0       	ldi	r23, 0x00	; 0
    1922:	84 17       	cp	r24, r20
    1924:	95 07       	cpc	r25, r21
    1926:	a6 07       	cpc	r26, r22
    1928:	b7 07       	cpc	r27, r23
    192a:	08 f0       	brcs	.+2      	; 0x192e <f_read+0x76>
    192c:	76 c0       	rjmp	.+236    	; 0x1a1a <f_read+0x162>
    192e:	6c 01       	movw	r12, r24
    1930:	74 c0       	rjmp	.+232    	; 0x1a1a <f_read+0x162>
    1932:	4e 81       	ldd	r20, Y+6	; 0x06
    1934:	5f 81       	ldd	r21, Y+7	; 0x07
    1936:	68 85       	ldd	r22, Y+8	; 0x08
    1938:	79 85       	ldd	r23, Y+9	; 0x09
    193a:	db 01       	movw	r26, r22
    193c:	ca 01       	movw	r24, r20
    193e:	91 70       	andi	r25, 0x01	; 1
    1940:	aa 27       	eor	r26, r26
    1942:	bb 27       	eor	r27, r27
    1944:	89 2b       	or	r24, r25
    1946:	8a 2b       	or	r24, r26
    1948:	8b 2b       	or	r24, r27
    194a:	09 f0       	breq	.+2      	; 0x194e <f_read+0x96>
    194c:	b1 c0       	rjmp	.+354    	; 0x1ab0 <f_read+0x1f8>
    194e:	88 81       	ld	r24, Y
    1950:	99 81       	ldd	r25, Y+1	; 0x01
    1952:	fc 01       	movw	r30, r24
    1954:	22 81       	ldd	r18, Z+2	; 0x02
    1956:	21 50       	subi	r18, 0x01	; 1
    1958:	2a 01       	movw	r4, r20
    195a:	3b 01       	movw	r6, r22
    195c:	e9 e0       	ldi	r30, 0x09	; 9
    195e:	76 94       	lsr	r7
    1960:	67 94       	ror	r6
    1962:	57 94       	ror	r5
    1964:	47 94       	ror	r4
    1966:	ea 95       	dec	r30
    1968:	d1 f7       	brne	.-12     	; 0x195e <f_read+0xa6>
    196a:	12 2f       	mov	r17, r18
    196c:	14 21       	and	r17, r4
    196e:	09 f4       	brne	.+2      	; 0x1972 <f_read+0xba>
    1970:	59 c0       	rjmp	.+178    	; 0x1a24 <f_read+0x16c>
    1972:	88 80       	ld	r8, Y
    1974:	99 80       	ldd	r9, Y+1	; 0x01
    1976:	4a 89       	ldd	r20, Y+18	; 0x12
    1978:	5b 89       	ldd	r21, Y+19	; 0x13
    197a:	6c 89       	ldd	r22, Y+20	; 0x14
    197c:	7d 89       	ldd	r23, Y+21	; 0x15
    197e:	c4 01       	movw	r24, r8
    1980:	0e 94 8c 04 	call	0x918	; 0x918 <clust2sect>
    1984:	61 15       	cp	r22, r1
    1986:	71 05       	cpc	r23, r1
    1988:	81 05       	cpc	r24, r1
    198a:	91 05       	cpc	r25, r1
    198c:	09 f4       	brne	.+2      	; 0x1990 <f_read+0xd8>
    198e:	6a c0       	rjmp	.+212    	; 0x1a64 <f_read+0x1ac>
    1990:	2b 01       	movw	r4, r22
    1992:	3c 01       	movw	r6, r24
    1994:	41 0e       	add	r4, r17
    1996:	51 1c       	adc	r5, r1
    1998:	61 1c       	adc	r6, r1
    199a:	71 1c       	adc	r7, r1
    199c:	76 01       	movw	r14, r12
    199e:	ef 2c       	mov	r14, r15
    19a0:	ff 24       	eor	r15, r15
    19a2:	e6 94       	lsr	r14
    19a4:	e1 14       	cp	r14, r1
    19a6:	f1 04       	cpc	r15, r1
    19a8:	09 f4       	brne	.+2      	; 0x19ac <f_read+0xf4>
    19aa:	7e c0       	rjmp	.+252    	; 0x1aa8 <f_read+0x1f0>
    19ac:	f4 01       	movw	r30, r8
    19ae:	82 81       	ldd	r24, Z+2	; 0x02
    19b0:	21 2f       	mov	r18, r17
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	a9 01       	movw	r20, r18
    19b6:	4e 0d       	add	r20, r14
    19b8:	5f 1d       	adc	r21, r15
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	84 17       	cp	r24, r20
    19be:	95 07       	cpc	r25, r21
    19c0:	18 f4       	brcc	.+6      	; 0x19c8 <f_read+0x110>
    19c2:	7c 01       	movw	r14, r24
    19c4:	e2 1a       	sub	r14, r18
    19c6:	f3 0a       	sbc	r15, r19
    19c8:	0e 2d       	mov	r16, r14
    19ca:	a3 01       	movw	r20, r6
    19cc:	92 01       	movw	r18, r4
    19ce:	b5 01       	movw	r22, r10
    19d0:	f4 01       	movw	r30, r8
    19d2:	81 81       	ldd	r24, Z+1	; 0x01
    19d4:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <disk_read>
    19d8:	81 11       	cpse	r24, r1
    19da:	80 c0       	rjmp	.+256    	; 0x1adc <f_read+0x224>
    19dc:	e8 81       	ld	r30, Y
    19de:	f9 81       	ldd	r31, Y+1	; 0x01
    19e0:	84 81       	ldd	r24, Z+4	; 0x04
    19e2:	81 11       	cpse	r24, r1
    19e4:	43 c0       	rjmp	.+134    	; 0x1a6c <f_read+0x1b4>
    19e6:	fe 2c       	mov	r15, r14
    19e8:	ee 24       	eor	r14, r14
    19ea:	ff 0c       	add	r15, r15
    19ec:	ae 0c       	add	r10, r14
    19ee:	bf 1c       	adc	r11, r15
    19f0:	8e 81       	ldd	r24, Y+6	; 0x06
    19f2:	9f 81       	ldd	r25, Y+7	; 0x07
    19f4:	a8 85       	ldd	r26, Y+8	; 0x08
    19f6:	b9 85       	ldd	r27, Y+9	; 0x09
    19f8:	8e 0d       	add	r24, r14
    19fa:	9f 1d       	adc	r25, r15
    19fc:	a1 1d       	adc	r26, r1
    19fe:	b1 1d       	adc	r27, r1
    1a00:	8e 83       	std	Y+6, r24	; 0x06
    1a02:	9f 83       	std	Y+7, r25	; 0x07
    1a04:	a8 87       	std	Y+8, r26	; 0x08
    1a06:	b9 87       	std	Y+9, r27	; 0x09
    1a08:	f1 01       	movw	r30, r2
    1a0a:	80 81       	ld	r24, Z
    1a0c:	91 81       	ldd	r25, Z+1	; 0x01
    1a0e:	8e 0d       	add	r24, r14
    1a10:	9f 1d       	adc	r25, r15
    1a12:	91 83       	std	Z+1, r25	; 0x01
    1a14:	80 83       	st	Z, r24
    1a16:	ce 18       	sub	r12, r14
    1a18:	df 08       	sbc	r13, r15
    1a1a:	c1 14       	cp	r12, r1
    1a1c:	d1 04       	cpc	r13, r1
    1a1e:	09 f0       	breq	.+2      	; 0x1a22 <f_read+0x16a>
    1a20:	88 cf       	rjmp	.-240    	; 0x1932 <f_read+0x7a>
    1a22:	72 c0       	rjmp	.+228    	; 0x1b08 <f_read+0x250>
    1a24:	45 2b       	or	r20, r21
    1a26:	46 2b       	or	r20, r22
    1a28:	47 2b       	or	r20, r23
    1a2a:	29 f4       	brne	.+10     	; 0x1a36 <f_read+0x17e>
    1a2c:	6e 85       	ldd	r22, Y+14	; 0x0e
    1a2e:	7f 85       	ldd	r23, Y+15	; 0x0f
    1a30:	88 89       	ldd	r24, Y+16	; 0x10
    1a32:	99 89       	ldd	r25, Y+17	; 0x11
    1a34:	06 c0       	rjmp	.+12     	; 0x1a42 <f_read+0x18a>
    1a36:	4a 89       	ldd	r20, Y+18	; 0x12
    1a38:	5b 89       	ldd	r21, Y+19	; 0x13
    1a3a:	6c 89       	ldd	r22, Y+20	; 0x14
    1a3c:	7d 89       	ldd	r23, Y+21	; 0x15
    1a3e:	0e 94 b4 04 	call	0x968	; 0x968 <get_fat>
    1a42:	62 30       	cpi	r22, 0x02	; 2
    1a44:	71 05       	cpc	r23, r1
    1a46:	81 05       	cpc	r24, r1
    1a48:	91 05       	cpc	r25, r1
    1a4a:	60 f0       	brcs	.+24     	; 0x1a64 <f_read+0x1ac>
    1a4c:	6f 3f       	cpi	r22, 0xFF	; 255
    1a4e:	ff ef       	ldi	r31, 0xFF	; 255
    1a50:	7f 07       	cpc	r23, r31
    1a52:	8f 07       	cpc	r24, r31
    1a54:	9f 07       	cpc	r25, r31
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <f_read+0x1a2>
    1a58:	41 c0       	rjmp	.+130    	; 0x1adc <f_read+0x224>
    1a5a:	6a 8b       	std	Y+18, r22	; 0x12
    1a5c:	7b 8b       	std	Y+19, r23	; 0x13
    1a5e:	8c 8b       	std	Y+20, r24	; 0x14
    1a60:	9d 8b       	std	Y+21, r25	; 0x15
    1a62:	87 cf       	rjmp	.-242    	; 0x1972 <f_read+0xba>
    1a64:	8c 81       	ldd	r24, Y+4	; 0x04
    1a66:	80 68       	ori	r24, 0x80	; 128
    1a68:	8c 83       	std	Y+4, r24	; 0x04
    1a6a:	50 c0       	rjmp	.+160    	; 0x1b0c <f_read+0x254>
    1a6c:	86 a5       	ldd	r24, Z+46	; 0x2e
    1a6e:	97 a5       	ldd	r25, Z+47	; 0x2f
    1a70:	a0 a9       	ldd	r26, Z+48	; 0x30
    1a72:	b1 a9       	ldd	r27, Z+49	; 0x31
    1a74:	84 19       	sub	r24, r4
    1a76:	95 09       	sbc	r25, r5
    1a78:	a6 09       	sbc	r26, r6
    1a7a:	b7 09       	sbc	r27, r7
    1a7c:	a7 01       	movw	r20, r14
    1a7e:	60 e0       	ldi	r22, 0x00	; 0
    1a80:	70 e0       	ldi	r23, 0x00	; 0
    1a82:	84 17       	cp	r24, r20
    1a84:	95 07       	cpc	r25, r21
    1a86:	a6 07       	cpc	r26, r22
    1a88:	b7 07       	cpc	r27, r23
    1a8a:	08 f0       	brcs	.+2      	; 0x1a8e <f_read+0x1d6>
    1a8c:	ac cf       	rjmp	.-168    	; 0x19e6 <f_read+0x12e>
    1a8e:	bf 01       	movw	r22, r30
    1a90:	6e 5c       	subi	r22, 0xCE	; 206
    1a92:	7f 4f       	sbci	r23, 0xFF	; 255
    1a94:	98 2f       	mov	r25, r24
    1a96:	88 27       	eor	r24, r24
    1a98:	99 0f       	add	r25, r25
    1a9a:	40 e0       	ldi	r20, 0x00	; 0
    1a9c:	52 e0       	ldi	r21, 0x02	; 2
    1a9e:	8a 0d       	add	r24, r10
    1aa0:	9b 1d       	adc	r25, r11
    1aa2:	0e 94 2a 01 	call	0x254	; 0x254 <mem_cpy>
    1aa6:	9f cf       	rjmp	.-194    	; 0x19e6 <f_read+0x12e>
    1aa8:	4e 8a       	std	Y+22, r4	; 0x16
    1aaa:	5f 8a       	std	Y+23, r5	; 0x17
    1aac:	68 8e       	std	Y+24, r6	; 0x18
    1aae:	79 8e       	std	Y+25, r7	; 0x19
    1ab0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ab2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ab4:	91 70       	andi	r25, 0x01	; 1
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	32 e0       	ldi	r19, 0x02	; 2
    1aba:	28 1b       	sub	r18, r24
    1abc:	39 0b       	sbc	r19, r25
    1abe:	76 01       	movw	r14, r12
    1ac0:	2c 15       	cp	r18, r12
    1ac2:	3d 05       	cpc	r19, r13
    1ac4:	08 f4       	brcc	.+2      	; 0x1ac8 <f_read+0x210>
    1ac6:	79 01       	movw	r14, r18
    1ac8:	4e 89       	ldd	r20, Y+22	; 0x16
    1aca:	5f 89       	ldd	r21, Y+23	; 0x17
    1acc:	68 8d       	ldd	r22, Y+24	; 0x18
    1ace:	79 8d       	ldd	r23, Y+25	; 0x19
    1ad0:	88 81       	ld	r24, Y
    1ad2:	99 81       	ldd	r25, Y+1	; 0x01
    1ad4:	0e 94 49 01 	call	0x292	; 0x292 <move_window>
    1ad8:	88 23       	and	r24, r24
    1ada:	29 f0       	breq	.+10     	; 0x1ae6 <f_read+0x22e>
    1adc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ade:	80 68       	ori	r24, 0x80	; 128
    1ae0:	8c 83       	std	Y+4, r24	; 0x04
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	16 c0       	rjmp	.+44     	; 0x1b12 <f_read+0x25a>
    1ae6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae8:	9f 81       	ldd	r25, Y+7	; 0x07
    1aea:	a8 85       	ldd	r26, Y+8	; 0x08
    1aec:	b9 85       	ldd	r27, Y+9	; 0x09
    1aee:	91 70       	andi	r25, 0x01	; 1
    1af0:	aa 27       	eor	r26, r26
    1af2:	bb 27       	eor	r27, r27
    1af4:	c2 96       	adiw	r24, 0x32	; 50
    1af6:	68 81       	ld	r22, Y
    1af8:	79 81       	ldd	r23, Y+1	; 0x01
    1afa:	68 0f       	add	r22, r24
    1afc:	79 1f       	adc	r23, r25
    1afe:	a7 01       	movw	r20, r14
    1b00:	c5 01       	movw	r24, r10
    1b02:	0e 94 2a 01 	call	0x254	; 0x254 <mem_cpy>
    1b06:	72 cf       	rjmp	.-284    	; 0x19ec <f_read+0x134>
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	03 c0       	rjmp	.+6      	; 0x1b12 <f_read+0x25a>
    1b0c:	82 e0       	ldi	r24, 0x02	; 2
    1b0e:	01 c0       	rjmp	.+2      	; 0x1b12 <f_read+0x25a>
    1b10:	87 e0       	ldi	r24, 0x07	; 7
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	1f 91       	pop	r17
    1b18:	0f 91       	pop	r16
    1b1a:	ff 90       	pop	r15
    1b1c:	ef 90       	pop	r14
    1b1e:	df 90       	pop	r13
    1b20:	cf 90       	pop	r12
    1b22:	bf 90       	pop	r11
    1b24:	af 90       	pop	r10
    1b26:	9f 90       	pop	r9
    1b28:	8f 90       	pop	r8
    1b2a:	7f 90       	pop	r7
    1b2c:	6f 90       	pop	r6
    1b2e:	5f 90       	pop	r5
    1b30:	4f 90       	pop	r4
    1b32:	3f 90       	pop	r3
    1b34:	2f 90       	pop	r2
    1b36:	08 95       	ret

00001b38 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    1b38:	4f 92       	push	r4
    1b3a:	5f 92       	push	r5
    1b3c:	6f 92       	push	r6
    1b3e:	7f 92       	push	r7
    1b40:	8f 92       	push	r8
    1b42:	9f 92       	push	r9
    1b44:	af 92       	push	r10
    1b46:	bf 92       	push	r11
    1b48:	cf 92       	push	r12
    1b4a:	df 92       	push	r13
    1b4c:	ef 92       	push	r14
    1b4e:	ff 92       	push	r15
    1b50:	0f 93       	push	r16
    1b52:	1f 93       	push	r17
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
    1b58:	00 d0       	rcall	.+0      	; 0x1b5a <f_lseek+0x22>
    1b5a:	00 d0       	rcall	.+0      	; 0x1b5c <f_lseek+0x24>
    1b5c:	00 d0       	rcall	.+0      	; 0x1b5e <f_lseek+0x26>
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	9e 83       	std	Y+6, r25	; 0x06
    1b64:	8d 83       	std	Y+5, r24	; 0x05
    1b66:	6a 01       	movw	r12, r20
    1b68:	7b 01       	movw	r14, r22
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	12 96       	adiw	r26, 0x02	; 2
    1b6e:	6d 91       	ld	r22, X+
    1b70:	7c 91       	ld	r23, X
    1b72:	13 97       	sbiw	r26, 0x03	; 3
    1b74:	8d 91       	ld	r24, X+
    1b76:	9c 91       	ld	r25, X
    1b78:	0e 94 76 04 	call	0x8ec	; 0x8ec <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1b7c:	81 11       	cpse	r24, r1
    1b7e:	7d c1       	rjmp	.+762    	; 0x1e7a <f_lseek+0x342>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    1b80:	ed 81       	ldd	r30, Y+5	; 0x05
    1b82:	fe 81       	ldd	r31, Y+6	; 0x06
    1b84:	24 81       	ldd	r18, Z+4	; 0x04
    1b86:	27 fd       	sbrc	r18, 7
    1b88:	70 c1       	rjmp	.+736    	; 0x1e6a <f_lseek+0x332>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    1b8a:	82 85       	ldd	r24, Z+10	; 0x0a
    1b8c:	93 85       	ldd	r25, Z+11	; 0x0b
    1b8e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b90:	b5 85       	ldd	r27, Z+13	; 0x0d
    1b92:	8c 15       	cp	r24, r12
    1b94:	9d 05       	cpc	r25, r13
    1b96:	ae 05       	cpc	r26, r14
    1b98:	bf 05       	cpc	r27, r15
    1b9a:	20 f4       	brcc	.+8      	; 0x1ba4 <f_lseek+0x6c>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    1b9c:	21 fd       	sbrc	r18, 1
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <f_lseek+0x6c>
    1ba0:	6c 01       	movw	r12, r24
    1ba2:	7d 01       	movw	r14, r26
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
    1ba4:	ad 81       	ldd	r26, Y+5	; 0x05
    1ba6:	be 81       	ldd	r27, Y+6	; 0x06
    1ba8:	16 96       	adiw	r26, 0x06	; 6
    1baa:	4d 90       	ld	r4, X+
    1bac:	5d 90       	ld	r5, X+
    1bae:	6d 90       	ld	r6, X+
    1bb0:	7c 90       	ld	r7, X
    1bb2:	19 97       	sbiw	r26, 0x09	; 9
		fp->fptr = nsect = 0;
    1bb4:	fd 01       	movw	r30, r26
    1bb6:	16 82       	std	Z+6, r1	; 0x06
    1bb8:	17 82       	std	Z+7, r1	; 0x07
    1bba:	10 86       	std	Z+8, r1	; 0x08
    1bbc:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    1bbe:	c1 14       	cp	r12, r1
    1bc0:	d1 04       	cpc	r13, r1
    1bc2:	e1 04       	cpc	r14, r1
    1bc4:	f1 04       	cpc	r15, r1
    1bc6:	09 f4       	brne	.+2      	; 0x1bca <f_lseek+0x92>
    1bc8:	54 c1       	rjmp	.+680    	; 0x1e72 <f_lseek+0x33a>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    1bca:	ad 81       	ldd	r26, Y+5	; 0x05
    1bcc:	be 81       	ldd	r27, Y+6	; 0x06
    1bce:	0d 91       	ld	r16, X+
    1bd0:	1c 91       	ld	r17, X
    1bd2:	f8 01       	movw	r30, r16
    1bd4:	82 80       	ldd	r8, Z+2	; 0x02
    1bd6:	91 2c       	mov	r9, r1
    1bd8:	a1 2c       	mov	r10, r1
    1bda:	b1 2c       	mov	r11, r1
    1bdc:	39 e0       	ldi	r19, 0x09	; 9
    1bde:	88 0c       	add	r8, r8
    1be0:	99 1c       	adc	r9, r9
    1be2:	aa 1c       	adc	r10, r10
    1be4:	bb 1c       	adc	r11, r11
    1be6:	3a 95       	dec	r19
    1be8:	d1 f7       	brne	.-12     	; 0x1bde <f_lseek+0xa6>
			if (ifptr > 0 &&
    1bea:	41 14       	cp	r4, r1
    1bec:	51 04       	cpc	r5, r1
    1bee:	61 04       	cpc	r6, r1
    1bf0:	71 04       	cpc	r7, r1
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <f_lseek+0xbe>
    1bf4:	40 c0       	rjmp	.+128    	; 0x1c76 <f_lseek+0x13e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    1bf6:	f1 e0       	ldi	r31, 0x01	; 1
    1bf8:	4f 1a       	sub	r4, r31
    1bfa:	51 08       	sbc	r5, r1
    1bfc:	61 08       	sbc	r6, r1
    1bfe:	71 08       	sbc	r7, r1

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    1c00:	c7 01       	movw	r24, r14
    1c02:	b6 01       	movw	r22, r12
    1c04:	61 50       	subi	r22, 0x01	; 1
    1c06:	71 09       	sbc	r23, r1
    1c08:	81 09       	sbc	r24, r1
    1c0a:	91 09       	sbc	r25, r1
    1c0c:	a5 01       	movw	r20, r10
    1c0e:	94 01       	movw	r18, r8
    1c10:	0e 94 7f 19 	call	0x32fe	; 0x32fe <__udivmodsi4>
    1c14:	29 83       	std	Y+1, r18	; 0x01
    1c16:	3a 83       	std	Y+2, r19	; 0x02
    1c18:	4b 83       	std	Y+3, r20	; 0x03
    1c1a:	5c 83       	std	Y+4, r21	; 0x04
    1c1c:	c3 01       	movw	r24, r6
    1c1e:	b2 01       	movw	r22, r4
    1c20:	a5 01       	movw	r20, r10
    1c22:	94 01       	movw	r18, r8
    1c24:	0e 94 7f 19 	call	0x32fe	; 0x32fe <__udivmodsi4>
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
    1c2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2c:	ab 81       	ldd	r26, Y+3	; 0x03
    1c2e:	bc 81       	ldd	r27, Y+4	; 0x04
    1c30:	82 17       	cp	r24, r18
    1c32:	93 07       	cpc	r25, r19
    1c34:	a4 07       	cpc	r26, r20
    1c36:	b5 07       	cpc	r27, r21
    1c38:	f0 f0       	brcs	.+60     	; 0x1c76 <f_lseek+0x13e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    1c3a:	88 27       	eor	r24, r24
    1c3c:	99 27       	eor	r25, r25
    1c3e:	dc 01       	movw	r26, r24
    1c40:	88 19       	sub	r24, r8
    1c42:	99 09       	sbc	r25, r9
    1c44:	aa 09       	sbc	r26, r10
    1c46:	bb 09       	sbc	r27, r11
    1c48:	48 22       	and	r4, r24
    1c4a:	59 22       	and	r5, r25
    1c4c:	6a 22       	and	r6, r26
    1c4e:	7b 22       	and	r7, r27
    1c50:	ad 81       	ldd	r26, Y+5	; 0x05
    1c52:	be 81       	ldd	r27, Y+6	; 0x06
    1c54:	16 96       	adiw	r26, 0x06	; 6
    1c56:	4d 92       	st	X+, r4
    1c58:	5d 92       	st	X+, r5
    1c5a:	6d 92       	st	X+, r6
    1c5c:	7c 92       	st	X, r7
    1c5e:	19 97       	sbiw	r26, 0x09	; 9
				ofs -= fp->fptr;
    1c60:	c4 18       	sub	r12, r4
    1c62:	d5 08       	sbc	r13, r5
    1c64:	e6 08       	sbc	r14, r6
    1c66:	f7 08       	sbc	r15, r7
				clst = fp->curr_clust;
    1c68:	52 96       	adiw	r26, 0x12	; 18
    1c6a:	4d 91       	ld	r20, X+
    1c6c:	5d 91       	ld	r21, X+
    1c6e:	6d 91       	ld	r22, X+
    1c70:	7c 91       	ld	r23, X
    1c72:	55 97       	sbiw	r26, 0x15	; 21
    1c74:	2e c0       	rjmp	.+92     	; 0x1cd2 <f_lseek+0x19a>
			} else {									/* When seek to back cluster, */
				clst = fp->org_clust;					/* start from the first cluster */
    1c76:	ed 81       	ldd	r30, Y+5	; 0x05
    1c78:	fe 81       	ldd	r31, Y+6	; 0x06
    1c7a:	46 85       	ldd	r20, Z+14	; 0x0e
    1c7c:	57 85       	ldd	r21, Z+15	; 0x0f
    1c7e:	60 89       	ldd	r22, Z+16	; 0x10
    1c80:	71 89       	ldd	r23, Z+17	; 0x11
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    1c82:	41 15       	cp	r20, r1
    1c84:	51 05       	cpc	r21, r1
    1c86:	61 05       	cpc	r22, r1
    1c88:	71 05       	cpc	r23, r1
    1c8a:	e9 f4       	brne	.+58     	; 0x1cc6 <f_lseek+0x18e>
					clst = create_chain(fp->fs, 0);
    1c8c:	40 e0       	ldi	r20, 0x00	; 0
    1c8e:	50 e0       	ldi	r21, 0x00	; 0
    1c90:	ba 01       	movw	r22, r20
    1c92:	c8 01       	movw	r24, r16
    1c94:	0e 94 47 07 	call	0xe8e	; 0xe8e <create_chain>
    1c98:	ab 01       	movw	r20, r22
    1c9a:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    1c9c:	41 30       	cpi	r20, 0x01	; 1
    1c9e:	51 05       	cpc	r21, r1
    1ca0:	61 05       	cpc	r22, r1
    1ca2:	71 05       	cpc	r23, r1
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <f_lseek+0x170>
    1ca6:	9e c0       	rjmp	.+316    	; 0x1de4 <f_lseek+0x2ac>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1ca8:	4f 3f       	cpi	r20, 0xFF	; 255
    1caa:	bf ef       	ldi	r27, 0xFF	; 255
    1cac:	5b 07       	cpc	r21, r27
    1cae:	6b 07       	cpc	r22, r27
    1cb0:	7b 07       	cpc	r23, r27
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <f_lseek+0x17e>
    1cb4:	62 c0       	rjmp	.+196    	; 0x1d7a <f_lseek+0x242>
					fp->org_clust = clst;
    1cb6:	ad 81       	ldd	r26, Y+5	; 0x05
    1cb8:	be 81       	ldd	r27, Y+6	; 0x06
    1cba:	1e 96       	adiw	r26, 0x0e	; 14
    1cbc:	4d 93       	st	X+, r20
    1cbe:	5d 93       	st	X+, r21
    1cc0:	6d 93       	st	X+, r22
    1cc2:	7c 93       	st	X, r23
    1cc4:	51 97       	sbiw	r26, 0x11	; 17
				}
#endif
				fp->curr_clust = clst;
    1cc6:	ed 81       	ldd	r30, Y+5	; 0x05
    1cc8:	fe 81       	ldd	r31, Y+6	; 0x06
    1cca:	42 8b       	std	Z+18, r20	; 0x12
    1ccc:	53 8b       	std	Z+19, r21	; 0x13
    1cce:	64 8b       	std	Z+20, r22	; 0x14
    1cd0:	75 8b       	std	Z+21, r23	; 0x15
			}
			if (clst != 0) {
    1cd2:	41 15       	cp	r20, r1
    1cd4:	51 05       	cpc	r21, r1
    1cd6:	61 05       	cpc	r22, r1
    1cd8:	71 05       	cpc	r23, r1
    1cda:	89 f5       	brne	.+98     	; 0x1d3e <f_lseek+0x206>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    1cdc:	c1 2c       	mov	r12, r1
    1cde:	d1 2c       	mov	r13, r1
    1ce0:	76 01       	movw	r14, r12
    1ce2:	94 c0       	rjmp	.+296    	; 0x1e0c <f_lseek+0x2d4>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    1ce4:	42 30       	cpi	r20, 0x02	; 2
    1ce6:	51 05       	cpc	r21, r1
    1ce8:	61 05       	cpc	r22, r1
    1cea:	71 05       	cpc	r23, r1
    1cec:	08 f4       	brcc	.+2      	; 0x1cf0 <f_lseek+0x1b8>
    1cee:	51 c0       	rjmp	.+162    	; 0x1d92 <f_lseek+0x25a>
    1cf0:	ad 81       	ldd	r26, Y+5	; 0x05
    1cf2:	be 81       	ldd	r27, Y+6	; 0x06
    1cf4:	ed 91       	ld	r30, X+
    1cf6:	fc 91       	ld	r31, X
    1cf8:	82 8d       	ldd	r24, Z+26	; 0x1a
    1cfa:	93 8d       	ldd	r25, Z+27	; 0x1b
    1cfc:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1cfe:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1d00:	48 17       	cp	r20, r24
    1d02:	59 07       	cpc	r21, r25
    1d04:	6a 07       	cpc	r22, r26
    1d06:	7b 07       	cpc	r23, r27
    1d08:	08 f0       	brcs	.+2      	; 0x1d0c <f_lseek+0x1d4>
    1d0a:	43 c0       	rjmp	.+134    	; 0x1d92 <f_lseek+0x25a>
					fp->curr_clust = clst;
    1d0c:	ad 81       	ldd	r26, Y+5	; 0x05
    1d0e:	be 81       	ldd	r27, Y+6	; 0x06
    1d10:	52 96       	adiw	r26, 0x12	; 18
    1d12:	4d 93       	st	X+, r20
    1d14:	5d 93       	st	X+, r21
    1d16:	6d 93       	st	X+, r22
    1d18:	7c 93       	st	X, r23
    1d1a:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    1d1c:	fd 01       	movw	r30, r26
    1d1e:	86 81       	ldd	r24, Z+6	; 0x06
    1d20:	97 81       	ldd	r25, Z+7	; 0x07
    1d22:	a0 85       	ldd	r26, Z+8	; 0x08
    1d24:	b1 85       	ldd	r27, Z+9	; 0x09
    1d26:	88 0d       	add	r24, r8
    1d28:	99 1d       	adc	r25, r9
    1d2a:	aa 1d       	adc	r26, r10
    1d2c:	bb 1d       	adc	r27, r11
    1d2e:	86 83       	std	Z+6, r24	; 0x06
    1d30:	97 83       	std	Z+7, r25	; 0x07
    1d32:	a0 87       	std	Z+8, r26	; 0x08
    1d34:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    1d36:	c8 18       	sub	r12, r8
    1d38:	d9 08       	sbc	r13, r9
    1d3a:	ea 08       	sbc	r14, r10
    1d3c:	fb 08       	sbc	r15, r11
				}
#endif
				fp->curr_clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    1d3e:	8c 14       	cp	r8, r12
    1d40:	9d 04       	cpc	r9, r13
    1d42:	ae 04       	cpc	r10, r14
    1d44:	bf 04       	cpc	r11, r15
    1d46:	68 f5       	brcc	.+90     	; 0x1da2 <f_lseek+0x26a>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    1d48:	ad 81       	ldd	r26, Y+5	; 0x05
    1d4a:	be 81       	ldd	r27, Y+6	; 0x06
    1d4c:	14 96       	adiw	r26, 0x04	; 4
    1d4e:	2c 91       	ld	r18, X
    1d50:	14 97       	sbiw	r26, 0x04	; 4
    1d52:	8d 91       	ld	r24, X+
    1d54:	9c 91       	ld	r25, X
    1d56:	21 ff       	sbrs	r18, 1
    1d58:	17 c0       	rjmp	.+46     	; 0x1d88 <f_lseek+0x250>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    1d5a:	0e 94 47 07 	call	0xe8e	; 0xe8e <create_chain>
    1d5e:	ab 01       	movw	r20, r22
    1d60:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    1d62:	41 15       	cp	r20, r1
    1d64:	51 05       	cpc	r21, r1
    1d66:	61 05       	cpc	r22, r1
    1d68:	71 05       	cpc	r23, r1
    1d6a:	c9 f0       	breq	.+50     	; 0x1d9e <f_lseek+0x266>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1d6c:	4f 3f       	cpi	r20, 0xFF	; 255
    1d6e:	bf ef       	ldi	r27, 0xFF	; 255
    1d70:	5b 07       	cpc	r21, r27
    1d72:	6b 07       	cpc	r22, r27
    1d74:	7b 07       	cpc	r23, r27
    1d76:	09 f0       	breq	.+2      	; 0x1d7a <f_lseek+0x242>
    1d78:	b5 cf       	rjmp	.-150    	; 0x1ce4 <f_lseek+0x1ac>
    1d7a:	ed 81       	ldd	r30, Y+5	; 0x05
    1d7c:	fe 81       	ldd	r31, Y+6	; 0x06
    1d7e:	84 81       	ldd	r24, Z+4	; 0x04
    1d80:	80 68       	ori	r24, 0x80	; 128
    1d82:	84 83       	std	Z+4, r24	; 0x04
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	79 c0       	rjmp	.+242    	; 0x1e7a <f_lseek+0x342>
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    1d88:	0e 94 b4 04 	call	0x968	; 0x968 <get_fat>
    1d8c:	ab 01       	movw	r20, r22
    1d8e:	bc 01       	movw	r22, r24
    1d90:	ed cf       	rjmp	.-38     	; 0x1d6c <f_lseek+0x234>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    1d92:	ed 81       	ldd	r30, Y+5	; 0x05
    1d94:	fe 81       	ldd	r31, Y+6	; 0x06
    1d96:	84 81       	ldd	r24, Z+4	; 0x04
    1d98:	80 68       	ori	r24, 0x80	; 128
    1d9a:	84 83       	std	Z+4, r24	; 0x04
    1d9c:	66 c0       	rjmp	.+204    	; 0x1e6a <f_lseek+0x332>
    1d9e:	75 01       	movw	r14, r10
    1da0:	64 01       	movw	r12, r8
					fp->curr_clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    1da2:	ed 81       	ldd	r30, Y+5	; 0x05
    1da4:	fe 81       	ldd	r31, Y+6	; 0x06
    1da6:	86 81       	ldd	r24, Z+6	; 0x06
    1da8:	97 81       	ldd	r25, Z+7	; 0x07
    1daa:	a0 85       	ldd	r26, Z+8	; 0x08
    1dac:	b1 85       	ldd	r27, Z+9	; 0x09
    1dae:	8c 0d       	add	r24, r12
    1db0:	9d 1d       	adc	r25, r13
    1db2:	ae 1d       	adc	r26, r14
    1db4:	bf 1d       	adc	r27, r15
    1db6:	86 83       	std	Z+6, r24	; 0x06
    1db8:	97 83       	std	Z+7, r25	; 0x07
    1dba:	a0 87       	std	Z+8, r26	; 0x08
    1dbc:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    1dbe:	d7 01       	movw	r26, r14
    1dc0:	c6 01       	movw	r24, r12
    1dc2:	91 70       	andi	r25, 0x01	; 1
    1dc4:	aa 27       	eor	r26, r26
    1dc6:	bb 27       	eor	r27, r27
    1dc8:	89 2b       	or	r24, r25
    1dca:	8a 2b       	or	r24, r26
    1dcc:	8b 2b       	or	r24, r27
    1dce:	09 f4       	brne	.+2      	; 0x1dd2 <f_lseek+0x29a>
    1dd0:	85 cf       	rjmp	.-246    	; 0x1cdc <f_lseek+0x1a4>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    1dd2:	80 81       	ld	r24, Z
    1dd4:	91 81       	ldd	r25, Z+1	; 0x01
    1dd6:	0e 94 8c 04 	call	0x918	; 0x918 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    1dda:	61 15       	cp	r22, r1
    1ddc:	71 05       	cpc	r23, r1
    1dde:	81 05       	cpc	r24, r1
    1de0:	91 05       	cpc	r25, r1
    1de2:	49 f4       	brne	.+18     	; 0x1df6 <f_lseek+0x2be>
    1de4:	ad 81       	ldd	r26, Y+5	; 0x05
    1de6:	be 81       	ldd	r27, Y+6	; 0x06
    1de8:	14 96       	adiw	r26, 0x04	; 4
    1dea:	8c 91       	ld	r24, X
    1dec:	14 97       	sbiw	r26, 0x04	; 4
    1dee:	80 68       	ori	r24, 0x80	; 128
    1df0:	14 96       	adiw	r26, 0x04	; 4
    1df2:	8c 93       	st	X, r24
    1df4:	3a c0       	rjmp	.+116    	; 0x1e6a <f_lseek+0x332>
					nsect += ofs / SS(fp->fs);
    1df6:	29 e0       	ldi	r18, 0x09	; 9
    1df8:	f6 94       	lsr	r15
    1dfa:	e7 94       	ror	r14
    1dfc:	d7 94       	ror	r13
    1dfe:	c7 94       	ror	r12
    1e00:	2a 95       	dec	r18
    1e02:	d1 f7       	brne	.-12     	; 0x1df8 <f_lseek+0x2c0>
    1e04:	c6 0e       	add	r12, r22
    1e06:	d7 1e       	adc	r13, r23
    1e08:	e8 1e       	adc	r14, r24
    1e0a:	f9 1e       	adc	r15, r25
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    1e0c:	ed 81       	ldd	r30, Y+5	; 0x05
    1e0e:	fe 81       	ldd	r31, Y+6	; 0x06
    1e10:	86 81       	ldd	r24, Z+6	; 0x06
    1e12:	97 81       	ldd	r25, Z+7	; 0x07
    1e14:	a0 85       	ldd	r26, Z+8	; 0x08
    1e16:	b1 85       	ldd	r27, Z+9	; 0x09
    1e18:	ac 01       	movw	r20, r24
    1e1a:	bd 01       	movw	r22, r26
    1e1c:	51 70       	andi	r21, 0x01	; 1
    1e1e:	66 27       	eor	r22, r22
    1e20:	77 27       	eor	r23, r23
    1e22:	45 2b       	or	r20, r21
    1e24:	46 2b       	or	r20, r22
    1e26:	47 2b       	or	r20, r23
    1e28:	69 f0       	breq	.+26     	; 0x1e44 <f_lseek+0x30c>
    1e2a:	46 89       	ldd	r20, Z+22	; 0x16
    1e2c:	57 89       	ldd	r21, Z+23	; 0x17
    1e2e:	60 8d       	ldd	r22, Z+24	; 0x18
    1e30:	71 8d       	ldd	r23, Z+25	; 0x19
    1e32:	c4 16       	cp	r12, r20
    1e34:	d5 06       	cpc	r13, r21
    1e36:	e6 06       	cpc	r14, r22
    1e38:	f7 06       	cpc	r15, r23
    1e3a:	21 f0       	breq	.+8      	; 0x1e44 <f_lseek+0x30c>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    1e3c:	c6 8a       	std	Z+22, r12	; 0x16
    1e3e:	d7 8a       	std	Z+23, r13	; 0x17
    1e40:	e0 8e       	std	Z+24, r14	; 0x18
    1e42:	f1 8e       	std	Z+25, r15	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set change flag if the file size is extended */
    1e44:	ed 81       	ldd	r30, Y+5	; 0x05
    1e46:	fe 81       	ldd	r31, Y+6	; 0x06
    1e48:	42 85       	ldd	r20, Z+10	; 0x0a
    1e4a:	53 85       	ldd	r21, Z+11	; 0x0b
    1e4c:	64 85       	ldd	r22, Z+12	; 0x0c
    1e4e:	75 85       	ldd	r23, Z+13	; 0x0d
    1e50:	48 17       	cp	r20, r24
    1e52:	59 07       	cpc	r21, r25
    1e54:	6a 07       	cpc	r22, r26
    1e56:	7b 07       	cpc	r23, r27
    1e58:	50 f4       	brcc	.+20     	; 0x1e6e <f_lseek+0x336>
			fp->fsize = fp->fptr;
    1e5a:	82 87       	std	Z+10, r24	; 0x0a
    1e5c:	93 87       	std	Z+11, r25	; 0x0b
    1e5e:	a4 87       	std	Z+12, r26	; 0x0c
    1e60:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    1e62:	84 81       	ldd	r24, Z+4	; 0x04
    1e64:	80 62       	ori	r24, 0x20	; 32
    1e66:	84 83       	std	Z+4, r24	; 0x04
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <f_lseek+0x336>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    1e6a:	82 e0       	ldi	r24, 0x02	; 2
    1e6c:	06 c0       	rjmp	.+12     	; 0x1e7a <f_lseek+0x342>
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	04 c0       	rjmp	.+8      	; 0x1e7a <f_lseek+0x342>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	dc 01       	movw	r26, r24
    1e78:	e5 cf       	rjmp	.-54     	; 0x1e44 <f_lseek+0x30c>
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    1e7a:	26 96       	adiw	r28, 0x06	; 6
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	f8 94       	cli
    1e80:	de bf       	out	0x3e, r29	; 62
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	cd bf       	out	0x3d, r28	; 61
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	1f 91       	pop	r17
    1e8c:	0f 91       	pop	r16
    1e8e:	ff 90       	pop	r15
    1e90:	ef 90       	pop	r14
    1e92:	df 90       	pop	r13
    1e94:	cf 90       	pop	r12
    1e96:	bf 90       	pop	r11
    1e98:	af 90       	pop	r10
    1e9a:	9f 90       	pop	r9
    1e9c:	8f 90       	pop	r8
    1e9e:	7f 90       	pop	r7
    1ea0:	6f 90       	pop	r6
    1ea2:	5f 90       	pop	r5
    1ea4:	4f 90       	pop	r4
    1ea6:	08 95       	ret

00001ea8 <rx_handler>:
	TCCR2 |= (1 << CS22) | (1 << CS21) | (1 << CS20); // presc. 1024
	
}

void toggleLed(){
	PORTA ^= (1 << 0);
    1ea8:	8e 3f       	cpi	r24, 0xFE	; 254
    1eaa:	49 f0       	breq	.+18     	; 0x1ebe <rx_handler+0x16>
    1eac:	68 2f       	mov	r22, r24
    1eae:	8e e1       	ldi	r24, 0x1E	; 30
    1eb0:	94 e0       	ldi	r25, 0x04	; 4
    1eb2:	0e 94 09 01 	call	0x212	; 0x212 <bufferAddToEnd>
    1eb6:	81 11       	cpse	r24, r1
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <rx_handler+0x16>
    1eba:	0c 94 e7 18 	jmp	0x31ce	; 0x31ce <uartFlushReceiveBuffer>
    1ebe:	08 95       	ret

00001ec0 <get_fattime>:
    1ec0:	60 e0       	ldi	r22, 0x00	; 0
    1ec2:	70 e0       	ldi	r23, 0x00	; 0
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	08 95       	ret

00001ec8 <configTimers>:
    1ec8:	8c e9       	ldi	r24, 0x9C	; 156
    1eca:	83 bd       	out	0x23, r24	; 35
    1ecc:	85 b5       	in	r24, 0x25	; 37
    1ece:	88 60       	ori	r24, 0x08	; 8
    1ed0:	85 bd       	out	0x25, r24	; 37
    1ed2:	89 b7       	in	r24, 0x39	; 57
    1ed4:	80 68       	ori	r24, 0x80	; 128
    1ed6:	89 bf       	out	0x39, r24	; 57
    1ed8:	85 b5       	in	r24, 0x25	; 37
    1eda:	87 60       	ori	r24, 0x07	; 7
    1edc:	85 bd       	out	0x25, r24	; 37
    1ede:	08 95       	ret

00001ee0 <setInputs>:
}

void setInputs(){
	// adc
	cbi(PORTA,ADC_CH_ADC0);
    1ee0:	d8 98       	cbi	0x1b, 0	; 27
	cbi(DDRA,ADC_CH_ADC0);
    1ee2:	d0 98       	cbi	0x1a, 0	; 26
	// switches: input, pull-ups
	cbi(DDRB,SW0);
    1ee4:	b8 98       	cbi	0x17, 0	; 23
	cbi(DDRB,SW1);
    1ee6:	b9 98       	cbi	0x17, 1	; 23
	cbi(DDRB,SW2);
    1ee8:	ba 98       	cbi	0x17, 2	; 23
	cbi(DDRB,SW3);
    1eea:	bb 98       	cbi	0x17, 3	; 23
	sbi(PORTB,SW0);
    1eec:	c0 9a       	sbi	0x18, 0	; 24
	sbi(PORTB,SW1);
    1eee:	c1 9a       	sbi	0x18, 1	; 24
	sbi(PORTB,SW2);
    1ef0:	c2 9a       	sbi	0x18, 2	; 24
	sbi(PORTB,SW3);
    1ef2:	c3 9a       	sbi	0x18, 3	; 24
    1ef4:	08 95       	ret

00001ef6 <readInputs>:
	
}

INPUT readInputs(unsigned char *pot,unsigned char but[]){
    1ef6:	0f 93       	push	r16
    1ef8:	1f 93       	push	r17
    1efa:	cf 93       	push	r28
    1efc:	df 93       	push	r29
    1efe:	8c 01       	movw	r16, r24
    1f00:	eb 01       	movw	r28, r22
	static unsigned char adc_old = 0;
	static unsigned char but_old[4] = {0,0,0,0};	
	unsigned char i;
	
	*pot = a2dConvert8bit(ADC_CH_ADC0);
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	0e 94 c2 00 	call	0x184	; 0x184 <a2dConvert8bit>
    1f08:	f8 01       	movw	r30, r16
    1f0a:	80 83       	st	Z, r24
	but[SW0] = !(PINB & (1 << SW0));
    1f0c:	96 b3       	in	r25, 0x16	; 22
    1f0e:	91 70       	andi	r25, 0x01	; 1
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	98 27       	eor	r25, r24
    1f14:	98 83       	st	Y, r25
	but[SW1] = !(PINB & (1 << SW1));
    1f16:	96 b3       	in	r25, 0x16	; 22
    1f18:	96 95       	lsr	r25
    1f1a:	91 70       	andi	r25, 0x01	; 1
    1f1c:	98 27       	eor	r25, r24
    1f1e:	99 83       	std	Y+1, r25	; 0x01
	but[SW2] = !(PINB & (1 << SW2));
    1f20:	96 b3       	in	r25, 0x16	; 22
    1f22:	92 fb       	bst	r25, 2
    1f24:	99 27       	eor	r25, r25
    1f26:	90 f9       	bld	r25, 0
    1f28:	98 27       	eor	r25, r24
    1f2a:	9a 83       	std	Y+2, r25	; 0x02
	but[SW3] = !(PINB & (1 << SW3));
    1f2c:	96 b3       	in	r25, 0x16	; 22
    1f2e:	93 fb       	bst	r25, 3
    1f30:	99 27       	eor	r25, r25
    1f32:	90 f9       	bld	r25, 0
    1f34:	89 27       	eor	r24, r25
    1f36:	8b 83       	std	Y+3, r24	; 0x03
	
	if((*pot) != adc_old){
    1f38:	80 81       	ld	r24, Z
    1f3a:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <adc_old.1885>
    1f3e:	89 17       	cp	r24, r25
    1f40:	21 f0       	breq	.+8      	; 0x1f4a <readInputs+0x54>
		adc_old = *pot;
    1f42:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <adc_old.1885>
		return POT;
    1f46:	84 e0       	ldi	r24, 0x04	; 4
    1f48:	0f c0       	rjmp	.+30     	; 0x1f68 <readInputs+0x72>
    1f4a:	eb e3       	ldi	r30, 0x3B	; 59
    1f4c:	f1 e0       	ldi	r31, 0x01	; 1
	but[SW0] = !(PINB & (1 << SW0));
	but[SW1] = !(PINB & (1 << SW1));
	but[SW2] = !(PINB & (1 << SW2));
	but[SW3] = !(PINB & (1 << SW3));
	
	if((*pot) != adc_old){
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
		adc_old = *pot;
		return POT;
	}
	
	for(i = 0; i < 4; i++){
		if(but[i] != but_old[i]){
    1f50:	99 91       	ld	r25, Y+
    1f52:	20 81       	ld	r18, Z
    1f54:	92 17       	cp	r25, r18
    1f56:	19 f0       	breq	.+6      	; 0x1f5e <readInputs+0x68>
			but_old[i] = but[i];
    1f58:	90 83       	st	Z, r25
			if(but[i] == 1)
    1f5a:	91 30       	cpi	r25, 0x01	; 1
    1f5c:	29 f0       	breq	.+10     	; 0x1f68 <readInputs+0x72>
	if((*pot) != adc_old){
		adc_old = *pot;
		return POT;
	}
	
	for(i = 0; i < 4; i++){
    1f5e:	8f 5f       	subi	r24, 0xFF	; 255
    1f60:	31 96       	adiw	r30, 0x01	; 1
    1f62:	84 30       	cpi	r24, 0x04	; 4
    1f64:	a9 f7       	brne	.-22     	; 0x1f50 <readInputs+0x5a>
		}
		
	
	}
	
	return NONE;
    1f66:	8f ef       	ldi	r24, 0xFF	; 255
	
    1f68:	df 91       	pop	r29
    1f6a:	cf 91       	pop	r28
    1f6c:	1f 91       	pop	r17
    1f6e:	0f 91       	pop	r16
    1f70:	08 95       	ret

00001f72 <lcdInitHW>:
}

void lcdHome(void)
{
	// move cursor to home
	lcdControlWrite(1<<LCD_HOME);
    1f72:	92 98       	cbi	0x12, 2	; 18
    1f74:	93 98       	cbi	0x12, 3	; 18
    1f76:	94 98       	cbi	0x12, 4	; 18
    1f78:	8a 9a       	sbi	0x11, 2	; 17
    1f7a:	8b 9a       	sbi	0x11, 3	; 17
    1f7c:	8c 9a       	sbi	0x11, 4	; 17
    1f7e:	8a b3       	in	r24, 0x1a	; 26
    1f80:	8f 70       	andi	r24, 0x0F	; 15
    1f82:	8a bb       	out	0x1a, r24	; 26
    1f84:	8b b3       	in	r24, 0x1b	; 27
    1f86:	80 6f       	ori	r24, 0xF0	; 240
    1f88:	8b bb       	out	0x1b, r24	; 27
    1f8a:	08 95       	ret

00001f8c <lcdBusyWait>:
    1f8c:	92 98       	cbi	0x12, 2	; 18
    1f8e:	8a b3       	in	r24, 0x1a	; 26
    1f90:	8f 70       	andi	r24, 0x0F	; 15
    1f92:	8a bb       	out	0x1a, r24	; 26
    1f94:	8b b3       	in	r24, 0x1b	; 27
    1f96:	80 6f       	ori	r24, 0xF0	; 240
    1f98:	8b bb       	out	0x1b, r24	; 27
    1f9a:	93 9a       	sbi	0x12, 3	; 18
    1f9c:	94 9a       	sbi	0x12, 4	; 18
	...
    1fba:	cf 9b       	sbis	0x19, 7	; 25
    1fbc:	67 c0       	rjmp	.+206    	; 0x208c <lcdBusyWait+0x100>
    1fbe:	94 98       	cbi	0x12, 4	; 18
	...
    1ff8:	94 9a       	sbi	0x12, 4	; 18
	...
    2032:	94 98       	cbi	0x12, 4	; 18
	...
    206c:	94 9a       	sbi	0x12, 4	; 18
	...
    208a:	89 cf       	rjmp	.-238    	; 0x1f9e <lcdBusyWait+0x12>
    208c:	94 98       	cbi	0x12, 4	; 18
    208e:	08 95       	ret

00002090 <lcdControlWrite>:
    2090:	cf 93       	push	r28
    2092:	c8 2f       	mov	r28, r24
    2094:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <lcdBusyWait>
    2098:	92 98       	cbi	0x12, 2	; 18
    209a:	93 98       	cbi	0x12, 3	; 18
    209c:	94 9a       	sbi	0x12, 4	; 18
    209e:	8a b3       	in	r24, 0x1a	; 26
    20a0:	80 6f       	ori	r24, 0xF0	; 240
    20a2:	8a bb       	out	0x1a, r24	; 26
    20a4:	8b b3       	in	r24, 0x1b	; 27
    20a6:	8f 70       	andi	r24, 0x0F	; 15
    20a8:	9c 2f       	mov	r25, r28
    20aa:	90 7f       	andi	r25, 0xF0	; 240
    20ac:	89 2b       	or	r24, r25
    20ae:	8b bb       	out	0x1b, r24	; 27
	...
    20e8:	94 98       	cbi	0x12, 4	; 18
	...
    2122:	94 9a       	sbi	0x12, 4	; 18
    2124:	8b b3       	in	r24, 0x1b	; 27
    2126:	28 2f       	mov	r18, r24
    2128:	2f 70       	andi	r18, 0x0F	; 15
    212a:	30 e1       	ldi	r19, 0x10	; 16
    212c:	c3 9f       	mul	r28, r19
    212e:	c0 01       	movw	r24, r0
    2130:	11 24       	eor	r1, r1
    2132:	82 2b       	or	r24, r18
    2134:	8b bb       	out	0x1b, r24	; 27
	...
    216e:	94 98       	cbi	0x12, 4	; 18
    2170:	8a b3       	in	r24, 0x1a	; 26
    2172:	8f 70       	andi	r24, 0x0F	; 15
    2174:	8a bb       	out	0x1a, r24	; 26
    2176:	8b b3       	in	r24, 0x1b	; 27
    2178:	80 6f       	ori	r24, 0xF0	; 240
    217a:	8b bb       	out	0x1b, r24	; 27
    217c:	cf 91       	pop	r28
    217e:	08 95       	ret

00002180 <lcdControlRead>:
    2180:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <lcdBusyWait>
    2184:	8a b3       	in	r24, 0x1a	; 26
    2186:	8f 70       	andi	r24, 0x0F	; 15
    2188:	8a bb       	out	0x1a, r24	; 26
    218a:	8b b3       	in	r24, 0x1b	; 27
    218c:	80 6f       	ori	r24, 0xF0	; 240
    218e:	8b bb       	out	0x1b, r24	; 27
    2190:	92 98       	cbi	0x12, 2	; 18
    2192:	93 9a       	sbi	0x12, 3	; 18
    2194:	94 9a       	sbi	0x12, 4	; 18
	...
    21ce:	99 b3       	in	r25, 0x19	; 25
    21d0:	94 98       	cbi	0x12, 4	; 18
	...
    220a:	94 9a       	sbi	0x12, 4	; 18
	...
    2244:	29 b3       	in	r18, 0x19	; 25
    2246:	22 95       	swap	r18
    2248:	2f 70       	andi	r18, 0x0F	; 15
    224a:	89 2f       	mov	r24, r25
    224c:	80 7f       	andi	r24, 0xF0	; 240
    224e:	94 98       	cbi	0x12, 4	; 18
    2250:	82 2b       	or	r24, r18
    2252:	08 95       	ret

00002254 <lcdDataWrite>:
    2254:	cf 93       	push	r28
    2256:	c8 2f       	mov	r28, r24
    2258:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <lcdBusyWait>
    225c:	92 9a       	sbi	0x12, 2	; 18
    225e:	93 98       	cbi	0x12, 3	; 18
    2260:	94 9a       	sbi	0x12, 4	; 18
    2262:	8a b3       	in	r24, 0x1a	; 26
    2264:	80 6f       	ori	r24, 0xF0	; 240
    2266:	8a bb       	out	0x1a, r24	; 26
    2268:	8b b3       	in	r24, 0x1b	; 27
    226a:	8f 70       	andi	r24, 0x0F	; 15
    226c:	9c 2f       	mov	r25, r28
    226e:	90 7f       	andi	r25, 0xF0	; 240
    2270:	89 2b       	or	r24, r25
    2272:	8b bb       	out	0x1b, r24	; 27
	...
    22ac:	94 98       	cbi	0x12, 4	; 18
	...
    22e6:	94 9a       	sbi	0x12, 4	; 18
    22e8:	8b b3       	in	r24, 0x1b	; 27
    22ea:	28 2f       	mov	r18, r24
    22ec:	2f 70       	andi	r18, 0x0F	; 15
    22ee:	30 e1       	ldi	r19, 0x10	; 16
    22f0:	c3 9f       	mul	r28, r19
    22f2:	c0 01       	movw	r24, r0
    22f4:	11 24       	eor	r1, r1
    22f6:	82 2b       	or	r24, r18
    22f8:	8b bb       	out	0x1b, r24	; 27
	...
    2332:	94 98       	cbi	0x12, 4	; 18
    2334:	8a b3       	in	r24, 0x1a	; 26
    2336:	8f 70       	andi	r24, 0x0F	; 15
    2338:	8a bb       	out	0x1a, r24	; 26
    233a:	8b b3       	in	r24, 0x1b	; 27
    233c:	80 6f       	ori	r24, 0xF0	; 240
    233e:	8b bb       	out	0x1b, r24	; 27
    2340:	cf 91       	pop	r28
    2342:	08 95       	ret

00002344 <lcdClear>:
}

void lcdClear(void)
{
	// clear LCD
	lcdControlWrite(1<<LCD_CLR);
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	0c 94 48 10 	jmp	0x2090	; 0x2090 <lcdControlWrite>

0000234a <lcdGotoXY>:
void lcdGotoXY(u08 x, u08 y)
{
	register u08 DDRAMAddr;

	// remap lines into proper order
	switch(y)
    234a:	62 30       	cpi	r22, 0x02	; 2
    234c:	31 f0       	breq	.+12     	; 0x235a <lcdGotoXY+0x10>
    234e:	63 30       	cpi	r22, 0x03	; 3
    2350:	31 f0       	breq	.+12     	; 0x235e <lcdGotoXY+0x14>
    2352:	61 30       	cpi	r22, 0x01	; 1
    2354:	29 f4       	brne	.+10     	; 0x2360 <lcdGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    2356:	80 5c       	subi	r24, 0xC0	; 192
    2358:	03 c0       	rjmp	.+6      	; 0x2360 <lcdGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    235a:	8c 5e       	subi	r24, 0xEC	; 236
    235c:	01 c0       	rjmp	.+2      	; 0x2360 <lcdGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    235e:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}

	// set data address
	lcdControlWrite(1<<LCD_DDRAM | DDRAMAddr);
    2360:	80 68       	ori	r24, 0x80	; 128
    2362:	0c 94 48 10 	jmp	0x2090	; 0x2090 <lcdControlWrite>

00002366 <lcdLoadCustomChar>:
}

void lcdLoadCustomChar(u08* lcdCustomCharArray, u08 romCharNum, u08 lcdCharNum)
{
    2366:	df 92       	push	r13
    2368:	ef 92       	push	r14
    236a:	ff 92       	push	r15
    236c:	0f 93       	push	r16
    236e:	1f 93       	push	r17
    2370:	cf 93       	push	r28
    2372:	df 93       	push	r29
    2374:	00 d0       	rcall	.+0      	; 0x2376 <lcdLoadCustomChar+0x10>
    2376:	1f 92       	push	r1
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	7c 01       	movw	r14, r24
    237e:	06 2f       	mov	r16, r22
    2380:	d4 2e       	mov	r13, r20
	register u08 i;
	u08 saveDDRAMAddr;

	// backup the current cursor position
	saveDDRAMAddr = lcdControlRead() & 0x7F;
    2382:	0e 94 c0 10 	call	0x2180	; 0x2180 <lcdControlRead>
    2386:	8f 77       	andi	r24, 0x7F	; 127
    2388:	89 83       	std	Y+1, r24	; 0x01

	// multiply the character index by 8
	lcdCharNum = (lcdCharNum<<3);	// each character occupies 8 bytes
    238a:	dd 0c       	add	r13, r13
    238c:	dd 0c       	add	r13, r13
    238e:	dd 0c       	add	r13, r13
	romCharNum = (romCharNum<<3);	// each character occupies 8 bytes
    2390:	00 0f       	add	r16, r16
    2392:	00 0f       	add	r16, r16
    2394:	00 0f       	add	r16, r16
    2396:	1b 82       	std	Y+3, r1	; 0x03
    2398:	1a 82       	std	Y+2, r1	; 0x02
	for(i=0; i<8; i++)
	{
		// set CG RAM address
		lcdControlWrite((1<<LCD_CGRAM) | (lcdCharNum+i));
		// write character data
		lcdDataWrite( pgm_read_byte(lcdCustomCharArray+romCharNum+i) );
    239a:	10 e0       	ldi	r17, 0x00	; 0

	// copy the 8 bytes into CG (character generator) RAM
	for(i=0; i<8; i++)
	{
		// set CG RAM address
		lcdControlWrite((1<<LCD_CGRAM) | (lcdCharNum+i));
    239c:	8a 81       	ldd	r24, Y+2	; 0x02
    239e:	8d 0d       	add	r24, r13
    23a0:	80 64       	ori	r24, 0x40	; 64
    23a2:	0e 94 48 10 	call	0x2090	; 0x2090 <lcdControlWrite>
		// write character data
		lcdDataWrite( pgm_read_byte(lcdCustomCharArray+romCharNum+i) );
    23a6:	ea 81       	ldd	r30, Y+2	; 0x02
    23a8:	fb 81       	ldd	r31, Y+3	; 0x03
    23aa:	e0 0f       	add	r30, r16
    23ac:	f1 1f       	adc	r31, r17
    23ae:	ee 0d       	add	r30, r14
    23b0:	ff 1d       	adc	r31, r15
    23b2:	84 91       	lpm	r24, Z
    23b4:	0e 94 2a 11 	call	0x2254	; 0x2254 <lcdDataWrite>
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	9b 81       	ldd	r25, Y+3	; 0x03
    23bc:	01 96       	adiw	r24, 0x01	; 1
    23be:	9b 83       	std	Y+3, r25	; 0x03
    23c0:	8a 83       	std	Y+2, r24	; 0x02
	// multiply the character index by 8
	lcdCharNum = (lcdCharNum<<3);	// each character occupies 8 bytes
	romCharNum = (romCharNum<<3);	// each character occupies 8 bytes

	// copy the 8 bytes into CG (character generator) RAM
	for(i=0; i<8; i++)
    23c2:	08 97       	sbiw	r24, 0x08	; 8
    23c4:	59 f7       	brne	.-42     	; 0x239c <lcdLoadCustomChar+0x36>
		// write character data
		lcdDataWrite( pgm_read_byte(lcdCustomCharArray+romCharNum+i) );
	}

	// restore the previous cursor position
	lcdControlWrite(1<<LCD_DDRAM | saveDDRAMAddr);
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
    23c8:	80 68       	ori	r24, 0x80	; 128

}
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	1f 91       	pop	r17
    23d6:	0f 91       	pop	r16
    23d8:	ff 90       	pop	r15
    23da:	ef 90       	pop	r14
    23dc:	df 90       	pop	r13
		// write character data
		lcdDataWrite( pgm_read_byte(lcdCustomCharArray+romCharNum+i) );
	}

	// restore the previous cursor position
	lcdControlWrite(1<<LCD_DDRAM | saveDDRAMAddr);
    23de:	0c 94 48 10 	jmp	0x2090	; 0x2090 <lcdControlWrite>

000023e2 <lcdInit>:
/*************************************************************/

void lcdInit()
{
	// initialize hardware
	lcdInitHW();
    23e2:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <lcdInitHW>
	// LCD function set
	lcdControlWrite(LCD_FUNCTION_DEFAULT);
    23e6:	88 e2       	ldi	r24, 0x28	; 40
    23e8:	0e 94 48 10 	call	0x2090	; 0x2090 <lcdControlWrite>
	// clear LCD
	lcdControlWrite(1<<LCD_CLR);
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	0e 94 48 10 	call	0x2090	; 0x2090 <lcdControlWrite>
	delay(60000);	// wait 60ms
    23f2:	80 e6       	ldi	r24, 0x60	; 96
    23f4:	9a ee       	ldi	r25, 0xEA	; 234
    23f6:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <delay_us>
	// set entry mode
	lcdControlWrite(1<<LCD_ENTRY_MODE | 1<<LCD_ENTRY_INC);
    23fa:	86 e0       	ldi	r24, 0x06	; 6
    23fc:	0e 94 48 10 	call	0x2090	; 0x2090 <lcdControlWrite>
	// set display to on
	//lcdControlWrite(1<<LCD_ON_CTRL | 1<<LCD_ON_DISPLAY | 1<<LCD_ON_BLINK);
	lcdControlWrite(1<<LCD_ON_CTRL | 1<<LCD_ON_DISPLAY );
    2400:	8c e0       	ldi	r24, 0x0C	; 12
    2402:	0e 94 48 10 	call	0x2090	; 0x2090 <lcdControlWrite>
	// move cursor to home
	lcdControlWrite(1<<LCD_HOME);
    2406:	82 e0       	ldi	r24, 0x02	; 2
    2408:	0e 94 48 10 	call	0x2090	; 0x2090 <lcdControlWrite>
	// set data address to 0
	lcdControlWrite(1<<LCD_DDRAM | 0x00);
    240c:	80 e8       	ldi	r24, 0x80	; 128
    240e:	0e 94 48 10 	call	0x2090	; 0x2090 <lcdControlWrite>

	// load the first 8 custom characters
	lcdLoadCustomChar((u08*)LcdCustomChar,0,0);
    2412:	40 e0       	ldi	r20, 0x00	; 0
    2414:	60 e0       	ldi	r22, 0x00	; 0
    2416:	84 e5       	ldi	r24, 0x54	; 84
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	0e 94 b3 11 	call	0x2366	; 0x2366 <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,1,1);
    241e:	41 e0       	ldi	r20, 0x01	; 1
    2420:	61 e0       	ldi	r22, 0x01	; 1
    2422:	84 e5       	ldi	r24, 0x54	; 84
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	0e 94 b3 11 	call	0x2366	; 0x2366 <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,2,2);
    242a:	42 e0       	ldi	r20, 0x02	; 2
    242c:	62 e0       	ldi	r22, 0x02	; 2
    242e:	84 e5       	ldi	r24, 0x54	; 84
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	0e 94 b3 11 	call	0x2366	; 0x2366 <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,3,3);
    2436:	43 e0       	ldi	r20, 0x03	; 3
    2438:	63 e0       	ldi	r22, 0x03	; 3
    243a:	84 e5       	ldi	r24, 0x54	; 84
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	0e 94 b3 11 	call	0x2366	; 0x2366 <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,4,4);
    2442:	44 e0       	ldi	r20, 0x04	; 4
    2444:	64 e0       	ldi	r22, 0x04	; 4
    2446:	84 e5       	ldi	r24, 0x54	; 84
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	0e 94 b3 11 	call	0x2366	; 0x2366 <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,5,5);
    244e:	45 e0       	ldi	r20, 0x05	; 5
    2450:	65 e0       	ldi	r22, 0x05	; 5
    2452:	84 e5       	ldi	r24, 0x54	; 84
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	0e 94 b3 11 	call	0x2366	; 0x2366 <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,6,6);
    245a:	46 e0       	ldi	r20, 0x06	; 6
    245c:	66 e0       	ldi	r22, 0x06	; 6
    245e:	84 e5       	ldi	r24, 0x54	; 84
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	0e 94 b3 11 	call	0x2366	; 0x2366 <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,7,7);
    2466:	47 e0       	ldi	r20, 0x07	; 7
    2468:	67 e0       	ldi	r22, 0x07	; 7
    246a:	84 e5       	ldi	r24, 0x54	; 84
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <lcdLoadCustomChar>

00002472 <lcdPrintData>:
	lcdControlWrite(1<<LCD_DDRAM | saveDDRAMAddr);

}

void lcdPrintData(char* data, u08 nBytes)
{
    2472:	0f 93       	push	r16
    2474:	1f 93       	push	r17
    2476:	cf 93       	push	r28
    2478:	df 93       	push	r29
	register u08 i;

	// check to make sure we have a good pointer
	if (!data) return;
    247a:	00 97       	sbiw	r24, 0x00	; 0
    247c:	59 f0       	breq	.+22     	; 0x2494 <lcdPrintData+0x22>
    247e:	ec 01       	movw	r28, r24
    2480:	8c 01       	movw	r16, r24
    2482:	06 0f       	add	r16, r22
    2484:	11 1d       	adc	r17, r1

	// print data
	for(i=0; i<nBytes; i++)
    2486:	c0 17       	cp	r28, r16
    2488:	d1 07       	cpc	r29, r17
    248a:	21 f0       	breq	.+8      	; 0x2494 <lcdPrintData+0x22>
	{
		lcdDataWrite(data[i]);
    248c:	89 91       	ld	r24, Y+
    248e:	0e 94 2a 11 	call	0x2254	; 0x2254 <lcdDataWrite>
    2492:	f9 cf       	rjmp	.-14     	; 0x2486 <lcdPrintData+0x14>
	}
}
    2494:	df 91       	pop	r29
    2496:	cf 91       	pop	r28
    2498:	1f 91       	pop	r17
    249a:	0f 91       	pop	r16
    249c:	08 95       	ret

0000249e <main>:

FATFS Fatfs;
volatile unsigned char adcValue;

int main(void)
{
    249e:	cf 93       	push	r28
    24a0:	df 93       	push	r29
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	cf 55       	subi	r28, 0x5F	; 95
    24a8:	d1 09       	sbc	r29, r1
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	f8 94       	cli
    24ae:	de bf       	out	0x3e, r29	; 62
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	cd bf       	out	0x3d, r28	; 61
    unsigned char byteValue = 0;
	unsigned char indstr[4];
    unsigned int ind = 0;
    unsigned int numOfBytes = 0;
    24b4:	6f 96       	adiw	r28, 0x1f	; 31
    24b6:	1f ae       	std	Y+63, r1	; 0x3f
    24b8:	1e ae       	std	Y+62, r1	; 0x3e
    24ba:	6f 97       	sbiw	r28, 0x1f	; 31
    unsigned char pot = 0;
    24bc:	a0 96       	adiw	r28, 0x20	; 32
    24be:	1f ae       	std	Y+63, r1	; 0x3f
    24c0:	a0 97       	sbiw	r28, 0x20	; 32
    FIL file;
    FILINFO finfo;
    DIR directory;
    FRESULT res;    
			
	configTimers();	
    24c2:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <configTimers>
	lcdInit();	
    24c6:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <lcdInit>
	uartInit();
    24ca:	0e 94 6f 18 	call	0x30de	; 0x30de <uartInit>
	midiInit();	
    24ce:	0e 94 63 13 	call	0x26c6	; 0x26c6 <midiInit>
	spiInit();
    24d2:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <spiInit>
	
	setInputs();
    24d6:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <setInputs>
	
	// >> ADC
	a2dInit();
    24da:	0e 94 9b 00 	call	0x136	; 0x136 <a2dInit>
	a2dSetPrescaler(ADC_PRESCALE_DIV32);
    24de:	85 e0       	ldi	r24, 0x05	; 5
    24e0:	0e 94 8d 00 	call	0x11a	; 0x11a <a2dSetPrescaler>
	a2dSetReference(ADC_REFERENCE_AVCC);
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	0e 94 92 00 	call	0x124	; 0x124 <a2dSetReference>
	a2dSetChannel(ADC_CH_ADC0);
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	0e 94 a9 00 	call	0x152	; 0x152 <a2dSetChannel>
	a2dStartConvert();		
    24f0:	0e 94 af 00 	call	0x15e	; 0x15e <a2dStartConvert>
	// << ADC
	 
	timerAttach(TIMER2OUTCOMPARE_INT,disk_timerproc);
    24f4:	6d e8       	ldi	r22, 0x8D	; 141
    24f6:	76 e1       	ldi	r23, 0x16	; 22
    24f8:	86 e0       	ldi	r24, 0x06	; 6
    24fa:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <timerAttach>
	
	uartSetBaudRate(MIDI_BAUD_RATE);
    24fe:	62 e1       	ldi	r22, 0x12	; 18
    2500:	7a e7       	ldi	r23, 0x7A	; 122
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	0e 94 8c 18 	call	0x3118	; 0x3118 <uartSetBaudRate>
	uartSetRxHandler(rx_handler);
    250a:	84 e5       	ldi	r24, 0x54	; 84
    250c:	9f e0       	ldi	r25, 0x0F	; 15
    250e:	0e 94 87 18 	call	0x310e	; 0x310e <uartSetRxHandler>
	uartFlushReceiveBuffer();
    2512:	0e 94 e7 18 	call	0x31ce	; 0x31ce <uartFlushReceiveBuffer>
	
	lcdGotoXY(0,0);	
    2516:	60 e0       	ldi	r22, 0x00	; 0
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	0e 94 a5 11 	call	0x234a	; 0x234a <lcdGotoXY>
		
	if(f_mount(0,&Fatfs) != FR_OK)	
    251e:	67 ed       	ldi	r22, 0xD7	; 215
    2520:	71 e0       	ldi	r23, 0x01	; 1
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	0e 94 21 0b 	call	0x1642	; 0x1642 <f_mount>
    2528:	88 23       	and	r24, r24
    252a:	21 f0       	breq	.+8      	; 0x2534 <main+0x96>
		lcdPrintData("Mount failed",12);
    252c:	6c e0       	ldi	r22, 0x0C	; 12
    252e:	80 ef       	ldi	r24, 0xF0	; 240
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	03 c0       	rjmp	.+6      	; 0x253a <main+0x9c>
	else
		lcdPrintData("Mount OK",8);
    2534:	68 e0       	ldi	r22, 0x08	; 8
    2536:	8d ef       	ldi	r24, 0xFD	; 253
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	0e 94 39 12 	call	0x2472	; 0x2472 <lcdPrintData>
	lcdGotoXY(0,1);	
    253e:	61 e0       	ldi	r22, 0x01	; 1
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	0e 94 a5 11 	call	0x234a	; 0x234a <lcdGotoXY>
	
	if((res = f_open(&file,"piano.fam",FA_READ | FA_WRITE)) != FR_OK)
    2546:	43 e0       	ldi	r20, 0x03	; 3
    2548:	66 e0       	ldi	r22, 0x06	; 6
    254a:	71 e0       	ldi	r23, 0x01	; 1
    254c:	ce 01       	movw	r24, r28
    254e:	c5 96       	adiw	r24, 0x35	; 53
    2550:	0e 94 37 0b 	call	0x166e	; 0x166e <f_open>
    2554:	88 23       	and	r24, r24
    2556:	21 f0       	breq	.+8      	; 0x2560 <main+0xc2>
		lcdPrintData("Open failed",11);
    2558:	6b e0       	ldi	r22, 0x0B	; 11
    255a:	80 e1       	ldi	r24, 0x10	; 16
    255c:	91 e0       	ldi	r25, 0x01	; 1
    255e:	03 c0       	rjmp	.+6      	; 0x2566 <main+0xc8>
	else
		lcdPrintData("Open OK",7);		
    2560:	67 e0       	ldi	r22, 0x07	; 7
    2562:	8c e1       	ldi	r24, 0x1C	; 28
    2564:	91 e0       	ldi	r25, 0x01	; 1
    2566:	0e 94 39 12 	call	0x2472	; 0x2472 <lcdPrintData>
	
	
	readInputs(&pot,buttons);
    256a:	be 01       	movw	r22, r28
    256c:	6b 5a       	subi	r22, 0xAB	; 171
    256e:	7f 4f       	sbci	r23, 0xFF	; 255
    2570:	ce 01       	movw	r24, r28
    2572:	81 5a       	subi	r24, 0xA1	; 161
    2574:	9f 4f       	sbci	r25, 0xFF	; 255
    2576:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <readInputs>
	
	f_read(&file,&fam,sizeof(fam),&numOfBytes);
    257a:	9e 01       	movw	r18, r28
    257c:	23 5a       	subi	r18, 0xA3	; 163
    257e:	3f 4f       	sbci	r19, 0xFF	; 255
    2580:	44 e3       	ldi	r20, 0x34	; 52
    2582:	50 e0       	ldi	r21, 0x00	; 0
    2584:	be 01       	movw	r22, r28
    2586:	6f 5f       	subi	r22, 0xFF	; 255
    2588:	7f 4f       	sbci	r23, 0xFF	; 255
    258a:	ce 01       	movw	r24, r28
    258c:	c5 96       	adiw	r24, 0x35	; 53
    258e:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <f_read>
	f_lseek(&file,0);
    2592:	40 e0       	ldi	r20, 0x00	; 0
    2594:	50 e0       	ldi	r21, 0x00	; 0
    2596:	ba 01       	movw	r22, r20
    2598:	ce 01       	movw	r24, r28
    259a:	c5 96       	adiw	r24, 0x35	; 53
    259c:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <f_lseek>

int main(void)
{
    unsigned char byteValue = 0;
	unsigned char indstr[4];
    unsigned int ind = 0;
    25a0:	00 e0       	ldi	r16, 0x00	; 0
    25a2:	10 e0       	ldi	r17, 0x00	; 0
				
				lcdClear();
				lcdGotoXY(0,0);
				itoa((ind + 1),indstr,10);
				lcdPrintData(indstr,2);
				f_lseek(&file,ind * sizeof(struct sndfamily));
    25a4:	84 e3       	ldi	r24, 0x34	; 52
    25a6:	d8 2e       	mov	r13, r24
				f_read(&file,&fam,sizeof(fam),&numOfBytes);
				lcdGotoXY(0,1);
				lcdPrintData(fam.name,strlen(fam.name));
    25a8:	7e 01       	movw	r14, r28
    25aa:	83 e0       	ldi	r24, 0x03	; 3
    25ac:	e8 0e       	add	r14, r24
    25ae:	f1 1c       	adc	r15, r1
	f_read(&file,&fam,sizeof(fam),&numOfBytes);
	f_lseek(&file,0);
	
	while(1){
			get_input:			
			if((input = readInputs(&pot,buttons)) != NONE){				
    25b0:	be 01       	movw	r22, r28
    25b2:	6b 5a       	subi	r22, 0xAB	; 171
    25b4:	7f 4f       	sbci	r23, 0xFF	; 255
    25b6:	ce 01       	movw	r24, r28
    25b8:	81 5a       	subi	r24, 0xA1	; 161
    25ba:	9f 4f       	sbci	r25, 0xFF	; 255
    25bc:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <readInputs>
    25c0:	8f 3f       	cpi	r24, 0xFF	; 255
    25c2:	09 f4       	brne	.+2      	; 0x25c6 <main+0x128>
    25c4:	6c c0       	rjmp	.+216    	; 0x269e <main+0x200>
				switch(input){
    25c6:	82 30       	cpi	r24, 0x02	; 2
    25c8:	19 f1       	breq	.+70     	; 0x2610 <main+0x172>
    25ca:	2c f4       	brge	.+10     	; 0x25d6 <main+0x138>
    25cc:	88 23       	and	r24, r24
    25ce:	41 f0       	breq	.+16     	; 0x25e0 <main+0x142>
    25d0:	81 30       	cpi	r24, 0x01	; 1
    25d2:	61 f0       	breq	.+24     	; 0x25ec <main+0x14e>
    25d4:	26 c0       	rjmp	.+76     	; 0x2622 <main+0x184>
    25d6:	83 30       	cpi	r24, 0x03	; 3
    25d8:	f9 f0       	breq	.+62     	; 0x2618 <main+0x17a>
    25da:	84 30       	cpi	r24, 0x04	; 4
    25dc:	49 f3       	breq	.-46     	; 0x25b0 <main+0x112>
    25de:	21 c0       	rjmp	.+66     	; 0x2622 <main+0x184>
					case POT:	 goto get_input;
					case BUTTON0: 
							if(ind > 0)
    25e0:	01 15       	cp	r16, r1
    25e2:	11 05       	cpc	r17, r1
    25e4:	f1 f0       	breq	.+60     	; 0x2622 <main+0x184>
								ind--;																					
    25e6:	01 50       	subi	r16, 0x01	; 1
    25e8:	11 09       	sbc	r17, r1
    25ea:	1b c0       	rjmp	.+54     	; 0x2622 <main+0x184>
							break;
					case BUTTON1: 
							if(!f_eof(&file))
    25ec:	4b ad       	ldd	r20, Y+59	; 0x3b
    25ee:	5c ad       	ldd	r21, Y+60	; 0x3c
    25f0:	6d ad       	ldd	r22, Y+61	; 0x3d
    25f2:	7e ad       	ldd	r23, Y+62	; 0x3e
    25f4:	23 96       	adiw	r28, 0x03	; 3
    25f6:	8c ad       	ldd	r24, Y+60	; 0x3c
    25f8:	9d ad       	ldd	r25, Y+61	; 0x3d
    25fa:	ae ad       	ldd	r26, Y+62	; 0x3e
    25fc:	bf ad       	ldd	r27, Y+63	; 0x3f
    25fe:	23 97       	sbiw	r28, 0x03	; 3
    2600:	48 17       	cp	r20, r24
    2602:	59 07       	cpc	r21, r25
    2604:	6a 07       	cpc	r22, r26
    2606:	7b 07       	cpc	r23, r27
    2608:	61 f0       	breq	.+24     	; 0x2622 <main+0x184>
								ind++;
    260a:	0f 5f       	subi	r16, 0xFF	; 255
    260c:	1f 4f       	sbci	r17, 0xFF	; 255
    260e:	09 c0       	rjmp	.+18     	; 0x2622 <main+0x184>
							break;
					case BUTTON2:
							lcdPrintData("Button 3",8); 
    2610:	68 e0       	ldi	r22, 0x08	; 8
    2612:	84 e2       	ldi	r24, 0x24	; 36
    2614:	91 e0       	ldi	r25, 0x01	; 1
    2616:	03 c0       	rjmp	.+6      	; 0x261e <main+0x180>
							break;
					case BUTTON3:
							lcdPrintData("Button 4",8);
    2618:	68 e0       	ldi	r22, 0x08	; 8
    261a:	8d e2       	ldi	r24, 0x2D	; 45
    261c:	91 e0       	ldi	r25, 0x01	; 1
    261e:	0e 94 39 12 	call	0x2472	; 0x2472 <lcdPrintData>
							break;
				}
				
				lcdClear();
    2622:	0e 94 a2 11 	call	0x2344	; 0x2344 <lcdClear>
				lcdGotoXY(0,0);
    2626:	60 e0       	ldi	r22, 0x00	; 0
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	0e 94 a5 11 	call	0x234a	; 0x234a <lcdGotoXY>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    262e:	4a e0       	ldi	r20, 0x0A	; 10
    2630:	be 01       	movw	r22, r28
    2632:	67 5a       	subi	r22, 0xA7	; 167
    2634:	7f 4f       	sbci	r23, 0xFF	; 255
    2636:	c8 01       	movw	r24, r16
    2638:	01 96       	adiw	r24, 0x01	; 1
    263a:	0e 94 bb 19 	call	0x3376	; 0x3376 <__itoa_ncheck>
				itoa((ind + 1),indstr,10);
				lcdPrintData(indstr,2);
    263e:	62 e0       	ldi	r22, 0x02	; 2
    2640:	ce 01       	movw	r24, r28
    2642:	87 5a       	subi	r24, 0xA7	; 167
    2644:	9f 4f       	sbci	r25, 0xFF	; 255
    2646:	0e 94 39 12 	call	0x2472	; 0x2472 <lcdPrintData>
				f_lseek(&file,ind * sizeof(struct sndfamily));
    264a:	d0 9e       	mul	r13, r16
    264c:	a0 01       	movw	r20, r0
    264e:	d1 9e       	mul	r13, r17
    2650:	50 0d       	add	r21, r0
    2652:	11 24       	eor	r1, r1
    2654:	60 e0       	ldi	r22, 0x00	; 0
    2656:	70 e0       	ldi	r23, 0x00	; 0
    2658:	ce 01       	movw	r24, r28
    265a:	c5 96       	adiw	r24, 0x35	; 53
    265c:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <f_lseek>
				f_read(&file,&fam,sizeof(fam),&numOfBytes);
    2660:	9e 01       	movw	r18, r28
    2662:	23 5a       	subi	r18, 0xA3	; 163
    2664:	3f 4f       	sbci	r19, 0xFF	; 255
    2666:	44 e3       	ldi	r20, 0x34	; 52
    2668:	50 e0       	ldi	r21, 0x00	; 0
    266a:	be 01       	movw	r22, r28
    266c:	6f 5f       	subi	r22, 0xFF	; 255
    266e:	7f 4f       	sbci	r23, 0xFF	; 255
    2670:	ce 01       	movw	r24, r28
    2672:	c5 96       	adiw	r24, 0x35	; 53
    2674:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <f_read>
				lcdGotoXY(0,1);
    2678:	61 e0       	ldi	r22, 0x01	; 1
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	0e 94 a5 11 	call	0x234a	; 0x234a <lcdGotoXY>
				lcdPrintData(fam.name,strlen(fam.name));
    2680:	f7 01       	movw	r30, r14
    2682:	01 90       	ld	r0, Z+
    2684:	00 20       	and	r0, r0
    2686:	e9 f7       	brne	.-6      	; 0x2682 <main+0x1e4>
    2688:	31 97       	sbiw	r30, 0x01	; 1
    268a:	bf 01       	movw	r22, r30
    268c:	6e 19       	sub	r22, r14
    268e:	7f 09       	sbc	r23, r15
    2690:	c7 01       	movw	r24, r14
    2692:	0e 94 39 12 	call	0x2472	; 0x2472 <lcdPrintData>
				sendProgramChange(fam.bank,fam.prog);
    2696:	6a 81       	ldd	r22, Y+2	; 0x02
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	0e 94 7d 13 	call	0x26fa	; 0x26fa <sendProgramChange>
			}
			
			if(!uartReceiveBufferIsEmpty()){
    269e:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <uartReceiveBufferIsEmpty>
    26a2:	81 11       	cpse	r24, r1
    26a4:	85 cf       	rjmp	.-246    	; 0x25b0 <main+0x112>
				byteValue = (unsigned char)uartGetByte();
    26a6:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <uartGetByte>
				if(readMidiMessage(byteValue,&numOfBytes) == TRUE)
    26aa:	be 01       	movw	r22, r28
    26ac:	63 5a       	subi	r22, 0xA3	; 163
    26ae:	7f 4f       	sbci	r23, 0xFF	; 255
    26b0:	0e 94 c1 13 	call	0x2782	; 0x2782 <readMidiMessage>
    26b4:	81 30       	cpi	r24, 0x01	; 1
    26b6:	09 f0       	breq	.+2      	; 0x26ba <main+0x21c>
    26b8:	7b cf       	rjmp	.-266    	; 0x25b0 <main+0x112>
					sendMidiMessage(numOfBytes);
    26ba:	6e 96       	adiw	r28, 0x1e	; 30
    26bc:	8f ad       	ldd	r24, Y+63	; 0x3f
    26be:	6e 97       	sbiw	r28, 0x1e	; 30
    26c0:	0e 94 67 13 	call	0x26ce	; 0x26ce <sendMidiMessage>
    26c4:	75 cf       	rjmp	.-278    	; 0x25b0 <main+0x112>

000026c6 <midiInit>:
	midiState = MIDI_WAIT;
}

unsigned char * getMidiEvent(){
	return midiEvent;
}
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <midiState>
    26cc:	08 95       	ret

000026ce <sendMidiMessage>:
      }

   return FALSE;
}

void sendMidiMessage(unsigned char num){
    26ce:	0f 93       	push	r16
    26d0:	1f 93       	push	r17
    26d2:	cf 93       	push	r28
    26d4:	df 93       	push	r29
    26d6:	d8 2f       	mov	r29, r24
    26d8:	0d e0       	ldi	r16, 0x0D	; 13
    26da:	14 e0       	ldi	r17, 0x04	; 4
	unsigned char i;
	for(i = 0; i < num; i++)
    26dc:	c0 e0       	ldi	r28, 0x00	; 0
    26de:	cd 17       	cp	r28, r29
    26e0:	39 f0       	breq	.+14     	; 0x26f0 <sendMidiMessage+0x22>
		uartSendByte(midiEvent[i]);
    26e2:	f8 01       	movw	r30, r16
    26e4:	81 91       	ld	r24, Z+
    26e6:	8f 01       	movw	r16, r30
    26e8:	0e 94 b1 18 	call	0x3162	; 0x3162 <uartSendByte>
   return FALSE;
}

void sendMidiMessage(unsigned char num){
	unsigned char i;
	for(i = 0; i < num; i++)
    26ec:	cf 5f       	subi	r28, 0xFF	; 255
    26ee:	f7 cf       	rjmp	.-18     	; 0x26de <sendMidiMessage+0x10>
		uartSendByte(midiEvent[i]);
	
}
    26f0:	df 91       	pop	r29
    26f2:	cf 91       	pop	r28
    26f4:	1f 91       	pop	r17
    26f6:	0f 91       	pop	r16
    26f8:	08 95       	ret

000026fa <sendProgramChange>:

void sendProgramChange(unsigned char bank,unsigned char program){
    26fa:	1f 93       	push	r17
    26fc:	cf 93       	push	r28
    26fe:	df 93       	push	r29
    2700:	16 2f       	mov	r17, r22
	midiEvent[0] = MIDI_CONTROL_CHANGE;
    2702:	cd e0       	ldi	r28, 0x0D	; 13
    2704:	d4 e0       	ldi	r29, 0x04	; 4
    2706:	90 eb       	ldi	r25, 0xB0	; 176
    2708:	98 83       	st	Y, r25
	midiEvent[1] = 0;			// MSB
    270a:	19 82       	std	Y+1, r1	; 0x01
	midiEvent[2] = bank;		// LSB
    270c:	8a 83       	std	Y+2, r24	; 0x02
	sendMidiMessage(3);
    270e:	83 e0       	ldi	r24, 0x03	; 3
    2710:	0e 94 67 13 	call	0x26ce	; 0x26ce <sendMidiMessage>
	midiEvent[0] = MIDI_PROGRAM_CHANGE;
    2714:	80 ec       	ldi	r24, 0xC0	; 192
    2716:	88 83       	st	Y, r24
	midiEvent[1] = program;
    2718:	19 83       	std	Y+1, r17	; 0x01
	sendMidiMessage(2);
    271a:	82 e0       	ldi	r24, 0x02	; 2
}
    271c:	df 91       	pop	r29
    271e:	cf 91       	pop	r28
    2720:	1f 91       	pop	r17
	midiEvent[1] = 0;			// MSB
	midiEvent[2] = bank;		// LSB
	sendMidiMessage(3);
	midiEvent[0] = MIDI_PROGRAM_CHANGE;
	midiEvent[1] = program;
	sendMidiMessage(2);
    2722:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <sendMidiMessage>

00002726 <commandLen>:
}

unsigned char commandLen(unsigned char cmd)
{
    2726:	98 2f       	mov	r25, r24
    2728:	90 7f       	andi	r25, 0xF0	; 240
	
	if ((cmd & 0xF0) != 0xF0)
    272a:	90 3f       	cpi	r25, 0xF0	; 240
    272c:	09 f0       	breq	.+2      	; 0x2730 <commandLen+0xa>
    272e:	89 2f       	mov	r24, r25
	cmd = cmd & 0xF0;
	
	switch(cmd){
    2730:	81 3f       	cpi	r24, 0xF1	; 241
    2732:	f9 f0       	breq	.+62     	; 0x2772 <commandLen+0x4c>
    2734:	88 f4       	brcc	.+34     	; 0x2758 <commandLen+0x32>
    2736:	80 3b       	cpi	r24, 0xB0	; 176
    2738:	f1 f0       	breq	.+60     	; 0x2776 <commandLen+0x50>
    273a:	38 f4       	brcc	.+14     	; 0x274a <commandLen+0x24>
    273c:	80 39       	cpi	r24, 0x90	; 144
    273e:	d9 f0       	breq	.+54     	; 0x2776 <commandLen+0x50>
    2740:	80 3a       	cpi	r24, 0xA0	; 160
    2742:	c9 f0       	breq	.+50     	; 0x2776 <commandLen+0x50>
    2744:	80 38       	cpi	r24, 0x80	; 128
    2746:	c9 f4       	brne	.+50     	; 0x277a <commandLen+0x54>
    2748:	16 c0       	rjmp	.+44     	; 0x2776 <commandLen+0x50>
    274a:	80 3d       	cpi	r24, 0xD0	; 208
    274c:	91 f0       	breq	.+36     	; 0x2772 <commandLen+0x4c>
    274e:	80 3e       	cpi	r24, 0xE0	; 224
    2750:	91 f0       	breq	.+36     	; 0x2776 <commandLen+0x50>
    2752:	80 3c       	cpi	r24, 0xC0	; 192
    2754:	91 f4       	brne	.+36     	; 0x277a <commandLen+0x54>
    2756:	0d c0       	rjmp	.+26     	; 0x2772 <commandLen+0x4c>
    2758:	8d 3f       	cpi	r24, 0xFD	; 253
    275a:	40 f4       	brcc	.+16     	; 0x276c <commandLen+0x46>
    275c:	88 3f       	cpi	r24, 0xF8	; 248
    275e:	78 f4       	brcc	.+30     	; 0x277e <commandLen+0x58>
    2760:	83 3f       	cpi	r24, 0xF3	; 243
    2762:	39 f0       	breq	.+14     	; 0x2772 <commandLen+0x4c>
    2764:	40 f0       	brcs	.+16     	; 0x2776 <commandLen+0x50>
    2766:	86 3f       	cpi	r24, 0xF6	; 246
    2768:	51 f0       	breq	.+20     	; 0x277e <commandLen+0x58>
    276a:	07 c0       	rjmp	.+14     	; 0x277a <commandLen+0x54>
    276c:	8e 3f       	cpi	r24, 0xFE	; 254
    276e:	38 f4       	brcc	.+14     	; 0x277e <commandLen+0x58>
    2770:	04 c0       	rjmp	.+8      	; 0x277a <commandLen+0x54>
					return 1;
		case	MIDI_PROGRAM_CHANGE:
		case	MIDI_CHANNEL_TOUCH:
		case	MIDI_MTC:
		case	MIDI_SONG_SEL:	
					return 2;
    2772:	82 e0       	ldi	r24, 0x02	; 2
    2774:	08 95       	ret
		case	MIDI_NOTE_ON:
		case	MIDI_POLY_TOUCH:
		case	MIDI_CONTROL_CHANGE:
		case	MIDI_PITCH_BEND:
		case	MIDI_SPP:	
					return 3;
    2776:	83 e0       	ldi	r24, 0x03	; 3
    2778:	08 95       	ret
		
	}
	
	return 0;
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	08 95       	ret
		case	MIDI_START:
		case	MIDI_STOP:
		case	MIDI_CONT:
		case	MIDI_SENSE:
		case	MIDI_RESET:	
					return 1;
    277e:	81 e0       	ldi	r24, 0x01	; 1
					return 3;
		
	}
	
	return 0;
}
    2780:	08 95       	ret

00002782 <readMidiMessage>:

unsigned char * getMidiEvent(){
	return midiEvent;
}

BOOL readMidiMessage(unsigned char byte,unsigned char *len){
    2782:	0f 93       	push	r16
    2784:	1f 93       	push	r17
    2786:	cf 93       	push	r28
    2788:	df 93       	push	r29
    278a:	d8 2f       	mov	r29, r24
    278c:	8b 01       	movw	r16, r22
	
   unsigned char tmp;

   // state machine for parsing the byte
   switch(midiState)
    278e:	c0 91 0a 04 	lds	r28, 0x040A	; 0x80040a <midiState>
    2792:	c2 30       	cpi	r28, 0x02	; 2
    2794:	39 f1       	breq	.+78     	; 0x27e4 <readMidiMessage+0x62>
    2796:	c3 30       	cpi	r28, 0x03	; 3
    2798:	09 f4       	brne	.+2      	; 0x279c <readMidiMessage+0x1a>
    279a:	4b c0       	rjmp	.+150    	; 0x2832 <readMidiMessage+0xb0>
    279c:	c1 30       	cpi	r28, 0x01	; 1
    279e:	01 f5       	brne	.+64     	; 0x27e0 <readMidiMessage+0x5e>
   {
         // we are currently stateless, waiting to start reading an event we care about.
         case MIDI_WAIT:
            if (byte == 0xF0)
    27a0:	80 3f       	cpi	r24, 0xF0	; 240
    27a2:	f1 f0       	breq	.+60     	; 0x27e0 <readMidiMessage+0x5e>
               // call sysex handler, which will return the state we should be in.
               //midiState = handleSysex();
               break;
            }
            // store length of midi command
            tmp = commandLen(byte);
    27a4:	0e 94 93 13 	call	0x2726	; 0x2726 <commandLen>
            // is the message one byte long?
            if (tmp == 1)
    27a8:	81 30       	cpi	r24, 0x01	; 1
    27aa:	39 f4       	brne	.+14     	; 0x27ba <readMidiMessage+0x38>
/*               if (byte == MIDI_CLOCK && midiClockFunc)
               {
                  // it's a clock event and we have a registered clock handler
                  midiClockFunc();
               } else {*/
            	 *len = 1;
    27ac:	f8 01       	movw	r30, r16
    27ae:	c0 83       	st	Z, r28
            	 midiEvent[0] = byte;
    27b0:	d0 93 0d 04 	sts	0x040D, r29	; 0x80040d <midiEvent>
            	 noteEvent = FALSE;
    27b4:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <noteEvent>
                 return TRUE;
    27b8:	41 c0       	rjmp	.+130    	; 0x283c <readMidiMessage+0xba>
            } else if(tmp == 0){
    27ba:	81 11       	cpse	r24, r1
    27bc:	0a c0       	rjmp	.+20     	; 0x27d2 <readMidiMessage+0x50>
            	if(noteEvent == TRUE) {
    27be:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <noteEvent>
    27c2:	81 30       	cpi	r24, 0x01	; 1
    27c4:	51 f4       	brne	.+20     	; 0x27da <readMidiMessage+0x58>
            		midiEvent[1] = byte;
    27c6:	d0 93 0e 04 	sts	0x040E, r29	; 0x80040e <midiEvent+0x1>
            		midiReadIndex = 2;
    27ca:	82 e0       	ldi	r24, 0x02	; 2
    27cc:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <midiReadIndex>
    27d0:	04 c0       	rjmp	.+8      	; 0x27da <readMidiMessage+0x58>
            	}
            }
			else {
				   // save first byte of event, position pointer..
				   midiEvent[0] = byte;
    27d2:	d0 93 0d 04 	sts	0x040D, r29	; 0x80040d <midiEvent>
				   midiReadIndex = 1;
    27d6:	c0 93 0b 04 	sts	0x040B, r28	; 0x80040b <midiReadIndex>
				}
            midiState = MIDI_READING;
    27da:	82 e0       	ldi	r24, 0x02	; 2
    27dc:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <midiState>
               midiState = MIDI_WAIT;
            }
            break;
      }

   return FALSE;
    27e0:	c0 e0       	ldi	r28, 0x00	; 0
				   // save first byte of event, position pointer..
				   midiEvent[0] = byte;
				   midiReadIndex = 1;
				}
            midiState = MIDI_READING;
            break;
    27e2:	2c c0       	rjmp	.+88     	; 0x283c <readMidiMessage+0xba>
         case MIDI_READING:
        	if(commandLen(byte) > 0){
    27e4:	0e 94 93 13 	call	0x2726	; 0x2726 <commandLen>
    27e8:	88 23       	and	r24, r24
    27ea:	31 f0       	breq	.+12     	; 0x27f8 <readMidiMessage+0x76>
        		midiState = MIDI_WAIT;
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <midiState>
        		noteEvent = FALSE;
    27f2:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <noteEvent>
    27f6:	f4 cf       	rjmp	.-24     	; 0x27e0 <readMidiMessage+0x5e>
        		return FALSE;
        	}
        	midiEvent[midiReadIndex++] = byte;
    27f8:	e0 91 0b 04 	lds	r30, 0x040B	; 0x80040b <midiReadIndex>
    27fc:	c1 e0       	ldi	r28, 0x01	; 1
    27fe:	ce 0f       	add	r28, r30
    2800:	c0 93 0b 04 	sts	0x040B, r28	; 0x80040b <midiReadIndex>
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	e3 5f       	subi	r30, 0xF3	; 243
    2808:	fb 4f       	sbci	r31, 0xFB	; 251
    280a:	d0 83       	st	Z, r29
            if (midiReadIndex == commandLen(midiEvent[0]&0xF0))
    280c:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <midiEvent>
    2810:	80 7f       	andi	r24, 0xF0	; 240
    2812:	0e 94 93 13 	call	0x2726	; 0x2726 <commandLen>
    2816:	c8 13       	cpse	r28, r24
    2818:	e3 cf       	rjmp	.-58     	; 0x27e0 <readMidiMessage+0x5e>
            {
               midiState = MIDI_WAIT;
    281a:	91 e0       	ldi	r25, 0x01	; 1
    281c:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <midiState>
               *len = midiReadIndex;
    2820:	f8 01       	movw	r30, r16
    2822:	c0 83       	st	Z, r28
               if(midiEvent[0] & (MIDI_NOTE_ON|MIDI_NOTE_OFF)){
    2824:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <midiEvent>
    2828:	80 79       	andi	r24, 0x90	; 144
    282a:	39 f0       	breq	.+14     	; 0x283a <readMidiMessage+0xb8>
            	   noteEvent = TRUE;
    282c:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <noteEvent>
    2830:	04 c0       	rjmp	.+8      	; 0x283a <readMidiMessage+0xb8>
               }
               return TRUE;
            }
            break;
         case MIDI_IGNORING:
            if (byte == 0xF7)
    2832:	87 3f       	cpi	r24, 0xF7	; 247
    2834:	a9 f6       	brne	.-86     	; 0x27e0 <readMidiMessage+0x5e>
            {
               midiState = MIDI_WAIT;
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	d1 cf       	rjmp	.-94     	; 0x27dc <readMidiMessage+0x5a>
               midiState = MIDI_WAIT;
               *len = midiReadIndex;
               if(midiEvent[0] & (MIDI_NOTE_ON|MIDI_NOTE_OFF)){
            	   noteEvent = TRUE;
               }
               return TRUE;
    283a:	c1 e0       	ldi	r28, 0x01	; 1
            }
            break;
      }

   return FALSE;
}
    283c:	8c 2f       	mov	r24, r28
    283e:	df 91       	pop	r29
    2840:	cf 91       	pop	r28
    2842:	1f 91       	pop	r17
    2844:	0f 91       	pop	r16
    2846:	08 95       	ret

00002848 <rcvr_spi>:

		deselect();
	}

	return res;
}
    2848:	8f ef       	ldi	r24, 0xFF	; 255
    284a:	8f b9       	out	0x0f, r24	; 15
    284c:	77 9b       	sbis	0x0e, 7	; 14
    284e:	fe cf       	rjmp	.-4      	; 0x284c <rcvr_spi+0x4>
    2850:	8f b1       	in	r24, 0x0f	; 15
    2852:	08 95       	ret

00002854 <wait_ready>:
    2854:	82 e3       	ldi	r24, 0x32	; 50
    2856:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <Timer2>
    285a:	0e 94 24 14 	call	0x2848	; 0x2848 <rcvr_spi>
    285e:	0e 94 24 14 	call	0x2848	; 0x2848 <rcvr_spi>
    2862:	8f 3f       	cpi	r24, 0xFF	; 255
    2864:	39 f0       	breq	.+14     	; 0x2874 <wait_ready+0x20>
    2866:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Timer2>
    286a:	81 11       	cpse	r24, r1
    286c:	f8 cf       	rjmp	.-16     	; 0x285e <wait_ready+0xa>
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	08 95       	ret
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	08 95       	ret

0000287a <deselect>:
    287a:	c4 9a       	sbi	0x18, 4	; 24
    287c:	0c 94 24 14 	jmp	0x2848	; 0x2848 <rcvr_spi>

00002880 <select>:
    2880:	cf 93       	push	r28
    2882:	df 93       	push	r29
    2884:	c4 98       	cbi	0x18, 4	; 24
    2886:	0e 94 2a 14 	call	0x2854	; 0x2854 <wait_ready>
    288a:	ec 01       	movw	r28, r24
    288c:	89 2b       	or	r24, r25
    288e:	19 f4       	brne	.+6      	; 0x2896 <select+0x16>
    2890:	0e 94 3d 14 	call	0x287a	; 0x287a <deselect>
    2894:	02 c0       	rjmp	.+4      	; 0x289a <select+0x1a>
    2896:	c1 e0       	ldi	r28, 0x01	; 1
    2898:	d0 e0       	ldi	r29, 0x00	; 0
    289a:	ce 01       	movw	r24, r28
    289c:	df 91       	pop	r29
    289e:	cf 91       	pop	r28
    28a0:	08 95       	ret

000028a2 <send_cmd>:
    28a2:	cf 92       	push	r12
    28a4:	df 92       	push	r13
    28a6:	ef 92       	push	r14
    28a8:	ff 92       	push	r15
    28aa:	cf 93       	push	r28
    28ac:	c8 2f       	mov	r28, r24
    28ae:	6a 01       	movw	r12, r20
    28b0:	7b 01       	movw	r14, r22
    28b2:	87 ff       	sbrs	r24, 7
    28b4:	09 c0       	rjmp	.+18     	; 0x28c8 <send_cmd+0x26>
    28b6:	40 e0       	ldi	r20, 0x00	; 0
    28b8:	50 e0       	ldi	r21, 0x00	; 0
    28ba:	ba 01       	movw	r22, r20
    28bc:	87 e3       	ldi	r24, 0x37	; 55
    28be:	0e 94 51 14 	call	0x28a2	; 0x28a2 <send_cmd>
    28c2:	82 30       	cpi	r24, 0x02	; 2
    28c4:	e0 f5       	brcc	.+120    	; 0x293e <send_cmd+0x9c>
    28c6:	cf 77       	andi	r28, 0x7F	; 127
    28c8:	0e 94 3d 14 	call	0x287a	; 0x287a <deselect>
    28cc:	0e 94 40 14 	call	0x2880	; 0x2880 <select>
    28d0:	89 2b       	or	r24, r25
    28d2:	a1 f1       	breq	.+104    	; 0x293c <send_cmd+0x9a>
    28d4:	8c 2f       	mov	r24, r28
    28d6:	80 64       	ori	r24, 0x40	; 64
    28d8:	8f b9       	out	0x0f, r24	; 15
    28da:	77 9b       	sbis	0x0e, 7	; 14
    28dc:	fe cf       	rjmp	.-4      	; 0x28da <send_cmd+0x38>
    28de:	8f 2d       	mov	r24, r15
    28e0:	99 27       	eor	r25, r25
    28e2:	aa 27       	eor	r26, r26
    28e4:	bb 27       	eor	r27, r27
    28e6:	8f b9       	out	0x0f, r24	; 15
    28e8:	77 9b       	sbis	0x0e, 7	; 14
    28ea:	fe cf       	rjmp	.-4      	; 0x28e8 <send_cmd+0x46>
    28ec:	c7 01       	movw	r24, r14
    28ee:	aa 27       	eor	r26, r26
    28f0:	bb 27       	eor	r27, r27
    28f2:	8f b9       	out	0x0f, r24	; 15
    28f4:	77 9b       	sbis	0x0e, 7	; 14
    28f6:	fe cf       	rjmp	.-4      	; 0x28f4 <send_cmd+0x52>
    28f8:	bb 27       	eor	r27, r27
    28fa:	af 2d       	mov	r26, r15
    28fc:	9e 2d       	mov	r25, r14
    28fe:	8d 2d       	mov	r24, r13
    2900:	8f b9       	out	0x0f, r24	; 15
    2902:	77 9b       	sbis	0x0e, 7	; 14
    2904:	fe cf       	rjmp	.-4      	; 0x2902 <send_cmd+0x60>
    2906:	cf b8       	out	0x0f, r12	; 15
    2908:	77 9b       	sbis	0x0e, 7	; 14
    290a:	fe cf       	rjmp	.-4      	; 0x2908 <send_cmd+0x66>
    290c:	cc 23       	and	r28, r28
    290e:	21 f0       	breq	.+8      	; 0x2918 <send_cmd+0x76>
    2910:	c8 30       	cpi	r28, 0x08	; 8
    2912:	21 f0       	breq	.+8      	; 0x291c <send_cmd+0x7a>
    2914:	81 e0       	ldi	r24, 0x01	; 1
    2916:	03 c0       	rjmp	.+6      	; 0x291e <send_cmd+0x7c>
    2918:	85 e9       	ldi	r24, 0x95	; 149
    291a:	01 c0       	rjmp	.+2      	; 0x291e <send_cmd+0x7c>
    291c:	87 e8       	ldi	r24, 0x87	; 135
    291e:	8f b9       	out	0x0f, r24	; 15
    2920:	77 9b       	sbis	0x0e, 7	; 14
    2922:	fe cf       	rjmp	.-4      	; 0x2920 <send_cmd+0x7e>
    2924:	cc 30       	cpi	r28, 0x0C	; 12
    2926:	11 f4       	brne	.+4      	; 0x292c <send_cmd+0x8a>
    2928:	0e 94 24 14 	call	0x2848	; 0x2848 <rcvr_spi>
    292c:	ca e0       	ldi	r28, 0x0A	; 10
    292e:	0e 94 24 14 	call	0x2848	; 0x2848 <rcvr_spi>
    2932:	87 ff       	sbrs	r24, 7
    2934:	04 c0       	rjmp	.+8      	; 0x293e <send_cmd+0x9c>
    2936:	c1 50       	subi	r28, 0x01	; 1
    2938:	d1 f7       	brne	.-12     	; 0x292e <send_cmd+0x8c>
    293a:	01 c0       	rjmp	.+2      	; 0x293e <send_cmd+0x9c>
    293c:	8f ef       	ldi	r24, 0xFF	; 255
    293e:	cf 91       	pop	r28
    2940:	ff 90       	pop	r15
    2942:	ef 90       	pop	r14
    2944:	df 90       	pop	r13
    2946:	cf 90       	pop	r12
    2948:	08 95       	ret

0000294a <rcvr_datablock>:
    294a:	0f 93       	push	r16
    294c:	1f 93       	push	r17
    294e:	cf 93       	push	r28
    2950:	df 93       	push	r29
    2952:	8c 01       	movw	r16, r24
    2954:	eb 01       	movw	r28, r22
    2956:	84 e1       	ldi	r24, 0x14	; 20
    2958:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <Timer1>
    295c:	0e 94 24 14 	call	0x2848	; 0x2848 <rcvr_spi>
    2960:	8f 3f       	cpi	r24, 0xFF	; 255
    2962:	29 f4       	brne	.+10     	; 0x296e <rcvr_datablock+0x24>
    2964:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <Timer1>
    2968:	81 11       	cpse	r24, r1
    296a:	f8 cf       	rjmp	.-16     	; 0x295c <rcvr_datablock+0x12>
    296c:	23 c0       	rjmp	.+70     	; 0x29b4 <rcvr_datablock+0x6a>
    296e:	8e 3f       	cpi	r24, 0xFE	; 254
    2970:	09 f5       	brne	.+66     	; 0x29b4 <rcvr_datablock+0x6a>
    2972:	f8 01       	movw	r30, r16
    2974:	8f ef       	ldi	r24, 0xFF	; 255
    2976:	8f b9       	out	0x0f, r24	; 15
    2978:	77 9b       	sbis	0x0e, 7	; 14
    297a:	fe cf       	rjmp	.-4      	; 0x2978 <rcvr_datablock+0x2e>
    297c:	9f b1       	in	r25, 0x0f	; 15
    297e:	90 83       	st	Z, r25
    2980:	8f b9       	out	0x0f, r24	; 15
    2982:	77 9b       	sbis	0x0e, 7	; 14
    2984:	fe cf       	rjmp	.-4      	; 0x2982 <rcvr_datablock+0x38>
    2986:	9f b1       	in	r25, 0x0f	; 15
    2988:	91 83       	std	Z+1, r25	; 0x01
    298a:	8f b9       	out	0x0f, r24	; 15
    298c:	77 9b       	sbis	0x0e, 7	; 14
    298e:	fe cf       	rjmp	.-4      	; 0x298c <rcvr_datablock+0x42>
    2990:	9f b1       	in	r25, 0x0f	; 15
    2992:	92 83       	std	Z+2, r25	; 0x02
    2994:	8f b9       	out	0x0f, r24	; 15
    2996:	77 9b       	sbis	0x0e, 7	; 14
    2998:	fe cf       	rjmp	.-4      	; 0x2996 <rcvr_datablock+0x4c>
    299a:	9f b1       	in	r25, 0x0f	; 15
    299c:	93 83       	std	Z+3, r25	; 0x03
    299e:	24 97       	sbiw	r28, 0x04	; 4
    29a0:	34 96       	adiw	r30, 0x04	; 4
    29a2:	20 97       	sbiw	r28, 0x00	; 0
    29a4:	41 f7       	brne	.-48     	; 0x2976 <rcvr_datablock+0x2c>
    29a6:	0e 94 24 14 	call	0x2848	; 0x2848 <rcvr_spi>
    29aa:	0e 94 24 14 	call	0x2848	; 0x2848 <rcvr_spi>
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	02 c0       	rjmp	.+4      	; 0x29b8 <rcvr_datablock+0x6e>
    29b4:	80 e0       	ldi	r24, 0x00	; 0
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	df 91       	pop	r29
    29ba:	cf 91       	pop	r28
    29bc:	1f 91       	pop	r17
    29be:	0f 91       	pop	r16
    29c0:	08 95       	ret

000029c2 <xmit_datablock>:
    29c2:	1f 93       	push	r17
    29c4:	cf 93       	push	r28
    29c6:	df 93       	push	r29
    29c8:	18 2f       	mov	r17, r24
    29ca:	d9 2f       	mov	r29, r25
    29cc:	c6 2f       	mov	r28, r22
    29ce:	0e 94 2a 14 	call	0x2854	; 0x2854 <wait_ready>
    29d2:	00 97       	sbiw	r24, 0x00	; 0
    29d4:	51 f1       	breq	.+84     	; 0x2a2a <xmit_datablock+0x68>
    29d6:	cf b9       	out	0x0f, r28	; 15
    29d8:	77 9b       	sbis	0x0e, 7	; 14
    29da:	fe cf       	rjmp	.-4      	; 0x29d8 <xmit_datablock+0x16>
    29dc:	cd 3f       	cpi	r28, 0xFD	; 253
    29de:	19 f1       	breq	.+70     	; 0x2a26 <xmit_datablock+0x64>
    29e0:	e1 2f       	mov	r30, r17
    29e2:	fd 2f       	mov	r31, r29
    29e4:	cf 01       	movw	r24, r30
    29e6:	9e 5f       	subi	r25, 0xFE	; 254
    29e8:	20 81       	ld	r18, Z
    29ea:	2f b9       	out	0x0f, r18	; 15
    29ec:	77 9b       	sbis	0x0e, 7	; 14
    29ee:	fe cf       	rjmp	.-4      	; 0x29ec <xmit_datablock+0x2a>
    29f0:	21 81       	ldd	r18, Z+1	; 0x01
    29f2:	2f b9       	out	0x0f, r18	; 15
    29f4:	77 9b       	sbis	0x0e, 7	; 14
    29f6:	fe cf       	rjmp	.-4      	; 0x29f4 <xmit_datablock+0x32>
    29f8:	32 96       	adiw	r30, 0x02	; 2
    29fa:	e8 17       	cp	r30, r24
    29fc:	f9 07       	cpc	r31, r25
    29fe:	a1 f7       	brne	.-24     	; 0x29e8 <xmit_datablock+0x26>
    2a00:	8f ef       	ldi	r24, 0xFF	; 255
    2a02:	8f b9       	out	0x0f, r24	; 15
    2a04:	77 9b       	sbis	0x0e, 7	; 14
    2a06:	fe cf       	rjmp	.-4      	; 0x2a04 <xmit_datablock+0x42>
    2a08:	8f ef       	ldi	r24, 0xFF	; 255
    2a0a:	8f b9       	out	0x0f, r24	; 15
    2a0c:	77 9b       	sbis	0x0e, 7	; 14
    2a0e:	fe cf       	rjmp	.-4      	; 0x2a0c <xmit_datablock+0x4a>
    2a10:	0e 94 24 14 	call	0x2848	; 0x2848 <rcvr_spi>
    2a14:	8f 71       	andi	r24, 0x1F	; 31
    2a16:	31 e0       	ldi	r19, 0x01	; 1
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	85 30       	cpi	r24, 0x05	; 5
    2a1c:	09 f0       	breq	.+2      	; 0x2a20 <xmit_datablock+0x5e>
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	83 2f       	mov	r24, r19
    2a22:	92 2f       	mov	r25, r18
    2a24:	02 c0       	rjmp	.+4      	; 0x2a2a <xmit_datablock+0x68>
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	df 91       	pop	r29
    2a2c:	cf 91       	pop	r28
    2a2e:	1f 91       	pop	r17
    2a30:	08 95       	ret

00002a32 <disk_initialize>:
    2a32:	cf 92       	push	r12
    2a34:	df 92       	push	r13
    2a36:	ef 92       	push	r14
    2a38:	ff 92       	push	r15
    2a3a:	0f 93       	push	r16
    2a3c:	1f 93       	push	r17
    2a3e:	cf 93       	push	r28
    2a40:	df 93       	push	r29
    2a42:	00 d0       	rcall	.+0      	; 0x2a44 <disk_initialize+0x12>
    2a44:	00 d0       	rcall	.+0      	; 0x2a46 <disk_initialize+0x14>
    2a46:	cd b7       	in	r28, 0x3d	; 61
    2a48:	de b7       	in	r29, 0x3e	; 62
    2a4a:	81 11       	cpse	r24, r1
    2a4c:	9d c0       	rjmp	.+314    	; 0x2b88 <disk_initialize+0x156>
    2a4e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    2a52:	81 fd       	sbrc	r24, 1
    2a54:	96 c0       	rjmp	.+300    	; 0x2b82 <disk_initialize+0x150>
    2a56:	69 9a       	sbi	0x0d, 1	; 13
    2a58:	1a e0       	ldi	r17, 0x0A	; 10
    2a5a:	0e 94 24 14 	call	0x2848	; 0x2848 <rcvr_spi>
    2a5e:	11 50       	subi	r17, 0x01	; 1
    2a60:	e1 f7       	brne	.-8      	; 0x2a5a <disk_initialize+0x28>
    2a62:	40 e0       	ldi	r20, 0x00	; 0
    2a64:	50 e0       	ldi	r21, 0x00	; 0
    2a66:	ba 01       	movw	r22, r20
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	0e 94 51 14 	call	0x28a2	; 0x28a2 <send_cmd>
    2a6e:	81 30       	cpi	r24, 0x01	; 1
    2a70:	09 f0       	breq	.+2      	; 0x2a74 <disk_initialize+0x42>
    2a72:	76 c0       	rjmp	.+236    	; 0x2b60 <disk_initialize+0x12e>
    2a74:	84 e6       	ldi	r24, 0x64	; 100
    2a76:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <Timer1>
    2a7a:	4a ea       	ldi	r20, 0xAA	; 170
    2a7c:	51 e0       	ldi	r21, 0x01	; 1
    2a7e:	60 e0       	ldi	r22, 0x00	; 0
    2a80:	70 e0       	ldi	r23, 0x00	; 0
    2a82:	88 e0       	ldi	r24, 0x08	; 8
    2a84:	0e 94 51 14 	call	0x28a2	; 0x28a2 <send_cmd>
    2a88:	81 30       	cpi	r24, 0x01	; 1
    2a8a:	09 f0       	breq	.+2      	; 0x2a8e <disk_initialize+0x5c>
    2a8c:	41 c0       	rjmp	.+130    	; 0x2b10 <disk_initialize+0xde>
    2a8e:	8e 01       	movw	r16, r28
    2a90:	0f 5f       	subi	r16, 0xFF	; 255
    2a92:	1f 4f       	sbci	r17, 0xFF	; 255
    2a94:	6e 01       	movw	r12, r28
    2a96:	85 e0       	ldi	r24, 0x05	; 5
    2a98:	c8 0e       	add	r12, r24
    2a9a:	d1 1c       	adc	r13, r1
    2a9c:	78 01       	movw	r14, r16
    2a9e:	0e 94 24 14 	call	0x2848	; 0x2848 <rcvr_spi>
    2aa2:	f7 01       	movw	r30, r14
    2aa4:	81 93       	st	Z+, r24
    2aa6:	7f 01       	movw	r14, r30
    2aa8:	ce 16       	cp	r12, r30
    2aaa:	df 06       	cpc	r13, r31
    2aac:	c1 f7       	brne	.-16     	; 0x2a9e <disk_initialize+0x6c>
    2aae:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab0:	81 30       	cpi	r24, 0x01	; 1
    2ab2:	09 f0       	breq	.+2      	; 0x2ab6 <disk_initialize+0x84>
    2ab4:	55 c0       	rjmp	.+170    	; 0x2b60 <disk_initialize+0x12e>
    2ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab8:	8a 3a       	cpi	r24, 0xAA	; 170
    2aba:	09 f0       	breq	.+2      	; 0x2abe <disk_initialize+0x8c>
    2abc:	51 c0       	rjmp	.+162    	; 0x2b60 <disk_initialize+0x12e>
    2abe:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <Timer1>
    2ac2:	81 11       	cpse	r24, r1
    2ac4:	06 c0       	rjmp	.+12     	; 0x2ad2 <disk_initialize+0xa0>
    2ac6:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <Timer1>
    2aca:	88 23       	and	r24, r24
    2acc:	09 f4       	brne	.+2      	; 0x2ad0 <disk_initialize+0x9e>
    2ace:	48 c0       	rjmp	.+144    	; 0x2b60 <disk_initialize+0x12e>
    2ad0:	0a c0       	rjmp	.+20     	; 0x2ae6 <disk_initialize+0xb4>
    2ad2:	40 e0       	ldi	r20, 0x00	; 0
    2ad4:	50 e0       	ldi	r21, 0x00	; 0
    2ad6:	60 e0       	ldi	r22, 0x00	; 0
    2ad8:	70 e4       	ldi	r23, 0x40	; 64
    2ada:	89 ea       	ldi	r24, 0xA9	; 169
    2adc:	0e 94 51 14 	call	0x28a2	; 0x28a2 <send_cmd>
    2ae0:	81 11       	cpse	r24, r1
    2ae2:	ed cf       	rjmp	.-38     	; 0x2abe <disk_initialize+0x8c>
    2ae4:	f0 cf       	rjmp	.-32     	; 0x2ac6 <disk_initialize+0x94>
    2ae6:	40 e0       	ldi	r20, 0x00	; 0
    2ae8:	50 e0       	ldi	r21, 0x00	; 0
    2aea:	ba 01       	movw	r22, r20
    2aec:	8a e3       	ldi	r24, 0x3A	; 58
    2aee:	0e 94 51 14 	call	0x28a2	; 0x28a2 <send_cmd>
    2af2:	81 11       	cpse	r24, r1
    2af4:	35 c0       	rjmp	.+106    	; 0x2b60 <disk_initialize+0x12e>
    2af6:	0e 94 24 14 	call	0x2848	; 0x2848 <rcvr_spi>
    2afa:	f8 01       	movw	r30, r16
    2afc:	81 93       	st	Z+, r24
    2afe:	8f 01       	movw	r16, r30
    2b00:	ce 16       	cp	r12, r30
    2b02:	df 06       	cpc	r13, r31
    2b04:	c1 f7       	brne	.-16     	; 0x2af6 <disk_initialize+0xc4>
    2b06:	89 81       	ldd	r24, Y+1	; 0x01
    2b08:	86 fd       	sbrc	r24, 6
    2b0a:	2c c0       	rjmp	.+88     	; 0x2b64 <disk_initialize+0x132>
    2b0c:	14 e0       	ldi	r17, 0x04	; 4
    2b0e:	2b c0       	rjmp	.+86     	; 0x2b66 <disk_initialize+0x134>
    2b10:	40 e0       	ldi	r20, 0x00	; 0
    2b12:	50 e0       	ldi	r21, 0x00	; 0
    2b14:	ba 01       	movw	r22, r20
    2b16:	89 ea       	ldi	r24, 0xA9	; 169
    2b18:	0e 94 51 14 	call	0x28a2	; 0x28a2 <send_cmd>
    2b1c:	82 30       	cpi	r24, 0x02	; 2
    2b1e:	18 f0       	brcs	.+6      	; 0x2b26 <disk_initialize+0xf4>
    2b20:	11 e0       	ldi	r17, 0x01	; 1
    2b22:	01 e0       	ldi	r16, 0x01	; 1
    2b24:	02 c0       	rjmp	.+4      	; 0x2b2a <disk_initialize+0xf8>
    2b26:	12 e0       	ldi	r17, 0x02	; 2
    2b28:	09 ea       	ldi	r16, 0xA9	; 169
    2b2a:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <Timer1>
    2b2e:	81 11       	cpse	r24, r1
    2b30:	05 c0       	rjmp	.+10     	; 0x2b3c <disk_initialize+0x10a>
    2b32:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <Timer1>
    2b36:	88 23       	and	r24, r24
    2b38:	99 f0       	breq	.+38     	; 0x2b60 <disk_initialize+0x12e>
    2b3a:	09 c0       	rjmp	.+18     	; 0x2b4e <disk_initialize+0x11c>
    2b3c:	40 e0       	ldi	r20, 0x00	; 0
    2b3e:	50 e0       	ldi	r21, 0x00	; 0
    2b40:	ba 01       	movw	r22, r20
    2b42:	80 2f       	mov	r24, r16
    2b44:	0e 94 51 14 	call	0x28a2	; 0x28a2 <send_cmd>
    2b48:	81 11       	cpse	r24, r1
    2b4a:	ef cf       	rjmp	.-34     	; 0x2b2a <disk_initialize+0xf8>
    2b4c:	f2 cf       	rjmp	.-28     	; 0x2b32 <disk_initialize+0x100>
    2b4e:	40 e0       	ldi	r20, 0x00	; 0
    2b50:	52 e0       	ldi	r21, 0x02	; 2
    2b52:	60 e0       	ldi	r22, 0x00	; 0
    2b54:	70 e0       	ldi	r23, 0x00	; 0
    2b56:	80 e1       	ldi	r24, 0x10	; 16
    2b58:	0e 94 51 14 	call	0x28a2	; 0x28a2 <send_cmd>
    2b5c:	88 23       	and	r24, r24
    2b5e:	19 f0       	breq	.+6      	; 0x2b66 <disk_initialize+0x134>
    2b60:	10 e0       	ldi	r17, 0x00	; 0
    2b62:	01 c0       	rjmp	.+2      	; 0x2b66 <disk_initialize+0x134>
    2b64:	1c e0       	ldi	r17, 0x0C	; 12
    2b66:	10 93 41 01 	sts	0x0141, r17	; 0x800141 <CardType>
    2b6a:	0e 94 3d 14 	call	0x287a	; 0x287a <deselect>
    2b6e:	11 23       	and	r17, r17
    2b70:	41 f0       	breq	.+16     	; 0x2b82 <disk_initialize+0x150>
    2b72:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    2b76:	8e 7f       	andi	r24, 0xFE	; 254
    2b78:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    2b7c:	8d b1       	in	r24, 0x0d	; 13
    2b7e:	8c 7f       	andi	r24, 0xFC	; 252
    2b80:	8d b9       	out	0x0d, r24	; 13
    2b82:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    2b86:	01 c0       	rjmp	.+2      	; 0x2b8a <disk_initialize+0x158>
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	0f 90       	pop	r0
    2b8c:	0f 90       	pop	r0
    2b8e:	0f 90       	pop	r0
    2b90:	0f 90       	pop	r0
    2b92:	df 91       	pop	r29
    2b94:	cf 91       	pop	r28
    2b96:	1f 91       	pop	r17
    2b98:	0f 91       	pop	r16
    2b9a:	ff 90       	pop	r15
    2b9c:	ef 90       	pop	r14
    2b9e:	df 90       	pop	r13
    2ba0:	cf 90       	pop	r12
    2ba2:	08 95       	ret

00002ba4 <disk_status>:
    2ba4:	81 11       	cpse	r24, r1
    2ba6:	03 c0       	rjmp	.+6      	; 0x2bae <disk_status+0xa>
    2ba8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    2bac:	08 95       	ret
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	08 95       	ret

00002bb2 <disk_read>:
    2bb2:	0f 93       	push	r16
    2bb4:	cf 93       	push	r28
    2bb6:	df 93       	push	r29
    2bb8:	eb 01       	movw	r28, r22
    2bba:	ba 01       	movw	r22, r20
    2bbc:	a9 01       	movw	r20, r18
    2bbe:	81 11       	cpse	r24, r1
    2bc0:	3d c0       	rjmp	.+122    	; 0x2c3c <disk_read+0x8a>
    2bc2:	00 23       	and	r16, r16
    2bc4:	d9 f1       	breq	.+118    	; 0x2c3c <disk_read+0x8a>
    2bc6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    2bca:	80 fd       	sbrc	r24, 0
    2bcc:	39 c0       	rjmp	.+114    	; 0x2c40 <disk_read+0x8e>
    2bce:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <CardType>
    2bd2:	83 fd       	sbrc	r24, 3
    2bd4:	07 c0       	rjmp	.+14     	; 0x2be4 <disk_read+0x32>
    2bd6:	89 e0       	ldi	r24, 0x09	; 9
    2bd8:	44 0f       	add	r20, r20
    2bda:	55 1f       	adc	r21, r21
    2bdc:	66 1f       	adc	r22, r22
    2bde:	77 1f       	adc	r23, r23
    2be0:	8a 95       	dec	r24
    2be2:	d1 f7       	brne	.-12     	; 0x2bd8 <disk_read+0x26>
    2be4:	01 30       	cpi	r16, 0x01	; 1
    2be6:	71 f4       	brne	.+28     	; 0x2c04 <disk_read+0x52>
    2be8:	81 e1       	ldi	r24, 0x11	; 17
    2bea:	0e 94 51 14 	call	0x28a2	; 0x28a2 <send_cmd>
    2bee:	81 11       	cpse	r24, r1
    2bf0:	1e c0       	rjmp	.+60     	; 0x2c2e <disk_read+0x7c>
    2bf2:	60 e0       	ldi	r22, 0x00	; 0
    2bf4:	72 e0       	ldi	r23, 0x02	; 2
    2bf6:	ce 01       	movw	r24, r28
    2bf8:	0e 94 a5 14 	call	0x294a	; 0x294a <rcvr_datablock>
    2bfc:	89 2b       	or	r24, r25
    2bfe:	b9 f0       	breq	.+46     	; 0x2c2e <disk_read+0x7c>
    2c00:	00 e0       	ldi	r16, 0x00	; 0
    2c02:	15 c0       	rjmp	.+42     	; 0x2c2e <disk_read+0x7c>
    2c04:	82 e1       	ldi	r24, 0x12	; 18
    2c06:	0e 94 51 14 	call	0x28a2	; 0x28a2 <send_cmd>
    2c0a:	81 11       	cpse	r24, r1
    2c0c:	10 c0       	rjmp	.+32     	; 0x2c2e <disk_read+0x7c>
    2c0e:	60 e0       	ldi	r22, 0x00	; 0
    2c10:	72 e0       	ldi	r23, 0x02	; 2
    2c12:	ce 01       	movw	r24, r28
    2c14:	0e 94 a5 14 	call	0x294a	; 0x294a <rcvr_datablock>
    2c18:	89 2b       	or	r24, r25
    2c1a:	19 f0       	breq	.+6      	; 0x2c22 <disk_read+0x70>
    2c1c:	de 5f       	subi	r29, 0xFE	; 254
    2c1e:	01 50       	subi	r16, 0x01	; 1
    2c20:	b1 f7       	brne	.-20     	; 0x2c0e <disk_read+0x5c>
    2c22:	40 e0       	ldi	r20, 0x00	; 0
    2c24:	50 e0       	ldi	r21, 0x00	; 0
    2c26:	ba 01       	movw	r22, r20
    2c28:	8c e0       	ldi	r24, 0x0C	; 12
    2c2a:	0e 94 51 14 	call	0x28a2	; 0x28a2 <send_cmd>
    2c2e:	0e 94 3d 14 	call	0x287a	; 0x287a <deselect>
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	01 11       	cpse	r16, r1
    2c36:	05 c0       	rjmp	.+10     	; 0x2c42 <disk_read+0x90>
    2c38:	80 e0       	ldi	r24, 0x00	; 0
    2c3a:	03 c0       	rjmp	.+6      	; 0x2c42 <disk_read+0x90>
    2c3c:	84 e0       	ldi	r24, 0x04	; 4
    2c3e:	01 c0       	rjmp	.+2      	; 0x2c42 <disk_read+0x90>
    2c40:	83 e0       	ldi	r24, 0x03	; 3
    2c42:	df 91       	pop	r29
    2c44:	cf 91       	pop	r28
    2c46:	0f 91       	pop	r16
    2c48:	08 95       	ret

00002c4a <disk_write>:
    2c4a:	cf 92       	push	r12
    2c4c:	df 92       	push	r13
    2c4e:	ef 92       	push	r14
    2c50:	ff 92       	push	r15
    2c52:	0f 93       	push	r16
    2c54:	cf 93       	push	r28
    2c56:	df 93       	push	r29
    2c58:	eb 01       	movw	r28, r22
    2c5a:	69 01       	movw	r12, r18
    2c5c:	7a 01       	movw	r14, r20
    2c5e:	81 11       	cpse	r24, r1
    2c60:	4f c0       	rjmp	.+158    	; 0x2d00 <disk_write+0xb6>
    2c62:	00 23       	and	r16, r16
    2c64:	09 f4       	brne	.+2      	; 0x2c68 <disk_write+0x1e>
    2c66:	4c c0       	rjmp	.+152    	; 0x2d00 <disk_write+0xb6>
    2c68:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    2c6c:	80 fd       	sbrc	r24, 0
    2c6e:	4a c0       	rjmp	.+148    	; 0x2d04 <disk_write+0xba>
    2c70:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    2c74:	82 fd       	sbrc	r24, 2
    2c76:	48 c0       	rjmp	.+144    	; 0x2d08 <disk_write+0xbe>
    2c78:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <CardType>
    2c7c:	83 fd       	sbrc	r24, 3
    2c7e:	07 c0       	rjmp	.+14     	; 0x2c8e <disk_write+0x44>
    2c80:	99 e0       	ldi	r25, 0x09	; 9
    2c82:	cc 0c       	add	r12, r12
    2c84:	dd 1c       	adc	r13, r13
    2c86:	ee 1c       	adc	r14, r14
    2c88:	ff 1c       	adc	r15, r15
    2c8a:	9a 95       	dec	r25
    2c8c:	d1 f7       	brne	.-12     	; 0x2c82 <disk_write+0x38>
    2c8e:	01 30       	cpi	r16, 0x01	; 1
    2c90:	79 f4       	brne	.+30     	; 0x2cb0 <disk_write+0x66>
    2c92:	b7 01       	movw	r22, r14
    2c94:	a6 01       	movw	r20, r12
    2c96:	88 e1       	ldi	r24, 0x18	; 24
    2c98:	0e 94 51 14 	call	0x28a2	; 0x28a2 <send_cmd>
    2c9c:	81 11       	cpse	r24, r1
    2c9e:	28 c0       	rjmp	.+80     	; 0x2cf0 <disk_write+0xa6>
    2ca0:	6e ef       	ldi	r22, 0xFE	; 254
    2ca2:	ce 01       	movw	r24, r28
    2ca4:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <xmit_datablock>
    2ca8:	89 2b       	or	r24, r25
    2caa:	19 f1       	breq	.+70     	; 0x2cf2 <disk_write+0xa8>
    2cac:	00 e0       	ldi	r16, 0x00	; 0
    2cae:	21 c0       	rjmp	.+66     	; 0x2cf2 <disk_write+0xa8>
    2cb0:	86 70       	andi	r24, 0x06	; 6
    2cb2:	39 f0       	breq	.+14     	; 0x2cc2 <disk_write+0x78>
    2cb4:	40 2f       	mov	r20, r16
    2cb6:	50 e0       	ldi	r21, 0x00	; 0
    2cb8:	60 e0       	ldi	r22, 0x00	; 0
    2cba:	70 e0       	ldi	r23, 0x00	; 0
    2cbc:	87 e9       	ldi	r24, 0x97	; 151
    2cbe:	0e 94 51 14 	call	0x28a2	; 0x28a2 <send_cmd>
    2cc2:	b7 01       	movw	r22, r14
    2cc4:	a6 01       	movw	r20, r12
    2cc6:	89 e1       	ldi	r24, 0x19	; 25
    2cc8:	0e 94 51 14 	call	0x28a2	; 0x28a2 <send_cmd>
    2ccc:	81 11       	cpse	r24, r1
    2cce:	11 c0       	rjmp	.+34     	; 0x2cf2 <disk_write+0xa8>
    2cd0:	6c ef       	ldi	r22, 0xFC	; 252
    2cd2:	ce 01       	movw	r24, r28
    2cd4:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <xmit_datablock>
    2cd8:	89 2b       	or	r24, r25
    2cda:	19 f0       	breq	.+6      	; 0x2ce2 <disk_write+0x98>
    2cdc:	de 5f       	subi	r29, 0xFE	; 254
    2cde:	01 50       	subi	r16, 0x01	; 1
    2ce0:	b9 f7       	brne	.-18     	; 0x2cd0 <disk_write+0x86>
    2ce2:	6d ef       	ldi	r22, 0xFD	; 253
    2ce4:	80 e0       	ldi	r24, 0x00	; 0
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <xmit_datablock>
    2cec:	89 2b       	or	r24, r25
    2cee:	09 f4       	brne	.+2      	; 0x2cf2 <disk_write+0xa8>
    2cf0:	01 e0       	ldi	r16, 0x01	; 1
    2cf2:	0e 94 3d 14 	call	0x287a	; 0x287a <deselect>
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	01 11       	cpse	r16, r1
    2cfa:	07 c0       	rjmp	.+14     	; 0x2d0a <disk_write+0xc0>
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	05 c0       	rjmp	.+10     	; 0x2d0a <disk_write+0xc0>
    2d00:	84 e0       	ldi	r24, 0x04	; 4
    2d02:	03 c0       	rjmp	.+6      	; 0x2d0a <disk_write+0xc0>
    2d04:	83 e0       	ldi	r24, 0x03	; 3
    2d06:	01 c0       	rjmp	.+2      	; 0x2d0a <disk_write+0xc0>
    2d08:	82 e0       	ldi	r24, 0x02	; 2
    2d0a:	df 91       	pop	r29
    2d0c:	cf 91       	pop	r28
    2d0e:	0f 91       	pop	r16
    2d10:	ff 90       	pop	r15
    2d12:	ef 90       	pop	r14
    2d14:	df 90       	pop	r13
    2d16:	cf 90       	pop	r12
    2d18:	08 95       	ret

00002d1a <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;						/* 100Hz decrement timer */
    2d1a:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <Timer1>
	if (n) Timer1 = --n;
    2d1e:	88 23       	and	r24, r24
    2d20:	19 f0       	breq	.+6      	; 0x2d28 <disk_timerproc+0xe>
    2d22:	81 50       	subi	r24, 0x01	; 1
    2d24:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <Timer1>
	n = Timer2;
    2d28:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Timer2>
	if (n) Timer2 = --n;
    2d2c:	88 23       	and	r24, r24
    2d2e:	19 f0       	breq	.+6      	; 0x2d36 <disk_timerproc+0x1c>
    2d30:	81 50       	subi	r24, 0x01	; 1
    2d32:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <Timer2>

	s = Stat;
    2d36:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
	//else					/* Write enabled */
		s &= ~STA_PROTECT;
	//if ( (SOCKINS & SOCKPORT))			/* Card inserted */
	//	s |= (STA_NODISK | STA_NOINIT);
	//else					/* Socket empty */ 
		s &= ~STA_NODISK;
    2d3a:	89 7f       	andi	r24, 0xF9	; 249
	Stat = s;
    2d3c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    2d40:	08 95       	ret

00002d42 <spiInit>:
    cbi(DDRB, 4);   // set MISO as input
    sbi(DDRB, 3);   // set MOSI as output
    sbi(DDRB, 2);   // SS must be output for Master mode to work
#else
	// setup SPI I/O pins
	sbi(PORTB, SCK);	// set SCK hi
    2d42:	c7 9a       	sbi	0x18, 7	; 24
	sbi(PORTB,MISO);	// set pull-up for MISO
    2d44:	c6 9a       	sbi	0x18, 6	; 24
	sbi(DDRB, SCK);	// set SCK as output
    2d46:	bf 9a       	sbi	0x17, 7	; 23
	cbi(DDRB, MISO);	// set MISO as input
    2d48:	be 98       	cbi	0x17, 6	; 23
	sbi(DDRB, MOSI);	// set MOSI as output
    2d4a:	bd 9a       	sbi	0x17, 5	; 23
	sbi(DDRB, CS);	// SS must be output for Master mode to work
    2d4c:	bc 9a       	sbi	0x17, 4	; 23
#endif
	
	// setup SPI interface :
	// master mode
	sbi(SPCR, MSTR);
    2d4e:	6c 9a       	sbi	0x0d, 4	; 13
	// clock = f/4
//	cbi(SPCR, SPR0);
//	cbi(SPCR, SPR1);
	// clock = f/16
	sbi(SPCR, SPR0);
    2d50:	68 9a       	sbi	0x0d, 0	; 13
	sbi(SPCR, SPR1);
    2d52:	69 9a       	sbi	0x0d, 1	; 13
	// select clock phase positive-going in middle of data
	cbi(SPCR, CPOL);
    2d54:	6b 98       	cbi	0x0d, 3	; 13
	// Data order MSB first
	cbi(SPCR,DORD);
    2d56:	6d 98       	cbi	0x0d, 5	; 13
	// enable SPI
	sbi(SPCR, SPE);
    2d58:	6e 9a       	sbi	0x0d, 6	; 13
	//outp((1<<MSTR)|(1<<SPE)|(1<<SPR0), SPCR );
	//outp((1<<CPHA)|(1<<CPOL)|(1<<MSTR)|(1<<SPE)|(1<<SPR0)|(1<<SPR1), SPCR );
	//outp((1<<CPHA)|(1<<MSTR)|(1<<SPE)|(1<<SPR0), SPCR );
	
	// clear status
	inb(SPSR);
    2d5a:	8e b1       	in	r24, 0x0e	; 14
	spiTransferComplete = TRUE;
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <spiTransferComplete>
    2d62:	08 95       	ret

00002d64 <delay_us>:
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1BH);		// set the high 8bits of OCR1B
	//outp( (pwmDuty&0x00FF), OCR1BL);	// set the low 8bits of OCR1B
	OCR1B = pwmDuty;
    2d64:	08 95       	ret

00002d66 <timerAttach>:
    2d66:	88 30       	cpi	r24, 0x08	; 8
    2d68:	40 f4       	brcc	.+16     	; 0x2d7a <timerAttach+0x14>
    2d6a:	e8 2f       	mov	r30, r24
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	ee 0f       	add	r30, r30
    2d70:	ff 1f       	adc	r31, r31
    2d72:	ec 5b       	subi	r30, 0xBC	; 188
    2d74:	fe 4f       	sbci	r31, 0xFE	; 254
    2d76:	71 83       	std	Z+1, r23	; 0x01
    2d78:	60 83       	st	Z, r22
    2d7a:	08 95       	ret

00002d7c <__vector_11>:
}

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect)
{
    2d7c:	1f 92       	push	r1
    2d7e:	0f 92       	push	r0
    2d80:	0f b6       	in	r0, 0x3f	; 63
    2d82:	0f 92       	push	r0
    2d84:	11 24       	eor	r1, r1
    2d86:	2f 93       	push	r18
    2d88:	3f 93       	push	r19
    2d8a:	4f 93       	push	r20
    2d8c:	5f 93       	push	r21
    2d8e:	6f 93       	push	r22
    2d90:	7f 93       	push	r23
    2d92:	8f 93       	push	r24
    2d94:	9f 93       	push	r25
    2d96:	af 93       	push	r26
    2d98:	bf 93       	push	r27
    2d9a:	ef 93       	push	r30
    2d9c:	ff 93       	push	r31
	Timer0Reg0++;			// increment low-order counter
    2d9e:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <Timer0Reg0>
    2da2:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <Timer0Reg0+0x1>
    2da6:	a0 91 13 04 	lds	r26, 0x0413	; 0x800413 <Timer0Reg0+0x2>
    2daa:	b0 91 14 04 	lds	r27, 0x0414	; 0x800414 <Timer0Reg0+0x3>
    2dae:	01 96       	adiw	r24, 0x01	; 1
    2db0:	a1 1d       	adc	r26, r1
    2db2:	b1 1d       	adc	r27, r1
    2db4:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <Timer0Reg0>
    2db8:	90 93 12 04 	sts	0x0412, r25	; 0x800412 <Timer0Reg0+0x1>
    2dbc:	a0 93 13 04 	sts	0x0413, r26	; 0x800413 <Timer0Reg0+0x2>
    2dc0:	b0 93 14 04 	sts	0x0414, r27	; 0x800414 <Timer0Reg0+0x3>

	// increment pause counter
	TimerPauseReg++;
    2dc4:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <TimerPauseReg>
    2dc8:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <TimerPauseReg+0x1>
    2dcc:	a0 91 17 04 	lds	r26, 0x0417	; 0x800417 <TimerPauseReg+0x2>
    2dd0:	b0 91 18 04 	lds	r27, 0x0418	; 0x800418 <TimerPauseReg+0x3>
    2dd4:	01 96       	adiw	r24, 0x01	; 1
    2dd6:	a1 1d       	adc	r26, r1
    2dd8:	b1 1d       	adc	r27, r1
    2dda:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <TimerPauseReg>
    2dde:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <TimerPauseReg+0x1>
    2de2:	a0 93 17 04 	sts	0x0417, r26	; 0x800417 <TimerPauseReg+0x2>
    2de6:	b0 93 18 04 	sts	0x0418, r27	; 0x800418 <TimerPauseReg+0x3>

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
    2dea:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <TimerIntFunc>
    2dee:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <TimerIntFunc+0x1>
    2df2:	89 2b       	or	r24, r25
    2df4:	29 f0       	breq	.+10     	; 0x2e00 <__vector_11+0x84>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
    2df6:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <TimerIntFunc>
    2dfa:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <TimerIntFunc+0x1>
    2dfe:	09 95       	icall
}
    2e00:	ff 91       	pop	r31
    2e02:	ef 91       	pop	r30
    2e04:	bf 91       	pop	r27
    2e06:	af 91       	pop	r26
    2e08:	9f 91       	pop	r25
    2e0a:	8f 91       	pop	r24
    2e0c:	7f 91       	pop	r23
    2e0e:	6f 91       	pop	r22
    2e10:	5f 91       	pop	r21
    2e12:	4f 91       	pop	r20
    2e14:	3f 91       	pop	r19
    2e16:	2f 91       	pop	r18
    2e18:	0f 90       	pop	r0
    2e1a:	0f be       	out	0x3f, r0	; 63
    2e1c:	0f 90       	pop	r0
    2e1e:	1f 90       	pop	r1
    2e20:	18 95       	reti

00002e22 <__vector_9>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect)
{
    2e22:	1f 92       	push	r1
    2e24:	0f 92       	push	r0
    2e26:	0f b6       	in	r0, 0x3f	; 63
    2e28:	0f 92       	push	r0
    2e2a:	11 24       	eor	r1, r1
    2e2c:	2f 93       	push	r18
    2e2e:	3f 93       	push	r19
    2e30:	4f 93       	push	r20
    2e32:	5f 93       	push	r21
    2e34:	6f 93       	push	r22
    2e36:	7f 93       	push	r23
    2e38:	8f 93       	push	r24
    2e3a:	9f 93       	push	r25
    2e3c:	af 93       	push	r26
    2e3e:	bf 93       	push	r27
    2e40:	ef 93       	push	r30
    2e42:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
    2e44:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <TimerIntFunc+0x2>
    2e48:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <TimerIntFunc+0x3>
    2e4c:	89 2b       	or	r24, r25
    2e4e:	29 f0       	breq	.+10     	; 0x2e5a <__vector_9+0x38>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
    2e50:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <TimerIntFunc+0x2>
    2e54:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <TimerIntFunc+0x3>
    2e58:	09 95       	icall
}
    2e5a:	ff 91       	pop	r31
    2e5c:	ef 91       	pop	r30
    2e5e:	bf 91       	pop	r27
    2e60:	af 91       	pop	r26
    2e62:	9f 91       	pop	r25
    2e64:	8f 91       	pop	r24
    2e66:	7f 91       	pop	r23
    2e68:	6f 91       	pop	r22
    2e6a:	5f 91       	pop	r21
    2e6c:	4f 91       	pop	r20
    2e6e:	3f 91       	pop	r19
    2e70:	2f 91       	pop	r18
    2e72:	0f 90       	pop	r0
    2e74:	0f be       	out	0x3f, r0	; 63
    2e76:	0f 90       	pop	r0
    2e78:	1f 90       	pop	r1
    2e7a:	18 95       	reti

00002e7c <__vector_5>:

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_OVF_vect)
{
    2e7c:	1f 92       	push	r1
    2e7e:	0f 92       	push	r0
    2e80:	0f b6       	in	r0, 0x3f	; 63
    2e82:	0f 92       	push	r0
    2e84:	11 24       	eor	r1, r1
    2e86:	2f 93       	push	r18
    2e88:	3f 93       	push	r19
    2e8a:	4f 93       	push	r20
    2e8c:	5f 93       	push	r21
    2e8e:	6f 93       	push	r22
    2e90:	7f 93       	push	r23
    2e92:	8f 93       	push	r24
    2e94:	9f 93       	push	r25
    2e96:	af 93       	push	r26
    2e98:	bf 93       	push	r27
    2e9a:	ef 93       	push	r30
    2e9c:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
    2e9e:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <Timer2Reg0>
    2ea2:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <Timer2Reg0+0x1>
    2ea6:	a0 91 1b 04 	lds	r26, 0x041B	; 0x80041b <Timer2Reg0+0x2>
    2eaa:	b0 91 1c 04 	lds	r27, 0x041C	; 0x80041c <Timer2Reg0+0x3>
    2eae:	01 96       	adiw	r24, 0x01	; 1
    2eb0:	a1 1d       	adc	r26, r1
    2eb2:	b1 1d       	adc	r27, r1
    2eb4:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <Timer2Reg0>
    2eb8:	90 93 1a 04 	sts	0x041A, r25	; 0x80041a <Timer2Reg0+0x1>
    2ebc:	a0 93 1b 04 	sts	0x041B, r26	; 0x80041b <Timer2Reg0+0x2>
    2ec0:	b0 93 1c 04 	sts	0x041C, r27	; 0x80041c <Timer2Reg0+0x3>

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
    2ec4:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <TimerIntFunc+0xa>
    2ec8:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <TimerIntFunc+0xb>
    2ecc:	89 2b       	or	r24, r25
    2ece:	29 f0       	breq	.+10     	; 0x2eda <__vector_5+0x5e>
		TimerIntFunc[TIMER2OVERFLOW_INT]();
    2ed0:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <TimerIntFunc+0xa>
    2ed4:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <TimerIntFunc+0xb>
    2ed8:	09 95       	icall
}
    2eda:	ff 91       	pop	r31
    2edc:	ef 91       	pop	r30
    2ede:	bf 91       	pop	r27
    2ee0:	af 91       	pop	r26
    2ee2:	9f 91       	pop	r25
    2ee4:	8f 91       	pop	r24
    2ee6:	7f 91       	pop	r23
    2ee8:	6f 91       	pop	r22
    2eea:	5f 91       	pop	r21
    2eec:	4f 91       	pop	r20
    2eee:	3f 91       	pop	r19
    2ef0:	2f 91       	pop	r18
    2ef2:	0f 90       	pop	r0
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	0f 90       	pop	r0
    2ef8:	1f 90       	pop	r1
    2efa:	18 95       	reti

00002efc <__vector_10>:

#ifdef OCR0
// include support for Output Compare 0 for new AVR processors that support it
//! Interrupt handler for OutputCompare0 match (OC0) interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_COMP_vect)
{
    2efc:	1f 92       	push	r1
    2efe:	0f 92       	push	r0
    2f00:	0f b6       	in	r0, 0x3f	; 63
    2f02:	0f 92       	push	r0
    2f04:	11 24       	eor	r1, r1
    2f06:	2f 93       	push	r18
    2f08:	3f 93       	push	r19
    2f0a:	4f 93       	push	r20
    2f0c:	5f 93       	push	r21
    2f0e:	6f 93       	push	r22
    2f10:	7f 93       	push	r23
    2f12:	8f 93       	push	r24
    2f14:	9f 93       	push	r25
    2f16:	af 93       	push	r26
    2f18:	bf 93       	push	r27
    2f1a:	ef 93       	push	r30
    2f1c:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER0OUTCOMPARE_INT])
    2f1e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <TimerIntFunc+0xe>
    2f22:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <TimerIntFunc+0xf>
    2f26:	89 2b       	or	r24, r25
    2f28:	29 f0       	breq	.+10     	; 0x2f34 <__vector_10+0x38>
		TimerIntFunc[TIMER0OUTCOMPARE_INT]();
    2f2a:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <TimerIntFunc+0xe>
    2f2e:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <TimerIntFunc+0xf>
    2f32:	09 95       	icall
}
    2f34:	ff 91       	pop	r31
    2f36:	ef 91       	pop	r30
    2f38:	bf 91       	pop	r27
    2f3a:	af 91       	pop	r26
    2f3c:	9f 91       	pop	r25
    2f3e:	8f 91       	pop	r24
    2f40:	7f 91       	pop	r23
    2f42:	6f 91       	pop	r22
    2f44:	5f 91       	pop	r21
    2f46:	4f 91       	pop	r20
    2f48:	3f 91       	pop	r19
    2f4a:	2f 91       	pop	r18
    2f4c:	0f 90       	pop	r0
    2f4e:	0f be       	out	0x3f, r0	; 63
    2f50:	0f 90       	pop	r0
    2f52:	1f 90       	pop	r1
    2f54:	18 95       	reti

00002f56 <__vector_7>:
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect)
{
    2f56:	1f 92       	push	r1
    2f58:	0f 92       	push	r0
    2f5a:	0f b6       	in	r0, 0x3f	; 63
    2f5c:	0f 92       	push	r0
    2f5e:	11 24       	eor	r1, r1
    2f60:	2f 93       	push	r18
    2f62:	3f 93       	push	r19
    2f64:	4f 93       	push	r20
    2f66:	5f 93       	push	r21
    2f68:	6f 93       	push	r22
    2f6a:	7f 93       	push	r23
    2f6c:	8f 93       	push	r24
    2f6e:	9f 93       	push	r25
    2f70:	af 93       	push	r26
    2f72:	bf 93       	push	r27
    2f74:	ef 93       	push	r30
    2f76:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
    2f78:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <TimerIntFunc+0x4>
    2f7c:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <TimerIntFunc+0x5>
    2f80:	89 2b       	or	r24, r25
    2f82:	29 f0       	breq	.+10     	; 0x2f8e <__vector_7+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
    2f84:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <TimerIntFunc+0x4>
    2f88:	f0 91 49 01 	lds	r31, 0x0149	; 0x800149 <TimerIntFunc+0x5>
    2f8c:	09 95       	icall
}
    2f8e:	ff 91       	pop	r31
    2f90:	ef 91       	pop	r30
    2f92:	bf 91       	pop	r27
    2f94:	af 91       	pop	r26
    2f96:	9f 91       	pop	r25
    2f98:	8f 91       	pop	r24
    2f9a:	7f 91       	pop	r23
    2f9c:	6f 91       	pop	r22
    2f9e:	5f 91       	pop	r21
    2fa0:	4f 91       	pop	r20
    2fa2:	3f 91       	pop	r19
    2fa4:	2f 91       	pop	r18
    2fa6:	0f 90       	pop	r0
    2fa8:	0f be       	out	0x3f, r0	; 63
    2faa:	0f 90       	pop	r0
    2fac:	1f 90       	pop	r1
    2fae:	18 95       	reti

00002fb0 <__vector_8>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect)
{
    2fb0:	1f 92       	push	r1
    2fb2:	0f 92       	push	r0
    2fb4:	0f b6       	in	r0, 0x3f	; 63
    2fb6:	0f 92       	push	r0
    2fb8:	11 24       	eor	r1, r1
    2fba:	2f 93       	push	r18
    2fbc:	3f 93       	push	r19
    2fbe:	4f 93       	push	r20
    2fc0:	5f 93       	push	r21
    2fc2:	6f 93       	push	r22
    2fc4:	7f 93       	push	r23
    2fc6:	8f 93       	push	r24
    2fc8:	9f 93       	push	r25
    2fca:	af 93       	push	r26
    2fcc:	bf 93       	push	r27
    2fce:	ef 93       	push	r30
    2fd0:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
    2fd2:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <TimerIntFunc+0x6>
    2fd6:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <TimerIntFunc+0x7>
    2fda:	89 2b       	or	r24, r25
    2fdc:	29 f0       	breq	.+10     	; 0x2fe8 <__vector_8+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
    2fde:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <TimerIntFunc+0x6>
    2fe2:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <TimerIntFunc+0x7>
    2fe6:	09 95       	icall
}
    2fe8:	ff 91       	pop	r31
    2fea:	ef 91       	pop	r30
    2fec:	bf 91       	pop	r27
    2fee:	af 91       	pop	r26
    2ff0:	9f 91       	pop	r25
    2ff2:	8f 91       	pop	r24
    2ff4:	7f 91       	pop	r23
    2ff6:	6f 91       	pop	r22
    2ff8:	5f 91       	pop	r21
    2ffa:	4f 91       	pop	r20
    2ffc:	3f 91       	pop	r19
    2ffe:	2f 91       	pop	r18
    3000:	0f 90       	pop	r0
    3002:	0f be       	out	0x3f, r0	; 63
    3004:	0f 90       	pop	r0
    3006:	1f 90       	pop	r1
    3008:	18 95       	reti

0000300a <__vector_6>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect)
{
    300a:	1f 92       	push	r1
    300c:	0f 92       	push	r0
    300e:	0f b6       	in	r0, 0x3f	; 63
    3010:	0f 92       	push	r0
    3012:	11 24       	eor	r1, r1
    3014:	2f 93       	push	r18
    3016:	3f 93       	push	r19
    3018:	4f 93       	push	r20
    301a:	5f 93       	push	r21
    301c:	6f 93       	push	r22
    301e:	7f 93       	push	r23
    3020:	8f 93       	push	r24
    3022:	9f 93       	push	r25
    3024:	af 93       	push	r26
    3026:	bf 93       	push	r27
    3028:	ef 93       	push	r30
    302a:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
    302c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <TimerIntFunc+0x8>
    3030:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <TimerIntFunc+0x9>
    3034:	89 2b       	or	r24, r25
    3036:	29 f0       	breq	.+10     	; 0x3042 <__vector_6+0x38>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
    3038:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <TimerIntFunc+0x8>
    303c:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <TimerIntFunc+0x9>
    3040:	09 95       	icall
}
    3042:	ff 91       	pop	r31
    3044:	ef 91       	pop	r30
    3046:	bf 91       	pop	r27
    3048:	af 91       	pop	r26
    304a:	9f 91       	pop	r25
    304c:	8f 91       	pop	r24
    304e:	7f 91       	pop	r23
    3050:	6f 91       	pop	r22
    3052:	5f 91       	pop	r21
    3054:	4f 91       	pop	r20
    3056:	3f 91       	pop	r19
    3058:	2f 91       	pop	r18
    305a:	0f 90       	pop	r0
    305c:	0f be       	out	0x3f, r0	; 63
    305e:	0f 90       	pop	r0
    3060:	1f 90       	pop	r1
    3062:	18 95       	reti

00003064 <__vector_4>:

//! Interrupt handler for OutputCompare2 match (OC2) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMP_vect)
{
    3064:	1f 92       	push	r1
    3066:	0f 92       	push	r0
    3068:	0f b6       	in	r0, 0x3f	; 63
    306a:	0f 92       	push	r0
    306c:	11 24       	eor	r1, r1
    306e:	2f 93       	push	r18
    3070:	3f 93       	push	r19
    3072:	4f 93       	push	r20
    3074:	5f 93       	push	r21
    3076:	6f 93       	push	r22
    3078:	7f 93       	push	r23
    307a:	8f 93       	push	r24
    307c:	9f 93       	push	r25
    307e:	af 93       	push	r26
    3080:	bf 93       	push	r27
    3082:	ef 93       	push	r30
    3084:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
    3086:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <TimerIntFunc+0xc>
    308a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <TimerIntFunc+0xd>
    308e:	89 2b       	or	r24, r25
    3090:	29 f0       	breq	.+10     	; 0x309c <__vector_4+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
    3092:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <TimerIntFunc+0xc>
    3096:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <TimerIntFunc+0xd>
    309a:	09 95       	icall
}
    309c:	ff 91       	pop	r31
    309e:	ef 91       	pop	r30
    30a0:	bf 91       	pop	r27
    30a2:	af 91       	pop	r26
    30a4:	9f 91       	pop	r25
    30a6:	8f 91       	pop	r24
    30a8:	7f 91       	pop	r23
    30aa:	6f 91       	pop	r22
    30ac:	5f 91       	pop	r21
    30ae:	4f 91       	pop	r20
    30b0:	3f 91       	pop	r19
    30b2:	2f 91       	pop	r18
    30b4:	0f 90       	pop	r0
    30b6:	0f be       	out	0x3f, r0	; 63
    30b8:	0f 90       	pop	r0
    30ba:	1f 90       	pop	r1
    30bc:	18 95       	reti

000030be <uartInitBuffers>:
	else
	{
		// return failure
		return FALSE;
	}
}
    30be:	40 e4       	ldi	r20, 0x40	; 64
    30c0:	50 e0       	ldi	r21, 0x00	; 0
    30c2:	66 e9       	ldi	r22, 0x96	; 150
    30c4:	71 e0       	ldi	r23, 0x01	; 1
    30c6:	8e e1       	ldi	r24, 0x1E	; 30
    30c8:	94 e0       	ldi	r25, 0x04	; 4
    30ca:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <bufferInit>
    30ce:	40 e4       	ldi	r20, 0x40	; 64
    30d0:	50 e0       	ldi	r21, 0x00	; 0
    30d2:	66 e5       	ldi	r22, 0x56	; 86
    30d4:	71 e0       	ldi	r23, 0x01	; 1
    30d6:	88 e2       	ldi	r24, 0x28	; 40
    30d8:	94 e0       	ldi	r25, 0x04	; 4
    30da:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <bufferInit>

000030de <uartInit>:
    30de:	0e 94 5f 18 	call	0x30be	; 0x30be <uartInitBuffers>
    30e2:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <UartRxFunc+0x1>
    30e6:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <UartRxFunc>
    30ea:	88 ed       	ldi	r24, 0xD8	; 216
    30ec:	8a b9       	out	0x0a, r24	; 10
    30ee:	86 e8       	ldi	r24, 0x86	; 134
    30f0:	80 bd       	out	0x20, r24	; 32
    30f2:	87 e6       	ldi	r24, 0x67	; 103
    30f4:	89 b9       	out	0x09, r24	; 9
    30f6:	10 bc       	out	0x20, r1	; 32
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <uartReadyTx>
    30fe:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <uartBufferedTx>
    3102:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <uartRxOverflow+0x1>
    3106:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <uartRxOverflow>
    310a:	78 94       	sei
    310c:	08 95       	ret

0000310e <uartSetRxHandler>:
    310e:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <UartRxFunc+0x1>
    3112:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <UartRxFunc>
    3116:	08 95       	ret

00003118 <uartSetBaudRate>:
    3118:	0f 93       	push	r16
    311a:	1f 93       	push	r17
    311c:	8b 01       	movw	r16, r22
    311e:	9c 01       	movw	r18, r24
    3120:	dc 01       	movw	r26, r24
    3122:	cb 01       	movw	r24, r22
    3124:	80 58       	subi	r24, 0x80	; 128
    3126:	9b 47       	sbci	r25, 0x7B	; 123
    3128:	a1 4e       	sbci	r26, 0xE1	; 225
    312a:	bf 4f       	sbci	r27, 0xFF	; 255
    312c:	bc 01       	movw	r22, r24
    312e:	cd 01       	movw	r24, r26
    3130:	43 e0       	ldi	r20, 0x03	; 3
    3132:	66 0f       	add	r22, r22
    3134:	77 1f       	adc	r23, r23
    3136:	88 1f       	adc	r24, r24
    3138:	99 1f       	adc	r25, r25
    313a:	4a 95       	dec	r20
    313c:	d1 f7       	brne	.-12     	; 0x3132 <uartSetBaudRate+0x1a>
    313e:	a9 01       	movw	r20, r18
    3140:	98 01       	movw	r18, r16
    3142:	e4 e0       	ldi	r30, 0x04	; 4
    3144:	22 0f       	add	r18, r18
    3146:	33 1f       	adc	r19, r19
    3148:	44 1f       	adc	r20, r20
    314a:	55 1f       	adc	r21, r21
    314c:	ea 95       	dec	r30
    314e:	d1 f7       	brne	.-12     	; 0x3144 <uartSetBaudRate+0x2c>
    3150:	0e 94 7f 19 	call	0x32fe	; 0x32fe <__udivmodsi4>
    3154:	21 50       	subi	r18, 0x01	; 1
    3156:	31 09       	sbc	r19, r1
    3158:	29 b9       	out	0x09, r18	; 9
    315a:	30 bd       	out	0x20, r19	; 32
    315c:	1f 91       	pop	r17
    315e:	0f 91       	pop	r16
    3160:	08 95       	ret

00003162 <uartSendByte>:
    3162:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <uartReadyTx>
    3166:	99 23       	and	r25, r25
    3168:	e1 f3       	breq	.-8      	; 0x3162 <uartSendByte>
    316a:	8c b9       	out	0x0c, r24	; 12
    316c:	10 92 1d 04 	sts	0x041D, r1	; 0x80041d <uartReadyTx>
    3170:	08 95       	ret

00003172 <uartReceiveByte>:
    3172:	cf 93       	push	r28
    3174:	df 93       	push	r29
    3176:	20 91 20 04 	lds	r18, 0x0420	; 0x800420 <uartRxBuffer+0x2>
    317a:	30 91 21 04 	lds	r19, 0x0421	; 0x800421 <uartRxBuffer+0x3>
    317e:	23 2b       	or	r18, r19
    3180:	71 f0       	breq	.+28     	; 0x319e <uartReceiveByte+0x2c>
    3182:	20 91 22 04 	lds	r18, 0x0422	; 0x800422 <uartRxBuffer+0x4>
    3186:	30 91 23 04 	lds	r19, 0x0423	; 0x800423 <uartRxBuffer+0x5>
    318a:	23 2b       	or	r18, r19
    318c:	41 f0       	breq	.+16     	; 0x319e <uartReceiveByte+0x2c>
    318e:	ec 01       	movw	r28, r24
    3190:	8e e1       	ldi	r24, 0x1E	; 30
    3192:	94 e0       	ldi	r25, 0x04	; 4
    3194:	0e 94 e5 00 	call	0x1ca	; 0x1ca <bufferGetFromFront>
    3198:	88 83       	st	Y, r24
    319a:	81 e0       	ldi	r24, 0x01	; 1
    319c:	01 c0       	rjmp	.+2      	; 0x31a0 <uartReceiveByte+0x2e>
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	df 91       	pop	r29
    31a2:	cf 91       	pop	r28
    31a4:	08 95       	ret

000031a6 <uartGetByte>:
    31a6:	cf 93       	push	r28
    31a8:	df 93       	push	r29
    31aa:	1f 92       	push	r1
    31ac:	cd b7       	in	r28, 0x3d	; 61
    31ae:	de b7       	in	r29, 0x3e	; 62
    31b0:	ce 01       	movw	r24, r28
    31b2:	01 96       	adiw	r24, 0x01	; 1
    31b4:	0e 94 b9 18 	call	0x3172	; 0x3172 <uartReceiveByte>
    31b8:	88 23       	and	r24, r24
    31ba:	19 f0       	breq	.+6      	; 0x31c2 <uartGetByte+0x1c>
    31bc:	89 81       	ldd	r24, Y+1	; 0x01
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	02 c0       	rjmp	.+4      	; 0x31c6 <uartGetByte+0x20>
    31c2:	8f ef       	ldi	r24, 0xFF	; 255
    31c4:	9f ef       	ldi	r25, 0xFF	; 255
    31c6:	0f 90       	pop	r0
    31c8:	df 91       	pop	r29
    31ca:	cf 91       	pop	r28
    31cc:	08 95       	ret

000031ce <uartFlushReceiveBuffer>:
    31ce:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <uartRxBuffer+0x5>
    31d2:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <uartRxBuffer+0x4>
    31d6:	08 95       	ret

000031d8 <uartReceiveBufferIsEmpty>:
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	20 91 22 04 	lds	r18, 0x0422	; 0x800422 <uartRxBuffer+0x4>
    31de:	30 91 23 04 	lds	r19, 0x0423	; 0x800423 <uartRxBuffer+0x5>
    31e2:	23 2b       	or	r18, r19
    31e4:	09 f0       	breq	.+2      	; 0x31e8 <uartReceiveBufferIsEmpty+0x10>
    31e6:	80 e0       	ldi	r24, 0x00	; 0
    31e8:	08 95       	ret

000031ea <__vector_15>:

// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(USART_TXC_vect)
{
    31ea:	1f 92       	push	r1
    31ec:	0f 92       	push	r0
    31ee:	0f b6       	in	r0, 0x3f	; 63
    31f0:	0f 92       	push	r0
    31f2:	11 24       	eor	r1, r1
    31f4:	2f 93       	push	r18
    31f6:	3f 93       	push	r19
    31f8:	4f 93       	push	r20
    31fa:	5f 93       	push	r21
    31fc:	6f 93       	push	r22
    31fe:	7f 93       	push	r23
    3200:	8f 93       	push	r24
    3202:	9f 93       	push	r25
    3204:	af 93       	push	r26
    3206:	bf 93       	push	r27
    3208:	ef 93       	push	r30
    320a:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
    320c:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <uartBufferedTx>
    3210:	88 23       	and	r24, r24
    3212:	71 f0       	breq	.+28     	; 0x3230 <__vector_15+0x46>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
    3214:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <uartTxBuffer+0x4>
    3218:	90 91 2d 04 	lds	r25, 0x042D	; 0x80042d <uartTxBuffer+0x5>
    321c:	89 2b       	or	r24, r25
    321e:	31 f0       	breq	.+12     	; 0x322c <__vector_15+0x42>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
    3220:	88 e2       	ldi	r24, 0x28	; 40
    3222:	94 e0       	ldi	r25, 0x04	; 4
    3224:	0e 94 e5 00 	call	0x1ca	; 0x1ca <bufferGetFromFront>
    3228:	8c b9       	out	0x0c, r24	; 12
    322a:	05 c0       	rjmp	.+10     	; 0x3236 <__vector_15+0x4c>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
    322c:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <uartBufferedTx>
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <uartReadyTx>
	}
}
    3236:	ff 91       	pop	r31
    3238:	ef 91       	pop	r30
    323a:	bf 91       	pop	r27
    323c:	af 91       	pop	r26
    323e:	9f 91       	pop	r25
    3240:	8f 91       	pop	r24
    3242:	7f 91       	pop	r23
    3244:	6f 91       	pop	r22
    3246:	5f 91       	pop	r21
    3248:	4f 91       	pop	r20
    324a:	3f 91       	pop	r19
    324c:	2f 91       	pop	r18
    324e:	0f 90       	pop	r0
    3250:	0f be       	out	0x3f, r0	; 63
    3252:	0f 90       	pop	r0
    3254:	1f 90       	pop	r1
    3256:	18 95       	reti

00003258 <__vector_13>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(USART_RXC_vect)
{
    3258:	1f 92       	push	r1
    325a:	0f 92       	push	r0
    325c:	0f b6       	in	r0, 0x3f	; 63
    325e:	0f 92       	push	r0
    3260:	11 24       	eor	r1, r1
    3262:	2f 93       	push	r18
    3264:	3f 93       	push	r19
    3266:	4f 93       	push	r20
    3268:	5f 93       	push	r21
    326a:	6f 93       	push	r22
    326c:	7f 93       	push	r23
    326e:	8f 93       	push	r24
    3270:	9f 93       	push	r25
    3272:	af 93       	push	r26
    3274:	bf 93       	push	r27
    3276:	ef 93       	push	r30
    3278:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
    327a:	8c b1       	in	r24, 0x0c	; 12
	
	// if there's a user function to handle this receive event
	if(UartRxFunc)
    327c:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <UartRxFunc>
    3280:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <UartRxFunc+0x1>
    3284:	23 2b       	or	r18, r19
    3286:	31 f0       	breq	.+12     	; 0x3294 <__vector_13+0x3c>
	{
		// call it and pass the received data
		UartRxFunc(c);
    3288:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <UartRxFunc>
    328c:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <UartRxFunc+0x1>
    3290:	09 95       	icall
    3292:	10 c0       	rjmp	.+32     	; 0x32b4 <__vector_13+0x5c>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
    3294:	68 2f       	mov	r22, r24
    3296:	8e e1       	ldi	r24, 0x1E	; 30
    3298:	94 e0       	ldi	r25, 0x04	; 4
    329a:	0e 94 09 01 	call	0x212	; 0x212 <bufferAddToEnd>
    329e:	81 11       	cpse	r24, r1
    32a0:	09 c0       	rjmp	.+18     	; 0x32b4 <__vector_13+0x5c>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
    32a2:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <uartRxOverflow>
    32a6:	90 91 31 04 	lds	r25, 0x0431	; 0x800431 <uartRxOverflow+0x1>
    32aa:	01 96       	adiw	r24, 0x01	; 1
    32ac:	90 93 31 04 	sts	0x0431, r25	; 0x800431 <uartRxOverflow+0x1>
    32b0:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <uartRxOverflow>
		}
	}
}
    32b4:	ff 91       	pop	r31
    32b6:	ef 91       	pop	r30
    32b8:	bf 91       	pop	r27
    32ba:	af 91       	pop	r26
    32bc:	9f 91       	pop	r25
    32be:	8f 91       	pop	r24
    32c0:	7f 91       	pop	r23
    32c2:	6f 91       	pop	r22
    32c4:	5f 91       	pop	r21
    32c6:	4f 91       	pop	r20
    32c8:	3f 91       	pop	r19
    32ca:	2f 91       	pop	r18
    32cc:	0f 90       	pop	r0
    32ce:	0f be       	out	0x3f, r0	; 63
    32d0:	0f 90       	pop	r0
    32d2:	1f 90       	pop	r1
    32d4:	18 95       	reti

000032d6 <__udivmodhi4>:
    32d6:	aa 1b       	sub	r26, r26
    32d8:	bb 1b       	sub	r27, r27
    32da:	51 e1       	ldi	r21, 0x11	; 17
    32dc:	07 c0       	rjmp	.+14     	; 0x32ec <__udivmodhi4_ep>

000032de <__udivmodhi4_loop>:
    32de:	aa 1f       	adc	r26, r26
    32e0:	bb 1f       	adc	r27, r27
    32e2:	a6 17       	cp	r26, r22
    32e4:	b7 07       	cpc	r27, r23
    32e6:	10 f0       	brcs	.+4      	; 0x32ec <__udivmodhi4_ep>
    32e8:	a6 1b       	sub	r26, r22
    32ea:	b7 0b       	sbc	r27, r23

000032ec <__udivmodhi4_ep>:
    32ec:	88 1f       	adc	r24, r24
    32ee:	99 1f       	adc	r25, r25
    32f0:	5a 95       	dec	r21
    32f2:	a9 f7       	brne	.-22     	; 0x32de <__udivmodhi4_loop>
    32f4:	80 95       	com	r24
    32f6:	90 95       	com	r25
    32f8:	bc 01       	movw	r22, r24
    32fa:	cd 01       	movw	r24, r26
    32fc:	08 95       	ret

000032fe <__udivmodsi4>:
    32fe:	a1 e2       	ldi	r26, 0x21	; 33
    3300:	1a 2e       	mov	r1, r26
    3302:	aa 1b       	sub	r26, r26
    3304:	bb 1b       	sub	r27, r27
    3306:	fd 01       	movw	r30, r26
    3308:	0d c0       	rjmp	.+26     	; 0x3324 <__udivmodsi4_ep>

0000330a <__udivmodsi4_loop>:
    330a:	aa 1f       	adc	r26, r26
    330c:	bb 1f       	adc	r27, r27
    330e:	ee 1f       	adc	r30, r30
    3310:	ff 1f       	adc	r31, r31
    3312:	a2 17       	cp	r26, r18
    3314:	b3 07       	cpc	r27, r19
    3316:	e4 07       	cpc	r30, r20
    3318:	f5 07       	cpc	r31, r21
    331a:	20 f0       	brcs	.+8      	; 0x3324 <__udivmodsi4_ep>
    331c:	a2 1b       	sub	r26, r18
    331e:	b3 0b       	sbc	r27, r19
    3320:	e4 0b       	sbc	r30, r20
    3322:	f5 0b       	sbc	r31, r21

00003324 <__udivmodsi4_ep>:
    3324:	66 1f       	adc	r22, r22
    3326:	77 1f       	adc	r23, r23
    3328:	88 1f       	adc	r24, r24
    332a:	99 1f       	adc	r25, r25
    332c:	1a 94       	dec	r1
    332e:	69 f7       	brne	.-38     	; 0x330a <__udivmodsi4_loop>
    3330:	60 95       	com	r22
    3332:	70 95       	com	r23
    3334:	80 95       	com	r24
    3336:	90 95       	com	r25
    3338:	9b 01       	movw	r18, r22
    333a:	ac 01       	movw	r20, r24
    333c:	bd 01       	movw	r22, r26
    333e:	cf 01       	movw	r24, r30
    3340:	08 95       	ret

00003342 <__muluhisi3>:
    3342:	0e 94 ac 19 	call	0x3358	; 0x3358 <__umulhisi3>
    3346:	a5 9f       	mul	r26, r21
    3348:	90 0d       	add	r25, r0
    334a:	b4 9f       	mul	r27, r20
    334c:	90 0d       	add	r25, r0
    334e:	a4 9f       	mul	r26, r20
    3350:	80 0d       	add	r24, r0
    3352:	91 1d       	adc	r25, r1
    3354:	11 24       	eor	r1, r1
    3356:	08 95       	ret

00003358 <__umulhisi3>:
    3358:	a2 9f       	mul	r26, r18
    335a:	b0 01       	movw	r22, r0
    335c:	b3 9f       	mul	r27, r19
    335e:	c0 01       	movw	r24, r0
    3360:	a3 9f       	mul	r26, r19
    3362:	70 0d       	add	r23, r0
    3364:	81 1d       	adc	r24, r1
    3366:	11 24       	eor	r1, r1
    3368:	91 1d       	adc	r25, r1
    336a:	b2 9f       	mul	r27, r18
    336c:	70 0d       	add	r23, r0
    336e:	81 1d       	adc	r24, r1
    3370:	11 24       	eor	r1, r1
    3372:	91 1d       	adc	r25, r1
    3374:	08 95       	ret

00003376 <__itoa_ncheck>:
    3376:	bb 27       	eor	r27, r27
    3378:	4a 30       	cpi	r20, 0x0A	; 10
    337a:	31 f4       	brne	.+12     	; 0x3388 <__itoa_ncheck+0x12>
    337c:	99 23       	and	r25, r25
    337e:	22 f4       	brpl	.+8      	; 0x3388 <__itoa_ncheck+0x12>
    3380:	bd e2       	ldi	r27, 0x2D	; 45
    3382:	90 95       	com	r25
    3384:	81 95       	neg	r24
    3386:	9f 4f       	sbci	r25, 0xFF	; 255
    3388:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__utoa_common>

0000338c <__utoa_ncheck>:
    338c:	bb 27       	eor	r27, r27

0000338e <__utoa_common>:
    338e:	fb 01       	movw	r30, r22
    3390:	55 27       	eor	r21, r21
    3392:	aa 27       	eor	r26, r26
    3394:	88 0f       	add	r24, r24
    3396:	99 1f       	adc	r25, r25
    3398:	aa 1f       	adc	r26, r26
    339a:	a4 17       	cp	r26, r20
    339c:	10 f0       	brcs	.+4      	; 0x33a2 <__utoa_common+0x14>
    339e:	a4 1b       	sub	r26, r20
    33a0:	83 95       	inc	r24
    33a2:	50 51       	subi	r21, 0x10	; 16
    33a4:	b9 f7       	brne	.-18     	; 0x3394 <__utoa_common+0x6>
    33a6:	a0 5d       	subi	r26, 0xD0	; 208
    33a8:	aa 33       	cpi	r26, 0x3A	; 58
    33aa:	08 f0       	brcs	.+2      	; 0x33ae <__utoa_common+0x20>
    33ac:	a9 5d       	subi	r26, 0xD9	; 217
    33ae:	a1 93       	st	Z+, r26
    33b0:	00 97       	sbiw	r24, 0x00	; 0
    33b2:	79 f7       	brne	.-34     	; 0x3392 <__utoa_common+0x4>
    33b4:	b1 11       	cpse	r27, r1
    33b6:	b1 93       	st	Z+, r27
    33b8:	11 92       	st	Z+, r1
    33ba:	cb 01       	movw	r24, r22
    33bc:	0c 94 e0 19 	jmp	0x33c0	; 0x33c0 <strrev>

000033c0 <strrev>:
    33c0:	dc 01       	movw	r26, r24
    33c2:	fc 01       	movw	r30, r24
    33c4:	67 2f       	mov	r22, r23
    33c6:	71 91       	ld	r23, Z+
    33c8:	77 23       	and	r23, r23
    33ca:	e1 f7       	brne	.-8      	; 0x33c4 <strrev+0x4>
    33cc:	32 97       	sbiw	r30, 0x02	; 2
    33ce:	04 c0       	rjmp	.+8      	; 0x33d8 <strrev+0x18>
    33d0:	7c 91       	ld	r23, X
    33d2:	6d 93       	st	X+, r22
    33d4:	70 83       	st	Z, r23
    33d6:	62 91       	ld	r22, -Z
    33d8:	ae 17       	cp	r26, r30
    33da:	bf 07       	cpc	r27, r31
    33dc:	c8 f3       	brcs	.-14     	; 0x33d0 <strrev+0x10>
    33de:	08 95       	ret

000033e0 <_exit>:
    33e0:	f8 94       	cli

000033e2 <__stop_program>:
    33e2:	ff cf       	rjmp	.-2      	; 0x33e2 <__stop_program>
