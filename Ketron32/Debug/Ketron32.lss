
Ketron32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006996  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a4  00800060  00006996  00006a2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000fd  00800204  00800204  00006bce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006bce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006c00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008b8  00000000  00000000  00006c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c341  00000000  00000000  000074f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000268b  00000000  00000000  00013835  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000061e4  00000000  00000000  00015ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000021c4  00000000  00000000  0001c0a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ae7  00000000  00000000  0001e268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c735  00000000  00000000  0001fd4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008b0  00000000  00000000  0002c484  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__ctors_end>
       4:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
       8:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
       c:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
      10:	0c 94 ac 31 	jmp	0x6358	; 0x6358 <__vector_4>
      14:	0c 94 b8 30 	jmp	0x6170	; 0x6170 <__vector_5>
      18:	0c 94 7f 31 	jmp	0x62fe	; 0x62fe <__vector_6>
      1c:	0c 94 25 31 	jmp	0x624a	; 0x624a <__vector_7>
      20:	0c 94 52 31 	jmp	0x62a4	; 0x62a4 <__vector_8>
      24:	0c 94 8b 30 	jmp	0x6116	; 0x6116 <__vector_9>
      28:	0c 94 f8 30 	jmp	0x61f0	; 0x61f0 <__vector_10>
      2c:	0c 94 38 30 	jmp	0x6070	; 0x6070 <__vector_11>
      30:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
      34:	0c 94 bb 32 	jmp	0x6576	; 0x6576 <__vector_13>
      38:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
      3c:	0c 94 80 32 	jmp	0x6500	; 0x6500 <__vector_15>
      40:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__vector_16>
      44:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
      48:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
      4c:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
      50:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
      54:	69 27       	eor	r22, r25
      56:	6b 27       	eor	r22, r27
      58:	6b 27       	eor	r22, r27
      5a:	6b 27       	eor	r22, r27
      5c:	6b 27       	eor	r22, r27
      5e:	6b 27       	eor	r22, r27
      60:	6b 27       	eor	r22, r27
      62:	6b 27       	eor	r22, r27
      64:	6b 27       	eor	r22, r27
      66:	6b 27       	eor	r22, r27
      68:	6b 27       	eor	r22, r27
      6a:	6b 27       	eor	r22, r27
      6c:	6b 27       	eor	r22, r27
      6e:	6b 27       	eor	r22, r27
      70:	6b 27       	eor	r22, r27
      72:	6b 27       	eor	r22, r27
      74:	69 27       	eor	r22, r25
      76:	6b 27       	eor	r22, r27
      78:	6b 27       	eor	r22, r27
      7a:	6b 27       	eor	r22, r27
      7c:	6b 27       	eor	r22, r27
      7e:	6b 27       	eor	r22, r27
      80:	6b 27       	eor	r22, r27
      82:	6b 27       	eor	r22, r27
      84:	6b 27       	eor	r22, r27
      86:	6b 27       	eor	r22, r27
      88:	6b 27       	eor	r22, r27
      8a:	6b 27       	eor	r22, r27
      8c:	6b 27       	eor	r22, r27
      8e:	6b 27       	eor	r22, r27
      90:	6b 27       	eor	r22, r27
      92:	6b 27       	eor	r22, r27
      94:	69 27       	eor	r22, r25
      96:	6b 27       	eor	r22, r27
      98:	6b 27       	eor	r22, r27
      9a:	6b 27       	eor	r22, r27
      9c:	6b 27       	eor	r22, r27
      9e:	6b 27       	eor	r22, r27
      a0:	6b 27       	eor	r22, r27
      a2:	6b 27       	eor	r22, r27
      a4:	6b 27       	eor	r22, r27
      a6:	6b 27       	eor	r22, r27
      a8:	6b 27       	eor	r22, r27
      aa:	6b 27       	eor	r22, r27
      ac:	6b 27       	eor	r22, r27
      ae:	6b 27       	eor	r22, r27
      b0:	6b 27       	eor	r22, r27
      b2:	6b 27       	eor	r22, r27
      b4:	69 27       	eor	r22, r25
      b6:	6b 27       	eor	r22, r27
      b8:	6b 27       	eor	r22, r27
      ba:	6b 27       	eor	r22, r27
      bc:	6b 27       	eor	r22, r27
      be:	6b 27       	eor	r22, r27
      c0:	6b 27       	eor	r22, r27
      c2:	6b 27       	eor	r22, r27
      c4:	6b 27       	eor	r22, r27
      c6:	6b 27       	eor	r22, r27
      c8:	6b 27       	eor	r22, r27
      ca:	6b 27       	eor	r22, r27
      cc:	6b 27       	eor	r22, r27
      ce:	6b 27       	eor	r22, r27
      d0:	6b 27       	eor	r22, r27
      d2:	6b 27       	eor	r22, r27
      d4:	67 27       	eor	r22, r23
      d6:	6b 27       	eor	r22, r27
      d8:	6b 27       	eor	r22, r27
      da:	6b 27       	eor	r22, r27
      dc:	6b 27       	eor	r22, r27
      de:	6b 27       	eor	r22, r27
      e0:	6b 27       	eor	r22, r27
      e2:	6b 27       	eor	r22, r27
      e4:	6b 27       	eor	r22, r27
      e6:	6b 27       	eor	r22, r27
      e8:	6b 27       	eor	r22, r27
      ea:	6b 27       	eor	r22, r27
      ec:	6b 27       	eor	r22, r27
      ee:	6b 27       	eor	r22, r27
      f0:	6b 27       	eor	r22, r27
      f2:	6b 27       	eor	r22, r27
      f4:	67 27       	eor	r22, r23
      f6:	6b 27       	eor	r22, r27
      f8:	6b 27       	eor	r22, r27
      fa:	6b 27       	eor	r22, r27
      fc:	6b 27       	eor	r22, r27
      fe:	6b 27       	eor	r22, r27
     100:	6b 27       	eor	r22, r27
     102:	6b 27       	eor	r22, r27
     104:	6b 27       	eor	r22, r27
     106:	6b 27       	eor	r22, r27
     108:	6b 27       	eor	r22, r27
     10a:	6b 27       	eor	r22, r27
     10c:	6b 27       	eor	r22, r27
     10e:	6b 27       	eor	r22, r27
     110:	6b 27       	eor	r22, r27
     112:	6b 27       	eor	r22, r27
     114:	69 27       	eor	r22, r25
     116:	6b 27       	eor	r22, r27
     118:	6b 27       	eor	r22, r27
     11a:	6b 27       	eor	r22, r27
     11c:	6b 27       	eor	r22, r27
     11e:	6b 27       	eor	r22, r27
     120:	6b 27       	eor	r22, r27
     122:	6b 27       	eor	r22, r27
     124:	6b 27       	eor	r22, r27
     126:	6b 27       	eor	r22, r27
     128:	6b 27       	eor	r22, r27
     12a:	6b 27       	eor	r22, r27
     12c:	6b 27       	eor	r22, r27
     12e:	6b 27       	eor	r22, r27
     130:	6b 27       	eor	r22, r27
     132:	6b 27       	eor	r22, r27
     134:	6b 27       	eor	r22, r27
     136:	67 27       	eor	r22, r23
     138:	69 27       	eor	r22, r25
     13a:	67 27       	eor	r22, r23
     13c:	6b 27       	eor	r22, r27
     13e:	6b 27       	eor	r22, r27
     140:	6d 27       	eor	r22, r29
     142:	6b 27       	eor	r22, r27
     144:	6d 27       	eor	r22, r29
     146:	6d 27       	eor	r22, r29
     148:	6d 27       	eor	r22, r29
     14a:	6d 27       	eor	r22, r29
     14c:	6d 27       	eor	r22, r29
     14e:	6b 27       	eor	r22, r27
     150:	6d 27       	eor	r22, r29
     152:	6d 27       	eor	r22, r29
     154:	b7 2a       	or	r11, r23
     156:	c0 2a       	or	r12, r16
     158:	27 2b       	or	r18, r23
     15a:	2e 2b       	or	r18, r30
     15c:	12 2c       	mov	r1, r2
     15e:	12 2c       	mov	r1, r2
     160:	12 2c       	mov	r1, r2
     162:	12 2c       	mov	r1, r2
     164:	12 2c       	mov	r1, r2
     166:	12 2c       	mov	r1, r2
     168:	bd 2b       	or	r27, r29
     16a:	c3 2b       	or	r28, r19
     16c:	d6 2b       	or	r29, r22
     16e:	e9 2b       	or	r30, r25
     170:	fe 2b       	or	r31, r30

00000172 <LcdCustomChar>:
     172:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     182:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     192:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     1a2:	03 07 0f 1f 0f 07 03 00 00 1f 1f 1f 1f 1f 1f 00     ................
     1b2:	1b 1b 1b 1b 1b 1b 1b 00 18 1c 1e 1f 1e 1c 18 00     ................
     1c2:	00 04 04 0e 0e 1f 1f 00 00 1f 1f 0e 0e 04 04 00     ................
	...
     1da:	00 0e 19 15 13 0e 00 00 00 0e 15 15 15 0e 00 00     ................
     1ea:	00 0e 13 15 19 0e 00 00 00 0e 11 1f 11 0e 00 00     ................

000001fa <__ctors_end>:
     1fa:	11 24       	eor	r1, r1
     1fc:	1f be       	out	0x3f, r1	; 63
     1fe:	cf e5       	ldi	r28, 0x5F	; 95
     200:	d8 e0       	ldi	r29, 0x08	; 8
     202:	de bf       	out	0x3e, r29	; 62
     204:	cd bf       	out	0x3d, r28	; 61

00000206 <__do_copy_data>:
     206:	12 e0       	ldi	r17, 0x02	; 2
     208:	a0 e6       	ldi	r26, 0x60	; 96
     20a:	b0 e0       	ldi	r27, 0x00	; 0
     20c:	e6 e9       	ldi	r30, 0x96	; 150
     20e:	f9 e6       	ldi	r31, 0x69	; 105
     210:	02 c0       	rjmp	.+4      	; 0x216 <__do_copy_data+0x10>
     212:	05 90       	lpm	r0, Z+
     214:	0d 92       	st	X+, r0
     216:	a4 30       	cpi	r26, 0x04	; 4
     218:	b1 07       	cpc	r27, r17
     21a:	d9 f7       	brne	.-10     	; 0x212 <__do_copy_data+0xc>

0000021c <__do_clear_bss>:
     21c:	23 e0       	ldi	r18, 0x03	; 3
     21e:	a4 e0       	ldi	r26, 0x04	; 4
     220:	b2 e0       	ldi	r27, 0x02	; 2
     222:	01 c0       	rjmp	.+2      	; 0x226 <.do_clear_bss_start>

00000224 <.do_clear_bss_loop>:
     224:	1d 92       	st	X+, r1

00000226 <.do_clear_bss_start>:
     226:	a1 30       	cpi	r26, 0x01	; 1
     228:	b2 07       	cpc	r27, r18
     22a:	e1 f7       	brne	.-8      	; 0x224 <.do_clear_bss_loop>
     22c:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <main>
     230:	0c 94 c9 34 	jmp	0x6992	; 0x6992 <_exit>

00000234 <__bad_interrupt>:
     234:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000238 <a2dSetPrescaler>:

// return TRUE if conversion is complete
u08 a2dIsComplete(void)
{
	return bit_is_set(ADCSR, ADSC);
}
     238:	96 b1       	in	r25, 0x06	; 6
     23a:	98 7f       	andi	r25, 0xF8	; 248
     23c:	89 2b       	or	r24, r25
     23e:	86 b9       	out	0x06, r24	; 6
     240:	08 95       	ret

00000242 <a2dSetReference>:
     242:	27 b1       	in	r18, 0x07	; 7
     244:	2f 73       	andi	r18, 0x3F	; 63
     246:	30 e4       	ldi	r19, 0x40	; 64
     248:	83 9f       	mul	r24, r19
     24a:	c0 01       	movw	r24, r0
     24c:	11 24       	eor	r1, r1
     24e:	82 2b       	or	r24, r18
     250:	87 b9       	out	0x07, r24	; 7
     252:	08 95       	ret

00000254 <a2dInit>:
     254:	37 9a       	sbi	0x06, 7	; 6
     256:	35 98       	cbi	0x06, 5	; 6
     258:	86 e0       	ldi	r24, 0x06	; 6
     25a:	0e 94 1c 01 	call	0x238	; 0x238 <a2dSetPrescaler>
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	0e 94 21 01 	call	0x242	; 0x242 <a2dSetReference>
     264:	3d 98       	cbi	0x07, 5	; 7
     266:	33 9a       	sbi	0x06, 3	; 6
     268:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <a2dCompleteFlag>
     26c:	78 94       	sei
     26e:	08 95       	ret

00000270 <a2dSetChannel>:
     270:	97 b1       	in	r25, 0x07	; 7
     272:	90 7e       	andi	r25, 0xE0	; 224
     274:	8f 71       	andi	r24, 0x1F	; 31
     276:	89 2b       	or	r24, r25
     278:	87 b9       	out	0x07, r24	; 7
     27a:	08 95       	ret

0000027c <a2dStartConvert>:
     27c:	34 9a       	sbi	0x06, 4	; 6
     27e:	36 9a       	sbi	0x06, 6	; 6
     280:	08 95       	ret

00000282 <a2dConvert10bit>:

// Perform a 10-bit conversion
// starts conversion, waits until conversion is done, and returns result
unsigned short a2dConvert10bit(unsigned char ch)
{
	a2dCompleteFlag = FALSE;				// clear conversion complete flag
     282:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <a2dCompleteFlag>
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
     286:	97 b1       	in	r25, 0x07	; 7
     288:	90 7e       	andi	r25, 0xE0	; 224
     28a:	8f 71       	andi	r24, 0x1F	; 31
     28c:	89 2b       	or	r24, r25
     28e:	87 b9       	out	0x07, r24	; 7
	sbi(ADCSR, ADIF);						// clear hardware "conversion complete" flag 
     290:	34 9a       	sbi	0x06, 4	; 6
	sbi(ADCSR, ADSC);						// start conversion
     292:	36 9a       	sbi	0x06, 6	; 6
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSR, ADSC) );		// wait until conversion complete
     294:	36 99       	sbic	0x06, 6	; 6
     296:	fe cf       	rjmp	.-4      	; 0x294 <a2dConvert10bit+0x12>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	return (inb(ADCL) | (inb(ADCH)<<8));	// read ADC (full 10 bits);
     298:	84 b1       	in	r24, 0x04	; 4
     29a:	25 b1       	in	r18, 0x05	; 5
     29c:	90 e0       	ldi	r25, 0x00	; 0
}
     29e:	92 2b       	or	r25, r18
     2a0:	08 95       	ret

000002a2 <a2dConvert8bit>:
// Perform a 8-bit conversion.
// starts conversion, waits until conversion is done, and returns result
unsigned char a2dConvert8bit(unsigned char ch)
{
	// do 10-bit conversion and return highest 8 bits
	return a2dConvert10bit(ch)>>2;			// return ADC MSB byte
     2a2:	0e 94 41 01 	call	0x282	; 0x282 <a2dConvert10bit>
     2a6:	96 95       	lsr	r25
     2a8:	87 95       	ror	r24
     2aa:	96 95       	lsr	r25
     2ac:	87 95       	ror	r24
}
     2ae:	08 95       	ret

000002b0 <__vector_16>:

//! Interrupt handler for ADC complete interrupt.
SIGNAL(ADC_vect)
{
     2b0:	1f 92       	push	r1
     2b2:	0f 92       	push	r0
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	0f 92       	push	r0
     2b8:	11 24       	eor	r1, r1
     2ba:	8f 93       	push	r24
	// set the a2d conversion flag to indicate "complete"
	a2dCompleteFlag = TRUE;
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <a2dCompleteFlag>
	
}
     2c2:	8f 91       	pop	r24
     2c4:	0f 90       	pop	r0
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	0f 90       	pop	r0
     2ca:	1f 90       	pop	r1
     2cc:	18 95       	reti

000002ce <bufferInit>:
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
	return data;
}
     2ce:	fc 01       	movw	r30, r24
     2d0:	8f b7       	in	r24, 0x3f	; 63
     2d2:	f8 94       	cli
     2d4:	71 83       	std	Z+1, r23	; 0x01
     2d6:	60 83       	st	Z, r22
     2d8:	53 83       	std	Z+3, r21	; 0x03
     2da:	42 83       	std	Z+2, r20	; 0x02
     2dc:	17 82       	std	Z+7, r1	; 0x07
     2de:	16 82       	std	Z+6, r1	; 0x06
     2e0:	15 82       	std	Z+5, r1	; 0x05
     2e2:	14 82       	std	Z+4, r1	; 0x04
     2e4:	8f bf       	out	0x3f, r24	; 63
     2e6:	08 95       	ret

000002e8 <bufferGetFromFront>:
     2e8:	fc 01       	movw	r30, r24
     2ea:	9f b7       	in	r25, 0x3f	; 63
     2ec:	f8 94       	cli
     2ee:	44 81       	ldd	r20, Z+4	; 0x04
     2f0:	55 81       	ldd	r21, Z+5	; 0x05
     2f2:	41 15       	cp	r20, r1
     2f4:	51 05       	cpc	r21, r1
     2f6:	c9 f0       	breq	.+50     	; 0x32a <bufferGetFromFront+0x42>
     2f8:	26 81       	ldd	r18, Z+6	; 0x06
     2fa:	37 81       	ldd	r19, Z+7	; 0x07
     2fc:	a0 81       	ld	r26, Z
     2fe:	b1 81       	ldd	r27, Z+1	; 0x01
     300:	a2 0f       	add	r26, r18
     302:	b3 1f       	adc	r27, r19
     304:	8c 91       	ld	r24, X
     306:	2f 5f       	subi	r18, 0xFF	; 255
     308:	3f 4f       	sbci	r19, 0xFF	; 255
     30a:	37 83       	std	Z+7, r19	; 0x07
     30c:	26 83       	std	Z+6, r18	; 0x06
     30e:	62 81       	ldd	r22, Z+2	; 0x02
     310:	73 81       	ldd	r23, Z+3	; 0x03
     312:	26 17       	cp	r18, r22
     314:	37 07       	cpc	r19, r23
     316:	20 f0       	brcs	.+8      	; 0x320 <bufferGetFromFront+0x38>
     318:	26 1b       	sub	r18, r22
     31a:	37 0b       	sbc	r19, r23
     31c:	37 83       	std	Z+7, r19	; 0x07
     31e:	26 83       	std	Z+6, r18	; 0x06
     320:	41 50       	subi	r20, 0x01	; 1
     322:	51 09       	sbc	r21, r1
     324:	55 83       	std	Z+5, r21	; 0x05
     326:	44 83       	std	Z+4, r20	; 0x04
     328:	01 c0       	rjmp	.+2      	; 0x32c <bufferGetFromFront+0x44>
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	9f bf       	out	0x3f, r25	; 63
     32e:	08 95       	ret

00000330 <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     330:	cf 93       	push	r28
     332:	fc 01       	movw	r30, r24
     334:	c6 2f       	mov	r28, r22
	// begin critical section
	CRITICAL_SECTION_START;
     336:	4f b7       	in	r20, 0x3f	; 63
     338:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     33a:	24 81       	ldd	r18, Z+4	; 0x04
     33c:	35 81       	ldd	r19, Z+5	; 0x05
     33e:	62 81       	ldd	r22, Z+2	; 0x02
     340:	73 81       	ldd	r23, Z+3	; 0x03
     342:	26 17       	cp	r18, r22
     344:	37 07       	cpc	r19, r23
     346:	98 f4       	brcc	.+38     	; 0x36e <bufferAddToEnd+0x3e>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     348:	86 81       	ldd	r24, Z+6	; 0x06
     34a:	97 81       	ldd	r25, Z+7	; 0x07
     34c:	82 0f       	add	r24, r18
     34e:	93 1f       	adc	r25, r19
     350:	0e 94 fa 32 	call	0x65f4	; 0x65f4 <__udivmodhi4>
     354:	a0 81       	ld	r26, Z
     356:	b1 81       	ldd	r27, Z+1	; 0x01
     358:	a8 0f       	add	r26, r24
     35a:	b9 1f       	adc	r27, r25
     35c:	cc 93       	st	X, r28
		// increment the length
		buffer->datalength++;
     35e:	84 81       	ldd	r24, Z+4	; 0x04
     360:	95 81       	ldd	r25, Z+5	; 0x05
     362:	01 96       	adiw	r24, 0x01	; 1
     364:	95 83       	std	Z+5, r25	; 0x05
     366:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     368:	4f bf       	out	0x3f, r20	; 63
		// return success
		return -1;
     36a:	8f ef       	ldi	r24, 0xFF	; 255
     36c:	02 c0       	rjmp	.+4      	; 0x372 <bufferAddToEnd+0x42>
	}
	// end critical section
	CRITICAL_SECTION_END;
     36e:	4f bf       	out	0x3f, r20	; 63
	// return failure
	return 0;
     370:	80 e0       	ldi	r24, 0x00	; 0
}
     372:	cf 91       	pop	r28
     374:	08 95       	ret

00000376 <mem_cpy>:
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj.fs, res);
}
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	42 30       	cpi	r20, 0x02	; 2
     37c:	51 05       	cpc	r21, r1
     37e:	c0 f0       	brcs	.+48     	; 0x3b0 <mem_cpy+0x3a>
     380:	db 01       	movw	r26, r22
     382:	fc 01       	movw	r30, r24
     384:	9a 01       	movw	r18, r20
     386:	cd 91       	ld	r28, X+
     388:	dd 91       	ld	r29, X+
     38a:	c1 93       	st	Z+, r28
     38c:	d1 93       	st	Z+, r29
     38e:	22 50       	subi	r18, 0x02	; 2
     390:	31 09       	sbc	r19, r1
     392:	22 30       	cpi	r18, 0x02	; 2
     394:	31 05       	cpc	r19, r1
     396:	b8 f7       	brcc	.-18     	; 0x386 <mem_cpy+0x10>
     398:	9a 01       	movw	r18, r20
     39a:	22 50       	subi	r18, 0x02	; 2
     39c:	31 09       	sbc	r19, r1
     39e:	2e 7f       	andi	r18, 0xFE	; 254
     3a0:	2e 5f       	subi	r18, 0xFE	; 254
     3a2:	3f 4f       	sbci	r19, 0xFF	; 255
     3a4:	82 0f       	add	r24, r18
     3a6:	93 1f       	adc	r25, r19
     3a8:	62 0f       	add	r22, r18
     3aa:	73 1f       	adc	r23, r19
     3ac:	41 70       	andi	r20, 0x01	; 1
     3ae:	55 27       	eor	r21, r21
     3b0:	41 15       	cp	r20, r1
     3b2:	51 05       	cpc	r21, r1
     3b4:	49 f0       	breq	.+18     	; 0x3c8 <mem_cpy+0x52>
     3b6:	db 01       	movw	r26, r22
     3b8:	fc 01       	movw	r30, r24
     3ba:	48 0f       	add	r20, r24
     3bc:	59 1f       	adc	r21, r25
     3be:	9d 91       	ld	r25, X+
     3c0:	91 93       	st	Z+, r25
     3c2:	e4 17       	cp	r30, r20
     3c4:	f5 07       	cpc	r31, r21
     3c6:	d9 f7       	brne	.-10     	; 0x3be <mem_cpy+0x48>
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	08 95       	ret

000003ce <get_fileinfo>:
     3ce:	0f 93       	push	r16
     3d0:	1f 93       	push	r17
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	fb 01       	movw	r30, r22
     3d8:	39 96       	adiw	r30, 0x09	; 9
     3da:	dc 01       	movw	r26, r24
     3dc:	1e 96       	adiw	r26, 0x0e	; 14
     3de:	0d 91       	ld	r16, X+
     3e0:	1d 91       	ld	r17, X+
     3e2:	2d 91       	ld	r18, X+
     3e4:	3c 91       	ld	r19, X
     3e6:	51 97       	sbiw	r26, 0x11	; 17
     3e8:	01 2b       	or	r16, r17
     3ea:	02 2b       	or	r16, r18
     3ec:	03 2b       	or	r16, r19
     3ee:	09 f4       	brne	.+2      	; 0x3f2 <get_fileinfo+0x24>
     3f0:	51 c0       	rjmp	.+162    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     3f2:	52 96       	adiw	r26, 0x12	; 18
     3f4:	4d 91       	ld	r20, X+
     3f6:	5c 91       	ld	r21, X
     3f8:	53 97       	sbiw	r26, 0x13	; 19
     3fa:	ea 01       	movw	r28, r20
     3fc:	88 81       	ld	r24, Y
     3fe:	80 32       	cpi	r24, 0x20	; 32
     400:	b9 f0       	breq	.+46     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     402:	9a 01       	movw	r18, r20
     404:	2f 5f       	subi	r18, 0xFF	; 255
     406:	3f 4f       	sbci	r19, 0xFF	; 255
     408:	db 01       	movw	r26, r22
     40a:	51 96       	adiw	r26, 0x11	; 17
     40c:	95 ee       	ldi	r25, 0xE5	; 229
     40e:	05 c0       	rjmp	.+10     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     410:	e9 01       	movw	r28, r18
     412:	89 91       	ld	r24, Y+
     414:	9e 01       	movw	r18, r28
     416:	80 32       	cpi	r24, 0x20	; 32
     418:	69 f0       	breq	.+26     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     41a:	85 30       	cpi	r24, 0x05	; 5
     41c:	09 f4       	brne	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41e:	89 2f       	mov	r24, r25
     420:	31 96       	adiw	r30, 0x01	; 1
     422:	ef 01       	movw	r28, r30
     424:	21 97       	sbiw	r28, 0x01	; 1
     426:	88 83       	st	Y, r24
     428:	ea 17       	cp	r30, r26
     42a:	fb 07       	cpc	r31, r27
     42c:	89 f7       	brne	.-30     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     42e:	03 c0       	rjmp	.+6      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     430:	df 01       	movw	r26, r30
     432:	01 c0       	rjmp	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     434:	df 01       	movw	r26, r30
     436:	fa 01       	movw	r30, r20
     438:	80 85       	ldd	r24, Z+8	; 0x08
     43a:	80 32       	cpi	r24, 0x20	; 32
     43c:	69 f0       	breq	.+26     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     43e:	8e e2       	ldi	r24, 0x2E	; 46
     440:	8c 93       	st	X, r24
     442:	80 85       	ldd	r24, Z+8	; 0x08
     444:	80 32       	cpi	r24, 0x20	; 32
     446:	41 f5       	brne	.+80     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     448:	fd 01       	movw	r30, r26
     44a:	31 96       	adiw	r30, 0x01	; 1
     44c:	06 c0       	rjmp	.+12     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     44e:	fd 01       	movw	r30, r26
     450:	34 96       	adiw	r30, 0x04	; 4
     452:	13 96       	adiw	r26, 0x03	; 3
     454:	8c 93       	st	X, r24
     456:	01 c0       	rjmp	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     458:	fd 01       	movw	r30, r26
     45a:	da 01       	movw	r26, r20
     45c:	1b 96       	adiw	r26, 0x0b	; 11
     45e:	8c 91       	ld	r24, X
     460:	1b 97       	sbiw	r26, 0x0b	; 11
     462:	eb 01       	movw	r28, r22
     464:	88 87       	std	Y+8, r24	; 0x08
     466:	5c 96       	adiw	r26, 0x1c	; 28
     468:	8d 91       	ld	r24, X+
     46a:	9d 91       	ld	r25, X+
     46c:	0d 90       	ld	r0, X+
     46e:	bc 91       	ld	r27, X
     470:	a0 2d       	mov	r26, r0
     472:	88 83       	st	Y, r24
     474:	99 83       	std	Y+1, r25	; 0x01
     476:	aa 83       	std	Y+2, r26	; 0x02
     478:	bb 83       	std	Y+3, r27	; 0x03
     47a:	da 01       	movw	r26, r20
     47c:	58 96       	adiw	r26, 0x18	; 24
     47e:	8d 91       	ld	r24, X+
     480:	9c 91       	ld	r25, X
     482:	59 97       	sbiw	r26, 0x19	; 25
     484:	9d 83       	std	Y+5, r25	; 0x05
     486:	8c 83       	std	Y+4, r24	; 0x04
     488:	56 96       	adiw	r26, 0x16	; 22
     48a:	8d 91       	ld	r24, X+
     48c:	9c 91       	ld	r25, X
     48e:	57 97       	sbiw	r26, 0x17	; 23
     490:	9f 83       	std	Y+7, r25	; 0x07
     492:	8e 83       	std	Y+6, r24	; 0x06
     494:	10 82       	st	Z, r1
     496:	11 c0       	rjmp	.+34     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     498:	fd 01       	movw	r30, r26
     49a:	32 96       	adiw	r30, 0x02	; 2
     49c:	11 96       	adiw	r26, 0x01	; 1
     49e:	8c 93       	st	X, r24
     4a0:	11 97       	sbiw	r26, 0x01	; 1
     4a2:	ea 01       	movw	r28, r20
     4a4:	89 85       	ldd	r24, Y+9	; 0x09
     4a6:	80 32       	cpi	r24, 0x20	; 32
     4a8:	c1 f2       	breq	.-80     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     4aa:	31 96       	adiw	r30, 0x01	; 1
     4ac:	12 96       	adiw	r26, 0x02	; 2
     4ae:	8c 93       	st	X, r24
     4b0:	12 97       	sbiw	r26, 0x02	; 2
     4b2:	8a 85       	ldd	r24, Y+10	; 0x0a
     4b4:	80 32       	cpi	r24, 0x20	; 32
     4b6:	59 f6       	brne	.-106    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     4b8:	d0 cf       	rjmp	.-96     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	1f 91       	pop	r17
     4c0:	0f 91       	pop	r16
     4c2:	08 95       	ret

000004c4 <move_window>:
     4c4:	4f 92       	push	r4
     4c6:	5f 92       	push	r5
     4c8:	6f 92       	push	r6
     4ca:	7f 92       	push	r7
     4cc:	af 92       	push	r10
     4ce:	bf 92       	push	r11
     4d0:	cf 92       	push	r12
     4d2:	df 92       	push	r13
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	0f 93       	push	r16
     4da:	1f 93       	push	r17
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	fc 01       	movw	r30, r24
     4e2:	c6 a4       	ldd	r12, Z+46	; 0x2e
     4e4:	d7 a4       	ldd	r13, Z+47	; 0x2f
     4e6:	e0 a8       	ldd	r14, Z+48	; 0x30
     4e8:	f1 a8       	ldd	r15, Z+49	; 0x31
     4ea:	c4 16       	cp	r12, r20
     4ec:	d5 06       	cpc	r13, r21
     4ee:	e6 06       	cpc	r14, r22
     4f0:	f7 06       	cpc	r15, r23
     4f2:	09 f4       	brne	.+2      	; 0x4f6 <move_window+0x32>
     4f4:	4f c0       	rjmp	.+158    	; 0x594 <move_window+0xd0>
     4f6:	2a 01       	movw	r4, r20
     4f8:	3b 01       	movw	r6, r22
     4fa:	ec 01       	movw	r28, r24
     4fc:	84 81       	ldd	r24, Z+4	; 0x04
     4fe:	88 23       	and	r24, r24
     500:	a1 f1       	breq	.+104    	; 0x56a <move_window+0xa6>
     502:	5f 01       	movw	r10, r30
     504:	f2 e3       	ldi	r31, 0x32	; 50
     506:	af 0e       	add	r10, r31
     508:	b1 1c       	adc	r11, r1
     50a:	01 e0       	ldi	r16, 0x01	; 1
     50c:	a7 01       	movw	r20, r14
     50e:	96 01       	movw	r18, r12
     510:	b5 01       	movw	r22, r10
     512:	89 81       	ldd	r24, Y+1	; 0x01
     514:	0e 94 1b 2a 	call	0x5436	; 0x5436 <disk_write>
     518:	81 11       	cpse	r24, r1
     51a:	3e c0       	rjmp	.+124    	; 0x598 <move_window+0xd4>
     51c:	1c 82       	std	Y+4, r1	; 0x04
     51e:	4a a1       	ldd	r20, Y+34	; 0x22
     520:	5b a1       	ldd	r21, Y+35	; 0x23
     522:	6c a1       	ldd	r22, Y+36	; 0x24
     524:	7d a1       	ldd	r23, Y+37	; 0x25
     526:	8e 8d       	ldd	r24, Y+30	; 0x1e
     528:	9f 8d       	ldd	r25, Y+31	; 0x1f
     52a:	a8 a1       	ldd	r26, Y+32	; 0x20
     52c:	b9 a1       	ldd	r27, Y+33	; 0x21
     52e:	84 0f       	add	r24, r20
     530:	95 1f       	adc	r25, r21
     532:	a6 1f       	adc	r26, r22
     534:	b7 1f       	adc	r27, r23
     536:	c8 16       	cp	r12, r24
     538:	d9 06       	cpc	r13, r25
     53a:	ea 06       	cpc	r14, r26
     53c:	fb 06       	cpc	r15, r27
     53e:	a8 f4       	brcc	.+42     	; 0x56a <move_window+0xa6>
     540:	1b 81       	ldd	r17, Y+3	; 0x03
     542:	12 30       	cpi	r17, 0x02	; 2
     544:	90 f0       	brcs	.+36     	; 0x56a <move_window+0xa6>
     546:	8e 8d       	ldd	r24, Y+30	; 0x1e
     548:	9f 8d       	ldd	r25, Y+31	; 0x1f
     54a:	a8 a1       	ldd	r26, Y+32	; 0x20
     54c:	b9 a1       	ldd	r27, Y+33	; 0x21
     54e:	c8 0e       	add	r12, r24
     550:	d9 1e       	adc	r13, r25
     552:	ea 1e       	adc	r14, r26
     554:	fb 1e       	adc	r15, r27
     556:	01 e0       	ldi	r16, 0x01	; 1
     558:	a7 01       	movw	r20, r14
     55a:	96 01       	movw	r18, r12
     55c:	b5 01       	movw	r22, r10
     55e:	89 81       	ldd	r24, Y+1	; 0x01
     560:	0e 94 1b 2a 	call	0x5436	; 0x5436 <disk_write>
     564:	11 50       	subi	r17, 0x01	; 1
     566:	11 30       	cpi	r17, 0x01	; 1
     568:	71 f7       	brne	.-36     	; 0x546 <move_window+0x82>
     56a:	41 14       	cp	r4, r1
     56c:	51 04       	cpc	r5, r1
     56e:	61 04       	cpc	r6, r1
     570:	71 04       	cpc	r7, r1
     572:	a1 f0       	breq	.+40     	; 0x59c <move_window+0xd8>
     574:	01 e0       	ldi	r16, 0x01	; 1
     576:	a3 01       	movw	r20, r6
     578:	92 01       	movw	r18, r4
     57a:	be 01       	movw	r22, r28
     57c:	6e 5c       	subi	r22, 0xCE	; 206
     57e:	7f 4f       	sbci	r23, 0xFF	; 255
     580:	89 81       	ldd	r24, Y+1	; 0x01
     582:	0e 94 c8 29 	call	0x5390	; 0x5390 <disk_read>
     586:	81 11       	cpse	r24, r1
     588:	0b c0       	rjmp	.+22     	; 0x5a0 <move_window+0xdc>
     58a:	4e a6       	std	Y+46, r4	; 0x2e
     58c:	5f a6       	std	Y+47, r5	; 0x2f
     58e:	68 aa       	std	Y+48, r6	; 0x30
     590:	79 aa       	std	Y+49, r7	; 0x31
     592:	07 c0       	rjmp	.+14     	; 0x5a2 <move_window+0xde>
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	05 c0       	rjmp	.+10     	; 0x5a2 <move_window+0xde>
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	03 c0       	rjmp	.+6      	; 0x5a2 <move_window+0xde>
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	01 c0       	rjmp	.+2      	; 0x5a2 <move_window+0xde>
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	1f 91       	pop	r17
     5a8:	0f 91       	pop	r16
     5aa:	ff 90       	pop	r15
     5ac:	ef 90       	pop	r14
     5ae:	df 90       	pop	r13
     5b0:	cf 90       	pop	r12
     5b2:	bf 90       	pop	r11
     5b4:	af 90       	pop	r10
     5b6:	7f 90       	pop	r7
     5b8:	6f 90       	pop	r6
     5ba:	5f 90       	pop	r5
     5bc:	4f 90       	pop	r4
     5be:	08 95       	ret

000005c0 <check_fs>:
     5c0:	0f 93       	push	r16
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	ec 01       	movw	r28, r24
     5c8:	9a 01       	movw	r18, r20
     5ca:	ab 01       	movw	r20, r22
     5cc:	bc 01       	movw	r22, r24
     5ce:	6e 5c       	subi	r22, 0xCE	; 206
     5d0:	7f 4f       	sbci	r23, 0xFF	; 255
     5d2:	01 e0       	ldi	r16, 0x01	; 1
     5d4:	89 81       	ldd	r24, Y+1	; 0x01
     5d6:	0e 94 c8 29 	call	0x5390	; 0x5390 <disk_read>
     5da:	81 11       	cpse	r24, r1
     5dc:	23 c0       	rjmp	.+70     	; 0x624 <check_fs+0x64>
     5de:	fe 01       	movw	r30, r28
     5e0:	e0 5d       	subi	r30, 0xD0	; 208
     5e2:	fd 4f       	sbci	r31, 0xFD	; 253
     5e4:	80 81       	ld	r24, Z
     5e6:	91 81       	ldd	r25, Z+1	; 0x01
     5e8:	85 35       	cpi	r24, 0x55	; 85
     5ea:	9a 4a       	sbci	r25, 0xAA	; 170
     5ec:	e9 f4       	brne	.+58     	; 0x628 <check_fs+0x68>
     5ee:	e8 5c       	subi	r30, 0xC8	; 200
     5f0:	f1 40       	sbci	r31, 0x01	; 1
     5f2:	80 81       	ld	r24, Z
     5f4:	91 81       	ldd	r25, Z+1	; 0x01
     5f6:	a2 81       	ldd	r26, Z+2	; 0x02
     5f8:	b3 81       	ldd	r27, Z+3	; 0x03
     5fa:	bb 27       	eor	r27, r27
     5fc:	86 34       	cpi	r24, 0x46	; 70
     5fe:	91 44       	sbci	r25, 0x41	; 65
     600:	a4 45       	sbci	r26, 0x54	; 84
     602:	b1 05       	cpc	r27, r1
     604:	99 f0       	breq	.+38     	; 0x62c <check_fs+0x6c>
     606:	cc 57       	subi	r28, 0x7C	; 124
     608:	df 4f       	sbci	r29, 0xFF	; 255
     60a:	48 81       	ld	r20, Y
     60c:	59 81       	ldd	r21, Y+1	; 0x01
     60e:	6a 81       	ldd	r22, Y+2	; 0x02
     610:	7b 81       	ldd	r23, Y+3	; 0x03
     612:	77 27       	eor	r23, r23
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	46 34       	cpi	r20, 0x46	; 70
     618:	51 44       	sbci	r21, 0x41	; 65
     61a:	64 45       	sbci	r22, 0x54	; 84
     61c:	71 05       	cpc	r23, r1
     61e:	39 f4       	brne	.+14     	; 0x62e <check_fs+0x6e>
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	05 c0       	rjmp	.+10     	; 0x62e <check_fs+0x6e>
     624:	83 e0       	ldi	r24, 0x03	; 3
     626:	03 c0       	rjmp	.+6      	; 0x62e <check_fs+0x6e>
     628:	82 e0       	ldi	r24, 0x02	; 2
     62a:	01 c0       	rjmp	.+2      	; 0x62e <check_fs+0x6e>
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	0f 91       	pop	r16
     634:	08 95       	ret

00000636 <validate>:
     636:	00 97       	sbiw	r24, 0x00	; 0
     638:	81 f0       	breq	.+32     	; 0x65a <validate+0x24>
     63a:	fc 01       	movw	r30, r24
     63c:	20 81       	ld	r18, Z
     63e:	22 23       	and	r18, r18
     640:	71 f0       	breq	.+28     	; 0x65e <validate+0x28>
     642:	26 81       	ldd	r18, Z+6	; 0x06
     644:	37 81       	ldd	r19, Z+7	; 0x07
     646:	26 17       	cp	r18, r22
     648:	37 07       	cpc	r19, r23
     64a:	59 f4       	brne	.+22     	; 0x662 <validate+0x2c>
     64c:	81 81       	ldd	r24, Z+1	; 0x01
     64e:	0e 94 c1 29 	call	0x5382	; 0x5382 <disk_status>
     652:	80 fd       	sbrc	r24, 0
     654:	08 c0       	rjmp	.+16     	; 0x666 <validate+0x30>
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	08 95       	ret
     65a:	89 e0       	ldi	r24, 0x09	; 9
     65c:	08 95       	ret
     65e:	89 e0       	ldi	r24, 0x09	; 9
     660:	08 95       	ret
     662:	89 e0       	ldi	r24, 0x09	; 9
     664:	08 95       	ret
     666:	83 e0       	ldi	r24, 0x03	; 3
     668:	08 95       	ret

0000066a <chk_mounted>:
     66a:	2f 92       	push	r2
     66c:	3f 92       	push	r3
     66e:	4f 92       	push	r4
     670:	5f 92       	push	r5
     672:	6f 92       	push	r6
     674:	7f 92       	push	r7
     676:	8f 92       	push	r8
     678:	9f 92       	push	r9
     67a:	af 92       	push	r10
     67c:	bf 92       	push	r11
     67e:	cf 92       	push	r12
     680:	df 92       	push	r13
     682:	ef 92       	push	r14
     684:	ff 92       	push	r15
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	cd b7       	in	r28, 0x3d	; 61
     690:	de b7       	in	r29, 0x3e	; 62
     692:	2e 97       	sbiw	r28, 0x0e	; 14
     694:	0f b6       	in	r0, 0x3f	; 63
     696:	f8 94       	cli
     698:	de bf       	out	0x3e, r29	; 62
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	cd bf       	out	0x3d, r28	; 61
     69e:	dc 01       	movw	r26, r24
     6a0:	ed 91       	ld	r30, X+
     6a2:	fc 91       	ld	r31, X
     6a4:	11 97       	sbiw	r26, 0x01	; 1
     6a6:	20 81       	ld	r18, Z
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	20 53       	subi	r18, 0x30	; 48
     6ac:	31 09       	sbc	r19, r1
     6ae:	2a 30       	cpi	r18, 0x0A	; 10
     6b0:	31 05       	cpc	r19, r1
     6b2:	38 f4       	brcc	.+14     	; 0x6c2 <chk_mounted+0x58>
     6b4:	51 81       	ldd	r21, Z+1	; 0x01
     6b6:	5a 33       	cpi	r21, 0x3A	; 58
     6b8:	21 f4       	brne	.+8      	; 0x6c2 <chk_mounted+0x58>
     6ba:	32 96       	adiw	r30, 0x02	; 2
     6bc:	ed 93       	st	X+, r30
     6be:	fc 93       	st	X, r31
     6c0:	03 c0       	rjmp	.+6      	; 0x6c8 <chk_mounted+0x5e>
     6c2:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__data_end>
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	23 2b       	or	r18, r19
     6ca:	09 f0       	breq	.+2      	; 0x6ce <chk_mounted+0x64>
     6cc:	c0 c1       	rjmp	.+896    	; 0xa4e <__stack+0x1ef>
     6ce:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <FatFs>
     6d2:	f0 91 08 02 	lds	r31, 0x0208	; 0x800208 <FatFs+0x1>
     6d6:	fe 87       	std	Y+14, r31	; 0x0e
     6d8:	ed 87       	std	Y+13, r30	; 0x0d
     6da:	db 01       	movw	r26, r22
     6dc:	ed 93       	st	X+, r30
     6de:	fc 93       	st	X, r31
     6e0:	30 97       	sbiw	r30, 0x00	; 0
     6e2:	09 f4       	brne	.+2      	; 0x6e6 <chk_mounted+0x7c>
     6e4:	b6 c1       	rjmp	.+876    	; 0xa52 <__stack+0x1f3>
     6e6:	14 2f       	mov	r17, r20
     6e8:	80 81       	ld	r24, Z
     6ea:	88 23       	and	r24, r24
     6ec:	61 f0       	breq	.+24     	; 0x706 <chk_mounted+0x9c>
     6ee:	81 81       	ldd	r24, Z+1	; 0x01
     6f0:	0e 94 c1 29 	call	0x5382	; 0x5382 <disk_status>
     6f4:	80 fd       	sbrc	r24, 0
     6f6:	07 c0       	rjmp	.+14     	; 0x706 <chk_mounted+0x9c>
     6f8:	11 23       	and	r17, r17
     6fa:	09 f4       	brne	.+2      	; 0x6fe <chk_mounted+0x94>
     6fc:	ac c1       	rjmp	.+856    	; 0xa56 <__stack+0x1f7>
     6fe:	82 ff       	sbrs	r24, 2
     700:	ac c1       	rjmp	.+856    	; 0xa5a <__stack+0x1fb>
     702:	8a e0       	ldi	r24, 0x0A	; 10
     704:	7f c2       	rjmp	.+1278   	; 0xc04 <__stack+0x3a5>
     706:	ed 85       	ldd	r30, Y+13	; 0x0d
     708:	fe 85       	ldd	r31, Y+14	; 0x0e
     70a:	10 82       	st	Z, r1
     70c:	11 82       	std	Z+1, r1	; 0x01
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	0e 94 00 29 	call	0x5200	; 0x5200 <disk_initialize>
     714:	80 fd       	sbrc	r24, 0
     716:	a3 c1       	rjmp	.+838    	; 0xa5e <__stack+0x1ff>
     718:	11 23       	and	r17, r17
     71a:	11 f0       	breq	.+4      	; 0x720 <chk_mounted+0xb6>
     71c:	82 fd       	sbrc	r24, 2
     71e:	a1 c1       	rjmp	.+834    	; 0xa62 <__stack+0x203>
     720:	40 e0       	ldi	r20, 0x00	; 0
     722:	50 e0       	ldi	r21, 0x00	; 0
     724:	ba 01       	movw	r22, r20
     726:	8d 85       	ldd	r24, Y+13	; 0x0d
     728:	9e 85       	ldd	r25, Y+14	; 0x0e
     72a:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <check_fs>
     72e:	81 30       	cpi	r24, 0x01	; 1
     730:	b9 f4       	brne	.+46     	; 0x760 <chk_mounted+0xf6>
     732:	ed 85       	ldd	r30, Y+13	; 0x0d
     734:	fe 85       	ldd	r31, Y+14	; 0x0e
     736:	ec 50       	subi	r30, 0x0C	; 12
     738:	fe 4f       	sbci	r31, 0xFE	; 254
     73a:	80 81       	ld	r24, Z
     73c:	88 23       	and	r24, r24
     73e:	09 f4       	brne	.+2      	; 0x742 <chk_mounted+0xd8>
     740:	92 c1       	rjmp	.+804    	; 0xa66 <__stack+0x207>
     742:	ed 85       	ldd	r30, Y+13	; 0x0d
     744:	fe 85       	ldd	r31, Y+14	; 0x0e
     746:	e8 50       	subi	r30, 0x08	; 8
     748:	fe 4f       	sbci	r31, 0xFE	; 254
     74a:	c0 80       	ld	r12, Z
     74c:	d1 80       	ldd	r13, Z+1	; 0x01
     74e:	e2 80       	ldd	r14, Z+2	; 0x02
     750:	f3 80       	ldd	r15, Z+3	; 0x03
     752:	b7 01       	movw	r22, r14
     754:	a6 01       	movw	r20, r12
     756:	8d 85       	ldd	r24, Y+13	; 0x0d
     758:	9e 85       	ldd	r25, Y+14	; 0x0e
     75a:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <check_fs>
     75e:	03 c0       	rjmp	.+6      	; 0x766 <chk_mounted+0xfc>
     760:	c1 2c       	mov	r12, r1
     762:	d1 2c       	mov	r13, r1
     764:	76 01       	movw	r14, r12
     766:	83 30       	cpi	r24, 0x03	; 3
     768:	09 f4       	brne	.+2      	; 0x76c <chk_mounted+0x102>
     76a:	7f c1       	rjmp	.+766    	; 0xa6a <__stack+0x20b>
     76c:	81 11       	cpse	r24, r1
     76e:	7f c1       	rjmp	.+766    	; 0xa6e <__stack+0x20f>
     770:	ad 85       	ldd	r26, Y+13	; 0x0d
     772:	be 85       	ldd	r27, Y+14	; 0x0e
     774:	dd 96       	adiw	r26, 0x3d	; 61
     776:	8d 91       	ld	r24, X+
     778:	9c 91       	ld	r25, X
     77a:	de 97       	sbiw	r26, 0x3e	; 62
     77c:	81 15       	cp	r24, r1
     77e:	92 40       	sbci	r25, 0x02	; 2
     780:	09 f0       	breq	.+2      	; 0x784 <chk_mounted+0x11a>
     782:	77 c1       	rjmp	.+750    	; 0xa72 <__stack+0x213>
     784:	ed 85       	ldd	r30, Y+13	; 0x0d
     786:	fe 85       	ldd	r31, Y+14	; 0x0e
     788:	e8 5b       	subi	r30, 0xB8	; 184
     78a:	ff 4f       	sbci	r31, 0xFF	; 255
     78c:	40 80       	ld	r4, Z
     78e:	51 80       	ldd	r5, Z+1	; 0x01
     790:	61 2c       	mov	r6, r1
     792:	71 2c       	mov	r7, r1
     794:	41 14       	cp	r4, r1
     796:	51 04       	cpc	r5, r1
     798:	61 04       	cpc	r6, r1
     79a:	71 04       	cpc	r7, r1
     79c:	41 f4       	brne	.+16     	; 0x7ae <chk_mounted+0x144>
     79e:	ed 85       	ldd	r30, Y+13	; 0x0d
     7a0:	fe 85       	ldd	r31, Y+14	; 0x0e
     7a2:	ea 5a       	subi	r30, 0xAA	; 170
     7a4:	ff 4f       	sbci	r31, 0xFF	; 255
     7a6:	40 80       	ld	r4, Z
     7a8:	51 80       	ldd	r5, Z+1	; 0x01
     7aa:	62 80       	ldd	r6, Z+2	; 0x02
     7ac:	73 80       	ldd	r7, Z+3	; 0x03
     7ae:	ed 85       	ldd	r30, Y+13	; 0x0d
     7b0:	fe 85       	ldd	r31, Y+14	; 0x0e
     7b2:	46 8e       	std	Z+30, r4	; 0x1e
     7b4:	57 8e       	std	Z+31, r5	; 0x1f
     7b6:	60 a2       	std	Z+32, r6	; 0x20
     7b8:	71 a2       	std	Z+33, r7	; 0x21
     7ba:	ee 5b       	subi	r30, 0xBE	; 190
     7bc:	ff 4f       	sbci	r31, 0xFF	; 255
     7be:	a0 81       	ld	r26, Z
     7c0:	ed 85       	ldd	r30, Y+13	; 0x0d
     7c2:	fe 85       	ldd	r31, Y+14	; 0x0e
     7c4:	a3 83       	std	Z+3, r26	; 0x03
     7c6:	8f ef       	ldi	r24, 0xFF	; 255
     7c8:	8a 0f       	add	r24, r26
     7ca:	82 30       	cpi	r24, 0x02	; 2
     7cc:	08 f0       	brcs	.+2      	; 0x7d0 <chk_mounted+0x166>
     7ce:	53 c1       	rjmp	.+678    	; 0xa76 <__stack+0x217>
     7d0:	17 ad       	ldd	r17, Z+63	; 0x3f
     7d2:	12 83       	std	Z+2, r17	; 0x02
     7d4:	11 23       	and	r17, r17
     7d6:	09 f4       	brne	.+2      	; 0x7da <chk_mounted+0x170>
     7d8:	50 c1       	rjmp	.+672    	; 0xa7a <__stack+0x21b>
     7da:	81 2f       	mov	r24, r17
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	9c 01       	movw	r18, r24
     7e0:	21 50       	subi	r18, 0x01	; 1
     7e2:	31 09       	sbc	r19, r1
     7e4:	82 23       	and	r24, r18
     7e6:	93 23       	and	r25, r19
     7e8:	89 2b       	or	r24, r25
     7ea:	09 f0       	breq	.+2      	; 0x7ee <chk_mounted+0x184>
     7ec:	48 c1       	rjmp	.+656    	; 0xa7e <__stack+0x21f>
     7ee:	ed 5b       	subi	r30, 0xBD	; 189
     7f0:	ff 4f       	sbci	r31, 0xFF	; 255
     7f2:	20 80       	ld	r2, Z
     7f4:	31 80       	ldd	r3, Z+1	; 0x01
     7f6:	ed 85       	ldd	r30, Y+13	; 0x0d
     7f8:	fe 85       	ldd	r31, Y+14	; 0x0e
     7fa:	31 86       	std	Z+9, r3	; 0x09
     7fc:	20 86       	std	Z+8, r2	; 0x08
     7fe:	c1 01       	movw	r24, r2
     800:	8f 70       	andi	r24, 0x0F	; 15
     802:	99 27       	eor	r25, r25
     804:	89 2b       	or	r24, r25
     806:	09 f0       	breq	.+2      	; 0x80a <chk_mounted+0x1a0>
     808:	3c c1       	rjmp	.+632    	; 0xa82 <__stack+0x223>
     80a:	eb 5b       	subi	r30, 0xBB	; 187
     80c:	ff 4f       	sbci	r31, 0xFF	; 255
     80e:	80 80       	ld	r8, Z
     810:	91 80       	ldd	r9, Z+1	; 0x01
     812:	a1 2c       	mov	r10, r1
     814:	b1 2c       	mov	r11, r1
     816:	81 14       	cp	r8, r1
     818:	91 04       	cpc	r9, r1
     81a:	a1 04       	cpc	r10, r1
     81c:	b1 04       	cpc	r11, r1
     81e:	41 f4       	brne	.+16     	; 0x830 <chk_mounted+0x1c6>
     820:	ed 85       	ldd	r30, Y+13	; 0x0d
     822:	fe 85       	ldd	r31, Y+14	; 0x0e
     824:	ee 5a       	subi	r30, 0xAE	; 174
     826:	ff 4f       	sbci	r31, 0xFF	; 255
     828:	80 80       	ld	r8, Z
     82a:	91 80       	ldd	r9, Z+1	; 0x01
     82c:	a2 80       	ldd	r10, Z+2	; 0x02
     82e:	b3 80       	ldd	r11, Z+3	; 0x03
     830:	ed 85       	ldd	r30, Y+13	; 0x0d
     832:	fe 85       	ldd	r31, Y+14	; 0x0e
     834:	e0 5c       	subi	r30, 0xC0	; 192
     836:	ff 4f       	sbci	r31, 0xFF	; 255
     838:	01 90       	ld	r0, Z+
     83a:	f0 81       	ld	r31, Z
     83c:	e0 2d       	mov	r30, r0
     83e:	30 97       	sbiw	r30, 0x00	; 0
     840:	09 f4       	brne	.+2      	; 0x844 <chk_mounted+0x1da>
     842:	21 c1       	rjmp	.+578    	; 0xa86 <__stack+0x227>
     844:	b0 e0       	ldi	r27, 0x00	; 0
     846:	a3 01       	movw	r20, r6
     848:	92 01       	movw	r18, r4
     84a:	0e 94 64 33 	call	0x66c8	; 0x66c8 <__muluhisi3>
     84e:	69 87       	std	Y+9, r22	; 0x09
     850:	7a 87       	std	Y+10, r23	; 0x0a
     852:	8b 87       	std	Y+11, r24	; 0x0b
     854:	9c 87       	std	Y+12, r25	; 0x0c
     856:	9f 01       	movw	r18, r30
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	2d 83       	std	Y+5, r18	; 0x05
     85e:	3e 83       	std	Y+6, r19	; 0x06
     860:	4f 83       	std	Y+7, r20	; 0x07
     862:	58 87       	std	Y+8, r21	; 0x08
     864:	c1 01       	movw	r24, r2
     866:	92 95       	swap	r25
     868:	82 95       	swap	r24
     86a:	8f 70       	andi	r24, 0x0F	; 15
     86c:	89 27       	eor	r24, r25
     86e:	9f 70       	andi	r25, 0x0F	; 15
     870:	89 27       	eor	r24, r25
     872:	28 0f       	add	r18, r24
     874:	39 1f       	adc	r19, r25
     876:	41 1d       	adc	r20, r1
     878:	51 1d       	adc	r21, r1
     87a:	da 01       	movw	r26, r20
     87c:	c9 01       	movw	r24, r18
     87e:	29 85       	ldd	r18, Y+9	; 0x09
     880:	3a 85       	ldd	r19, Y+10	; 0x0a
     882:	4b 85       	ldd	r20, Y+11	; 0x0b
     884:	5c 85       	ldd	r21, Y+12	; 0x0c
     886:	28 0f       	add	r18, r24
     888:	39 1f       	adc	r19, r25
     88a:	4a 1f       	adc	r20, r26
     88c:	5b 1f       	adc	r21, r27
     88e:	29 83       	std	Y+1, r18	; 0x01
     890:	3a 83       	std	Y+2, r19	; 0x02
     892:	4b 83       	std	Y+3, r20	; 0x03
     894:	5c 83       	std	Y+4, r21	; 0x04
     896:	82 16       	cp	r8, r18
     898:	93 06       	cpc	r9, r19
     89a:	a4 06       	cpc	r10, r20
     89c:	b5 06       	cpc	r11, r21
     89e:	08 f4       	brcc	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	f4 c0       	rjmp	.+488    	; 0xa8a <__stack+0x22b>
     8a2:	c5 01       	movw	r24, r10
     8a4:	b4 01       	movw	r22, r8
     8a6:	62 1b       	sub	r22, r18
     8a8:	73 0b       	sbc	r23, r19
     8aa:	84 0b       	sbc	r24, r20
     8ac:	95 0b       	sbc	r25, r21
     8ae:	21 2f       	mov	r18, r17
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	40 e0       	ldi	r20, 0x00	; 0
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	0e 94 0e 33 	call	0x661c	; 0x661c <__udivmodsi4>
     8ba:	da 01       	movw	r26, r20
     8bc:	c9 01       	movw	r24, r18
     8be:	21 15       	cp	r18, r1
     8c0:	31 05       	cpc	r19, r1
     8c2:	41 05       	cpc	r20, r1
     8c4:	51 05       	cpc	r21, r1
     8c6:	09 f4       	brne	.+2      	; 0x8ca <__stack+0x6b>
     8c8:	e2 c0       	rjmp	.+452    	; 0xa8e <__stack+0x22f>
     8ca:	26 3f       	cpi	r18, 0xF6	; 246
     8cc:	6f e0       	ldi	r22, 0x0F	; 15
     8ce:	36 07       	cpc	r19, r22
     8d0:	41 05       	cpc	r20, r1
     8d2:	51 05       	cpc	r21, r1
     8d4:	08 f0       	brcs	.+2      	; 0x8d8 <__stack+0x79>
     8d6:	8e c1       	rjmp	.+796    	; 0xbf4 <__stack+0x395>
     8d8:	f1 e0       	ldi	r31, 0x01	; 1
     8da:	8d c1       	rjmp	.+794    	; 0xbf6 <__stack+0x397>
     8dc:	ed 85       	ldd	r30, Y+13	; 0x0d
     8de:	fe 85       	ldd	r31, Y+14	; 0x0e
     8e0:	e2 5a       	subi	r30, 0xA2	; 162
     8e2:	ff 4f       	sbci	r31, 0xFF	; 255
     8e4:	80 81       	ld	r24, Z
     8e6:	91 81       	ldd	r25, Z+1	; 0x01
     8e8:	a2 81       	ldd	r26, Z+2	; 0x02
     8ea:	b3 81       	ldd	r27, Z+3	; 0x03
     8ec:	ed 85       	ldd	r30, Y+13	; 0x0d
     8ee:	fe 85       	ldd	r31, Y+14	; 0x0e
     8f0:	86 a3       	std	Z+38, r24	; 0x26
     8f2:	97 a3       	std	Z+39, r25	; 0x27
     8f4:	a0 a7       	std	Z+40, r26	; 0x28
     8f6:	b1 a7       	std	Z+41, r27	; 0x29
     8f8:	88 0c       	add	r8, r8
     8fa:	99 1c       	adc	r9, r9
     8fc:	aa 1c       	adc	r10, r10
     8fe:	bb 1c       	adc	r11, r11
     900:	88 0c       	add	r8, r8
     902:	99 1c       	adc	r9, r9
     904:	aa 1c       	adc	r10, r10
     906:	bb 1c       	adc	r11, r11
     908:	ff ef       	ldi	r31, 0xFF	; 255
     90a:	8f 0e       	add	r8, r31
     90c:	f1 e0       	ldi	r31, 0x01	; 1
     90e:	9f 1e       	adc	r9, r31
     910:	a1 1c       	adc	r10, r1
     912:	b1 1c       	adc	r11, r1
     914:	07 2e       	mov	r0, r23
     916:	79 e0       	ldi	r23, 0x09	; 9
     918:	b6 94       	lsr	r11
     91a:	a7 94       	ror	r10
     91c:	97 94       	ror	r9
     91e:	87 94       	ror	r8
     920:	7a 95       	dec	r23
     922:	d1 f7       	brne	.-12     	; 0x918 <__stack+0xb9>
     924:	70 2d       	mov	r23, r0
     926:	48 14       	cp	r4, r8
     928:	59 04       	cpc	r5, r9
     92a:	6a 04       	cpc	r6, r10
     92c:	7b 04       	cpc	r7, r11
     92e:	08 f4       	brcc	.+2      	; 0x932 <__stack+0xd3>
     930:	b0 c0       	rjmp	.+352    	; 0xa92 <__stack+0x233>
     932:	07 c1       	rjmp	.+526    	; 0xb42 <__stack+0x2e3>
     934:	29 85       	ldd	r18, Y+9	; 0x09
     936:	3a 85       	ldd	r19, Y+10	; 0x0a
     938:	4b 85       	ldd	r20, Y+11	; 0x0b
     93a:	5c 85       	ldd	r21, Y+12	; 0x0c
     93c:	c2 0e       	add	r12, r18
     93e:	d3 1e       	adc	r13, r19
     940:	e4 1e       	adc	r14, r20
     942:	f5 1e       	adc	r15, r21
     944:	ad 85       	ldd	r26, Y+13	; 0x0d
     946:	be 85       	ldd	r27, Y+14	; 0x0e
     948:	96 96       	adiw	r26, 0x26	; 38
     94a:	cd 92       	st	X+, r12
     94c:	dd 92       	st	X+, r13
     94e:	ed 92       	st	X+, r14
     950:	fc 92       	st	X, r15
     952:	99 97       	sbiw	r26, 0x29	; 41
     954:	f2 30       	cpi	r31, 0x02	; 2
     956:	29 f4       	brne	.+10     	; 0x962 <__stack+0x103>
     958:	88 0c       	add	r8, r8
     95a:	99 1c       	adc	r9, r9
     95c:	aa 1c       	adc	r10, r10
     95e:	bb 1c       	adc	r11, r11
     960:	da c0       	rjmp	.+436    	; 0xb16 <__stack+0x2b7>
     962:	a3 e0       	ldi	r26, 0x03	; 3
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	a5 01       	movw	r20, r10
     968:	94 01       	movw	r18, r8
     96a:	0e 94 64 33 	call	0x66c8	; 0x66c8 <__muluhisi3>
     96e:	dc 01       	movw	r26, r24
     970:	cb 01       	movw	r24, r22
     972:	b6 95       	lsr	r27
     974:	a7 95       	ror	r26
     976:	97 95       	ror	r25
     978:	87 95       	ror	r24
     97a:	e1 e0       	ldi	r30, 0x01	; 1
     97c:	8e 22       	and	r8, r30
     97e:	99 24       	eor	r9, r9
     980:	aa 24       	eor	r10, r10
     982:	bb 24       	eor	r11, r11
     984:	88 0e       	add	r8, r24
     986:	99 1e       	adc	r9, r25
     988:	aa 1e       	adc	r10, r26
     98a:	bb 1e       	adc	r11, r27
     98c:	c4 c0       	rjmp	.+392    	; 0xb16 <__stack+0x2b7>
     98e:	ed 85       	ldd	r30, Y+13	; 0x0d
     990:	fe 85       	ldd	r31, Y+14	; 0x0e
     992:	e0 5d       	subi	r30, 0xD0	; 208
     994:	fd 4f       	sbci	r31, 0xFD	; 253
     996:	80 81       	ld	r24, Z
     998:	91 81       	ldd	r25, Z+1	; 0x01
     99a:	85 35       	cpi	r24, 0x55	; 85
     99c:	9a 4a       	sbci	r25, 0xAA	; 170
     99e:	a1 f5       	brne	.+104    	; 0xa08 <__stack+0x1a9>
     9a0:	ed 85       	ldd	r30, Y+13	; 0x0d
     9a2:	fe 85       	ldd	r31, Y+14	; 0x0e
     9a4:	82 a9       	ldd	r24, Z+50	; 0x32
     9a6:	93 a9       	ldd	r25, Z+51	; 0x33
     9a8:	a4 a9       	ldd	r26, Z+52	; 0x34
     9aa:	b5 a9       	ldd	r27, Z+53	; 0x35
     9ac:	82 35       	cpi	r24, 0x52	; 82
     9ae:	92 45       	sbci	r25, 0x52	; 82
     9b0:	a1 46       	sbci	r26, 0x61	; 97
     9b2:	b1 44       	sbci	r27, 0x41	; 65
     9b4:	59 f5       	brne	.+86     	; 0xa0c <__stack+0x1ad>
     9b6:	ed 85       	ldd	r30, Y+13	; 0x0d
     9b8:	fe 85       	ldd	r31, Y+14	; 0x0e
     9ba:	ea 5e       	subi	r30, 0xEA	; 234
     9bc:	fd 4f       	sbci	r31, 0xFD	; 253
     9be:	80 81       	ld	r24, Z
     9c0:	91 81       	ldd	r25, Z+1	; 0x01
     9c2:	a2 81       	ldd	r26, Z+2	; 0x02
     9c4:	b3 81       	ldd	r27, Z+3	; 0x03
     9c6:	82 37       	cpi	r24, 0x72	; 114
     9c8:	92 47       	sbci	r25, 0x72	; 114
     9ca:	a1 44       	sbci	r26, 0x41	; 65
     9cc:	b1 46       	sbci	r27, 0x61	; 97
     9ce:	01 f5       	brne	.+64     	; 0xa10 <__stack+0x1b1>
     9d0:	ed 85       	ldd	r30, Y+13	; 0x0d
     9d2:	fe 85       	ldd	r31, Y+14	; 0x0e
     9d4:	e2 5e       	subi	r30, 0xE2	; 226
     9d6:	fd 4f       	sbci	r31, 0xFD	; 253
     9d8:	80 81       	ld	r24, Z
     9da:	91 81       	ldd	r25, Z+1	; 0x01
     9dc:	a2 81       	ldd	r26, Z+2	; 0x02
     9de:	b3 81       	ldd	r27, Z+3	; 0x03
     9e0:	ed 85       	ldd	r30, Y+13	; 0x0d
     9e2:	fe 85       	ldd	r31, Y+14	; 0x0e
     9e4:	82 87       	std	Z+10, r24	; 0x0a
     9e6:	93 87       	std	Z+11, r25	; 0x0b
     9e8:	a4 87       	std	Z+12, r26	; 0x0c
     9ea:	b5 87       	std	Z+13, r27	; 0x0d
     9ec:	e6 5e       	subi	r30, 0xE6	; 230
     9ee:	fd 4f       	sbci	r31, 0xFD	; 253
     9f0:	80 81       	ld	r24, Z
     9f2:	91 81       	ldd	r25, Z+1	; 0x01
     9f4:	a2 81       	ldd	r26, Z+2	; 0x02
     9f6:	b3 81       	ldd	r27, Z+3	; 0x03
     9f8:	ed 85       	ldd	r30, Y+13	; 0x0d
     9fa:	fe 85       	ldd	r31, Y+14	; 0x0e
     9fc:	86 87       	std	Z+14, r24	; 0x0e
     9fe:	97 87       	std	Z+15, r25	; 0x0f
     a00:	a0 8b       	std	Z+16, r26	; 0x10
     a02:	b1 8b       	std	Z+17, r27	; 0x11
     a04:	f3 e0       	ldi	r31, 0x03	; 3
     a06:	05 c0       	rjmp	.+10     	; 0xa12 <__stack+0x1b3>
     a08:	f3 e0       	ldi	r31, 0x03	; 3
     a0a:	03 c0       	rjmp	.+6      	; 0xa12 <__stack+0x1b3>
     a0c:	f3 e0       	ldi	r31, 0x03	; 3
     a0e:	01 c0       	rjmp	.+2      	; 0xa12 <__stack+0x1b3>
     a10:	f3 e0       	ldi	r31, 0x03	; 3
     a12:	ad 85       	ldd	r26, Y+13	; 0x0d
     a14:	be 85       	ldd	r27, Y+14	; 0x0e
     a16:	fc 93       	st	X, r31
     a18:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <Fsid>
     a1c:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <Fsid+0x1>
     a20:	01 96       	adiw	r24, 0x01	; 1
     a22:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <Fsid+0x1>
     a26:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <Fsid>
     a2a:	17 96       	adiw	r26, 0x07	; 7
     a2c:	9c 93       	st	X, r25
     a2e:	8e 93       	st	-X, r24
     a30:	16 97       	sbiw	r26, 0x06	; 6
     a32:	fd 01       	movw	r30, r26
     a34:	16 a6       	std	Z+46, r1	; 0x2e
     a36:	17 a6       	std	Z+47, r1	; 0x2f
     a38:	10 aa       	std	Z+48, r1	; 0x30
     a3a:	11 aa       	std	Z+49, r1	; 0x31
     a3c:	14 82       	std	Z+4, r1	; 0x04
     a3e:	56 96       	adiw	r26, 0x16	; 22
     a40:	1d 92       	st	X+, r1
     a42:	1d 92       	st	X+, r1
     a44:	1d 92       	st	X+, r1
     a46:	1c 92       	st	X, r1
     a48:	59 97       	sbiw	r26, 0x19	; 25
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	db c0       	rjmp	.+438    	; 0xc04 <__stack+0x3a5>
     a4e:	8b e0       	ldi	r24, 0x0B	; 11
     a50:	d9 c0       	rjmp	.+434    	; 0xc04 <__stack+0x3a5>
     a52:	8c e0       	ldi	r24, 0x0C	; 12
     a54:	d7 c0       	rjmp	.+430    	; 0xc04 <__stack+0x3a5>
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	d5 c0       	rjmp	.+426    	; 0xc04 <__stack+0x3a5>
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	d3 c0       	rjmp	.+422    	; 0xc04 <__stack+0x3a5>
     a5e:	83 e0       	ldi	r24, 0x03	; 3
     a60:	d1 c0       	rjmp	.+418    	; 0xc04 <__stack+0x3a5>
     a62:	8a e0       	ldi	r24, 0x0A	; 10
     a64:	cf c0       	rjmp	.+414    	; 0xc04 <__stack+0x3a5>
     a66:	8d e0       	ldi	r24, 0x0D	; 13
     a68:	cd c0       	rjmp	.+410    	; 0xc04 <__stack+0x3a5>
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	cb c0       	rjmp	.+406    	; 0xc04 <__stack+0x3a5>
     a6e:	8d e0       	ldi	r24, 0x0D	; 13
     a70:	c9 c0       	rjmp	.+402    	; 0xc04 <__stack+0x3a5>
     a72:	8d e0       	ldi	r24, 0x0D	; 13
     a74:	c7 c0       	rjmp	.+398    	; 0xc04 <__stack+0x3a5>
     a76:	8d e0       	ldi	r24, 0x0D	; 13
     a78:	c5 c0       	rjmp	.+394    	; 0xc04 <__stack+0x3a5>
     a7a:	8d e0       	ldi	r24, 0x0D	; 13
     a7c:	c3 c0       	rjmp	.+390    	; 0xc04 <__stack+0x3a5>
     a7e:	8d e0       	ldi	r24, 0x0D	; 13
     a80:	c1 c0       	rjmp	.+386    	; 0xc04 <__stack+0x3a5>
     a82:	8d e0       	ldi	r24, 0x0D	; 13
     a84:	bf c0       	rjmp	.+382    	; 0xc04 <__stack+0x3a5>
     a86:	8d e0       	ldi	r24, 0x0D	; 13
     a88:	bd c0       	rjmp	.+378    	; 0xc04 <__stack+0x3a5>
     a8a:	8d e0       	ldi	r24, 0x0D	; 13
     a8c:	bb c0       	rjmp	.+374    	; 0xc04 <__stack+0x3a5>
     a8e:	8d e0       	ldi	r24, 0x0D	; 13
     a90:	b9 c0       	rjmp	.+370    	; 0xc04 <__stack+0x3a5>
     a92:	8d e0       	ldi	r24, 0x0D	; 13
     a94:	b7 c0       	rjmp	.+366    	; 0xc04 <__stack+0x3a5>
     a96:	8d e0       	ldi	r24, 0x0D	; 13
     a98:	b5 c0       	rjmp	.+362    	; 0xc04 <__stack+0x3a5>
     a9a:	8d e0       	ldi	r24, 0x0D	; 13
     a9c:	b3 c0       	rjmp	.+358    	; 0xc04 <__stack+0x3a5>
     a9e:	8d e0       	ldi	r24, 0x0D	; 13
     aa0:	b1 c0       	rjmp	.+354    	; 0xc04 <__stack+0x3a5>
     aa2:	49 01       	movw	r8, r18
     aa4:	5a 01       	movw	r10, r20
     aa6:	b2 e0       	ldi	r27, 0x02	; 2
     aa8:	8b 0e       	add	r8, r27
     aaa:	91 1c       	adc	r9, r1
     aac:	a1 1c       	adc	r10, r1
     aae:	b1 1c       	adc	r11, r1
     ab0:	ed 85       	ldd	r30, Y+13	; 0x0d
     ab2:	fe 85       	ldd	r31, Y+14	; 0x0e
     ab4:	82 8e       	std	Z+26, r8	; 0x1a
     ab6:	93 8e       	std	Z+27, r9	; 0x1b
     ab8:	a4 8e       	std	Z+28, r10	; 0x1c
     aba:	b5 8e       	std	Z+29, r11	; 0x1d
     abc:	89 81       	ldd	r24, Y+1	; 0x01
     abe:	9a 81       	ldd	r25, Y+2	; 0x02
     ac0:	ab 81       	ldd	r26, Y+3	; 0x03
     ac2:	bc 81       	ldd	r27, Y+4	; 0x04
     ac4:	8c 0d       	add	r24, r12
     ac6:	9d 1d       	adc	r25, r13
     ac8:	ae 1d       	adc	r26, r14
     aca:	bf 1d       	adc	r27, r15
     acc:	82 a7       	std	Z+42, r24	; 0x2a
     ace:	93 a7       	std	Z+43, r25	; 0x2b
     ad0:	a4 a7       	std	Z+44, r26	; 0x2c
     ad2:	b5 a7       	std	Z+45, r27	; 0x2d
     ad4:	8d 81       	ldd	r24, Y+5	; 0x05
     ad6:	9e 81       	ldd	r25, Y+6	; 0x06
     ad8:	af 81       	ldd	r26, Y+7	; 0x07
     ada:	b8 85       	ldd	r27, Y+8	; 0x08
     adc:	8c 0d       	add	r24, r12
     ade:	9d 1d       	adc	r25, r13
     ae0:	ae 1d       	adc	r26, r14
     ae2:	bf 1d       	adc	r27, r15
     ae4:	82 a3       	std	Z+34, r24	; 0x22
     ae6:	93 a3       	std	Z+35, r25	; 0x23
     ae8:	a4 a3       	std	Z+36, r26	; 0x24
     aea:	b5 a3       	std	Z+37, r27	; 0x25
     aec:	23 28       	or	r2, r3
     aee:	99 f6       	brne	.-90     	; 0xa96 <__stack+0x237>
     af0:	f5 ce       	rjmp	.-534    	; 0x8dc <__stack+0x7d>
     af2:	4f ef       	ldi	r20, 0xFF	; 255
     af4:	5f ef       	ldi	r21, 0xFF	; 255
     af6:	ba 01       	movw	r22, r20
     af8:	ad 85       	ldd	r26, Y+13	; 0x0d
     afa:	be 85       	ldd	r27, Y+14	; 0x0e
     afc:	1e 96       	adiw	r26, 0x0e	; 14
     afe:	4d 93       	st	X+, r20
     b00:	5d 93       	st	X+, r21
     b02:	6d 93       	st	X+, r22
     b04:	7c 93       	st	X, r23
     b06:	51 97       	sbiw	r26, 0x11	; 17
     b08:	1a 96       	adiw	r26, 0x0a	; 10
     b0a:	1d 92       	st	X+, r1
     b0c:	1d 92       	st	X+, r1
     b0e:	1d 92       	st	X+, r1
     b10:	1c 92       	st	X, r1
     b12:	1d 97       	sbiw	r26, 0x0d	; 13
     b14:	7e cf       	rjmp	.-260    	; 0xa12 <__stack+0x1b3>
     b16:	bf ef       	ldi	r27, 0xFF	; 255
     b18:	8b 0e       	add	r8, r27
     b1a:	b1 e0       	ldi	r27, 0x01	; 1
     b1c:	9b 1e       	adc	r9, r27
     b1e:	a1 1c       	adc	r10, r1
     b20:	b1 1c       	adc	r11, r1
     b22:	07 2e       	mov	r0, r23
     b24:	79 e0       	ldi	r23, 0x09	; 9
     b26:	b6 94       	lsr	r11
     b28:	a7 94       	ror	r10
     b2a:	97 94       	ror	r9
     b2c:	87 94       	ror	r8
     b2e:	7a 95       	dec	r23
     b30:	d1 f7       	brne	.-12     	; 0xb26 <__stack+0x2c7>
     b32:	70 2d       	mov	r23, r0
     b34:	48 14       	cp	r4, r8
     b36:	59 04       	cpc	r5, r9
     b38:	6a 04       	cpc	r6, r10
     b3a:	7b 04       	cpc	r7, r11
     b3c:	08 f4       	brcc	.+2      	; 0xb40 <__stack+0x2e1>
     b3e:	ad cf       	rjmp	.-166    	; 0xa9a <__stack+0x23b>
     b40:	d8 cf       	rjmp	.-80     	; 0xaf2 <__stack+0x293>
     b42:	8f ef       	ldi	r24, 0xFF	; 255
     b44:	9f ef       	ldi	r25, 0xFF	; 255
     b46:	dc 01       	movw	r26, r24
     b48:	ed 85       	ldd	r30, Y+13	; 0x0d
     b4a:	fe 85       	ldd	r31, Y+14	; 0x0e
     b4c:	86 87       	std	Z+14, r24	; 0x0e
     b4e:	97 87       	std	Z+15, r25	; 0x0f
     b50:	a0 8b       	std	Z+16, r26	; 0x10
     b52:	b1 8b       	std	Z+17, r27	; 0x11
     b54:	df 01       	movw	r26, r30
     b56:	12 86       	std	Z+10, r1	; 0x0a
     b58:	13 86       	std	Z+11, r1	; 0x0b
     b5a:	14 86       	std	Z+12, r1	; 0x0c
     b5c:	15 86       	std	Z+13, r1	; 0x0d
     b5e:	15 82       	std	Z+5, r1	; 0x05
     b60:	ee 59       	subi	r30, 0x9E	; 158
     b62:	ff 4f       	sbci	r31, 0xFF	; 255
     b64:	80 81       	ld	r24, Z
     b66:	91 81       	ldd	r25, Z+1	; 0x01
     b68:	a7 01       	movw	r20, r14
     b6a:	96 01       	movw	r18, r12
     b6c:	28 0f       	add	r18, r24
     b6e:	39 1f       	adc	r19, r25
     b70:	41 1d       	adc	r20, r1
     b72:	51 1d       	adc	r21, r1
     b74:	fd 01       	movw	r30, r26
     b76:	22 8b       	std	Z+18, r18	; 0x12
     b78:	33 8b       	std	Z+19, r19	; 0x13
     b7a:	44 8b       	std	Z+20, r20	; 0x14
     b7c:	55 8b       	std	Z+21, r21	; 0x15
     b7e:	01 e0       	ldi	r16, 0x01	; 1
     b80:	bd 01       	movw	r22, r26
     b82:	6e 5c       	subi	r22, 0xCE	; 206
     b84:	7f 4f       	sbci	r23, 0xFF	; 255
     b86:	81 81       	ldd	r24, Z+1	; 0x01
     b88:	0e 94 c8 29 	call	0x5390	; 0x5390 <disk_read>
     b8c:	88 23       	and	r24, r24
     b8e:	09 f4       	brne	.+2      	; 0xb92 <__stack+0x333>
     b90:	fe ce       	rjmp	.-516    	; 0x98e <__stack+0x12f>
     b92:	f3 e0       	ldi	r31, 0x03	; 3
     b94:	3e cf       	rjmp	.-388    	; 0xa12 <__stack+0x1b3>
     b96:	49 01       	movw	r8, r18
     b98:	5a 01       	movw	r10, r20
     b9a:	62 e0       	ldi	r22, 0x02	; 2
     b9c:	86 0e       	add	r8, r22
     b9e:	91 1c       	adc	r9, r1
     ba0:	a1 1c       	adc	r10, r1
     ba2:	b1 1c       	adc	r11, r1
     ba4:	ad 85       	ldd	r26, Y+13	; 0x0d
     ba6:	be 85       	ldd	r27, Y+14	; 0x0e
     ba8:	5a 96       	adiw	r26, 0x1a	; 26
     baa:	8d 92       	st	X+, r8
     bac:	9d 92       	st	X+, r9
     bae:	ad 92       	st	X+, r10
     bb0:	bc 92       	st	X, r11
     bb2:	5d 97       	sbiw	r26, 0x1d	; 29
     bb4:	49 81       	ldd	r20, Y+1	; 0x01
     bb6:	5a 81       	ldd	r21, Y+2	; 0x02
     bb8:	6b 81       	ldd	r22, Y+3	; 0x03
     bba:	7c 81       	ldd	r23, Y+4	; 0x04
     bbc:	4c 0d       	add	r20, r12
     bbe:	5d 1d       	adc	r21, r13
     bc0:	6e 1d       	adc	r22, r14
     bc2:	7f 1d       	adc	r23, r15
     bc4:	9a 96       	adiw	r26, 0x2a	; 42
     bc6:	4d 93       	st	X+, r20
     bc8:	5d 93       	st	X+, r21
     bca:	6d 93       	st	X+, r22
     bcc:	7c 93       	st	X, r23
     bce:	9d 97       	sbiw	r26, 0x2d	; 45
     bd0:	2d 81       	ldd	r18, Y+5	; 0x05
     bd2:	3e 81       	ldd	r19, Y+6	; 0x06
     bd4:	4f 81       	ldd	r20, Y+7	; 0x07
     bd6:	58 85       	ldd	r21, Y+8	; 0x08
     bd8:	c2 0e       	add	r12, r18
     bda:	d3 1e       	adc	r13, r19
     bdc:	e4 1e       	adc	r14, r20
     bde:	f5 1e       	adc	r15, r21
     be0:	92 96       	adiw	r26, 0x22	; 34
     be2:	cd 92       	st	X+, r12
     be4:	dd 92       	st	X+, r13
     be6:	ed 92       	st	X+, r14
     be8:	fc 92       	st	X, r15
     bea:	95 97       	sbiw	r26, 0x25	; 37
     bec:	23 28       	or	r2, r3
     bee:	09 f4       	brne	.+2      	; 0xbf2 <__stack+0x393>
     bf0:	56 cf       	rjmp	.-340    	; 0xa9e <__stack+0x23f>
     bf2:	a0 ce       	rjmp	.-704    	; 0x934 <__stack+0xd5>
     bf4:	f2 e0       	ldi	r31, 0x02	; 2
     bf6:	86 3f       	cpi	r24, 0xF6	; 246
     bf8:	9f 4f       	sbci	r25, 0xFF	; 255
     bfa:	a1 05       	cpc	r26, r1
     bfc:	b1 05       	cpc	r27, r1
     bfe:	08 f0       	brcs	.+2      	; 0xc02 <__stack+0x3a3>
     c00:	50 cf       	rjmp	.-352    	; 0xaa2 <__stack+0x243>
     c02:	c9 cf       	rjmp	.-110    	; 0xb96 <__stack+0x337>
     c04:	2e 96       	adiw	r28, 0x0e	; 14
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	f8 94       	cli
     c0a:	de bf       	out	0x3e, r29	; 62
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	cd bf       	out	0x3d, r28	; 61
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	1f 91       	pop	r17
     c16:	0f 91       	pop	r16
     c18:	ff 90       	pop	r15
     c1a:	ef 90       	pop	r14
     c1c:	df 90       	pop	r13
     c1e:	cf 90       	pop	r12
     c20:	bf 90       	pop	r11
     c22:	af 90       	pop	r10
     c24:	9f 90       	pop	r9
     c26:	8f 90       	pop	r8
     c28:	7f 90       	pop	r7
     c2a:	6f 90       	pop	r6
     c2c:	5f 90       	pop	r5
     c2e:	4f 90       	pop	r4
     c30:	3f 90       	pop	r3
     c32:	2f 90       	pop	r2
     c34:	08 95       	ret

00000c36 <sync>:
     c36:	0f 93       	push	r16
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	ec 01       	movw	r28, r24
     c3e:	40 e0       	ldi	r20, 0x00	; 0
     c40:	50 e0       	ldi	r21, 0x00	; 0
     c42:	ba 01       	movw	r22, r20
     c44:	0e 94 62 02 	call	0x4c4	; 0x4c4 <move_window>
     c48:	98 2f       	mov	r25, r24
     c4a:	81 11       	cpse	r24, r1
     c4c:	54 c0       	rjmp	.+168    	; 0xcf6 <sync+0xc0>
     c4e:	88 81       	ld	r24, Y
     c50:	83 30       	cpi	r24, 0x03	; 3
     c52:	09 f0       	breq	.+2      	; 0xc56 <sync+0x20>
     c54:	46 c0       	rjmp	.+140    	; 0xce2 <sync+0xac>
     c56:	8d 81       	ldd	r24, Y+5	; 0x05
     c58:	88 23       	and	r24, r24
     c5a:	09 f4       	brne	.+2      	; 0xc5e <sync+0x28>
     c5c:	42 c0       	rjmp	.+132    	; 0xce2 <sync+0xac>
     c5e:	1e a6       	std	Y+46, r1	; 0x2e
     c60:	1f a6       	std	Y+47, r1	; 0x2f
     c62:	18 aa       	std	Y+48, r1	; 0x30
     c64:	19 aa       	std	Y+49, r1	; 0x31
     c66:	be 01       	movw	r22, r28
     c68:	6e 5c       	subi	r22, 0xCE	; 206
     c6a:	7f 4f       	sbci	r23, 0xFF	; 255
     c6c:	fb 01       	movw	r30, r22
     c6e:	ce 01       	movw	r24, r28
     c70:	8e 5c       	subi	r24, 0xCE	; 206
     c72:	9d 4f       	sbci	r25, 0xFD	; 253
     c74:	11 92       	st	Z+, r1
     c76:	e8 17       	cp	r30, r24
     c78:	f9 07       	cpc	r31, r25
     c7a:	e1 f7       	brne	.-8      	; 0xc74 <sync+0x3e>
     c7c:	85 e5       	ldi	r24, 0x55	; 85
     c7e:	9a ea       	ldi	r25, 0xAA	; 170
     c80:	fe 01       	movw	r30, r28
     c82:	e0 5d       	subi	r30, 0xD0	; 208
     c84:	fd 4f       	sbci	r31, 0xFD	; 253
     c86:	91 83       	std	Z+1, r25	; 0x01
     c88:	80 83       	st	Z, r24
     c8a:	82 e5       	ldi	r24, 0x52	; 82
     c8c:	92 e5       	ldi	r25, 0x52	; 82
     c8e:	a1 e6       	ldi	r26, 0x61	; 97
     c90:	b1 e4       	ldi	r27, 0x41	; 65
     c92:	8a ab       	std	Y+50, r24	; 0x32
     c94:	9b ab       	std	Y+51, r25	; 0x33
     c96:	ac ab       	std	Y+52, r26	; 0x34
     c98:	bd ab       	std	Y+53, r27	; 0x35
     c9a:	82 e7       	ldi	r24, 0x72	; 114
     c9c:	92 e7       	ldi	r25, 0x72	; 114
     c9e:	a1 e4       	ldi	r26, 0x41	; 65
     ca0:	b1 e6       	ldi	r27, 0x61	; 97
     ca2:	7a 97       	sbiw	r30, 0x1a	; 26
     ca4:	80 83       	st	Z, r24
     ca6:	91 83       	std	Z+1, r25	; 0x01
     ca8:	a2 83       	std	Z+2, r26	; 0x02
     caa:	b3 83       	std	Z+3, r27	; 0x03
     cac:	8e 85       	ldd	r24, Y+14	; 0x0e
     cae:	9f 85       	ldd	r25, Y+15	; 0x0f
     cb0:	a8 89       	ldd	r26, Y+16	; 0x10
     cb2:	b9 89       	ldd	r27, Y+17	; 0x11
     cb4:	34 96       	adiw	r30, 0x04	; 4
     cb6:	80 83       	st	Z, r24
     cb8:	91 83       	std	Z+1, r25	; 0x01
     cba:	a2 83       	std	Z+2, r26	; 0x02
     cbc:	b3 83       	std	Z+3, r27	; 0x03
     cbe:	8a 85       	ldd	r24, Y+10	; 0x0a
     cc0:	9b 85       	ldd	r25, Y+11	; 0x0b
     cc2:	ac 85       	ldd	r26, Y+12	; 0x0c
     cc4:	bd 85       	ldd	r27, Y+13	; 0x0d
     cc6:	34 96       	adiw	r30, 0x04	; 4
     cc8:	80 83       	st	Z, r24
     cca:	91 83       	std	Z+1, r25	; 0x01
     ccc:	a2 83       	std	Z+2, r26	; 0x02
     cce:	b3 83       	std	Z+3, r27	; 0x03
     cd0:	2a 89       	ldd	r18, Y+18	; 0x12
     cd2:	3b 89       	ldd	r19, Y+19	; 0x13
     cd4:	4c 89       	ldd	r20, Y+20	; 0x14
     cd6:	5d 89       	ldd	r21, Y+21	; 0x15
     cd8:	01 e0       	ldi	r16, 0x01	; 1
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	0e 94 1b 2a 	call	0x5436	; 0x5436 <disk_write>
     ce0:	1d 82       	std	Y+5, r1	; 0x05
     ce2:	40 e0       	ldi	r20, 0x00	; 0
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	0e 94 87 2a 	call	0x550e	; 0x550e <disk_ioctl>
     cee:	91 e0       	ldi	r25, 0x01	; 1
     cf0:	81 11       	cpse	r24, r1
     cf2:	01 c0       	rjmp	.+2      	; 0xcf6 <sync+0xc0>
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	89 2f       	mov	r24, r25
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	0f 91       	pop	r16
     cfe:	08 95       	ret

00000d00 <clust2sect>:
     d00:	0f 93       	push	r16
     d02:	1f 93       	push	r17
     d04:	fc 01       	movw	r30, r24
     d06:	9a 01       	movw	r18, r20
     d08:	ab 01       	movw	r20, r22
     d0a:	22 50       	subi	r18, 0x02	; 2
     d0c:	31 09       	sbc	r19, r1
     d0e:	41 09       	sbc	r20, r1
     d10:	51 09       	sbc	r21, r1
     d12:	82 8d       	ldd	r24, Z+26	; 0x1a
     d14:	93 8d       	ldd	r25, Z+27	; 0x1b
     d16:	a4 8d       	ldd	r26, Z+28	; 0x1c
     d18:	b5 8d       	ldd	r27, Z+29	; 0x1d
     d1a:	02 97       	sbiw	r24, 0x02	; 2
     d1c:	a1 09       	sbc	r26, r1
     d1e:	b1 09       	sbc	r27, r1
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	4a 07       	cpc	r20, r26
     d26:	5b 07       	cpc	r21, r27
     d28:	68 f4       	brcc	.+26     	; 0xd44 <clust2sect+0x44>
     d2a:	a2 81       	ldd	r26, Z+2	; 0x02
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	0e 94 64 33 	call	0x66c8	; 0x66c8 <__muluhisi3>
     d32:	02 a5       	ldd	r16, Z+42	; 0x2a
     d34:	13 a5       	ldd	r17, Z+43	; 0x2b
     d36:	24 a5       	ldd	r18, Z+44	; 0x2c
     d38:	35 a5       	ldd	r19, Z+45	; 0x2d
     d3a:	60 0f       	add	r22, r16
     d3c:	71 1f       	adc	r23, r17
     d3e:	82 1f       	adc	r24, r18
     d40:	93 1f       	adc	r25, r19
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <clust2sect+0x4a>
     d44:	60 e0       	ldi	r22, 0x00	; 0
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	cb 01       	movw	r24, r22
     d4a:	1f 91       	pop	r17
     d4c:	0f 91       	pop	r16
     d4e:	08 95       	ret

00000d50 <get_fat>:
     d50:	af 92       	push	r10
     d52:	bf 92       	push	r11
     d54:	cf 92       	push	r12
     d56:	df 92       	push	r13
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	1f 93       	push	r17
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	42 30       	cpi	r20, 0x02	; 2
     d64:	51 05       	cpc	r21, r1
     d66:	61 05       	cpc	r22, r1
     d68:	71 05       	cpc	r23, r1
     d6a:	08 f4       	brcc	.+2      	; 0xd6e <get_fat+0x1e>
     d6c:	ad c0       	rjmp	.+346    	; 0xec8 <get_fat+0x178>
     d6e:	fc 01       	movw	r30, r24
     d70:	c2 8c       	ldd	r12, Z+26	; 0x1a
     d72:	d3 8c       	ldd	r13, Z+27	; 0x1b
     d74:	e4 8c       	ldd	r14, Z+28	; 0x1c
     d76:	f5 8c       	ldd	r15, Z+29	; 0x1d
     d78:	4c 15       	cp	r20, r12
     d7a:	5d 05       	cpc	r21, r13
     d7c:	6e 05       	cpc	r22, r14
     d7e:	7f 05       	cpc	r23, r15
     d80:	08 f0       	brcs	.+2      	; 0xd84 <get_fat+0x34>
     d82:	a7 c0       	rjmp	.+334    	; 0xed2 <get_fat+0x182>
     d84:	6a 01       	movw	r12, r20
     d86:	7b 01       	movw	r14, r22
     d88:	ec 01       	movw	r28, r24
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	09 f4       	brne	.+2      	; 0xd92 <get_fat+0x42>
     d90:	4c c0       	rjmp	.+152    	; 0xe2a <get_fat+0xda>
     d92:	83 30       	cpi	r24, 0x03	; 3
     d94:	09 f4       	brne	.+2      	; 0xd98 <get_fat+0x48>
     d96:	6b c0       	rjmp	.+214    	; 0xe6e <get_fat+0x11e>
     d98:	81 30       	cpi	r24, 0x01	; 1
     d9a:	09 f0       	breq	.+2      	; 0xd9e <get_fat+0x4e>
     d9c:	9f c0       	rjmp	.+318    	; 0xedc <get_fat+0x18c>
     d9e:	5a 01       	movw	r10, r20
     da0:	b6 94       	lsr	r11
     da2:	a7 94       	ror	r10
     da4:	a4 0e       	add	r10, r20
     da6:	b5 1e       	adc	r11, r21
     da8:	c5 01       	movw	r24, r10
     daa:	89 2f       	mov	r24, r25
     dac:	99 27       	eor	r25, r25
     dae:	86 95       	lsr	r24
     db0:	42 a1       	ldd	r20, Z+34	; 0x22
     db2:	53 a1       	ldd	r21, Z+35	; 0x23
     db4:	64 a1       	ldd	r22, Z+36	; 0x24
     db6:	75 a1       	ldd	r23, Z+37	; 0x25
     db8:	48 0f       	add	r20, r24
     dba:	59 1f       	adc	r21, r25
     dbc:	61 1d       	adc	r22, r1
     dbe:	71 1d       	adc	r23, r1
     dc0:	cf 01       	movw	r24, r30
     dc2:	0e 94 62 02 	call	0x4c4	; 0x4c4 <move_window>
     dc6:	81 11       	cpse	r24, r1
     dc8:	8d c0       	rjmp	.+282    	; 0xee4 <get_fat+0x194>
     dca:	f5 01       	movw	r30, r10
     dcc:	f1 70       	andi	r31, 0x01	; 1
     dce:	ec 0f       	add	r30, r28
     dd0:	fd 1f       	adc	r31, r29
     dd2:	12 a9       	ldd	r17, Z+50	; 0x32
     dd4:	ff ef       	ldi	r31, 0xFF	; 255
     dd6:	af 1a       	sub	r10, r31
     dd8:	bf 0a       	sbc	r11, r31
     dda:	c5 01       	movw	r24, r10
     ddc:	89 2f       	mov	r24, r25
     dde:	99 27       	eor	r25, r25
     de0:	86 95       	lsr	r24
     de2:	4a a1       	ldd	r20, Y+34	; 0x22
     de4:	5b a1       	ldd	r21, Y+35	; 0x23
     de6:	6c a1       	ldd	r22, Y+36	; 0x24
     de8:	7d a1       	ldd	r23, Y+37	; 0x25
     dea:	48 0f       	add	r20, r24
     dec:	59 1f       	adc	r21, r25
     dee:	61 1d       	adc	r22, r1
     df0:	71 1d       	adc	r23, r1
     df2:	ce 01       	movw	r24, r28
     df4:	0e 94 62 02 	call	0x4c4	; 0x4c4 <move_window>
     df8:	81 11       	cpse	r24, r1
     dfa:	78 c0       	rjmp	.+240    	; 0xeec <get_fat+0x19c>
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	b8 22       	and	r11, r24
     e00:	ca 0d       	add	r28, r10
     e02:	db 1d       	adc	r29, r11
     e04:	8a a9       	ldd	r24, Y+50	; 0x32
     e06:	61 2f       	mov	r22, r17
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	78 2b       	or	r23, r24
     e0c:	c0 fe       	sbrs	r12, 0
     e0e:	09 c0       	rjmp	.+18     	; 0xe22 <get_fat+0xd2>
     e10:	72 95       	swap	r23
     e12:	62 95       	swap	r22
     e14:	6f 70       	andi	r22, 0x0F	; 15
     e16:	67 27       	eor	r22, r23
     e18:	7f 70       	andi	r23, 0x0F	; 15
     e1a:	67 27       	eor	r22, r23
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	70 c0       	rjmp	.+224    	; 0xf02 <get_fat+0x1b2>
     e22:	7f 70       	andi	r23, 0x0F	; 15
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	6c c0       	rjmp	.+216    	; 0xf02 <get_fat+0x1b2>
     e2a:	45 2f       	mov	r20, r21
     e2c:	56 2f       	mov	r21, r22
     e2e:	67 2f       	mov	r22, r23
     e30:	77 27       	eor	r23, r23
     e32:	82 a1       	ldd	r24, Z+34	; 0x22
     e34:	93 a1       	ldd	r25, Z+35	; 0x23
     e36:	a4 a1       	ldd	r26, Z+36	; 0x24
     e38:	b5 a1       	ldd	r27, Z+37	; 0x25
     e3a:	48 0f       	add	r20, r24
     e3c:	59 1f       	adc	r21, r25
     e3e:	6a 1f       	adc	r22, r26
     e40:	7b 1f       	adc	r23, r27
     e42:	cf 01       	movw	r24, r30
     e44:	0e 94 62 02 	call	0x4c4	; 0x4c4 <move_window>
     e48:	81 11       	cpse	r24, r1
     e4a:	54 c0       	rjmp	.+168    	; 0xef4 <get_fat+0x1a4>
     e4c:	b7 01       	movw	r22, r14
     e4e:	a6 01       	movw	r20, r12
     e50:	44 0f       	add	r20, r20
     e52:	55 1f       	adc	r21, r21
     e54:	66 1f       	adc	r22, r22
     e56:	77 1f       	adc	r23, r23
     e58:	4e 7f       	andi	r20, 0xFE	; 254
     e5a:	51 70       	andi	r21, 0x01	; 1
     e5c:	66 27       	eor	r22, r22
     e5e:	77 27       	eor	r23, r23
     e60:	c4 0f       	add	r28, r20
     e62:	d5 1f       	adc	r29, r21
     e64:	6a a9       	ldd	r22, Y+50	; 0x32
     e66:	7b a9       	ldd	r23, Y+51	; 0x33
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	4a c0       	rjmp	.+148    	; 0xf02 <get_fat+0x1b2>
     e6e:	82 a1       	ldd	r24, Z+34	; 0x22
     e70:	93 a1       	ldd	r25, Z+35	; 0x23
     e72:	a4 a1       	ldd	r26, Z+36	; 0x24
     e74:	b5 a1       	ldd	r27, Z+37	; 0x25
     e76:	68 94       	set
     e78:	16 f8       	bld	r1, 6
     e7a:	76 95       	lsr	r23
     e7c:	67 95       	ror	r22
     e7e:	57 95       	ror	r21
     e80:	47 95       	ror	r20
     e82:	16 94       	lsr	r1
     e84:	d1 f7       	brne	.-12     	; 0xe7a <get_fat+0x12a>
     e86:	48 0f       	add	r20, r24
     e88:	59 1f       	adc	r21, r25
     e8a:	6a 1f       	adc	r22, r26
     e8c:	7b 1f       	adc	r23, r27
     e8e:	cf 01       	movw	r24, r30
     e90:	0e 94 62 02 	call	0x4c4	; 0x4c4 <move_window>
     e94:	81 11       	cpse	r24, r1
     e96:	32 c0       	rjmp	.+100    	; 0xefc <get_fat+0x1ac>
     e98:	b7 01       	movw	r22, r14
     e9a:	a6 01       	movw	r20, r12
     e9c:	44 0f       	add	r20, r20
     e9e:	55 1f       	adc	r21, r21
     ea0:	66 1f       	adc	r22, r22
     ea2:	77 1f       	adc	r23, r23
     ea4:	44 0f       	add	r20, r20
     ea6:	55 1f       	adc	r21, r21
     ea8:	66 1f       	adc	r22, r22
     eaa:	77 1f       	adc	r23, r23
     eac:	4c 7f       	andi	r20, 0xFC	; 252
     eae:	51 70       	andi	r21, 0x01	; 1
     eb0:	66 27       	eor	r22, r22
     eb2:	77 27       	eor	r23, r23
     eb4:	c4 0f       	add	r28, r20
     eb6:	d5 1f       	adc	r29, r21
     eb8:	8a a9       	ldd	r24, Y+50	; 0x32
     eba:	9b a9       	ldd	r25, Y+51	; 0x33
     ebc:	ac a9       	ldd	r26, Y+52	; 0x34
     ebe:	bd a9       	ldd	r27, Y+53	; 0x35
     ec0:	bc 01       	movw	r22, r24
     ec2:	cd 01       	movw	r24, r26
     ec4:	9f 70       	andi	r25, 0x0F	; 15
     ec6:	1d c0       	rjmp	.+58     	; 0xf02 <get_fat+0x1b2>
     ec8:	61 e0       	ldi	r22, 0x01	; 1
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	18 c0       	rjmp	.+48     	; 0xf02 <get_fat+0x1b2>
     ed2:	61 e0       	ldi	r22, 0x01	; 1
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	13 c0       	rjmp	.+38     	; 0xf02 <get_fat+0x1b2>
     edc:	6f ef       	ldi	r22, 0xFF	; 255
     ede:	7f ef       	ldi	r23, 0xFF	; 255
     ee0:	cb 01       	movw	r24, r22
     ee2:	0f c0       	rjmp	.+30     	; 0xf02 <get_fat+0x1b2>
     ee4:	6f ef       	ldi	r22, 0xFF	; 255
     ee6:	7f ef       	ldi	r23, 0xFF	; 255
     ee8:	cb 01       	movw	r24, r22
     eea:	0b c0       	rjmp	.+22     	; 0xf02 <get_fat+0x1b2>
     eec:	6f ef       	ldi	r22, 0xFF	; 255
     eee:	7f ef       	ldi	r23, 0xFF	; 255
     ef0:	cb 01       	movw	r24, r22
     ef2:	07 c0       	rjmp	.+14     	; 0xf02 <get_fat+0x1b2>
     ef4:	6f ef       	ldi	r22, 0xFF	; 255
     ef6:	7f ef       	ldi	r23, 0xFF	; 255
     ef8:	cb 01       	movw	r24, r22
     efa:	03 c0       	rjmp	.+6      	; 0xf02 <get_fat+0x1b2>
     efc:	6f ef       	ldi	r22, 0xFF	; 255
     efe:	7f ef       	ldi	r23, 0xFF	; 255
     f00:	cb 01       	movw	r24, r22
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	1f 91       	pop	r17
     f08:	ff 90       	pop	r15
     f0a:	ef 90       	pop	r14
     f0c:	df 90       	pop	r13
     f0e:	cf 90       	pop	r12
     f10:	bf 90       	pop	r11
     f12:	af 90       	pop	r10
     f14:	08 95       	ret

00000f16 <dir_sdi>:
     f16:	ef 92       	push	r14
     f18:	ff 92       	push	r15
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	ec 01       	movw	r28, r24
     f24:	8b 01       	movw	r16, r22
     f26:	7d 83       	std	Y+5, r23	; 0x05
     f28:	6c 83       	std	Y+4, r22	; 0x04
     f2a:	4e 81       	ldd	r20, Y+6	; 0x06
     f2c:	5f 81       	ldd	r21, Y+7	; 0x07
     f2e:	68 85       	ldd	r22, Y+8	; 0x08
     f30:	79 85       	ldd	r23, Y+9	; 0x09
     f32:	41 30       	cpi	r20, 0x01	; 1
     f34:	51 05       	cpc	r21, r1
     f36:	61 05       	cpc	r22, r1
     f38:	71 05       	cpc	r23, r1
     f3a:	09 f4       	brne	.+2      	; 0xf3e <dir_sdi+0x28>
     f3c:	92 c0       	rjmp	.+292    	; 0x1062 <dir_sdi+0x14c>
     f3e:	e8 81       	ld	r30, Y
     f40:	f9 81       	ldd	r31, Y+1	; 0x01
     f42:	82 8d       	ldd	r24, Z+26	; 0x1a
     f44:	93 8d       	ldd	r25, Z+27	; 0x1b
     f46:	a4 8d       	ldd	r26, Z+28	; 0x1c
     f48:	b5 8d       	ldd	r27, Z+29	; 0x1d
     f4a:	48 17       	cp	r20, r24
     f4c:	59 07       	cpc	r21, r25
     f4e:	6a 07       	cpc	r22, r26
     f50:	7b 07       	cpc	r23, r27
     f52:	08 f0       	brcs	.+2      	; 0xf56 <dir_sdi+0x40>
     f54:	88 c0       	rjmp	.+272    	; 0x1066 <dir_sdi+0x150>
     f56:	41 15       	cp	r20, r1
     f58:	51 05       	cpc	r21, r1
     f5a:	61 05       	cpc	r22, r1
     f5c:	71 05       	cpc	r23, r1
     f5e:	51 f5       	brne	.+84     	; 0xfb4 <dir_sdi+0x9e>
     f60:	80 81       	ld	r24, Z
     f62:	83 30       	cpi	r24, 0x03	; 3
     f64:	49 f4       	brne	.+18     	; 0xf78 <dir_sdi+0x62>
     f66:	46 a1       	ldd	r20, Z+38	; 0x26
     f68:	57 a1       	ldd	r21, Z+39	; 0x27
     f6a:	60 a5       	ldd	r22, Z+40	; 0x28
     f6c:	71 a5       	ldd	r23, Z+41	; 0x29
     f6e:	41 15       	cp	r20, r1
     f70:	51 05       	cpc	r21, r1
     f72:	61 05       	cpc	r22, r1
     f74:	71 05       	cpc	r23, r1
     f76:	f1 f4       	brne	.+60     	; 0xfb4 <dir_sdi+0x9e>
     f78:	1a 86       	std	Y+10, r1	; 0x0a
     f7a:	1b 86       	std	Y+11, r1	; 0x0b
     f7c:	1c 86       	std	Y+12, r1	; 0x0c
     f7e:	1d 86       	std	Y+13, r1	; 0x0d
     f80:	80 85       	ldd	r24, Z+8	; 0x08
     f82:	91 85       	ldd	r25, Z+9	; 0x09
     f84:	08 17       	cp	r16, r24
     f86:	19 07       	cpc	r17, r25
     f88:	08 f0       	brcs	.+2      	; 0xf8c <dir_sdi+0x76>
     f8a:	6f c0       	rjmp	.+222    	; 0x106a <dir_sdi+0x154>
     f8c:	86 a1       	ldd	r24, Z+38	; 0x26
     f8e:	97 a1       	ldd	r25, Z+39	; 0x27
     f90:	a0 a5       	ldd	r26, Z+40	; 0x28
     f92:	b1 a5       	ldd	r27, Z+41	; 0x29
     f94:	98 01       	movw	r18, r16
     f96:	32 95       	swap	r19
     f98:	22 95       	swap	r18
     f9a:	2f 70       	andi	r18, 0x0F	; 15
     f9c:	23 27       	eor	r18, r19
     f9e:	3f 70       	andi	r19, 0x0F	; 15
     fa0:	23 27       	eor	r18, r19
     fa2:	82 0f       	add	r24, r18
     fa4:	93 1f       	adc	r25, r19
     fa6:	a1 1d       	adc	r26, r1
     fa8:	b1 1d       	adc	r27, r1
     faa:	8e 87       	std	Y+14, r24	; 0x0e
     fac:	9f 87       	std	Y+15, r25	; 0x0f
     fae:	a8 8b       	std	Y+16, r26	; 0x10
     fb0:	b9 8b       	std	Y+17, r27	; 0x11
     fb2:	44 c0       	rjmp	.+136    	; 0x103c <dir_sdi+0x126>
     fb4:	e2 80       	ldd	r14, Z+2	; 0x02
     fb6:	80 e1       	ldi	r24, 0x10	; 16
     fb8:	e8 9e       	mul	r14, r24
     fba:	70 01       	movw	r14, r0
     fbc:	11 24       	eor	r1, r1
     fbe:	0e 15       	cp	r16, r14
     fc0:	1f 05       	cpc	r17, r15
     fc2:	18 f1       	brcs	.+70     	; 0x100a <dir_sdi+0xf4>
     fc4:	88 81       	ld	r24, Y
     fc6:	99 81       	ldd	r25, Y+1	; 0x01
     fc8:	0e 94 a8 06 	call	0xd50	; 0xd50 <get_fat>
     fcc:	ab 01       	movw	r20, r22
     fce:	bc 01       	movw	r22, r24
     fd0:	4f 3f       	cpi	r20, 0xFF	; 255
     fd2:	8f ef       	ldi	r24, 0xFF	; 255
     fd4:	58 07       	cpc	r21, r24
     fd6:	68 07       	cpc	r22, r24
     fd8:	78 07       	cpc	r23, r24
     fda:	09 f4       	brne	.+2      	; 0xfde <dir_sdi+0xc8>
     fdc:	48 c0       	rjmp	.+144    	; 0x106e <dir_sdi+0x158>
     fde:	42 30       	cpi	r20, 0x02	; 2
     fe0:	51 05       	cpc	r21, r1
     fe2:	61 05       	cpc	r22, r1
     fe4:	71 05       	cpc	r23, r1
     fe6:	08 f4       	brcc	.+2      	; 0xfea <dir_sdi+0xd4>
     fe8:	44 c0       	rjmp	.+136    	; 0x1072 <dir_sdi+0x15c>
     fea:	e8 81       	ld	r30, Y
     fec:	f9 81       	ldd	r31, Y+1	; 0x01
     fee:	82 8d       	ldd	r24, Z+26	; 0x1a
     ff0:	93 8d       	ldd	r25, Z+27	; 0x1b
     ff2:	a4 8d       	ldd	r26, Z+28	; 0x1c
     ff4:	b5 8d       	ldd	r27, Z+29	; 0x1d
     ff6:	48 17       	cp	r20, r24
     ff8:	59 07       	cpc	r21, r25
     ffa:	6a 07       	cpc	r22, r26
     ffc:	7b 07       	cpc	r23, r27
     ffe:	d8 f5       	brcc	.+118    	; 0x1076 <dir_sdi+0x160>
    1000:	0e 19       	sub	r16, r14
    1002:	1f 09       	sbc	r17, r15
    1004:	0e 15       	cp	r16, r14
    1006:	1f 05       	cpc	r17, r15
    1008:	e8 f6       	brcc	.-70     	; 0xfc4 <dir_sdi+0xae>
    100a:	4a 87       	std	Y+10, r20	; 0x0a
    100c:	5b 87       	std	Y+11, r21	; 0x0b
    100e:	6c 87       	std	Y+12, r22	; 0x0c
    1010:	7d 87       	std	Y+13, r23	; 0x0d
    1012:	88 81       	ld	r24, Y
    1014:	99 81       	ldd	r25, Y+1	; 0x01
    1016:	0e 94 80 06 	call	0xd00	; 0xd00 <clust2sect>
    101a:	98 01       	movw	r18, r16
    101c:	32 95       	swap	r19
    101e:	22 95       	swap	r18
    1020:	2f 70       	andi	r18, 0x0F	; 15
    1022:	23 27       	eor	r18, r19
    1024:	3f 70       	andi	r19, 0x0F	; 15
    1026:	23 27       	eor	r18, r19
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	82 0f       	add	r24, r18
    102e:	93 1f       	adc	r25, r19
    1030:	a1 1d       	adc	r26, r1
    1032:	b1 1d       	adc	r27, r1
    1034:	8e 87       	std	Y+14, r24	; 0x0e
    1036:	9f 87       	std	Y+15, r25	; 0x0f
    1038:	a8 8b       	std	Y+16, r26	; 0x10
    103a:	b9 8b       	std	Y+17, r27	; 0x11
    103c:	88 81       	ld	r24, Y
    103e:	99 81       	ldd	r25, Y+1	; 0x01
    1040:	c2 96       	adiw	r24, 0x32	; 50
    1042:	0f 70       	andi	r16, 0x0F	; 15
    1044:	11 27       	eor	r17, r17
    1046:	00 0f       	add	r16, r16
    1048:	11 1f       	adc	r17, r17
    104a:	02 95       	swap	r16
    104c:	12 95       	swap	r17
    104e:	10 7f       	andi	r17, 0xF0	; 240
    1050:	10 27       	eor	r17, r16
    1052:	00 7f       	andi	r16, 0xF0	; 240
    1054:	10 27       	eor	r17, r16
    1056:	08 0f       	add	r16, r24
    1058:	19 1f       	adc	r17, r25
    105a:	1b 8b       	std	Y+19, r17	; 0x13
    105c:	0a 8b       	std	Y+18, r16	; 0x12
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	0b c0       	rjmp	.+22     	; 0x1078 <dir_sdi+0x162>
    1062:	82 e0       	ldi	r24, 0x02	; 2
    1064:	09 c0       	rjmp	.+18     	; 0x1078 <dir_sdi+0x162>
    1066:	82 e0       	ldi	r24, 0x02	; 2
    1068:	07 c0       	rjmp	.+14     	; 0x1078 <dir_sdi+0x162>
    106a:	82 e0       	ldi	r24, 0x02	; 2
    106c:	05 c0       	rjmp	.+10     	; 0x1078 <dir_sdi+0x162>
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	03 c0       	rjmp	.+6      	; 0x1078 <dir_sdi+0x162>
    1072:	82 e0       	ldi	r24, 0x02	; 2
    1074:	01 c0       	rjmp	.+2      	; 0x1078 <dir_sdi+0x162>
    1076:	82 e0       	ldi	r24, 0x02	; 2
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	ff 90       	pop	r15
    1082:	ef 90       	pop	r14
    1084:	08 95       	ret

00001086 <put_fat>:
    1086:	6f 92       	push	r6
    1088:	7f 92       	push	r7
    108a:	8f 92       	push	r8
    108c:	9f 92       	push	r9
    108e:	af 92       	push	r10
    1090:	bf 92       	push	r11
    1092:	cf 92       	push	r12
    1094:	df 92       	push	r13
    1096:	ef 92       	push	r14
    1098:	ff 92       	push	r15
    109a:	0f 93       	push	r16
    109c:	1f 93       	push	r17
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	42 30       	cpi	r20, 0x02	; 2
    10a4:	51 05       	cpc	r21, r1
    10a6:	61 05       	cpc	r22, r1
    10a8:	71 05       	cpc	r23, r1
    10aa:	08 f4       	brcc	.+2      	; 0x10ae <put_fat+0x28>
    10ac:	e1 c0       	rjmp	.+450    	; 0x1270 <put_fat+0x1ea>
    10ae:	fc 01       	movw	r30, r24
    10b0:	c2 8c       	ldd	r12, Z+26	; 0x1a
    10b2:	d3 8c       	ldd	r13, Z+27	; 0x1b
    10b4:	e4 8c       	ldd	r14, Z+28	; 0x1c
    10b6:	f5 8c       	ldd	r15, Z+29	; 0x1d
    10b8:	4c 15       	cp	r20, r12
    10ba:	5d 05       	cpc	r21, r13
    10bc:	6e 05       	cpc	r22, r14
    10be:	7f 05       	cpc	r23, r15
    10c0:	08 f0       	brcs	.+2      	; 0x10c4 <put_fat+0x3e>
    10c2:	d8 c0       	rjmp	.+432    	; 0x1274 <put_fat+0x1ee>
    10c4:	68 01       	movw	r12, r16
    10c6:	79 01       	movw	r14, r18
    10c8:	4a 01       	movw	r8, r20
    10ca:	5b 01       	movw	r10, r22
    10cc:	ec 01       	movw	r28, r24
    10ce:	80 81       	ld	r24, Z
    10d0:	82 30       	cpi	r24, 0x02	; 2
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <put_fat+0x50>
    10d4:	67 c0       	rjmp	.+206    	; 0x11a4 <put_fat+0x11e>
    10d6:	83 30       	cpi	r24, 0x03	; 3
    10d8:	09 f4       	brne	.+2      	; 0x10dc <put_fat+0x56>
    10da:	88 c0       	rjmp	.+272    	; 0x11ec <put_fat+0x166>
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	09 f0       	breq	.+2      	; 0x10e2 <put_fat+0x5c>
    10e0:	bf c0       	rjmp	.+382    	; 0x1260 <put_fat+0x1da>
    10e2:	8a 01       	movw	r16, r20
    10e4:	16 95       	lsr	r17
    10e6:	07 95       	ror	r16
    10e8:	38 01       	movw	r6, r16
    10ea:	64 0e       	add	r6, r20
    10ec:	75 1e       	adc	r7, r21
    10ee:	c3 01       	movw	r24, r6
    10f0:	89 2f       	mov	r24, r25
    10f2:	99 27       	eor	r25, r25
    10f4:	86 95       	lsr	r24
    10f6:	42 a1       	ldd	r20, Z+34	; 0x22
    10f8:	53 a1       	ldd	r21, Z+35	; 0x23
    10fa:	64 a1       	ldd	r22, Z+36	; 0x24
    10fc:	75 a1       	ldd	r23, Z+37	; 0x25
    10fe:	48 0f       	add	r20, r24
    1100:	59 1f       	adc	r21, r25
    1102:	61 1d       	adc	r22, r1
    1104:	71 1d       	adc	r23, r1
    1106:	cf 01       	movw	r24, r30
    1108:	0e 94 62 02 	call	0x4c4	; 0x4c4 <move_window>
    110c:	18 2f       	mov	r17, r24
    110e:	81 11       	cpse	r24, r1
    1110:	ac c0       	rjmp	.+344    	; 0x126a <put_fat+0x1e4>
    1112:	c3 01       	movw	r24, r6
    1114:	91 70       	andi	r25, 0x01	; 1
    1116:	80 fe       	sbrs	r8, 0
    1118:	24 c0       	rjmp	.+72     	; 0x1162 <put_fat+0xdc>
    111a:	fe 01       	movw	r30, r28
    111c:	e8 0f       	add	r30, r24
    111e:	f9 1f       	adc	r31, r25
    1120:	82 a9       	ldd	r24, Z+50	; 0x32
    1122:	28 2f       	mov	r18, r24
    1124:	2f 70       	andi	r18, 0x0F	; 15
    1126:	30 e1       	ldi	r19, 0x10	; 16
    1128:	c3 9e       	mul	r12, r19
    112a:	c0 01       	movw	r24, r0
    112c:	11 24       	eor	r1, r1
    112e:	82 2b       	or	r24, r18
    1130:	82 ab       	std	Z+50, r24	; 0x32
    1132:	53 01       	movw	r10, r6
    1134:	8f ef       	ldi	r24, 0xFF	; 255
    1136:	a8 1a       	sub	r10, r24
    1138:	b8 0a       	sbc	r11, r24
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	8c 83       	std	Y+4, r24	; 0x04
    113e:	c5 01       	movw	r24, r10
    1140:	89 2f       	mov	r24, r25
    1142:	99 27       	eor	r25, r25
    1144:	86 95       	lsr	r24
    1146:	4a a1       	ldd	r20, Y+34	; 0x22
    1148:	5b a1       	ldd	r21, Y+35	; 0x23
    114a:	6c a1       	ldd	r22, Y+36	; 0x24
    114c:	7d a1       	ldd	r23, Y+37	; 0x25
    114e:	48 0f       	add	r20, r24
    1150:	59 1f       	adc	r21, r25
    1152:	61 1d       	adc	r22, r1
    1154:	71 1d       	adc	r23, r1
    1156:	ce 01       	movw	r24, r28
    1158:	0e 94 62 02 	call	0x4c4	; 0x4c4 <move_window>
    115c:	81 11       	cpse	r24, r1
    115e:	82 c0       	rjmp	.+260    	; 0x1264 <put_fat+0x1de>
    1160:	8b c0       	rjmp	.+278    	; 0x1278 <put_fat+0x1f2>
    1162:	fe 01       	movw	r30, r28
    1164:	e8 0f       	add	r30, r24
    1166:	f9 1f       	adc	r31, r25
    1168:	c2 aa       	std	Z+50, r12	; 0x32
    116a:	53 01       	movw	r10, r6
    116c:	ef ef       	ldi	r30, 0xFF	; 255
    116e:	ae 1a       	sub	r10, r30
    1170:	be 0a       	sbc	r11, r30
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	8c 83       	std	Y+4, r24	; 0x04
    1176:	c5 01       	movw	r24, r10
    1178:	89 2f       	mov	r24, r25
    117a:	99 27       	eor	r25, r25
    117c:	86 95       	lsr	r24
    117e:	4a a1       	ldd	r20, Y+34	; 0x22
    1180:	5b a1       	ldd	r21, Y+35	; 0x23
    1182:	6c a1       	ldd	r22, Y+36	; 0x24
    1184:	7d a1       	ldd	r23, Y+37	; 0x25
    1186:	48 0f       	add	r20, r24
    1188:	59 1f       	adc	r21, r25
    118a:	61 1d       	adc	r22, r1
    118c:	71 1d       	adc	r23, r1
    118e:	ce 01       	movw	r24, r28
    1190:	0e 94 62 02 	call	0x4c4	; 0x4c4 <move_window>
    1194:	81 11       	cpse	r24, r1
    1196:	68 c0       	rjmp	.+208    	; 0x1268 <put_fat+0x1e2>
    1198:	7a c0       	rjmp	.+244    	; 0x128e <put_fat+0x208>
    119a:	fe 01       	movw	r30, r28
    119c:	e8 0f       	add	r30, r24
    119e:	f9 1f       	adc	r31, r25
    11a0:	c2 aa       	std	Z+50, r12	; 0x32
    11a2:	63 c0       	rjmp	.+198    	; 0x126a <put_fat+0x1e4>
    11a4:	45 2f       	mov	r20, r21
    11a6:	56 2f       	mov	r21, r22
    11a8:	67 2f       	mov	r22, r23
    11aa:	77 27       	eor	r23, r23
    11ac:	82 a1       	ldd	r24, Z+34	; 0x22
    11ae:	93 a1       	ldd	r25, Z+35	; 0x23
    11b0:	a4 a1       	ldd	r26, Z+36	; 0x24
    11b2:	b5 a1       	ldd	r27, Z+37	; 0x25
    11b4:	48 0f       	add	r20, r24
    11b6:	59 1f       	adc	r21, r25
    11b8:	6a 1f       	adc	r22, r26
    11ba:	7b 1f       	adc	r23, r27
    11bc:	cf 01       	movw	r24, r30
    11be:	0e 94 62 02 	call	0x4c4	; 0x4c4 <move_window>
    11c2:	18 2f       	mov	r17, r24
    11c4:	81 11       	cpse	r24, r1
    11c6:	51 c0       	rjmp	.+162    	; 0x126a <put_fat+0x1e4>
    11c8:	b5 01       	movw	r22, r10
    11ca:	a4 01       	movw	r20, r8
    11cc:	44 0f       	add	r20, r20
    11ce:	55 1f       	adc	r21, r21
    11d0:	66 1f       	adc	r22, r22
    11d2:	77 1f       	adc	r23, r23
    11d4:	4e 7f       	andi	r20, 0xFE	; 254
    11d6:	51 70       	andi	r21, 0x01	; 1
    11d8:	66 27       	eor	r22, r22
    11da:	77 27       	eor	r23, r23
    11dc:	4e 5c       	subi	r20, 0xCE	; 206
    11de:	5f 4f       	sbci	r21, 0xFF	; 255
    11e0:	fe 01       	movw	r30, r28
    11e2:	e4 0f       	add	r30, r20
    11e4:	f5 1f       	adc	r31, r21
    11e6:	d1 82       	std	Z+1, r13	; 0x01
    11e8:	c0 82       	st	Z, r12
    11ea:	3f c0       	rjmp	.+126    	; 0x126a <put_fat+0x1e4>
    11ec:	82 a1       	ldd	r24, Z+34	; 0x22
    11ee:	93 a1       	ldd	r25, Z+35	; 0x23
    11f0:	a4 a1       	ldd	r26, Z+36	; 0x24
    11f2:	b5 a1       	ldd	r27, Z+37	; 0x25
    11f4:	68 94       	set
    11f6:	16 f8       	bld	r1, 6
    11f8:	76 95       	lsr	r23
    11fa:	67 95       	ror	r22
    11fc:	57 95       	ror	r21
    11fe:	47 95       	ror	r20
    1200:	16 94       	lsr	r1
    1202:	d1 f7       	brne	.-12     	; 0x11f8 <put_fat+0x172>
    1204:	48 0f       	add	r20, r24
    1206:	59 1f       	adc	r21, r25
    1208:	6a 1f       	adc	r22, r26
    120a:	7b 1f       	adc	r23, r27
    120c:	cf 01       	movw	r24, r30
    120e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <move_window>
    1212:	18 2f       	mov	r17, r24
    1214:	81 11       	cpse	r24, r1
    1216:	29 c0       	rjmp	.+82     	; 0x126a <put_fat+0x1e4>
    1218:	b5 01       	movw	r22, r10
    121a:	a4 01       	movw	r20, r8
    121c:	44 0f       	add	r20, r20
    121e:	55 1f       	adc	r21, r21
    1220:	66 1f       	adc	r22, r22
    1222:	77 1f       	adc	r23, r23
    1224:	44 0f       	add	r20, r20
    1226:	55 1f       	adc	r21, r21
    1228:	66 1f       	adc	r22, r22
    122a:	77 1f       	adc	r23, r23
    122c:	4c 7f       	andi	r20, 0xFC	; 252
    122e:	51 70       	andi	r21, 0x01	; 1
    1230:	66 27       	eor	r22, r22
    1232:	77 27       	eor	r23, r23
    1234:	4e 5c       	subi	r20, 0xCE	; 206
    1236:	5f 4f       	sbci	r21, 0xFF	; 255
    1238:	fe 01       	movw	r30, r28
    123a:	e4 0f       	add	r30, r20
    123c:	f5 1f       	adc	r31, r21
    123e:	80 81       	ld	r24, Z
    1240:	91 81       	ldd	r25, Z+1	; 0x01
    1242:	a2 81       	ldd	r26, Z+2	; 0x02
    1244:	b3 81       	ldd	r27, Z+3	; 0x03
    1246:	88 27       	eor	r24, r24
    1248:	99 27       	eor	r25, r25
    124a:	aa 27       	eor	r26, r26
    124c:	b0 7f       	andi	r27, 0xF0	; 240
    124e:	c8 2a       	or	r12, r24
    1250:	d9 2a       	or	r13, r25
    1252:	ea 2a       	or	r14, r26
    1254:	fb 2a       	or	r15, r27
    1256:	c0 82       	st	Z, r12
    1258:	d1 82       	std	Z+1, r13	; 0x01
    125a:	e2 82       	std	Z+2, r14	; 0x02
    125c:	f3 82       	std	Z+3, r15	; 0x03
    125e:	05 c0       	rjmp	.+10     	; 0x126a <put_fat+0x1e4>
    1260:	12 e0       	ldi	r17, 0x02	; 2
    1262:	03 c0       	rjmp	.+6      	; 0x126a <put_fat+0x1e4>
    1264:	18 2f       	mov	r17, r24
    1266:	01 c0       	rjmp	.+2      	; 0x126a <put_fat+0x1e4>
    1268:	18 2f       	mov	r17, r24
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	8c 83       	std	Y+4, r24	; 0x04
    126e:	1b c0       	rjmp	.+54     	; 0x12a6 <put_fat+0x220>
    1270:	12 e0       	ldi	r17, 0x02	; 2
    1272:	19 c0       	rjmp	.+50     	; 0x12a6 <put_fat+0x220>
    1274:	12 e0       	ldi	r17, 0x02	; 2
    1276:	17 c0       	rjmp	.+46     	; 0x12a6 <put_fat+0x220>
    1278:	c5 01       	movw	r24, r10
    127a:	91 70       	andi	r25, 0x01	; 1
    127c:	68 94       	set
    127e:	13 f8       	bld	r1, 3
    1280:	f6 94       	lsr	r15
    1282:	e7 94       	ror	r14
    1284:	d7 94       	ror	r13
    1286:	c7 94       	ror	r12
    1288:	16 94       	lsr	r1
    128a:	d1 f7       	brne	.-12     	; 0x1280 <put_fat+0x1fa>
    128c:	86 cf       	rjmp	.-244    	; 0x119a <put_fat+0x114>
    128e:	c5 01       	movw	r24, r10
    1290:	91 70       	andi	r25, 0x01	; 1
    1292:	fe 01       	movw	r30, r28
    1294:	e8 0f       	add	r30, r24
    1296:	f9 1f       	adc	r31, r25
    1298:	32 a9       	ldd	r19, Z+50	; 0x32
    129a:	30 7f       	andi	r19, 0xF0	; 240
    129c:	2d 2d       	mov	r18, r13
    129e:	2f 70       	andi	r18, 0x0F	; 15
    12a0:	c3 2e       	mov	r12, r19
    12a2:	c2 2a       	or	r12, r18
    12a4:	7a cf       	rjmp	.-268    	; 0x119a <put_fat+0x114>
    12a6:	81 2f       	mov	r24, r17
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	1f 91       	pop	r17
    12ae:	0f 91       	pop	r16
    12b0:	ff 90       	pop	r15
    12b2:	ef 90       	pop	r14
    12b4:	df 90       	pop	r13
    12b6:	cf 90       	pop	r12
    12b8:	bf 90       	pop	r11
    12ba:	af 90       	pop	r10
    12bc:	9f 90       	pop	r9
    12be:	8f 90       	pop	r8
    12c0:	7f 90       	pop	r7
    12c2:	6f 90       	pop	r6
    12c4:	08 95       	ret

000012c6 <create_chain>:
    12c6:	4f 92       	push	r4
    12c8:	5f 92       	push	r5
    12ca:	6f 92       	push	r6
    12cc:	7f 92       	push	r7
    12ce:	8f 92       	push	r8
    12d0:	9f 92       	push	r9
    12d2:	af 92       	push	r10
    12d4:	bf 92       	push	r11
    12d6:	cf 92       	push	r12
    12d8:	df 92       	push	r13
    12da:	ef 92       	push	r14
    12dc:	ff 92       	push	r15
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	ec 01       	movw	r28, r24
    12e8:	2a 01       	movw	r4, r20
    12ea:	3b 01       	movw	r6, r22
    12ec:	41 15       	cp	r20, r1
    12ee:	51 05       	cpc	r21, r1
    12f0:	61 05       	cpc	r22, r1
    12f2:	71 05       	cpc	r23, r1
    12f4:	b9 f4       	brne	.+46     	; 0x1324 <create_chain+0x5e>
    12f6:	8a 84       	ldd	r8, Y+10	; 0x0a
    12f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    12fa:	ac 84       	ldd	r10, Y+12	; 0x0c
    12fc:	bd 84       	ldd	r11, Y+13	; 0x0d
    12fe:	81 14       	cp	r8, r1
    1300:	91 04       	cpc	r9, r1
    1302:	a1 04       	cpc	r10, r1
    1304:	b1 04       	cpc	r11, r1
    1306:	29 f1       	breq	.+74     	; 0x1352 <create_chain+0x8c>
    1308:	8a 8d       	ldd	r24, Y+26	; 0x1a
    130a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    130c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    130e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1310:	88 16       	cp	r8, r24
    1312:	99 06       	cpc	r9, r25
    1314:	aa 06       	cpc	r10, r26
    1316:	bb 06       	cpc	r11, r27
    1318:	00 f1       	brcs	.+64     	; 0x135a <create_chain+0x94>
    131a:	81 2c       	mov	r8, r1
    131c:	91 2c       	mov	r9, r1
    131e:	54 01       	movw	r10, r8
    1320:	83 94       	inc	r8
    1322:	1b c0       	rjmp	.+54     	; 0x135a <create_chain+0x94>
    1324:	0e 94 a8 06 	call	0xd50	; 0xd50 <get_fat>
    1328:	6b 01       	movw	r12, r22
    132a:	7c 01       	movw	r14, r24
    132c:	62 30       	cpi	r22, 0x02	; 2
    132e:	71 05       	cpc	r23, r1
    1330:	81 05       	cpc	r24, r1
    1332:	91 05       	cpc	r25, r1
    1334:	08 f4       	brcc	.+2      	; 0x1338 <create_chain+0x72>
    1336:	86 c0       	rjmp	.+268    	; 0x1444 <create_chain+0x17e>
    1338:	8a 8d       	ldd	r24, Y+26	; 0x1a
    133a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    133c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    133e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1340:	c8 16       	cp	r12, r24
    1342:	d9 06       	cpc	r13, r25
    1344:	ea 06       	cpc	r14, r26
    1346:	fb 06       	cpc	r15, r27
    1348:	08 f4       	brcc	.+2      	; 0x134c <create_chain+0x86>
    134a:	81 c0       	rjmp	.+258    	; 0x144e <create_chain+0x188>
    134c:	53 01       	movw	r10, r6
    134e:	42 01       	movw	r8, r4
    1350:	04 c0       	rjmp	.+8      	; 0x135a <create_chain+0x94>
    1352:	81 2c       	mov	r8, r1
    1354:	91 2c       	mov	r9, r1
    1356:	54 01       	movw	r10, r8
    1358:	83 94       	inc	r8
    135a:	75 01       	movw	r14, r10
    135c:	64 01       	movw	r12, r8
    135e:	8f ef       	ldi	r24, 0xFF	; 255
    1360:	c8 1a       	sub	r12, r24
    1362:	d8 0a       	sbc	r13, r24
    1364:	e8 0a       	sbc	r14, r24
    1366:	f8 0a       	sbc	r15, r24
    1368:	8a 8d       	ldd	r24, Y+26	; 0x1a
    136a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    136c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    136e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1370:	c8 16       	cp	r12, r24
    1372:	d9 06       	cpc	r13, r25
    1374:	ea 06       	cpc	r14, r26
    1376:	fb 06       	cpc	r15, r27
    1378:	60 f0       	brcs	.+24     	; 0x1392 <create_chain+0xcc>
    137a:	22 e0       	ldi	r18, 0x02	; 2
    137c:	82 16       	cp	r8, r18
    137e:	91 04       	cpc	r9, r1
    1380:	a1 04       	cpc	r10, r1
    1382:	b1 04       	cpc	r11, r1
    1384:	08 f4       	brcc	.+2      	; 0x1388 <create_chain+0xc2>
    1386:	68 c0       	rjmp	.+208    	; 0x1458 <create_chain+0x192>
    1388:	c1 2c       	mov	r12, r1
    138a:	d1 2c       	mov	r13, r1
    138c:	76 01       	movw	r14, r12
    138e:	68 94       	set
    1390:	c1 f8       	bld	r12, 1
    1392:	b7 01       	movw	r22, r14
    1394:	a6 01       	movw	r20, r12
    1396:	ce 01       	movw	r24, r28
    1398:	0e 94 a8 06 	call	0xd50	; 0xd50 <get_fat>
    139c:	61 15       	cp	r22, r1
    139e:	71 05       	cpc	r23, r1
    13a0:	81 05       	cpc	r24, r1
    13a2:	91 05       	cpc	r25, r1
    13a4:	99 f0       	breq	.+38     	; 0x13cc <create_chain+0x106>
    13a6:	6f 3f       	cpi	r22, 0xFF	; 255
    13a8:	2f ef       	ldi	r18, 0xFF	; 255
    13aa:	72 07       	cpc	r23, r18
    13ac:	82 07       	cpc	r24, r18
    13ae:	92 07       	cpc	r25, r18
    13b0:	09 f4       	brne	.+2      	; 0x13b4 <create_chain+0xee>
    13b2:	57 c0       	rjmp	.+174    	; 0x1462 <create_chain+0x19c>
    13b4:	61 30       	cpi	r22, 0x01	; 1
    13b6:	71 05       	cpc	r23, r1
    13b8:	81 05       	cpc	r24, r1
    13ba:	91 05       	cpc	r25, r1
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <create_chain+0xfa>
    13be:	56 c0       	rjmp	.+172    	; 0x146c <create_chain+0x1a6>
    13c0:	c8 14       	cp	r12, r8
    13c2:	d9 04       	cpc	r13, r9
    13c4:	ea 04       	cpc	r14, r10
    13c6:	fb 04       	cpc	r15, r11
    13c8:	51 f6       	brne	.-108    	; 0x135e <create_chain+0x98>
    13ca:	55 c0       	rjmp	.+170    	; 0x1476 <create_chain+0x1b0>
    13cc:	0f ef       	ldi	r16, 0xFF	; 255
    13ce:	1f ef       	ldi	r17, 0xFF	; 255
    13d0:	2f ef       	ldi	r18, 0xFF	; 255
    13d2:	3f e0       	ldi	r19, 0x0F	; 15
    13d4:	b7 01       	movw	r22, r14
    13d6:	a6 01       	movw	r20, r12
    13d8:	ce 01       	movw	r24, r28
    13da:	0e 94 43 08 	call	0x1086	; 0x1086 <put_fat>
    13de:	81 11       	cpse	r24, r1
    13e0:	2a c0       	rjmp	.+84     	; 0x1436 <create_chain+0x170>
    13e2:	41 14       	cp	r4, r1
    13e4:	51 04       	cpc	r5, r1
    13e6:	61 04       	cpc	r6, r1
    13e8:	71 04       	cpc	r7, r1
    13ea:	49 f0       	breq	.+18     	; 0x13fe <create_chain+0x138>
    13ec:	97 01       	movw	r18, r14
    13ee:	86 01       	movw	r16, r12
    13f0:	b3 01       	movw	r22, r6
    13f2:	a2 01       	movw	r20, r4
    13f4:	ce 01       	movw	r24, r28
    13f6:	0e 94 43 08 	call	0x1086	; 0x1086 <put_fat>
    13fa:	81 11       	cpse	r24, r1
    13fc:	1c c0       	rjmp	.+56     	; 0x1436 <create_chain+0x170>
    13fe:	ca 86       	std	Y+10, r12	; 0x0a
    1400:	db 86       	std	Y+11, r13	; 0x0b
    1402:	ec 86       	std	Y+12, r14	; 0x0c
    1404:	fd 86       	std	Y+13, r15	; 0x0d
    1406:	8e 85       	ldd	r24, Y+14	; 0x0e
    1408:	9f 85       	ldd	r25, Y+15	; 0x0f
    140a:	a8 89       	ldd	r26, Y+16	; 0x10
    140c:	b9 89       	ldd	r27, Y+17	; 0x11
    140e:	8f 3f       	cpi	r24, 0xFF	; 255
    1410:	2f ef       	ldi	r18, 0xFF	; 255
    1412:	92 07       	cpc	r25, r18
    1414:	a2 07       	cpc	r26, r18
    1416:	b2 07       	cpc	r27, r18
    1418:	99 f1       	breq	.+102    	; 0x1480 <create_chain+0x1ba>
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	a1 09       	sbc	r26, r1
    141e:	b1 09       	sbc	r27, r1
    1420:	8e 87       	std	Y+14, r24	; 0x0e
    1422:	9f 87       	std	Y+15, r25	; 0x0f
    1424:	a8 8b       	std	Y+16, r26	; 0x10
    1426:	b9 8b       	std	Y+17, r27	; 0x11
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	8d 83       	std	Y+5, r24	; 0x05
    142c:	6c 2d       	mov	r22, r12
    142e:	7d 2d       	mov	r23, r13
    1430:	8e 2d       	mov	r24, r14
    1432:	9f 2d       	mov	r25, r15
    1434:	2e c0       	rjmp	.+92     	; 0x1492 <create_chain+0x1cc>
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	41 f1       	breq	.+80     	; 0x148a <create_chain+0x1c4>
    143a:	61 e0       	ldi	r22, 0x01	; 1
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	27 c0       	rjmp	.+78     	; 0x1492 <create_chain+0x1cc>
    1444:	61 e0       	ldi	r22, 0x01	; 1
    1446:	70 e0       	ldi	r23, 0x00	; 0
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	22 c0       	rjmp	.+68     	; 0x1492 <create_chain+0x1cc>
    144e:	6c 2d       	mov	r22, r12
    1450:	7d 2d       	mov	r23, r13
    1452:	8e 2d       	mov	r24, r14
    1454:	9f 2d       	mov	r25, r15
    1456:	1d c0       	rjmp	.+58     	; 0x1492 <create_chain+0x1cc>
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	18 c0       	rjmp	.+48     	; 0x1492 <create_chain+0x1cc>
    1462:	6f ef       	ldi	r22, 0xFF	; 255
    1464:	7f ef       	ldi	r23, 0xFF	; 255
    1466:	8f ef       	ldi	r24, 0xFF	; 255
    1468:	9f ef       	ldi	r25, 0xFF	; 255
    146a:	13 c0       	rjmp	.+38     	; 0x1492 <create_chain+0x1cc>
    146c:	61 e0       	ldi	r22, 0x01	; 1
    146e:	70 e0       	ldi	r23, 0x00	; 0
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	0e c0       	rjmp	.+28     	; 0x1492 <create_chain+0x1cc>
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	09 c0       	rjmp	.+18     	; 0x1492 <create_chain+0x1cc>
    1480:	6c 2d       	mov	r22, r12
    1482:	7d 2d       	mov	r23, r13
    1484:	8e 2d       	mov	r24, r14
    1486:	9f 2d       	mov	r25, r15
    1488:	04 c0       	rjmp	.+8      	; 0x1492 <create_chain+0x1cc>
    148a:	6f ef       	ldi	r22, 0xFF	; 255
    148c:	7f ef       	ldi	r23, 0xFF	; 255
    148e:	8f ef       	ldi	r24, 0xFF	; 255
    1490:	9f ef       	ldi	r25, 0xFF	; 255
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	1f 91       	pop	r17
    1498:	0f 91       	pop	r16
    149a:	ff 90       	pop	r15
    149c:	ef 90       	pop	r14
    149e:	df 90       	pop	r13
    14a0:	cf 90       	pop	r12
    14a2:	bf 90       	pop	r11
    14a4:	af 90       	pop	r10
    14a6:	9f 90       	pop	r9
    14a8:	8f 90       	pop	r8
    14aa:	7f 90       	pop	r7
    14ac:	6f 90       	pop	r6
    14ae:	5f 90       	pop	r5
    14b0:	4f 90       	pop	r4
    14b2:	08 95       	ret

000014b4 <dir_next>:
    14b4:	8f 92       	push	r8
    14b6:	9f 92       	push	r9
    14b8:	af 92       	push	r10
    14ba:	bf 92       	push	r11
    14bc:	cf 92       	push	r12
    14be:	df 92       	push	r13
    14c0:	ef 92       	push	r14
    14c2:	ff 92       	push	r15
    14c4:	0f 93       	push	r16
    14c6:	1f 93       	push	r17
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	dc 01       	movw	r26, r24
    14ce:	14 96       	adiw	r26, 0x04	; 4
    14d0:	cd 91       	ld	r28, X+
    14d2:	dc 91       	ld	r29, X
    14d4:	15 97       	sbiw	r26, 0x05	; 5
    14d6:	21 96       	adiw	r28, 0x01	; 1
    14d8:	09 f4       	brne	.+2      	; 0x14dc <dir_next+0x28>
    14da:	02 c1       	rjmp	.+516    	; 0x16e0 <dir_next+0x22c>
    14dc:	1e 96       	adiw	r26, 0x0e	; 14
    14de:	8d 90       	ld	r8, X+
    14e0:	9d 90       	ld	r9, X+
    14e2:	ad 90       	ld	r10, X+
    14e4:	bc 90       	ld	r11, X
    14e6:	51 97       	sbiw	r26, 0x11	; 17
    14e8:	81 14       	cp	r8, r1
    14ea:	91 04       	cpc	r9, r1
    14ec:	a1 04       	cpc	r10, r1
    14ee:	b1 04       	cpc	r11, r1
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <dir_next+0x40>
    14f2:	f8 c0       	rjmp	.+496    	; 0x16e4 <dir_next+0x230>
    14f4:	7b 01       	movw	r14, r22
    14f6:	8c 01       	movw	r16, r24
    14f8:	6e 01       	movw	r12, r28
    14fa:	bf e0       	ldi	r27, 0x0F	; 15
    14fc:	cb 22       	and	r12, r27
    14fe:	dd 24       	eor	r13, r13
    1500:	c1 14       	cp	r12, r1
    1502:	d1 04       	cpc	r13, r1
    1504:	09 f0       	breq	.+2      	; 0x1508 <dir_next+0x54>
    1506:	d6 c0       	rjmp	.+428    	; 0x16b4 <dir_next+0x200>
    1508:	ef ef       	ldi	r30, 0xFF	; 255
    150a:	8e 1a       	sub	r8, r30
    150c:	9e 0a       	sbc	r9, r30
    150e:	ae 0a       	sbc	r10, r30
    1510:	be 0a       	sbc	r11, r30
    1512:	dc 01       	movw	r26, r24
    1514:	1e 96       	adiw	r26, 0x0e	; 14
    1516:	8d 92       	st	X+, r8
    1518:	9d 92       	st	X+, r9
    151a:	ad 92       	st	X+, r10
    151c:	bc 92       	st	X, r11
    151e:	51 97       	sbiw	r26, 0x11	; 17
    1520:	1a 96       	adiw	r26, 0x0a	; 10
    1522:	4d 91       	ld	r20, X+
    1524:	5d 91       	ld	r21, X+
    1526:	6d 91       	ld	r22, X+
    1528:	7c 91       	ld	r23, X
    152a:	1d 97       	sbiw	r26, 0x0d	; 13
    152c:	41 15       	cp	r20, r1
    152e:	51 05       	cpc	r21, r1
    1530:	61 05       	cpc	r22, r1
    1532:	71 05       	cpc	r23, r1
    1534:	49 f4       	brne	.+18     	; 0x1548 <dir_next+0x94>
    1536:	ed 91       	ld	r30, X+
    1538:	fc 91       	ld	r31, X
    153a:	80 85       	ldd	r24, Z+8	; 0x08
    153c:	91 85       	ldd	r25, Z+9	; 0x09
    153e:	c8 17       	cp	r28, r24
    1540:	d9 07       	cpc	r29, r25
    1542:	08 f0       	brcs	.+2      	; 0x1546 <dir_next+0x92>
    1544:	d1 c0       	rjmp	.+418    	; 0x16e8 <dir_next+0x234>
    1546:	b6 c0       	rjmp	.+364    	; 0x16b4 <dir_next+0x200>
    1548:	dc 01       	movw	r26, r24
    154a:	ed 91       	ld	r30, X+
    154c:	fc 91       	ld	r31, X
    154e:	22 81       	ldd	r18, Z+2	; 0x02
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	21 50       	subi	r18, 0x01	; 1
    1554:	31 09       	sbc	r19, r1
    1556:	ce 01       	movw	r24, r28
    1558:	92 95       	swap	r25
    155a:	82 95       	swap	r24
    155c:	8f 70       	andi	r24, 0x0F	; 15
    155e:	89 27       	eor	r24, r25
    1560:	9f 70       	andi	r25, 0x0F	; 15
    1562:	89 27       	eor	r24, r25
    1564:	28 23       	and	r18, r24
    1566:	39 23       	and	r19, r25
    1568:	23 2b       	or	r18, r19
    156a:	09 f0       	breq	.+2      	; 0x156e <dir_next+0xba>
    156c:	a3 c0       	rjmp	.+326    	; 0x16b4 <dir_next+0x200>
    156e:	cf 01       	movw	r24, r30
    1570:	0e 94 a8 06 	call	0xd50	; 0xd50 <get_fat>
    1574:	4b 01       	movw	r8, r22
    1576:	5c 01       	movw	r10, r24
    1578:	62 30       	cpi	r22, 0x02	; 2
    157a:	71 05       	cpc	r23, r1
    157c:	81 05       	cpc	r24, r1
    157e:	91 05       	cpc	r25, r1
    1580:	08 f4       	brcc	.+2      	; 0x1584 <dir_next+0xd0>
    1582:	b4 c0       	rjmp	.+360    	; 0x16ec <dir_next+0x238>
    1584:	6f 3f       	cpi	r22, 0xFF	; 255
    1586:	7f 4f       	sbci	r23, 0xFF	; 255
    1588:	8f 4f       	sbci	r24, 0xFF	; 255
    158a:	9f 4f       	sbci	r25, 0xFF	; 255
    158c:	09 f4       	brne	.+2      	; 0x1590 <dir_next+0xdc>
    158e:	b0 c0       	rjmp	.+352    	; 0x16f0 <dir_next+0x23c>
    1590:	d8 01       	movw	r26, r16
    1592:	ed 91       	ld	r30, X+
    1594:	fc 91       	ld	r31, X
    1596:	82 8d       	ldd	r24, Z+26	; 0x1a
    1598:	93 8d       	ldd	r25, Z+27	; 0x1b
    159a:	a4 8d       	ldd	r26, Z+28	; 0x1c
    159c:	b5 8d       	ldd	r27, Z+29	; 0x1d
    159e:	88 16       	cp	r8, r24
    15a0:	99 06       	cpc	r9, r25
    15a2:	aa 06       	cpc	r10, r26
    15a4:	bb 06       	cpc	r11, r27
    15a6:	08 f4       	brcc	.+2      	; 0x15aa <dir_next+0xf6>
    15a8:	73 c0       	rjmp	.+230    	; 0x1690 <dir_next+0x1dc>
    15aa:	ef 28       	or	r14, r15
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <dir_next+0xfc>
    15ae:	a2 c0       	rjmp	.+324    	; 0x16f4 <dir_next+0x240>
    15b0:	d8 01       	movw	r26, r16
    15b2:	1a 96       	adiw	r26, 0x0a	; 10
    15b4:	4d 91       	ld	r20, X+
    15b6:	5d 91       	ld	r21, X+
    15b8:	6d 91       	ld	r22, X+
    15ba:	7c 91       	ld	r23, X
    15bc:	1d 97       	sbiw	r26, 0x0d	; 13
    15be:	cf 01       	movw	r24, r30
    15c0:	0e 94 63 09 	call	0x12c6	; 0x12c6 <create_chain>
    15c4:	4b 01       	movw	r8, r22
    15c6:	5c 01       	movw	r10, r24
    15c8:	61 15       	cp	r22, r1
    15ca:	71 05       	cpc	r23, r1
    15cc:	81 05       	cpc	r24, r1
    15ce:	91 05       	cpc	r25, r1
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <dir_next+0x120>
    15d2:	92 c0       	rjmp	.+292    	; 0x16f8 <dir_next+0x244>
    15d4:	61 30       	cpi	r22, 0x01	; 1
    15d6:	71 05       	cpc	r23, r1
    15d8:	81 05       	cpc	r24, r1
    15da:	91 05       	cpc	r25, r1
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <dir_next+0x12c>
    15de:	8e c0       	rjmp	.+284    	; 0x16fc <dir_next+0x248>
    15e0:	6f 3f       	cpi	r22, 0xFF	; 255
    15e2:	7f 4f       	sbci	r23, 0xFF	; 255
    15e4:	8f 4f       	sbci	r24, 0xFF	; 255
    15e6:	9f 4f       	sbci	r25, 0xFF	; 255
    15e8:	09 f4       	brne	.+2      	; 0x15ec <dir_next+0x138>
    15ea:	8a c0       	rjmp	.+276    	; 0x1700 <dir_next+0x24c>
    15ec:	40 e0       	ldi	r20, 0x00	; 0
    15ee:	50 e0       	ldi	r21, 0x00	; 0
    15f0:	ba 01       	movw	r22, r20
    15f2:	d8 01       	movw	r26, r16
    15f4:	8d 91       	ld	r24, X+
    15f6:	9c 91       	ld	r25, X
    15f8:	0e 94 62 02 	call	0x4c4	; 0x4c4 <move_window>
    15fc:	81 11       	cpse	r24, r1
    15fe:	82 c0       	rjmp	.+260    	; 0x1704 <dir_next+0x250>
    1600:	f8 01       	movw	r30, r16
    1602:	80 81       	ld	r24, Z
    1604:	91 81       	ldd	r25, Z+1	; 0x01
    1606:	fc 01       	movw	r30, r24
    1608:	f2 96       	adiw	r30, 0x32	; 50
    160a:	8e 5c       	subi	r24, 0xCE	; 206
    160c:	9d 4f       	sbci	r25, 0xFD	; 253
    160e:	11 92       	st	Z+, r1
    1610:	e8 17       	cp	r30, r24
    1612:	f9 07       	cpc	r31, r25
    1614:	e1 f7       	brne	.-8      	; 0x160e <dir_next+0x15a>
    1616:	d8 01       	movw	r26, r16
    1618:	ed 90       	ld	r14, X+
    161a:	fc 90       	ld	r15, X
    161c:	b5 01       	movw	r22, r10
    161e:	a4 01       	movw	r20, r8
    1620:	c7 01       	movw	r24, r14
    1622:	0e 94 80 06 	call	0xd00	; 0xd00 <clust2sect>
    1626:	f7 01       	movw	r30, r14
    1628:	66 a7       	std	Z+46, r22	; 0x2e
    162a:	77 a7       	std	Z+47, r23	; 0x2f
    162c:	80 ab       	std	Z+48, r24	; 0x30
    162e:	91 ab       	std	Z+49, r25	; 0x31
    1630:	f1 2c       	mov	r15, r1
    1632:	ee 24       	eor	r14, r14
    1634:	e3 94       	inc	r14
    1636:	1a c0       	rjmp	.+52     	; 0x166c <dir_next+0x1b8>
    1638:	e4 82       	std	Z+4, r14	; 0x04
    163a:	40 e0       	ldi	r20, 0x00	; 0
    163c:	50 e0       	ldi	r21, 0x00	; 0
    163e:	ba 01       	movw	r22, r20
    1640:	d8 01       	movw	r26, r16
    1642:	8d 91       	ld	r24, X+
    1644:	9c 91       	ld	r25, X
    1646:	0e 94 62 02 	call	0x4c4	; 0x4c4 <move_window>
    164a:	81 11       	cpse	r24, r1
    164c:	5d c0       	rjmp	.+186    	; 0x1708 <dir_next+0x254>
    164e:	d8 01       	movw	r26, r16
    1650:	ed 91       	ld	r30, X+
    1652:	fc 91       	ld	r31, X
    1654:	86 a5       	ldd	r24, Z+46	; 0x2e
    1656:	97 a5       	ldd	r25, Z+47	; 0x2f
    1658:	a0 a9       	ldd	r26, Z+48	; 0x30
    165a:	b1 a9       	ldd	r27, Z+49	; 0x31
    165c:	01 96       	adiw	r24, 0x01	; 1
    165e:	a1 1d       	adc	r26, r1
    1660:	b1 1d       	adc	r27, r1
    1662:	86 a7       	std	Z+46, r24	; 0x2e
    1664:	97 a7       	std	Z+47, r25	; 0x2f
    1666:	a0 ab       	std	Z+48, r26	; 0x30
    1668:	b1 ab       	std	Z+49, r27	; 0x31
    166a:	f3 94       	inc	r15
    166c:	d8 01       	movw	r26, r16
    166e:	ed 91       	ld	r30, X+
    1670:	fc 91       	ld	r31, X
    1672:	82 81       	ldd	r24, Z+2	; 0x02
    1674:	f8 16       	cp	r15, r24
    1676:	00 f3       	brcs	.-64     	; 0x1638 <dir_next+0x184>
    1678:	86 a5       	ldd	r24, Z+46	; 0x2e
    167a:	97 a5       	ldd	r25, Z+47	; 0x2f
    167c:	a0 a9       	ldd	r26, Z+48	; 0x30
    167e:	b1 a9       	ldd	r27, Z+49	; 0x31
    1680:	8f 19       	sub	r24, r15
    1682:	91 09       	sbc	r25, r1
    1684:	a1 09       	sbc	r26, r1
    1686:	b1 09       	sbc	r27, r1
    1688:	86 a7       	std	Z+46, r24	; 0x2e
    168a:	97 a7       	std	Z+47, r25	; 0x2f
    168c:	a0 ab       	std	Z+48, r26	; 0x30
    168e:	b1 ab       	std	Z+49, r27	; 0x31
    1690:	f8 01       	movw	r30, r16
    1692:	82 86       	std	Z+10, r8	; 0x0a
    1694:	93 86       	std	Z+11, r9	; 0x0b
    1696:	a4 86       	std	Z+12, r10	; 0x0c
    1698:	b5 86       	std	Z+13, r11	; 0x0d
    169a:	b5 01       	movw	r22, r10
    169c:	a4 01       	movw	r20, r8
    169e:	80 81       	ld	r24, Z
    16a0:	91 81       	ldd	r25, Z+1	; 0x01
    16a2:	0e 94 80 06 	call	0xd00	; 0xd00 <clust2sect>
    16a6:	d8 01       	movw	r26, r16
    16a8:	1e 96       	adiw	r26, 0x0e	; 14
    16aa:	6d 93       	st	X+, r22
    16ac:	7d 93       	st	X+, r23
    16ae:	8d 93       	st	X+, r24
    16b0:	9c 93       	st	X, r25
    16b2:	51 97       	sbiw	r26, 0x11	; 17
    16b4:	f8 01       	movw	r30, r16
    16b6:	d5 83       	std	Z+5, r29	; 0x05
    16b8:	c4 83       	std	Z+4, r28	; 0x04
    16ba:	80 81       	ld	r24, Z
    16bc:	91 81       	ldd	r25, Z+1	; 0x01
    16be:	c2 96       	adiw	r24, 0x32	; 50
    16c0:	cc 0c       	add	r12, r12
    16c2:	dd 1c       	adc	r13, r13
    16c4:	cc 0c       	add	r12, r12
    16c6:	dd 1c       	adc	r13, r13
    16c8:	cc 0c       	add	r12, r12
    16ca:	dd 1c       	adc	r13, r13
    16cc:	cc 0c       	add	r12, r12
    16ce:	dd 1c       	adc	r13, r13
    16d0:	cc 0c       	add	r12, r12
    16d2:	dd 1c       	adc	r13, r13
    16d4:	c8 0e       	add	r12, r24
    16d6:	d9 1e       	adc	r13, r25
    16d8:	d3 8a       	std	Z+19, r13	; 0x13
    16da:	c2 8a       	std	Z+18, r12	; 0x12
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	15 c0       	rjmp	.+42     	; 0x170a <dir_next+0x256>
    16e0:	84 e0       	ldi	r24, 0x04	; 4
    16e2:	13 c0       	rjmp	.+38     	; 0x170a <dir_next+0x256>
    16e4:	84 e0       	ldi	r24, 0x04	; 4
    16e6:	11 c0       	rjmp	.+34     	; 0x170a <dir_next+0x256>
    16e8:	84 e0       	ldi	r24, 0x04	; 4
    16ea:	0f c0       	rjmp	.+30     	; 0x170a <dir_next+0x256>
    16ec:	82 e0       	ldi	r24, 0x02	; 2
    16ee:	0d c0       	rjmp	.+26     	; 0x170a <dir_next+0x256>
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	0b c0       	rjmp	.+22     	; 0x170a <dir_next+0x256>
    16f4:	84 e0       	ldi	r24, 0x04	; 4
    16f6:	09 c0       	rjmp	.+18     	; 0x170a <dir_next+0x256>
    16f8:	87 e0       	ldi	r24, 0x07	; 7
    16fa:	07 c0       	rjmp	.+14     	; 0x170a <dir_next+0x256>
    16fc:	82 e0       	ldi	r24, 0x02	; 2
    16fe:	05 c0       	rjmp	.+10     	; 0x170a <dir_next+0x256>
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	03 c0       	rjmp	.+6      	; 0x170a <dir_next+0x256>
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	01 c0       	rjmp	.+2      	; 0x170a <dir_next+0x256>
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	ff 90       	pop	r15
    1714:	ef 90       	pop	r14
    1716:	df 90       	pop	r13
    1718:	cf 90       	pop	r12
    171a:	bf 90       	pop	r11
    171c:	af 90       	pop	r10
    171e:	9f 90       	pop	r9
    1720:	8f 90       	pop	r8
    1722:	08 95       	ret

00001724 <follow_path>:
    1724:	2f 92       	push	r2
    1726:	3f 92       	push	r3
    1728:	4f 92       	push	r4
    172a:	5f 92       	push	r5
    172c:	6f 92       	push	r6
    172e:	7f 92       	push	r7
    1730:	8f 92       	push	r8
    1732:	9f 92       	push	r9
    1734:	af 92       	push	r10
    1736:	bf 92       	push	r11
    1738:	cf 92       	push	r12
    173a:	df 92       	push	r13
    173c:	ef 92       	push	r14
    173e:	ff 92       	push	r15
    1740:	0f 93       	push	r16
    1742:	1f 93       	push	r17
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    1748:	00 d0       	rcall	.+0      	; 0x174a <follow_path+0x26>
    174a:	00 d0       	rcall	.+0      	; 0x174c <follow_path+0x28>
    174c:	1f 92       	push	r1
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	9a 83       	std	Y+2, r25	; 0x02
    1754:	89 83       	std	Y+1, r24	; 0x01
    1756:	4b 01       	movw	r8, r22
    1758:	db 01       	movw	r26, r22
    175a:	8c 91       	ld	r24, X
    175c:	8f 32       	cpi	r24, 0x2F	; 47
    175e:	11 f0       	breq	.+4      	; 0x1764 <follow_path+0x40>
    1760:	8c 35       	cpi	r24, 0x5C	; 92
    1762:	51 f4       	brne	.+20     	; 0x1778 <follow_path+0x54>
    1764:	bf ef       	ldi	r27, 0xFF	; 255
    1766:	8b 1a       	sub	r8, r27
    1768:	9b 0a       	sbc	r9, r27
    176a:	e9 81       	ldd	r30, Y+1	; 0x01
    176c:	fa 81       	ldd	r31, Y+2	; 0x02
    176e:	16 82       	std	Z+6, r1	; 0x06
    1770:	17 82       	std	Z+7, r1	; 0x07
    1772:	10 86       	std	Z+8, r1	; 0x08
    1774:	11 86       	std	Z+9, r1	; 0x09
    1776:	0e c0       	rjmp	.+28     	; 0x1794 <follow_path+0x70>
    1778:	a9 81       	ldd	r26, Y+1	; 0x01
    177a:	ba 81       	ldd	r27, Y+2	; 0x02
    177c:	ed 91       	ld	r30, X+
    177e:	fc 91       	ld	r31, X
    1780:	86 89       	ldd	r24, Z+22	; 0x16
    1782:	97 89       	ldd	r25, Z+23	; 0x17
    1784:	a0 8d       	ldd	r26, Z+24	; 0x18
    1786:	b1 8d       	ldd	r27, Z+25	; 0x19
    1788:	e9 81       	ldd	r30, Y+1	; 0x01
    178a:	fa 81       	ldd	r31, Y+2	; 0x02
    178c:	86 83       	std	Z+6, r24	; 0x06
    178e:	97 83       	std	Z+7, r25	; 0x07
    1790:	a0 87       	std	Z+8, r26	; 0x08
    1792:	b1 87       	std	Z+9, r27	; 0x09
    1794:	d4 01       	movw	r26, r8
    1796:	8c 91       	ld	r24, X
    1798:	80 32       	cpi	r24, 0x20	; 32
    179a:	58 f4       	brcc	.+22     	; 0x17b2 <follow_path+0x8e>
    179c:	60 e0       	ldi	r22, 0x00	; 0
    179e:	70 e0       	ldi	r23, 0x00	; 0
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	9a 81       	ldd	r25, Y+2	; 0x02
    17a4:	0e 94 8b 07 	call	0xf16	; 0xf16 <dir_sdi>
    17a8:	e9 81       	ldd	r30, Y+1	; 0x01
    17aa:	fa 81       	ldd	r31, Y+2	; 0x02
    17ac:	13 8a       	std	Z+19, r1	; 0x13
    17ae:	12 8a       	std	Z+18, r1	; 0x12
    17b0:	6b c1       	rjmp	.+726    	; 0x1a88 <follow_path+0x364>
    17b2:	10 e2       	ldi	r17, 0x20	; 32
    17b4:	0f 2e       	mov	r0, r31
    17b6:	fe e2       	ldi	r31, 0x2E	; 46
    17b8:	7f 2e       	mov	r7, r31
    17ba:	f0 2d       	mov	r31, r0
    17bc:	00 e0       	ldi	r16, 0x00	; 0
    17be:	b1 2c       	mov	r11, r1
    17c0:	68 94       	set
    17c2:	66 24       	eor	r6, r6
    17c4:	63 f8       	bld	r6, 3
    17c6:	51 2c       	mov	r5, r1
    17c8:	36 2c       	mov	r3, r6
    17ca:	25 2c       	mov	r2, r5
    17cc:	0f 2e       	mov	r0, r31
    17ce:	fb e0       	ldi	r31, 0x0B	; 11
    17d0:	4f 2e       	mov	r4, r31
    17d2:	f0 2d       	mov	r31, r0
    17d4:	29 81       	ldd	r18, Y+1	; 0x01
    17d6:	3a 81       	ldd	r19, Y+2	; 0x02
    17d8:	3c 83       	std	Y+4, r19	; 0x04
    17da:	2b 83       	std	Y+3, r18	; 0x03
    17dc:	eb 81       	ldd	r30, Y+3	; 0x03
    17de:	fc 81       	ldd	r31, Y+4	; 0x04
    17e0:	a4 89       	ldd	r26, Z+20	; 0x14
    17e2:	b5 89       	ldd	r27, Z+21	; 0x15
    17e4:	fd 01       	movw	r30, r26
    17e6:	cd 01       	movw	r24, r26
    17e8:	0b 96       	adiw	r24, 0x0b	; 11
    17ea:	11 93       	st	Z+, r17
    17ec:	e8 17       	cp	r30, r24
    17ee:	f9 07       	cpc	r31, r25
    17f0:	e1 f7       	brne	.-8      	; 0x17ea <follow_path+0xc6>
    17f2:	f4 01       	movw	r30, r8
    17f4:	80 81       	ld	r24, Z
    17f6:	8e 32       	cpi	r24, 0x2E	; 46
    17f8:	61 f0       	breq	.+24     	; 0x1812 <follow_path+0xee>
    17fa:	74 01       	movw	r14, r8
    17fc:	40 2f       	mov	r20, r16
    17fe:	5b 2d       	mov	r21, r11
    1800:	60 e0       	ldi	r22, 0x00	; 0
    1802:	70 e0       	ldi	r23, 0x00	; 0
    1804:	c6 2c       	mov	r12, r6
    1806:	d5 2c       	mov	r13, r5
    1808:	a1 2c       	mov	r10, r1
    180a:	ba 83       	std	Y+2, r27	; 0x02
    180c:	a9 83       	std	Y+1, r26	; 0x01
    180e:	ad 82       	std	Y+5, r10	; 0x05
    1810:	1e c0       	rjmp	.+60     	; 0x184e <follow_path+0x12a>
    1812:	7c 92       	st	X, r7
    1814:	f4 01       	movw	r30, r8
    1816:	81 81       	ldd	r24, Z+1	; 0x01
    1818:	8e 32       	cpi	r24, 0x2E	; 46
    181a:	51 f4       	brne	.+20     	; 0x1830 <follow_path+0x10c>
    181c:	11 96       	adiw	r26, 0x01	; 1
    181e:	7c 92       	st	X, r7
    1820:	11 97       	sbiw	r26, 0x01	; 1
    1822:	82 81       	ldd	r24, Z+2	; 0x02
    1824:	8e 32       	cpi	r24, 0x2E	; 46
    1826:	09 f4       	brne	.+2      	; 0x182a <follow_path+0x106>
    1828:	75 c0       	rjmp	.+234    	; 0x1914 <follow_path+0x1f0>
    182a:	23 e0       	ldi	r18, 0x03	; 3
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <follow_path+0x110>
    1830:	22 e0       	ldi	r18, 0x02	; 2
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	8f 32       	cpi	r24, 0x2F	; 47
    1836:	09 f4       	brne	.+2      	; 0x183a <follow_path+0x116>
    1838:	d6 c0       	rjmp	.+428    	; 0x19e6 <follow_path+0x2c2>
    183a:	8c 35       	cpi	r24, 0x5C	; 92
    183c:	09 f4       	brne	.+2      	; 0x1840 <follow_path+0x11c>
    183e:	d3 c0       	rjmp	.+422    	; 0x19e6 <follow_path+0x2c2>
    1840:	81 32       	cpi	r24, 0x21	; 33
    1842:	08 f4       	brcc	.+2      	; 0x1846 <follow_path+0x122>
    1844:	d4 c0       	rjmp	.+424    	; 0x19ee <follow_path+0x2ca>
    1846:	f4 c0       	rjmp	.+488    	; 0x1a30 <follow_path+0x30c>
    1848:	1b 96       	adiw	r26, 0x0b	; 11
    184a:	8c 93       	st	X, r24
    184c:	f3 c0       	rjmp	.+486    	; 0x1a34 <follow_path+0x310>
    184e:	6f 5f       	subi	r22, 0xFF	; 255
    1850:	7f 4f       	sbci	r23, 0xFF	; 255
    1852:	f7 01       	movw	r30, r14
    1854:	b1 91       	ld	r27, Z+
    1856:	7f 01       	movw	r14, r30
    1858:	b1 32       	cpi	r27, 0x21	; 33
    185a:	08 f4       	brcc	.+2      	; 0x185e <follow_path+0x13a>
    185c:	e2 c0       	rjmp	.+452    	; 0x1a22 <follow_path+0x2fe>
    185e:	bf 32       	cpi	r27, 0x2F	; 47
    1860:	09 f4       	brne	.+2      	; 0x1864 <follow_path+0x140>
    1862:	d8 c0       	rjmp	.+432    	; 0x1a14 <follow_path+0x2f0>
    1864:	bc 35       	cpi	r27, 0x5C	; 92
    1866:	09 f4       	brne	.+2      	; 0x186a <follow_path+0x146>
    1868:	d5 c0       	rjmp	.+426    	; 0x1a14 <follow_path+0x2f0>
    186a:	be 32       	cpi	r27, 0x2E	; 46
    186c:	09 f4       	brne	.+2      	; 0x1870 <follow_path+0x14c>
    186e:	06 c1       	rjmp	.+524    	; 0x1a7c <follow_path+0x358>
    1870:	4c 15       	cp	r20, r12
    1872:	5d 05       	cpc	r21, r13
    1874:	08 f0       	brcs	.+2      	; 0x1878 <follow_path+0x154>
    1876:	dc c0       	rjmp	.+440    	; 0x1a30 <follow_path+0x30c>
    1878:	09 c0       	rjmp	.+18     	; 0x188c <follow_path+0x168>
    187a:	fd 81       	ldd	r31, Y+5	; 0x05
    187c:	ff 0f       	add	r31, r31
    187e:	ff 0f       	add	r31, r31
    1880:	fd 83       	std	Y+5, r31	; 0x05
    1882:	43 2d       	mov	r20, r3
    1884:	52 2d       	mov	r21, r2
    1886:	c4 2c       	mov	r12, r4
    1888:	d1 2c       	mov	r13, r1
    188a:	e1 cf       	rjmp	.-62     	; 0x184e <follow_path+0x12a>
    188c:	bb 23       	and	r27, r27
    188e:	0c f0       	brlt	.+2      	; 0x1892 <follow_path+0x16e>
    1890:	b2 c0       	rjmp	.+356    	; 0x19f6 <follow_path+0x2d2>
    1892:	2d 81       	ldd	r18, Y+5	; 0x05
    1894:	23 60       	ori	r18, 0x03	; 3
    1896:	2d 83       	std	Y+5, r18	; 0x05
    1898:	eb 2f       	mov	r30, r27
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	ed 5c       	subi	r30, 0xCD	; 205
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	b0 81       	ld	r27, Z
    18a2:	a9 c0       	rjmp	.+338    	; 0x19f6 <follow_path+0x2d2>
    18a4:	81 91       	ld	r24, Z+
    18a6:	88 23       	and	r24, r24
    18a8:	09 f4       	brne	.+2      	; 0x18ac <follow_path+0x188>
    18aa:	ae c0       	rjmp	.+348    	; 0x1a08 <follow_path+0x2e4>
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	28 17       	cp	r18, r24
    18b0:	39 07       	cpc	r19, r25
    18b2:	c1 f7       	brne	.-16     	; 0x18a4 <follow_path+0x180>
    18b4:	2f c0       	rjmp	.+94     	; 0x1914 <follow_path+0x1f0>
    18b6:	3d 81       	ldd	r19, Y+5	; 0x05
    18b8:	32 60       	ori	r19, 0x02	; 2
    18ba:	3d 83       	std	Y+5, r19	; 0x05
    18bc:	08 c0       	rjmp	.+16     	; 0x18ce <follow_path+0x1aa>
    18be:	8f e9       	ldi	r24, 0x9F	; 159
    18c0:	8b 0f       	add	r24, r27
    18c2:	8a 31       	cpi	r24, 0x1A	; 26
    18c4:	20 f4       	brcc	.+8      	; 0x18ce <follow_path+0x1aa>
    18c6:	8d 81       	ldd	r24, Y+5	; 0x05
    18c8:	81 60       	ori	r24, 0x01	; 1
    18ca:	8d 83       	std	Y+5, r24	; 0x05
    18cc:	b0 52       	subi	r27, 0x20	; 32
    18ce:	e9 81       	ldd	r30, Y+1	; 0x01
    18d0:	fa 81       	ldd	r31, Y+2	; 0x02
    18d2:	e4 0f       	add	r30, r20
    18d4:	f5 1f       	adc	r31, r21
    18d6:	b0 83       	st	Z, r27
    18d8:	4f 5f       	subi	r20, 0xFF	; 255
    18da:	5f 4f       	sbci	r21, 0xFF	; 255
    18dc:	b8 cf       	rjmp	.-144    	; 0x184e <follow_path+0x12a>
    18de:	45 2b       	or	r20, r21
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <follow_path+0x1c0>
    18e2:	a6 c0       	rjmp	.+332    	; 0x1a30 <follow_path+0x30c>
    18e4:	9c 91       	ld	r25, X
    18e6:	95 3e       	cpi	r25, 0xE5	; 229
    18e8:	11 f4       	brne	.+4      	; 0x18ee <follow_path+0x1ca>
    18ea:	95 e0       	ldi	r25, 0x05	; 5
    18ec:	9c 93       	st	X, r25
    18ee:	e8 e0       	ldi	r30, 0x08	; 8
    18f0:	ce 16       	cp	r12, r30
    18f2:	d1 04       	cpc	r13, r1
    18f4:	11 f4       	brne	.+4      	; 0x18fa <follow_path+0x1d6>
    18f6:	aa 0c       	add	r10, r10
    18f8:	aa 0c       	add	r10, r10
    18fa:	9a 2d       	mov	r25, r10
    18fc:	93 70       	andi	r25, 0x03	; 3
    18fe:	91 30       	cpi	r25, 0x01	; 1
    1900:	09 f4       	brne	.+2      	; 0x1904 <follow_path+0x1e0>
    1902:	80 61       	ori	r24, 0x10	; 16
    1904:	9a 2d       	mov	r25, r10
    1906:	9c 70       	andi	r25, 0x0C	; 12
    1908:	94 30       	cpi	r25, 0x04	; 4
    190a:	09 f4       	brne	.+2      	; 0x190e <follow_path+0x1ea>
    190c:	88 60       	ori	r24, 0x08	; 8
    190e:	1b 96       	adiw	r26, 0x0b	; 11
    1910:	8c 93       	st	X, r24
    1912:	90 c0       	rjmp	.+288    	; 0x1a34 <follow_path+0x310>
    1914:	86 e0       	ldi	r24, 0x06	; 6
    1916:	b8 c0       	rjmp	.+368    	; 0x1a88 <follow_path+0x364>
    1918:	ab 81       	ldd	r26, Y+3	; 0x03
    191a:	bc 81       	ldd	r27, Y+4	; 0x04
    191c:	1e 96       	adiw	r26, 0x0e	; 14
    191e:	4d 91       	ld	r20, X+
    1920:	5d 91       	ld	r21, X+
    1922:	6d 91       	ld	r22, X+
    1924:	7c 91       	ld	r23, X
    1926:	51 97       	sbiw	r26, 0x11	; 17
    1928:	8d 91       	ld	r24, X+
    192a:	9c 91       	ld	r25, X
    192c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <move_window>
    1930:	81 11       	cpse	r24, r1
    1932:	99 c0       	rjmp	.+306    	; 0x1a66 <follow_path+0x342>
    1934:	eb 81       	ldd	r30, Y+3	; 0x03
    1936:	fc 81       	ldd	r31, Y+4	; 0x04
    1938:	42 89       	ldd	r20, Z+18	; 0x12
    193a:	53 89       	ldd	r21, Z+19	; 0x13
    193c:	da 01       	movw	r26, r20
    193e:	9c 91       	ld	r25, X
    1940:	99 23       	and	r25, r25
    1942:	09 f4       	brne	.+2      	; 0x1946 <follow_path+0x222>
    1944:	81 c0       	rjmp	.+258    	; 0x1a48 <follow_path+0x324>
    1946:	1b 96       	adiw	r26, 0x0b	; 11
    1948:	ec 90       	ld	r14, X
    194a:	e3 fc       	sbrc	r14, 3
    194c:	11 c0       	rjmp	.+34     	; 0x1970 <follow_path+0x24c>
    194e:	64 89       	ldd	r22, Z+20	; 0x14
    1950:	75 89       	ldd	r23, Z+21	; 0x15
    1952:	fa 01       	movw	r30, r20
    1954:	db 01       	movw	r26, r22
    1956:	6a 01       	movw	r12, r20
    1958:	2b e0       	ldi	r18, 0x0B	; 11
    195a:	c2 0e       	add	r12, r18
    195c:	d1 1c       	adc	r13, r1
    195e:	04 c0       	rjmp	.+8      	; 0x1968 <follow_path+0x244>
    1960:	ec 15       	cp	r30, r12
    1962:	fd 05       	cpc	r31, r13
    1964:	09 f4       	brne	.+2      	; 0x1968 <follow_path+0x244>
    1966:	79 c0       	rjmp	.+242    	; 0x1a5a <follow_path+0x336>
    1968:	21 91       	ld	r18, Z+
    196a:	9d 91       	ld	r25, X+
    196c:	29 17       	cp	r18, r25
    196e:	c1 f3       	breq	.-16     	; 0x1960 <follow_path+0x23c>
    1970:	60 2f       	mov	r22, r16
    1972:	7b 2d       	mov	r23, r11
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	9c 81       	ldd	r25, Y+4	; 0x04
    1978:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <dir_next>
    197c:	88 23       	and	r24, r24
    197e:	61 f2       	breq	.-104    	; 0x1918 <follow_path+0x1f4>
    1980:	72 c0       	rjmp	.+228    	; 0x1a66 <follow_path+0x342>
    1982:	95 ff       	sbrs	r25, 5
    1984:	0c c0       	rjmp	.+24     	; 0x199e <follow_path+0x27a>
    1986:	eb 81       	ldd	r30, Y+3	; 0x03
    1988:	fc 81       	ldd	r31, Y+4	; 0x04
    198a:	16 82       	std	Z+6, r1	; 0x06
    198c:	17 82       	std	Z+7, r1	; 0x07
    198e:	10 86       	std	Z+8, r1	; 0x08
    1990:	11 86       	std	Z+9, r1	; 0x09
    1992:	13 8a       	std	Z+19, r1	; 0x13
    1994:	12 8a       	std	Z+18, r1	; 0x12
    1996:	92 ff       	sbrs	r25, 2
    1998:	21 cf       	rjmp	.-446    	; 0x17dc <follow_path+0xb8>
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	75 c0       	rjmp	.+234    	; 0x1a88 <follow_path+0x364>
    199e:	92 fd       	sbrc	r25, 2
    19a0:	1e c0       	rjmp	.+60     	; 0x19de <follow_path+0x2ba>
    19a2:	85 e0       	ldi	r24, 0x05	; 5
    19a4:	71 c0       	rjmp	.+226    	; 0x1a88 <follow_path+0x364>
    19a6:	e4 fe       	sbrs	r14, 4
    19a8:	1c c0       	rjmp	.+56     	; 0x19e2 <follow_path+0x2be>
    19aa:	da 01       	movw	r26, r20
    19ac:	54 96       	adiw	r26, 0x14	; 20
    19ae:	8d 91       	ld	r24, X+
    19b0:	9c 91       	ld	r25, X
    19b2:	55 97       	sbiw	r26, 0x15	; 21
    19b4:	a0 e0       	ldi	r26, 0x00	; 0
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	dc 01       	movw	r26, r24
    19ba:	99 27       	eor	r25, r25
    19bc:	88 27       	eor	r24, r24
    19be:	fa 01       	movw	r30, r20
    19c0:	42 8d       	ldd	r20, Z+26	; 0x1a
    19c2:	53 8d       	ldd	r21, Z+27	; 0x1b
    19c4:	60 e0       	ldi	r22, 0x00	; 0
    19c6:	70 e0       	ldi	r23, 0x00	; 0
    19c8:	84 2b       	or	r24, r20
    19ca:	95 2b       	or	r25, r21
    19cc:	a6 2b       	or	r26, r22
    19ce:	b7 2b       	or	r27, r23
    19d0:	eb 81       	ldd	r30, Y+3	; 0x03
    19d2:	fc 81       	ldd	r31, Y+4	; 0x04
    19d4:	86 83       	std	Z+6, r24	; 0x06
    19d6:	97 83       	std	Z+7, r25	; 0x07
    19d8:	a0 87       	std	Z+8, r26	; 0x08
    19da:	b1 87       	std	Z+9, r27	; 0x09
    19dc:	ff ce       	rjmp	.-514    	; 0x17dc <follow_path+0xb8>
    19de:	84 e0       	ldi	r24, 0x04	; 4
    19e0:	53 c0       	rjmp	.+166    	; 0x1a88 <follow_path+0x364>
    19e2:	85 e0       	ldi	r24, 0x05	; 5
    19e4:	51 c0       	rjmp	.+162    	; 0x1a88 <follow_path+0x364>
    19e6:	82 0e       	add	r8, r18
    19e8:	93 1e       	adc	r9, r19
    19ea:	81 2f       	mov	r24, r17
    19ec:	2d cf       	rjmp	.-422    	; 0x1848 <follow_path+0x124>
    19ee:	82 0e       	add	r8, r18
    19f0:	93 1e       	adc	r9, r19
    19f2:	84 e2       	ldi	r24, 0x24	; 36
    19f4:	29 cf       	rjmp	.-430    	; 0x1848 <follow_path+0x124>
    19f6:	2b 2f       	mov	r18, r27
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	22 32       	cpi	r18, 0x22	; 34
    19fc:	31 05       	cpc	r19, r1
    19fe:	09 f4       	brne	.+2      	; 0x1a02 <follow_path+0x2de>
    1a00:	89 cf       	rjmp	.-238    	; 0x1914 <follow_path+0x1f0>
    1a02:	e5 ea       	ldi	r30, 0xA5	; 165
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	4e cf       	rjmp	.-356    	; 0x18a4 <follow_path+0x180>
    1a08:	8f eb       	ldi	r24, 0xBF	; 191
    1a0a:	8b 0f       	add	r24, r27
    1a0c:	8a 31       	cpi	r24, 0x1A	; 26
    1a0e:	08 f4       	brcc	.+2      	; 0x1a12 <follow_path+0x2ee>
    1a10:	52 cf       	rjmp	.-348    	; 0x18b6 <follow_path+0x192>
    1a12:	55 cf       	rjmp	.-342    	; 0x18be <follow_path+0x19a>
    1a14:	a9 81       	ldd	r26, Y+1	; 0x01
    1a16:	ba 81       	ldd	r27, Y+2	; 0x02
    1a18:	ad 80       	ldd	r10, Y+5	; 0x05
    1a1a:	86 0e       	add	r8, r22
    1a1c:	97 1e       	adc	r9, r23
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	5e cf       	rjmp	.-324    	; 0x18de <follow_path+0x1ba>
    1a22:	a9 81       	ldd	r26, Y+1	; 0x01
    1a24:	ba 81       	ldd	r27, Y+2	; 0x02
    1a26:	ad 80       	ldd	r10, Y+5	; 0x05
    1a28:	86 0e       	add	r8, r22
    1a2a:	97 1e       	adc	r9, r23
    1a2c:	84 e0       	ldi	r24, 0x04	; 4
    1a2e:	57 cf       	rjmp	.-338    	; 0x18de <follow_path+0x1ba>
    1a30:	86 e0       	ldi	r24, 0x06	; 6
    1a32:	2a c0       	rjmp	.+84     	; 0x1a88 <follow_path+0x364>
    1a34:	60 2f       	mov	r22, r16
    1a36:	7b 2d       	mov	r23, r11
    1a38:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3c:	0e 94 8b 07 	call	0xf16	; 0xf16 <dir_sdi>
    1a40:	88 23       	and	r24, r24
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <follow_path+0x322>
    1a44:	69 cf       	rjmp	.-302    	; 0x1918 <follow_path+0x1f4>
    1a46:	0f c0       	rjmp	.+30     	; 0x1a66 <follow_path+0x342>
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	54 96       	adiw	r26, 0x14	; 20
    1a50:	ed 91       	ld	r30, X+
    1a52:	fc 91       	ld	r31, X
    1a54:	55 97       	sbiw	r26, 0x15	; 21
    1a56:	93 85       	ldd	r25, Z+11	; 0x0b
    1a58:	94 cf       	rjmp	.-216    	; 0x1982 <follow_path+0x25e>
    1a5a:	db 01       	movw	r26, r22
    1a5c:	1b 96       	adiw	r26, 0x0b	; 11
    1a5e:	9c 91       	ld	r25, X
    1a60:	92 ff       	sbrs	r25, 2
    1a62:	a1 cf       	rjmp	.-190    	; 0x19a6 <follow_path+0x282>
    1a64:	11 c0       	rjmp	.+34     	; 0x1a88 <follow_path+0x364>
    1a66:	ab 81       	ldd	r26, Y+3	; 0x03
    1a68:	bc 81       	ldd	r27, Y+4	; 0x04
    1a6a:	54 96       	adiw	r26, 0x14	; 20
    1a6c:	ed 91       	ld	r30, X+
    1a6e:	fc 91       	ld	r31, X
    1a70:	55 97       	sbiw	r26, 0x15	; 21
    1a72:	93 85       	ldd	r25, Z+11	; 0x0b
    1a74:	84 30       	cpi	r24, 0x04	; 4
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <follow_path+0x356>
    1a78:	84 cf       	rjmp	.-248    	; 0x1982 <follow_path+0x25e>
    1a7a:	06 c0       	rjmp	.+12     	; 0x1a88 <follow_path+0x364>
    1a7c:	b8 e0       	ldi	r27, 0x08	; 8
    1a7e:	cb 16       	cp	r12, r27
    1a80:	d1 04       	cpc	r13, r1
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <follow_path+0x362>
    1a84:	fa ce       	rjmp	.-524    	; 0x187a <follow_path+0x156>
    1a86:	d4 cf       	rjmp	.-88     	; 0x1a30 <follow_path+0x30c>
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	1f 91       	pop	r17
    1a98:	0f 91       	pop	r16
    1a9a:	ff 90       	pop	r15
    1a9c:	ef 90       	pop	r14
    1a9e:	df 90       	pop	r13
    1aa0:	cf 90       	pop	r12
    1aa2:	bf 90       	pop	r11
    1aa4:	af 90       	pop	r10
    1aa6:	9f 90       	pop	r9
    1aa8:	8f 90       	pop	r8
    1aaa:	7f 90       	pop	r7
    1aac:	6f 90       	pop	r6
    1aae:	5f 90       	pop	r5
    1ab0:	4f 90       	pop	r4
    1ab2:	3f 90       	pop	r3
    1ab4:	2f 90       	pop	r2
    1ab6:	08 95       	ret

00001ab8 <dir_register>:
    1ab8:	0f 93       	push	r16
    1aba:	1f 93       	push	r17
    1abc:	cf 93       	push	r28
    1abe:	8c 01       	movw	r16, r24
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
    1ac2:	70 e0       	ldi	r23, 0x00	; 0
    1ac4:	0e 94 8b 07 	call	0xf16	; 0xf16 <dir_sdi>
    1ac8:	c8 2f       	mov	r28, r24
    1aca:	81 11       	cpse	r24, r1
    1acc:	47 c0       	rjmp	.+142    	; 0x1b5c <dir_register+0xa4>
    1ace:	d8 01       	movw	r26, r16
    1ad0:	1e 96       	adiw	r26, 0x0e	; 14
    1ad2:	4d 91       	ld	r20, X+
    1ad4:	5d 91       	ld	r21, X+
    1ad6:	6d 91       	ld	r22, X+
    1ad8:	7c 91       	ld	r23, X
    1ada:	51 97       	sbiw	r26, 0x11	; 17
    1adc:	8d 91       	ld	r24, X+
    1ade:	9c 91       	ld	r25, X
    1ae0:	0e 94 62 02 	call	0x4c4	; 0x4c4 <move_window>
    1ae4:	c8 2f       	mov	r28, r24
    1ae6:	81 11       	cpse	r24, r1
    1ae8:	39 c0       	rjmp	.+114    	; 0x1b5c <dir_register+0xa4>
    1aea:	d8 01       	movw	r26, r16
    1aec:	52 96       	adiw	r26, 0x12	; 18
    1aee:	ed 91       	ld	r30, X+
    1af0:	fc 91       	ld	r31, X
    1af2:	53 97       	sbiw	r26, 0x13	; 19
    1af4:	80 81       	ld	r24, Z
    1af6:	85 3e       	cpi	r24, 0xE5	; 229
    1af8:	29 f1       	breq	.+74     	; 0x1b44 <dir_register+0x8c>
    1afa:	88 23       	and	r24, r24
    1afc:	19 f1       	breq	.+70     	; 0x1b44 <dir_register+0x8c>
    1afe:	61 e0       	ldi	r22, 0x01	; 1
    1b00:	70 e0       	ldi	r23, 0x00	; 0
    1b02:	c8 01       	movw	r24, r16
    1b04:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <dir_next>
    1b08:	c8 2f       	mov	r28, r24
    1b0a:	88 23       	and	r24, r24
    1b0c:	01 f3       	breq	.-64     	; 0x1ace <dir_register+0x16>
    1b0e:	26 c0       	rjmp	.+76     	; 0x1b5c <dir_register+0xa4>
    1b10:	f8 01       	movw	r30, r16
    1b12:	82 89       	ldd	r24, Z+18	; 0x12
    1b14:	93 89       	ldd	r25, Z+19	; 0x13
    1b16:	fc 01       	movw	r30, r24
    1b18:	9c 01       	movw	r18, r24
    1b1a:	20 5e       	subi	r18, 0xE0	; 224
    1b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1e:	11 92       	st	Z+, r1
    1b20:	e2 17       	cp	r30, r18
    1b22:	f3 07       	cpc	r31, r19
    1b24:	e1 f7       	brne	.-8      	; 0x1b1e <dir_register+0x66>
    1b26:	d8 01       	movw	r26, r16
    1b28:	54 96       	adiw	r26, 0x14	; 20
    1b2a:	6d 91       	ld	r22, X+
    1b2c:	7c 91       	ld	r23, X
    1b2e:	55 97       	sbiw	r26, 0x15	; 21
    1b30:	4b e0       	ldi	r20, 0x0B	; 11
    1b32:	50 e0       	ldi	r21, 0x00	; 0
    1b34:	0e 94 bb 01 	call	0x376	; 0x376 <mem_cpy>
    1b38:	d8 01       	movw	r26, r16
    1b3a:	ed 91       	ld	r30, X+
    1b3c:	fc 91       	ld	r31, X
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	84 83       	std	Z+4, r24	; 0x04
    1b42:	0c c0       	rjmp	.+24     	; 0x1b5c <dir_register+0xa4>
    1b44:	f8 01       	movw	r30, r16
    1b46:	46 85       	ldd	r20, Z+14	; 0x0e
    1b48:	57 85       	ldd	r21, Z+15	; 0x0f
    1b4a:	60 89       	ldd	r22, Z+16	; 0x10
    1b4c:	71 89       	ldd	r23, Z+17	; 0x11
    1b4e:	80 81       	ld	r24, Z
    1b50:	91 81       	ldd	r25, Z+1	; 0x01
    1b52:	0e 94 62 02 	call	0x4c4	; 0x4c4 <move_window>
    1b56:	c8 2f       	mov	r28, r24
    1b58:	88 23       	and	r24, r24
    1b5a:	d1 f2       	breq	.-76     	; 0x1b10 <dir_register+0x58>
    1b5c:	8c 2f       	mov	r24, r28
    1b5e:	cf 91       	pop	r28
    1b60:	1f 91       	pop	r17
    1b62:	0f 91       	pop	r16
    1b64:	08 95       	ret

00001b66 <dir_read>:
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	ec 01       	movw	r28, r24
    1b6c:	84 e0       	ldi	r24, 0x04	; 4
    1b6e:	17 c0       	rjmp	.+46     	; 0x1b9e <dir_read+0x38>
    1b70:	88 81       	ld	r24, Y
    1b72:	99 81       	ldd	r25, Y+1	; 0x01
    1b74:	0e 94 62 02 	call	0x4c4	; 0x4c4 <move_window>
    1b78:	81 11       	cpse	r24, r1
    1b7a:	1c c0       	rjmp	.+56     	; 0x1bb4 <dir_read+0x4e>
    1b7c:	ea 89       	ldd	r30, Y+18	; 0x12
    1b7e:	fb 89       	ldd	r31, Y+19	; 0x13
    1b80:	90 81       	ld	r25, Z
    1b82:	99 23       	and	r25, r25
    1b84:	e1 f0       	breq	.+56     	; 0x1bbe <dir_read+0x58>
    1b86:	95 3e       	cpi	r25, 0xE5	; 229
    1b88:	19 f0       	breq	.+6      	; 0x1b90 <dir_read+0x2a>
    1b8a:	93 85       	ldd	r25, Z+11	; 0x0b
    1b8c:	93 ff       	sbrs	r25, 3
    1b8e:	19 c0       	rjmp	.+50     	; 0x1bc2 <dir_read+0x5c>
    1b90:	60 e0       	ldi	r22, 0x00	; 0
    1b92:	70 e0       	ldi	r23, 0x00	; 0
    1b94:	ce 01       	movw	r24, r28
    1b96:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <dir_next>
    1b9a:	81 11       	cpse	r24, r1
    1b9c:	0b c0       	rjmp	.+22     	; 0x1bb4 <dir_read+0x4e>
    1b9e:	4e 85       	ldd	r20, Y+14	; 0x0e
    1ba0:	5f 85       	ldd	r21, Y+15	; 0x0f
    1ba2:	68 89       	ldd	r22, Y+16	; 0x10
    1ba4:	79 89       	ldd	r23, Y+17	; 0x11
    1ba6:	41 15       	cp	r20, r1
    1ba8:	51 05       	cpc	r21, r1
    1baa:	61 05       	cpc	r22, r1
    1bac:	71 05       	cpc	r23, r1
    1bae:	01 f7       	brne	.-64     	; 0x1b70 <dir_read+0xa>
    1bb0:	88 23       	and	r24, r24
    1bb2:	39 f0       	breq	.+14     	; 0x1bc2 <dir_read+0x5c>
    1bb4:	1e 86       	std	Y+14, r1	; 0x0e
    1bb6:	1f 86       	std	Y+15, r1	; 0x0f
    1bb8:	18 8a       	std	Y+16, r1	; 0x10
    1bba:	19 8a       	std	Y+17, r1	; 0x11
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <dir_read+0x5c>
    1bbe:	84 e0       	ldi	r24, 0x04	; 4
    1bc0:	f9 cf       	rjmp	.-14     	; 0x1bb4 <dir_read+0x4e>
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	08 95       	ret

00001bc8 <remove_chain>:
    1bc8:	7f 92       	push	r7
    1bca:	8f 92       	push	r8
    1bcc:	9f 92       	push	r9
    1bce:	af 92       	push	r10
    1bd0:	bf 92       	push	r11
    1bd2:	cf 92       	push	r12
    1bd4:	df 92       	push	r13
    1bd6:	ef 92       	push	r14
    1bd8:	ff 92       	push	r15
    1bda:	0f 93       	push	r16
    1bdc:	1f 93       	push	r17
    1bde:	cf 93       	push	r28
    1be0:	df 93       	push	r29
    1be2:	ec 01       	movw	r28, r24
    1be4:	6a 01       	movw	r12, r20
    1be6:	7b 01       	movw	r14, r22
    1be8:	42 30       	cpi	r20, 0x02	; 2
    1bea:	51 05       	cpc	r21, r1
    1bec:	61 05       	cpc	r22, r1
    1bee:	71 05       	cpc	r23, r1
    1bf0:	08 f4       	brcc	.+2      	; 0x1bf4 <remove_chain+0x2c>
    1bf2:	4c c0       	rjmp	.+152    	; 0x1c8c <remove_chain+0xc4>
    1bf4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1bf6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1bf8:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1bfa:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1bfc:	48 17       	cp	r20, r24
    1bfe:	59 07       	cpc	r21, r25
    1c00:	6a 07       	cpc	r22, r26
    1c02:	7b 07       	cpc	r23, r27
    1c04:	08 f0       	brcs	.+2      	; 0x1c08 <remove_chain+0x40>
    1c06:	44 c0       	rjmp	.+136    	; 0x1c90 <remove_chain+0xc8>
    1c08:	77 24       	eor	r7, r7
    1c0a:	73 94       	inc	r7
    1c0c:	b7 01       	movw	r22, r14
    1c0e:	a6 01       	movw	r20, r12
    1c10:	ce 01       	movw	r24, r28
    1c12:	0e 94 a8 06 	call	0xd50	; 0xd50 <get_fat>
    1c16:	4b 01       	movw	r8, r22
    1c18:	5c 01       	movw	r10, r24
    1c1a:	67 2b       	or	r22, r23
    1c1c:	68 2b       	or	r22, r24
    1c1e:	69 2b       	or	r22, r25
    1c20:	c9 f1       	breq	.+114    	; 0x1c94 <remove_chain+0xcc>
    1c22:	91 e0       	ldi	r25, 0x01	; 1
    1c24:	89 16       	cp	r8, r25
    1c26:	91 04       	cpc	r9, r1
    1c28:	a1 04       	cpc	r10, r1
    1c2a:	b1 04       	cpc	r11, r1
    1c2c:	a9 f1       	breq	.+106    	; 0x1c98 <remove_chain+0xd0>
    1c2e:	8f ef       	ldi	r24, 0xFF	; 255
    1c30:	88 16       	cp	r8, r24
    1c32:	98 06       	cpc	r9, r24
    1c34:	a8 06       	cpc	r10, r24
    1c36:	b8 06       	cpc	r11, r24
    1c38:	89 f1       	breq	.+98     	; 0x1c9c <remove_chain+0xd4>
    1c3a:	00 e0       	ldi	r16, 0x00	; 0
    1c3c:	10 e0       	ldi	r17, 0x00	; 0
    1c3e:	98 01       	movw	r18, r16
    1c40:	b7 01       	movw	r22, r14
    1c42:	a6 01       	movw	r20, r12
    1c44:	ce 01       	movw	r24, r28
    1c46:	0e 94 43 08 	call	0x1086	; 0x1086 <put_fat>
    1c4a:	81 11       	cpse	r24, r1
    1c4c:	28 c0       	rjmp	.+80     	; 0x1c9e <remove_chain+0xd6>
    1c4e:	4e 85       	ldd	r20, Y+14	; 0x0e
    1c50:	5f 85       	ldd	r21, Y+15	; 0x0f
    1c52:	68 89       	ldd	r22, Y+16	; 0x10
    1c54:	79 89       	ldd	r23, Y+17	; 0x11
    1c56:	4f 3f       	cpi	r20, 0xFF	; 255
    1c58:	9f ef       	ldi	r25, 0xFF	; 255
    1c5a:	59 07       	cpc	r21, r25
    1c5c:	69 07       	cpc	r22, r25
    1c5e:	79 07       	cpc	r23, r25
    1c60:	49 f0       	breq	.+18     	; 0x1c74 <remove_chain+0xac>
    1c62:	4f 5f       	subi	r20, 0xFF	; 255
    1c64:	5f 4f       	sbci	r21, 0xFF	; 255
    1c66:	6f 4f       	sbci	r22, 0xFF	; 255
    1c68:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6a:	4e 87       	std	Y+14, r20	; 0x0e
    1c6c:	5f 87       	std	Y+15, r21	; 0x0f
    1c6e:	68 8b       	std	Y+16, r22	; 0x10
    1c70:	79 8b       	std	Y+17, r23	; 0x11
    1c72:	7d 82       	std	Y+5, r7	; 0x05
    1c74:	75 01       	movw	r14, r10
    1c76:	64 01       	movw	r12, r8
    1c78:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1c7a:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1c7c:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1c7e:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1c80:	84 16       	cp	r8, r20
    1c82:	95 06       	cpc	r9, r21
    1c84:	a6 06       	cpc	r10, r22
    1c86:	b7 06       	cpc	r11, r23
    1c88:	08 f2       	brcs	.-126    	; 0x1c0c <remove_chain+0x44>
    1c8a:	09 c0       	rjmp	.+18     	; 0x1c9e <remove_chain+0xd6>
    1c8c:	82 e0       	ldi	r24, 0x02	; 2
    1c8e:	07 c0       	rjmp	.+14     	; 0x1c9e <remove_chain+0xd6>
    1c90:	82 e0       	ldi	r24, 0x02	; 2
    1c92:	05 c0       	rjmp	.+10     	; 0x1c9e <remove_chain+0xd6>
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	03 c0       	rjmp	.+6      	; 0x1c9e <remove_chain+0xd6>
    1c98:	82 e0       	ldi	r24, 0x02	; 2
    1c9a:	01 c0       	rjmp	.+2      	; 0x1c9e <remove_chain+0xd6>
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	1f 91       	pop	r17
    1ca4:	0f 91       	pop	r16
    1ca6:	ff 90       	pop	r15
    1ca8:	ef 90       	pop	r14
    1caa:	df 90       	pop	r13
    1cac:	cf 90       	pop	r12
    1cae:	bf 90       	pop	r11
    1cb0:	af 90       	pop	r10
    1cb2:	9f 90       	pop	r9
    1cb4:	8f 90       	pop	r8
    1cb6:	7f 90       	pop	r7
    1cb8:	08 95       	ret

00001cba <f_mount>:
    1cba:	81 11       	cpse	r24, r1
    1cbc:	12 c0       	rjmp	.+36     	; 0x1ce2 <f_mount+0x28>
    1cbe:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <FatFs>
    1cc2:	f0 91 08 02 	lds	r31, 0x0208	; 0x800208 <FatFs+0x1>
    1cc6:	30 97       	sbiw	r30, 0x00	; 0
    1cc8:	09 f0       	breq	.+2      	; 0x1ccc <f_mount+0x12>
    1cca:	10 82       	st	Z, r1
    1ccc:	61 15       	cp	r22, r1
    1cce:	71 05       	cpc	r23, r1
    1cd0:	11 f0       	breq	.+4      	; 0x1cd6 <f_mount+0x1c>
    1cd2:	fb 01       	movw	r30, r22
    1cd4:	10 82       	st	Z, r1
    1cd6:	70 93 08 02 	sts	0x0208, r23	; 0x800208 <FatFs+0x1>
    1cda:	60 93 07 02 	sts	0x0207, r22	; 0x800207 <FatFs>
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	08 95       	ret
    1ce2:	8b e0       	ldi	r24, 0x0B	; 11
    1ce4:	08 95       	ret

00001ce6 <f_open>:
    1ce6:	4f 92       	push	r4
    1ce8:	5f 92       	push	r5
    1cea:	6f 92       	push	r6
    1cec:	7f 92       	push	r7
    1cee:	8f 92       	push	r8
    1cf0:	9f 92       	push	r9
    1cf2:	af 92       	push	r10
    1cf4:	bf 92       	push	r11
    1cf6:	cf 92       	push	r12
    1cf8:	df 92       	push	r13
    1cfa:	ef 92       	push	r14
    1cfc:	ff 92       	push	r15
    1cfe:	0f 93       	push	r16
    1d00:	1f 93       	push	r17
    1d02:	cf 93       	push	r28
    1d04:	df 93       	push	r29
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    1d0a:	a4 97       	sbiw	r28, 0x24	; 36
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	de bf       	out	0x3e, r29	; 62
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	cd bf       	out	0x3d, r28	; 61
    1d16:	8c 01       	movw	r16, r24
    1d18:	7c a3       	std	Y+36, r23	; 0x24
    1d1a:	6b a3       	std	Y+35, r22	; 0x23
    1d1c:	f4 2e       	mov	r15, r20
    1d1e:	dc 01       	movw	r26, r24
    1d20:	1d 92       	st	X+, r1
    1d22:	1c 92       	st	X, r1
    1d24:	b4 2f       	mov	r27, r20
    1d26:	bf 71       	andi	r27, 0x1F	; 31
    1d28:	eb 2e       	mov	r14, r27
    1d2a:	4e 71       	andi	r20, 0x1E	; 30
    1d2c:	be 01       	movw	r22, r28
    1d2e:	6f 5f       	subi	r22, 0xFF	; 255
    1d30:	7f 4f       	sbci	r23, 0xFF	; 255
    1d32:	ce 01       	movw	r24, r28
    1d34:	83 96       	adiw	r24, 0x23	; 35
    1d36:	0e 94 35 03 	call	0x66a	; 0x66a <chk_mounted>
    1d3a:	9e 01       	movw	r18, r28
    1d3c:	29 5e       	subi	r18, 0xE9	; 233
    1d3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d40:	3e 8b       	std	Y+22, r19	; 0x16
    1d42:	2d 8b       	std	Y+21, r18	; 0x15
    1d44:	81 11       	cpse	r24, r1
    1d46:	bd c0       	rjmp	.+378    	; 0x1ec2 <f_open+0x1dc>
    1d48:	6b a1       	ldd	r22, Y+35	; 0x23
    1d4a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d4c:	ce 01       	movw	r24, r28
    1d4e:	01 96       	adiw	r24, 0x01	; 1
    1d50:	0e 94 92 0b 	call	0x1724	; 0x1724 <follow_path>
    1d54:	cb 88       	ldd	r12, Y+19	; 0x13
    1d56:	dc 88       	ldd	r13, Y+20	; 0x14
    1d58:	81 11       	cpse	r24, r1
    1d5a:	ba c0       	rjmp	.+372    	; 0x1ed0 <f_open+0x1ea>
    1d5c:	c1 14       	cp	r12, r1
    1d5e:	d1 04       	cpc	r13, r1
    1d60:	09 f0       	breq	.+2      	; 0x1d64 <f_open+0x7e>
    1d62:	c0 c0       	rjmp	.+384    	; 0x1ee4 <f_open+0x1fe>
    1d64:	ba c0       	rjmp	.+372    	; 0x1eda <f_open+0x1f4>
    1d66:	84 30       	cpi	r24, 0x04	; 4
    1d68:	21 f4       	brne	.+8      	; 0x1d72 <f_open+0x8c>
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	01 96       	adiw	r24, 0x01	; 1
    1d6e:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <dir_register>
    1d72:	ee 2d       	mov	r30, r14
    1d74:	e8 60       	ori	r30, 0x08	; 8
    1d76:	ee 2e       	mov	r14, r30
    1d78:	cb 88       	ldd	r12, Y+19	; 0x13
    1d7a:	dc 88       	ldd	r13, Y+20	; 0x14
    1d7c:	88 23       	and	r24, r24
    1d7e:	49 f0       	breq	.+18     	; 0x1d92 <f_open+0xac>
    1d80:	cc c0       	rjmp	.+408    	; 0x1f1a <f_open+0x234>
    1d82:	f2 fc       	sbrc	r15, 2
    1d84:	c3 c0       	rjmp	.+390    	; 0x1f0c <f_open+0x226>
    1d86:	d6 01       	movw	r26, r12
    1d88:	1b 96       	adiw	r26, 0x0b	; 11
    1d8a:	8c 91       	ld	r24, X
    1d8c:	81 71       	andi	r24, 0x11	; 17
    1d8e:	09 f0       	breq	.+2      	; 0x1d92 <f_open+0xac>
    1d90:	bf c0       	rjmp	.+382    	; 0x1f10 <f_open+0x22a>
    1d92:	e3 fe       	sbrs	r14, 3
    1d94:	51 c0       	rjmp	.+162    	; 0x1e38 <f_open+0x152>
    1d96:	0e 94 d7 16 	call	0x2dae	; 0x2dae <get_fattime>
    1d9a:	f6 01       	movw	r30, r12
    1d9c:	66 87       	std	Z+14, r22	; 0x0e
    1d9e:	77 87       	std	Z+15, r23	; 0x0f
    1da0:	80 8b       	std	Z+16, r24	; 0x10
    1da2:	91 8b       	std	Z+17, r25	; 0x11
    1da4:	13 86       	std	Z+11, r1	; 0x0b
    1da6:	14 8e       	std	Z+28, r1	; 0x1c
    1da8:	15 8e       	std	Z+29, r1	; 0x1d
    1daa:	16 8e       	std	Z+30, r1	; 0x1e
    1dac:	17 8e       	std	Z+31, r1	; 0x1f
    1dae:	84 88       	ldd	r8, Z+20	; 0x14
    1db0:	95 88       	ldd	r9, Z+21	; 0x15
    1db2:	a1 2c       	mov	r10, r1
    1db4:	b1 2c       	mov	r11, r1
    1db6:	d4 01       	movw	r26, r8
    1db8:	99 27       	eor	r25, r25
    1dba:	88 27       	eor	r24, r24
    1dbc:	82 8c       	ldd	r8, Z+26	; 0x1a
    1dbe:	93 8c       	ldd	r9, Z+27	; 0x1b
    1dc0:	a1 2c       	mov	r10, r1
    1dc2:	b1 2c       	mov	r11, r1
    1dc4:	88 2a       	or	r8, r24
    1dc6:	99 2a       	or	r9, r25
    1dc8:	aa 2a       	or	r10, r26
    1dca:	bb 2a       	or	r11, r27
    1dcc:	13 8e       	std	Z+27, r1	; 0x1b
    1dce:	12 8e       	std	Z+26, r1	; 0x1a
    1dd0:	15 8a       	std	Z+21, r1	; 0x15
    1dd2:	14 8a       	std	Z+20, r1	; 0x14
    1dd4:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd6:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	84 83       	std	Z+4, r24	; 0x04
    1ddc:	81 14       	cp	r8, r1
    1dde:	91 04       	cpc	r9, r1
    1de0:	a1 04       	cpc	r10, r1
    1de2:	b1 04       	cpc	r11, r1
    1de4:	31 f1       	breq	.+76     	; 0x1e32 <f_open+0x14c>
    1de6:	46 a4       	ldd	r4, Z+46	; 0x2e
    1de8:	57 a4       	ldd	r5, Z+47	; 0x2f
    1dea:	60 a8       	ldd	r6, Z+48	; 0x30
    1dec:	71 a8       	ldd	r7, Z+49	; 0x31
    1dee:	b5 01       	movw	r22, r10
    1df0:	a4 01       	movw	r20, r8
    1df2:	cf 01       	movw	r24, r30
    1df4:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <remove_chain>
    1df8:	81 11       	cpse	r24, r1
    1dfa:	8f c0       	rjmp	.+286    	; 0x1f1a <f_open+0x234>
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1e00:	f1 e0       	ldi	r31, 0x01	; 1
    1e02:	8f 1a       	sub	r8, r31
    1e04:	91 08       	sbc	r9, r1
    1e06:	a1 08       	sbc	r10, r1
    1e08:	b1 08       	sbc	r11, r1
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	1a 96       	adiw	r26, 0x0a	; 10
    1e0e:	8d 92       	st	X+, r8
    1e10:	9d 92       	st	X+, r9
    1e12:	ad 92       	st	X+, r10
    1e14:	bc 92       	st	X, r11
    1e16:	1d 97       	sbiw	r26, 0x0d	; 13
    1e18:	b3 01       	movw	r22, r6
    1e1a:	a2 01       	movw	r20, r4
    1e1c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <move_window>
    1e20:	88 23       	and	r24, r24
    1e22:	39 f0       	breq	.+14     	; 0x1e32 <f_open+0x14c>
    1e24:	7a c0       	rjmp	.+244    	; 0x1f1a <f_open+0x234>
    1e26:	f1 fe       	sbrs	r15, 1
    1e28:	02 c0       	rjmp	.+4      	; 0x1e2e <f_open+0x148>
    1e2a:	80 fd       	sbrc	r24, 0
    1e2c:	73 c0       	rjmp	.+230    	; 0x1f14 <f_open+0x22e>
    1e2e:	f3 fe       	sbrs	r15, 3
    1e30:	03 c0       	rjmp	.+6      	; 0x1e38 <f_open+0x152>
    1e32:	be 2d       	mov	r27, r14
    1e34:	b0 62       	ori	r27, 0x20	; 32
    1e36:	eb 2e       	mov	r14, r27
    1e38:	e9 81       	ldd	r30, Y+1	; 0x01
    1e3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e3c:	86 a5       	ldd	r24, Z+46	; 0x2e
    1e3e:	97 a5       	ldd	r25, Z+47	; 0x2f
    1e40:	a0 a9       	ldd	r26, Z+48	; 0x30
    1e42:	b1 a9       	ldd	r27, Z+49	; 0x31
    1e44:	f8 01       	movw	r30, r16
    1e46:	82 8f       	std	Z+26, r24	; 0x1a
    1e48:	93 8f       	std	Z+27, r25	; 0x1b
    1e4a:	a4 8f       	std	Z+28, r26	; 0x1c
    1e4c:	b5 8f       	std	Z+29, r27	; 0x1d
    1e4e:	d7 8e       	std	Z+31, r13	; 0x1f
    1e50:	c6 8e       	std	Z+30, r12	; 0x1e
    1e52:	d8 01       	movw	r26, r16
    1e54:	14 96       	adiw	r26, 0x04	; 4
    1e56:	ec 92       	st	X, r14
    1e58:	f6 01       	movw	r30, r12
    1e5a:	84 89       	ldd	r24, Z+20	; 0x14
    1e5c:	95 89       	ldd	r25, Z+21	; 0x15
    1e5e:	a0 e0       	ldi	r26, 0x00	; 0
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	dc 01       	movw	r26, r24
    1e64:	99 27       	eor	r25, r25
    1e66:	88 27       	eor	r24, r24
    1e68:	42 8d       	ldd	r20, Z+26	; 0x1a
    1e6a:	53 8d       	ldd	r21, Z+27	; 0x1b
    1e6c:	60 e0       	ldi	r22, 0x00	; 0
    1e6e:	70 e0       	ldi	r23, 0x00	; 0
    1e70:	84 2b       	or	r24, r20
    1e72:	95 2b       	or	r25, r21
    1e74:	a6 2b       	or	r26, r22
    1e76:	b7 2b       	or	r27, r23
    1e78:	f8 01       	movw	r30, r16
    1e7a:	86 87       	std	Z+14, r24	; 0x0e
    1e7c:	97 87       	std	Z+15, r25	; 0x0f
    1e7e:	a0 8b       	std	Z+16, r26	; 0x10
    1e80:	b1 8b       	std	Z+17, r27	; 0x11
    1e82:	f6 01       	movw	r30, r12
    1e84:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e86:	95 8d       	ldd	r25, Z+29	; 0x1d
    1e88:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1e8a:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1e8c:	f8 01       	movw	r30, r16
    1e8e:	82 87       	std	Z+10, r24	; 0x0a
    1e90:	93 87       	std	Z+11, r25	; 0x0b
    1e92:	a4 87       	std	Z+12, r26	; 0x0c
    1e94:	b5 87       	std	Z+13, r27	; 0x0d
    1e96:	d8 01       	movw	r26, r16
    1e98:	16 82       	std	Z+6, r1	; 0x06
    1e9a:	17 82       	std	Z+7, r1	; 0x07
    1e9c:	10 86       	std	Z+8, r1	; 0x08
    1e9e:	11 86       	std	Z+9, r1	; 0x09
    1ea0:	16 8a       	std	Z+22, r1	; 0x16
    1ea2:	17 8a       	std	Z+23, r1	; 0x17
    1ea4:	10 8e       	std	Z+24, r1	; 0x18
    1ea6:	11 8e       	std	Z+25, r1	; 0x19
    1ea8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eaa:	fa 81       	ldd	r31, Y+2	; 0x02
    1eac:	11 96       	adiw	r26, 0x01	; 1
    1eae:	fc 93       	st	X, r31
    1eb0:	ee 93       	st	-X, r30
    1eb2:	86 81       	ldd	r24, Z+6	; 0x06
    1eb4:	97 81       	ldd	r25, Z+7	; 0x07
    1eb6:	13 96       	adiw	r26, 0x03	; 3
    1eb8:	9c 93       	st	X, r25
    1eba:	8e 93       	st	-X, r24
    1ebc:	12 97       	sbiw	r26, 0x02	; 2
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	2c c0       	rjmp	.+88     	; 0x1f1a <f_open+0x234>
    1ec2:	cb 88       	ldd	r12, Y+19	; 0x13
    1ec4:	dc 88       	ldd	r13, Y+20	; 0x14
    1ec6:	9f 2d       	mov	r25, r15
    1ec8:	9c 71       	andi	r25, 0x1C	; 28
    1eca:	09 f0       	breq	.+2      	; 0x1ece <f_open+0x1e8>
    1ecc:	4c cf       	rjmp	.-360    	; 0x1d66 <f_open+0x80>
    1ece:	0f c0       	rjmp	.+30     	; 0x1eee <f_open+0x208>
    1ed0:	9f 2d       	mov	r25, r15
    1ed2:	9c 71       	andi	r25, 0x1C	; 28
    1ed4:	09 f0       	breq	.+2      	; 0x1ed8 <f_open+0x1f2>
    1ed6:	47 cf       	rjmp	.-370    	; 0x1d66 <f_open+0x80>
    1ed8:	0a c0       	rjmp	.+20     	; 0x1eee <f_open+0x208>
    1eda:	8f 2d       	mov	r24, r15
    1edc:	8c 71       	andi	r24, 0x1C	; 28
    1ede:	51 f4       	brne	.+20     	; 0x1ef4 <f_open+0x20e>
    1ee0:	86 e0       	ldi	r24, 0x06	; 6
    1ee2:	05 c0       	rjmp	.+10     	; 0x1eee <f_open+0x208>
    1ee4:	8f 2d       	mov	r24, r15
    1ee6:	8c 71       	andi	r24, 0x1C	; 28
    1ee8:	09 f0       	breq	.+2      	; 0x1eec <f_open+0x206>
    1eea:	4b cf       	rjmp	.-362    	; 0x1d82 <f_open+0x9c>
    1eec:	0a c0       	rjmp	.+20     	; 0x1f02 <f_open+0x21c>
    1eee:	81 11       	cpse	r24, r1
    1ef0:	14 c0       	rjmp	.+40     	; 0x1f1a <f_open+0x234>
    1ef2:	af cf       	rjmp	.-162    	; 0x1e52 <f_open+0x16c>
    1ef4:	be 2d       	mov	r27, r14
    1ef6:	b8 60       	ori	r27, 0x08	; 8
    1ef8:	eb 2e       	mov	r14, r27
    1efa:	cb 88       	ldd	r12, Y+19	; 0x13
    1efc:	dc 88       	ldd	r13, Y+20	; 0x14
    1efe:	86 e0       	ldi	r24, 0x06	; 6
    1f00:	f6 cf       	rjmp	.-20     	; 0x1eee <f_open+0x208>
    1f02:	f6 01       	movw	r30, r12
    1f04:	83 85       	ldd	r24, Z+11	; 0x0b
    1f06:	84 fd       	sbrc	r24, 4
    1f08:	07 c0       	rjmp	.+14     	; 0x1f18 <f_open+0x232>
    1f0a:	8d cf       	rjmp	.-230    	; 0x1e26 <f_open+0x140>
    1f0c:	88 e0       	ldi	r24, 0x08	; 8
    1f0e:	05 c0       	rjmp	.+10     	; 0x1f1a <f_open+0x234>
    1f10:	87 e0       	ldi	r24, 0x07	; 7
    1f12:	03 c0       	rjmp	.+6      	; 0x1f1a <f_open+0x234>
    1f14:	87 e0       	ldi	r24, 0x07	; 7
    1f16:	01 c0       	rjmp	.+2      	; 0x1f1a <f_open+0x234>
    1f18:	84 e0       	ldi	r24, 0x04	; 4
    1f1a:	a4 96       	adiw	r28, 0x24	; 36
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	f8 94       	cli
    1f20:	de bf       	out	0x3e, r29	; 62
    1f22:	0f be       	out	0x3f, r0	; 63
    1f24:	cd bf       	out	0x3d, r28	; 61
    1f26:	df 91       	pop	r29
    1f28:	cf 91       	pop	r28
    1f2a:	1f 91       	pop	r17
    1f2c:	0f 91       	pop	r16
    1f2e:	ff 90       	pop	r15
    1f30:	ef 90       	pop	r14
    1f32:	df 90       	pop	r13
    1f34:	cf 90       	pop	r12
    1f36:	bf 90       	pop	r11
    1f38:	af 90       	pop	r10
    1f3a:	9f 90       	pop	r9
    1f3c:	8f 90       	pop	r8
    1f3e:	7f 90       	pop	r7
    1f40:	6f 90       	pop	r6
    1f42:	5f 90       	pop	r5
    1f44:	4f 90       	pop	r4
    1f46:	08 95       	ret

00001f48 <f_read>:
    1f48:	2f 92       	push	r2
    1f4a:	3f 92       	push	r3
    1f4c:	4f 92       	push	r4
    1f4e:	5f 92       	push	r5
    1f50:	6f 92       	push	r6
    1f52:	7f 92       	push	r7
    1f54:	8f 92       	push	r8
    1f56:	9f 92       	push	r9
    1f58:	af 92       	push	r10
    1f5a:	bf 92       	push	r11
    1f5c:	cf 92       	push	r12
    1f5e:	df 92       	push	r13
    1f60:	ef 92       	push	r14
    1f62:	ff 92       	push	r15
    1f64:	0f 93       	push	r16
    1f66:	1f 93       	push	r17
    1f68:	cf 93       	push	r28
    1f6a:	df 93       	push	r29
    1f6c:	ec 01       	movw	r28, r24
    1f6e:	4b 01       	movw	r8, r22
    1f70:	6a 01       	movw	r12, r20
    1f72:	59 01       	movw	r10, r18
    1f74:	f9 01       	movw	r30, r18
    1f76:	11 82       	std	Z+1, r1	; 0x01
    1f78:	10 82       	st	Z, r1
    1f7a:	6a 81       	ldd	r22, Y+2	; 0x02
    1f7c:	7b 81       	ldd	r23, Y+3	; 0x03
    1f7e:	88 81       	ld	r24, Y
    1f80:	99 81       	ldd	r25, Y+1	; 0x01
    1f82:	0e 94 1b 03 	call	0x636	; 0x636 <validate>
    1f86:	81 11       	cpse	r24, r1
    1f88:	18 c1       	rjmp	.+560    	; 0x21ba <f_read+0x272>
    1f8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8c:	88 23       	and	r24, r24
    1f8e:	0c f4       	brge	.+2      	; 0x1f92 <f_read+0x4a>
    1f90:	0f c1       	rjmp	.+542    	; 0x21b0 <f_read+0x268>
    1f92:	80 ff       	sbrs	r24, 0
    1f94:	0f c1       	rjmp	.+542    	; 0x21b4 <f_read+0x26c>
    1f96:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f98:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f9a:	ac 85       	ldd	r26, Y+12	; 0x0c
    1f9c:	bd 85       	ldd	r27, Y+13	; 0x0d
    1f9e:	4e 81       	ldd	r20, Y+6	; 0x06
    1fa0:	5f 81       	ldd	r21, Y+7	; 0x07
    1fa2:	68 85       	ldd	r22, Y+8	; 0x08
    1fa4:	79 85       	ldd	r23, Y+9	; 0x09
    1fa6:	84 1b       	sub	r24, r20
    1fa8:	95 0b       	sbc	r25, r21
    1faa:	a6 0b       	sbc	r26, r22
    1fac:	b7 0b       	sbc	r27, r23
    1fae:	a6 01       	movw	r20, r12
    1fb0:	60 e0       	ldi	r22, 0x00	; 0
    1fb2:	70 e0       	ldi	r23, 0x00	; 0
    1fb4:	84 17       	cp	r24, r20
    1fb6:	95 07       	cpc	r25, r21
    1fb8:	a6 07       	cpc	r26, r22
    1fba:	b7 07       	cpc	r27, r23
    1fbc:	08 f4       	brcc	.+2      	; 0x1fc0 <f_read+0x78>
    1fbe:	6c 01       	movw	r12, r24
    1fc0:	c1 14       	cp	r12, r1
    1fc2:	d1 04       	cpc	r13, r1
    1fc4:	09 f4       	brne	.+2      	; 0x1fc8 <f_read+0x80>
    1fc6:	f8 c0       	rjmp	.+496    	; 0x21b8 <f_read+0x270>
    1fc8:	4e 81       	ldd	r20, Y+6	; 0x06
    1fca:	5f 81       	ldd	r21, Y+7	; 0x07
    1fcc:	68 85       	ldd	r22, Y+8	; 0x08
    1fce:	79 85       	ldd	r23, Y+9	; 0x09
    1fd0:	db 01       	movw	r26, r22
    1fd2:	ca 01       	movw	r24, r20
    1fd4:	91 70       	andi	r25, 0x01	; 1
    1fd6:	aa 27       	eor	r26, r26
    1fd8:	bb 27       	eor	r27, r27
    1fda:	89 2b       	or	r24, r25
    1fdc:	8a 2b       	or	r24, r26
    1fde:	8b 2b       	or	r24, r27
    1fe0:	09 f0       	breq	.+2      	; 0x1fe4 <f_read+0x9c>
    1fe2:	a0 c0       	rjmp	.+320    	; 0x2124 <f_read+0x1dc>
    1fe4:	e8 81       	ld	r30, Y
    1fe6:	f9 81       	ldd	r31, Y+1	; 0x01
    1fe8:	12 81       	ldd	r17, Z+2	; 0x02
    1fea:	11 50       	subi	r17, 0x01	; 1
    1fec:	db 01       	movw	r26, r22
    1fee:	ca 01       	movw	r24, r20
    1ff0:	07 2e       	mov	r0, r23
    1ff2:	79 e0       	ldi	r23, 0x09	; 9
    1ff4:	b6 95       	lsr	r27
    1ff6:	a7 95       	ror	r26
    1ff8:	97 95       	ror	r25
    1ffa:	87 95       	ror	r24
    1ffc:	7a 95       	dec	r23
    1ffe:	d1 f7       	brne	.-12     	; 0x1ff4 <f_read+0xac>
    2000:	70 2d       	mov	r23, r0
    2002:	18 23       	and	r17, r24
    2004:	49 f5       	brne	.+82     	; 0x2058 <f_read+0x110>
    2006:	45 2b       	or	r20, r21
    2008:	46 2b       	or	r20, r22
    200a:	47 2b       	or	r20, r23
    200c:	29 f4       	brne	.+10     	; 0x2018 <f_read+0xd0>
    200e:	6e 85       	ldd	r22, Y+14	; 0x0e
    2010:	7f 85       	ldd	r23, Y+15	; 0x0f
    2012:	88 89       	ldd	r24, Y+16	; 0x10
    2014:	99 89       	ldd	r25, Y+17	; 0x11
    2016:	07 c0       	rjmp	.+14     	; 0x2026 <f_read+0xde>
    2018:	4a 89       	ldd	r20, Y+18	; 0x12
    201a:	5b 89       	ldd	r21, Y+19	; 0x13
    201c:	6c 89       	ldd	r22, Y+20	; 0x14
    201e:	7d 89       	ldd	r23, Y+21	; 0x15
    2020:	cf 01       	movw	r24, r30
    2022:	0e 94 a8 06 	call	0xd50	; 0xd50 <get_fat>
    2026:	62 30       	cpi	r22, 0x02	; 2
    2028:	71 05       	cpc	r23, r1
    202a:	81 05       	cpc	r24, r1
    202c:	91 05       	cpc	r25, r1
    202e:	28 f4       	brcc	.+10     	; 0x203a <f_read+0xf2>
    2030:	8c 81       	ldd	r24, Y+4	; 0x04
    2032:	80 68       	ori	r24, 0x80	; 128
    2034:	8c 83       	std	Y+4, r24	; 0x04
    2036:	82 e0       	ldi	r24, 0x02	; 2
    2038:	c0 c0       	rjmp	.+384    	; 0x21ba <f_read+0x272>
    203a:	6f 3f       	cpi	r22, 0xFF	; 255
    203c:	ff ef       	ldi	r31, 0xFF	; 255
    203e:	7f 07       	cpc	r23, r31
    2040:	8f 07       	cpc	r24, r31
    2042:	9f 07       	cpc	r25, r31
    2044:	29 f4       	brne	.+10     	; 0x2050 <f_read+0x108>
    2046:	8c 81       	ldd	r24, Y+4	; 0x04
    2048:	80 68       	ori	r24, 0x80	; 128
    204a:	8c 83       	std	Y+4, r24	; 0x04
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	b5 c0       	rjmp	.+362    	; 0x21ba <f_read+0x272>
    2050:	6a 8b       	std	Y+18, r22	; 0x12
    2052:	7b 8b       	std	Y+19, r23	; 0x13
    2054:	8c 8b       	std	Y+20, r24	; 0x14
    2056:	9d 8b       	std	Y+21, r25	; 0x15
    2058:	28 80       	ld	r2, Y
    205a:	39 80       	ldd	r3, Y+1	; 0x01
    205c:	4a 89       	ldd	r20, Y+18	; 0x12
    205e:	5b 89       	ldd	r21, Y+19	; 0x13
    2060:	6c 89       	ldd	r22, Y+20	; 0x14
    2062:	7d 89       	ldd	r23, Y+21	; 0x15
    2064:	c1 01       	movw	r24, r2
    2066:	0e 94 80 06 	call	0xd00	; 0xd00 <clust2sect>
    206a:	61 15       	cp	r22, r1
    206c:	71 05       	cpc	r23, r1
    206e:	81 05       	cpc	r24, r1
    2070:	91 05       	cpc	r25, r1
    2072:	29 f4       	brne	.+10     	; 0x207e <f_read+0x136>
    2074:	8c 81       	ldd	r24, Y+4	; 0x04
    2076:	80 68       	ori	r24, 0x80	; 128
    2078:	8c 83       	std	Y+4, r24	; 0x04
    207a:	82 e0       	ldi	r24, 0x02	; 2
    207c:	9e c0       	rjmp	.+316    	; 0x21ba <f_read+0x272>
    207e:	2b 01       	movw	r4, r22
    2080:	3c 01       	movw	r6, r24
    2082:	41 0e       	add	r4, r17
    2084:	51 1c       	adc	r5, r1
    2086:	61 1c       	adc	r6, r1
    2088:	71 1c       	adc	r7, r1
    208a:	76 01       	movw	r14, r12
    208c:	ef 2c       	mov	r14, r15
    208e:	ff 24       	eor	r15, r15
    2090:	e6 94       	lsr	r14
    2092:	e1 14       	cp	r14, r1
    2094:	f1 04       	cpc	r15, r1
    2096:	09 f4       	brne	.+2      	; 0x209a <f_read+0x152>
    2098:	41 c0       	rjmp	.+130    	; 0x211c <f_read+0x1d4>
    209a:	f1 01       	movw	r30, r2
    209c:	42 81       	ldd	r20, Z+2	; 0x02
    209e:	24 2f       	mov	r18, r20
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	c7 01       	movw	r24, r14
    20a4:	81 0f       	add	r24, r17
    20a6:	91 1d       	adc	r25, r1
    20a8:	28 17       	cp	r18, r24
    20aa:	39 07       	cpc	r19, r25
    20ac:	18 f4       	brcc	.+6      	; 0x20b4 <f_read+0x16c>
    20ae:	79 01       	movw	r14, r18
    20b0:	e1 1a       	sub	r14, r17
    20b2:	f1 08       	sbc	r15, r1
    20b4:	0e 2d       	mov	r16, r14
    20b6:	a3 01       	movw	r20, r6
    20b8:	92 01       	movw	r18, r4
    20ba:	b4 01       	movw	r22, r8
    20bc:	f1 01       	movw	r30, r2
    20be:	81 81       	ldd	r24, Z+1	; 0x01
    20c0:	0e 94 c8 29 	call	0x5390	; 0x5390 <disk_read>
    20c4:	88 23       	and	r24, r24
    20c6:	29 f0       	breq	.+10     	; 0x20d2 <f_read+0x18a>
    20c8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ca:	80 68       	ori	r24, 0x80	; 128
    20cc:	8c 83       	std	Y+4, r24	; 0x04
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	74 c0       	rjmp	.+232    	; 0x21ba <f_read+0x272>
    20d2:	e8 81       	ld	r30, Y
    20d4:	f9 81       	ldd	r31, Y+1	; 0x01
    20d6:	84 81       	ldd	r24, Z+4	; 0x04
    20d8:	88 23       	and	r24, r24
    20da:	e1 f0       	breq	.+56     	; 0x2114 <f_read+0x1cc>
    20dc:	86 a5       	ldd	r24, Z+46	; 0x2e
    20de:	97 a5       	ldd	r25, Z+47	; 0x2f
    20e0:	a0 a9       	ldd	r26, Z+48	; 0x30
    20e2:	b1 a9       	ldd	r27, Z+49	; 0x31
    20e4:	84 19       	sub	r24, r4
    20e6:	95 09       	sbc	r25, r5
    20e8:	a6 09       	sbc	r26, r6
    20ea:	b7 09       	sbc	r27, r7
    20ec:	a7 01       	movw	r20, r14
    20ee:	60 e0       	ldi	r22, 0x00	; 0
    20f0:	70 e0       	ldi	r23, 0x00	; 0
    20f2:	84 17       	cp	r24, r20
    20f4:	95 07       	cpc	r25, r21
    20f6:	a6 07       	cpc	r26, r22
    20f8:	b7 07       	cpc	r27, r23
    20fa:	60 f4       	brcc	.+24     	; 0x2114 <f_read+0x1cc>
    20fc:	bf 01       	movw	r22, r30
    20fe:	6e 5c       	subi	r22, 0xCE	; 206
    2100:	7f 4f       	sbci	r23, 0xFF	; 255
    2102:	98 2f       	mov	r25, r24
    2104:	88 27       	eor	r24, r24
    2106:	99 0f       	add	r25, r25
    2108:	40 e0       	ldi	r20, 0x00	; 0
    210a:	52 e0       	ldi	r21, 0x02	; 2
    210c:	88 0d       	add	r24, r8
    210e:	99 1d       	adc	r25, r9
    2110:	0e 94 bb 01 	call	0x376	; 0x376 <mem_cpy>
    2114:	fe 2c       	mov	r15, r14
    2116:	ee 24       	eor	r14, r14
    2118:	ff 0c       	add	r15, r15
    211a:	2f c0       	rjmp	.+94     	; 0x217a <f_read+0x232>
    211c:	4e 8a       	std	Y+22, r4	; 0x16
    211e:	5f 8a       	std	Y+23, r5	; 0x17
    2120:	68 8e       	std	Y+24, r6	; 0x18
    2122:	79 8e       	std	Y+25, r7	; 0x19
    2124:	8e 81       	ldd	r24, Y+6	; 0x06
    2126:	9f 81       	ldd	r25, Y+7	; 0x07
    2128:	91 70       	andi	r25, 0x01	; 1
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	32 e0       	ldi	r19, 0x02	; 2
    212e:	79 01       	movw	r14, r18
    2130:	e8 1a       	sub	r14, r24
    2132:	f9 0a       	sbc	r15, r25
    2134:	ce 14       	cp	r12, r14
    2136:	df 04       	cpc	r13, r15
    2138:	08 f4       	brcc	.+2      	; 0x213c <f_read+0x1f4>
    213a:	76 01       	movw	r14, r12
    213c:	4e 89       	ldd	r20, Y+22	; 0x16
    213e:	5f 89       	ldd	r21, Y+23	; 0x17
    2140:	68 8d       	ldd	r22, Y+24	; 0x18
    2142:	79 8d       	ldd	r23, Y+25	; 0x19
    2144:	88 81       	ld	r24, Y
    2146:	99 81       	ldd	r25, Y+1	; 0x01
    2148:	0e 94 62 02 	call	0x4c4	; 0x4c4 <move_window>
    214c:	88 23       	and	r24, r24
    214e:	29 f0       	breq	.+10     	; 0x215a <f_read+0x212>
    2150:	8c 81       	ldd	r24, Y+4	; 0x04
    2152:	80 68       	ori	r24, 0x80	; 128
    2154:	8c 83       	std	Y+4, r24	; 0x04
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	30 c0       	rjmp	.+96     	; 0x21ba <f_read+0x272>
    215a:	8e 81       	ldd	r24, Y+6	; 0x06
    215c:	9f 81       	ldd	r25, Y+7	; 0x07
    215e:	a8 85       	ldd	r26, Y+8	; 0x08
    2160:	b9 85       	ldd	r27, Y+9	; 0x09
    2162:	91 70       	andi	r25, 0x01	; 1
    2164:	aa 27       	eor	r26, r26
    2166:	bb 27       	eor	r27, r27
    2168:	c2 96       	adiw	r24, 0x32	; 50
    216a:	68 81       	ld	r22, Y
    216c:	79 81       	ldd	r23, Y+1	; 0x01
    216e:	68 0f       	add	r22, r24
    2170:	79 1f       	adc	r23, r25
    2172:	a7 01       	movw	r20, r14
    2174:	c4 01       	movw	r24, r8
    2176:	0e 94 bb 01 	call	0x376	; 0x376 <mem_cpy>
    217a:	8e 0c       	add	r8, r14
    217c:	9f 1c       	adc	r9, r15
    217e:	8e 81       	ldd	r24, Y+6	; 0x06
    2180:	9f 81       	ldd	r25, Y+7	; 0x07
    2182:	a8 85       	ldd	r26, Y+8	; 0x08
    2184:	b9 85       	ldd	r27, Y+9	; 0x09
    2186:	8e 0d       	add	r24, r14
    2188:	9f 1d       	adc	r25, r15
    218a:	a1 1d       	adc	r26, r1
    218c:	b1 1d       	adc	r27, r1
    218e:	8e 83       	std	Y+6, r24	; 0x06
    2190:	9f 83       	std	Y+7, r25	; 0x07
    2192:	a8 87       	std	Y+8, r26	; 0x08
    2194:	b9 87       	std	Y+9, r27	; 0x09
    2196:	f5 01       	movw	r30, r10
    2198:	80 81       	ld	r24, Z
    219a:	91 81       	ldd	r25, Z+1	; 0x01
    219c:	8e 0d       	add	r24, r14
    219e:	9f 1d       	adc	r25, r15
    21a0:	91 83       	std	Z+1, r25	; 0x01
    21a2:	80 83       	st	Z, r24
    21a4:	ce 18       	sub	r12, r14
    21a6:	df 08       	sbc	r13, r15
    21a8:	09 f0       	breq	.+2      	; 0x21ac <f_read+0x264>
    21aa:	0e cf       	rjmp	.-484    	; 0x1fc8 <f_read+0x80>
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	05 c0       	rjmp	.+10     	; 0x21ba <f_read+0x272>
    21b0:	82 e0       	ldi	r24, 0x02	; 2
    21b2:	03 c0       	rjmp	.+6      	; 0x21ba <f_read+0x272>
    21b4:	87 e0       	ldi	r24, 0x07	; 7
    21b6:	01 c0       	rjmp	.+2      	; 0x21ba <f_read+0x272>
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	1f 91       	pop	r17
    21c0:	0f 91       	pop	r16
    21c2:	ff 90       	pop	r15
    21c4:	ef 90       	pop	r14
    21c6:	df 90       	pop	r13
    21c8:	cf 90       	pop	r12
    21ca:	bf 90       	pop	r11
    21cc:	af 90       	pop	r10
    21ce:	9f 90       	pop	r9
    21d0:	8f 90       	pop	r8
    21d2:	7f 90       	pop	r7
    21d4:	6f 90       	pop	r6
    21d6:	5f 90       	pop	r5
    21d8:	4f 90       	pop	r4
    21da:	3f 90       	pop	r3
    21dc:	2f 90       	pop	r2
    21de:	08 95       	ret

000021e0 <f_write>:
    21e0:	2f 92       	push	r2
    21e2:	3f 92       	push	r3
    21e4:	4f 92       	push	r4
    21e6:	5f 92       	push	r5
    21e8:	6f 92       	push	r6
    21ea:	7f 92       	push	r7
    21ec:	8f 92       	push	r8
    21ee:	9f 92       	push	r9
    21f0:	af 92       	push	r10
    21f2:	bf 92       	push	r11
    21f4:	cf 92       	push	r12
    21f6:	df 92       	push	r13
    21f8:	ef 92       	push	r14
    21fa:	ff 92       	push	r15
    21fc:	0f 93       	push	r16
    21fe:	1f 93       	push	r17
    2200:	cf 93       	push	r28
    2202:	df 93       	push	r29
    2204:	ec 01       	movw	r28, r24
    2206:	4b 01       	movw	r8, r22
    2208:	6a 01       	movw	r12, r20
    220a:	59 01       	movw	r10, r18
    220c:	f9 01       	movw	r30, r18
    220e:	11 82       	std	Z+1, r1	; 0x01
    2210:	10 82       	st	Z, r1
    2212:	6a 81       	ldd	r22, Y+2	; 0x02
    2214:	7b 81       	ldd	r23, Y+3	; 0x03
    2216:	88 81       	ld	r24, Y
    2218:	99 81       	ldd	r25, Y+1	; 0x01
    221a:	0e 94 1b 03 	call	0x636	; 0x636 <validate>
    221e:	81 11       	cpse	r24, r1
    2220:	7a c1       	rjmp	.+756    	; 0x2516 <f_write+0x336>
    2222:	8c 81       	ldd	r24, Y+4	; 0x04
    2224:	88 23       	and	r24, r24
    2226:	0c f4       	brge	.+2      	; 0x222a <f_write+0x4a>
    2228:	73 c1       	rjmp	.+742    	; 0x2510 <f_write+0x330>
    222a:	81 ff       	sbrs	r24, 1
    222c:	73 c1       	rjmp	.+742    	; 0x2514 <f_write+0x334>
    222e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2230:	9b 85       	ldd	r25, Y+11	; 0x0b
    2232:	ac 85       	ldd	r26, Y+12	; 0x0c
    2234:	bd 85       	ldd	r27, Y+13	; 0x0d
    2236:	ac 01       	movw	r20, r24
    2238:	bd 01       	movw	r22, r26
    223a:	4c 0d       	add	r20, r12
    223c:	5d 1d       	adc	r21, r13
    223e:	61 1d       	adc	r22, r1
    2240:	71 1d       	adc	r23, r1
    2242:	48 17       	cp	r20, r24
    2244:	59 07       	cpc	r21, r25
    2246:	6a 07       	cpc	r22, r26
    2248:	7b 07       	cpc	r23, r27
    224a:	08 f4       	brcc	.+2      	; 0x224e <f_write+0x6e>
    224c:	4b c1       	rjmp	.+662    	; 0x24e4 <f_write+0x304>
    224e:	c1 14       	cp	r12, r1
    2250:	d1 04       	cpc	r13, r1
    2252:	09 f4       	brne	.+2      	; 0x2256 <f_write+0x76>
    2254:	47 c1       	rjmp	.+654    	; 0x24e4 <f_write+0x304>
    2256:	4e 81       	ldd	r20, Y+6	; 0x06
    2258:	5f 81       	ldd	r21, Y+7	; 0x07
    225a:	68 85       	ldd	r22, Y+8	; 0x08
    225c:	79 85       	ldd	r23, Y+9	; 0x09
    225e:	db 01       	movw	r26, r22
    2260:	ca 01       	movw	r24, r20
    2262:	91 70       	andi	r25, 0x01	; 1
    2264:	aa 27       	eor	r26, r26
    2266:	bb 27       	eor	r27, r27
    2268:	89 2b       	or	r24, r25
    226a:	8a 2b       	or	r24, r26
    226c:	8b 2b       	or	r24, r27
    226e:	09 f0       	breq	.+2      	; 0x2272 <f_write+0x92>
    2270:	f1 c0       	rjmp	.+482    	; 0x2454 <f_write+0x274>
    2272:	e8 81       	ld	r30, Y
    2274:	f9 81       	ldd	r31, Y+1	; 0x01
    2276:	12 81       	ldd	r17, Z+2	; 0x02
    2278:	11 50       	subi	r17, 0x01	; 1
    227a:	db 01       	movw	r26, r22
    227c:	ca 01       	movw	r24, r20
    227e:	07 2e       	mov	r0, r23
    2280:	79 e0       	ldi	r23, 0x09	; 9
    2282:	b6 95       	lsr	r27
    2284:	a7 95       	ror	r26
    2286:	97 95       	ror	r25
    2288:	87 95       	ror	r24
    228a:	7a 95       	dec	r23
    228c:	d1 f7       	brne	.-12     	; 0x2282 <f_write+0xa2>
    228e:	70 2d       	mov	r23, r0
    2290:	18 23       	and	r17, r24
    2292:	f1 f5       	brne	.+124    	; 0x2310 <f_write+0x130>
    2294:	45 2b       	or	r20, r21
    2296:	46 2b       	or	r20, r22
    2298:	47 2b       	or	r20, r23
    229a:	a1 f4       	brne	.+40     	; 0x22c4 <f_write+0xe4>
    229c:	6e 85       	ldd	r22, Y+14	; 0x0e
    229e:	7f 85       	ldd	r23, Y+15	; 0x0f
    22a0:	88 89       	ldd	r24, Y+16	; 0x10
    22a2:	99 89       	ldd	r25, Y+17	; 0x11
    22a4:	61 15       	cp	r22, r1
    22a6:	71 05       	cpc	r23, r1
    22a8:	81 05       	cpc	r24, r1
    22aa:	91 05       	cpc	r25, r1
    22ac:	c1 f4       	brne	.+48     	; 0x22de <f_write+0xfe>
    22ae:	40 e0       	ldi	r20, 0x00	; 0
    22b0:	50 e0       	ldi	r21, 0x00	; 0
    22b2:	ba 01       	movw	r22, r20
    22b4:	cf 01       	movw	r24, r30
    22b6:	0e 94 63 09 	call	0x12c6	; 0x12c6 <create_chain>
    22ba:	6e 87       	std	Y+14, r22	; 0x0e
    22bc:	7f 87       	std	Y+15, r23	; 0x0f
    22be:	88 8b       	std	Y+16, r24	; 0x10
    22c0:	99 8b       	std	Y+17, r25	; 0x11
    22c2:	07 c0       	rjmp	.+14     	; 0x22d2 <f_write+0xf2>
    22c4:	4a 89       	ldd	r20, Y+18	; 0x12
    22c6:	5b 89       	ldd	r21, Y+19	; 0x13
    22c8:	6c 89       	ldd	r22, Y+20	; 0x14
    22ca:	7d 89       	ldd	r23, Y+21	; 0x15
    22cc:	cf 01       	movw	r24, r30
    22ce:	0e 94 63 09 	call	0x12c6	; 0x12c6 <create_chain>
    22d2:	61 15       	cp	r22, r1
    22d4:	71 05       	cpc	r23, r1
    22d6:	81 05       	cpc	r24, r1
    22d8:	91 05       	cpc	r25, r1
    22da:	09 f4       	brne	.+2      	; 0x22de <f_write+0xfe>
    22dc:	03 c1       	rjmp	.+518    	; 0x24e4 <f_write+0x304>
    22de:	61 30       	cpi	r22, 0x01	; 1
    22e0:	71 05       	cpc	r23, r1
    22e2:	81 05       	cpc	r24, r1
    22e4:	91 05       	cpc	r25, r1
    22e6:	29 f4       	brne	.+10     	; 0x22f2 <f_write+0x112>
    22e8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ea:	80 68       	ori	r24, 0x80	; 128
    22ec:	8c 83       	std	Y+4, r24	; 0x04
    22ee:	82 e0       	ldi	r24, 0x02	; 2
    22f0:	12 c1       	rjmp	.+548    	; 0x2516 <f_write+0x336>
    22f2:	6f 3f       	cpi	r22, 0xFF	; 255
    22f4:	ff ef       	ldi	r31, 0xFF	; 255
    22f6:	7f 07       	cpc	r23, r31
    22f8:	8f 07       	cpc	r24, r31
    22fa:	9f 07       	cpc	r25, r31
    22fc:	29 f4       	brne	.+10     	; 0x2308 <f_write+0x128>
    22fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2300:	80 68       	ori	r24, 0x80	; 128
    2302:	8c 83       	std	Y+4, r24	; 0x04
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	07 c1       	rjmp	.+526    	; 0x2516 <f_write+0x336>
    2308:	6a 8b       	std	Y+18, r22	; 0x12
    230a:	7b 8b       	std	Y+19, r23	; 0x13
    230c:	8c 8b       	std	Y+20, r24	; 0x14
    230e:	9d 8b       	std	Y+21, r25	; 0x15
    2310:	e8 81       	ld	r30, Y
    2312:	f9 81       	ldd	r31, Y+1	; 0x01
    2314:	46 a5       	ldd	r20, Z+46	; 0x2e
    2316:	57 a5       	ldd	r21, Z+47	; 0x2f
    2318:	60 a9       	ldd	r22, Z+48	; 0x30
    231a:	71 a9       	ldd	r23, Z+49	; 0x31
    231c:	8e 89       	ldd	r24, Y+22	; 0x16
    231e:	9f 89       	ldd	r25, Y+23	; 0x17
    2320:	a8 8d       	ldd	r26, Y+24	; 0x18
    2322:	b9 8d       	ldd	r27, Y+25	; 0x19
    2324:	48 17       	cp	r20, r24
    2326:	59 07       	cpc	r21, r25
    2328:	6a 07       	cpc	r22, r26
    232a:	7b 07       	cpc	r23, r27
    232c:	69 f4       	brne	.+26     	; 0x2348 <f_write+0x168>
    232e:	40 e0       	ldi	r20, 0x00	; 0
    2330:	50 e0       	ldi	r21, 0x00	; 0
    2332:	ba 01       	movw	r22, r20
    2334:	cf 01       	movw	r24, r30
    2336:	0e 94 62 02 	call	0x4c4	; 0x4c4 <move_window>
    233a:	88 23       	and	r24, r24
    233c:	29 f0       	breq	.+10     	; 0x2348 <f_write+0x168>
    233e:	8c 81       	ldd	r24, Y+4	; 0x04
    2340:	80 68       	ori	r24, 0x80	; 128
    2342:	8c 83       	std	Y+4, r24	; 0x04
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	e7 c0       	rjmp	.+462    	; 0x2516 <f_write+0x336>
    2348:	28 80       	ld	r2, Y
    234a:	39 80       	ldd	r3, Y+1	; 0x01
    234c:	4a 89       	ldd	r20, Y+18	; 0x12
    234e:	5b 89       	ldd	r21, Y+19	; 0x13
    2350:	6c 89       	ldd	r22, Y+20	; 0x14
    2352:	7d 89       	ldd	r23, Y+21	; 0x15
    2354:	c1 01       	movw	r24, r2
    2356:	0e 94 80 06 	call	0xd00	; 0xd00 <clust2sect>
    235a:	61 15       	cp	r22, r1
    235c:	71 05       	cpc	r23, r1
    235e:	81 05       	cpc	r24, r1
    2360:	91 05       	cpc	r25, r1
    2362:	29 f4       	brne	.+10     	; 0x236e <f_write+0x18e>
    2364:	8c 81       	ldd	r24, Y+4	; 0x04
    2366:	80 68       	ori	r24, 0x80	; 128
    2368:	8c 83       	std	Y+4, r24	; 0x04
    236a:	82 e0       	ldi	r24, 0x02	; 2
    236c:	d4 c0       	rjmp	.+424    	; 0x2516 <f_write+0x336>
    236e:	2b 01       	movw	r4, r22
    2370:	3c 01       	movw	r6, r24
    2372:	41 0e       	add	r4, r17
    2374:	51 1c       	adc	r5, r1
    2376:	61 1c       	adc	r6, r1
    2378:	71 1c       	adc	r7, r1
    237a:	76 01       	movw	r14, r12
    237c:	ef 2c       	mov	r14, r15
    237e:	ff 24       	eor	r15, r15
    2380:	e6 94       	lsr	r14
    2382:	e1 14       	cp	r14, r1
    2384:	f1 04       	cpc	r15, r1
    2386:	09 f4       	brne	.+2      	; 0x238a <f_write+0x1aa>
    2388:	41 c0       	rjmp	.+130    	; 0x240c <f_write+0x22c>
    238a:	f1 01       	movw	r30, r2
    238c:	42 81       	ldd	r20, Z+2	; 0x02
    238e:	24 2f       	mov	r18, r20
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	c7 01       	movw	r24, r14
    2394:	81 0f       	add	r24, r17
    2396:	91 1d       	adc	r25, r1
    2398:	28 17       	cp	r18, r24
    239a:	39 07       	cpc	r19, r25
    239c:	18 f4       	brcc	.+6      	; 0x23a4 <f_write+0x1c4>
    239e:	79 01       	movw	r14, r18
    23a0:	e1 1a       	sub	r14, r17
    23a2:	f1 08       	sbc	r15, r1
    23a4:	0e 2d       	mov	r16, r14
    23a6:	a3 01       	movw	r20, r6
    23a8:	92 01       	movw	r18, r4
    23aa:	b4 01       	movw	r22, r8
    23ac:	f1 01       	movw	r30, r2
    23ae:	81 81       	ldd	r24, Z+1	; 0x01
    23b0:	0e 94 1b 2a 	call	0x5436	; 0x5436 <disk_write>
    23b4:	88 23       	and	r24, r24
    23b6:	29 f0       	breq	.+10     	; 0x23c2 <f_write+0x1e2>
    23b8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ba:	80 68       	ori	r24, 0x80	; 128
    23bc:	8c 83       	std	Y+4, r24	; 0x04
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	aa c0       	rjmp	.+340    	; 0x2516 <f_write+0x336>
    23c2:	e8 81       	ld	r30, Y
    23c4:	f9 81       	ldd	r31, Y+1	; 0x01
    23c6:	86 a5       	ldd	r24, Z+46	; 0x2e
    23c8:	97 a5       	ldd	r25, Z+47	; 0x2f
    23ca:	a0 a9       	ldd	r26, Z+48	; 0x30
    23cc:	b1 a9       	ldd	r27, Z+49	; 0x31
    23ce:	84 19       	sub	r24, r4
    23d0:	95 09       	sbc	r25, r5
    23d2:	a6 09       	sbc	r26, r6
    23d4:	b7 09       	sbc	r27, r7
    23d6:	a7 01       	movw	r20, r14
    23d8:	60 e0       	ldi	r22, 0x00	; 0
    23da:	70 e0       	ldi	r23, 0x00	; 0
    23dc:	84 17       	cp	r24, r20
    23de:	95 07       	cpc	r25, r21
    23e0:	a6 07       	cpc	r26, r22
    23e2:	b7 07       	cpc	r27, r23
    23e4:	78 f4       	brcc	.+30     	; 0x2404 <f_write+0x224>
    23e6:	98 2f       	mov	r25, r24
    23e8:	88 27       	eor	r24, r24
    23ea:	99 0f       	add	r25, r25
    23ec:	b4 01       	movw	r22, r8
    23ee:	68 0f       	add	r22, r24
    23f0:	79 1f       	adc	r23, r25
    23f2:	40 e0       	ldi	r20, 0x00	; 0
    23f4:	52 e0       	ldi	r21, 0x02	; 2
    23f6:	cf 01       	movw	r24, r30
    23f8:	c2 96       	adiw	r24, 0x32	; 50
    23fa:	0e 94 bb 01 	call	0x376	; 0x376 <mem_cpy>
    23fe:	e8 81       	ld	r30, Y
    2400:	f9 81       	ldd	r31, Y+1	; 0x01
    2402:	14 82       	std	Z+4, r1	; 0x04
    2404:	fe 2c       	mov	r15, r14
    2406:	ee 24       	eor	r14, r14
    2408:	ff 0c       	add	r15, r15
    240a:	53 c0       	rjmp	.+166    	; 0x24b2 <f_write+0x2d2>
    240c:	4e 81       	ldd	r20, Y+6	; 0x06
    240e:	5f 81       	ldd	r21, Y+7	; 0x07
    2410:	68 85       	ldd	r22, Y+8	; 0x08
    2412:	79 85       	ldd	r23, Y+9	; 0x09
    2414:	8a 85       	ldd	r24, Y+10	; 0x0a
    2416:	9b 85       	ldd	r25, Y+11	; 0x0b
    2418:	ac 85       	ldd	r26, Y+12	; 0x0c
    241a:	bd 85       	ldd	r27, Y+13	; 0x0d
    241c:	48 17       	cp	r20, r24
    241e:	59 07       	cpc	r21, r25
    2420:	6a 07       	cpc	r22, r26
    2422:	7b 07       	cpc	r23, r27
    2424:	98 f0       	brcs	.+38     	; 0x244c <f_write+0x26c>
    2426:	40 e0       	ldi	r20, 0x00	; 0
    2428:	50 e0       	ldi	r21, 0x00	; 0
    242a:	ba 01       	movw	r22, r20
    242c:	c1 01       	movw	r24, r2
    242e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <move_window>
    2432:	88 23       	and	r24, r24
    2434:	29 f0       	breq	.+10     	; 0x2440 <f_write+0x260>
    2436:	8c 81       	ldd	r24, Y+4	; 0x04
    2438:	80 68       	ori	r24, 0x80	; 128
    243a:	8c 83       	std	Y+4, r24	; 0x04
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	6b c0       	rjmp	.+214    	; 0x2516 <f_write+0x336>
    2440:	e8 81       	ld	r30, Y
    2442:	f9 81       	ldd	r31, Y+1	; 0x01
    2444:	46 a6       	std	Z+46, r4	; 0x2e
    2446:	57 a6       	std	Z+47, r5	; 0x2f
    2448:	60 aa       	std	Z+48, r6	; 0x30
    244a:	71 aa       	std	Z+49, r7	; 0x31
    244c:	4e 8a       	std	Y+22, r4	; 0x16
    244e:	5f 8a       	std	Y+23, r5	; 0x17
    2450:	68 8e       	std	Y+24, r6	; 0x18
    2452:	79 8e       	std	Y+25, r7	; 0x19
    2454:	8e 81       	ldd	r24, Y+6	; 0x06
    2456:	9f 81       	ldd	r25, Y+7	; 0x07
    2458:	91 70       	andi	r25, 0x01	; 1
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	32 e0       	ldi	r19, 0x02	; 2
    245e:	79 01       	movw	r14, r18
    2460:	e8 1a       	sub	r14, r24
    2462:	f9 0a       	sbc	r15, r25
    2464:	ce 14       	cp	r12, r14
    2466:	df 04       	cpc	r13, r15
    2468:	08 f4       	brcc	.+2      	; 0x246c <f_write+0x28c>
    246a:	76 01       	movw	r14, r12
    246c:	4e 89       	ldd	r20, Y+22	; 0x16
    246e:	5f 89       	ldd	r21, Y+23	; 0x17
    2470:	68 8d       	ldd	r22, Y+24	; 0x18
    2472:	79 8d       	ldd	r23, Y+25	; 0x19
    2474:	88 81       	ld	r24, Y
    2476:	99 81       	ldd	r25, Y+1	; 0x01
    2478:	0e 94 62 02 	call	0x4c4	; 0x4c4 <move_window>
    247c:	88 23       	and	r24, r24
    247e:	29 f0       	breq	.+10     	; 0x248a <f_write+0x2aa>
    2480:	8c 81       	ldd	r24, Y+4	; 0x04
    2482:	80 68       	ori	r24, 0x80	; 128
    2484:	8c 83       	std	Y+4, r24	; 0x04
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	46 c0       	rjmp	.+140    	; 0x2516 <f_write+0x336>
    248a:	8e 81       	ldd	r24, Y+6	; 0x06
    248c:	9f 81       	ldd	r25, Y+7	; 0x07
    248e:	a8 85       	ldd	r26, Y+8	; 0x08
    2490:	b9 85       	ldd	r27, Y+9	; 0x09
    2492:	91 70       	andi	r25, 0x01	; 1
    2494:	aa 27       	eor	r26, r26
    2496:	bb 27       	eor	r27, r27
    2498:	c2 96       	adiw	r24, 0x32	; 50
    249a:	28 81       	ld	r18, Y
    249c:	39 81       	ldd	r19, Y+1	; 0x01
    249e:	a7 01       	movw	r20, r14
    24a0:	b4 01       	movw	r22, r8
    24a2:	82 0f       	add	r24, r18
    24a4:	93 1f       	adc	r25, r19
    24a6:	0e 94 bb 01 	call	0x376	; 0x376 <mem_cpy>
    24aa:	e8 81       	ld	r30, Y
    24ac:	f9 81       	ldd	r31, Y+1	; 0x01
    24ae:	21 e0       	ldi	r18, 0x01	; 1
    24b0:	24 83       	std	Z+4, r18	; 0x04
    24b2:	8e 0c       	add	r8, r14
    24b4:	9f 1c       	adc	r9, r15
    24b6:	8e 81       	ldd	r24, Y+6	; 0x06
    24b8:	9f 81       	ldd	r25, Y+7	; 0x07
    24ba:	a8 85       	ldd	r26, Y+8	; 0x08
    24bc:	b9 85       	ldd	r27, Y+9	; 0x09
    24be:	8e 0d       	add	r24, r14
    24c0:	9f 1d       	adc	r25, r15
    24c2:	a1 1d       	adc	r26, r1
    24c4:	b1 1d       	adc	r27, r1
    24c6:	8e 83       	std	Y+6, r24	; 0x06
    24c8:	9f 83       	std	Y+7, r25	; 0x07
    24ca:	a8 87       	std	Y+8, r26	; 0x08
    24cc:	b9 87       	std	Y+9, r27	; 0x09
    24ce:	f5 01       	movw	r30, r10
    24d0:	80 81       	ld	r24, Z
    24d2:	91 81       	ldd	r25, Z+1	; 0x01
    24d4:	8e 0d       	add	r24, r14
    24d6:	9f 1d       	adc	r25, r15
    24d8:	91 83       	std	Z+1, r25	; 0x01
    24da:	80 83       	st	Z, r24
    24dc:	ce 18       	sub	r12, r14
    24de:	df 08       	sbc	r13, r15
    24e0:	09 f0       	breq	.+2      	; 0x24e4 <f_write+0x304>
    24e2:	b9 ce       	rjmp	.-654    	; 0x2256 <f_write+0x76>
    24e4:	8e 81       	ldd	r24, Y+6	; 0x06
    24e6:	9f 81       	ldd	r25, Y+7	; 0x07
    24e8:	a8 85       	ldd	r26, Y+8	; 0x08
    24ea:	b9 85       	ldd	r27, Y+9	; 0x09
    24ec:	4a 85       	ldd	r20, Y+10	; 0x0a
    24ee:	5b 85       	ldd	r21, Y+11	; 0x0b
    24f0:	6c 85       	ldd	r22, Y+12	; 0x0c
    24f2:	7d 85       	ldd	r23, Y+13	; 0x0d
    24f4:	48 17       	cp	r20, r24
    24f6:	59 07       	cpc	r21, r25
    24f8:	6a 07       	cpc	r22, r26
    24fa:	7b 07       	cpc	r23, r27
    24fc:	20 f4       	brcc	.+8      	; 0x2506 <f_write+0x326>
    24fe:	8a 87       	std	Y+10, r24	; 0x0a
    2500:	9b 87       	std	Y+11, r25	; 0x0b
    2502:	ac 87       	std	Y+12, r26	; 0x0c
    2504:	bd 87       	std	Y+13, r27	; 0x0d
    2506:	8c 81       	ldd	r24, Y+4	; 0x04
    2508:	80 62       	ori	r24, 0x20	; 32
    250a:	8c 83       	std	Y+4, r24	; 0x04
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	03 c0       	rjmp	.+6      	; 0x2516 <f_write+0x336>
    2510:	82 e0       	ldi	r24, 0x02	; 2
    2512:	01 c0       	rjmp	.+2      	; 0x2516 <f_write+0x336>
    2514:	87 e0       	ldi	r24, 0x07	; 7
    2516:	df 91       	pop	r29
    2518:	cf 91       	pop	r28
    251a:	1f 91       	pop	r17
    251c:	0f 91       	pop	r16
    251e:	ff 90       	pop	r15
    2520:	ef 90       	pop	r14
    2522:	df 90       	pop	r13
    2524:	cf 90       	pop	r12
    2526:	bf 90       	pop	r11
    2528:	af 90       	pop	r10
    252a:	9f 90       	pop	r9
    252c:	8f 90       	pop	r8
    252e:	7f 90       	pop	r7
    2530:	6f 90       	pop	r6
    2532:	5f 90       	pop	r5
    2534:	4f 90       	pop	r4
    2536:	3f 90       	pop	r3
    2538:	2f 90       	pop	r2
    253a:	08 95       	ret

0000253c <f_sync>:
    253c:	0f 93       	push	r16
    253e:	1f 93       	push	r17
    2540:	cf 93       	push	r28
    2542:	df 93       	push	r29
    2544:	ec 01       	movw	r28, r24
    2546:	6a 81       	ldd	r22, Y+2	; 0x02
    2548:	7b 81       	ldd	r23, Y+3	; 0x03
    254a:	88 81       	ld	r24, Y
    254c:	99 81       	ldd	r25, Y+1	; 0x01
    254e:	0e 94 1b 03 	call	0x636	; 0x636 <validate>
    2552:	81 11       	cpse	r24, r1
    2554:	37 c0       	rjmp	.+110    	; 0x25c4 <f_sync+0x88>
    2556:	9c 81       	ldd	r25, Y+4	; 0x04
    2558:	95 ff       	sbrs	r25, 5
    255a:	34 c0       	rjmp	.+104    	; 0x25c4 <f_sync+0x88>
    255c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    255e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2560:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2562:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2564:	88 81       	ld	r24, Y
    2566:	99 81       	ldd	r25, Y+1	; 0x01
    2568:	0e 94 62 02 	call	0x4c4	; 0x4c4 <move_window>
    256c:	81 11       	cpse	r24, r1
    256e:	2a c0       	rjmp	.+84     	; 0x25c4 <f_sync+0x88>
    2570:	0e 8d       	ldd	r16, Y+30	; 0x1e
    2572:	1f 8d       	ldd	r17, Y+31	; 0x1f
    2574:	f8 01       	movw	r30, r16
    2576:	83 85       	ldd	r24, Z+11	; 0x0b
    2578:	80 62       	ori	r24, 0x20	; 32
    257a:	83 87       	std	Z+11, r24	; 0x0b
    257c:	8a 85       	ldd	r24, Y+10	; 0x0a
    257e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2580:	ac 85       	ldd	r26, Y+12	; 0x0c
    2582:	bd 85       	ldd	r27, Y+13	; 0x0d
    2584:	84 8f       	std	Z+28, r24	; 0x1c
    2586:	95 8f       	std	Z+29, r25	; 0x1d
    2588:	a6 8f       	std	Z+30, r26	; 0x1e
    258a:	b7 8f       	std	Z+31, r27	; 0x1f
    258c:	8e 85       	ldd	r24, Y+14	; 0x0e
    258e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2590:	93 8f       	std	Z+27, r25	; 0x1b
    2592:	82 8f       	std	Z+26, r24	; 0x1a
    2594:	8e 85       	ldd	r24, Y+14	; 0x0e
    2596:	9f 85       	ldd	r25, Y+15	; 0x0f
    2598:	a8 89       	ldd	r26, Y+16	; 0x10
    259a:	b9 89       	ldd	r27, Y+17	; 0x11
    259c:	b5 8b       	std	Z+21, r27	; 0x15
    259e:	a4 8b       	std	Z+20, r26	; 0x14
    25a0:	0e 94 d7 16 	call	0x2dae	; 0x2dae <get_fattime>
    25a4:	f8 01       	movw	r30, r16
    25a6:	66 8b       	std	Z+22, r22	; 0x16
    25a8:	77 8b       	std	Z+23, r23	; 0x17
    25aa:	80 8f       	std	Z+24, r24	; 0x18
    25ac:	91 8f       	std	Z+25, r25	; 0x19
    25ae:	8c 81       	ldd	r24, Y+4	; 0x04
    25b0:	8f 7d       	andi	r24, 0xDF	; 223
    25b2:	8c 83       	std	Y+4, r24	; 0x04
    25b4:	e8 81       	ld	r30, Y
    25b6:	f9 81       	ldd	r31, Y+1	; 0x01
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	84 83       	std	Z+4, r24	; 0x04
    25bc:	88 81       	ld	r24, Y
    25be:	99 81       	ldd	r25, Y+1	; 0x01
    25c0:	0e 94 1b 06 	call	0xc36	; 0xc36 <sync>
    25c4:	df 91       	pop	r29
    25c6:	cf 91       	pop	r28
    25c8:	1f 91       	pop	r17
    25ca:	0f 91       	pop	r16
    25cc:	08 95       	ret

000025ce <f_close>:
    25ce:	cf 93       	push	r28
    25d0:	df 93       	push	r29
    25d2:	ec 01       	movw	r28, r24
    25d4:	0e 94 9e 12 	call	0x253c	; 0x253c <f_sync>
    25d8:	81 11       	cpse	r24, r1
    25da:	02 c0       	rjmp	.+4      	; 0x25e0 <f_close+0x12>
    25dc:	19 82       	std	Y+1, r1	; 0x01
    25de:	18 82       	st	Y, r1
    25e0:	df 91       	pop	r29
    25e2:	cf 91       	pop	r28
    25e4:	08 95       	ret

000025e6 <f_getcwd>:
#if _FS_RPATH >= 2
FRESULT f_getcwd (
	TCHAR *path,	/* Pointer to the directory path */
	UINT sz_path	/* Size of path */
)
{
    25e6:	4f 92       	push	r4
    25e8:	5f 92       	push	r5
    25ea:	6f 92       	push	r6
    25ec:	7f 92       	push	r7
    25ee:	9f 92       	push	r9
    25f0:	af 92       	push	r10
    25f2:	bf 92       	push	r11
    25f4:	cf 92       	push	r12
    25f6:	df 92       	push	r13
    25f8:	ef 92       	push	r14
    25fa:	ff 92       	push	r15
    25fc:	0f 93       	push	r16
    25fe:	1f 93       	push	r17
    2600:	cf 93       	push	r28
    2602:	df 93       	push	r29
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62
    2608:	ea 97       	sbiw	r28, 0x3a	; 58
    260a:	0f b6       	in	r0, 0x3f	; 63
    260c:	f8 94       	cli
    260e:	de bf       	out	0x3e, r29	; 62
    2610:	0f be       	out	0x3f, r0	; 63
    2612:	cd bf       	out	0x3d, r28	; 61
    2614:	9a af       	std	Y+58, r25	; 0x3a
    2616:	89 af       	std	Y+57, r24	; 0x39
    2618:	5b 01       	movw	r10, r22
	TCHAR *tp;
	FILINFO fno;
	DEF_NAMEBUF;


	*path = 0;
    261a:	fc 01       	movw	r30, r24
    261c:	10 82       	st	Z, r1
	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
    261e:	40 e0       	ldi	r20, 0x00	; 0
    2620:	be 01       	movw	r22, r28
    2622:	6f 5f       	subi	r22, 0xFF	; 255
    2624:	7f 4f       	sbci	r23, 0xFF	; 255
    2626:	ce 01       	movw	r24, r28
    2628:	c9 96       	adiw	r24, 0x39	; 57
    262a:	0e 94 35 03 	call	0x66a	; 0x66a <chk_mounted>
    262e:	98 2e       	mov	r9, r24
	if (res == FR_OK) {
    2630:	81 11       	cpse	r24, r1
    2632:	03 c1       	rjmp	.+518    	; 0x283a <f_getcwd+0x254>
		INIT_BUF(dj);
    2634:	ce 01       	movw	r24, r28
    2636:	8d 96       	adiw	r24, 0x2d	; 45
    2638:	9e 8b       	std	Y+22, r25	; 0x16
    263a:	8d 8b       	std	Y+21, r24	; 0x15
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
    263c:	e9 81       	ldd	r30, Y+1	; 0x01
    263e:	fa 81       	ldd	r31, Y+2	; 0x02
    2640:	46 88       	ldd	r4, Z+22	; 0x16
    2642:	57 88       	ldd	r5, Z+23	; 0x17
    2644:	60 8c       	ldd	r6, Z+24	; 0x18
    2646:	71 8c       	ldd	r7, Z+25	; 0x19
    2648:	4f 82       	std	Y+7, r4	; 0x07
    264a:	58 86       	std	Y+8, r5	; 0x08
    264c:	69 86       	std	Y+9, r6	; 0x09
    264e:	7a 86       	std	Y+10, r7	; 0x0a
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
    2650:	41 14       	cp	r4, r1
    2652:	51 04       	cpc	r5, r1
    2654:	61 04       	cpc	r6, r1
    2656:	71 04       	cpc	r7, r1
    2658:	09 f4       	brne	.+2      	; 0x265c <f_getcwd+0x76>
    265a:	e6 c0       	rjmp	.+460    	; 0x2828 <f_getcwd+0x242>
    265c:	65 01       	movw	r12, r10
    265e:	7e 01       	movw	r14, r28
    2660:	f0 e2       	ldi	r31, 0x20	; 32
    2662:	ef 0e       	add	r14, r31
    2664:	f1 1c       	adc	r15, r1
			for (n = 0; tp[n]; n++) ;
			if (i < n + 3) {
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
    2666:	0f e2       	ldi	r16, 0x2F	; 47
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
			res = dir_sdi(&dj, 1);			/* Get parent dir */
    2668:	61 e0       	ldi	r22, 0x01	; 1
    266a:	70 e0       	ldi	r23, 0x00	; 0
    266c:	ce 01       	movw	r24, r28
    266e:	01 96       	adiw	r24, 0x01	; 1
    2670:	0e 94 8b 07 	call	0xf16	; 0xf16 <dir_sdi>
			if (res != FR_OK) break;
    2674:	81 11       	cpse	r24, r1
    2676:	b2 c0       	rjmp	.+356    	; 0x27dc <f_getcwd+0x1f6>
			res = dir_read(&dj);
    2678:	ce 01       	movw	r24, r28
    267a:	01 96       	adiw	r24, 0x01	; 1
    267c:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <dir_read>
			if (res != FR_OK) break;
    2680:	81 11       	cpse	r24, r1
    2682:	ae c0       	rjmp	.+348    	; 0x27e0 <f_getcwd+0x1fa>
			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
    2684:	eb 89       	ldd	r30, Y+19	; 0x13
    2686:	fc 89       	ldd	r31, Y+20	; 0x14
    2688:	84 89       	ldd	r24, Z+20	; 0x14
    268a:	95 89       	ldd	r25, Z+21	; 0x15
    268c:	a0 e0       	ldi	r26, 0x00	; 0
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	dc 01       	movw	r26, r24
    2692:	99 27       	eor	r25, r25
    2694:	88 27       	eor	r24, r24
    2696:	42 8d       	ldd	r20, Z+26	; 0x1a
    2698:	53 8d       	ldd	r21, Z+27	; 0x1b
    269a:	60 e0       	ldi	r22, 0x00	; 0
    269c:	70 e0       	ldi	r23, 0x00	; 0
    269e:	84 2b       	or	r24, r20
    26a0:	95 2b       	or	r25, r21
    26a2:	a6 2b       	or	r26, r22
    26a4:	b7 2b       	or	r27, r23
    26a6:	8f 83       	std	Y+7, r24	; 0x07
    26a8:	98 87       	std	Y+8, r25	; 0x08
    26aa:	a9 87       	std	Y+9, r26	; 0x09
    26ac:	ba 87       	std	Y+10, r27	; 0x0a
			res = dir_sdi(&dj, 0);
    26ae:	60 e0       	ldi	r22, 0x00	; 0
    26b0:	70 e0       	ldi	r23, 0x00	; 0
    26b2:	ce 01       	movw	r24, r28
    26b4:	01 96       	adiw	r24, 0x01	; 1
    26b6:	0e 94 8b 07 	call	0xf16	; 0xf16 <dir_sdi>
			if (res != FR_OK) break;
    26ba:	81 11       	cpse	r24, r1
    26bc:	93 c0       	rjmp	.+294    	; 0x27e4 <f_getcwd+0x1fe>
			do {							/* Find the entry links to the child dir */
				res = dir_read(&dj);
    26be:	ce 01       	movw	r24, r28
    26c0:	01 96       	adiw	r24, 0x01	; 1
    26c2:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <dir_read>
    26c6:	18 2f       	mov	r17, r24
				if (res != FR_OK) break;
    26c8:	81 11       	cpse	r24, r1
    26ca:	9a c0       	rjmp	.+308    	; 0x2800 <f_getcwd+0x21a>
				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
    26cc:	eb 89       	ldd	r30, Y+19	; 0x13
    26ce:	fc 89       	ldd	r31, Y+20	; 0x14
    26d0:	84 89       	ldd	r24, Z+20	; 0x14
    26d2:	95 89       	ldd	r25, Z+21	; 0x15
    26d4:	a0 e0       	ldi	r26, 0x00	; 0
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	dc 01       	movw	r26, r24
    26da:	99 27       	eor	r25, r25
    26dc:	88 27       	eor	r24, r24
    26de:	42 8d       	ldd	r20, Z+26	; 0x1a
    26e0:	53 8d       	ldd	r21, Z+27	; 0x1b
    26e2:	60 e0       	ldi	r22, 0x00	; 0
    26e4:	70 e0       	ldi	r23, 0x00	; 0
    26e6:	84 2b       	or	r24, r20
    26e8:	95 2b       	or	r25, r21
    26ea:	a6 2b       	or	r26, r22
    26ec:	b7 2b       	or	r27, r23
    26ee:	84 15       	cp	r24, r4
    26f0:	95 05       	cpc	r25, r5
    26f2:	a6 05       	cpc	r26, r6
    26f4:	b7 05       	cpc	r27, r7
    26f6:	09 f4       	brne	.+2      	; 0x26fa <f_getcwd+0x114>
    26f8:	87 c0       	rjmp	.+270    	; 0x2808 <f_getcwd+0x222>
				res = dir_next(&dj, 0);	
    26fa:	60 e0       	ldi	r22, 0x00	; 0
    26fc:	70 e0       	ldi	r23, 0x00	; 0
    26fe:	ce 01       	movw	r24, r28
    2700:	01 96       	adiw	r24, 0x01	; 1
    2702:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <dir_next>
    2706:	18 2f       	mov	r17, r24
			} while (res == FR_OK);
    2708:	88 23       	and	r24, r24
    270a:	c9 f2       	breq	.-78     	; 0x26be <f_getcwd+0xd8>
    270c:	79 c0       	rjmp	.+242    	; 0x2800 <f_getcwd+0x21a>
    270e:	de 01       	movw	r26, r28
    2710:	91 96       	adiw	r26, 0x21	; 33
			fno.lfsize = i;
#endif
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
    2712:	e0 e0       	ldi	r30, 0x00	; 0
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	01 c0       	rjmp	.+2      	; 0x271a <f_getcwd+0x134>
    2718:	f9 01       	movw	r30, r18
    271a:	9f 01       	movw	r18, r30
    271c:	2f 5f       	subi	r18, 0xFF	; 255
    271e:	3f 4f       	sbci	r19, 0xFF	; 255
    2720:	8d 91       	ld	r24, X+
    2722:	81 11       	cpse	r24, r1
    2724:	f9 cf       	rjmp	.-14     	; 0x2718 <f_getcwd+0x132>
			if (i < n + 3) {
    2726:	cf 01       	movw	r24, r30
    2728:	04 96       	adiw	r24, 0x04	; 4
    272a:	c8 16       	cp	r12, r24
    272c:	d9 06       	cpc	r13, r25
    272e:	08 f4       	brcc	.+2      	; 0x2732 <f_getcwd+0x14c>
    2730:	5b c0       	rjmp	.+182    	; 0x27e8 <f_getcwd+0x202>
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
    2732:	21 15       	cp	r18, r1
    2734:	31 05       	cpc	r19, r1
    2736:	a1 f0       	breq	.+40     	; 0x2760 <f_getcwd+0x17a>
    2738:	3a 96       	adiw	r30, 0x0a	; 10
    273a:	87 e1       	ldi	r24, 0x17	; 23
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	8c 0f       	add	r24, r28
    2740:	9d 1f       	adc	r25, r29
    2742:	e8 0f       	add	r30, r24
    2744:	f9 1f       	adc	r31, r25
    2746:	c6 01       	movw	r24, r12
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	42 91       	ld	r20, -Z
    274c:	a9 ad       	ldd	r26, Y+57	; 0x39
    274e:	ba ad       	ldd	r27, Y+58	; 0x3a
    2750:	a8 0f       	add	r26, r24
    2752:	b9 1f       	adc	r27, r25
    2754:	4c 93       	st	X, r20
    2756:	ee 15       	cp	r30, r14
    2758:	ff 05       	cpc	r31, r15
    275a:	b1 f7       	brne	.-20     	; 0x2748 <f_getcwd+0x162>
    275c:	c2 1a       	sub	r12, r18
    275e:	d3 0a       	sbc	r13, r19
			path[--i] = '/';
    2760:	91 e0       	ldi	r25, 0x01	; 1
    2762:	c9 1a       	sub	r12, r25
    2764:	d1 08       	sbc	r13, r1
    2766:	e9 ad       	ldd	r30, Y+57	; 0x39
    2768:	fa ad       	ldd	r31, Y+58	; 0x3a
    276a:	ec 0d       	add	r30, r12
    276c:	fd 1d       	adc	r31, r13
    276e:	00 83       	st	Z, r16
	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
    2770:	4f 80       	ldd	r4, Y+7	; 0x07
    2772:	58 84       	ldd	r5, Y+8	; 0x08
    2774:	69 84       	ldd	r6, Y+9	; 0x09
    2776:	7a 84       	ldd	r7, Y+10	; 0x0a
    2778:	41 14       	cp	r4, r1
    277a:	51 04       	cpc	r5, r1
    277c:	61 04       	cpc	r6, r1
    277e:	71 04       	cpc	r7, r1
    2780:	09 f0       	breq	.+2      	; 0x2784 <f_getcwd+0x19e>
    2782:	72 cf       	rjmp	.-284    	; 0x2668 <f_getcwd+0x82>
    2784:	1d c0       	rjmp	.+58     	; 0x27c0 <f_getcwd+0x1da>
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
    2786:	a9 ad       	ldd	r26, Y+57	; 0x39
    2788:	ba ad       	ldd	r27, Y+58	; 0x3a
				res = dir_read(&dj);
				if (res != FR_OK) break;
				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
				res = dir_next(&dj, 0);	
			} while (res == FR_OK);
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
    278a:	68 94       	set
    278c:	99 24       	eor	r9, r9
    278e:	91 f8       	bld	r9, 1
    2790:	15 c0       	rjmp	.+42     	; 0x27bc <f_getcwd+0x1d6>
		tp = path;
		if (res == FR_OK) {
			*tp++ = '0' + CurrVol;			/* Put drive number */
			*tp++ = ':';
			if (i == sz_path) {				/* Root-dir */
				*tp++ = '/';
    2792:	df 01       	movw	r26, r30
    2794:	13 96       	adiw	r26, 0x03	; 3
    2796:	8f e2       	ldi	r24, 0x2F	; 47
    2798:	82 83       	std	Z+2, r24	; 0x02
    279a:	10 c0       	rjmp	.+32     	; 0x27bc <f_getcwd+0x1d6>
			} else {						/* Sub-dir */
				do		/* Add stacked path str */
					*tp++ = path[i++];
    279c:	11 96       	adiw	r26, 0x01	; 1
    279e:	e9 ad       	ldd	r30, Y+57	; 0x39
    27a0:	fa ad       	ldd	r31, Y+58	; 0x3a
    27a2:	ec 0d       	add	r30, r12
    27a4:	fd 1d       	adc	r31, r13
    27a6:	80 81       	ld	r24, Z
    27a8:	fd 01       	movw	r30, r26
    27aa:	31 97       	sbiw	r30, 0x01	; 1
    27ac:	80 83       	st	Z, r24
    27ae:	f6 01       	movw	r30, r12
    27b0:	31 96       	adiw	r30, 0x01	; 1
    27b2:	6f 01       	movw	r12, r30
				while (i < sz_path);
    27b4:	ea 15       	cp	r30, r10
    27b6:	fb 05       	cpc	r31, r11
    27b8:	88 f3       	brcs	.-30     	; 0x279c <f_getcwd+0x1b6>
    27ba:	91 2e       	mov	r9, r17
			}
		}
		*tp = 0;
    27bc:	1c 92       	st	X, r1
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
    27be:	3d c0       	rjmp	.+122    	; 0x283a <f_getcwd+0x254>
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
    27c0:	e9 ad       	ldd	r30, Y+57	; 0x39
    27c2:	fa ad       	ldd	r31, Y+58	; 0x3a
		if (res == FR_OK) {
			*tp++ = '0' + CurrVol;			/* Put drive number */
    27c4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
    27c8:	80 5d       	subi	r24, 0xD0	; 208
    27ca:	80 83       	st	Z, r24
			*tp++ = ':';
    27cc:	8a e3       	ldi	r24, 0x3A	; 58
    27ce:	81 83       	std	Z+1, r24	; 0x01
			if (i == sz_path) {				/* Root-dir */
    27d0:	ac 14       	cp	r10, r12
    27d2:	bd 04       	cpc	r11, r13
    27d4:	f1 f2       	breq	.-68     	; 0x2792 <f_getcwd+0x1ac>
			path[--i] = '/';
		}
		tp = path;
		if (res == FR_OK) {
			*tp++ = '0' + CurrVol;			/* Put drive number */
			*tp++ = ':';
    27d6:	df 01       	movw	r26, r30
    27d8:	12 96       	adiw	r26, 0x02	; 2
    27da:	e0 cf       	rjmp	.-64     	; 0x279c <f_getcwd+0x1b6>
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
			res = dir_sdi(&dj, 1);			/* Get parent dir */
    27dc:	98 2e       	mov	r9, r24
    27de:	0d c0       	rjmp	.+26     	; 0x27fa <f_getcwd+0x214>
			if (res != FR_OK) break;
			res = dir_read(&dj);
    27e0:	98 2e       	mov	r9, r24
    27e2:	0b c0       	rjmp	.+22     	; 0x27fa <f_getcwd+0x214>
			if (res != FR_OK) break;
			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
			res = dir_sdi(&dj, 0);
    27e4:	98 2e       	mov	r9, r24
    27e6:	09 c0       	rjmp	.+18     	; 0x27fa <f_getcwd+0x214>
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
			if (i < n + 3) {
				res = FR_NOT_ENOUGH_CORE; break;
    27e8:	0f 2e       	mov	r0, r31
    27ea:	f1 e1       	ldi	r31, 0x11	; 17
    27ec:	9f 2e       	mov	r9, r31
    27ee:	f0 2d       	mov	r31, r0
    27f0:	04 c0       	rjmp	.+8      	; 0x27fa <f_getcwd+0x214>
    27f2:	0f 2e       	mov	r0, r31
    27f4:	f1 e1       	ldi	r31, 0x11	; 17
    27f6:	9f 2e       	mov	r9, r31
    27f8:	f0 2d       	mov	r31, r0
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
    27fa:	a9 ad       	ldd	r26, Y+57	; 0x39
    27fc:	ba ad       	ldd	r27, Y+58	; 0x3a
    27fe:	de cf       	rjmp	.-68     	; 0x27bc <f_getcwd+0x1d6>
				res = dir_read(&dj);
				if (res != FR_OK) break;
				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
				res = dir_next(&dj, 0);	
			} while (res == FR_OK);
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
    2800:	14 30       	cpi	r17, 0x04	; 4
    2802:	09 f2       	breq	.-126    	; 0x2786 <f_getcwd+0x1a0>
    2804:	91 2e       	mov	r9, r17
    2806:	f9 cf       	rjmp	.-14     	; 0x27fa <f_getcwd+0x214>
			if (res != FR_OK) break;
#if _USE_LFN
			fno.lfname = path;
			fno.lfsize = i;
#endif
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
    2808:	be 01       	movw	r22, r28
    280a:	69 5e       	subi	r22, 0xE9	; 233
    280c:	7f 4f       	sbci	r23, 0xFF	; 255
    280e:	ce 01       	movw	r24, r28
    2810:	01 96       	adiw	r24, 0x01	; 1
    2812:	0e 94 e7 01 	call	0x3ce	; 0x3ce <get_fileinfo>
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
    2816:	88 a1       	ldd	r24, Y+32	; 0x20
    2818:	81 11       	cpse	r24, r1
    281a:	79 cf       	rjmp	.-270    	; 0x270e <f_getcwd+0x128>
			if (i < n + 3) {
    281c:	f3 e0       	ldi	r31, 0x03	; 3
    281e:	cf 16       	cp	r12, r31
    2820:	d1 04       	cpc	r13, r1
    2822:	08 f0       	brcs	.+2      	; 0x2826 <f_getcwd+0x240>
    2824:	9d cf       	rjmp	.-198    	; 0x2760 <f_getcwd+0x17a>
    2826:	e5 cf       	rjmp	.-54     	; 0x27f2 <f_getcwd+0x20c>
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
    2828:	e9 ad       	ldd	r30, Y+57	; 0x39
    282a:	fa ad       	ldd	r31, Y+58	; 0x3a
		if (res == FR_OK) {
			*tp++ = '0' + CurrVol;			/* Put drive number */
    282c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
    2830:	80 5d       	subi	r24, 0xD0	; 208
    2832:	80 83       	st	Z, r24
			*tp++ = ':';
    2834:	8a e3       	ldi	r24, 0x3A	; 58
    2836:	81 83       	std	Z+1, r24	; 0x01
    2838:	ac cf       	rjmp	.-168    	; 0x2792 <f_getcwd+0x1ac>
		*tp = 0;
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    283a:	89 2d       	mov	r24, r9
    283c:	ea 96       	adiw	r28, 0x3a	; 58
    283e:	0f b6       	in	r0, 0x3f	; 63
    2840:	f8 94       	cli
    2842:	de bf       	out	0x3e, r29	; 62
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	cd bf       	out	0x3d, r28	; 61
    2848:	df 91       	pop	r29
    284a:	cf 91       	pop	r28
    284c:	1f 91       	pop	r17
    284e:	0f 91       	pop	r16
    2850:	ff 90       	pop	r15
    2852:	ef 90       	pop	r14
    2854:	df 90       	pop	r13
    2856:	cf 90       	pop	r12
    2858:	bf 90       	pop	r11
    285a:	af 90       	pop	r10
    285c:	9f 90       	pop	r9
    285e:	7f 90       	pop	r7
    2860:	6f 90       	pop	r6
    2862:	5f 90       	pop	r5
    2864:	4f 90       	pop	r4
    2866:	08 95       	ret

00002868 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    2868:	4f 92       	push	r4
    286a:	5f 92       	push	r5
    286c:	6f 92       	push	r6
    286e:	7f 92       	push	r7
    2870:	8f 92       	push	r8
    2872:	9f 92       	push	r9
    2874:	af 92       	push	r10
    2876:	bf 92       	push	r11
    2878:	cf 92       	push	r12
    287a:	df 92       	push	r13
    287c:	ef 92       	push	r14
    287e:	ff 92       	push	r15
    2880:	0f 93       	push	r16
    2882:	1f 93       	push	r17
    2884:	cf 93       	push	r28
    2886:	df 93       	push	r29
    2888:	00 d0       	rcall	.+0      	; 0x288a <f_lseek+0x22>
    288a:	00 d0       	rcall	.+0      	; 0x288c <f_lseek+0x24>
    288c:	00 d0       	rcall	.+0      	; 0x288e <f_lseek+0x26>
    288e:	cd b7       	in	r28, 0x3d	; 61
    2890:	de b7       	in	r29, 0x3e	; 62
    2892:	9e 83       	std	Y+6, r25	; 0x06
    2894:	8d 83       	std	Y+5, r24	; 0x05
    2896:	6a 01       	movw	r12, r20
    2898:	7b 01       	movw	r14, r22
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    289a:	dc 01       	movw	r26, r24
    289c:	12 96       	adiw	r26, 0x02	; 2
    289e:	6d 91       	ld	r22, X+
    28a0:	7c 91       	ld	r23, X
    28a2:	13 97       	sbiw	r26, 0x03	; 3
    28a4:	8d 91       	ld	r24, X+
    28a6:	9c 91       	ld	r25, X
    28a8:	0e 94 1b 03 	call	0x636	; 0x636 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    28ac:	81 11       	cpse	r24, r1
    28ae:	9d c1       	rjmp	.+826    	; 0x2bea <f_lseek+0x382>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    28b0:	ed 81       	ldd	r30, Y+5	; 0x05
    28b2:	fe 81       	ldd	r31, Y+6	; 0x06
    28b4:	84 81       	ldd	r24, Z+4	; 0x04
    28b6:	88 23       	and	r24, r24
    28b8:	0c f4       	brge	.+2      	; 0x28bc <f_lseek+0x54>
    28ba:	92 c1       	rjmp	.+804    	; 0x2be0 <f_lseek+0x378>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    28bc:	42 85       	ldd	r20, Z+10	; 0x0a
    28be:	53 85       	ldd	r21, Z+11	; 0x0b
    28c0:	64 85       	ldd	r22, Z+12	; 0x0c
    28c2:	75 85       	ldd	r23, Z+13	; 0x0d
    28c4:	4c 15       	cp	r20, r12
    28c6:	5d 05       	cpc	r21, r13
    28c8:	6e 05       	cpc	r22, r14
    28ca:	7f 05       	cpc	r23, r15
    28cc:	20 f4       	brcc	.+8      	; 0x28d6 <f_lseek+0x6e>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    28ce:	81 fd       	sbrc	r24, 1
    28d0:	02 c0       	rjmp	.+4      	; 0x28d6 <f_lseek+0x6e>
#endif
			) ofs = fp->fsize;
    28d2:	6a 01       	movw	r12, r20
    28d4:	7b 01       	movw	r14, r22

		ifptr = fp->fptr;
    28d6:	ad 81       	ldd	r26, Y+5	; 0x05
    28d8:	be 81       	ldd	r27, Y+6	; 0x06
    28da:	16 96       	adiw	r26, 0x06	; 6
    28dc:	4d 90       	ld	r4, X+
    28de:	5d 90       	ld	r5, X+
    28e0:	6d 90       	ld	r6, X+
    28e2:	7c 90       	ld	r7, X
    28e4:	19 97       	sbiw	r26, 0x09	; 9
		fp->fptr = nsect = 0;
    28e6:	fd 01       	movw	r30, r26
    28e8:	16 82       	std	Z+6, r1	; 0x06
    28ea:	17 82       	std	Z+7, r1	; 0x07
    28ec:	10 86       	std	Z+8, r1	; 0x08
    28ee:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    28f0:	c1 14       	cp	r12, r1
    28f2:	d1 04       	cpc	r13, r1
    28f4:	e1 04       	cpc	r14, r1
    28f6:	f1 04       	cpc	r15, r1
    28f8:	09 f4       	brne	.+2      	; 0x28fc <f_lseek+0x94>
    28fa:	74 c1       	rjmp	.+744    	; 0x2be4 <f_lseek+0x37c>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    28fc:	00 81       	ld	r16, Z
    28fe:	11 81       	ldd	r17, Z+1	; 0x01
    2900:	d8 01       	movw	r26, r16
    2902:	12 96       	adiw	r26, 0x02	; 2
    2904:	8c 90       	ld	r8, X
    2906:	91 2c       	mov	r9, r1
    2908:	a1 2c       	mov	r10, r1
    290a:	b1 2c       	mov	r11, r1
    290c:	07 2e       	mov	r0, r23
    290e:	79 e0       	ldi	r23, 0x09	; 9
    2910:	88 0c       	add	r8, r8
    2912:	99 1c       	adc	r9, r9
    2914:	aa 1c       	adc	r10, r10
    2916:	bb 1c       	adc	r11, r11
    2918:	7a 95       	dec	r23
    291a:	d1 f7       	brne	.-12     	; 0x2910 <f_lseek+0xa8>
    291c:	70 2d       	mov	r23, r0
			if (ifptr > 0 &&
    291e:	41 14       	cp	r4, r1
    2920:	51 04       	cpc	r5, r1
    2922:	61 04       	cpc	r6, r1
    2924:	71 04       	cpc	r7, r1
    2926:	09 f4       	brne	.+2      	; 0x292a <f_lseek+0xc2>
    2928:	40 c0       	rjmp	.+128    	; 0x29aa <f_lseek+0x142>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    292a:	b1 e0       	ldi	r27, 0x01	; 1
    292c:	4b 1a       	sub	r4, r27
    292e:	51 08       	sbc	r5, r1
    2930:	61 08       	sbc	r6, r1
    2932:	71 08       	sbc	r7, r1

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    2934:	c7 01       	movw	r24, r14
    2936:	b6 01       	movw	r22, r12
    2938:	61 50       	subi	r22, 0x01	; 1
    293a:	71 09       	sbc	r23, r1
    293c:	81 09       	sbc	r24, r1
    293e:	91 09       	sbc	r25, r1
    2940:	a5 01       	movw	r20, r10
    2942:	94 01       	movw	r18, r8
    2944:	0e 94 0e 33 	call	0x661c	; 0x661c <__udivmodsi4>
    2948:	29 83       	std	Y+1, r18	; 0x01
    294a:	3a 83       	std	Y+2, r19	; 0x02
    294c:	4b 83       	std	Y+3, r20	; 0x03
    294e:	5c 83       	std	Y+4, r21	; 0x04
    2950:	c3 01       	movw	r24, r6
    2952:	b2 01       	movw	r22, r4
    2954:	a5 01       	movw	r20, r10
    2956:	94 01       	movw	r18, r8
    2958:	0e 94 0e 33 	call	0x661c	; 0x661c <__udivmodsi4>
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	9a 81       	ldd	r25, Y+2	; 0x02
    2960:	ab 81       	ldd	r26, Y+3	; 0x03
    2962:	bc 81       	ldd	r27, Y+4	; 0x04
    2964:	82 17       	cp	r24, r18
    2966:	93 07       	cpc	r25, r19
    2968:	a4 07       	cpc	r26, r20
    296a:	b5 07       	cpc	r27, r21
    296c:	f0 f0       	brcs	.+60     	; 0x29aa <f_lseek+0x142>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    296e:	88 27       	eor	r24, r24
    2970:	99 27       	eor	r25, r25
    2972:	dc 01       	movw	r26, r24
    2974:	88 19       	sub	r24, r8
    2976:	99 09       	sbc	r25, r9
    2978:	aa 09       	sbc	r26, r10
    297a:	bb 09       	sbc	r27, r11
    297c:	48 22       	and	r4, r24
    297e:	59 22       	and	r5, r25
    2980:	6a 22       	and	r6, r26
    2982:	7b 22       	and	r7, r27
    2984:	ad 81       	ldd	r26, Y+5	; 0x05
    2986:	be 81       	ldd	r27, Y+6	; 0x06
    2988:	16 96       	adiw	r26, 0x06	; 6
    298a:	4d 92       	st	X+, r4
    298c:	5d 92       	st	X+, r5
    298e:	6d 92       	st	X+, r6
    2990:	7c 92       	st	X, r7
    2992:	19 97       	sbiw	r26, 0x09	; 9
				ofs -= fp->fptr;
    2994:	c4 18       	sub	r12, r4
    2996:	d5 08       	sbc	r13, r5
    2998:	e6 08       	sbc	r14, r6
    299a:	f7 08       	sbc	r15, r7
				clst = fp->curr_clust;
    299c:	52 96       	adiw	r26, 0x12	; 18
    299e:	4d 91       	ld	r20, X+
    29a0:	5d 91       	ld	r21, X+
    29a2:	6d 91       	ld	r22, X+
    29a4:	7c 91       	ld	r23, X
    29a6:	55 97       	sbiw	r26, 0x15	; 21
    29a8:	3d c0       	rjmp	.+122    	; 0x2a24 <f_lseek+0x1bc>
			} else {									/* When seek to back cluster, */
				clst = fp->org_clust;					/* start from the first cluster */
    29aa:	ed 81       	ldd	r30, Y+5	; 0x05
    29ac:	fe 81       	ldd	r31, Y+6	; 0x06
    29ae:	46 85       	ldd	r20, Z+14	; 0x0e
    29b0:	57 85       	ldd	r21, Z+15	; 0x0f
    29b2:	60 89       	ldd	r22, Z+16	; 0x10
    29b4:	71 89       	ldd	r23, Z+17	; 0x11
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    29b6:	41 15       	cp	r20, r1
    29b8:	51 05       	cpc	r21, r1
    29ba:	61 05       	cpc	r22, r1
    29bc:	71 05       	cpc	r23, r1
    29be:	61 f5       	brne	.+88     	; 0x2a18 <f_lseek+0x1b0>
					clst = create_chain(fp->fs, 0);
    29c0:	40 e0       	ldi	r20, 0x00	; 0
    29c2:	50 e0       	ldi	r21, 0x00	; 0
    29c4:	ba 01       	movw	r22, r20
    29c6:	c8 01       	movw	r24, r16
    29c8:	0e 94 63 09 	call	0x12c6	; 0x12c6 <create_chain>
    29cc:	ab 01       	movw	r20, r22
    29ce:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    29d0:	41 30       	cpi	r20, 0x01	; 1
    29d2:	51 05       	cpc	r21, r1
    29d4:	61 05       	cpc	r22, r1
    29d6:	71 05       	cpc	r23, r1
    29d8:	51 f4       	brne	.+20     	; 0x29ee <f_lseek+0x186>
    29da:	ad 81       	ldd	r26, Y+5	; 0x05
    29dc:	be 81       	ldd	r27, Y+6	; 0x06
    29de:	14 96       	adiw	r26, 0x04	; 4
    29e0:	8c 91       	ld	r24, X
    29e2:	14 97       	sbiw	r26, 0x04	; 4
    29e4:	80 68       	ori	r24, 0x80	; 128
    29e6:	14 96       	adiw	r26, 0x04	; 4
    29e8:	8c 93       	st	X, r24
    29ea:	82 e0       	ldi	r24, 0x02	; 2
    29ec:	fe c0       	rjmp	.+508    	; 0x2bea <f_lseek+0x382>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    29ee:	4f 3f       	cpi	r20, 0xFF	; 255
    29f0:	bf ef       	ldi	r27, 0xFF	; 255
    29f2:	5b 07       	cpc	r21, r27
    29f4:	6b 07       	cpc	r22, r27
    29f6:	7b 07       	cpc	r23, r27
    29f8:	39 f4       	brne	.+14     	; 0x2a08 <f_lseek+0x1a0>
    29fa:	ed 81       	ldd	r30, Y+5	; 0x05
    29fc:	fe 81       	ldd	r31, Y+6	; 0x06
    29fe:	84 81       	ldd	r24, Z+4	; 0x04
    2a00:	80 68       	ori	r24, 0x80	; 128
    2a02:	84 83       	std	Z+4, r24	; 0x04
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	f1 c0       	rjmp	.+482    	; 0x2bea <f_lseek+0x382>
					fp->org_clust = clst;
    2a08:	ad 81       	ldd	r26, Y+5	; 0x05
    2a0a:	be 81       	ldd	r27, Y+6	; 0x06
    2a0c:	1e 96       	adiw	r26, 0x0e	; 14
    2a0e:	4d 93       	st	X+, r20
    2a10:	5d 93       	st	X+, r21
    2a12:	6d 93       	st	X+, r22
    2a14:	7c 93       	st	X, r23
    2a16:	51 97       	sbiw	r26, 0x11	; 17
				}
#endif
				fp->curr_clust = clst;
    2a18:	ed 81       	ldd	r30, Y+5	; 0x05
    2a1a:	fe 81       	ldd	r31, Y+6	; 0x06
    2a1c:	42 8b       	std	Z+18, r20	; 0x12
    2a1e:	53 8b       	std	Z+19, r21	; 0x13
    2a20:	64 8b       	std	Z+20, r22	; 0x14
    2a22:	75 8b       	std	Z+21, r23	; 0x15
			}
			if (clst != 0) {
    2a24:	41 15       	cp	r20, r1
    2a26:	51 05       	cpc	r21, r1
    2a28:	61 05       	cpc	r22, r1
    2a2a:	71 05       	cpc	r23, r1
    2a2c:	09 f4       	brne	.+2      	; 0x2a30 <f_lseek+0x1c8>
    2a2e:	a1 c0       	rjmp	.+322    	; 0x2b72 <f_lseek+0x30a>
				while (ofs > bcs) {						/* Cluster following loop */
    2a30:	8c 14       	cp	r8, r12
    2a32:	9d 04       	cpc	r9, r13
    2a34:	ae 04       	cpc	r10, r14
    2a36:	bf 04       	cpc	r11, r15
    2a38:	08 f0       	brcs	.+2      	; 0x2a3c <f_lseek+0x1d4>
    2a3a:	63 c0       	rjmp	.+198    	; 0x2b02 <f_lseek+0x29a>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    2a3c:	ad 81       	ldd	r26, Y+5	; 0x05
    2a3e:	be 81       	ldd	r27, Y+6	; 0x06
    2a40:	14 96       	adiw	r26, 0x04	; 4
    2a42:	8c 91       	ld	r24, X
    2a44:	14 97       	sbiw	r26, 0x04	; 4
    2a46:	81 ff       	sbrs	r24, 1
    2a48:	0c c0       	rjmp	.+24     	; 0x2a62 <f_lseek+0x1fa>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    2a4a:	8d 91       	ld	r24, X+
    2a4c:	9c 91       	ld	r25, X
    2a4e:	0e 94 63 09 	call	0x12c6	; 0x12c6 <create_chain>
    2a52:	ab 01       	movw	r20, r22
    2a54:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    2a56:	41 15       	cp	r20, r1
    2a58:	51 05       	cpc	r21, r1
    2a5a:	61 05       	cpc	r22, r1
    2a5c:	71 05       	cpc	r23, r1
    2a5e:	49 f4       	brne	.+18     	; 0x2a72 <f_lseek+0x20a>
    2a60:	4e c0       	rjmp	.+156    	; 0x2afe <f_lseek+0x296>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    2a62:	ad 81       	ldd	r26, Y+5	; 0x05
    2a64:	be 81       	ldd	r27, Y+6	; 0x06
    2a66:	8d 91       	ld	r24, X+
    2a68:	9c 91       	ld	r25, X
    2a6a:	0e 94 a8 06 	call	0xd50	; 0xd50 <get_fat>
    2a6e:	ab 01       	movw	r20, r22
    2a70:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2a72:	4f 3f       	cpi	r20, 0xFF	; 255
    2a74:	bf ef       	ldi	r27, 0xFF	; 255
    2a76:	5b 07       	cpc	r21, r27
    2a78:	6b 07       	cpc	r22, r27
    2a7a:	7b 07       	cpc	r23, r27
    2a7c:	39 f4       	brne	.+14     	; 0x2a8c <f_lseek+0x224>
    2a7e:	ed 81       	ldd	r30, Y+5	; 0x05
    2a80:	fe 81       	ldd	r31, Y+6	; 0x06
    2a82:	84 81       	ldd	r24, Z+4	; 0x04
    2a84:	80 68       	ori	r24, 0x80	; 128
    2a86:	84 83       	std	Z+4, r24	; 0x04
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	af c0       	rjmp	.+350    	; 0x2bea <f_lseek+0x382>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    2a8c:	42 30       	cpi	r20, 0x02	; 2
    2a8e:	51 05       	cpc	r21, r1
    2a90:	61 05       	cpc	r22, r1
    2a92:	71 05       	cpc	r23, r1
    2a94:	68 f0       	brcs	.+26     	; 0x2ab0 <f_lseek+0x248>
    2a96:	ad 81       	ldd	r26, Y+5	; 0x05
    2a98:	be 81       	ldd	r27, Y+6	; 0x06
    2a9a:	ed 91       	ld	r30, X+
    2a9c:	fc 91       	ld	r31, X
    2a9e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2aa0:	93 8d       	ldd	r25, Z+27	; 0x1b
    2aa2:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2aa4:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2aa6:	48 17       	cp	r20, r24
    2aa8:	59 07       	cpc	r21, r25
    2aaa:	6a 07       	cpc	r22, r26
    2aac:	7b 07       	cpc	r23, r27
    2aae:	38 f0       	brcs	.+14     	; 0x2abe <f_lseek+0x256>
    2ab0:	ed 81       	ldd	r30, Y+5	; 0x05
    2ab2:	fe 81       	ldd	r31, Y+6	; 0x06
    2ab4:	84 81       	ldd	r24, Z+4	; 0x04
    2ab6:	80 68       	ori	r24, 0x80	; 128
    2ab8:	84 83       	std	Z+4, r24	; 0x04
    2aba:	82 e0       	ldi	r24, 0x02	; 2
    2abc:	96 c0       	rjmp	.+300    	; 0x2bea <f_lseek+0x382>
					fp->curr_clust = clst;
    2abe:	ad 81       	ldd	r26, Y+5	; 0x05
    2ac0:	be 81       	ldd	r27, Y+6	; 0x06
    2ac2:	52 96       	adiw	r26, 0x12	; 18
    2ac4:	4d 93       	st	X+, r20
    2ac6:	5d 93       	st	X+, r21
    2ac8:	6d 93       	st	X+, r22
    2aca:	7c 93       	st	X, r23
    2acc:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    2ace:	fd 01       	movw	r30, r26
    2ad0:	86 81       	ldd	r24, Z+6	; 0x06
    2ad2:	97 81       	ldd	r25, Z+7	; 0x07
    2ad4:	a0 85       	ldd	r26, Z+8	; 0x08
    2ad6:	b1 85       	ldd	r27, Z+9	; 0x09
    2ad8:	88 0d       	add	r24, r8
    2ada:	99 1d       	adc	r25, r9
    2adc:	aa 1d       	adc	r26, r10
    2ade:	bb 1d       	adc	r27, r11
    2ae0:	86 83       	std	Z+6, r24	; 0x06
    2ae2:	97 83       	std	Z+7, r25	; 0x07
    2ae4:	a0 87       	std	Z+8, r26	; 0x08
    2ae6:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    2ae8:	c8 18       	sub	r12, r8
    2aea:	d9 08       	sbc	r13, r9
    2aec:	ea 08       	sbc	r14, r10
    2aee:	fb 08       	sbc	r15, r11
				}
#endif
				fp->curr_clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    2af0:	8c 14       	cp	r8, r12
    2af2:	9d 04       	cpc	r9, r13
    2af4:	ae 04       	cpc	r10, r14
    2af6:	bf 04       	cpc	r11, r15
    2af8:	08 f4       	brcc	.+2      	; 0x2afc <f_lseek+0x294>
    2afa:	a0 cf       	rjmp	.-192    	; 0x2a3c <f_lseek+0x1d4>
    2afc:	02 c0       	rjmp	.+4      	; 0x2b02 <f_lseek+0x29a>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
    2afe:	75 01       	movw	r14, r10
    2b00:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->curr_clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    2b02:	ed 81       	ldd	r30, Y+5	; 0x05
    2b04:	fe 81       	ldd	r31, Y+6	; 0x06
    2b06:	86 81       	ldd	r24, Z+6	; 0x06
    2b08:	97 81       	ldd	r25, Z+7	; 0x07
    2b0a:	a0 85       	ldd	r26, Z+8	; 0x08
    2b0c:	b1 85       	ldd	r27, Z+9	; 0x09
    2b0e:	8c 0d       	add	r24, r12
    2b10:	9d 1d       	adc	r25, r13
    2b12:	ae 1d       	adc	r26, r14
    2b14:	bf 1d       	adc	r27, r15
    2b16:	86 83       	std	Z+6, r24	; 0x06
    2b18:	97 83       	std	Z+7, r25	; 0x07
    2b1a:	a0 87       	std	Z+8, r26	; 0x08
    2b1c:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    2b1e:	d7 01       	movw	r26, r14
    2b20:	c6 01       	movw	r24, r12
    2b22:	91 70       	andi	r25, 0x01	; 1
    2b24:	aa 27       	eor	r26, r26
    2b26:	bb 27       	eor	r27, r27
    2b28:	89 2b       	or	r24, r25
    2b2a:	8a 2b       	or	r24, r26
    2b2c:	8b 2b       	or	r24, r27
    2b2e:	29 f1       	breq	.+74     	; 0x2b7a <f_lseek+0x312>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    2b30:	80 81       	ld	r24, Z
    2b32:	91 81       	ldd	r25, Z+1	; 0x01
    2b34:	0e 94 80 06 	call	0xd00	; 0xd00 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    2b38:	61 15       	cp	r22, r1
    2b3a:	71 05       	cpc	r23, r1
    2b3c:	81 05       	cpc	r24, r1
    2b3e:	91 05       	cpc	r25, r1
    2b40:	51 f4       	brne	.+20     	; 0x2b56 <f_lseek+0x2ee>
    2b42:	ad 81       	ldd	r26, Y+5	; 0x05
    2b44:	be 81       	ldd	r27, Y+6	; 0x06
    2b46:	14 96       	adiw	r26, 0x04	; 4
    2b48:	8c 91       	ld	r24, X
    2b4a:	14 97       	sbiw	r26, 0x04	; 4
    2b4c:	80 68       	ori	r24, 0x80	; 128
    2b4e:	14 96       	adiw	r26, 0x04	; 4
    2b50:	8c 93       	st	X, r24
    2b52:	82 e0       	ldi	r24, 0x02	; 2
    2b54:	4a c0       	rjmp	.+148    	; 0x2bea <f_lseek+0x382>
					nsect += ofs / SS(fp->fs);
    2b56:	0b 2e       	mov	r0, r27
    2b58:	b9 e0       	ldi	r27, 0x09	; 9
    2b5a:	f6 94       	lsr	r15
    2b5c:	e7 94       	ror	r14
    2b5e:	d7 94       	ror	r13
    2b60:	c7 94       	ror	r12
    2b62:	ba 95       	dec	r27
    2b64:	d1 f7       	brne	.-12     	; 0x2b5a <f_lseek+0x2f2>
    2b66:	b0 2d       	mov	r27, r0
    2b68:	c6 0e       	add	r12, r22
    2b6a:	d7 1e       	adc	r13, r23
    2b6c:	e8 1e       	adc	r14, r24
    2b6e:	f9 1e       	adc	r15, r25
    2b70:	07 c0       	rjmp	.+14     	; 0x2b80 <f_lseek+0x318>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    2b72:	c1 2c       	mov	r12, r1
    2b74:	d1 2c       	mov	r13, r1
    2b76:	76 01       	movw	r14, r12
    2b78:	03 c0       	rjmp	.+6      	; 0x2b80 <f_lseek+0x318>
    2b7a:	c1 2c       	mov	r12, r1
    2b7c:	d1 2c       	mov	r13, r1
    2b7e:	76 01       	movw	r14, r12
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    2b80:	ed 81       	ldd	r30, Y+5	; 0x05
    2b82:	fe 81       	ldd	r31, Y+6	; 0x06
    2b84:	86 81       	ldd	r24, Z+6	; 0x06
    2b86:	97 81       	ldd	r25, Z+7	; 0x07
    2b88:	a0 85       	ldd	r26, Z+8	; 0x08
    2b8a:	b1 85       	ldd	r27, Z+9	; 0x09
    2b8c:	ac 01       	movw	r20, r24
    2b8e:	bd 01       	movw	r22, r26
    2b90:	51 70       	andi	r21, 0x01	; 1
    2b92:	66 27       	eor	r22, r22
    2b94:	77 27       	eor	r23, r23
    2b96:	45 2b       	or	r20, r21
    2b98:	46 2b       	or	r20, r22
    2b9a:	47 2b       	or	r20, r23
    2b9c:	69 f0       	breq	.+26     	; 0x2bb8 <f_lseek+0x350>
    2b9e:	46 89       	ldd	r20, Z+22	; 0x16
    2ba0:	57 89       	ldd	r21, Z+23	; 0x17
    2ba2:	60 8d       	ldd	r22, Z+24	; 0x18
    2ba4:	71 8d       	ldd	r23, Z+25	; 0x19
    2ba6:	c4 16       	cp	r12, r20
    2ba8:	d5 06       	cpc	r13, r21
    2baa:	e6 06       	cpc	r14, r22
    2bac:	f7 06       	cpc	r15, r23
    2bae:	21 f0       	breq	.+8      	; 0x2bb8 <f_lseek+0x350>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    2bb0:	c6 8a       	std	Z+22, r12	; 0x16
    2bb2:	d7 8a       	std	Z+23, r13	; 0x17
    2bb4:	e0 8e       	std	Z+24, r14	; 0x18
    2bb6:	f1 8e       	std	Z+25, r15	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set change flag if the file size is extended */
    2bb8:	ed 81       	ldd	r30, Y+5	; 0x05
    2bba:	fe 81       	ldd	r31, Y+6	; 0x06
    2bbc:	42 85       	ldd	r20, Z+10	; 0x0a
    2bbe:	53 85       	ldd	r21, Z+11	; 0x0b
    2bc0:	64 85       	ldd	r22, Z+12	; 0x0c
    2bc2:	75 85       	ldd	r23, Z+13	; 0x0d
    2bc4:	48 17       	cp	r20, r24
    2bc6:	59 07       	cpc	r21, r25
    2bc8:	6a 07       	cpc	r22, r26
    2bca:	7b 07       	cpc	r23, r27
    2bcc:	68 f4       	brcc	.+26     	; 0x2be8 <f_lseek+0x380>
			fp->fsize = fp->fptr;
    2bce:	82 87       	std	Z+10, r24	; 0x0a
    2bd0:	93 87       	std	Z+11, r25	; 0x0b
    2bd2:	a4 87       	std	Z+12, r26	; 0x0c
    2bd4:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    2bd6:	84 81       	ldd	r24, Z+4	; 0x04
    2bd8:	80 62       	ori	r24, 0x20	; 32
    2bda:	84 83       	std	Z+4, r24	; 0x04
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	05 c0       	rjmp	.+10     	; 0x2bea <f_lseek+0x382>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    2be0:	82 e0       	ldi	r24, 0x02	; 2
    2be2:	03 c0       	rjmp	.+6      	; 0x2bea <f_lseek+0x382>
			fp->flag |= FA__WRITTEN;
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
    2be4:	80 e0       	ldi	r24, 0x00	; 0
    2be6:	01 c0       	rjmp	.+2      	; 0x2bea <f_lseek+0x382>
    2be8:	80 e0       	ldi	r24, 0x00	; 0
}
    2bea:	26 96       	adiw	r28, 0x06	; 6
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	f8 94       	cli
    2bf0:	de bf       	out	0x3e, r29	; 62
    2bf2:	0f be       	out	0x3f, r0	; 63
    2bf4:	cd bf       	out	0x3d, r28	; 61
    2bf6:	df 91       	pop	r29
    2bf8:	cf 91       	pop	r28
    2bfa:	1f 91       	pop	r17
    2bfc:	0f 91       	pop	r16
    2bfe:	ff 90       	pop	r15
    2c00:	ef 90       	pop	r14
    2c02:	df 90       	pop	r13
    2c04:	cf 90       	pop	r12
    2c06:	bf 90       	pop	r11
    2c08:	af 90       	pop	r10
    2c0a:	9f 90       	pop	r9
    2c0c:	8f 90       	pop	r8
    2c0e:	7f 90       	pop	r7
    2c10:	6f 90       	pop	r6
    2c12:	5f 90       	pop	r5
    2c14:	4f 90       	pop	r4
    2c16:	08 95       	ret

00002c18 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
    2c18:	0f 93       	push	r16
    2c1a:	1f 93       	push	r17
    2c1c:	cf 93       	push	r28
    2c1e:	df 93       	push	r29
    2c20:	cd b7       	in	r28, 0x3d	; 61
    2c22:	de b7       	in	r29, 0x3e	; 62
    2c24:	2e 97       	sbiw	r28, 0x0e	; 14
    2c26:	0f b6       	in	r0, 0x3f	; 63
    2c28:	f8 94       	cli
    2c2a:	de bf       	out	0x3e, r29	; 62
    2c2c:	0f be       	out	0x3f, r0	; 63
    2c2e:	cd bf       	out	0x3d, r28	; 61
    2c30:	8c 01       	movw	r16, r24
    2c32:	7e 87       	std	Y+14, r23	; 0x0e
    2c34:	6d 87       	std	Y+13, r22	; 0x0d
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
    2c36:	40 e0       	ldi	r20, 0x00	; 0
    2c38:	bc 01       	movw	r22, r24
    2c3a:	ce 01       	movw	r24, r28
    2c3c:	0d 96       	adiw	r24, 0x0d	; 13
    2c3e:	0e 94 35 03 	call	0x66a	; 0x66a <chk_mounted>
	if (res == FR_OK) {
    2c42:	81 11       	cpse	r24, r1
    2c44:	43 c0       	rjmp	.+134    	; 0x2ccc <f_opendir+0xb4>
		INIT_BUF(*dj);
    2c46:	ce 01       	movw	r24, r28
    2c48:	01 96       	adiw	r24, 0x01	; 1
    2c4a:	d8 01       	movw	r26, r16
    2c4c:	55 96       	adiw	r26, 0x15	; 21
    2c4e:	9c 93       	st	X, r25
    2c50:	8e 93       	st	-X, r24
    2c52:	54 97       	sbiw	r26, 0x14	; 20
		res = follow_path(dj, path);			/* Follow the path to the directory */
    2c54:	6d 85       	ldd	r22, Y+13	; 0x0d
    2c56:	7e 85       	ldd	r23, Y+14	; 0x0e
    2c58:	c8 01       	movw	r24, r16
    2c5a:	0e 94 92 0b 	call	0x1724	; 0x1724 <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
    2c5e:	81 11       	cpse	r24, r1
    2c60:	1f c0       	rjmp	.+62     	; 0x2ca0 <f_opendir+0x88>
			if (dj->dir) {						/* It is not the root dir */
    2c62:	d8 01       	movw	r26, r16
    2c64:	52 96       	adiw	r26, 0x12	; 18
    2c66:	ed 91       	ld	r30, X+
    2c68:	fc 91       	ld	r31, X
    2c6a:	53 97       	sbiw	r26, 0x13	; 19
    2c6c:	30 97       	sbiw	r30, 0x00	; 0
    2c6e:	f1 f0       	breq	.+60     	; 0x2cac <f_opendir+0x94>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    2c70:	83 85       	ldd	r24, Z+11	; 0x0b
    2c72:	84 ff       	sbrs	r24, 4
    2c74:	19 c0       	rjmp	.+50     	; 0x2ca8 <f_opendir+0x90>
					dj->sclust = LD_CLUST(dj->dir);
    2c76:	84 89       	ldd	r24, Z+20	; 0x14
    2c78:	95 89       	ldd	r25, Z+21	; 0x15
    2c7a:	a0 e0       	ldi	r26, 0x00	; 0
    2c7c:	b0 e0       	ldi	r27, 0x00	; 0
    2c7e:	dc 01       	movw	r26, r24
    2c80:	99 27       	eor	r25, r25
    2c82:	88 27       	eor	r24, r24
    2c84:	42 8d       	ldd	r20, Z+26	; 0x1a
    2c86:	53 8d       	ldd	r21, Z+27	; 0x1b
    2c88:	60 e0       	ldi	r22, 0x00	; 0
    2c8a:	70 e0       	ldi	r23, 0x00	; 0
    2c8c:	84 2b       	or	r24, r20
    2c8e:	95 2b       	or	r25, r21
    2c90:	a6 2b       	or	r26, r22
    2c92:	b7 2b       	or	r27, r23
    2c94:	f8 01       	movw	r30, r16
    2c96:	86 83       	std	Z+6, r24	; 0x06
    2c98:	97 83       	std	Z+7, r25	; 0x07
    2c9a:	a0 87       	std	Z+8, r26	; 0x08
    2c9c:	b1 87       	std	Z+9, r27	; 0x09
    2c9e:	06 c0       	rjmp	.+12     	; 0x2cac <f_opendir+0x94>
			if (res == FR_OK) {
				dj->id = dj->fs->id;
				res = dir_sdi(dj, 0);			/* Rewind dir */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    2ca0:	84 30       	cpi	r24, 0x04	; 4
    2ca2:	a1 f4       	brne	.+40     	; 0x2ccc <f_opendir+0xb4>
    2ca4:	85 e0       	ldi	r24, 0x05	; 5
    2ca6:	12 c0       	rjmp	.+36     	; 0x2ccc <f_opendir+0xb4>
		if (res == FR_OK) {						/* Follow completed */
			if (dj->dir) {						/* It is not the root dir */
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
					dj->sclust = LD_CLUST(dj->dir);
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
    2ca8:	85 e0       	ldi	r24, 0x05	; 5
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj->fs, res);
    2caa:	10 c0       	rjmp	.+32     	; 0x2ccc <f_opendir+0xb4>
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    2cac:	d8 01       	movw	r26, r16
    2cae:	ed 91       	ld	r30, X+
    2cb0:	fc 91       	ld	r31, X
    2cb2:	11 97       	sbiw	r26, 0x01	; 1
    2cb4:	86 81       	ldd	r24, Z+6	; 0x06
    2cb6:	97 81       	ldd	r25, Z+7	; 0x07
    2cb8:	13 96       	adiw	r26, 0x03	; 3
    2cba:	9c 93       	st	X, r25
    2cbc:	8e 93       	st	-X, r24
    2cbe:	12 97       	sbiw	r26, 0x02	; 2
				res = dir_sdi(dj, 0);			/* Rewind dir */
    2cc0:	60 e0       	ldi	r22, 0x00	; 0
    2cc2:	70 e0       	ldi	r23, 0x00	; 0
    2cc4:	c8 01       	movw	r24, r16
    2cc6:	0e 94 8b 07 	call	0xf16	; 0xf16 <dir_sdi>
    2cca:	ea cf       	rjmp	.-44     	; 0x2ca0 <f_opendir+0x88>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj->fs, res);
}
    2ccc:	2e 96       	adiw	r28, 0x0e	; 14
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	f8 94       	cli
    2cd2:	de bf       	out	0x3e, r29	; 62
    2cd4:	0f be       	out	0x3f, r0	; 63
    2cd6:	cd bf       	out	0x3d, r28	; 61
    2cd8:	df 91       	pop	r29
    2cda:	cf 91       	pop	r28
    2cdc:	1f 91       	pop	r17
    2cde:	0f 91       	pop	r16
    2ce0:	08 95       	ret

00002ce2 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    2ce2:	cf 92       	push	r12
    2ce4:	df 92       	push	r13
    2ce6:	ff 92       	push	r15
    2ce8:	0f 93       	push	r16
    2cea:	1f 93       	push	r17
    2cec:	cf 93       	push	r28
    2cee:	df 93       	push	r29
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    2cf4:	2c 97       	sbiw	r28, 0x0c	; 12
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	f8 94       	cli
    2cfa:	de bf       	out	0x3e, r29	; 62
    2cfc:	0f be       	out	0x3f, r0	; 63
    2cfe:	cd bf       	out	0x3d, r28	; 61
    2d00:	8c 01       	movw	r16, r24
    2d02:	6b 01       	movw	r12, r22
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    2d04:	fc 01       	movw	r30, r24
    2d06:	62 81       	ldd	r22, Z+2	; 0x02
    2d08:	73 81       	ldd	r23, Z+3	; 0x03
    2d0a:	80 81       	ld	r24, Z
    2d0c:	91 81       	ldd	r25, Z+1	; 0x01
    2d0e:	0e 94 1b 03 	call	0x636	; 0x636 <validate>
    2d12:	f8 2e       	mov	r15, r24
	if (res == FR_OK) {
    2d14:	81 11       	cpse	r24, r1
    2d16:	30 c0       	rjmp	.+96     	; 0x2d78 <f_readdir+0x96>
		if (!fno) {
    2d18:	c1 14       	cp	r12, r1
    2d1a:	d1 04       	cpc	r13, r1
    2d1c:	39 f4       	brne	.+14     	; 0x2d2c <f_readdir+0x4a>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
    2d1e:	60 e0       	ldi	r22, 0x00	; 0
    2d20:	70 e0       	ldi	r23, 0x00	; 0
    2d22:	c8 01       	movw	r24, r16
    2d24:	0e 94 8b 07 	call	0xf16	; 0xf16 <dir_sdi>
    2d28:	f8 2e       	mov	r15, r24
    2d2a:	26 c0       	rjmp	.+76     	; 0x2d78 <f_readdir+0x96>
		} else {
			INIT_BUF(*dj);
    2d2c:	ce 01       	movw	r24, r28
    2d2e:	01 96       	adiw	r24, 0x01	; 1
    2d30:	f8 01       	movw	r30, r16
    2d32:	95 8b       	std	Z+21, r25	; 0x15
    2d34:	84 8b       	std	Z+20, r24	; 0x14
			res = dir_read(dj);				/* Read an directory item */
    2d36:	c8 01       	movw	r24, r16
    2d38:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <dir_read>
			if (res == FR_NO_FILE) {		/* Reached end of dir */
    2d3c:	84 30       	cpi	r24, 0x04	; 4
    2d3e:	31 f4       	brne	.+12     	; 0x2d4c <f_readdir+0x6a>
				dj->sect = 0;
    2d40:	f8 01       	movw	r30, r16
    2d42:	16 86       	std	Z+14, r1	; 0x0e
    2d44:	17 86       	std	Z+15, r1	; 0x0f
    2d46:	10 8a       	std	Z+16, r1	; 0x10
    2d48:	11 8a       	std	Z+17, r1	; 0x11
    2d4a:	02 c0       	rjmp	.+4      	; 0x2d50 <f_readdir+0x6e>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    2d4c:	81 11       	cpse	r24, r1
    2d4e:	11 c0       	rjmp	.+34     	; 0x2d72 <f_readdir+0x90>
				get_fileinfo(dj, fno);		/* Get the object information */
    2d50:	b6 01       	movw	r22, r12
    2d52:	c8 01       	movw	r24, r16
    2d54:	0e 94 e7 01 	call	0x3ce	; 0x3ce <get_fileinfo>
				res = dir_next(dj, 0);		/* Increment index for next */
    2d58:	60 e0       	ldi	r22, 0x00	; 0
    2d5a:	70 e0       	ldi	r23, 0x00	; 0
    2d5c:	c8 01       	movw	r24, r16
    2d5e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <dir_next>
				if (res == FR_NO_FILE) {
    2d62:	84 30       	cpi	r24, 0x04	; 4
    2d64:	41 f4       	brne	.+16     	; 0x2d76 <f_readdir+0x94>
					dj->sect = 0;
    2d66:	f8 01       	movw	r30, r16
    2d68:	16 86       	std	Z+14, r1	; 0x0e
    2d6a:	17 86       	std	Z+15, r1	; 0x0f
    2d6c:	10 8a       	std	Z+16, r1	; 0x10
    2d6e:	11 8a       	std	Z+17, r1	; 0x11
    2d70:	03 c0       	rjmp	.+6      	; 0x2d78 <f_readdir+0x96>
	if (res == FR_OK) {
		if (!fno) {
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
		} else {
			INIT_BUF(*dj);
			res = dir_read(dj);				/* Read an directory item */
    2d72:	f8 2e       	mov	r15, r24
    2d74:	01 c0       	rjmp	.+2      	; 0x2d78 <f_readdir+0x96>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, 0);		/* Increment index for next */
    2d76:	f8 2e       	mov	r15, r24
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
    2d78:	8f 2d       	mov	r24, r15
    2d7a:	2c 96       	adiw	r28, 0x0c	; 12
    2d7c:	0f b6       	in	r0, 0x3f	; 63
    2d7e:	f8 94       	cli
    2d80:	de bf       	out	0x3e, r29	; 62
    2d82:	0f be       	out	0x3f, r0	; 63
    2d84:	cd bf       	out	0x3d, r28	; 61
    2d86:	df 91       	pop	r29
    2d88:	cf 91       	pop	r28
    2d8a:	1f 91       	pop	r17
    2d8c:	0f 91       	pop	r16
    2d8e:	ff 90       	pop	r15
    2d90:	df 90       	pop	r13
    2d92:	cf 90       	pop	r12
    2d94:	08 95       	ret

00002d96 <rx_handler>:
	lcdPrintData("My funct ",9);
	lcdGotoXY(0,1);
	lcdPrintData(indstr,strlen(indstr));
	return 0;
	
}
    2d96:	8e 3f       	cpi	r24, 0xFE	; 254
    2d98:	49 f0       	breq	.+18     	; 0x2dac <rx_handler+0x16>
    2d9a:	68 2f       	mov	r22, r24
    2d9c:	89 ee       	ldi	r24, 0xE9	; 233
    2d9e:	92 e0       	ldi	r25, 0x02	; 2
    2da0:	0e 94 98 01 	call	0x330	; 0x330 <bufferAddToEnd>
    2da4:	81 11       	cpse	r24, r1
    2da6:	02 c0       	rjmp	.+4      	; 0x2dac <rx_handler+0x16>
    2da8:	0e 94 72 32 	call	0x64e4	; 0x64e4 <uartFlushReceiveBuffer>
    2dac:	08 95       	ret

00002dae <get_fattime>:
    2dae:	60 e0       	ldi	r22, 0x00	; 0
    2db0:	70 e0       	ldi	r23, 0x00	; 0
    2db2:	cb 01       	movw	r24, r22
    2db4:	08 95       	ret

00002db6 <configTimers>:
    2db6:	83 b7       	in	r24, 0x33	; 51
    2db8:	82 60       	ori	r24, 0x02	; 2
    2dba:	83 bf       	out	0x33, r24	; 51
    2dbc:	83 b7       	in	r24, 0x33	; 51
    2dbe:	81 60       	ori	r24, 0x01	; 1
    2dc0:	83 bf       	out	0x33, r24	; 51
    2dc2:	89 b7       	in	r24, 0x39	; 57
    2dc4:	81 60       	ori	r24, 0x01	; 1
    2dc6:	89 bf       	out	0x39, r24	; 57
    2dc8:	8c e9       	ldi	r24, 0x9C	; 156
    2dca:	83 bd       	out	0x23, r24	; 35
    2dcc:	85 b5       	in	r24, 0x25	; 37
    2dce:	88 60       	ori	r24, 0x08	; 8
    2dd0:	85 bd       	out	0x25, r24	; 37
    2dd2:	89 b7       	in	r24, 0x39	; 57
    2dd4:	80 68       	ori	r24, 0x80	; 128
    2dd6:	89 bf       	out	0x39, r24	; 57
    2dd8:	85 b5       	in	r24, 0x25	; 37
    2dda:	87 60       	ori	r24, 0x07	; 7
    2ddc:	85 bd       	out	0x25, r24	; 37
    2dde:	08 95       	ret

00002de0 <setInputs>:
    2de0:	d8 98       	cbi	0x1b, 0	; 27
    2de2:	d0 98       	cbi	0x1a, 0	; 26
    2de4:	b8 98       	cbi	0x17, 0	; 23
    2de6:	b9 98       	cbi	0x17, 1	; 23
    2de8:	ba 98       	cbi	0x17, 2	; 23
    2dea:	bb 98       	cbi	0x17, 3	; 23
    2dec:	c0 9a       	sbi	0x18, 0	; 24
    2dee:	c1 9a       	sbi	0x18, 1	; 24
    2df0:	c2 9a       	sbi	0x18, 2	; 24
    2df2:	c3 9a       	sbi	0x18, 3	; 24
    2df4:	a6 98       	cbi	0x14, 6	; 20
    2df6:	a7 98       	cbi	0x14, 7	; 20
    2df8:	d1 98       	cbi	0x1a, 1	; 26
    2dfa:	d2 98       	cbi	0x1a, 2	; 26
    2dfc:	d3 98       	cbi	0x1a, 3	; 26
    2dfe:	ae 9a       	sbi	0x15, 6	; 21
    2e00:	af 9a       	sbi	0x15, 7	; 21
    2e02:	d9 9a       	sbi	0x1b, 1	; 27
    2e04:	df 9a       	sbi	0x1b, 7	; 27
    2e06:	db 9a       	sbi	0x1b, 3	; 27
    2e08:	08 95       	ret

00002e0a <readInputs>:
    2e0a:	cf 93       	push	r28
    2e0c:	df 93       	push	r29
    2e0e:	ec 01       	movw	r28, r24
    2e10:	80 e0       	ldi	r24, 0x00	; 0
    2e12:	0e 94 51 01 	call	0x2a2	; 0x2a2 <a2dConvert8bit>
    2e16:	89 87       	std	Y+9, r24	; 0x09
    2e18:	26 b3       	in	r18, 0x16	; 22
    2e1a:	91 e0       	ldi	r25, 0x01	; 1
    2e1c:	29 27       	eor	r18, r25
    2e1e:	21 70       	andi	r18, 0x01	; 1
    2e20:	28 83       	st	Y, r18
    2e22:	26 b3       	in	r18, 0x16	; 22
    2e24:	26 95       	lsr	r18
    2e26:	21 70       	andi	r18, 0x01	; 1
    2e28:	29 27       	eor	r18, r25
    2e2a:	29 83       	std	Y+1, r18	; 0x01
    2e2c:	26 b3       	in	r18, 0x16	; 22
    2e2e:	22 fb       	bst	r18, 2
    2e30:	22 27       	eor	r18, r18
    2e32:	20 f9       	bld	r18, 0
    2e34:	29 27       	eor	r18, r25
    2e36:	2a 83       	std	Y+2, r18	; 0x02
    2e38:	26 b3       	in	r18, 0x16	; 22
    2e3a:	23 fb       	bst	r18, 3
    2e3c:	22 27       	eor	r18, r18
    2e3e:	20 f9       	bld	r18, 0
    2e40:	29 27       	eor	r18, r25
    2e42:	2b 83       	std	Y+3, r18	; 0x03
    2e44:	23 b3       	in	r18, 0x13	; 19
    2e46:	26 fb       	bst	r18, 6
    2e48:	22 27       	eor	r18, r18
    2e4a:	20 f9       	bld	r18, 0
    2e4c:	29 27       	eor	r18, r25
    2e4e:	2c 83       	std	Y+4, r18	; 0x04
    2e50:	23 b3       	in	r18, 0x13	; 19
    2e52:	20 95       	com	r18
    2e54:	22 1f       	adc	r18, r18
    2e56:	22 27       	eor	r18, r18
    2e58:	22 1f       	adc	r18, r18
    2e5a:	2d 83       	std	Y+5, r18	; 0x05
    2e5c:	29 b3       	in	r18, 0x19	; 25
    2e5e:	26 95       	lsr	r18
    2e60:	21 70       	andi	r18, 0x01	; 1
    2e62:	29 27       	eor	r18, r25
    2e64:	2e 83       	std	Y+6, r18	; 0x06
    2e66:	29 b3       	in	r18, 0x19	; 25
    2e68:	22 fb       	bst	r18, 2
    2e6a:	22 27       	eor	r18, r18
    2e6c:	20 f9       	bld	r18, 0
    2e6e:	29 27       	eor	r18, r25
    2e70:	2f 83       	std	Y+7, r18	; 0x07
    2e72:	29 b3       	in	r18, 0x19	; 25
    2e74:	23 fb       	bst	r18, 3
    2e76:	22 27       	eor	r18, r18
    2e78:	20 f9       	bld	r18, 0
    2e7a:	92 27       	eor	r25, r18
    2e7c:	98 87       	std	Y+8, r25	; 0x08
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	29 2f       	mov	r18, r25
    2e82:	09 2e       	mov	r0, r25
    2e84:	00 0c       	add	r0, r0
    2e86:	33 0b       	sbc	r19, r19
    2e88:	fe 01       	movw	r30, r28
    2e8a:	e2 0f       	add	r30, r18
    2e8c:	f3 1f       	adc	r31, r19
    2e8e:	40 81       	ld	r20, Z
    2e90:	f9 01       	movw	r30, r18
    2e92:	e7 5f       	subi	r30, 0xF7	; 247
    2e94:	fd 4f       	sbci	r31, 0xFD	; 253
    2e96:	50 81       	ld	r21, Z
    2e98:	45 17       	cp	r20, r21
    2e9a:	31 f0       	breq	.+12     	; 0x2ea8 <readInputs+0x9e>
    2e9c:	f9 01       	movw	r30, r18
    2e9e:	e7 5f       	subi	r30, 0xF7	; 247
    2ea0:	fd 4f       	sbci	r31, 0xFD	; 253
    2ea2:	40 83       	st	Z, r20
    2ea4:	41 30       	cpi	r20, 0x01	; 1
    2ea6:	59 f0       	breq	.+22     	; 0x2ebe <readInputs+0xb4>
    2ea8:	9f 5f       	subi	r25, 0xFF	; 255
    2eaa:	99 30       	cpi	r25, 0x09	; 9
    2eac:	4c f3       	brlt	.-46     	; 0x2e80 <readInputs+0x76>
    2eae:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <but_old.2473+0x9>
    2eb2:	89 17       	cp	r24, r25
    2eb4:	31 f0       	breq	.+12     	; 0x2ec2 <readInputs+0xb8>
    2eb6:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <but_old.2473+0x9>
    2eba:	89 e0       	ldi	r24, 0x09	; 9
    2ebc:	03 c0       	rjmp	.+6      	; 0x2ec4 <readInputs+0xba>
    2ebe:	89 2f       	mov	r24, r25
    2ec0:	01 c0       	rjmp	.+2      	; 0x2ec4 <readInputs+0xba>
    2ec2:	8f ef       	ldi	r24, 0xFF	; 255
    2ec4:	df 91       	pop	r29
    2ec6:	cf 91       	pop	r28
    2ec8:	08 95       	ret

00002eca <addMillis>:
    2eca:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <timer0_millis>
    2ece:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <timer0_millis+0x1>
    2ed2:	a0 91 16 02 	lds	r26, 0x0216	; 0x800216 <timer0_millis+0x2>
    2ed6:	b0 91 17 02 	lds	r27, 0x0217	; 0x800217 <timer0_millis+0x3>
    2eda:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <timer0_fract>
    2ede:	23 e0       	ldi	r18, 0x03	; 3
    2ee0:	23 0f       	add	r18, r19
    2ee2:	2d 37       	cpi	r18, 0x7D	; 125
    2ee4:	20 f4       	brcc	.+8      	; 0x2eee <addMillis+0x24>
    2ee6:	01 96       	adiw	r24, 0x01	; 1
    2ee8:	a1 1d       	adc	r26, r1
    2eea:	b1 1d       	adc	r27, r1
    2eec:	05 c0       	rjmp	.+10     	; 0x2ef8 <addMillis+0x2e>
    2eee:	26 e8       	ldi	r18, 0x86	; 134
    2ef0:	23 0f       	add	r18, r19
    2ef2:	02 96       	adiw	r24, 0x02	; 2
    2ef4:	a1 1d       	adc	r26, r1
    2ef6:	b1 1d       	adc	r27, r1
    2ef8:	20 93 13 02 	sts	0x0213, r18	; 0x800213 <timer0_fract>
    2efc:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <timer0_millis>
    2f00:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <timer0_millis+0x1>
    2f04:	a0 93 16 02 	sts	0x0216, r26	; 0x800216 <timer0_millis+0x2>
    2f08:	b0 93 17 02 	sts	0x0217, r27	; 0x800217 <timer0_millis+0x3>
    2f0c:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <timer0_overflow_count>
    2f10:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <timer0_overflow_count+0x1>
    2f14:	a0 91 1a 02 	lds	r26, 0x021A	; 0x80021a <timer0_overflow_count+0x2>
    2f18:	b0 91 1b 02 	lds	r27, 0x021B	; 0x80021b <timer0_overflow_count+0x3>
    2f1c:	01 96       	adiw	r24, 0x01	; 1
    2f1e:	a1 1d       	adc	r26, r1
    2f20:	b1 1d       	adc	r27, r1
    2f22:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <timer0_overflow_count>
    2f26:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <timer0_overflow_count+0x1>
    2f2a:	a0 93 1a 02 	sts	0x021A, r26	; 0x80021a <timer0_overflow_count+0x2>
    2f2e:	b0 93 1b 02 	sts	0x021B, r27	; 0x80021b <timer0_overflow_count+0x3>
    2f32:	08 95       	ret

00002f34 <getMicros>:
    2f34:	3f b7       	in	r19, 0x3f	; 63
    2f36:	f8 94       	cli
    2f38:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <timer0_overflow_count>
    2f3c:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <timer0_overflow_count+0x1>
    2f40:	a0 91 1a 02 	lds	r26, 0x021A	; 0x80021a <timer0_overflow_count+0x2>
    2f44:	b0 91 1b 02 	lds	r27, 0x021B	; 0x80021b <timer0_overflow_count+0x3>
    2f48:	22 b7       	in	r18, 0x32	; 50
    2f4a:	08 b6       	in	r0, 0x38	; 56
    2f4c:	00 fe       	sbrs	r0, 0
    2f4e:	05 c0       	rjmp	.+10     	; 0x2f5a <getMicros+0x26>
    2f50:	2f 3f       	cpi	r18, 0xFF	; 255
    2f52:	19 f0       	breq	.+6      	; 0x2f5a <getMicros+0x26>
    2f54:	01 96       	adiw	r24, 0x01	; 1
    2f56:	a1 1d       	adc	r26, r1
    2f58:	b1 1d       	adc	r27, r1
    2f5a:	3f bf       	out	0x3f, r19	; 63
    2f5c:	ba 2f       	mov	r27, r26
    2f5e:	a9 2f       	mov	r26, r25
    2f60:	98 2f       	mov	r25, r24
    2f62:	88 27       	eor	r24, r24
    2f64:	82 0f       	add	r24, r18
    2f66:	91 1d       	adc	r25, r1
    2f68:	a1 1d       	adc	r26, r1
    2f6a:	b1 1d       	adc	r27, r1
    2f6c:	bc 01       	movw	r22, r24
    2f6e:	cd 01       	movw	r24, r26
    2f70:	66 0f       	add	r22, r22
    2f72:	77 1f       	adc	r23, r23
    2f74:	88 1f       	adc	r24, r24
    2f76:	99 1f       	adc	r25, r25
    2f78:	66 0f       	add	r22, r22
    2f7a:	77 1f       	adc	r23, r23
    2f7c:	88 1f       	adc	r24, r24
    2f7e:	99 1f       	adc	r25, r25
    2f80:	08 95       	ret

00002f82 <setMidiFile>:
    2f82:	0f 93       	push	r16
    2f84:	1f 93       	push	r17
    2f86:	cf 93       	push	r28
    2f88:	df 93       	push	r29
    2f8a:	ec 01       	movw	r28, r24
    2f8c:	8b 01       	movw	r16, r22
    2f8e:	8b ed       	ldi	r24, 0xDB	; 219
    2f90:	91 e0       	ldi	r25, 0x01	; 1
    2f92:	fe 01       	movw	r30, r28
    2f94:	9c 01       	movw	r18, r24
    2f96:	11 92       	st	Z+, r1
    2f98:	21 50       	subi	r18, 0x01	; 1
    2f9a:	30 40       	sbci	r19, 0x00	; 0
    2f9c:	e1 f7       	brne	.-8      	; 0x2f96 <setMidiFile+0x14>
    2f9e:	ce 01       	movw	r24, r28
    2fa0:	0e 94 66 20 	call	0x40cc	; 0x40cc <initialise>
    2fa4:	67 ee       	ldi	r22, 0xE7	; 231
    2fa6:	77 e2       	ldi	r23, 0x27	; 39
    2fa8:	ce 01       	movw	r24, r28
    2faa:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <setMidiHandler>
    2fae:	66 ee       	ldi	r22, 0xE6	; 230
    2fb0:	77 e2       	ldi	r23, 0x27	; 39
    2fb2:	ce 01       	movw	r24, r28
    2fb4:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <setSysexHandler>
    2fb8:	65 ee       	ldi	r22, 0xE5	; 229
    2fba:	77 e2       	ldi	r23, 0x27	; 39
    2fbc:	ce 01       	movw	r24, r28
    2fbe:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <setMetaHandler>
    2fc2:	b8 01       	movw	r22, r16
    2fc4:	ce 01       	movw	r24, r28
    2fc6:	0e 94 c8 22 	call	0x4590	; 0x4590 <setFilename>
    2fca:	ce 01       	movw	r24, r28
    2fcc:	0e 94 c4 21 	call	0x4388	; 0x4388 <loadMIDIFile>
    2fd0:	01 96       	adiw	r24, 0x01	; 1
    2fd2:	81 f0       	breq	.+32     	; 0x2ff4 <setMidiFile+0x72>
    2fd4:	6b e0       	ldi	r22, 0x0B	; 11
    2fd6:	83 e3       	ldi	r24, 0x33	; 51
    2fd8:	91 e0       	ldi	r25, 0x01	; 1
    2fda:	0e 94 be 1c 	call	0x397c	; 0x397c <lcdPrintData>
    2fde:	8f ef       	ldi	r24, 0xFF	; 255
    2fe0:	99 e6       	ldi	r25, 0x69	; 105
    2fe2:	e8 e1       	ldi	r30, 0x18	; 24
    2fe4:	81 50       	subi	r24, 0x01	; 1
    2fe6:	90 40       	sbci	r25, 0x00	; 0
    2fe8:	e0 40       	sbci	r30, 0x00	; 0
    2fea:	e1 f7       	brne	.-8      	; 0x2fe4 <setMidiFile+0x62>
    2fec:	00 c0       	rjmp	.+0      	; 0x2fee <setMidiFile+0x6c>
    2fee:	00 00       	nop
    2ff0:	81 e0       	ldi	r24, 0x01	; 1
    2ff2:	08 c0       	rjmp	.+16     	; 0x3004 <setMidiFile+0x82>
    2ff4:	fe 01       	movw	r30, r28
    2ff6:	ee 5b       	subi	r30, 0xBE	; 190
    2ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffa:	10 82       	st	Z, r1
    2ffc:	cd 5b       	subi	r28, 0xBD	; 189
    2ffe:	df 4f       	sbci	r29, 0xFF	; 255
    3000:	18 82       	st	Y, r1
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	df 91       	pop	r29
    3006:	cf 91       	pop	r28
    3008:	1f 91       	pop	r17
    300a:	0f 91       	pop	r16
    300c:	08 95       	ret

0000300e <createFileList>:

FRESULT createFileList(char (*tab)[MAX_FNAME],char *type,unsigned char *numfiles)
{
    300e:	8f 92       	push	r8
    3010:	9f 92       	push	r9
    3012:	af 92       	push	r10
    3014:	bf 92       	push	r11
    3016:	cf 92       	push	r12
    3018:	df 92       	push	r13
    301a:	ef 92       	push	r14
    301c:	ff 92       	push	r15
    301e:	0f 93       	push	r16
    3020:	1f 93       	push	r17
    3022:	cf 93       	push	r28
    3024:	df 93       	push	r29
    3026:	cd b7       	in	r28, 0x3d	; 61
    3028:	de b7       	in	r29, 0x3e	; 62
    302a:	e5 97       	sbiw	r28, 0x35	; 53
    302c:	0f b6       	in	r0, 0x3f	; 63
    302e:	f8 94       	cli
    3030:	de bf       	out	0x3e, r29	; 62
    3032:	0f be       	out	0x3f, r0	; 63
    3034:	cd bf       	out	0x3d, r28	; 61
    3036:	5c 01       	movw	r10, r24
    3038:	4b 01       	movw	r8, r22
    303a:	6a 01       	movw	r12, r20
	static char lfn[_MAX_LFN + 1];
	fno.lfname = lfn;
	fno.lfsize = sizeof lfn;
	#endif	
	
	res = f_getcwd(path,8);
    303c:	68 e0       	ldi	r22, 0x08	; 8
    303e:	70 e0       	ldi	r23, 0x00	; 0
    3040:	ce 01       	movw	r24, r28
    3042:	01 96       	adiw	r24, 0x01	; 1
    3044:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <f_getcwd>
	res = f_opendir(&dir, path);                       /* Open the directory */		
    3048:	be 01       	movw	r22, r28
    304a:	6f 5f       	subi	r22, 0xFF	; 255
    304c:	7f 4f       	sbci	r23, 0xFF	; 255
    304e:	ce 01       	movw	r24, r28
    3050:	80 96       	adiw	r24, 0x20	; 32
    3052:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <f_opendir>
    3056:	18 2f       	mov	r17, r24
		
	if (res == FR_OK) {		
    3058:	81 11       	cpse	r24, r1
    305a:	50 c0       	rjmp	.+160    	; 0x30fc <createFileList+0xee>
			#else
			fn = fno.fname;
			#endif
			if (fno.fattrib & AM_DIR) 
				continue;			
			if(strlen(fno.fname) >= MAX_FNAME)
    305c:	7e 01       	movw	r14, r28
    305e:	23 e1       	ldi	r18, 0x13	; 19
    3060:	e2 0e       	add	r14, r18
    3062:	f1 1c       	adc	r15, r1
				continue;
			memset(tab[*numfiles],0,MAX_FNAME);
    3064:	00 e1       	ldi	r16, 0x10	; 16
	res = f_getcwd(path,8);
	res = f_opendir(&dir, path);                       /* Open the directory */		
		
	if (res == FR_OK) {		
		for (;;) {
			res = f_readdir(&dir, &fno);                   /* Read a directory item */
    3066:	be 01       	movw	r22, r28
    3068:	66 5f       	subi	r22, 0xF6	; 246
    306a:	7f 4f       	sbci	r23, 0xFF	; 255
    306c:	ce 01       	movw	r24, r28
    306e:	80 96       	adiw	r24, 0x20	; 32
    3070:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <f_readdir>
    3074:	18 2f       	mov	r17, r24
			if (res != FR_OK || fno.fname[0] == 0) 
    3076:	81 11       	cpse	r24, r1
    3078:	41 c0       	rjmp	.+130    	; 0x30fc <createFileList+0xee>
    307a:	8b 89       	ldd	r24, Y+19	; 0x13
    307c:	88 23       	and	r24, r24
    307e:	f1 f1       	breq	.+124    	; 0x30fc <createFileList+0xee>
				break;  /* Break on error or end of dir */
			if (fno.fname[0] == '.') 
    3080:	8e 32       	cpi	r24, 0x2E	; 46
    3082:	89 f3       	breq	.-30     	; 0x3066 <createFileList+0x58>
			#if _USE_LFN
			fn = *fno.lfname ? fno.lfname : fno.fname;
			#else
			fn = fno.fname;
			#endif
			if (fno.fattrib & AM_DIR) 
    3084:	8a 89       	ldd	r24, Y+18	; 0x12
    3086:	84 fd       	sbrc	r24, 4
    3088:	ee cf       	rjmp	.-36     	; 0x3066 <createFileList+0x58>
				continue;			
			if(strlen(fno.fname) >= MAX_FNAME)
    308a:	f7 01       	movw	r30, r14
    308c:	01 90       	ld	r0, Z+
    308e:	00 20       	and	r0, r0
    3090:	e9 f7       	brne	.-6      	; 0x308c <createFileList+0x7e>
    3092:	31 97       	sbiw	r30, 0x01	; 1
    3094:	ee 19       	sub	r30, r14
    3096:	ff 09       	sbc	r31, r15
    3098:	70 97       	sbiw	r30, 0x10	; 16
    309a:	28 f7       	brcc	.-54     	; 0x3066 <createFileList+0x58>
				continue;
			memset(tab[*numfiles],0,MAX_FNAME);
    309c:	d6 01       	movw	r26, r12
    309e:	8c 91       	ld	r24, X
    30a0:	f5 01       	movw	r30, r10
    30a2:	b0 e1       	ldi	r27, 0x10	; 16
    30a4:	8b 9f       	mul	r24, r27
    30a6:	e0 0d       	add	r30, r0
    30a8:	f1 1d       	adc	r31, r1
    30aa:	11 24       	eor	r1, r1
    30ac:	df 01       	movw	r26, r30
    30ae:	20 2f       	mov	r18, r16
    30b0:	1d 92       	st	X+, r1
    30b2:	2a 95       	dec	r18
    30b4:	e9 f7       	brne	.-6      	; 0x30b0 <createFileList+0xa2>
			if(strstr(fno.fname,type) != NULL || strstr(fno.fname,type) != NULL){
    30b6:	b4 01       	movw	r22, r8
    30b8:	c7 01       	movw	r24, r14
    30ba:	0e 94 af 34 	call	0x695e	; 0x695e <strstr>
    30be:	89 2b       	or	r24, r25
    30c0:	c1 f0       	breq	.+48     	; 0x30f2 <createFileList+0xe4>
				strncpy(tab[*numfiles],fn,strlen(fn));
    30c2:	f7 01       	movw	r30, r14
    30c4:	01 90       	ld	r0, Z+
    30c6:	00 20       	and	r0, r0
    30c8:	e9 f7       	brne	.-6      	; 0x30c4 <createFileList+0xb6>
    30ca:	31 97       	sbiw	r30, 0x01	; 1
    30cc:	af 01       	movw	r20, r30
    30ce:	4e 19       	sub	r20, r14
    30d0:	5f 09       	sbc	r21, r15
    30d2:	d6 01       	movw	r26, r12
    30d4:	8c 91       	ld	r24, X
    30d6:	b7 01       	movw	r22, r14
    30d8:	f5 01       	movw	r30, r10
    30da:	20 e1       	ldi	r18, 0x10	; 16
    30dc:	82 9f       	mul	r24, r18
    30de:	e0 0d       	add	r30, r0
    30e0:	f1 1d       	adc	r31, r1
    30e2:	11 24       	eor	r1, r1
    30e4:	cf 01       	movw	r24, r30
    30e6:	0e 94 a0 34 	call	0x6940	; 0x6940 <strncpy>
				(*numfiles)++;
    30ea:	d6 01       	movw	r26, r12
    30ec:	8c 91       	ld	r24, X
    30ee:	8f 5f       	subi	r24, 0xFF	; 255
    30f0:	8c 93       	st	X, r24
			}
			if((*numfiles) == MAX_FILES)
    30f2:	f6 01       	movw	r30, r12
    30f4:	80 81       	ld	r24, Z
    30f6:	8a 30       	cpi	r24, 0x0A	; 10
    30f8:	09 f0       	breq	.+2      	; 0x30fc <createFileList+0xee>
    30fa:	b5 cf       	rjmp	.-150    	; 0x3066 <createFileList+0x58>
	}

	//res = f_close(&fil);
	
	return res;
}
    30fc:	81 2f       	mov	r24, r17
    30fe:	e5 96       	adiw	r28, 0x35	; 53
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	de bf       	out	0x3e, r29	; 62
    3106:	0f be       	out	0x3f, r0	; 63
    3108:	cd bf       	out	0x3d, r28	; 61
    310a:	df 91       	pop	r29
    310c:	cf 91       	pop	r28
    310e:	1f 91       	pop	r17
    3110:	0f 91       	pop	r16
    3112:	ff 90       	pop	r15
    3114:	ef 90       	pop	r14
    3116:	df 90       	pop	r13
    3118:	cf 90       	pop	r12
    311a:	bf 90       	pop	r11
    311c:	af 90       	pop	r10
    311e:	9f 90       	pop	r9
    3120:	8f 90       	pop	r8
    3122:	08 95       	ret

00003124 <setSoundFile>:

FRESULT setSoundFile(FIL *file,struct sndfamily *snd,unsigned char *filename){
    3124:	ef 92       	push	r14
    3126:	ff 92       	push	r15
    3128:	0f 93       	push	r16
    312a:	1f 93       	push	r17
    312c:	cf 93       	push	r28
    312e:	df 93       	push	r29
    3130:	00 d0       	rcall	.+0      	; 0x3132 <setSoundFile+0xe>
    3132:	cd b7       	in	r28, 0x3d	; 61
    3134:	de b7       	in	r29, 0x3e	; 62
    3136:	8c 01       	movw	r16, r24
    3138:	7b 01       	movw	r14, r22
    313a:	ba 01       	movw	r22, r20
	FRESULT res;
	UINT numOfBytes;
	
	if((res = f_open(file,filename,FA_READ)) != FR_OK)
    313c:	41 e0       	ldi	r20, 0x01	; 1
    313e:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <f_open>
    3142:	88 23       	and	r24, r24
    3144:	31 f0       	breq	.+12     	; 0x3152 <setSoundFile+0x2e>
		lcdPrintData("Open failed",11);
    3146:	6b e0       	ldi	r22, 0x0B	; 11
    3148:	83 e3       	ldi	r24, 0x33	; 51
    314a:	91 e0       	ldi	r25, 0x01	; 1
    314c:	0e 94 be 1c 	call	0x397c	; 0x397c <lcdPrintData>
    3150:	14 c0       	rjmp	.+40     	; 0x317a <setSoundFile+0x56>
	else{
		lcdPrintData("Open OK",7);
    3152:	67 e0       	ldi	r22, 0x07	; 7
    3154:	8d e5       	ldi	r24, 0x5D	; 93
    3156:	91 e0       	ldi	r25, 0x01	; 1
    3158:	0e 94 be 1c 	call	0x397c	; 0x397c <lcdPrintData>
		f_lseek(file,0);
    315c:	40 e0       	ldi	r20, 0x00	; 0
    315e:	50 e0       	ldi	r21, 0x00	; 0
    3160:	ba 01       	movw	r22, r20
    3162:	c8 01       	movw	r24, r16
    3164:	0e 94 34 14 	call	0x2868	; 0x2868 <f_lseek>
		f_read(file,snd,sizeof(struct sndfamily),&numOfBytes);				
    3168:	9e 01       	movw	r18, r28
    316a:	2f 5f       	subi	r18, 0xFF	; 255
    316c:	3f 4f       	sbci	r19, 0xFF	; 255
    316e:	44 e3       	ldi	r20, 0x34	; 52
    3170:	50 e0       	ldi	r21, 0x00	; 0
    3172:	b7 01       	movw	r22, r14
    3174:	c8 01       	movw	r24, r16
    3176:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <f_read>
	}
	
}
    317a:	0f 90       	pop	r0
    317c:	0f 90       	pop	r0
    317e:	df 91       	pop	r29
    3180:	cf 91       	pop	r28
    3182:	1f 91       	pop	r17
    3184:	0f 91       	pop	r16
    3186:	ff 90       	pop	r15
    3188:	ef 90       	pop	r14
    318a:	08 95       	ret

0000318c <createSoundList>:

void createSoundList(FIL *file,unsigned char *num){
    318c:	cf 93       	push	r28
    318e:	df 93       	push	r29
    3190:	eb 01       	movw	r28, r22
	(*num) = file->fsize / sizeof(struct sndfamily); 
    3192:	fc 01       	movw	r30, r24
    3194:	62 85       	ldd	r22, Z+10	; 0x0a
    3196:	73 85       	ldd	r23, Z+11	; 0x0b
    3198:	84 85       	ldd	r24, Z+12	; 0x0c
    319a:	95 85       	ldd	r25, Z+13	; 0x0d
    319c:	24 e3       	ldi	r18, 0x34	; 52
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	40 e0       	ldi	r20, 0x00	; 0
    31a2:	50 e0       	ldi	r21, 0x00	; 0
    31a4:	0e 94 0e 33 	call	0x661c	; 0x661c <__udivmodsi4>
    31a8:	28 83       	st	Y, r18
}
    31aa:	df 91       	pop	r29
    31ac:	cf 91       	pop	r28
    31ae:	08 95       	ret

000031b0 <handleSoundList>:

void handleSoundList(FIL *file,unsigned char index,unsigned char number,struct sndfamily *snd){
    31b0:	af 92       	push	r10
    31b2:	bf 92       	push	r11
    31b4:	cf 92       	push	r12
    31b6:	df 92       	push	r13
    31b8:	ef 92       	push	r14
    31ba:	ff 92       	push	r15
    31bc:	0f 93       	push	r16
    31be:	1f 93       	push	r17
    31c0:	cf 93       	push	r28
    31c2:	df 93       	push	r29
    31c4:	cd b7       	in	r28, 0x3d	; 61
    31c6:	de b7       	in	r29, 0x3e	; 62
    31c8:	ce 56       	subi	r28, 0x6E	; 110
    31ca:	d1 09       	sbc	r29, r1
    31cc:	0f b6       	in	r0, 0x3f	; 63
    31ce:	f8 94       	cli
    31d0:	de bf       	out	0x3e, r29	; 62
    31d2:	0f be       	out	0x3f, r0	; 63
    31d4:	cd bf       	out	0x3d, r28	; 61
    31d6:	5c 01       	movw	r10, r24
    31d8:	d6 2e       	mov	r13, r22
    31da:	c4 2e       	mov	r12, r20
    31dc:	79 01       	movw	r14, r18
	FRESULT res;
	UINT numOfBytes;
	struct sndfamily fam[2];
	unsigned char tmp = index - (index % 2);
	char *ch[2] = {"*"," "};
    31de:	85 e6       	ldi	r24, 0x65	; 101
    31e0:	91 e0       	ldi	r25, 0x01	; 1
    31e2:	ad 96       	adiw	r28, 0x2d	; 45
    31e4:	9f af       	std	Y+63, r25	; 0x3f
    31e6:	8e af       	std	Y+62, r24	; 0x3e
    31e8:	ad 97       	sbiw	r28, 0x2d	; 45
    31ea:	81 ec       	ldi	r24, 0xC1	; 193
    31ec:	91 e0       	ldi	r25, 0x01	; 1
    31ee:	af 96       	adiw	r28, 0x2f	; 47
    31f0:	9f af       	std	Y+63, r25	; 0x3f
    31f2:	8e af       	std	Y+62, r24	; 0x3e
    31f4:	af 97       	sbiw	r28, 0x2f	; 47
	lcdGotoXY(0,0);	
    31f6:	60 e0       	ldi	r22, 0x00	; 0
    31f8:	80 e0       	ldi	r24, 0x00	; 0
    31fa:	0e 94 2e 1c 	call	0x385c	; 0x385c <lcdGotoXY>
	if(number == 0){
    31fe:	c1 10       	cpse	r12, r1
    3200:	06 c0       	rjmp	.+12     	; 0x320e <handleSoundList+0x5e>
		lcdPrintData("No sounds",9);
    3202:	69 e0       	ldi	r22, 0x09	; 9
    3204:	87 e6       	ldi	r24, 0x67	; 103
    3206:	91 e0       	ldi	r25, 0x01	; 1
    3208:	0e 94 be 1c 	call	0x397c	; 0x397c <lcdPrintData>
		return;
    320c:	8f c0       	rjmp	.+286    	; 0x332c <handleSoundList+0x17c>
	}	
	f_lseek(file,tmp * sizeof(struct sndfamily));
    320e:	4d 2d       	mov	r20, r13
    3210:	4e 7f       	andi	r20, 0xFE	; 254
    3212:	84 e3       	ldi	r24, 0x34	; 52
    3214:	48 9f       	mul	r20, r24
    3216:	a0 01       	movw	r20, r0
    3218:	11 24       	eor	r1, r1
    321a:	60 e0       	ldi	r22, 0x00	; 0
    321c:	70 e0       	ldi	r23, 0x00	; 0
    321e:	c5 01       	movw	r24, r10
    3220:	0e 94 34 14 	call	0x2868	; 0x2868 <f_lseek>
	f_read(file,&fam[0],sizeof(struct sndfamily),&numOfBytes);
    3224:	9e 01       	movw	r18, r28
    3226:	2f 5f       	subi	r18, 0xFF	; 255
    3228:	3f 4f       	sbci	r19, 0xFF	; 255
    322a:	44 e3       	ldi	r20, 0x34	; 52
    322c:	50 e0       	ldi	r21, 0x00	; 0
    322e:	be 01       	movw	r22, r28
    3230:	6d 5f       	subi	r22, 0xFD	; 253
    3232:	7f 4f       	sbci	r23, 0xFF	; 255
    3234:	c5 01       	movw	r24, r10
    3236:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <f_read>
	lcdGotoXY(1,0);
    323a:	60 e0       	ldi	r22, 0x00	; 0
    323c:	81 e0       	ldi	r24, 0x01	; 1
    323e:	0e 94 2e 1c 	call	0x385c	; 0x385c <lcdGotoXY>
	lcdPrintData(fam[0].name,strlen(fam[0].name));
    3242:	ce 01       	movw	r24, r28
    3244:	05 96       	adiw	r24, 0x05	; 5
    3246:	fc 01       	movw	r30, r24
    3248:	01 90       	ld	r0, Z+
    324a:	00 20       	and	r0, r0
    324c:	e9 f7       	brne	.-6      	; 0x3248 <handleSoundList+0x98>
    324e:	31 97       	sbiw	r30, 0x01	; 1
    3250:	bf 01       	movw	r22, r30
    3252:	68 1b       	sub	r22, r24
    3254:	79 0b       	sbc	r23, r25
    3256:	0e 94 be 1c 	call	0x397c	; 0x397c <lcdPrintData>
	lcdGotoXY(0,0);
    325a:	60 e0       	ldi	r22, 0x00	; 0
    325c:	80 e0       	ldi	r24, 0x00	; 0
    325e:	0e 94 2e 1c 	call	0x385c	; 0x385c <lcdGotoXY>
	lcdPrintData(ch[index % 2],1);
    3262:	0d 2d       	mov	r16, r13
    3264:	01 70       	andi	r16, 0x01	; 1
    3266:	10 e0       	ldi	r17, 0x00	; 0
    3268:	f8 01       	movw	r30, r16
    326a:	ee 0f       	add	r30, r30
    326c:	ff 1f       	adc	r31, r31
    326e:	8b e6       	ldi	r24, 0x6B	; 107
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	8c 0f       	add	r24, r28
    3274:	9d 1f       	adc	r25, r29
    3276:	e8 0f       	add	r30, r24
    3278:	f9 1f       	adc	r31, r25
    327a:	61 e0       	ldi	r22, 0x01	; 1
    327c:	80 81       	ld	r24, Z
    327e:	91 81       	ldd	r25, Z+1	; 0x01
    3280:	0e 94 be 1c 	call	0x397c	; 0x397c <lcdPrintData>
	if(f_eof(file))
    3284:	f5 01       	movw	r30, r10
    3286:	46 81       	ldd	r20, Z+6	; 0x06
    3288:	57 81       	ldd	r21, Z+7	; 0x07
    328a:	60 85       	ldd	r22, Z+8	; 0x08
    328c:	71 85       	ldd	r23, Z+9	; 0x09
    328e:	82 85       	ldd	r24, Z+10	; 0x0a
    3290:	93 85       	ldd	r25, Z+11	; 0x0b
    3292:	a4 85       	ldd	r26, Z+12	; 0x0c
    3294:	b5 85       	ldd	r27, Z+13	; 0x0d
    3296:	48 17       	cp	r20, r24
    3298:	59 07       	cpc	r21, r25
    329a:	6a 07       	cpc	r22, r26
    329c:	7b 07       	cpc	r23, r27
    329e:	09 f4       	brne	.+2      	; 0x32a2 <handleSoundList+0xf2>
    32a0:	45 c0       	rjmp	.+138    	; 0x332c <handleSoundList+0x17c>
		return;
		
	lcdGotoXY(1,1);
    32a2:	61 e0       	ldi	r22, 0x01	; 1
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	0e 94 2e 1c 	call	0x385c	; 0x385c <lcdGotoXY>
	f_read(file,&fam[1],sizeof(struct sndfamily),&numOfBytes);
    32aa:	9e 01       	movw	r18, r28
    32ac:	2f 5f       	subi	r18, 0xFF	; 255
    32ae:	3f 4f       	sbci	r19, 0xFF	; 255
    32b0:	44 e3       	ldi	r20, 0x34	; 52
    32b2:	50 e0       	ldi	r21, 0x00	; 0
    32b4:	be 01       	movw	r22, r28
    32b6:	69 5c       	subi	r22, 0xC9	; 201
    32b8:	7f 4f       	sbci	r23, 0xFF	; 255
    32ba:	c5 01       	movw	r24, r10
    32bc:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <f_read>
	lcdPrintData(fam[1].name,strlen(fam[1].name));
    32c0:	ce 01       	movw	r24, r28
    32c2:	c9 96       	adiw	r24, 0x39	; 57
    32c4:	fc 01       	movw	r30, r24
    32c6:	01 90       	ld	r0, Z+
    32c8:	00 20       	and	r0, r0
    32ca:	e9 f7       	brne	.-6      	; 0x32c6 <handleSoundList+0x116>
    32cc:	31 97       	sbiw	r30, 0x01	; 1
    32ce:	bf 01       	movw	r22, r30
    32d0:	68 1b       	sub	r22, r24
    32d2:	79 0b       	sbc	r23, r25
    32d4:	0e 94 be 1c 	call	0x397c	; 0x397c <lcdPrintData>
	lcdGotoXY(0,1);
    32d8:	61 e0       	ldi	r22, 0x01	; 1
    32da:	80 e0       	ldi	r24, 0x00	; 0
    32dc:	0e 94 2e 1c 	call	0x385c	; 0x385c <lcdGotoXY>
	lcdPrintData(ch[(index + 1) % 2],1);	
    32e0:	8d 2d       	mov	r24, r13
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	01 96       	adiw	r24, 0x01	; 1
    32e6:	81 70       	andi	r24, 0x01	; 1
    32e8:	90 78       	andi	r25, 0x80	; 128
    32ea:	99 23       	and	r25, r25
    32ec:	24 f4       	brge	.+8      	; 0x32f6 <handleSoundList+0x146>
    32ee:	01 97       	sbiw	r24, 0x01	; 1
    32f0:	8e 6f       	ori	r24, 0xFE	; 254
    32f2:	9f 6f       	ori	r25, 0xFF	; 255
    32f4:	01 96       	adiw	r24, 0x01	; 1
    32f6:	88 0f       	add	r24, r24
    32f8:	99 1f       	adc	r25, r25
    32fa:	eb e6       	ldi	r30, 0x6B	; 107
    32fc:	f0 e0       	ldi	r31, 0x00	; 0
    32fe:	ec 0f       	add	r30, r28
    3300:	fd 1f       	adc	r31, r29
    3302:	e8 0f       	add	r30, r24
    3304:	f9 1f       	adc	r31, r25
    3306:	61 e0       	ldi	r22, 0x01	; 1
    3308:	80 81       	ld	r24, Z
    330a:	91 81       	ldd	r25, Z+1	; 0x01
    330c:	0e 94 be 1c 	call	0x397c	; 0x397c <lcdPrintData>
	
	(*snd) = fam[index % 2];
    3310:	84 e3       	ldi	r24, 0x34	; 52
    3312:	80 9f       	mul	r24, r16
    3314:	f0 01       	movw	r30, r0
    3316:	81 9f       	mul	r24, r17
    3318:	f0 0d       	add	r31, r0
    331a:	11 24       	eor	r1, r1
    331c:	ec 0f       	add	r30, r28
    331e:	fd 1f       	adc	r31, r29
    3320:	33 96       	adiw	r30, 0x03	; 3
    3322:	d7 01       	movw	r26, r14
    3324:	01 90       	ld	r0, Z+
    3326:	0d 92       	st	X+, r0
    3328:	8a 95       	dec	r24
    332a:	e1 f7       	brne	.-8      	; 0x3324 <handleSoundList+0x174>
}
    332c:	c2 59       	subi	r28, 0x92	; 146
    332e:	df 4f       	sbci	r29, 0xFF	; 255
    3330:	0f b6       	in	r0, 0x3f	; 63
    3332:	f8 94       	cli
    3334:	de bf       	out	0x3e, r29	; 62
    3336:	0f be       	out	0x3f, r0	; 63
    3338:	cd bf       	out	0x3d, r28	; 61
    333a:	df 91       	pop	r29
    333c:	cf 91       	pop	r28
    333e:	1f 91       	pop	r17
    3340:	0f 91       	pop	r16
    3342:	ff 90       	pop	r15
    3344:	ef 90       	pop	r14
    3346:	df 90       	pop	r13
    3348:	cf 90       	pop	r12
    334a:	bf 90       	pop	r11
    334c:	af 90       	pop	r10
    334e:	08 95       	ret

00003350 <handleFileList>:

void handleFileList(unsigned char currentMode,unsigned char currentAction,unsigned char index,unsigned char number,char (*list)[MAX_FNAME]){
    3350:	af 92       	push	r10
    3352:	bf 92       	push	r11
    3354:	cf 92       	push	r12
    3356:	df 92       	push	r13
    3358:	ef 92       	push	r14
    335a:	ff 92       	push	r15
    335c:	0f 93       	push	r16
    335e:	1f 93       	push	r17
    3360:	cf 93       	push	r28
    3362:	df 93       	push	r29
    3364:	00 d0       	rcall	.+0      	; 0x3366 <handleFileList+0x16>
    3366:	00 d0       	rcall	.+0      	; 0x3368 <handleFileList+0x18>
    3368:	cd b7       	in	r28, 0x3d	; 61
    336a:	de b7       	in	r29, 0x3e	; 62
    336c:	f4 2e       	mov	r15, r20
    336e:	e2 2e       	mov	r14, r18
	unsigned char tmp = index - (index % 2);
	char *ch[2] = {"*"," "};
    3370:	85 e6       	ldi	r24, 0x65	; 101
    3372:	91 e0       	ldi	r25, 0x01	; 1
    3374:	9a 83       	std	Y+2, r25	; 0x02
    3376:	89 83       	std	Y+1, r24	; 0x01
    3378:	81 ec       	ldi	r24, 0xC1	; 193
    337a:	91 e0       	ldi	r25, 0x01	; 1
    337c:	9c 83       	std	Y+4, r25	; 0x04
    337e:	8b 83       	std	Y+3, r24	; 0x03
	
	lcdGotoXY(0,0);
    3380:	60 e0       	ldi	r22, 0x00	; 0
    3382:	80 e0       	ldi	r24, 0x00	; 0
    3384:	0e 94 2e 1c 	call	0x385c	; 0x385c <lcdGotoXY>
	if(number == 0){
    3388:	e1 10       	cpse	r14, r1
    338a:	06 c0       	rjmp	.+12     	; 0x3398 <handleFileList+0x48>
		lcdPrintData("No files",8);
    338c:	68 e0       	ldi	r22, 0x08	; 8
    338e:	81 e7       	ldi	r24, 0x71	; 113
    3390:	91 e0       	ldi	r25, 0x01	; 1
    3392:	0e 94 be 1c 	call	0x397c	; 0x397c <lcdPrintData>
    3396:	56 c0       	rjmp	.+172    	; 0x3444 <handleFileList+0xf4>
		return;
	}
	
	lcdGotoXY(1,0);
    3398:	60 e0       	ldi	r22, 0x00	; 0
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	0e 94 2e 1c 	call	0x385c	; 0x385c <lcdGotoXY>
	lcdPrintData(list[tmp],strlen(list[tmp]));
    33a0:	8f 2d       	mov	r24, r15
    33a2:	8e 7f       	andi	r24, 0xFE	; 254
    33a4:	90 e1       	ldi	r25, 0x10	; 16
    33a6:	89 9f       	mul	r24, r25
    33a8:	50 01       	movw	r10, r0
    33aa:	11 24       	eor	r1, r1
    33ac:	c8 01       	movw	r24, r16
    33ae:	8a 0d       	add	r24, r10
    33b0:	9b 1d       	adc	r25, r11
    33b2:	fc 01       	movw	r30, r24
    33b4:	01 90       	ld	r0, Z+
    33b6:	00 20       	and	r0, r0
    33b8:	e9 f7       	brne	.-6      	; 0x33b4 <handleFileList+0x64>
    33ba:	31 97       	sbiw	r30, 0x01	; 1
    33bc:	bf 01       	movw	r22, r30
    33be:	68 1b       	sub	r22, r24
    33c0:	79 0b       	sbc	r23, r25
    33c2:	0e 94 be 1c 	call	0x397c	; 0x397c <lcdPrintData>
	lcdGotoXY(0,0);
    33c6:	60 e0       	ldi	r22, 0x00	; 0
    33c8:	80 e0       	ldi	r24, 0x00	; 0
    33ca:	0e 94 2e 1c 	call	0x385c	; 0x385c <lcdGotoXY>
	lcdPrintData(ch[index % 2],1);
    33ce:	f0 fa       	bst	r15, 0
    33d0:	cc 24       	eor	r12, r12
    33d2:	c0 f8       	bld	r12, 0
    33d4:	d1 2c       	mov	r13, r1
    33d6:	cc 0c       	add	r12, r12
    33d8:	dd 1c       	adc	r13, r13
    33da:	fe 01       	movw	r30, r28
    33dc:	ec 0d       	add	r30, r12
    33de:	fd 1d       	adc	r31, r13
    33e0:	61 e0       	ldi	r22, 0x01	; 1
    33e2:	81 81       	ldd	r24, Z+1	; 0x01
    33e4:	92 81       	ldd	r25, Z+2	; 0x02
    33e6:	0e 94 be 1c 	call	0x397c	; 0x397c <lcdPrintData>
	if(index < number){
    33ea:	fe 14       	cp	r15, r14
    33ec:	58 f5       	brcc	.+86     	; 0x3444 <handleFileList+0xf4>
		lcdGotoXY(1,1);
    33ee:	61 e0       	ldi	r22, 0x01	; 1
    33f0:	81 e0       	ldi	r24, 0x01	; 1
    33f2:	0e 94 2e 1c 	call	0x385c	; 0x385c <lcdGotoXY>
		lcdPrintData(list[tmp + 1],strlen(list[tmp + 1]));
    33f6:	c5 01       	movw	r24, r10
    33f8:	40 96       	adiw	r24, 0x10	; 16
    33fa:	80 0f       	add	r24, r16
    33fc:	91 1f       	adc	r25, r17
    33fe:	fc 01       	movw	r30, r24
    3400:	01 90       	ld	r0, Z+
    3402:	00 20       	and	r0, r0
    3404:	e9 f7       	brne	.-6      	; 0x3400 <handleFileList+0xb0>
    3406:	31 97       	sbiw	r30, 0x01	; 1
    3408:	bf 01       	movw	r22, r30
    340a:	68 1b       	sub	r22, r24
    340c:	79 0b       	sbc	r23, r25
    340e:	0e 94 be 1c 	call	0x397c	; 0x397c <lcdPrintData>
		lcdGotoXY(0,1);
    3412:	61 e0       	ldi	r22, 0x01	; 1
    3414:	80 e0       	ldi	r24, 0x00	; 0
    3416:	0e 94 2e 1c 	call	0x385c	; 0x385c <lcdGotoXY>
		lcdPrintData(ch[(index + 1) % 2],1);
    341a:	8f 2d       	mov	r24, r15
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	01 96       	adiw	r24, 0x01	; 1
    3420:	81 70       	andi	r24, 0x01	; 1
    3422:	90 78       	andi	r25, 0x80	; 128
    3424:	99 23       	and	r25, r25
    3426:	24 f4       	brge	.+8      	; 0x3430 <handleFileList+0xe0>
    3428:	01 97       	sbiw	r24, 0x01	; 1
    342a:	8e 6f       	ori	r24, 0xFE	; 254
    342c:	9f 6f       	ori	r25, 0xFF	; 255
    342e:	01 96       	adiw	r24, 0x01	; 1
    3430:	88 0f       	add	r24, r24
    3432:	99 1f       	adc	r25, r25
    3434:	fe 01       	movw	r30, r28
    3436:	e8 0f       	add	r30, r24
    3438:	f9 1f       	adc	r31, r25
    343a:	61 e0       	ldi	r22, 0x01	; 1
    343c:	81 81       	ldd	r24, Z+1	; 0x01
    343e:	92 81       	ldd	r25, Z+2	; 0x02
    3440:	0e 94 be 1c 	call	0x397c	; 0x397c <lcdPrintData>
	}
}
    3444:	0f 90       	pop	r0
    3446:	0f 90       	pop	r0
    3448:	0f 90       	pop	r0
    344a:	0f 90       	pop	r0
    344c:	df 91       	pop	r29
    344e:	cf 91       	pop	r28
    3450:	1f 91       	pop	r17
    3452:	0f 91       	pop	r16
    3454:	ff 90       	pop	r15
    3456:	ef 90       	pop	r14
    3458:	df 90       	pop	r13
    345a:	cf 90       	pop	r12
    345c:	bf 90       	pop	r11
    345e:	af 90       	pop	r10
    3460:	08 95       	ret

00003462 <writeMidi>:

void writeMidi(FIL *file){
    3462:	08 95       	ret

00003464 <lcdInitHW>:
}

void lcdHome(void)
{
	// move cursor to home
	lcdControlWrite(1<<LCD_HOME);
    3464:	92 98       	cbi	0x12, 2	; 18
    3466:	93 98       	cbi	0x12, 3	; 18
    3468:	94 98       	cbi	0x12, 4	; 18
    346a:	8a 9a       	sbi	0x11, 2	; 17
    346c:	8b 9a       	sbi	0x11, 3	; 17
    346e:	8c 9a       	sbi	0x11, 4	; 17
    3470:	8a b3       	in	r24, 0x1a	; 26
    3472:	8f 70       	andi	r24, 0x0F	; 15
    3474:	8a bb       	out	0x1a, r24	; 26
    3476:	8b b3       	in	r24, 0x1b	; 27
    3478:	80 6f       	ori	r24, 0xF0	; 240
    347a:	8b bb       	out	0x1b, r24	; 27
    347c:	08 95       	ret

0000347e <lcdBusyWait>:
    347e:	92 98       	cbi	0x12, 2	; 18
    3480:	8a b3       	in	r24, 0x1a	; 26
    3482:	8f 70       	andi	r24, 0x0F	; 15
    3484:	8a bb       	out	0x1a, r24	; 26
    3486:	8b b3       	in	r24, 0x1b	; 27
    3488:	80 6f       	ori	r24, 0xF0	; 240
    348a:	8b bb       	out	0x1b, r24	; 27
    348c:	93 9a       	sbi	0x12, 3	; 18
    348e:	94 9a       	sbi	0x12, 4	; 18
	...
    34ac:	cf 9b       	sbis	0x19, 7	; 25
    34ae:	76 c0       	rjmp	.+236    	; 0x359c <lcdBusyWait+0x11e>
    34b0:	94 98       	cbi	0x12, 4	; 18
	...
    34ea:	94 9a       	sbi	0x12, 4	; 18
	...
    3524:	94 98       	cbi	0x12, 4	; 18
	...
    355e:	94 9a       	sbi	0x12, 4	; 18
	...
    3598:	cf 99       	sbic	0x19, 7	; 25
    359a:	8a cf       	rjmp	.-236    	; 0x34b0 <lcdBusyWait+0x32>
    359c:	94 98       	cbi	0x12, 4	; 18
    359e:	08 95       	ret

000035a0 <lcdControlWrite>:
    35a0:	cf 93       	push	r28
    35a2:	c8 2f       	mov	r28, r24
    35a4:	0e 94 3f 1a 	call	0x347e	; 0x347e <lcdBusyWait>
    35a8:	92 98       	cbi	0x12, 2	; 18
    35aa:	93 98       	cbi	0x12, 3	; 18
    35ac:	94 9a       	sbi	0x12, 4	; 18
    35ae:	8a b3       	in	r24, 0x1a	; 26
    35b0:	80 6f       	ori	r24, 0xF0	; 240
    35b2:	8a bb       	out	0x1a, r24	; 26
    35b4:	8b b3       	in	r24, 0x1b	; 27
    35b6:	8f 70       	andi	r24, 0x0F	; 15
    35b8:	9c 2f       	mov	r25, r28
    35ba:	90 7f       	andi	r25, 0xF0	; 240
    35bc:	89 2b       	or	r24, r25
    35be:	8b bb       	out	0x1b, r24	; 27
	...
    35f8:	94 98       	cbi	0x12, 4	; 18
	...
    3632:	94 9a       	sbi	0x12, 4	; 18
    3634:	8b b3       	in	r24, 0x1b	; 27
    3636:	28 2f       	mov	r18, r24
    3638:	2f 70       	andi	r18, 0x0F	; 15
    363a:	30 e1       	ldi	r19, 0x10	; 16
    363c:	c3 9f       	mul	r28, r19
    363e:	c0 01       	movw	r24, r0
    3640:	11 24       	eor	r1, r1
    3642:	82 2b       	or	r24, r18
    3644:	8b bb       	out	0x1b, r24	; 27
	...
    367e:	94 98       	cbi	0x12, 4	; 18
    3680:	8a b3       	in	r24, 0x1a	; 26
    3682:	8f 70       	andi	r24, 0x0F	; 15
    3684:	8a bb       	out	0x1a, r24	; 26
    3686:	8b b3       	in	r24, 0x1b	; 27
    3688:	80 6f       	ori	r24, 0xF0	; 240
    368a:	8b bb       	out	0x1b, r24	; 27
    368c:	cf 91       	pop	r28
    368e:	08 95       	ret

00003690 <lcdControlRead>:
    3690:	0e 94 3f 1a 	call	0x347e	; 0x347e <lcdBusyWait>
    3694:	8a b3       	in	r24, 0x1a	; 26
    3696:	8f 70       	andi	r24, 0x0F	; 15
    3698:	8a bb       	out	0x1a, r24	; 26
    369a:	8b b3       	in	r24, 0x1b	; 27
    369c:	80 6f       	ori	r24, 0xF0	; 240
    369e:	8b bb       	out	0x1b, r24	; 27
    36a0:	92 98       	cbi	0x12, 2	; 18
    36a2:	93 9a       	sbi	0x12, 3	; 18
    36a4:	94 9a       	sbi	0x12, 4	; 18
	...
    36de:	99 b3       	in	r25, 0x19	; 25
    36e0:	94 98       	cbi	0x12, 4	; 18
	...
    371a:	94 9a       	sbi	0x12, 4	; 18
	...
    3754:	29 b3       	in	r18, 0x19	; 25
    3756:	22 95       	swap	r18
    3758:	2f 70       	andi	r18, 0x0F	; 15
    375a:	89 2f       	mov	r24, r25
    375c:	80 7f       	andi	r24, 0xF0	; 240
    375e:	94 98       	cbi	0x12, 4	; 18
    3760:	82 2b       	or	r24, r18
    3762:	08 95       	ret

00003764 <lcdDataWrite>:
    3764:	cf 93       	push	r28
    3766:	c8 2f       	mov	r28, r24
    3768:	0e 94 3f 1a 	call	0x347e	; 0x347e <lcdBusyWait>
    376c:	92 9a       	sbi	0x12, 2	; 18
    376e:	93 98       	cbi	0x12, 3	; 18
    3770:	94 9a       	sbi	0x12, 4	; 18
    3772:	8a b3       	in	r24, 0x1a	; 26
    3774:	80 6f       	ori	r24, 0xF0	; 240
    3776:	8a bb       	out	0x1a, r24	; 26
    3778:	8b b3       	in	r24, 0x1b	; 27
    377a:	8f 70       	andi	r24, 0x0F	; 15
    377c:	9c 2f       	mov	r25, r28
    377e:	90 7f       	andi	r25, 0xF0	; 240
    3780:	89 2b       	or	r24, r25
    3782:	8b bb       	out	0x1b, r24	; 27
	...
    37bc:	94 98       	cbi	0x12, 4	; 18
	...
    37f6:	94 9a       	sbi	0x12, 4	; 18
    37f8:	8b b3       	in	r24, 0x1b	; 27
    37fa:	28 2f       	mov	r18, r24
    37fc:	2f 70       	andi	r18, 0x0F	; 15
    37fe:	30 e1       	ldi	r19, 0x10	; 16
    3800:	c3 9f       	mul	r28, r19
    3802:	c0 01       	movw	r24, r0
    3804:	11 24       	eor	r1, r1
    3806:	82 2b       	or	r24, r18
    3808:	8b bb       	out	0x1b, r24	; 27
	...
    3842:	94 98       	cbi	0x12, 4	; 18
    3844:	8a b3       	in	r24, 0x1a	; 26
    3846:	8f 70       	andi	r24, 0x0F	; 15
    3848:	8a bb       	out	0x1a, r24	; 26
    384a:	8b b3       	in	r24, 0x1b	; 27
    384c:	80 6f       	ori	r24, 0xF0	; 240
    384e:	8b bb       	out	0x1b, r24	; 27
    3850:	cf 91       	pop	r28
    3852:	08 95       	ret

00003854 <lcdClear>:
}

void lcdClear(void)
{
	// clear LCD
	lcdControlWrite(1<<LCD_CLR);
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <lcdControlWrite>
    385a:	08 95       	ret

0000385c <lcdGotoXY>:
void lcdGotoXY(u08 x, u08 y)
{
	register u08 DDRAMAddr;

	// remap lines into proper order
	switch(y)
    385c:	62 30       	cpi	r22, 0x02	; 2
    385e:	31 f0       	breq	.+12     	; 0x386c <lcdGotoXY+0x10>
    3860:	63 30       	cpi	r22, 0x03	; 3
    3862:	31 f0       	breq	.+12     	; 0x3870 <lcdGotoXY+0x14>
    3864:	61 30       	cpi	r22, 0x01	; 1
    3866:	29 f4       	brne	.+10     	; 0x3872 <lcdGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    3868:	80 5c       	subi	r24, 0xC0	; 192
    386a:	03 c0       	rjmp	.+6      	; 0x3872 <lcdGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    386c:	8c 5e       	subi	r24, 0xEC	; 236
    386e:	01 c0       	rjmp	.+2      	; 0x3872 <lcdGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    3870:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}

	// set data address
	lcdControlWrite(1<<LCD_DDRAM | DDRAMAddr);
    3872:	80 68       	ori	r24, 0x80	; 128
    3874:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <lcdControlWrite>
    3878:	08 95       	ret

0000387a <lcdLoadCustomChar>:
}

void lcdLoadCustomChar(u08* lcdCustomCharArray, u08 romCharNum, u08 lcdCharNum)
{
    387a:	0f 93       	push	r16
    387c:	1f 93       	push	r17
    387e:	cf 93       	push	r28
    3880:	df 93       	push	r29
    3882:	00 d0       	rcall	.+0      	; 0x3884 <lcdLoadCustomChar+0xa>
    3884:	1f 92       	push	r1
    3886:	cd b7       	in	r28, 0x3d	; 61
    3888:	de b7       	in	r29, 0x3e	; 62
    388a:	8c 01       	movw	r16, r24
    388c:	6b 83       	std	Y+3, r22	; 0x03
    388e:	4a 83       	std	Y+2, r20	; 0x02
	register u08 i;
	u08 saveDDRAMAddr;

	// backup the current cursor position
	saveDDRAMAddr = lcdControlRead() & 0x7F;
    3890:	0e 94 48 1b 	call	0x3690	; 0x3690 <lcdControlRead>
    3894:	8f 77       	andi	r24, 0x7F	; 127
    3896:	89 83       	std	Y+1, r24	; 0x01

	// multiply the character index by 8
	lcdCharNum = (lcdCharNum<<3);	// each character occupies 8 bytes
    3898:	8a 81       	ldd	r24, Y+2	; 0x02
    389a:	88 0f       	add	r24, r24
    389c:	88 0f       	add	r24, r24
    389e:	88 0f       	add	r24, r24
    38a0:	8a 83       	std	Y+2, r24	; 0x02
    38a2:	9b 81       	ldd	r25, Y+3	; 0x03
    38a4:	99 0f       	add	r25, r25
    38a6:	99 0f       	add	r25, r25
    38a8:	99 0f       	add	r25, r25
    38aa:	09 0f       	add	r16, r25
    38ac:	11 1d       	adc	r17, r1
    38ae:	88 5f       	subi	r24, 0xF8	; 248
    38b0:	8b 83       	std	Y+3, r24	; 0x03

	// copy the 8 bytes into CG (character generator) RAM
	for(i=0; i<8; i++)
	{
		// set CG RAM address
		lcdControlWrite((1<<LCD_CGRAM) | (lcdCharNum+i));
    38b2:	8a 81       	ldd	r24, Y+2	; 0x02
    38b4:	80 64       	ori	r24, 0x40	; 64
    38b6:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <lcdControlWrite>
		// write character data
		lcdDataWrite( pgm_read_byte(lcdCustomCharArray+romCharNum+i) );
    38ba:	f8 01       	movw	r30, r16
    38bc:	84 91       	lpm	r24, Z
    38be:	0e 94 b2 1b 	call	0x3764	; 0x3764 <lcdDataWrite>
    38c2:	fa 81       	ldd	r31, Y+2	; 0x02
    38c4:	ff 5f       	subi	r31, 0xFF	; 255
    38c6:	fa 83       	std	Y+2, r31	; 0x02
    38c8:	0f 5f       	subi	r16, 0xFF	; 255
    38ca:	1f 4f       	sbci	r17, 0xFF	; 255
	// multiply the character index by 8
	lcdCharNum = (lcdCharNum<<3);	// each character occupies 8 bytes
	romCharNum = (romCharNum<<3);	// each character occupies 8 bytes

	// copy the 8 bytes into CG (character generator) RAM
	for(i=0; i<8; i++)
    38cc:	8b 81       	ldd	r24, Y+3	; 0x03
    38ce:	f8 13       	cpse	r31, r24
    38d0:	f0 cf       	rjmp	.-32     	; 0x38b2 <lcdLoadCustomChar+0x38>
		// write character data
		lcdDataWrite( pgm_read_byte(lcdCustomCharArray+romCharNum+i) );
	}

	// restore the previous cursor position
	lcdControlWrite(1<<LCD_DDRAM | saveDDRAMAddr);
    38d2:	89 81       	ldd	r24, Y+1	; 0x01
    38d4:	80 68       	ori	r24, 0x80	; 128
    38d6:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <lcdControlWrite>

}
    38da:	0f 90       	pop	r0
    38dc:	0f 90       	pop	r0
    38de:	0f 90       	pop	r0
    38e0:	df 91       	pop	r29
    38e2:	cf 91       	pop	r28
    38e4:	1f 91       	pop	r17
    38e6:	0f 91       	pop	r16
    38e8:	08 95       	ret

000038ea <lcdInit>:
/*************************************************************/

void lcdInit()
{
	// initialize hardware
	lcdInitHW();
    38ea:	0e 94 32 1a 	call	0x3464	; 0x3464 <lcdInitHW>
	// LCD function set
	lcdControlWrite(LCD_FUNCTION_DEFAULT);
    38ee:	88 e2       	ldi	r24, 0x28	; 40
    38f0:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <lcdControlWrite>
	// clear LCD
	lcdControlWrite(1<<LCD_CLR);
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <lcdControlWrite>
	delay(60000);	// wait 60ms
    38fa:	80 e6       	ldi	r24, 0x60	; 96
    38fc:	9a ee       	ldi	r25, 0xEA	; 234
    38fe:	0e 94 12 30 	call	0x6024	; 0x6024 <delay_us>
	// set entry mode
	lcdControlWrite(1<<LCD_ENTRY_MODE | 1<<LCD_ENTRY_INC);
    3902:	86 e0       	ldi	r24, 0x06	; 6
    3904:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <lcdControlWrite>
	// set display to on
	//lcdControlWrite(1<<LCD_ON_CTRL | 1<<LCD_ON_DISPLAY | 1<<LCD_ON_BLINK);
	lcdControlWrite(1<<LCD_ON_CTRL | 1<<LCD_ON_DISPLAY );
    3908:	8c e0       	ldi	r24, 0x0C	; 12
    390a:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <lcdControlWrite>
	// move cursor to home
	lcdControlWrite(1<<LCD_HOME);
    390e:	82 e0       	ldi	r24, 0x02	; 2
    3910:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <lcdControlWrite>
	// set data address to 0
	lcdControlWrite(1<<LCD_DDRAM | 0x00);
    3914:	80 e8       	ldi	r24, 0x80	; 128
    3916:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <lcdControlWrite>

	// load the first 8 custom characters
	lcdLoadCustomChar((u08*)LcdCustomChar,0,0);
    391a:	40 e0       	ldi	r20, 0x00	; 0
    391c:	60 e0       	ldi	r22, 0x00	; 0
    391e:	82 e7       	ldi	r24, 0x72	; 114
    3920:	91 e0       	ldi	r25, 0x01	; 1
    3922:	0e 94 3d 1c 	call	0x387a	; 0x387a <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,1,1);
    3926:	41 e0       	ldi	r20, 0x01	; 1
    3928:	61 e0       	ldi	r22, 0x01	; 1
    392a:	82 e7       	ldi	r24, 0x72	; 114
    392c:	91 e0       	ldi	r25, 0x01	; 1
    392e:	0e 94 3d 1c 	call	0x387a	; 0x387a <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,2,2);
    3932:	42 e0       	ldi	r20, 0x02	; 2
    3934:	62 e0       	ldi	r22, 0x02	; 2
    3936:	82 e7       	ldi	r24, 0x72	; 114
    3938:	91 e0       	ldi	r25, 0x01	; 1
    393a:	0e 94 3d 1c 	call	0x387a	; 0x387a <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,3,3);
    393e:	43 e0       	ldi	r20, 0x03	; 3
    3940:	63 e0       	ldi	r22, 0x03	; 3
    3942:	82 e7       	ldi	r24, 0x72	; 114
    3944:	91 e0       	ldi	r25, 0x01	; 1
    3946:	0e 94 3d 1c 	call	0x387a	; 0x387a <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,4,4);
    394a:	44 e0       	ldi	r20, 0x04	; 4
    394c:	64 e0       	ldi	r22, 0x04	; 4
    394e:	82 e7       	ldi	r24, 0x72	; 114
    3950:	91 e0       	ldi	r25, 0x01	; 1
    3952:	0e 94 3d 1c 	call	0x387a	; 0x387a <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,5,5);
    3956:	45 e0       	ldi	r20, 0x05	; 5
    3958:	65 e0       	ldi	r22, 0x05	; 5
    395a:	82 e7       	ldi	r24, 0x72	; 114
    395c:	91 e0       	ldi	r25, 0x01	; 1
    395e:	0e 94 3d 1c 	call	0x387a	; 0x387a <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,6,6);
    3962:	46 e0       	ldi	r20, 0x06	; 6
    3964:	66 e0       	ldi	r22, 0x06	; 6
    3966:	82 e7       	ldi	r24, 0x72	; 114
    3968:	91 e0       	ldi	r25, 0x01	; 1
    396a:	0e 94 3d 1c 	call	0x387a	; 0x387a <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,7,7);
    396e:	47 e0       	ldi	r20, 0x07	; 7
    3970:	67 e0       	ldi	r22, 0x07	; 7
    3972:	82 e7       	ldi	r24, 0x72	; 114
    3974:	91 e0       	ldi	r25, 0x01	; 1
    3976:	0e 94 3d 1c 	call	0x387a	; 0x387a <lcdLoadCustomChar>
    397a:	08 95       	ret

0000397c <lcdPrintData>:
	lcdControlWrite(1<<LCD_DDRAM | saveDDRAMAddr);

}

void lcdPrintData(char* data, u08 nBytes)
{
    397c:	0f 93       	push	r16
    397e:	1f 93       	push	r17
    3980:	cf 93       	push	r28
    3982:	df 93       	push	r29
	register u08 i;

	// check to make sure we have a good pointer
	if (!data) return;
    3984:	00 97       	sbiw	r24, 0x00	; 0
    3986:	81 f0       	breq	.+32     	; 0x39a8 <lcdPrintData+0x2c>

	// print data
	for(i=0; i<nBytes; i++)
    3988:	66 23       	and	r22, r22
    398a:	71 f0       	breq	.+28     	; 0x39a8 <lcdPrintData+0x2c>
    398c:	ec 01       	movw	r28, r24
    398e:	61 50       	subi	r22, 0x01	; 1
    3990:	06 2f       	mov	r16, r22
    3992:	10 e0       	ldi	r17, 0x00	; 0
    3994:	0f 5f       	subi	r16, 0xFF	; 255
    3996:	1f 4f       	sbci	r17, 0xFF	; 255
    3998:	08 0f       	add	r16, r24
    399a:	19 1f       	adc	r17, r25
	{
		lcdDataWrite(data[i]);
    399c:	89 91       	ld	r24, Y+
    399e:	0e 94 b2 1b 	call	0x3764	; 0x3764 <lcdDataWrite>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    39a2:	c0 17       	cp	r28, r16
    39a4:	d1 07       	cpc	r29, r17
    39a6:	d1 f7       	brne	.-12     	; 0x399c <lcdPrintData+0x20>
	{
		lcdDataWrite(data[i]);
	}
}
    39a8:	df 91       	pop	r29
    39aa:	cf 91       	pop	r28
    39ac:	1f 91       	pop	r17
    39ae:	0f 91       	pop	r16
    39b0:	08 95       	ret

000039b2 <main>:

#define MIDI_FILE	0
#define SOUND_FILE	1

int main(void)
{
    39b2:	cf 93       	push	r28
    39b4:	df 93       	push	r29
    39b6:	cd b7       	in	r28, 0x3d	; 61
    39b8:	de b7       	in	r29, 0x3e	; 62
    39ba:	c9 57       	subi	r28, 0x79	; 121
    39bc:	d4 40       	sbci	r29, 0x04	; 4
    39be:	0f b6       	in	r0, 0x3f	; 63
    39c0:	f8 94       	cli
    39c2:	de bf       	out	0x3e, r29	; 62
    39c4:	0f be       	out	0x3f, r0	; 63
    39c6:	cd bf       	out	0x3d, r28	; 61
    FATFS Fatfs;
	struct midiStruct mst,*pmst;
	char (*files)[MAX_FNAME];
    unsigned char byteValue = 0;
	unsigned char listIndex = 0;
    unsigned char numOfBytes = 0;
    39c8:	c5 5c       	subi	r28, 0xC5	; 197
    39ca:	dd 4f       	sbci	r29, 0xFD	; 253
    39cc:	18 82       	st	Y, r1
    39ce:	cb 53       	subi	r28, 0x3B	; 59
    39d0:	d2 40       	sbci	r29, 0x02	; 2
	unsigned char numOfItems = 0;
    39d2:	c4 5c       	subi	r28, 0xC4	; 196
    39d4:	dd 4f       	sbci	r29, 0xFD	; 253
    39d6:	18 82       	st	Y, r1
    39d8:	cc 53       	subi	r28, 0x3C	; 60
    39da:	d2 40       	sbci	r29, 0x02	; 2
	FILINFO finf;
	FRESULT res;    
	unsigned long microseconds;
	unsigned long delta;
	//DDRA |= (1 << PA1);		// remove
	files = malloc(MAX_FNAME * MAX_FILES);
    39dc:	80 ea       	ldi	r24, 0xA0	; 160
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	0e 94 6f 33 	call	0x66de	; 0x66de <malloc>
    39e4:	4c 01       	movw	r8, r24
	
	configTimers();	
    39e6:	0e 94 db 16 	call	0x2db6	; 0x2db6 <configTimers>
	lcdInit();	
    39ea:	0e 94 75 1c 	call	0x38ea	; 0x38ea <lcdInit>
	uartInit();
    39ee:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <uartInit>
	midiInit();	
    39f2:	0e 94 00 27 	call	0x4e00	; 0x4e00 <midiInit>
	spiInit();	
    39f6:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <spiInit>
	setInputs();
    39fa:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <setInputs>
	InitSRAM();
    39fe:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <InitSRAM>
	
	// >> ADC
	a2dInit();
    3a02:	0e 94 2a 01 	call	0x254	; 0x254 <a2dInit>
	a2dSetPrescaler(ADC_PRESCALE_DIV32);
    3a06:	85 e0       	ldi	r24, 0x05	; 5
    3a08:	0e 94 1c 01 	call	0x238	; 0x238 <a2dSetPrescaler>
	a2dSetReference(ADC_REFERENCE_AVCC);
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	0e 94 21 01 	call	0x242	; 0x242 <a2dSetReference>
	a2dSetChannel(ADC_CH_ADC0);
    3a12:	80 e0       	ldi	r24, 0x00	; 0
    3a14:	0e 94 38 01 	call	0x270	; 0x270 <a2dSetChannel>
	a2dStartConvert();		
    3a18:	0e 94 3e 01 	call	0x27c	; 0x27c <a2dStartConvert>
	// << ADC
	 
	timerAttach(TIMER2OUTCOMPARE_INT,disk_timerproc);
    3a1c:	6f e3       	ldi	r22, 0x3F	; 63
    3a1e:	7c e2       	ldi	r23, 0x2C	; 44
    3a20:	86 e0       	ldi	r24, 0x06	; 6
    3a22:	0e 94 2d 30 	call	0x605a	; 0x605a <timerAttach>
	timerAttach(TIMER0OVERFLOW_INT,addMillis);
    3a26:	65 e6       	ldi	r22, 0x65	; 101
    3a28:	77 e1       	ldi	r23, 0x17	; 23
    3a2a:	80 e0       	ldi	r24, 0x00	; 0
    3a2c:	0e 94 2d 30 	call	0x605a	; 0x605a <timerAttach>
	
	uartSetBaudRate(MIDI_BAUD_RATE);
    3a30:	62 e1       	ldi	r22, 0x12	; 18
    3a32:	7a e7       	ldi	r23, 0x7A	; 122
    3a34:	80 e0       	ldi	r24, 0x00	; 0
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	0e 94 07 32 	call	0x640e	; 0x640e <uartSetBaudRate>
	uartSetRxHandler(rx_handler);
    3a3c:	8b ec       	ldi	r24, 0xCB	; 203
    3a3e:	96 e1       	ldi	r25, 0x16	; 22
    3a40:	0e 94 02 32 	call	0x6404	; 0x6404 <uartSetRxHandler>
	uartFlushReceiveBuffer();
    3a44:	0e 94 72 32 	call	0x64e4	; 0x64e4 <uartFlushReceiveBuffer>
	
	lcdGotoXY(0,0);		
    3a48:	60 e0       	ldi	r22, 0x00	; 0
    3a4a:	80 e0       	ldi	r24, 0x00	; 0
    3a4c:	0e 94 2e 1c 	call	0x385c	; 0x385c <lcdGotoXY>
		
	if(f_mount(0,&Fatfs) != FR_OK)
    3a50:	be 01       	movw	r22, r28
    3a52:	6f 5f       	subi	r22, 0xFF	; 255
    3a54:	7f 4f       	sbci	r23, 0xFF	; 255
    3a56:	80 e0       	ldi	r24, 0x00	; 0
    3a58:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <f_mount>
    3a5c:	88 23       	and	r24, r24
    3a5e:	31 f0       	breq	.+12     	; 0x3a6c <main+0xba>
		lcdPrintData("Mount failed",12);
    3a60:	6c e0       	ldi	r22, 0x0C	; 12
    3a62:	8a e7       	ldi	r24, 0x7A	; 122
    3a64:	91 e0       	ldi	r25, 0x01	; 1
    3a66:	0e 94 be 1c 	call	0x397c	; 0x397c <lcdPrintData>
    3a6a:	05 c0       	rjmp	.+10     	; 0x3a76 <main+0xc4>
	else
		lcdPrintData("Mount OK",8);
    3a6c:	68 e0       	ldi	r22, 0x08	; 8
    3a6e:	87 e8       	ldi	r24, 0x87	; 135
    3a70:	91 e0       	ldi	r25, 0x01	; 1
    3a72:	0e 94 be 1c 	call	0x397c	; 0x397c <lcdPrintData>
	lcdGotoXY(0,1);
    3a76:	61 e0       	ldi	r22, 0x01	; 1
    3a78:	80 e0       	ldi	r24, 0x00	; 0
    3a7a:	0e 94 2e 1c 	call	0x385c	; 0x385c <lcdGotoXY>
	if(checkSRAM() == TRUE)
    3a7e:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <checkSRAM>
    3a82:	81 30       	cpi	r24, 0x01	; 1
    3a84:	29 f4       	brne	.+10     	; 0x3a90 <main+0xde>
		lcdPrintData("SRAM OK",7);		
    3a86:	67 e0       	ldi	r22, 0x07	; 7
    3a88:	80 e9       	ldi	r24, 0x90	; 144
    3a8a:	91 e0       	ldi	r25, 0x01	; 1
    3a8c:	0e 94 be 1c 	call	0x397c	; 0x397c <lcdPrintData>
		f_close(&file);
	}
	*/
	
	
	midiFileVolume(inputs[POT] / 2);
    3a90:	ca 5b       	subi	r28, 0xBA	; 186
    3a92:	dd 4f       	sbci	r29, 0xFD	; 253
    3a94:	88 81       	ld	r24, Y
    3a96:	c6 54       	subi	r28, 0x46	; 70
    3a98:	d2 40       	sbci	r29, 0x02	; 2
    3a9a:	86 95       	lsr	r24
    3a9c:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <midiFileVolume>
	readInputs(inputs);	
    3aa0:	ce 01       	movw	r24, r28
    3aa2:	83 5c       	subi	r24, 0xC3	; 195
    3aa4:	9d 4f       	sbci	r25, 0xFD	; 253
    3aa6:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <readInputs>
    unsigned char numOfBytes = 0;
	unsigned char numOfItems = 0;
    unsigned char currentMode = SOUND_FAMILY,currentAction = NONE;
	BOOL endRecording = TRUE;
	unsigned char inputs[10];
	FRESULT openFiles[2] = {FR_INVALID_OBJECT,FR_INVALID_OBJECT};
    3aaa:	0f 2e       	mov	r0, r31
    3aac:	f9 e0       	ldi	r31, 0x09	; 9
    3aae:	3f 2e       	mov	r3, r31
    3ab0:	f0 2d       	mov	r31, r0
    unsigned char byteValue = 0;
	unsigned char listIndex = 0;
    unsigned char numOfBytes = 0;
	unsigned char numOfItems = 0;
    unsigned char currentMode = SOUND_FAMILY,currentAction = NONE;
	BOOL endRecording = TRUE;
    3ab2:	dd 24       	eor	r13, r13
    3ab4:	d3 94       	inc	r13
	char (*files)[MAX_FNAME];
    unsigned char byteValue = 0;
	unsigned char listIndex = 0;
    unsigned char numOfBytes = 0;
	unsigned char numOfItems = 0;
    unsigned char currentMode = SOUND_FAMILY,currentAction = NONE;
    3ab6:	ee 24       	eor	r14, r14
    3ab8:	ea 94       	dec	r14
    3aba:	f1 2c       	mov	r15, r1
{
    FATFS Fatfs;
	struct midiStruct mst,*pmst;
	char (*files)[MAX_FNAME];
    unsigned char byteValue = 0;
	unsigned char listIndex = 0;
    3abc:	c1 2c       	mov	r12, r1
					currentAction = NONE;
				}
			}
			else if(currentMode == MIDI_REC && endRecording == TRUE){
				if(getMicros() > microseconds){
					sendMidiBuffer(mst.midiEvent,mst.size);
    3abe:	83 e3       	ldi	r24, 0x33	; 51
    3ac0:	92 e0       	ldi	r25, 0x02	; 2
    3ac2:	8c 0f       	add	r24, r28
    3ac4:	9d 1f       	adc	r25, r29
    3ac6:	05 96       	adiw	r24, 0x05	; 5
    3ac8:	ca 58       	subi	r28, 0x8A	; 138
    3aca:	db 4f       	sbci	r29, 0xFB	; 251
    3acc:	99 83       	std	Y+1, r25	; 0x01
    3ace:	88 83       	st	Y, r24
    3ad0:	c6 57       	subi	r28, 0x76	; 118
    3ad2:	d4 40       	sbci	r29, 0x04	; 4
    3ad4:	68 94       	set
    3ad6:	bb 24       	eor	r11, r11
    3ad8:	b1 f8       	bld	r11, 1
					getNextEvent(&mf);
				}
				else{
					closeMIDIFile(&mf);
					lcdPrintData("Finished",8);
					currentAction = NONE;
    3ada:	aa 24       	eor	r10, r10
    3adc:	aa 94       	dec	r10
					case BUTTON2:	// play midi
						createFileList(files,".MID",&numOfItems);
						handleFileList(currentMode,currentAction,listIndex,numOfItems,files);
						break;
					case BUTTON3:	// record midi
									endRecording = !endRecording;
    3ade:	22 24       	eor	r2, r2
    3ae0:	23 94       	inc	r2
									else if(currentMode == SOUND_SELECT){
										lcdClear();
										lcdGotoXY(0,0);
										lcdPrintData("Selected: ",10);
										lcdGotoXY(0,1);
										lcdPrintData(fam.name,strlen(fam.name));
    3ae2:	87 e4       	ldi	r24, 0x47	; 71
    3ae4:	92 e0       	ldi	r25, 0x02	; 2
    3ae6:	8c 0f       	add	r24, r28
    3ae8:	9d 1f       	adc	r25, r29
    3aea:	02 96       	adiw	r24, 0x02	; 2
    3aec:	c8 58       	subi	r28, 0x88	; 136
    3aee:	db 4f       	sbci	r29, 0xFB	; 251
    3af0:	99 83       	std	Y+1, r25	; 0x01
    3af2:	88 83       	st	Y, r24
    3af4:	c8 57       	subi	r28, 0x78	; 120
    3af6:	d4 40       	sbci	r29, 0x04	; 4
	
	midiFileVolume(inputs[POT] / 2);
	readInputs(inputs);	
	
	while(1){						
			if((input = readInputs(inputs)) >= BUTTON0 && input <= JOY_PRESS){	
    3af8:	ce 01       	movw	r24, r28
    3afa:	83 5c       	subi	r24, 0xC3	; 195
    3afc:	9d 4f       	sbci	r25, 0xFD	; 253
    3afe:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <readInputs>
    3b02:	18 2f       	mov	r17, r24
    3b04:	89 30       	cpi	r24, 0x09	; 9
    3b06:	08 f0       	brcs	.+2      	; 0x3b0a <main+0x158>
    3b08:	82 c1       	rjmp	.+772    	; 0x3e0e <main+0x45c>
				lcdClear();
    3b0a:	0e 94 2a 1c 	call	0x3854	; 0x3854 <lcdClear>
				if(input >= BUTTON0 && input <= BUTTON3){
    3b0e:	14 30       	cpi	r17, 0x04	; 4
    3b10:	48 f4       	brcc	.+18     	; 0x3b24 <main+0x172>
					currentMode = input;
					currentAction = NONE;
					listIndex = 0;
					numOfItems = 0;					
    3b12:	c4 5c       	subi	r28, 0xC4	; 196
    3b14:	dd 4f       	sbci	r29, 0xFD	; 253
    3b16:	18 82       	st	Y, r1
    3b18:	cc 53       	subi	r28, 0x3C	; 60
    3b1a:	d2 40       	sbci	r29, 0x02	; 2
	
	while(1){						
			if((input = readInputs(inputs)) >= BUTTON0 && input <= JOY_PRESS){	
				lcdClear();
				if(input >= BUTTON0 && input <= BUTTON3){
					currentMode = input;
    3b1c:	f1 2e       	mov	r15, r17
					currentAction = NONE;
    3b1e:	ea 2c       	mov	r14, r10
					listIndex = 0;
    3b20:	c1 2c       	mov	r12, r1
    3b22:	05 c0       	rjmp	.+10     	; 0x3b2e <main+0x17c>
					numOfItems = 0;					
				}
				else if(input >= JOY_UP && input <= JOY_PRESS){
    3b24:	8c ef       	ldi	r24, 0xFC	; 252
    3b26:	81 0f       	add	r24, r17
    3b28:	85 30       	cpi	r24, 0x05	; 5
    3b2a:	08 f4       	brcc	.+2      	; 0x3b2e <main+0x17c>
					currentAction = input;
    3b2c:	e1 2e       	mov	r14, r17
				}
				switch(input){					
    3b2e:	13 30       	cpi	r17, 0x03	; 3
    3b30:	c1 f1       	breq	.+112    	; 0x3ba2 <main+0x1f0>
    3b32:	2c f4       	brge	.+10     	; 0x3b3e <main+0x18c>
    3b34:	11 23       	and	r17, r17
    3b36:	69 f0       	breq	.+26     	; 0x3b52 <main+0x1a0>
    3b38:	12 30       	cpi	r17, 0x02	; 2
    3b3a:	f9 f0       	breq	.+62     	; 0x3b7a <main+0x1c8>
    3b3c:	72 c1       	rjmp	.+740    	; 0x3e22 <main+0x470>
    3b3e:	16 30       	cpi	r17, 0x06	; 6
    3b40:	09 f4       	brne	.+2      	; 0x3b44 <main+0x192>
    3b42:	b8 c0       	rjmp	.+368    	; 0x3cb4 <main+0x302>
    3b44:	18 30       	cpi	r17, 0x08	; 8
    3b46:	09 f4       	brne	.+2      	; 0x3b4a <main+0x198>
    3b48:	e7 c0       	rjmp	.+462    	; 0x3d18 <main+0x366>
    3b4a:	14 30       	cpi	r17, 0x04	; 4
    3b4c:	09 f0       	breq	.+2      	; 0x3b50 <main+0x19e>
    3b4e:	69 c1       	rjmp	.+722    	; 0x3e22 <main+0x470>
    3b50:	82 c0       	rjmp	.+260    	; 0x3c56 <main+0x2a4>
					case BUTTON0:	// select sound family file						
						createFileList(files,".FAM",&numOfItems);
    3b52:	ae 01       	movw	r20, r28
    3b54:	44 5c       	subi	r20, 0xC4	; 196
    3b56:	5d 4f       	sbci	r21, 0xFD	; 253
    3b58:	68 e9       	ldi	r22, 0x98	; 152
    3b5a:	71 e0       	ldi	r23, 0x01	; 1
    3b5c:	c4 01       	movw	r24, r8
    3b5e:	0e 94 07 18 	call	0x300e	; 0x300e <createFileList>
						handleFileList(currentMode,currentAction,listIndex,numOfItems,files);					
    3b62:	84 01       	movw	r16, r8
    3b64:	c4 5c       	subi	r28, 0xC4	; 196
    3b66:	dd 4f       	sbci	r29, 0xFD	; 253
    3b68:	28 81       	ld	r18, Y
    3b6a:	cc 53       	subi	r28, 0x3C	; 60
    3b6c:	d2 40       	sbci	r29, 0x02	; 2
    3b6e:	4c 2d       	mov	r20, r12
    3b70:	6e 2d       	mov	r22, r14
    3b72:	8f 2d       	mov	r24, r15
    3b74:	0e 94 a8 19 	call	0x3350	; 0x3350 <handleFileList>
						break;						
    3b78:	54 c1       	rjmp	.+680    	; 0x3e22 <main+0x470>
					case BUTTON1:	//select sound from file
						
						break;						
					case BUTTON2:	// play midi
						createFileList(files,".MID",&numOfItems);
    3b7a:	ae 01       	movw	r20, r28
    3b7c:	44 5c       	subi	r20, 0xC4	; 196
    3b7e:	5d 4f       	sbci	r21, 0xFD	; 253
    3b80:	61 ea       	ldi	r22, 0xA1	; 161
    3b82:	71 e0       	ldi	r23, 0x01	; 1
    3b84:	c4 01       	movw	r24, r8
    3b86:	0e 94 07 18 	call	0x300e	; 0x300e <createFileList>
						handleFileList(currentMode,currentAction,listIndex,numOfItems,files);
    3b8a:	84 01       	movw	r16, r8
    3b8c:	c4 5c       	subi	r28, 0xC4	; 196
    3b8e:	dd 4f       	sbci	r29, 0xFD	; 253
    3b90:	28 81       	ld	r18, Y
    3b92:	cc 53       	subi	r28, 0x3C	; 60
    3b94:	d2 40       	sbci	r29, 0x02	; 2
    3b96:	4c 2d       	mov	r20, r12
    3b98:	6e 2d       	mov	r22, r14
    3b9a:	8f 2d       	mov	r24, r15
    3b9c:	0e 94 a8 19 	call	0x3350	; 0x3350 <handleFileList>
						break;
    3ba0:	40 c1       	rjmp	.+640    	; 0x3e22 <main+0x470>
					case BUTTON3:	// record midi
									endRecording = !endRecording;
    3ba2:	12 2d       	mov	r17, r2
    3ba4:	d1 10       	cpse	r13, r1
    3ba6:	10 e0       	ldi	r17, 0x00	; 0
									
									if(endRecording == FALSE){
    3ba8:	dd 20       	and	r13, r13
    3baa:	11 f1       	breq	.+68     	; 0x3bf0 <main+0x23e>
										SRAM_seekWrite(0,SEEK_SET);										
    3bac:	60 e0       	ldi	r22, 0x00	; 0
    3bae:	70 e0       	ldi	r23, 0x00	; 0
    3bb0:	80 e0       	ldi	r24, 0x00	; 0
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	0e 94 56 2d 	call	0x5aac	; 0x5aac <SRAM_seekWrite>
										f_open(&soundFile,"SONG.MID",FA_WRITE | FA_CREATE_ALWAYS);
    3bb8:	4a e0       	ldi	r20, 0x0A	; 10
    3bba:	6d e9       	ldi	r22, 0x9D	; 157
    3bbc:	71 e0       	ldi	r23, 0x01	; 1
    3bbe:	ce 01       	movw	r24, r28
    3bc0:	8a 5a       	subi	r24, 0xAA	; 170
    3bc2:	9b 4f       	sbci	r25, 0xFB	; 251
    3bc4:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <f_open>
										writeMidi(&soundFile);
    3bc8:	ce 01       	movw	r24, r28
    3bca:	8a 5a       	subi	r24, 0xAA	; 170
    3bcc:	9b 4f       	sbci	r25, 0xFB	; 251
    3bce:	0e 94 31 1a 	call	0x3462	; 0x3462 <writeMidi>
										lcdGotoXY(0,0);
    3bd2:	60 e0       	ldi	r22, 0x00	; 0
    3bd4:	80 e0       	ldi	r24, 0x00	; 0
    3bd6:	0e 94 2e 1c 	call	0x385c	; 0x385c <lcdGotoXY>
										lcdPrintData("Recording",9);
    3bda:	69 e0       	ldi	r22, 0x09	; 9
    3bdc:	86 ea       	ldi	r24, 0xA6	; 166
    3bde:	91 e0       	ldi	r25, 0x01	; 1
    3be0:	0e 94 be 1c 	call	0x397c	; 0x397c <lcdPrintData>
										microseconds = getMicros();
    3be4:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <getMicros>
    3be8:	2b 01       	movw	r4, r22
    3bea:	3c 01       	movw	r6, r24
					case BUTTON2:	// play midi
						createFileList(files,".MID",&numOfItems);
						handleFileList(currentMode,currentAction,listIndex,numOfItems,files);
						break;
					case BUTTON3:	// record midi
									endRecording = !endRecording;
    3bec:	d1 2e       	mov	r13, r17
    3bee:	19 c1       	rjmp	.+562    	; 0x3e22 <main+0x470>
										lcdGotoXY(0,0);
										lcdPrintData("Recording",9);
										microseconds = getMicros();
									}
									else{
										SRAM_seekRead(0,SEEK_SET);
    3bf0:	60 e0       	ldi	r22, 0x00	; 0
    3bf2:	70 e0       	ldi	r23, 0x00	; 0
    3bf4:	80 e0       	ldi	r24, 0x00	; 0
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	0e 94 e3 2c 	call	0x59c6	; 0x59c6 <SRAM_seekRead>
										readSRAM(((unsigned char *)&mst),sizeof(struct midiStruct));
    3bfc:	68 e0       	ldi	r22, 0x08	; 8
    3bfe:	70 e0       	ldi	r23, 0x00	; 0
    3c00:	ce 01       	movw	r24, r28
    3c02:	8d 5c       	subi	r24, 0xCD	; 205
    3c04:	9d 4f       	sbci	r25, 0xFD	; 253
    3c06:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <readSRAM>
										microseconds = getMicros() + mst.delta;
    3c0a:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <getMicros>
    3c0e:	cd 5c       	subi	r28, 0xCD	; 205
    3c10:	dd 4f       	sbci	r29, 0xFD	; 253
    3c12:	48 80       	ld	r4, Y
    3c14:	59 80       	ldd	r5, Y+1	; 0x01
    3c16:	6a 80       	ldd	r6, Y+2	; 0x02
    3c18:	7b 80       	ldd	r7, Y+3	; 0x03
    3c1a:	c3 53       	subi	r28, 0x33	; 51
    3c1c:	d2 40       	sbci	r29, 0x02	; 2
    3c1e:	46 0e       	add	r4, r22
    3c20:	57 1e       	adc	r5, r23
    3c22:	68 1e       	adc	r6, r24
    3c24:	79 1e       	adc	r7, r25
										lcdPrintData("Stopped",7);
    3c26:	67 e0       	ldi	r22, 0x07	; 7
    3c28:	80 eb       	ldi	r24, 0xB0	; 176
    3c2a:	91 e0       	ldi	r25, 0x01	; 1
    3c2c:	0e 94 be 1c 	call	0x397c	; 0x397c <lcdPrintData>
										f_write(&soundFile,"\x01\xFF\x2F\x00",4,&numOfBytes);
    3c30:	9e 01       	movw	r18, r28
    3c32:	25 5c       	subi	r18, 0xC5	; 197
    3c34:	3d 4f       	sbci	r19, 0xFD	; 253
    3c36:	44 e0       	ldi	r20, 0x04	; 4
    3c38:	50 e0       	ldi	r21, 0x00	; 0
    3c3a:	6b e7       	ldi	r22, 0x7B	; 123
    3c3c:	70 e0       	ldi	r23, 0x00	; 0
    3c3e:	ce 01       	movw	r24, r28
    3c40:	8a 5a       	subi	r24, 0xAA	; 170
    3c42:	9b 4f       	sbci	r25, 0xFB	; 251
    3c44:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <f_write>
										f_close(&soundFile);
    3c48:	ce 01       	movw	r24, r28
    3c4a:	8a 5a       	subi	r24, 0xAA	; 170
    3c4c:	9b 4f       	sbci	r25, 0xFB	; 251
    3c4e:	0e 94 e7 12 	call	0x25ce	; 0x25ce <f_close>
					case BUTTON2:	// play midi
						createFileList(files,".MID",&numOfItems);
						handleFileList(currentMode,currentAction,listIndex,numOfItems,files);
						break;
					case BUTTON3:	// record midi
									endRecording = !endRecording;
    3c52:	d1 2e       	mov	r13, r17
    3c54:	e6 c0       	rjmp	.+460    	; 0x3e22 <main+0x470>
										f_write(&soundFile,"\x01\xFF\x2F\x00",4,&numOfBytes);
										f_close(&soundFile);
										
									} 
									break;
					case JOY_UP:	if(listIndex > 0) listIndex--;
    3c56:	c1 10       	cpse	r12, r1
    3c58:	ca 94       	dec	r12
									if(currentMode == MIDI_PLAY || currentMode == SOUND_FAMILY)	
    3c5a:	8f 2d       	mov	r24, r15
    3c5c:	8d 7f       	andi	r24, 0xFD	; 253
    3c5e:	61 f4       	brne	.+24     	; 0x3c78 <main+0x2c6>
										handleFileList(currentMode,currentAction,listIndex,numOfItems,files);
    3c60:	84 01       	movw	r16, r8
    3c62:	c4 5c       	subi	r28, 0xC4	; 196
    3c64:	dd 4f       	sbci	r29, 0xFD	; 253
    3c66:	28 81       	ld	r18, Y
    3c68:	cc 53       	subi	r28, 0x3C	; 60
    3c6a:	d2 40       	sbci	r29, 0x02	; 2
    3c6c:	4c 2d       	mov	r20, r12
    3c6e:	6e 2d       	mov	r22, r14
    3c70:	8f 2d       	mov	r24, r15
    3c72:	0e 94 a8 19 	call	0x3350	; 0x3350 <handleFileList>
    3c76:	d5 c0       	rjmp	.+426    	; 0x3e22 <main+0x470>
									else if(currentMode == SOUND_SELECT){
    3c78:	91 e0       	ldi	r25, 0x01	; 1
    3c7a:	f9 12       	cpse	r15, r25
    3c7c:	f3 c0       	rjmp	.+486    	; 0x3e64 <main+0x4b2>
										handleSoundList(&soundFile,listIndex,numOfItems,&fam);
    3c7e:	9e 01       	movw	r18, r28
    3c80:	29 5b       	subi	r18, 0xB9	; 185
    3c82:	3d 4f       	sbci	r19, 0xFD	; 253
    3c84:	c4 5c       	subi	r28, 0xC4	; 196
    3c86:	dd 4f       	sbci	r29, 0xFD	; 253
    3c88:	48 81       	ld	r20, Y
    3c8a:	cc 53       	subi	r28, 0x3C	; 60
    3c8c:	d2 40       	sbci	r29, 0x02	; 2
    3c8e:	6c 2d       	mov	r22, r12
    3c90:	ce 01       	movw	r24, r28
    3c92:	8a 5a       	subi	r24, 0xAA	; 170
    3c94:	9b 4f       	sbci	r25, 0xFB	; 251
    3c96:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <handleSoundList>
										sendProgramChange(fam.bank,fam.prog);
    3c9a:	c8 5b       	subi	r28, 0xB8	; 184
    3c9c:	dd 4f       	sbci	r29, 0xFD	; 253
    3c9e:	68 81       	ld	r22, Y
    3ca0:	c8 54       	subi	r28, 0x48	; 72
    3ca2:	d2 40       	sbci	r29, 0x02	; 2
    3ca4:	c9 5b       	subi	r28, 0xB9	; 185
    3ca6:	dd 4f       	sbci	r29, 0xFD	; 253
    3ca8:	88 81       	ld	r24, Y
    3caa:	c7 54       	subi	r28, 0x47	; 71
    3cac:	d2 40       	sbci	r29, 0x02	; 2
    3cae:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <sendProgramChange>
    3cb2:	36 c1       	rjmp	.+620    	; 0x3f20 <main+0x56e>
									}
									break;
					case JOY_RIGHT:	break;
					case JOY_DOWN:	if(listIndex < (numOfItems - 1)) listIndex++;
    3cb4:	c4 5c       	subi	r28, 0xC4	; 196
    3cb6:	dd 4f       	sbci	r29, 0xFD	; 253
    3cb8:	48 81       	ld	r20, Y
    3cba:	cc 53       	subi	r28, 0x3C	; 60
    3cbc:	d2 40       	sbci	r29, 0x02	; 2
    3cbe:	2c 2d       	mov	r18, r12
    3cc0:	30 e0       	ldi	r19, 0x00	; 0
    3cc2:	84 2f       	mov	r24, r20
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	01 97       	sbiw	r24, 0x01	; 1
    3cc8:	28 17       	cp	r18, r24
    3cca:	39 07       	cpc	r19, r25
    3ccc:	0c f4       	brge	.+2      	; 0x3cd0 <main+0x31e>
    3cce:	c3 94       	inc	r12
									if(currentMode == MIDI_PLAY || currentMode == SOUND_FAMILY) 
    3cd0:	8f 2d       	mov	r24, r15
    3cd2:	8d 7f       	andi	r24, 0xFD	; 253
    3cd4:	41 f4       	brne	.+16     	; 0x3ce6 <main+0x334>
										handleFileList(currentMode,currentAction,listIndex,numOfItems,files);
    3cd6:	84 01       	movw	r16, r8
    3cd8:	24 2f       	mov	r18, r20
    3cda:	4c 2d       	mov	r20, r12
    3cdc:	6e 2d       	mov	r22, r14
    3cde:	8f 2d       	mov	r24, r15
    3ce0:	0e 94 a8 19 	call	0x3350	; 0x3350 <handleFileList>
    3ce4:	9e c0       	rjmp	.+316    	; 0x3e22 <main+0x470>
									else if(currentMode == SOUND_SELECT){
    3ce6:	81 e0       	ldi	r24, 0x01	; 1
    3ce8:	f8 12       	cpse	r15, r24
    3cea:	bc c0       	rjmp	.+376    	; 0x3e64 <main+0x4b2>
										handleSoundList(&soundFile,listIndex,numOfItems,&fam);
    3cec:	9e 01       	movw	r18, r28
    3cee:	29 5b       	subi	r18, 0xB9	; 185
    3cf0:	3d 4f       	sbci	r19, 0xFD	; 253
    3cf2:	6c 2d       	mov	r22, r12
    3cf4:	ce 01       	movw	r24, r28
    3cf6:	8a 5a       	subi	r24, 0xAA	; 170
    3cf8:	9b 4f       	sbci	r25, 0xFB	; 251
    3cfa:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <handleSoundList>
										sendProgramChange(fam.bank,fam.prog);
    3cfe:	c8 5b       	subi	r28, 0xB8	; 184
    3d00:	dd 4f       	sbci	r29, 0xFD	; 253
    3d02:	68 81       	ld	r22, Y
    3d04:	c8 54       	subi	r28, 0x48	; 72
    3d06:	d2 40       	sbci	r29, 0x02	; 2
    3d08:	c9 5b       	subi	r28, 0xB9	; 185
    3d0a:	dd 4f       	sbci	r29, 0xFD	; 253
    3d0c:	88 81       	ld	r24, Y
    3d0e:	c7 54       	subi	r28, 0x47	; 71
    3d10:	d2 40       	sbci	r29, 0x02	; 2
    3d12:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <sendProgramChange>
    3d16:	04 c1       	rjmp	.+520    	; 0x3f20 <main+0x56e>
									}
									break;
					case JOY_LEFT:	break;
					case JOY_PRESS:	if(currentMode == MIDI_PLAY)										
    3d18:	92 e0       	ldi	r25, 0x02	; 2
    3d1a:	f9 12       	cpse	r15, r25
    3d1c:	0c c0       	rjmp	.+24     	; 0x3d36 <main+0x384>
										setMidiFile(&mf,files[listIndex]);									
    3d1e:	b4 01       	movw	r22, r8
    3d20:	80 e1       	ldi	r24, 0x10	; 16
    3d22:	c8 9e       	mul	r12, r24
    3d24:	60 0d       	add	r22, r0
    3d26:	71 1d       	adc	r23, r1
    3d28:	11 24       	eor	r1, r1
    3d2a:	ce 01       	movw	r24, r28
    3d2c:	85 58       	subi	r24, 0x85	; 133
    3d2e:	9d 4f       	sbci	r25, 0xFD	; 253
    3d30:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <setMidiFile>
    3d34:	79 c0       	rjmp	.+242    	; 0x3e28 <main+0x476>
									else if(currentMode == SOUND_FAMILY){
    3d36:	f1 10       	cpse	r15, r1
    3d38:	39 c0       	rjmp	.+114    	; 0x3dac <main+0x3fa>
										if(openFiles[SOUND_FILE] == FR_OK){
    3d3a:	31 10       	cpse	r3, r1
    3d3c:	05 c0       	rjmp	.+10     	; 0x3d48 <main+0x396>
											f_close(&soundFile);
    3d3e:	ce 01       	movw	r24, r28
    3d40:	8a 5a       	subi	r24, 0xAA	; 170
    3d42:	9b 4f       	sbci	r25, 0xFB	; 251
    3d44:	0e 94 e7 12 	call	0x25ce	; 0x25ce <f_close>
											openFiles[SOUND_FILE] = FR_INVALID_OBJECT;
										}
										openFiles[SOUND_FILE] = setSoundFile(&soundFile,&fam,files[listIndex]);	// f_open
    3d48:	a4 01       	movw	r20, r8
    3d4a:	90 e1       	ldi	r25, 0x10	; 16
    3d4c:	c9 9e       	mul	r12, r25
    3d4e:	40 0d       	add	r20, r0
    3d50:	51 1d       	adc	r21, r1
    3d52:	11 24       	eor	r1, r1
    3d54:	be 01       	movw	r22, r28
    3d56:	69 5b       	subi	r22, 0xB9	; 185
    3d58:	7d 4f       	sbci	r23, 0xFD	; 253
    3d5a:	ce 01       	movw	r24, r28
    3d5c:	8a 5a       	subi	r24, 0xAA	; 170
    3d5e:	9b 4f       	sbci	r25, 0xFB	; 251
    3d60:	0e 94 92 18 	call	0x3124	; 0x3124 <setSoundFile>
    3d64:	38 2e       	mov	r3, r24
										createSoundList(&soundFile,&numOfItems);
    3d66:	be 01       	movw	r22, r28
    3d68:	64 5c       	subi	r22, 0xC4	; 196
    3d6a:	7d 4f       	sbci	r23, 0xFD	; 253
    3d6c:	ce 01       	movw	r24, r28
    3d6e:	8a 5a       	subi	r24, 0xAA	; 170
    3d70:	9b 4f       	sbci	r25, 0xFB	; 251
    3d72:	0e 94 c6 18 	call	0x318c	; 0x318c <createSoundList>
										handleSoundList(&soundFile,listIndex,numOfItems,&fam);
    3d76:	9e 01       	movw	r18, r28
    3d78:	29 5b       	subi	r18, 0xB9	; 185
    3d7a:	3d 4f       	sbci	r19, 0xFD	; 253
    3d7c:	c4 5c       	subi	r28, 0xC4	; 196
    3d7e:	dd 4f       	sbci	r29, 0xFD	; 253
    3d80:	48 81       	ld	r20, Y
    3d82:	cc 53       	subi	r28, 0x3C	; 60
    3d84:	d2 40       	sbci	r29, 0x02	; 2
    3d86:	6c 2d       	mov	r22, r12
    3d88:	ce 01       	movw	r24, r28
    3d8a:	8a 5a       	subi	r24, 0xAA	; 170
    3d8c:	9b 4f       	sbci	r25, 0xFB	; 251
    3d8e:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <handleSoundList>
										sendProgramChange(fam.bank,fam.prog);
    3d92:	c8 5b       	subi	r28, 0xB8	; 184
    3d94:	dd 4f       	sbci	r29, 0xFD	; 253
    3d96:	68 81       	ld	r22, Y
    3d98:	c8 54       	subi	r28, 0x48	; 72
    3d9a:	d2 40       	sbci	r29, 0x02	; 2
    3d9c:	c9 5b       	subi	r28, 0xB9	; 185
    3d9e:	dd 4f       	sbci	r29, 0xFD	; 253
    3da0:	88 81       	ld	r24, Y
    3da2:	c7 54       	subi	r28, 0x47	; 71
    3da4:	d2 40       	sbci	r29, 0x02	; 2
    3da6:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <sendProgramChange>
    3daa:	ba c0       	rjmp	.+372    	; 0x3f20 <main+0x56e>
										currentMode = SOUND_SELECT;																				
									}
									else if(currentMode == SOUND_SELECT){
    3dac:	81 e0       	ldi	r24, 0x01	; 1
    3dae:	f8 12       	cpse	r15, r24
    3db0:	59 c0       	rjmp	.+178    	; 0x3e64 <main+0x4b2>
										lcdClear();
    3db2:	0e 94 2a 1c 	call	0x3854	; 0x3854 <lcdClear>
										lcdGotoXY(0,0);
    3db6:	60 e0       	ldi	r22, 0x00	; 0
    3db8:	80 e0       	ldi	r24, 0x00	; 0
    3dba:	0e 94 2e 1c 	call	0x385c	; 0x385c <lcdGotoXY>
										lcdPrintData("Selected: ",10);
    3dbe:	6a e0       	ldi	r22, 0x0A	; 10
    3dc0:	88 eb       	ldi	r24, 0xB8	; 184
    3dc2:	91 e0       	ldi	r25, 0x01	; 1
    3dc4:	0e 94 be 1c 	call	0x397c	; 0x397c <lcdPrintData>
										lcdGotoXY(0,1);
    3dc8:	62 2d       	mov	r22, r2
    3dca:	80 e0       	ldi	r24, 0x00	; 0
    3dcc:	0e 94 2e 1c 	call	0x385c	; 0x385c <lcdGotoXY>
										lcdPrintData(fam.name,strlen(fam.name));
    3dd0:	c8 58       	subi	r28, 0x88	; 136
    3dd2:	db 4f       	sbci	r29, 0xFB	; 251
    3dd4:	e8 81       	ld	r30, Y
    3dd6:	f9 81       	ldd	r31, Y+1	; 0x01
    3dd8:	c8 57       	subi	r28, 0x78	; 120
    3dda:	d4 40       	sbci	r29, 0x04	; 4
    3ddc:	01 90       	ld	r0, Z+
    3dde:	00 20       	and	r0, r0
    3de0:	e9 f7       	brne	.-6      	; 0x3ddc <main+0x42a>
    3de2:	31 97       	sbiw	r30, 0x01	; 1
    3de4:	bf 01       	movw	r22, r30
    3de6:	c8 58       	subi	r28, 0x88	; 136
    3de8:	db 4f       	sbci	r29, 0xFB	; 251
    3dea:	88 81       	ld	r24, Y
    3dec:	99 81       	ldd	r25, Y+1	; 0x01
    3dee:	c8 57       	subi	r28, 0x78	; 120
    3df0:	d4 40       	sbci	r29, 0x04	; 4
    3df2:	68 1b       	sub	r22, r24
    3df4:	79 0b       	sbc	r23, r25
    3df6:	0e 94 be 1c 	call	0x397c	; 0x397c <lcdPrintData>
										f_close(&soundFile);
    3dfa:	ce 01       	movw	r24, r28
    3dfc:	8a 5a       	subi	r24, 0xAA	; 170
    3dfe:	9b 4f       	sbci	r25, 0xFB	; 251
    3e00:	0e 94 e7 12 	call	0x25ce	; 0x25ce <f_close>
										openFiles[SOUND_FILE] = FR_INVALID_OBJECT;
    3e04:	0f 2e       	mov	r0, r31
    3e06:	f9 e0       	ldi	r31, 0x09	; 9
    3e08:	3f 2e       	mov	r3, r31
    3e0a:	f0 2d       	mov	r31, r0
    3e0c:	89 c0       	rjmp	.+274    	; 0x3f20 <main+0x56e>
				//lcdGotoXY(0,1);
				//lcdPrintData(fam.name,strlen(fam.name));
				
				//_delay_ms(250);
			}
			else if(input == POT){
    3e0e:	89 30       	cpi	r24, 0x09	; 9
    3e10:	41 f4       	brne	.+16     	; 0x3e22 <main+0x470>
				midiFileVolume(inputs[POT] / 2);
    3e12:	ca 5b       	subi	r28, 0xBA	; 186
    3e14:	dd 4f       	sbci	r29, 0xFD	; 253
    3e16:	88 81       	ld	r24, Y
    3e18:	c6 54       	subi	r28, 0x46	; 70
    3e1a:	d2 40       	sbci	r29, 0x02	; 2
    3e1c:	86 95       	lsr	r24
    3e1e:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <midiFileVolume>
			}
			
			
			// >> process events
			if(currentMode == MIDI_PLAY && currentAction == JOY_PRESS){
    3e22:	92 e0       	ldi	r25, 0x02	; 2
    3e24:	f9 12       	cpse	r15, r25
    3e26:	1e c0       	rjmp	.+60     	; 0x3e64 <main+0x4b2>
    3e28:	88 e0       	ldi	r24, 0x08	; 8
    3e2a:	e8 12       	cpse	r14, r24
    3e2c:	4d c0       	rjmp	.+154    	; 0x3ec8 <main+0x516>
				if(!isEOF(&mf)){
    3e2e:	ce 01       	movw	r24, r28
    3e30:	85 58       	subi	r24, 0x85	; 133
    3e32:	9d 4f       	sbci	r25, 0xFD	; 253
    3e34:	0e 94 d6 20 	call	0x41ac	; 0x41ac <isEOF>
    3e38:	81 11       	cpse	r24, r1
    3e3a:	07 c0       	rjmp	.+14     	; 0x3e4a <main+0x498>
					getNextEvent(&mf);
    3e3c:	ce 01       	movw	r24, r28
    3e3e:	85 58       	subi	r24, 0x85	; 133
    3e40:	9d 4f       	sbci	r25, 0xFD	; 253
    3e42:	0e 94 9d 21 	call	0x433a	; 0x433a <getNextEvent>
    3e46:	fb 2c       	mov	r15, r11
    3e48:	40 c0       	rjmp	.+128    	; 0x3eca <main+0x518>
				}
				else{
					closeMIDIFile(&mf);
    3e4a:	ce 01       	movw	r24, r28
    3e4c:	85 58       	subi	r24, 0x85	; 133
    3e4e:	9d 4f       	sbci	r25, 0xFD	; 253
    3e50:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <closeMIDIFile>
					lcdPrintData("Finished",8);
    3e54:	68 e0       	ldi	r22, 0x08	; 8
    3e56:	83 ec       	ldi	r24, 0xC3	; 195
    3e58:	91 e0       	ldi	r25, 0x01	; 1
    3e5a:	0e 94 be 1c 	call	0x397c	; 0x397c <lcdPrintData>
    3e5e:	fb 2c       	mov	r15, r11
					currentAction = NONE;
    3e60:	ea 2c       	mov	r14, r10
    3e62:	33 c0       	rjmp	.+102    	; 0x3eca <main+0x518>
				}
			}
			else if(currentMode == MIDI_REC && endRecording == TRUE){
    3e64:	93 e0       	ldi	r25, 0x03	; 3
    3e66:	f9 12       	cpse	r15, r25
    3e68:	30 c0       	rjmp	.+96     	; 0x3eca <main+0x518>
    3e6a:	81 e0       	ldi	r24, 0x01	; 1
    3e6c:	d8 12       	cpse	r13, r24
    3e6e:	2d c0       	rjmp	.+90     	; 0x3eca <main+0x518>
				if(getMicros() > microseconds){
    3e70:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <getMicros>
    3e74:	46 16       	cp	r4, r22
    3e76:	57 06       	cpc	r5, r23
    3e78:	68 06       	cpc	r6, r24
    3e7a:	79 06       	cpc	r7, r25
    3e7c:	30 f5       	brcc	.+76     	; 0x3eca <main+0x518>
					sendMidiBuffer(mst.midiEvent,mst.size);
    3e7e:	c9 5c       	subi	r28, 0xC9	; 201
    3e80:	dd 4f       	sbci	r29, 0xFD	; 253
    3e82:	68 81       	ld	r22, Y
    3e84:	c7 53       	subi	r28, 0x37	; 55
    3e86:	d2 40       	sbci	r29, 0x02	; 2
    3e88:	ca 58       	subi	r28, 0x8A	; 138
    3e8a:	db 4f       	sbci	r29, 0xFB	; 251
    3e8c:	88 81       	ld	r24, Y
    3e8e:	99 81       	ldd	r25, Y+1	; 0x01
    3e90:	c6 57       	subi	r28, 0x76	; 118
    3e92:	d4 40       	sbci	r29, 0x04	; 4
    3e94:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <sendMidiBuffer>
					readSRAM(((unsigned char *)&mst),sizeof(struct midiStruct));
    3e98:	68 e0       	ldi	r22, 0x08	; 8
    3e9a:	70 e0       	ldi	r23, 0x00	; 0
    3e9c:	ce 01       	movw	r24, r28
    3e9e:	8d 5c       	subi	r24, 0xCD	; 205
    3ea0:	9d 4f       	sbci	r25, 0xFD	; 253
    3ea2:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <readSRAM>
					microseconds = getMicros() + mst.delta; 
    3ea6:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <getMicros>
    3eaa:	cd 5c       	subi	r28, 0xCD	; 205
    3eac:	dd 4f       	sbci	r29, 0xFD	; 253
    3eae:	08 81       	ld	r16, Y
    3eb0:	19 81       	ldd	r17, Y+1	; 0x01
    3eb2:	2a 81       	ldd	r18, Y+2	; 0x02
    3eb4:	3b 81       	ldd	r19, Y+3	; 0x03
    3eb6:	c3 53       	subi	r28, 0x33	; 51
    3eb8:	d2 40       	sbci	r29, 0x02	; 2
    3eba:	2b 01       	movw	r4, r22
    3ebc:	3c 01       	movw	r6, r24
    3ebe:	40 0e       	add	r4, r16
    3ec0:	51 1e       	adc	r5, r17
    3ec2:	62 1e       	adc	r6, r18
    3ec4:	73 1e       	adc	r7, r19
    3ec6:	01 c0       	rjmp	.+2      	; 0x3eca <main+0x518>
    3ec8:	fb 2c       	mov	r15, r11
				}
			}
			if(!uartReceiveBufferIsEmpty()){
    3eca:	0e 94 77 32 	call	0x64ee	; 0x64ee <uartReceiveBufferIsEmpty>
    3ece:	81 11       	cpse	r24, r1
    3ed0:	13 ce       	rjmp	.-986    	; 0x3af8 <main+0x146>
				byteValue = (unsigned char)uartGetByte();
    3ed2:	0e 94 5e 32 	call	0x64bc	; 0x64bc <uartGetByte>
				if(readMidiMessage(byteValue,&numOfBytes) == TRUE){
    3ed6:	be 01       	movw	r22, r28
    3ed8:	65 5c       	subi	r22, 0xC5	; 197
    3eda:	7d 4f       	sbci	r23, 0xFD	; 253
    3edc:	0e 94 6f 27 	call	0x4ede	; 0x4ede <readMidiMessage>
    3ee0:	81 30       	cpi	r24, 0x01	; 1
    3ee2:	09 f0       	breq	.+2      	; 0x3ee6 <main+0x534>
    3ee4:	09 ce       	rjmp	.-1006   	; 0x3af8 <main+0x146>
					sendMidiMessage(numOfBytes);
    3ee6:	c5 5c       	subi	r28, 0xC5	; 197
    3ee8:	dd 4f       	sbci	r29, 0xFD	; 253
    3eea:	88 81       	ld	r24, Y
    3eec:	cb 53       	subi	r28, 0x3B	; 59
    3eee:	d2 40       	sbci	r29, 0x02	; 2
    3ef0:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <sendMidiMessage>
					if(currentMode == MIDI_REC && endRecording == FALSE){
    3ef4:	93 e0       	ldi	r25, 0x03	; 3
    3ef6:	f9 12       	cpse	r15, r25
    3ef8:	ff cd       	rjmp	.-1026   	; 0x3af8 <main+0x146>
    3efa:	d1 10       	cpse	r13, r1
    3efc:	fd cd       	rjmp	.-1030   	; 0x3af8 <main+0x146>
						delta = (getMicros() - microseconds);
    3efe:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <getMicros>
						//WriteVarLen(&soundFile,delta);
						writeSRAM((unsigned char *)getMidiStruct(delta),sizeof(struct midiStruct));						
    3f02:	64 19       	sub	r22, r4
    3f04:	75 09       	sbc	r23, r5
    3f06:	86 09       	sbc	r24, r6
    3f08:	97 09       	sbc	r25, r7
    3f0a:	0e 94 04 27 	call	0x4e08	; 0x4e08 <getMidiStruct>
    3f0e:	68 e0       	ldi	r22, 0x08	; 8
    3f10:	70 e0       	ldi	r23, 0x00	; 0
    3f12:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <writeSRAM>
						microseconds = getMicros();
    3f16:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <getMicros>
    3f1a:	2b 01       	movw	r4, r22
    3f1c:	3c 01       	movw	r6, r24
    3f1e:	ec cd       	rjmp	.-1064   	; 0x3af8 <main+0x146>
    3f20:	f2 2c       	mov	r15, r2
    3f22:	d3 cf       	rjmp	.-90     	; 0x3eca <main+0x518>

00003f24 <setMidiHandler>:


const char * getFilename(struct MD_MIDIFile *m) 
{ 
	return(m->_fileName); 
}
    3f24:	fc 01       	movw	r30, r24
    3f26:	71 83       	std	Z+1, r23	; 0x01
    3f28:	60 83       	st	Z, r22
    3f2a:	08 95       	ret

00003f2c <setMetaHandler>:
    3f2c:	fc 01       	movw	r30, r24
    3f2e:	75 83       	std	Z+5, r23	; 0x05
    3f30:	64 83       	std	Z+4, r22	; 0x04
    3f32:	08 95       	ret

00003f34 <setSysexHandler>:
    3f34:	fc 01       	movw	r30, r24
    3f36:	73 83       	std	Z+3, r23	; 0x03
    3f38:	62 83       	std	Z+2, r22	; 0x02
    3f3a:	08 95       	ret

00003f3c <synchTracks>:
    3f3c:	0f 93       	push	r16
    3f3e:	1f 93       	push	r17
    3f40:	cf 93       	push	r28
    3f42:	df 93       	push	r29
    3f44:	8c 01       	movw	r16, r24
    3f46:	fc 01       	movw	r30, r24
    3f48:	84 a9       	ldd	r24, Z+52	; 0x34
    3f4a:	88 23       	and	r24, r24
    3f4c:	81 f0       	breq	.+32     	; 0x3f6e <synchTracks+0x32>
    3f4e:	c0 e0       	ldi	r28, 0x00	; 0
    3f50:	d9 e1       	ldi	r29, 0x19	; 25
    3f52:	c8 01       	movw	r24, r16
    3f54:	dc 9f       	mul	r29, r28
    3f56:	80 0d       	add	r24, r0
    3f58:	91 1d       	adc	r25, r1
    3f5a:	11 24       	eor	r1, r1
    3f5c:	85 5b       	subi	r24, 0xB5	; 181
    3f5e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f60:	0e 94 61 23 	call	0x46c2	; 0x46c2 <syncTime>
    3f64:	cf 5f       	subi	r28, 0xFF	; 255
    3f66:	f8 01       	movw	r30, r16
    3f68:	84 a9       	ldd	r24, Z+52	; 0x34
    3f6a:	c8 17       	cp	r28, r24
    3f6c:	90 f3       	brcs	.-28     	; 0x3f52 <synchTracks+0x16>
    3f6e:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <getMicros>
    3f72:	f8 01       	movw	r30, r16
    3f74:	fd 96       	adiw	r30, 0x3d	; 61
    3f76:	60 83       	st	Z, r22
    3f78:	71 83       	std	Z+1, r23	; 0x01
    3f7a:	82 83       	std	Z+2, r24	; 0x02
    3f7c:	93 83       	std	Z+3, r25	; 0x03
    3f7e:	df 91       	pop	r29
    3f80:	cf 91       	pop	r28
    3f82:	1f 91       	pop	r17
    3f84:	0f 91       	pop	r16
    3f86:	08 95       	ret

00003f88 <closeMIDIFile>:
    3f88:	0f 93       	push	r16
    3f8a:	1f 93       	push	r17
    3f8c:	cf 93       	push	r28
    3f8e:	df 93       	push	r29
    3f90:	8c 01       	movw	r16, r24
    3f92:	fc 01       	movw	r30, r24
    3f94:	84 a9       	ldd	r24, Z+52	; 0x34
    3f96:	88 23       	and	r24, r24
    3f98:	81 f0       	breq	.+32     	; 0x3fba <closeMIDIFile+0x32>
    3f9a:	c0 e0       	ldi	r28, 0x00	; 0
    3f9c:	d9 e1       	ldi	r29, 0x19	; 25
    3f9e:	c8 01       	movw	r24, r16
    3fa0:	dc 9f       	mul	r29, r28
    3fa2:	80 0d       	add	r24, r0
    3fa4:	91 1d       	adc	r25, r1
    3fa6:	11 24       	eor	r1, r1
    3fa8:	85 5b       	subi	r24, 0xB5	; 181
    3faa:	9f 4f       	sbci	r25, 0xFF	; 255
    3fac:	0e 94 84 23 	call	0x4708	; 0x4708 <closeTrack>
    3fb0:	cf 5f       	subi	r28, 0xFF	; 255
    3fb2:	f8 01       	movw	r30, r16
    3fb4:	84 a9       	ldd	r24, Z+52	; 0x34
    3fb6:	c8 17       	cp	r28, r24
    3fb8:	90 f3       	brcs	.-28     	; 0x3f9e <closeMIDIFile+0x16>
    3fba:	f8 01       	movw	r30, r16
    3fbc:	14 aa       	std	Z+52, r1	; 0x34
    3fbe:	ef 5b       	subi	r30, 0xBF	; 191
    3fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc2:	10 82       	st	Z, r1
    3fc4:	31 96       	adiw	r30, 0x01	; 1
    3fc6:	10 82       	st	Z, r1
    3fc8:	f8 01       	movw	r30, r16
    3fca:	16 a2       	std	Z+38, r1	; 0x26
    3fcc:	c8 01       	movw	r24, r16
    3fce:	06 96       	adiw	r24, 0x06	; 6
    3fd0:	0e 94 e7 12 	call	0x25ce	; 0x25ce <f_close>
    3fd4:	df 91       	pop	r29
    3fd6:	cf 91       	pop	r28
    3fd8:	1f 91       	pop	r17
    3fda:	0f 91       	pop	r16
    3fdc:	08 95       	ret

00003fde <calcTickTime>:
    3fde:	0f 93       	push	r16
    3fe0:	1f 93       	push	r17
    3fe2:	cf 93       	push	r28
    3fe4:	df 93       	push	r29
    3fe6:	ec 01       	movw	r28, r24
    3fe8:	dc 01       	movw	r26, r24
    3fea:	ac 5b       	subi	r26, 0xBC	; 188
    3fec:	bf 4f       	sbci	r27, 0xFF	; 255
    3fee:	fc 01       	movw	r30, r24
    3ff0:	ea 5b       	subi	r30, 0xBA	; 186
    3ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff4:	2d 91       	ld	r18, X+
    3ff6:	3c 91       	ld	r19, X
    3ff8:	80 81       	ld	r24, Z
    3ffa:	91 81       	ldd	r25, Z+1	; 0x01
    3ffc:	28 0f       	add	r18, r24
    3ffe:	39 1f       	adc	r19, r25
    4000:	21 15       	cp	r18, r1
    4002:	31 05       	cpc	r19, r1
    4004:	e1 f0       	breq	.+56     	; 0x403e <calcTickTime+0x60>
    4006:	0d a9       	ldd	r16, Y+53	; 0x35
    4008:	1e a9       	ldd	r17, Y+54	; 0x36
    400a:	01 15       	cp	r16, r1
    400c:	11 05       	cpc	r17, r1
    400e:	b9 f0       	breq	.+46     	; 0x403e <calcTickTime+0x60>
    4010:	33 96       	adiw	r30, 0x03	; 3
    4012:	80 81       	ld	r24, Z
    4014:	88 23       	and	r24, r24
    4016:	99 f0       	breq	.+38     	; 0x403e <calcTickTime+0x60>
    4018:	40 e0       	ldi	r20, 0x00	; 0
    401a:	50 e0       	ldi	r21, 0x00	; 0
    401c:	60 e0       	ldi	r22, 0x00	; 0
    401e:	77 e8       	ldi	r23, 0x87	; 135
    4020:	83 e9       	ldi	r24, 0x93	; 147
    4022:	93 e0       	ldi	r25, 0x03	; 3
    4024:	0e 94 30 33 	call	0x6660	; 0x6660 <__divmodsi4>
    4028:	ca 01       	movw	r24, r20
    402a:	b9 01       	movw	r22, r18
    402c:	98 01       	movw	r18, r16
    402e:	40 e0       	ldi	r20, 0x00	; 0
    4030:	50 e0       	ldi	r21, 0x00	; 0
    4032:	0e 94 0e 33 	call	0x661c	; 0x661c <__udivmodsi4>
    4036:	2f ab       	std	Y+55, r18	; 0x37
    4038:	38 af       	std	Y+56, r19	; 0x38
    403a:	49 af       	std	Y+57, r20	; 0x39
    403c:	5a af       	std	Y+58, r21	; 0x3a
    403e:	df 91       	pop	r29
    4040:	cf 91       	pop	r28
    4042:	1f 91       	pop	r17
    4044:	0f 91       	pop	r16
    4046:	08 95       	ret

00004048 <setTempoAdjust>:
    4048:	fc 01       	movw	r30, r24
    404a:	ec 5b       	subi	r30, 0xBC	; 188
    404c:	ff 4f       	sbci	r31, 0xFF	; 255
    404e:	20 81       	ld	r18, Z
    4050:	31 81       	ldd	r19, Z+1	; 0x01
    4052:	26 0f       	add	r18, r22
    4054:	37 1f       	adc	r19, r23
    4056:	23 2b       	or	r18, r19
    4058:	19 f0       	breq	.+6      	; 0x4060 <setTempoAdjust+0x18>
    405a:	32 96       	adiw	r30, 0x02	; 2
    405c:	71 83       	std	Z+1, r23	; 0x01
    405e:	60 83       	st	Z, r22
    4060:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <calcTickTime>
    4064:	08 95       	ret

00004066 <setTempo>:
    4066:	fc 01       	movw	r30, r24
    4068:	ea 5b       	subi	r30, 0xBA	; 186
    406a:	ff 4f       	sbci	r31, 0xFF	; 255
    406c:	20 81       	ld	r18, Z
    406e:	31 81       	ldd	r19, Z+1	; 0x01
    4070:	26 0f       	add	r18, r22
    4072:	37 1f       	adc	r19, r23
    4074:	23 2b       	or	r18, r19
    4076:	19 f0       	breq	.+6      	; 0x407e <setTempo+0x18>
    4078:	32 97       	sbiw	r30, 0x02	; 2
    407a:	71 83       	std	Z+1, r23	; 0x01
    407c:	60 83       	st	Z, r22
    407e:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <calcTickTime>
    4082:	08 95       	ret

00004084 <setTimeSignature>:
    4084:	fc 01       	movw	r30, r24
    4086:	e8 5b       	subi	r30, 0xB8	; 184
    4088:	ff 4f       	sbci	r31, 0xFF	; 255
    408a:	60 83       	st	Z, r22
    408c:	31 96       	adiw	r30, 0x01	; 1
    408e:	40 83       	st	Z, r20
    4090:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <calcTickTime>
    4094:	08 95       	ret

00004096 <setMicrosecondPerQuarterNote>:
    4096:	0f 93       	push	r16
    4098:	1f 93       	push	r17
    409a:	cf 93       	push	r28
    409c:	df 93       	push	r29
    409e:	ec 01       	movw	r28, r24
    40a0:	9a 01       	movw	r18, r20
    40a2:	ab 01       	movw	r20, r22
    40a4:	8c 01       	movw	r16, r24
    40a6:	0c 5b       	subi	r16, 0xBC	; 188
    40a8:	1f 4f       	sbci	r17, 0xFF	; 255
    40aa:	60 e0       	ldi	r22, 0x00	; 0
    40ac:	77 e8       	ldi	r23, 0x87	; 135
    40ae:	83 e9       	ldi	r24, 0x93	; 147
    40b0:	93 e0       	ldi	r25, 0x03	; 3
    40b2:	0e 94 0e 33 	call	0x661c	; 0x661c <__udivmodsi4>
    40b6:	f8 01       	movw	r30, r16
    40b8:	31 83       	std	Z+1, r19	; 0x01
    40ba:	20 83       	st	Z, r18
    40bc:	ce 01       	movw	r24, r28
    40be:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <calcTickTime>
    40c2:	df 91       	pop	r29
    40c4:	cf 91       	pop	r28
    40c6:	1f 91       	pop	r17
    40c8:	0f 91       	pop	r16
    40ca:	08 95       	ret

000040cc <initialise>:
    40cc:	cf 93       	push	r28
    40ce:	df 93       	push	r29
    40d0:	ec 01       	movw	r28, r24
    40d2:	1c aa       	std	Y+52, r1	; 0x34
    40d4:	1b aa       	std	Y+51, r1	; 0x33
    40d6:	1f aa       	std	Y+55, r1	; 0x37
    40d8:	18 ae       	std	Y+56, r1	; 0x38
    40da:	19 ae       	std	Y+57, r1	; 0x39
    40dc:	1a ae       	std	Y+58, r1	; 0x3a
    40de:	1c ae       	std	Y+60, r1	; 0x3c
    40e0:	1b ae       	std	Y+59, r1	; 0x3b
    40e2:	fc 01       	movw	r30, r24
    40e4:	ef 5b       	subi	r30, 0xBF	; 191
    40e6:	ff 4f       	sbci	r31, 0xFF	; 255
    40e8:	10 82       	st	Z, r1
    40ea:	32 96       	adiw	r30, 0x02	; 2
    40ec:	10 82       	st	Z, r1
    40ee:	31 97       	sbiw	r30, 0x01	; 1
    40f0:	10 82       	st	Z, r1
    40f2:	19 82       	std	Y+1, r1	; 0x01
    40f4:	18 82       	st	Y, r1
    40f6:	1b 82       	std	Y+3, r1	; 0x03
    40f8:	1a 82       	std	Y+2, r1	; 0x02
    40fa:	1d 82       	std	Y+5, r1	; 0x05
    40fc:	1c 82       	std	Y+4, r1	; 0x04
    40fe:	1e a2       	std	Y+38, r1	; 0x26
    4100:	80 e3       	ldi	r24, 0x30	; 48
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	9e ab       	std	Y+54, r25	; 0x36
    4106:	8d ab       	std	Y+53, r24	; 0x35
    4108:	ce 01       	movw	r24, r28
    410a:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <calcTickTime>
    410e:	68 e7       	ldi	r22, 0x78	; 120
    4110:	70 e0       	ldi	r23, 0x00	; 0
    4112:	ce 01       	movw	r24, r28
    4114:	0e 94 33 20 	call	0x4066	; 0x4066 <setTempo>
    4118:	60 e0       	ldi	r22, 0x00	; 0
    411a:	70 e0       	ldi	r23, 0x00	; 0
    411c:	ce 01       	movw	r24, r28
    411e:	0e 94 24 20 	call	0x4048	; 0x4048 <setTempoAdjust>
    4122:	fe 01       	movw	r30, r28
    4124:	ec 5b       	subi	r30, 0xBC	; 188
    4126:	ff 4f       	sbci	r31, 0xFF	; 255
    4128:	88 e7       	ldi	r24, 0x78	; 120
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	91 83       	std	Z+1, r25	; 0x01
    412e:	80 83       	st	Z, r24
    4130:	ce 01       	movw	r24, r28
    4132:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <calcTickTime>
    4136:	fe 01       	movw	r30, r28
    4138:	e8 5b       	subi	r30, 0xB8	; 184
    413a:	ff 4f       	sbci	r31, 0xFF	; 255
    413c:	84 e0       	ldi	r24, 0x04	; 4
    413e:	80 83       	st	Z, r24
    4140:	31 96       	adiw	r30, 0x01	; 1
    4142:	80 83       	st	Z, r24
    4144:	ce 01       	movw	r24, r28
    4146:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <calcTickTime>
    414a:	df 91       	pop	r29
    414c:	cf 91       	pop	r28
    414e:	08 95       	ret

00004150 <restart>:
    4150:	0f 93       	push	r16
    4152:	1f 93       	push	r17
    4154:	cf 93       	push	r28
    4156:	df 93       	push	r29
    4158:	8c 01       	movw	r16, r24
    415a:	fc 01       	movw	r30, r24
    415c:	ed 5b       	subi	r30, 0xBD	; 189
    415e:	ff 4f       	sbci	r31, 0xFF	; 255
    4160:	80 81       	ld	r24, Z
    4162:	88 23       	and	r24, r24
    4164:	21 f0       	breq	.+8      	; 0x416e <restart+0x1e>
    4166:	f8 01       	movw	r30, r16
    4168:	84 a9       	ldd	r24, Z+52	; 0x34
    416a:	82 30       	cpi	r24, 0x02	; 2
    416c:	30 f4       	brcc	.+12     	; 0x417a <restart+0x2a>
    416e:	f8 01       	movw	r30, r16
    4170:	84 a9       	ldd	r24, Z+52	; 0x34
    4172:	88 23       	and	r24, r24
    4174:	91 f0       	breq	.+36     	; 0x419a <restart+0x4a>
    4176:	c0 e0       	ldi	r28, 0x00	; 0
    4178:	01 c0       	rjmp	.+2      	; 0x417c <restart+0x2c>
    417a:	c1 e0       	ldi	r28, 0x01	; 1
    417c:	d9 e1       	ldi	r29, 0x19	; 25
    417e:	c8 01       	movw	r24, r16
    4180:	dc 9f       	mul	r29, r28
    4182:	80 0d       	add	r24, r0
    4184:	91 1d       	adc	r25, r1
    4186:	11 24       	eor	r1, r1
    4188:	85 5b       	subi	r24, 0xB5	; 181
    418a:	9f 4f       	sbci	r25, 0xFF	; 255
    418c:	0e 94 67 23 	call	0x46ce	; 0x46ce <restartTrack>
    4190:	cf 5f       	subi	r28, 0xFF	; 255
    4192:	f8 01       	movw	r30, r16
    4194:	84 a9       	ldd	r24, Z+52	; 0x34
    4196:	c8 17       	cp	r28, r24
    4198:	90 f3       	brcs	.-28     	; 0x417e <restart+0x2e>
    419a:	f8 01       	movw	r30, r16
    419c:	ef 5b       	subi	r30, 0xBF	; 191
    419e:	ff 4f       	sbci	r31, 0xFF	; 255
    41a0:	10 82       	st	Z, r1
    41a2:	df 91       	pop	r29
    41a4:	cf 91       	pop	r28
    41a6:	1f 91       	pop	r17
    41a8:	0f 91       	pop	r16
    41aa:	08 95       	ret

000041ac <isEOF>:
    41ac:	0f 93       	push	r16
    41ae:	1f 93       	push	r17
    41b0:	cf 93       	push	r28
    41b2:	df 93       	push	r29
    41b4:	8c 01       	movw	r16, r24
    41b6:	fc 01       	movw	r30, r24
    41b8:	84 a9       	ldd	r24, Z+52	; 0x34
    41ba:	88 23       	and	r24, r24
    41bc:	71 f0       	breq	.+28     	; 0x41da <isEOF+0x2e>
    41be:	c0 e0       	ldi	r28, 0x00	; 0
    41c0:	d9 e1       	ldi	r29, 0x19	; 25
    41c2:	c8 01       	movw	r24, r16
    41c4:	dc 9f       	mul	r29, r28
    41c6:	80 0d       	add	r24, r0
    41c8:	91 1d       	adc	r25, r1
    41ca:	11 24       	eor	r1, r1
    41cc:	85 5b       	subi	r24, 0xB5	; 181
    41ce:	9f 4f       	sbci	r25, 0xFF	; 255
    41d0:	0e 94 5e 23 	call	0x46bc	; 0x46bc <getEndOfTrack>
    41d4:	81 11       	cpse	r24, r1
    41d6:	0e c0       	rjmp	.+28     	; 0x41f4 <isEOF+0x48>
    41d8:	13 c0       	rjmp	.+38     	; 0x4200 <isEOF+0x54>
    41da:	f8 01       	movw	r30, r16
    41dc:	ed 5b       	subi	r30, 0xBD	; 189
    41de:	ff 4f       	sbci	r31, 0xFF	; 255
    41e0:	80 81       	ld	r24, Z
    41e2:	88 23       	and	r24, r24
    41e4:	29 f0       	breq	.+10     	; 0x41f0 <isEOF+0x44>
    41e6:	c8 01       	movw	r24, r16
    41e8:	0e 94 a8 20 	call	0x4150	; 0x4150 <restart>
    41ec:	80 e0       	ldi	r24, 0x00	; 0
    41ee:	08 c0       	rjmp	.+16     	; 0x4200 <isEOF+0x54>
    41f0:	81 e0       	ldi	r24, 0x01	; 1
    41f2:	06 c0       	rjmp	.+12     	; 0x4200 <isEOF+0x54>
    41f4:	cf 5f       	subi	r28, 0xFF	; 255
    41f6:	f8 01       	movw	r30, r16
    41f8:	84 a9       	ldd	r24, Z+52	; 0x34
    41fa:	c8 17       	cp	r28, r24
    41fc:	10 f3       	brcs	.-60     	; 0x41c2 <isEOF+0x16>
    41fe:	ed cf       	rjmp	.-38     	; 0x41da <isEOF+0x2e>
    4200:	df 91       	pop	r29
    4202:	cf 91       	pop	r28
    4204:	1f 91       	pop	r17
    4206:	0f 91       	pop	r16
    4208:	08 95       	ret

0000420a <tickClock>:
    420a:	8f 92       	push	r8
    420c:	9f 92       	push	r9
    420e:	af 92       	push	r10
    4210:	bf 92       	push	r11
    4212:	cf 92       	push	r12
    4214:	df 92       	push	r13
    4216:	ef 92       	push	r14
    4218:	ff 92       	push	r15
    421a:	0f 93       	push	r16
    421c:	1f 93       	push	r17
    421e:	cf 93       	push	r28
    4220:	df 93       	push	r29
    4222:	ec 01       	movw	r28, r24
    4224:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <getMicros>
    4228:	2b ad       	ldd	r18, Y+59	; 0x3b
    422a:	3c ad       	ldd	r19, Y+60	; 0x3c
    422c:	69 01       	movw	r12, r18
    422e:	e1 2c       	mov	r14, r1
    4230:	f1 2c       	mov	r15, r1
    4232:	fe 01       	movw	r30, r28
    4234:	fd 96       	adiw	r30, 0x3d	; 61
    4236:	00 81       	ld	r16, Z
    4238:	11 81       	ldd	r17, Z+1	; 0x01
    423a:	22 81       	ldd	r18, Z+2	; 0x02
    423c:	33 81       	ldd	r19, Z+3	; 0x03
    423e:	46 01       	movw	r8, r12
    4240:	57 01       	movw	r10, r14
    4242:	80 1a       	sub	r8, r16
    4244:	91 0a       	sbc	r9, r17
    4246:	a2 0a       	sbc	r10, r18
    4248:	b3 0a       	sbc	r11, r19
    424a:	75 01       	movw	r14, r10
    424c:	64 01       	movw	r12, r8
    424e:	c6 0e       	add	r12, r22
    4250:	d7 1e       	adc	r13, r23
    4252:	e8 1e       	adc	r14, r24
    4254:	f9 1e       	adc	r15, r25
    4256:	8f a8       	ldd	r8, Y+55	; 0x37
    4258:	98 ac       	ldd	r9, Y+56	; 0x38
    425a:	a9 ac       	ldd	r10, Y+57	; 0x39
    425c:	ba ac       	ldd	r11, Y+58	; 0x3a
    425e:	c8 14       	cp	r12, r8
    4260:	d9 04       	cpc	r13, r9
    4262:	ea 04       	cpc	r14, r10
    4264:	fb 04       	cpc	r15, r11
    4266:	d8 f0       	brcs	.+54     	; 0x429e <tickClock+0x94>
    4268:	c7 01       	movw	r24, r14
    426a:	b6 01       	movw	r22, r12
    426c:	a5 01       	movw	r20, r10
    426e:	94 01       	movw	r18, r8
    4270:	0e 94 0e 33 	call	0x661c	; 0x661c <__udivmodsi4>
    4274:	89 01       	movw	r16, r18
    4276:	28 9d       	mul	r18, r8
    4278:	c0 01       	movw	r24, r0
    427a:	29 9d       	mul	r18, r9
    427c:	90 0d       	add	r25, r0
    427e:	38 9d       	mul	r19, r8
    4280:	90 0d       	add	r25, r0
    4282:	11 24       	eor	r1, r1
    4284:	56 01       	movw	r10, r12
    4286:	a8 1a       	sub	r10, r24
    4288:	b9 0a       	sbc	r11, r25
    428a:	bc ae       	std	Y+60, r11	; 0x3c
    428c:	ab ae       	std	Y+59, r10	; 0x3b
    428e:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <getMicros>
    4292:	ed 96       	adiw	r28, 0x3d	; 61
    4294:	68 83       	st	Y, r22
    4296:	79 83       	std	Y+1, r23	; 0x01
    4298:	8a 83       	std	Y+2, r24	; 0x02
    429a:	9b 83       	std	Y+3, r25	; 0x03
    429c:	02 c0       	rjmp	.+4      	; 0x42a2 <tickClock+0x98>
    429e:	00 e0       	ldi	r16, 0x00	; 0
    42a0:	10 e0       	ldi	r17, 0x00	; 0
    42a2:	c8 01       	movw	r24, r16
    42a4:	df 91       	pop	r29
    42a6:	cf 91       	pop	r28
    42a8:	1f 91       	pop	r17
    42aa:	0f 91       	pop	r16
    42ac:	ff 90       	pop	r15
    42ae:	ef 90       	pop	r14
    42b0:	df 90       	pop	r13
    42b2:	cf 90       	pop	r12
    42b4:	bf 90       	pop	r11
    42b6:	af 90       	pop	r10
    42b8:	9f 90       	pop	r9
    42ba:	8f 90       	pop	r8
    42bc:	08 95       	ret

000042be <processEvents>:
    42be:	af 92       	push	r10
    42c0:	bf 92       	push	r11
    42c2:	cf 92       	push	r12
    42c4:	df 92       	push	r13
    42c6:	ef 92       	push	r14
    42c8:	ff 92       	push	r15
    42ca:	0f 93       	push	r16
    42cc:	1f 93       	push	r17
    42ce:	cf 93       	push	r28
    42d0:	df 93       	push	r29
    42d2:	c0 e0       	ldi	r28, 0x00	; 0
    42d4:	fc 01       	movw	r30, r24
    42d6:	24 a9       	ldd	r18, Z+52	; 0x34
    42d8:	22 23       	and	r18, r18
    42da:	21 f1       	breq	.+72     	; 0x4324 <processEvents+0x66>
    42dc:	7b 01       	movw	r14, r22
    42de:	8c 01       	movw	r16, r24
    42e0:	d0 e0       	ldi	r29, 0x00	; 0
    42e2:	0f 2e       	mov	r0, r31
    42e4:	f9 e1       	ldi	r31, 0x19	; 25
    42e6:	df 2e       	mov	r13, r31
    42e8:	f0 2d       	mov	r31, r0
    42ea:	bb 24       	eor	r11, r11
    42ec:	b3 94       	inc	r11
    42ee:	cc 24       	eor	r12, r12
    42f0:	c3 94       	inc	r12
    42f2:	a1 2c       	mov	r10, r1
    42f4:	b8 01       	movw	r22, r16
    42f6:	dd 9e       	mul	r13, r29
    42f8:	60 0d       	add	r22, r0
    42fa:	71 1d       	adc	r23, r1
    42fc:	11 24       	eor	r1, r1
    42fe:	65 5b       	subi	r22, 0xB5	; 181
    4300:	7f 4f       	sbci	r23, 0xFF	; 255
    4302:	a7 01       	movw	r20, r14
    4304:	c8 01       	movw	r24, r16
    4306:	0e 94 10 26 	call	0x4c20	; 0x4c20 <getNextTrackEvent>
    430a:	c1 11       	cpse	r28, r1
    430c:	05 c0       	rjmp	.+10     	; 0x4318 <processEvents+0x5a>
    430e:	cc 2d       	mov	r28, r12
    4310:	81 11       	cpse	r24, r1
    4312:	03 c0       	rjmp	.+6      	; 0x431a <processEvents+0x5c>
    4314:	ca 2d       	mov	r28, r10
    4316:	01 c0       	rjmp	.+2      	; 0x431a <processEvents+0x5c>
    4318:	cb 2d       	mov	r28, r11
    431a:	df 5f       	subi	r29, 0xFF	; 255
    431c:	f8 01       	movw	r30, r16
    431e:	84 a9       	ldd	r24, Z+52	; 0x34
    4320:	d8 17       	cp	r29, r24
    4322:	40 f3       	brcs	.-48     	; 0x42f4 <processEvents+0x36>
    4324:	df 91       	pop	r29
    4326:	cf 91       	pop	r28
    4328:	1f 91       	pop	r17
    432a:	0f 91       	pop	r16
    432c:	ff 90       	pop	r15
    432e:	ef 90       	pop	r14
    4330:	df 90       	pop	r13
    4332:	cf 90       	pop	r12
    4334:	bf 90       	pop	r11
    4336:	af 90       	pop	r10
    4338:	08 95       	ret

0000433a <getNextEvent>:
    433a:	0f 93       	push	r16
    433c:	1f 93       	push	r17
    433e:	cf 93       	push	r28
    4340:	fc 01       	movw	r30, r24
    4342:	ee 5b       	subi	r30, 0xBE	; 190
    4344:	ff 4f       	sbci	r31, 0xFF	; 255
    4346:	c0 81       	ld	r28, Z
    4348:	c1 11       	cpse	r28, r1
    434a:	18 c0       	rjmp	.+48     	; 0x437c <getNextEvent+0x42>
    434c:	8c 01       	movw	r16, r24
    434e:	31 97       	sbiw	r30, 0x01	; 1
    4350:	80 81       	ld	r24, Z
    4352:	81 11       	cpse	r24, r1
    4354:	08 c0       	rjmp	.+16     	; 0x4366 <getNextEvent+0x2c>
    4356:	c8 01       	movw	r24, r16
    4358:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <synchTracks>
    435c:	81 e0       	ldi	r24, 0x01	; 1
    435e:	f8 01       	movw	r30, r16
    4360:	ef 5b       	subi	r30, 0xBF	; 191
    4362:	ff 4f       	sbci	r31, 0xFF	; 255
    4364:	80 83       	st	Z, r24
    4366:	c8 01       	movw	r24, r16
    4368:	0e 94 05 21 	call	0x420a	; 0x420a <tickClock>
    436c:	00 97       	sbiw	r24, 0x00	; 0
    436e:	39 f0       	breq	.+14     	; 0x437e <getNextEvent+0x44>
    4370:	bc 01       	movw	r22, r24
    4372:	c8 01       	movw	r24, r16
    4374:	0e 94 5f 21 	call	0x42be	; 0x42be <processEvents>
    4378:	c1 e0       	ldi	r28, 0x01	; 1
    437a:	01 c0       	rjmp	.+2      	; 0x437e <getNextEvent+0x44>
    437c:	c0 e0       	ldi	r28, 0x00	; 0
    437e:	8c 2f       	mov	r24, r28
    4380:	cf 91       	pop	r28
    4382:	1f 91       	pop	r17
    4384:	0f 91       	pop	r16
    4386:	08 95       	ret

00004388 <loadMIDIFile>:
    4388:	8f 92       	push	r8
    438a:	9f 92       	push	r9
    438c:	af 92       	push	r10
    438e:	bf 92       	push	r11
    4390:	cf 92       	push	r12
    4392:	df 92       	push	r13
    4394:	ef 92       	push	r14
    4396:	ff 92       	push	r15
    4398:	0f 93       	push	r16
    439a:	1f 93       	push	r17
    439c:	cf 93       	push	r28
    439e:	df 93       	push	r29
    43a0:	cd b7       	in	r28, 0x3d	; 61
    43a2:	de b7       	in	r29, 0x3e	; 62
    43a4:	29 97       	sbiw	r28, 0x09	; 9
    43a6:	0f b6       	in	r0, 0x3f	; 63
    43a8:	f8 94       	cli
    43aa:	de bf       	out	0x3e, r29	; 62
    43ac:	0f be       	out	0x3f, r0	; 63
    43ae:	cd bf       	out	0x3d, r28	; 61
    43b0:	fc 01       	movw	r30, r24
    43b2:	26 a1       	ldd	r18, Z+38	; 0x26
    43b4:	22 23       	and	r18, r18
    43b6:	09 f4       	brne	.+2      	; 0x43ba <loadMIDIFile+0x32>
    43b8:	d0 c0       	rjmp	.+416    	; 0x455a <loadMIDIFile+0x1d2>
    43ba:	8c 01       	movw	r16, r24
    43bc:	6c 01       	movw	r12, r24
    43be:	f6 e0       	ldi	r31, 0x06	; 6
    43c0:	cf 0e       	add	r12, r31
    43c2:	d1 1c       	adc	r13, r1
    43c4:	bc 01       	movw	r22, r24
    43c6:	6a 5d       	subi	r22, 0xDA	; 218
    43c8:	7f 4f       	sbci	r23, 0xFF	; 255
    43ca:	41 e0       	ldi	r20, 0x01	; 1
    43cc:	c6 01       	movw	r24, r12
    43ce:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <f_open>
    43d2:	81 11       	cpse	r24, r1
    43d4:	c5 c0       	rjmp	.+394    	; 0x4560 <loadMIDIFile+0x1d8>
    43d6:	9e 01       	movw	r18, r28
    43d8:	2f 5f       	subi	r18, 0xFF	; 255
    43da:	3f 4f       	sbci	r19, 0xFF	; 255
    43dc:	44 e0       	ldi	r20, 0x04	; 4
    43de:	50 e0       	ldi	r21, 0x00	; 0
    43e0:	be 01       	movw	r22, r28
    43e2:	6b 5f       	subi	r22, 0xFB	; 251
    43e4:	7f 4f       	sbci	r23, 0xFF	; 255
    43e6:	c6 01       	movw	r24, r12
    43e8:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <f_read>
    43ec:	19 86       	std	Y+9, r1	; 0x09
    43ee:	6c ec       	ldi	r22, 0xCC	; 204
    43f0:	71 e0       	ldi	r23, 0x01	; 1
    43f2:	ce 01       	movw	r24, r28
    43f4:	05 96       	adiw	r24, 0x05	; 5
    43f6:	0e 94 90 34 	call	0x6920	; 0x6920 <strcmp>
    43fa:	89 2b       	or	r24, r25
    43fc:	31 f0       	breq	.+12     	; 0x440a <loadMIDIFile+0x82>
    43fe:	c6 01       	movw	r24, r12
    4400:	0e 94 e7 12 	call	0x25ce	; 0x25ce <f_close>
    4404:	83 e0       	ldi	r24, 0x03	; 3
    4406:	90 e0       	ldi	r25, 0x00	; 0
    4408:	b0 c0       	rjmp	.+352    	; 0x456a <loadMIDIFile+0x1e2>
    440a:	64 e0       	ldi	r22, 0x04	; 4
    440c:	c6 01       	movw	r24, r12
    440e:	0e 94 cf 22 	call	0x459e	; 0x459e <readMultiByte>
    4412:	69 83       	std	Y+1, r22	; 0x01
    4414:	7a 83       	std	Y+2, r23	; 0x02
    4416:	8b 83       	std	Y+3, r24	; 0x03
    4418:	9c 83       	std	Y+4, r25	; 0x04
    441a:	66 30       	cpi	r22, 0x06	; 6
    441c:	71 05       	cpc	r23, r1
    441e:	81 05       	cpc	r24, r1
    4420:	91 05       	cpc	r25, r1
    4422:	31 f0       	breq	.+12     	; 0x4430 <loadMIDIFile+0xa8>
    4424:	c6 01       	movw	r24, r12
    4426:	0e 94 e7 12 	call	0x25ce	; 0x25ce <f_close>
    442a:	84 e0       	ldi	r24, 0x04	; 4
    442c:	90 e0       	ldi	r25, 0x00	; 0
    442e:	9d c0       	rjmp	.+314    	; 0x456a <loadMIDIFile+0x1e2>
    4430:	62 e0       	ldi	r22, 0x02	; 2
    4432:	c6 01       	movw	r24, r12
    4434:	0e 94 cf 22 	call	0x459e	; 0x459e <readMultiByte>
    4438:	62 30       	cpi	r22, 0x02	; 2
    443a:	71 05       	cpc	r23, r1
    443c:	30 f0       	brcs	.+12     	; 0x444a <loadMIDIFile+0xc2>
    443e:	c6 01       	movw	r24, r12
    4440:	0e 94 e7 12 	call	0x25ce	; 0x25ce <f_close>
    4444:	85 e0       	ldi	r24, 0x05	; 5
    4446:	90 e0       	ldi	r25, 0x00	; 0
    4448:	90 c0       	rjmp	.+288    	; 0x456a <loadMIDIFile+0x1e2>
    444a:	f8 01       	movw	r30, r16
    444c:	63 ab       	std	Z+51, r22	; 0x33
    444e:	62 e0       	ldi	r22, 0x02	; 2
    4450:	c6 01       	movw	r24, r12
    4452:	0e 94 cf 22 	call	0x459e	; 0x459e <readMultiByte>
    4456:	27 2f       	mov	r18, r23
    4458:	86 2f       	mov	r24, r22
    445a:	92 2f       	mov	r25, r18
    445c:	f8 01       	movw	r30, r16
    445e:	23 a9       	ldd	r18, Z+51	; 0x33
    4460:	21 11       	cpse	r18, r1
    4462:	08 c0       	rjmp	.+16     	; 0x4474 <loadMIDIFile+0xec>
    4464:	01 97       	sbiw	r24, 0x01	; 1
    4466:	71 f0       	breq	.+28     	; 0x4484 <loadMIDIFile+0xfc>
    4468:	c6 01       	movw	r24, r12
    446a:	0e 94 e7 12 	call	0x25ce	; 0x25ce <f_close>
    446e:	86 e0       	ldi	r24, 0x06	; 6
    4470:	90 e0       	ldi	r25, 0x00	; 0
    4472:	7b c0       	rjmp	.+246    	; 0x456a <loadMIDIFile+0x1e2>
    4474:	41 97       	sbiw	r24, 0x11	; 17
    4476:	30 f0       	brcs	.+12     	; 0x4484 <loadMIDIFile+0xfc>
    4478:	c6 01       	movw	r24, r12
    447a:	0e 94 e7 12 	call	0x25ce	; 0x25ce <f_close>
    447e:	87 e0       	ldi	r24, 0x07	; 7
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	73 c0       	rjmp	.+230    	; 0x456a <loadMIDIFile+0x1e2>
    4484:	f8 01       	movw	r30, r16
    4486:	64 ab       	std	Z+52, r22	; 0x34
    4488:	62 e0       	ldi	r22, 0x02	; 2
    448a:	c6 01       	movw	r24, r12
    448c:	0e 94 cf 22 	call	0x459e	; 0x459e <readMultiByte>
    4490:	ab 01       	movw	r20, r22
    4492:	77 23       	and	r23, r23
    4494:	54 f5       	brge	.+84     	; 0x44ea <loadMIDIFile+0x162>
    4496:	27 2f       	mov	r18, r23
    4498:	33 27       	eor	r19, r19
    449a:	23 3e       	cpi	r18, 0xE3	; 227
    449c:	31 05       	cpc	r19, r1
    449e:	d9 f0       	breq	.+54     	; 0x44d6 <loadMIDIFile+0x14e>
    44a0:	20 f4       	brcc	.+8      	; 0x44aa <loadMIDIFile+0x122>
    44a2:	22 3e       	cpi	r18, 0xE2	; 226
    44a4:	31 05       	cpc	r19, r1
    44a6:	59 f0       	breq	.+22     	; 0x44be <loadMIDIFile+0x136>
    44a8:	0d c0       	rjmp	.+26     	; 0x44c4 <loadMIDIFile+0x13c>
    44aa:	27 3e       	cpi	r18, 0xE7	; 231
    44ac:	31 05       	cpc	r19, r1
    44ae:	21 f0       	breq	.+8      	; 0x44b8 <loadMIDIFile+0x130>
    44b0:	28 3e       	cpi	r18, 0xE8	; 232
    44b2:	31 05       	cpc	r19, r1
    44b4:	69 f0       	breq	.+26     	; 0x44d0 <loadMIDIFile+0x148>
    44b6:	06 c0       	rjmp	.+12     	; 0x44c4 <loadMIDIFile+0x13c>
    44b8:	29 e1       	ldi	r18, 0x19	; 25
    44ba:	30 e0       	ldi	r19, 0x00	; 0
    44bc:	0e c0       	rjmp	.+28     	; 0x44da <loadMIDIFile+0x152>
    44be:	2e e1       	ldi	r18, 0x1E	; 30
    44c0:	30 e0       	ldi	r19, 0x00	; 0
    44c2:	0b c0       	rjmp	.+22     	; 0x44da <loadMIDIFile+0x152>
    44c4:	c6 01       	movw	r24, r12
    44c6:	0e 94 e7 12 	call	0x25ce	; 0x25ce <f_close>
    44ca:	87 e0       	ldi	r24, 0x07	; 7
    44cc:	90 e0       	ldi	r25, 0x00	; 0
    44ce:	4d c0       	rjmp	.+154    	; 0x456a <loadMIDIFile+0x1e2>
    44d0:	28 e1       	ldi	r18, 0x18	; 24
    44d2:	30 e0       	ldi	r19, 0x00	; 0
    44d4:	02 c0       	rjmp	.+4      	; 0x44da <loadMIDIFile+0x152>
    44d6:	2d e1       	ldi	r18, 0x1D	; 29
    44d8:	30 e0       	ldi	r19, 0x00	; 0
    44da:	77 27       	eor	r23, r23
    44dc:	62 9f       	mul	r22, r18
    44de:	a0 01       	movw	r20, r0
    44e0:	63 9f       	mul	r22, r19
    44e2:	50 0d       	add	r21, r0
    44e4:	72 9f       	mul	r23, r18
    44e6:	50 0d       	add	r21, r0
    44e8:	11 24       	eor	r1, r1
    44ea:	f8 01       	movw	r30, r16
    44ec:	56 ab       	std	Z+54, r21	; 0x36
    44ee:	45 ab       	std	Z+53, r20	; 0x35
    44f0:	c8 01       	movw	r24, r16
    44f2:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <calcTickTime>
    44f6:	f8 01       	movw	r30, r16
    44f8:	84 a9       	ldd	r24, Z+52	; 0x34
    44fa:	88 23       	and	r24, r24
    44fc:	a1 f1       	breq	.+104    	; 0x4566 <loadMIDIFile+0x1de>
    44fe:	b1 2c       	mov	r11, r1
    4500:	0f 2e       	mov	r0, r31
    4502:	f9 e1       	ldi	r31, 0x19	; 25
    4504:	af 2e       	mov	r10, r31
    4506:	f0 2d       	mov	r31, r0
    4508:	8b 2c       	mov	r8, r11
    450a:	91 2c       	mov	r9, r1
    450c:	a8 9c       	mul	r10, r8
    450e:	c0 01       	movw	r24, r0
    4510:	a9 9c       	mul	r10, r9
    4512:	90 0d       	add	r25, r0
    4514:	11 24       	eor	r1, r1
    4516:	85 5b       	subi	r24, 0xB5	; 181
    4518:	9f 4f       	sbci	r25, 0xFF	; 255
    451a:	a8 01       	movw	r20, r16
    451c:	6b 2d       	mov	r22, r11
    451e:	80 0f       	add	r24, r16
    4520:	91 1f       	adc	r25, r17
    4522:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <loadTrack>
    4526:	7c 01       	movw	r14, r24
    4528:	01 96       	adiw	r24, 0x01	; 1
    452a:	79 f0       	breq	.+30     	; 0x454a <loadMIDIFile+0x1c2>
    452c:	c6 01       	movw	r24, r12
    452e:	0e 94 e7 12 	call	0x25ce	; 0x25ce <f_close>
    4532:	8f ef       	ldi	r24, 0xFF	; 255
    4534:	88 1a       	sub	r8, r24
    4536:	98 0a       	sbc	r9, r24
    4538:	2a e0       	ldi	r18, 0x0A	; 10
    453a:	28 9d       	mul	r18, r8
    453c:	c0 01       	movw	r24, r0
    453e:	29 9d       	mul	r18, r9
    4540:	90 0d       	add	r25, r0
    4542:	11 24       	eor	r1, r1
    4544:	8e 0d       	add	r24, r14
    4546:	9f 1d       	adc	r25, r15
    4548:	10 c0       	rjmp	.+32     	; 0x456a <loadMIDIFile+0x1e2>
    454a:	b3 94       	inc	r11
    454c:	f8 01       	movw	r30, r16
    454e:	84 a9       	ldd	r24, Z+52	; 0x34
    4550:	b8 16       	cp	r11, r24
    4552:	d0 f2       	brcs	.-76     	; 0x4508 <loadMIDIFile+0x180>
    4554:	8f ef       	ldi	r24, 0xFF	; 255
    4556:	9f ef       	ldi	r25, 0xFF	; 255
    4558:	08 c0       	rjmp	.+16     	; 0x456a <loadMIDIFile+0x1e2>
    455a:	80 e0       	ldi	r24, 0x00	; 0
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	05 c0       	rjmp	.+10     	; 0x456a <loadMIDIFile+0x1e2>
    4560:	82 e0       	ldi	r24, 0x02	; 2
    4562:	90 e0       	ldi	r25, 0x00	; 0
    4564:	02 c0       	rjmp	.+4      	; 0x456a <loadMIDIFile+0x1e2>
    4566:	8f ef       	ldi	r24, 0xFF	; 255
    4568:	9f ef       	ldi	r25, 0xFF	; 255
    456a:	29 96       	adiw	r28, 0x09	; 9
    456c:	0f b6       	in	r0, 0x3f	; 63
    456e:	f8 94       	cli
    4570:	de bf       	out	0x3e, r29	; 62
    4572:	0f be       	out	0x3f, r0	; 63
    4574:	cd bf       	out	0x3d, r28	; 61
    4576:	df 91       	pop	r29
    4578:	cf 91       	pop	r28
    457a:	1f 91       	pop	r17
    457c:	0f 91       	pop	r16
    457e:	ff 90       	pop	r15
    4580:	ef 90       	pop	r14
    4582:	df 90       	pop	r13
    4584:	cf 90       	pop	r12
    4586:	bf 90       	pop	r11
    4588:	af 90       	pop	r10
    458a:	9f 90       	pop	r9
    458c:	8f 90       	pop	r8
    458e:	08 95       	ret

00004590 <setFilename>:

void setFilename(struct MD_MIDIFile *m,const char* aname) 
{ 
	if (aname != NULL) strcpy(m->_fileName, aname); 
    4590:	61 15       	cp	r22, r1
    4592:	71 05       	cpc	r23, r1
    4594:	19 f0       	breq	.+6      	; 0x459c <setFilename+0xc>
    4596:	86 96       	adiw	r24, 0x26	; 38
    4598:	0e 94 99 34 	call	0x6932	; 0x6932 <strcpy>
    459c:	08 95       	ret

0000459e <readMultiByte>:
 * \brief Main file for helper functions implementation
 */

uint32_t readMultiByte(FIL *f, uint8_t nLen)
// read fixed length parameter from input
{
    459e:	af 92       	push	r10
    45a0:	bf 92       	push	r11
    45a2:	cf 92       	push	r12
    45a4:	df 92       	push	r13
    45a6:	ef 92       	push	r14
    45a8:	ff 92       	push	r15
    45aa:	0f 93       	push	r16
    45ac:	1f 93       	push	r17
    45ae:	cf 93       	push	r28
    45b0:	df 93       	push	r29
    45b2:	00 d0       	rcall	.+0      	; 0x45b4 <readMultiByte+0x16>
    45b4:	1f 92       	push	r1
    45b6:	cd b7       	in	r28, 0x3d	; 61
    45b8:	de b7       	in	r29, 0x3e	; 62
  uint32_t  value = 0L;
  uint8_t c;
  UINT d;
  for (uint8_t i=0; i<nLen; i++)
    45ba:	66 23       	and	r22, r22
    45bc:	f1 f0       	breq	.+60     	; 0x45fa <readMultiByte+0x5c>
    45be:	a6 2e       	mov	r10, r22
    45c0:	8c 01       	movw	r16, r24
    45c2:	b1 2c       	mov	r11, r1
    45c4:	c1 2c       	mov	r12, r1
    45c6:	d1 2c       	mov	r13, r1
    45c8:	76 01       	movw	r14, r12
  {
    f_read(f,&c,1,&d);
    45ca:	9e 01       	movw	r18, r28
    45cc:	2e 5f       	subi	r18, 0xFE	; 254
    45ce:	3f 4f       	sbci	r19, 0xFF	; 255
    45d0:	41 e0       	ldi	r20, 0x01	; 1
    45d2:	50 e0       	ldi	r21, 0x00	; 0
    45d4:	be 01       	movw	r22, r28
    45d6:	6f 5f       	subi	r22, 0xFF	; 255
    45d8:	7f 4f       	sbci	r23, 0xFF	; 255
    45da:	c8 01       	movw	r24, r16
    45dc:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <f_read>
	value = (value << 8) + c;
    45e0:	fe 2c       	mov	r15, r14
    45e2:	ed 2c       	mov	r14, r13
    45e4:	dc 2c       	mov	r13, r12
    45e6:	cc 24       	eor	r12, r12
    45e8:	89 81       	ldd	r24, Y+1	; 0x01
    45ea:	c8 0e       	add	r12, r24
    45ec:	d1 1c       	adc	r13, r1
    45ee:	e1 1c       	adc	r14, r1
    45f0:	f1 1c       	adc	r15, r1
// read fixed length parameter from input
{
  uint32_t  value = 0L;
  uint8_t c;
  UINT d;
  for (uint8_t i=0; i<nLen; i++)
    45f2:	b3 94       	inc	r11
    45f4:	ab 10       	cpse	r10, r11
    45f6:	e9 cf       	rjmp	.-46     	; 0x45ca <readMultiByte+0x2c>
    45f8:	03 c0       	rjmp	.+6      	; 0x4600 <readMultiByte+0x62>
 */

uint32_t readMultiByte(FIL *f, uint8_t nLen)
// read fixed length parameter from input
{
  uint32_t  value = 0L;
    45fa:	c1 2c       	mov	r12, r1
    45fc:	d1 2c       	mov	r13, r1
    45fe:	76 01       	movw	r14, r12
    f_read(f,&c,1,&d);
	value = (value << 8) + c;
  }
  
  return(value);
}
    4600:	c7 01       	movw	r24, r14
    4602:	b6 01       	movw	r22, r12
    4604:	0f 90       	pop	r0
    4606:	0f 90       	pop	r0
    4608:	0f 90       	pop	r0
    460a:	df 91       	pop	r29
    460c:	cf 91       	pop	r28
    460e:	1f 91       	pop	r17
    4610:	0f 91       	pop	r16
    4612:	ff 90       	pop	r15
    4614:	ef 90       	pop	r14
    4616:	df 90       	pop	r13
    4618:	cf 90       	pop	r12
    461a:	bf 90       	pop	r11
    461c:	af 90       	pop	r10
    461e:	08 95       	ret

00004620 <readVarLen>:

uint32_t readVarLen(FIL *f)
// read variable length parameter from input
{
    4620:	cf 92       	push	r12
    4622:	df 92       	push	r13
    4624:	ef 92       	push	r14
    4626:	ff 92       	push	r15
    4628:	0f 93       	push	r16
    462a:	1f 93       	push	r17
    462c:	cf 93       	push	r28
    462e:	df 93       	push	r29
    4630:	00 d0       	rcall	.+0      	; 0x4632 <readVarLen+0x12>
    4632:	1f 92       	push	r1
    4634:	cd b7       	in	r28, 0x3d	; 61
    4636:	de b7       	in	r29, 0x3e	; 62
    4638:	8c 01       	movw	r16, r24
  uint32_t  value = 0;
    463a:	c1 2c       	mov	r12, r1
    463c:	d1 2c       	mov	r13, r1
    463e:	76 01       	movw	r14, r12
  uint8_t      c;
  UINT d;
  FRESULT res;
  do
  {
    res = f_read(f,&c,1,&d);
    4640:	9e 01       	movw	r18, r28
    4642:	2e 5f       	subi	r18, 0xFE	; 254
    4644:	3f 4f       	sbci	r19, 0xFF	; 255
    4646:	41 e0       	ldi	r20, 0x01	; 1
    4648:	50 e0       	ldi	r21, 0x00	; 0
    464a:	be 01       	movw	r22, r28
    464c:	6f 5f       	subi	r22, 0xFF	; 255
    464e:	7f 4f       	sbci	r23, 0xFF	; 255
    4650:	c8 01       	movw	r24, r16
    4652:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <f_read>
    value = (value << 7) + (c & 0x7f);
    4656:	cc 0c       	add	r12, r12
    4658:	dd 1c       	adc	r13, r13
    465a:	ee 1c       	adc	r14, r14
    465c:	ff 1c       	adc	r15, r15
    465e:	cc 0c       	add	r12, r12
    4660:	dd 1c       	adc	r13, r13
    4662:	ee 1c       	adc	r14, r14
    4664:	ff 1c       	adc	r15, r15
    4666:	cc 0c       	add	r12, r12
    4668:	dd 1c       	adc	r13, r13
    466a:	ee 1c       	adc	r14, r14
    466c:	ff 1c       	adc	r15, r15
    466e:	cc 0c       	add	r12, r12
    4670:	dd 1c       	adc	r13, r13
    4672:	ee 1c       	adc	r14, r14
    4674:	ff 1c       	adc	r15, r15
    4676:	cc 0c       	add	r12, r12
    4678:	dd 1c       	adc	r13, r13
    467a:	ee 1c       	adc	r14, r14
    467c:	ff 1c       	adc	r15, r15
    467e:	cc 0c       	add	r12, r12
    4680:	dd 1c       	adc	r13, r13
    4682:	ee 1c       	adc	r14, r14
    4684:	ff 1c       	adc	r15, r15
    4686:	cc 0c       	add	r12, r12
    4688:	dd 1c       	adc	r13, r13
    468a:	ee 1c       	adc	r14, r14
    468c:	ff 1c       	adc	r15, r15
    468e:	89 81       	ldd	r24, Y+1	; 0x01
    4690:	98 2f       	mov	r25, r24
    4692:	9f 77       	andi	r25, 0x7F	; 127
    4694:	c9 0e       	add	r12, r25
    4696:	d1 1c       	adc	r13, r1
    4698:	e1 1c       	adc	r14, r1
    469a:	f1 1c       	adc	r15, r1
  }  while (c & 0x80);
    469c:	88 23       	and	r24, r24
    469e:	84 f2       	brlt	.-96     	; 0x4640 <readVarLen+0x20>
  
  return(value);
}
    46a0:	c7 01       	movw	r24, r14
    46a2:	b6 01       	movw	r22, r12
    46a4:	0f 90       	pop	r0
    46a6:	0f 90       	pop	r0
    46a8:	0f 90       	pop	r0
    46aa:	df 91       	pop	r29
    46ac:	cf 91       	pop	r28
    46ae:	1f 91       	pop	r17
    46b0:	0f 91       	pop	r16
    46b2:	ff 90       	pop	r15
    46b4:	ef 90       	pop	r14
    46b6:	df 90       	pop	r13
    46b8:	cf 90       	pop	r12
    46ba:	08 95       	ret

000046bc <getEndOfTrack>:

BOOL getEndOfTrack(struct MD_MFTrack *t)
// true if end of track has been reached
{
  return t->_endOfTrack;
}
    46bc:	fc 01       	movw	r30, r24
    46be:	85 85       	ldd	r24, Z+13	; 0x0d
    46c0:	08 95       	ret

000046c2 <syncTime>:

void syncTime(struct MD_MFTrack *t)
{
  t->_elapsedTicks = 0;
    46c2:	fc 01       	movw	r30, r24
    46c4:	16 86       	std	Z+14, r1	; 0x0e
    46c6:	17 86       	std	Z+15, r1	; 0x0f
    46c8:	10 8a       	std	Z+16, r1	; 0x10
    46ca:	11 8a       	std	Z+17, r1	; 0x11
    46cc:	08 95       	ret

000046ce <restartTrack>:
}

void restartTrack(struct MD_MFTrack *t)
// Start playing the track from the beginning again
{
    46ce:	fc 01       	movw	r30, r24
  t->_currOffset = 0;
    46d0:	11 86       	std	Z+9, r1	; 0x09
    46d2:	12 86       	std	Z+10, r1	; 0x0a
    46d4:	13 86       	std	Z+11, r1	; 0x0b
    46d6:	14 86       	std	Z+12, r1	; 0x0c
  t->_endOfTrack = FALSE;
    46d8:	15 86       	std	Z+13, r1	; 0x0d
  t->_elapsedTicks = 0;
    46da:	16 86       	std	Z+14, r1	; 0x0e
    46dc:	17 86       	std	Z+15, r1	; 0x0f
    46de:	10 8a       	std	Z+16, r1	; 0x10
    46e0:	11 8a       	std	Z+17, r1	; 0x11
    46e2:	08 95       	ret

000046e4 <resetTrack>:
 * \file
 * \brief Main file for the MFTrack class implementation
 */

void resetTrack(struct MD_MFTrack *t)
{
    46e4:	cf 93       	push	r28
    46e6:	df 93       	push	r29
    46e8:	ec 01       	movw	r28, r24
  t->_length = 0;        // length of track in bytes
    46ea:	19 82       	std	Y+1, r1	; 0x01
    46ec:	1a 82       	std	Y+2, r1	; 0x02
    46ee:	1b 82       	std	Y+3, r1	; 0x03
    46f0:	1c 82       	std	Y+4, r1	; 0x04
  t->_startOffset = 0;   // start of the track in bytes from start of file
    46f2:	1d 82       	std	Y+5, r1	; 0x05
    46f4:	1e 82       	std	Y+6, r1	; 0x06
    46f6:	1f 82       	std	Y+7, r1	; 0x07
    46f8:	18 86       	std	Y+8, r1	; 0x08
  restartTrack(t);
    46fa:	0e 94 67 23 	call	0x46ce	; 0x46ce <restartTrack>
  t->_trackId = 255;
    46fe:	8f ef       	ldi	r24, 0xFF	; 255
    4700:	88 83       	st	Y, r24
}
    4702:	df 91       	pop	r29
    4704:	cf 91       	pop	r28
    4706:	08 95       	ret

00004708 <closeTrack>:


void closeTrack(struct MD_MFTrack *t)
{
  resetTrack(t);
    4708:	0e 94 72 23 	call	0x46e4	; 0x46e4 <resetTrack>
    470c:	08 95       	ret

0000470e <parseEvent>:
  return(TRUE);
}

void parseEvent(struct MD_MIDIFile *mf,struct MD_MFTrack *t)
// process the event from the physical file
{
    470e:	4f 92       	push	r4
    4710:	5f 92       	push	r5
    4712:	6f 92       	push	r6
    4714:	7f 92       	push	r7
    4716:	8f 92       	push	r8
    4718:	9f 92       	push	r9
    471a:	af 92       	push	r10
    471c:	bf 92       	push	r11
    471e:	cf 92       	push	r12
    4720:	df 92       	push	r13
    4722:	ef 92       	push	r14
    4724:	ff 92       	push	r15
    4726:	0f 93       	push	r16
    4728:	1f 93       	push	r17
    472a:	cf 93       	push	r28
    472c:	df 93       	push	r29
    472e:	cd b7       	in	r28, 0x3d	; 61
    4730:	de b7       	in	r29, 0x3e	; 62
    4732:	cf 55       	subi	r28, 0x5F	; 95
    4734:	d1 09       	sbc	r29, r1
    4736:	0f b6       	in	r0, 0x3f	; 63
    4738:	f8 94       	cli
    473a:	de bf       	out	0x3e, r29	; 62
    473c:	0f be       	out	0x3f, r0	; 63
    473e:	cd bf       	out	0x3d, r28	; 61
    4740:	6c 01       	movw	r12, r24
    4742:	8b 01       	movw	r16, r22
  uint8_t eType;
  uint32_t eLen, mLen;
  UINT bRead;
  // now we have to process this event
  f_read(&mf->_fd,&eType,1,&bRead);
    4744:	7c 01       	movw	r14, r24
    4746:	86 e0       	ldi	r24, 0x06	; 6
    4748:	e8 0e       	add	r14, r24
    474a:	f1 1c       	adc	r15, r1
    474c:	9e 01       	movw	r18, r28
    474e:	2e 5f       	subi	r18, 0xFE	; 254
    4750:	3f 4f       	sbci	r19, 0xFF	; 255
    4752:	41 e0       	ldi	r20, 0x01	; 1
    4754:	50 e0       	ldi	r21, 0x00	; 0
    4756:	be 01       	movw	r22, r28
    4758:	6f 5f       	subi	r22, 0xFF	; 255
    475a:	7f 4f       	sbci	r23, 0xFF	; 255
    475c:	c7 01       	movw	r24, r14
    475e:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <f_read>

  switch (eType)
    4762:	89 81       	ldd	r24, Y+1	; 0x01
    4764:	80 3e       	cpi	r24, 0xE0	; 224
    4766:	30 f4       	brcc	.+12     	; 0x4774 <parseEvent+0x66>
    4768:	80 3c       	cpi	r24, 0xC0	; 192
    476a:	e0 f5       	brcc	.+120    	; 0x47e4 <parseEvent+0xd6>
    476c:	80 38       	cpi	r24, 0x80	; 128
    476e:	08 f4       	brcc	.+2      	; 0x4772 <parseEvent+0x64>
    4770:	56 c0       	rjmp	.+172    	; 0x481e <parseEvent+0x110>
    4772:	0b c0       	rjmp	.+22     	; 0x478a <parseEvent+0x7c>
    4774:	80 3f       	cpi	r24, 0xF0	; 240
    4776:	09 f4       	brne	.+2      	; 0x477a <parseEvent+0x6c>
    4778:	7d c0       	rjmp	.+250    	; 0x4874 <parseEvent+0x166>
    477a:	38 f0       	brcs	.+14     	; 0x478a <parseEvent+0x7c>
    477c:	87 3f       	cpi	r24, 0xF7	; 247
    477e:	09 f4       	brne	.+2      	; 0x4782 <parseEvent+0x74>
    4780:	79 c0       	rjmp	.+242    	; 0x4874 <parseEvent+0x166>
    4782:	8f 3f       	cpi	r24, 0xFF	; 255
    4784:	09 f4       	brne	.+2      	; 0x4788 <parseEvent+0x7a>
    4786:	d0 c0       	rjmp	.+416    	; 0x4928 <parseEvent+0x21a>
    4788:	30 c2       	rjmp	.+1120   	; 0x4bea <parseEvent+0x4dc>
    // Midi events (status bytes 0x8n - 0xEn) The standard Channel MIDI messages, where 'n' is the MIDI channel (0 - 15).
    // This status byte will be followed by 1 or 2 data bytes, as is usual for the particular MIDI message. 
    // Any valid Channel MIDI message can be included in a MIDI file.
  case 0x80 ... 0xBf: // MIDI message with 2 parameters
  case 0xe0 ... 0xef:
    t->_mev.size = 3;
    478a:	93 e0       	ldi	r25, 0x03	; 3
    478c:	d8 01       	movw	r26, r16
    478e:	54 96       	adiw	r26, 0x14	; 20
    4790:	9c 93       	st	X, r25
    4792:	54 97       	sbiw	r26, 0x14	; 20
    t->_mev.data[0] = eType;
    t->_mev.channel = t->_mev.data[0] & 0xf;  // mask off the channel
    4794:	98 2f       	mov	r25, r24
    4796:	9f 70       	andi	r25, 0x0F	; 15
    4798:	53 96       	adiw	r26, 0x13	; 19
    479a:	9c 93       	st	X, r25
    479c:	53 97       	sbiw	r26, 0x13	; 19
    t->_mev.data[0] = t->_mev.data[0] & 0xf0; // just the command byte
    479e:	80 7f       	andi	r24, 0xF0	; 240
    47a0:	55 96       	adiw	r26, 0x15	; 21
    47a2:	8c 93       	st	X, r24
    f_read(&mf->_fd,&t->_mev.data[1],1,&bRead);
    47a4:	9e 01       	movw	r18, r28
    47a6:	2e 5f       	subi	r18, 0xFE	; 254
    47a8:	3f 4f       	sbci	r19, 0xFF	; 255
    47aa:	41 e0       	ldi	r20, 0x01	; 1
    47ac:	50 e0       	ldi	r21, 0x00	; 0
    47ae:	b8 01       	movw	r22, r16
    47b0:	6a 5e       	subi	r22, 0xEA	; 234
    47b2:	7f 4f       	sbci	r23, 0xFF	; 255
    47b4:	c7 01       	movw	r24, r14
    47b6:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <f_read>
    f_read(&mf->_fd,&t->_mev.data[2],1,&bRead);
    47ba:	9e 01       	movw	r18, r28
    47bc:	2e 5f       	subi	r18, 0xFE	; 254
    47be:	3f 4f       	sbci	r19, 0xFF	; 255
    47c0:	41 e0       	ldi	r20, 0x01	; 1
    47c2:	50 e0       	ldi	r21, 0x00	; 0
    47c4:	b8 01       	movw	r22, r16
    47c6:	69 5e       	subi	r22, 0xE9	; 233
    47c8:	7f 4f       	sbci	r23, 0xFF	; 255
    47ca:	c7 01       	movw	r24, r14
    47cc:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <f_read>
    DUMP("[MID2] Ch: ", _mev.channel);
    DUMPX(" Data: ", _mev.data[0]);
    DUMPX(" ", _mev.data[1]);
    DUMPX(" ", _mev.data[2]);	
#if !DUMP_DATA
    if (mf->_midiHandler != NULL)
    47d0:	d6 01       	movw	r26, r12
    47d2:	ed 91       	ld	r30, X+
    47d4:	fc 91       	ld	r31, X
    47d6:	30 97       	sbiw	r30, 0x00	; 0
    47d8:	09 f4       	brne	.+2      	; 0x47dc <parseEvent+0xce>
    47da:	0a c2       	rjmp	.+1044   	; 0x4bf0 <parseEvent+0x4e2>
      (mf->_midiHandler)(&t->_mev);
    47dc:	c8 01       	movw	r24, r16
    47de:	42 96       	adiw	r24, 0x12	; 18
    47e0:	09 95       	icall
    47e2:	06 c2       	rjmp	.+1036   	; 0x4bf0 <parseEvent+0x4e2>
#endif // !DUMP_DATA
  break;

  case 0xc0 ... 0xdf: // MIDI message with 1 parameter
    t->_mev.size = 2;
    47e4:	92 e0       	ldi	r25, 0x02	; 2
    47e6:	f8 01       	movw	r30, r16
    47e8:	94 8b       	std	Z+20, r25	; 0x14
    t->_mev.data[0] = eType;
    t->_mev.channel = t->_mev.data[0] & 0xf;  // mask off the channel
    47ea:	98 2f       	mov	r25, r24
    47ec:	9f 70       	andi	r25, 0x0F	; 15
    47ee:	93 8b       	std	Z+19, r25	; 0x13
    t->_mev.data[0] = t->_mev.data[0] & 0xf0; // just the command byte
    47f0:	80 7f       	andi	r24, 0xF0	; 240
    47f2:	85 8b       	std	Z+21, r24	; 0x15
    f_read(&mf->_fd,&t->_mev.data[1],1,&bRead);
    47f4:	9e 01       	movw	r18, r28
    47f6:	2e 5f       	subi	r18, 0xFE	; 254
    47f8:	3f 4f       	sbci	r19, 0xFF	; 255
    47fa:	41 e0       	ldi	r20, 0x01	; 1
    47fc:	50 e0       	ldi	r21, 0x00	; 0
    47fe:	b8 01       	movw	r22, r16
    4800:	6a 5e       	subi	r22, 0xEA	; 234
    4802:	7f 4f       	sbci	r23, 0xFF	; 255
    4804:	c7 01       	movw	r24, r14
    4806:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <f_read>
    DUMP("[MID1] Ch: ", _mev.channel);
    DUMPX(" Data: ", _mev.data[0]);
    DUMPX(" ", _mev.data[1]);

#if !DUMP_DATA
    if (mf->_midiHandler != NULL)
    480a:	d6 01       	movw	r26, r12
    480c:	ed 91       	ld	r30, X+
    480e:	fc 91       	ld	r31, X
    4810:	30 97       	sbiw	r30, 0x00	; 0
    4812:	09 f4       	brne	.+2      	; 0x4816 <parseEvent+0x108>
    4814:	ed c1       	rjmp	.+986    	; 0x4bf0 <parseEvent+0x4e2>
      (mf->_midiHandler)(&t->_mev);
    4816:	c8 01       	movw	r24, r16
    4818:	42 96       	adiw	r24, 0x12	; 18
    481a:	09 95       	icall
    481c:	e9 c1       	rjmp	.+978    	; 0x4bf0 <parseEvent+0x4e2>
    // ie SysEx and Meta events clear running status. This means that the _mev structure 
    // should contain the info from the previous message in the structure's channel member 
    // and data[0] (for the MIDI command). 
    // Hence start saving the data at byte data[1] with the byte we have just read (eType) 
    // and use the size member to determine how large the message is (ie, same as before).
    t->_mev.data[1] = eType;
    481e:	f8 01       	movw	r30, r16
    4820:	86 8b       	std	Z+22, r24	; 0x16
    for (uint8_t i = 2; i < t->_mev.size; i++)
    4822:	84 89       	ldd	r24, Z+20	; 0x14
    4824:	83 30       	cpi	r24, 0x03	; 3
    4826:	b0 f0       	brcs	.+44     	; 0x4854 <parseEvent+0x146>
    4828:	68 94       	set
    482a:	bb 24       	eor	r11, r11
    482c:	b1 f8       	bld	r11, 1
    {
      f_read(&mf->_fd,&t->_mev.data[1],1,&bRead);  // next byte
    482e:	48 01       	movw	r8, r16
    4830:	f6 e1       	ldi	r31, 0x16	; 22
    4832:	8f 0e       	add	r8, r31
    4834:	91 1c       	adc	r9, r1
    4836:	9e 01       	movw	r18, r28
    4838:	2e 5f       	subi	r18, 0xFE	; 254
    483a:	3f 4f       	sbci	r19, 0xFF	; 255
    483c:	41 e0       	ldi	r20, 0x01	; 1
    483e:	50 e0       	ldi	r21, 0x00	; 0
    4840:	b4 01       	movw	r22, r8
    4842:	c7 01       	movw	r24, r14
    4844:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <f_read>
    // should contain the info from the previous message in the structure's channel member 
    // and data[0] (for the MIDI command). 
    // Hence start saving the data at byte data[1] with the byte we have just read (eType) 
    // and use the size member to determine how large the message is (ie, same as before).
    t->_mev.data[1] = eType;
    for (uint8_t i = 2; i < t->_mev.size; i++)
    4848:	b3 94       	inc	r11
    484a:	d8 01       	movw	r26, r16
    484c:	54 96       	adiw	r26, 0x14	; 20
    484e:	8c 91       	ld	r24, X
    4850:	b8 16       	cp	r11, r24
    4852:	88 f3       	brcs	.-30     	; 0x4836 <parseEvent+0x128>
      f_read(&mf->_fd,&t->_mev.data[1],1,&bRead);  // next byte
    } 

    DUMP("[MID+] Ch: ", _mev.channel);
    DUMPS(" Data:");
    for (uint8_t i = 0; i<t->_mev.size; i++)
    4854:	88 23       	and	r24, r24
    4856:	21 f0       	breq	.+8      	; 0x4860 <parseEvent+0x152>
    4858:	90 e0       	ldi	r25, 0x00	; 0
    485a:	9f 5f       	subi	r25, 0xFF	; 255
    485c:	98 13       	cpse	r25, r24
    485e:	fd cf       	rjmp	.-6      	; 0x485a <parseEvent+0x14c>
    {
      DUMPX(" ", t->_mev.data[i]);
    }

#if !DUMP_DATA
    if (mf->_midiHandler != NULL)
    4860:	d6 01       	movw	r26, r12
    4862:	ed 91       	ld	r30, X+
    4864:	fc 91       	ld	r31, X
    4866:	30 97       	sbiw	r30, 0x00	; 0
    4868:	09 f4       	brne	.+2      	; 0x486c <parseEvent+0x15e>
    486a:	c2 c1       	rjmp	.+900    	; 0x4bf0 <parseEvent+0x4e2>
      (mf->_midiHandler)(&t->_mev);
    486c:	c8 01       	movw	r24, r16
    486e:	42 96       	adiw	r24, 0x12	; 18
    4870:	09 95       	icall
    4872:	be c1       	rjmp	.+892    	; 0x4bf0 <parseEvent+0x4e2>
  {
    sysex_event sev;
    uint16_t index = 0;

    // collect all the bytes until the 0xf7 - boundaries are included in the message
    sev.track = t->_trackId;
    4874:	f8 01       	movw	r30, r16
    4876:	80 81       	ld	r24, Z
    4878:	8c 83       	std	Y+4, r24	; 0x04
    mLen = readVarLen(&mf->_fd);
    487a:	c7 01       	movw	r24, r14
    487c:	0e 94 10 23 	call	0x4620	; 0x4620 <readVarLen>
    sev.size = mLen;
    4880:	7e 83       	std	Y+6, r23	; 0x06
    4882:	6d 83       	std	Y+5, r22	; 0x05
    if (eType==0xF0)       // add space for 0xF0
    4884:	29 81       	ldd	r18, Y+1	; 0x01
    4886:	20 3f       	cpi	r18, 0xF0	; 240
    4888:	41 f4       	brne	.+16     	; 0x489a <parseEvent+0x18c>
    {
      sev.data[index++] = eType;
    488a:	2f 83       	std	Y+7, r18	; 0x07
      sev.size++;
    488c:	6f 5f       	subi	r22, 0xFF	; 255
    488e:	7f 4f       	sbci	r23, 0xFF	; 255
    4890:	7e 83       	std	Y+6, r23	; 0x06
    4892:	6d 83       	std	Y+5, r22	; 0x05
    sev.track = t->_trackId;
    mLen = readVarLen(&mf->_fd);
    sev.size = mLen;
    if (eType==0xF0)       // add space for 0xF0
    {
      sev.data[index++] = eType;
    4894:	01 e0       	ldi	r16, 0x01	; 1
    4896:	10 e0       	ldi	r17, 0x00	; 0
    4898:	02 c0       	rjmp	.+4      	; 0x489e <parseEvent+0x190>
// ---------------------------- SYSEX
  case 0xf0:  // sysex_event = 0xF0 + <len:1> + <data_bytes> + 0xF7 
  case 0xf7:  // sysex_event = 0xF7 + <len:1> + <data_bytes> + 0xF7 
  {
    sysex_event sev;
    uint16_t index = 0;
    489a:	00 e0       	ldi	r16, 0x00	; 0
    489c:	10 e0       	ldi	r17, 0x00	; 0
    if (eType==0xF0)       // add space for 0xF0
    {
      sev.data[index++] = eType;
      sev.size++;
    }
    uint16_t minLen = min(sev.size, ARRAY_SIZE(sev.data));
    489e:	ad 80       	ldd	r10, Y+5	; 0x05
    48a0:	be 80       	ldd	r11, Y+6	; 0x06
    48a2:	f3 e3       	ldi	r31, 0x33	; 51
    48a4:	af 16       	cp	r10, r31
    48a6:	b1 04       	cpc	r11, r1
    48a8:	28 f0       	brcs	.+10     	; 0x48b4 <parseEvent+0x1a6>
    48aa:	0f 2e       	mov	r0, r31
    48ac:	f2 e3       	ldi	r31, 0x32	; 50
    48ae:	af 2e       	mov	r10, r31
    48b0:	b1 2c       	mov	r11, r1
    48b2:	f0 2d       	mov	r31, r0
    // The length parameter includes the 0xF7 but not the start boundary.
    // However, it may be bigger than our buffer will allow us to store.
    for (uint16_t i=index; i<minLen; ++i)
    48b4:	0a 15       	cp	r16, r10
    48b6:	1b 05       	cpc	r17, r11
    48b8:	b0 f4       	brcc	.+44     	; 0x48e6 <parseEvent+0x1d8>
      f_read(&mf->_fd,&sev.data[i],1,&bRead);
    48ba:	b8 01       	movw	r22, r16
    48bc:	6d 5f       	subi	r22, 0xFD	; 253
    48be:	7f 4f       	sbci	r23, 0xFF	; 255
    48c0:	84 e0       	ldi	r24, 0x04	; 4
    48c2:	90 e0       	ldi	r25, 0x00	; 0
    48c4:	8c 0f       	add	r24, r28
    48c6:	9d 1f       	adc	r25, r29
    48c8:	68 0f       	add	r22, r24
    48ca:	79 1f       	adc	r23, r25
    48cc:	9e 01       	movw	r18, r28
    48ce:	2e 5f       	subi	r18, 0xFE	; 254
    48d0:	3f 4f       	sbci	r19, 0xFF	; 255
    48d2:	41 e0       	ldi	r20, 0x01	; 1
    48d4:	50 e0       	ldi	r21, 0x00	; 0
    48d6:	c7 01       	movw	r24, r14
    48d8:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <f_read>
      sev.size++;
    }
    uint16_t minLen = min(sev.size, ARRAY_SIZE(sev.data));
    // The length parameter includes the 0xF7 but not the start boundary.
    // However, it may be bigger than our buffer will allow us to store.
    for (uint16_t i=index; i<minLen; ++i)
    48dc:	0f 5f       	subi	r16, 0xFF	; 255
    48de:	1f 4f       	sbci	r17, 0xFF	; 255
    48e0:	0a 15       	cp	r16, r10
    48e2:	1b 05       	cpc	r17, r11
    48e4:	50 f3       	brcs	.-44     	; 0x48ba <parseEvent+0x1ac>
      f_read(&mf->_fd,&sev.data[i],1,&bRead);
    if (sev.size>minLen)
    48e6:	8d 81       	ldd	r24, Y+5	; 0x05
    48e8:	9e 81       	ldd	r25, Y+6	; 0x06
    48ea:	a8 16       	cp	r10, r24
    48ec:	b9 06       	cpc	r11, r25
    48ee:	80 f4       	brcc	.+32     	; 0x4910 <parseEvent+0x202>
      f_lseek(&mf->_fd,f_tell(&mf->_fd) + (sev.size-minLen));
    48f0:	8a 19       	sub	r24, r10
    48f2:	9b 09       	sbc	r25, r11
    48f4:	d6 01       	movw	r26, r12
    48f6:	1c 96       	adiw	r26, 0x0c	; 12
    48f8:	4d 91       	ld	r20, X+
    48fa:	5d 91       	ld	r21, X+
    48fc:	6d 91       	ld	r22, X+
    48fe:	7c 91       	ld	r23, X
    4900:	1f 97       	sbiw	r26, 0x0f	; 15
    4902:	48 0f       	add	r20, r24
    4904:	59 1f       	adc	r21, r25
    4906:	61 1d       	adc	r22, r1
    4908:	71 1d       	adc	r23, r1
    490a:	c7 01       	movw	r24, r14
    490c:	0e 94 34 14 	call	0x2868	; 0x2868 <f_lseek>
      DUMPX(" ", sev.data[i]);
    }
    if (sev.size>minLen)
      DUMPS("...");
#else
    if (mf->_sysexHandler != NULL)
    4910:	d6 01       	movw	r26, r12
    4912:	12 96       	adiw	r26, 0x02	; 2
    4914:	ed 91       	ld	r30, X+
    4916:	fc 91       	ld	r31, X
    4918:	13 97       	sbiw	r26, 0x03	; 3
    491a:	30 97       	sbiw	r30, 0x00	; 0
    491c:	09 f4       	brne	.+2      	; 0x4920 <parseEvent+0x212>
    491e:	68 c1       	rjmp	.+720    	; 0x4bf0 <parseEvent+0x4e2>
      (mf->_sysexHandler)(&sev);
    4920:	ce 01       	movw	r24, r28
    4922:	04 96       	adiw	r24, 0x04	; 4
    4924:	09 95       	icall
#endif
  }
  break;
    4926:	64 c1       	rjmp	.+712    	; 0x4bf0 <parseEvent+0x4e2>
  case 0xff:  // meta_event = 0xFF + <meta_type:1> + <length:v> + <event_data_bytes>
  {
    meta_event mev;

    //eType = 
	f_read(&mf->_fd,&eType,1,&bRead);
    4928:	9e 01       	movw	r18, r28
    492a:	2e 5f       	subi	r18, 0xFE	; 254
    492c:	3f 4f       	sbci	r19, 0xFF	; 255
    492e:	41 e0       	ldi	r20, 0x01	; 1
    4930:	50 e0       	ldi	r21, 0x00	; 0
    4932:	be 01       	movw	r22, r28
    4934:	6f 5f       	subi	r22, 0xFF	; 255
    4936:	7f 4f       	sbci	r23, 0xFF	; 255
    4938:	c7 01       	movw	r24, r14
    493a:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <f_read>
    mLen =  readVarLen(&mf->_fd);
    493e:	c7 01       	movw	r24, r14
    4940:	0e 94 10 23 	call	0x4620	; 0x4620 <readVarLen>
    4944:	2b 01       	movw	r4, r22
    4946:	3c 01       	movw	r6, r24

    mev.track = t->_trackId;
    4948:	f8 01       	movw	r30, r16
    494a:	80 81       	ld	r24, Z
    494c:	8c 83       	std	Y+4, r24	; 0x04
    mev.size = mLen;
    494e:	5e 82       	std	Y+6, r5	; 0x06
    4950:	4d 82       	std	Y+5, r4	; 0x05
    mev.type = eType;
    4952:	89 81       	ldd	r24, Y+1	; 0x01
    4954:	8f 83       	std	Y+7, r24	; 0x07

    DUMPX("[META] Type: 0x", eType);
    DUMP("\tLen: ", mLen);
    DUMPS("\t");

    switch (eType)
    4956:	8f 32       	cpi	r24, 0x2F	; 47
    4958:	99 f0       	breq	.+38     	; 0x4980 <parseEvent+0x272>
    495a:	48 f4       	brcc	.+18     	; 0x496e <parseEvent+0x260>
    495c:	80 32       	cpi	r24, 0x20	; 32
    495e:	09 f4       	brne	.+2      	; 0x4962 <parseEvent+0x254>
    4960:	e8 c0       	rjmp	.+464    	; 0x4b32 <parseEvent+0x424>
    4962:	81 32       	cpi	r24, 0x21	; 33
    4964:	09 f4       	brne	.+2      	; 0x4968 <parseEvent+0x25a>
    4966:	eb c0       	rjmp	.+470    	; 0x4b3e <parseEvent+0x430>
    4968:	81 11       	cpse	r24, r1
    496a:	ef c0       	rjmp	.+478    	; 0x4b4a <parseEvent+0x43c>
    496c:	db c0       	rjmp	.+438    	; 0x4b24 <parseEvent+0x416>
    496e:	88 35       	cpi	r24, 0x58	; 88
    4970:	e1 f0       	breq	.+56     	; 0x49aa <parseEvent+0x29c>
    4972:	89 35       	cpi	r24, 0x59	; 89
    4974:	09 f4       	brne	.+2      	; 0x4978 <parseEvent+0x26a>
    4976:	56 c0       	rjmp	.+172    	; 0x4a24 <parseEvent+0x316>
    4978:	81 35       	cpi	r24, 0x51	; 81
    497a:	09 f0       	breq	.+2      	; 0x497e <parseEvent+0x270>
    497c:	e6 c0       	rjmp	.+460    	; 0x4b4a <parseEvent+0x43c>
    497e:	03 c0       	rjmp	.+6      	; 0x4986 <parseEvent+0x278>
    {
      case 0x2f:  // End of track
      {
        t->_endOfTrack = TRUE;
    4980:	81 e0       	ldi	r24, 0x01	; 1
    4982:	85 87       	std	Z+13, r24	; 0x0d
        DUMPS("END OF TRACK");
      }
      break;
    4984:	27 c1       	rjmp	.+590    	; 0x4bd4 <parseEvent+0x4c6>

      case 0x51:  // set Tempo - really the microseconds per tick
      {
        uint32_t value = readMultiByte(&mf->_fd, MB_TRYTE);
    4986:	63 e0       	ldi	r22, 0x03	; 3
    4988:	c7 01       	movw	r24, r14
    498a:	0e 94 cf 22 	call	0x459e	; 0x459e <readMultiByte>
    498e:	16 2f       	mov	r17, r22
    4990:	07 2f       	mov	r16, r23
    4992:	f8 2e       	mov	r15, r24
        
        setMicrosecondPerQuarterNote(mf,value);
    4994:	46 2f       	mov	r20, r22
    4996:	57 2f       	mov	r21, r23
    4998:	68 2f       	mov	r22, r24
    499a:	79 2f       	mov	r23, r25
    499c:	c6 01       	movw	r24, r12
    499e:	0e 94 4b 20 	call	0x4096	; 0x4096 <setMicrosecondPerQuarterNote>
        
        mev.data[0] = (value >> 16) & 0xFF;
    49a2:	f8 86       	std	Y+8, r15	; 0x08
        mev.data[1] = (value >> 8) & 0xFF;
    49a4:	09 87       	std	Y+9, r16	; 0x09
        mev.data[2] = value & 0xFF;
    49a6:	1a 87       	std	Y+10, r17	; 0x0a
        
        DUMP("SET TEMPO to ", getTickTime(mf));
        DUMP(" us/tick or ", getTempo(mf));
        DUMPS(" beats/min");
      }
      break;
    49a8:	15 c1       	rjmp	.+554    	; 0x4bd4 <parseEvent+0x4c6>

      case 0x58:  // time signature
      {
        uint8_t n,d;
		f_read(&mf->_fd,&n,1,&bRead);
    49aa:	9e 01       	movw	r18, r28
    49ac:	2e 5f       	subi	r18, 0xFE	; 254
    49ae:	3f 4f       	sbci	r19, 0xFF	; 255
    49b0:	41 e0       	ldi	r20, 0x01	; 1
    49b2:	50 e0       	ldi	r21, 0x00	; 0
    49b4:	be 01       	movw	r22, r28
    49b6:	62 5a       	subi	r22, 0xA2	; 162
    49b8:	7f 4f       	sbci	r23, 0xFF	; 255
    49ba:	c7 01       	movw	r24, r14
    49bc:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <f_read>
        f_read(&mf->_fd,&d,1,&bRead);
    49c0:	9e 01       	movw	r18, r28
    49c2:	2e 5f       	subi	r18, 0xFE	; 254
    49c4:	3f 4f       	sbci	r19, 0xFF	; 255
    49c6:	41 e0       	ldi	r20, 0x01	; 1
    49c8:	50 e0       	ldi	r21, 0x00	; 0
    49ca:	be 01       	movw	r22, r28
    49cc:	66 5c       	subi	r22, 0xC6	; 198
    49ce:	7f 4f       	sbci	r23, 0xFF	; 255
    49d0:	c7 01       	movw	r24, r14
    49d2:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <f_read>
        
        setTimeSignature(mf,n, 1 << d);  // denominator is 2^n
    49d6:	41 e0       	ldi	r20, 0x01	; 1
    49d8:	50 e0       	ldi	r21, 0x00	; 0
    49da:	0a ac       	ldd	r0, Y+58	; 0x3a
    49dc:	02 c0       	rjmp	.+4      	; 0x49e2 <parseEvent+0x2d4>
    49de:	44 0f       	add	r20, r20
    49e0:	55 1f       	adc	r21, r21
    49e2:	0a 94       	dec	r0
    49e4:	e2 f7       	brpl	.-8      	; 0x49de <parseEvent+0x2d0>
    49e6:	6f 96       	adiw	r28, 0x1f	; 31
    49e8:	6f ad       	ldd	r22, Y+63	; 0x3f
    49ea:	6f 97       	sbiw	r28, 0x1f	; 31
    49ec:	c6 01       	movw	r24, r12
    49ee:	0e 94 42 20 	call	0x4084	; 0x4084 <setTimeSignature>
        f_lseek(&mf->_fd,f_tell(&mf->_fd) + (mLen - 2));
    49f2:	f6 01       	movw	r30, r12
    49f4:	44 85       	ldd	r20, Z+12	; 0x0c
    49f6:	55 85       	ldd	r21, Z+13	; 0x0d
    49f8:	66 85       	ldd	r22, Z+14	; 0x0e
    49fa:	77 85       	ldd	r23, Z+15	; 0x0f
    49fc:	42 50       	subi	r20, 0x02	; 2
    49fe:	51 09       	sbc	r21, r1
    4a00:	61 09       	sbc	r22, r1
    4a02:	71 09       	sbc	r23, r1
    4a04:	44 0d       	add	r20, r4
    4a06:	55 1d       	adc	r21, r5
    4a08:	66 1d       	adc	r22, r6
    4a0a:	77 1d       	adc	r23, r7
    4a0c:	c7 01       	movw	r24, r14
    4a0e:	0e 94 34 14 	call	0x2868	; 0x2868 <f_lseek>

        mev.data[0] = n;
    4a12:	6f 96       	adiw	r28, 0x1f	; 31
    4a14:	8f ad       	ldd	r24, Y+63	; 0x3f
    4a16:	6f 97       	sbiw	r28, 0x1f	; 31
    4a18:	88 87       	std	Y+8, r24	; 0x08
        mev.data[1] = d;
    4a1a:	8a ad       	ldd	r24, Y+58	; 0x3a
    4a1c:	89 87       	std	Y+9, r24	; 0x09
        mev.data[2] = 0;
    4a1e:	1a 86       	std	Y+10, r1	; 0x0a
        mev.data[3] = 0;
    4a20:	1b 86       	std	Y+11, r1	; 0x0b

        DUMP("SET TIME SIGNATURE to ", getTimeSignature(mf) >> 8);
        DUMP("/", getTimeSignature(mf) & 0xf);
      }
      break;
    4a22:	d8 c0       	rjmp	.+432    	; 0x4bd4 <parseEvent+0x4c6>

      case 0x59:  // Key Signature
      {
        int8_t sf,mi;
		DUMPS("KEY SIGNATURE");
        f_read(&mf->_fd,&sf,1,&bRead);
    4a24:	9e 01       	movw	r18, r28
    4a26:	2e 5f       	subi	r18, 0xFE	; 254
    4a28:	3f 4f       	sbci	r19, 0xFF	; 255
    4a2a:	41 e0       	ldi	r20, 0x01	; 1
    4a2c:	50 e0       	ldi	r21, 0x00	; 0
    4a2e:	be 01       	movw	r22, r28
    4a30:	61 5a       	subi	r22, 0xA1	; 161
    4a32:	7f 4f       	sbci	r23, 0xFF	; 255
    4a34:	c7 01       	movw	r24, r14
    4a36:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <f_read>
        f_read(&mf->_fd,&mi,1,&bRead);
    4a3a:	9e 01       	movw	r18, r28
    4a3c:	2e 5f       	subi	r18, 0xFE	; 254
    4a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    4a40:	41 e0       	ldi	r20, 0x01	; 1
    4a42:	50 e0       	ldi	r21, 0x00	; 0
    4a44:	be 01       	movw	r22, r28
    4a46:	62 5a       	subi	r22, 0xA2	; 162
    4a48:	7f 4f       	sbci	r23, 0xFF	; 255
    4a4a:	c7 01       	movw	r24, r14
    4a4c:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <f_read>
        const char* aaa[] = {"Cb", "Gb", "Db", "Ab", "Eb", "Bb", "F", "C", "G", "D", "A", "E", "B", "F#", "C#", "G#", "D#", "A#"};
    4a50:	84 e2       	ldi	r24, 0x24	; 36
    4a52:	e0 e8       	ldi	r30, 0x80	; 128
    4a54:	f0 e0       	ldi	r31, 0x00	; 0
    4a56:	de 01       	movw	r26, r28
    4a58:	da 96       	adiw	r26, 0x3a	; 58
    4a5a:	01 90       	ld	r0, Z+
    4a5c:	0d 92       	st	X+, r0
    4a5e:	8a 95       	dec	r24
    4a60:	e1 f7       	brne	.-8      	; 0x4a5a <parseEvent+0x34c>

        if (sf >= -7 && sf <= 7) 
    4a62:	a0 96       	adiw	r28, 0x20	; 32
    4a64:	ef ad       	ldd	r30, Y+63	; 0x3f
    4a66:	a0 97       	sbiw	r28, 0x20	; 32
    4a68:	87 e0       	ldi	r24, 0x07	; 7
    4a6a:	8e 0f       	add	r24, r30
    4a6c:	8f 30       	cpi	r24, 0x0F	; 15
    4a6e:	08 f0       	brcs	.+2      	; 0x4a72 <parseEvent+0x364>
    4a70:	45 c0       	rjmp	.+138    	; 0x4afc <parseEvent+0x3ee>
        {
          switch(mi)
    4a72:	6f 96       	adiw	r28, 0x1f	; 31
    4a74:	8f ad       	ldd	r24, Y+63	; 0x3f
    4a76:	6f 97       	sbiw	r28, 0x1f	; 31
    4a78:	88 23       	and	r24, r24
    4a7a:	19 f0       	breq	.+6      	; 0x4a82 <parseEvent+0x374>
    4a7c:	81 30       	cpi	r24, 0x01	; 1
    4a7e:	d9 f0       	breq	.+54     	; 0x4ab6 <parseEvent+0x3a8>
    4a80:	34 c0       	rjmp	.+104    	; 0x4aea <parseEvent+0x3dc>
          {
            case 0:
              strcpy(mev.chars, aaa[sf+7]);
    4a82:	0e 2e       	mov	r0, r30
    4a84:	00 0c       	add	r0, r0
    4a86:	ff 0b       	sbc	r31, r31
    4a88:	37 96       	adiw	r30, 0x07	; 7
    4a8a:	ee 0f       	add	r30, r30
    4a8c:	ff 1f       	adc	r31, r31
    4a8e:	ec 0f       	add	r30, r28
    4a90:	fd 1f       	adc	r31, r29
    4a92:	62 ad       	ldd	r22, Z+58	; 0x3a
    4a94:	73 ad       	ldd	r23, Z+59	; 0x3b
    4a96:	8e 01       	movw	r16, r28
    4a98:	08 5f       	subi	r16, 0xF8	; 248
    4a9a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a9c:	c8 01       	movw	r24, r16
    4a9e:	0e 94 99 34 	call	0x6932	; 0x6932 <strcpy>
              strcat(mev.chars, "M");
    4aa2:	f8 01       	movw	r30, r16
    4aa4:	01 90       	ld	r0, Z+
    4aa6:	00 20       	and	r0, r0
    4aa8:	e9 f7       	brne	.-6      	; 0x4aa4 <parseEvent+0x396>
    4aaa:	31 97       	sbiw	r30, 0x01	; 1
    4aac:	8d e4       	ldi	r24, 0x4D	; 77
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	91 83       	std	Z+1, r25	; 0x01
    4ab2:	80 83       	st	Z, r24
              break;
    4ab4:	2b c0       	rjmp	.+86     	; 0x4b0c <parseEvent+0x3fe>
            case 1:
              strcpy(mev.chars, aaa[sf+10]);
    4ab6:	0e 2e       	mov	r0, r30
    4ab8:	00 0c       	add	r0, r0
    4aba:	ff 0b       	sbc	r31, r31
    4abc:	3a 96       	adiw	r30, 0x0a	; 10
    4abe:	ee 0f       	add	r30, r30
    4ac0:	ff 1f       	adc	r31, r31
    4ac2:	ec 0f       	add	r30, r28
    4ac4:	fd 1f       	adc	r31, r29
    4ac6:	62 ad       	ldd	r22, Z+58	; 0x3a
    4ac8:	73 ad       	ldd	r23, Z+59	; 0x3b
    4aca:	8e 01       	movw	r16, r28
    4acc:	08 5f       	subi	r16, 0xF8	; 248
    4ace:	1f 4f       	sbci	r17, 0xFF	; 255
    4ad0:	c8 01       	movw	r24, r16
    4ad2:	0e 94 99 34 	call	0x6932	; 0x6932 <strcpy>
              strcat(mev.chars, "m");
    4ad6:	f8 01       	movw	r30, r16
    4ad8:	01 90       	ld	r0, Z+
    4ada:	00 20       	and	r0, r0
    4adc:	e9 f7       	brne	.-6      	; 0x4ad8 <parseEvent+0x3ca>
    4ade:	31 97       	sbiw	r30, 0x01	; 1
    4ae0:	8d e6       	ldi	r24, 0x6D	; 109
    4ae2:	90 e0       	ldi	r25, 0x00	; 0
    4ae4:	91 83       	std	Z+1, r25	; 0x01
    4ae6:	80 83       	st	Z, r24
              break;
    4ae8:	11 c0       	rjmp	.+34     	; 0x4b0c <parseEvent+0x3fe>
            default:
              strcpy(mev.chars, "Err"); // error mi
    4aea:	85 e4       	ldi	r24, 0x45	; 69
    4aec:	92 e7       	ldi	r25, 0x72	; 114
    4aee:	99 87       	std	Y+9, r25	; 0x09
    4af0:	88 87       	std	Y+8, r24	; 0x08
    4af2:	82 e7       	ldi	r24, 0x72	; 114
    4af4:	90 e0       	ldi	r25, 0x00	; 0
    4af6:	9b 87       	std	Y+11, r25	; 0x0b
    4af8:	8a 87       	std	Y+10, r24	; 0x0a
    4afa:	08 c0       	rjmp	.+16     	; 0x4b0c <parseEvent+0x3fe>
          }
        } else
          strcpy(mev.chars, "Err"); // error sf
    4afc:	85 e4       	ldi	r24, 0x45	; 69
    4afe:	92 e7       	ldi	r25, 0x72	; 114
    4b00:	99 87       	std	Y+9, r25	; 0x09
    4b02:	88 87       	std	Y+8, r24	; 0x08
    4b04:	82 e7       	ldi	r24, 0x72	; 114
    4b06:	90 e0       	ldi	r25, 0x00	; 0
    4b08:	9b 87       	std	Y+11, r25	; 0x0b
    4b0a:	8a 87       	std	Y+10, r24	; 0x0a

        mev.size = strlen(mev.chars); // change META length
    4b0c:	de 01       	movw	r26, r28
    4b0e:	18 96       	adiw	r26, 0x08	; 8
    4b10:	fd 01       	movw	r30, r26
    4b12:	01 90       	ld	r0, Z+
    4b14:	00 20       	and	r0, r0
    4b16:	e9 f7       	brne	.-6      	; 0x4b12 <parseEvent+0x404>
    4b18:	31 97       	sbiw	r30, 0x01	; 1
    4b1a:	ea 1b       	sub	r30, r26
    4b1c:	fb 0b       	sbc	r31, r27
    4b1e:	fe 83       	std	Y+6, r31	; 0x06
    4b20:	ed 83       	std	Y+5, r30	; 0x05
        DUMP(" ", mev.chars);
      }
      break;
    4b22:	58 c0       	rjmp	.+176    	; 0x4bd4 <parseEvent+0x4c6>

      case 0x00:  // Sequence Number
      {
        uint16_t x = readMultiByte(&mf->_fd, MB_WORD);
    4b24:	62 e0       	ldi	r22, 0x02	; 2
    4b26:	c7 01       	movw	r24, r14
    4b28:	0e 94 cf 22 	call	0x459e	; 0x459e <readMultiByte>

        mev.data[0] = (x >> 8) & 0xFF;
    4b2c:	78 87       	std	Y+8, r23	; 0x08
        mev.data[1] = x & 0xFF;
    4b2e:	69 87       	std	Y+9, r22	; 0x09

        DUMP("SEQUENCE NUMBER ", mev.data[0]);
        DUMP(" ", mev.data[1]);
      }
      break;
    4b30:	51 c0       	rjmp	.+162    	; 0x4bd4 <parseEvent+0x4c6>

      case 0x20:  // Channel Prefix
      mev.data[0] = readMultiByte(&mf->_fd, MB_BYTE);
    4b32:	61 e0       	ldi	r22, 0x01	; 1
    4b34:	c7 01       	movw	r24, r14
    4b36:	0e 94 cf 22 	call	0x459e	; 0x459e <readMultiByte>
    4b3a:	68 87       	std	Y+8, r22	; 0x08
      DUMP("CHANNEL PREFIX ", mev.data[0]);
      break;
    4b3c:	4b c0       	rjmp	.+150    	; 0x4bd4 <parseEvent+0x4c6>

      case 0x21:  // Port Prefix
      mev.data[0] = readMultiByte(&mf->_fd, MB_BYTE);
    4b3e:	61 e0       	ldi	r22, 0x01	; 1
    4b40:	c7 01       	movw	r24, r14
    4b42:	0e 94 cf 22 	call	0x459e	; 0x459e <readMultiByte>
    4b46:	68 87       	std	Y+8, r22	; 0x08
      DUMP("PORT PREFIX ", mev.data[0]);
      break;
    4b48:	45 c0       	rjmp	.+138    	; 0x4bd4 <parseEvent+0x4c6>
      break;
#endif // SHOW_UNUSED_META

      default:
      {
        uint8_t minLen = min(ARRAY_SIZE(mev.data), mLen);
    4b4a:	84 2d       	mov	r24, r4
    4b4c:	f3 e3       	ldi	r31, 0x33	; 51
    4b4e:	4f 16       	cp	r4, r31
    4b50:	51 04       	cpc	r5, r1
    4b52:	61 04       	cpc	r6, r1
    4b54:	71 04       	cpc	r7, r1
    4b56:	08 f0       	brcs	.+2      	; 0x4b5a <parseEvent+0x44c>
    4b58:	82 e3       	ldi	r24, 0x32	; 50
    4b5a:	98 2e       	mov	r9, r24
        
        for (uint8_t i = 0; i < minLen; ++i)
    4b5c:	88 23       	and	r24, r24
    4b5e:	01 f1       	breq	.+64     	; 0x4ba0 <parseEvent+0x492>
    4b60:	04 e0       	ldi	r16, 0x04	; 4
    4b62:	10 e0       	ldi	r17, 0x00	; 0
    4b64:	0c 0f       	add	r16, r28
    4b66:	1d 1f       	adc	r17, r29
    4b68:	0c 5f       	subi	r16, 0xFC	; 252
    4b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    4b6c:	81 50       	subi	r24, 0x01	; 1
    4b6e:	a8 2e       	mov	r10, r24
    4b70:	b1 2c       	mov	r11, r1
    4b72:	85 e0       	ldi	r24, 0x05	; 5
    4b74:	a8 0e       	add	r10, r24
    4b76:	b1 1c       	adc	r11, r1
    4b78:	a4 e0       	ldi	r26, 0x04	; 4
    4b7a:	b0 e0       	ldi	r27, 0x00	; 0
    4b7c:	ac 0f       	add	r26, r28
    4b7e:	bd 1f       	adc	r27, r29
    4b80:	aa 0e       	add	r10, r26
    4b82:	bb 1e       	adc	r11, r27
          f_read(&mf->_fd,&mev.data[i],1,&bRead); // read next
    4b84:	9e 01       	movw	r18, r28
    4b86:	2e 5f       	subi	r18, 0xFE	; 254
    4b88:	3f 4f       	sbci	r19, 0xFF	; 255
    4b8a:	41 e0       	ldi	r20, 0x01	; 1
    4b8c:	50 e0       	ldi	r21, 0x00	; 0
    4b8e:	b8 01       	movw	r22, r16
    4b90:	c7 01       	movw	r24, r14
    4b92:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <f_read>
    4b96:	0f 5f       	subi	r16, 0xFF	; 255
    4b98:	1f 4f       	sbci	r17, 0xFF	; 255

      default:
      {
        uint8_t minLen = min(ARRAY_SIZE(mev.data), mLen);
        
        for (uint8_t i = 0; i < minLen; ++i)
    4b9a:	a0 16       	cp	r10, r16
    4b9c:	b1 06       	cpc	r11, r17
    4b9e:	91 f7       	brne	.-28     	; 0x4b84 <parseEvent+0x476>
          f_read(&mf->_fd,&mev.data[i],1,&bRead); // read next
		 		  
        mev.chars[minLen] = '\0'; // in case it is a string
    4ba0:	fe 01       	movw	r30, r28
    4ba2:	e9 0d       	add	r30, r9
    4ba4:	f1 1d       	adc	r31, r1
    4ba6:	10 86       	std	Z+8, r1	; 0x08
        if (mLen > ARRAY_SIZE(mev.data))
    4ba8:	b3 e3       	ldi	r27, 0x33	; 51
    4baa:	4b 16       	cp	r4, r27
    4bac:	51 04       	cpc	r5, r1
    4bae:	61 04       	cpc	r6, r1
    4bb0:	71 04       	cpc	r7, r1
    4bb2:	80 f0       	brcs	.+32     	; 0x4bd4 <parseEvent+0x4c6>
          f_lseek(&mf->_fd,f_tell(&mf->_fd) + (mLen-ARRAY_SIZE(mev.data)));
    4bb4:	f6 01       	movw	r30, r12
    4bb6:	44 85       	ldd	r20, Z+12	; 0x0c
    4bb8:	55 85       	ldd	r21, Z+13	; 0x0d
    4bba:	66 85       	ldd	r22, Z+14	; 0x0e
    4bbc:	77 85       	ldd	r23, Z+15	; 0x0f
    4bbe:	42 53       	subi	r20, 0x32	; 50
    4bc0:	51 09       	sbc	r21, r1
    4bc2:	61 09       	sbc	r22, r1
    4bc4:	71 09       	sbc	r23, r1
    4bc6:	44 0d       	add	r20, r4
    4bc8:	55 1d       	adc	r21, r5
    4bca:	66 1d       	adc	r22, r6
    4bcc:	77 1d       	adc	r23, r7
    4bce:	c7 01       	movw	r24, r14
    4bd0:	0e 94 34 14 	call	0x2868	; 0x2868 <f_lseek>
  //    DUMPS("IGNORED");
      }
      break;
    }
    if (mf->_metaHandler != NULL)
    4bd4:	d6 01       	movw	r26, r12
    4bd6:	14 96       	adiw	r26, 0x04	; 4
    4bd8:	ed 91       	ld	r30, X+
    4bda:	fc 91       	ld	r31, X
    4bdc:	15 97       	sbiw	r26, 0x05	; 5
    4bde:	30 97       	sbiw	r30, 0x00	; 0
    4be0:	39 f0       	breq	.+14     	; 0x4bf0 <parseEvent+0x4e2>
      (mf->_metaHandler)(&mev);
    4be2:	ce 01       	movw	r24, r28
    4be4:	04 96       	adiw	r24, 0x04	; 4
    4be6:	09 95       	icall
  }
  break;
    4be8:	03 c0       	rjmp	.+6      	; 0x4bf0 <parseEvent+0x4e2>
  
// ---------------------------- UNKNOWN
  default:
    // stop playing this track as we cannot identify the eType
    t->_endOfTrack = TRUE;
    4bea:	81 e0       	ldi	r24, 0x01	; 1
    4bec:	f8 01       	movw	r30, r16
    4bee:	85 87       	std	Z+13, r24	; 0x0d
    DUMPX("[UKNOWN 0x", eType);
    DUMPS("] Track aborted");
    break;
  }
}
    4bf0:	c1 5a       	subi	r28, 0xA1	; 161
    4bf2:	df 4f       	sbci	r29, 0xFF	; 255
    4bf4:	0f b6       	in	r0, 0x3f	; 63
    4bf6:	f8 94       	cli
    4bf8:	de bf       	out	0x3e, r29	; 62
    4bfa:	0f be       	out	0x3f, r0	; 63
    4bfc:	cd bf       	out	0x3d, r28	; 61
    4bfe:	df 91       	pop	r29
    4c00:	cf 91       	pop	r28
    4c02:	1f 91       	pop	r17
    4c04:	0f 91       	pop	r16
    4c06:	ff 90       	pop	r15
    4c08:	ef 90       	pop	r14
    4c0a:	df 90       	pop	r13
    4c0c:	cf 90       	pop	r12
    4c0e:	bf 90       	pop	r11
    4c10:	af 90       	pop	r10
    4c12:	9f 90       	pop	r9
    4c14:	8f 90       	pop	r8
    4c16:	7f 90       	pop	r7
    4c18:	6f 90       	pop	r6
    4c1a:	5f 90       	pop	r5
    4c1c:	4f 90       	pop	r4
    4c1e:	08 95       	ret

00004c20 <getNextTrackEvent>:
  t->_elapsedTicks = 0;
}

BOOL getNextTrackEvent(struct MD_MIDIFile *mf,struct MD_MFTrack *t, uint16_t tickCount)
// track_event = <time:v> + [<midi_event> | <meta_event> | <sysex_event>]
{
    4c20:	8f 92       	push	r8
    4c22:	9f 92       	push	r9
    4c24:	af 92       	push	r10
    4c26:	bf 92       	push	r11
    4c28:	cf 92       	push	r12
    4c2a:	df 92       	push	r13
    4c2c:	ef 92       	push	r14
    4c2e:	ff 92       	push	r15
    4c30:	1f 93       	push	r17
    4c32:	cf 93       	push	r28
    4c34:	df 93       	push	r29
  uint32_t deltaT;

  // is there anything to process?
  if (t->_endOfTrack)
    4c36:	fb 01       	movw	r30, r22
    4c38:	15 85       	ldd	r17, Z+13	; 0x0d
    4c3a:	11 11       	cpse	r17, r1
    4c3c:	61 c0       	rjmp	.+194    	; 0x4d00 <getNextTrackEvent+0xe0>
    4c3e:	6a 01       	movw	r12, r20
    4c40:	eb 01       	movw	r28, r22
    4c42:	7c 01       	movw	r14, r24
    return(FALSE);

  // move the file pointer to where we left off
  f_lseek(&mf->_fd,t->_startOffset+t->_currOffset);  
    4c44:	5c 01       	movw	r10, r24
    4c46:	f6 e0       	ldi	r31, 0x06	; 6
    4c48:	af 0e       	add	r10, r31
    4c4a:	b1 1c       	adc	r11, r1
    4c4c:	4d 81       	ldd	r20, Y+5	; 0x05
    4c4e:	5e 81       	ldd	r21, Y+6	; 0x06
    4c50:	6f 81       	ldd	r22, Y+7	; 0x07
    4c52:	78 85       	ldd	r23, Y+8	; 0x08
    4c54:	89 85       	ldd	r24, Y+9	; 0x09
    4c56:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c58:	ab 85       	ldd	r26, Y+11	; 0x0b
    4c5a:	bc 85       	ldd	r27, Y+12	; 0x0c
    4c5c:	48 0f       	add	r20, r24
    4c5e:	59 1f       	adc	r21, r25
    4c60:	6a 1f       	adc	r22, r26
    4c62:	7b 1f       	adc	r23, r27
    4c64:	c5 01       	movw	r24, r10
    4c66:	0e 94 34 14 	call	0x2868	; 0x2868 <f_lseek>

  // Work out new total elapsed ticks - include the overshoot from
  // last event.
  t->_elapsedTicks += tickCount;
    4c6a:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c6c:	9f 85       	ldd	r25, Y+15	; 0x0f
    4c6e:	a8 89       	ldd	r26, Y+16	; 0x10
    4c70:	b9 89       	ldd	r27, Y+17	; 0x11
    4c72:	8c 0d       	add	r24, r12
    4c74:	9d 1d       	adc	r25, r13
    4c76:	a1 1d       	adc	r26, r1
    4c78:	b1 1d       	adc	r27, r1
    4c7a:	8e 87       	std	Y+14, r24	; 0x0e
    4c7c:	9f 87       	std	Y+15, r25	; 0x0f
    4c7e:	a8 8b       	std	Y+16, r26	; 0x10
    4c80:	b9 8b       	std	Y+17, r27	; 0x11

  // Get the DeltaT from the file in order to see if enough ticks have
  // passed for the event to be active.
  deltaT = readVarLen(&mf->_fd);
    4c82:	c5 01       	movw	r24, r10
    4c84:	0e 94 10 23 	call	0x4620	; 0x4620 <readVarLen>

  // If not enough ticks, just return without saving the file pointer and 
  // we will go back to the same spot next time.
  if (t->_elapsedTicks < deltaT)
    4c88:	8e 84       	ldd	r8, Y+14	; 0x0e
    4c8a:	9f 84       	ldd	r9, Y+15	; 0x0f
    4c8c:	a8 88       	ldd	r10, Y+16	; 0x10
    4c8e:	b9 88       	ldd	r11, Y+17	; 0x11
    4c90:	86 16       	cp	r8, r22
    4c92:	97 06       	cpc	r9, r23
    4c94:	a8 06       	cpc	r10, r24
    4c96:	b9 06       	cpc	r11, r25
    4c98:	a0 f1       	brcs	.+104    	; 0x4d02 <getNextTrackEvent+0xe2>
    return(FALSE);

  // Adjust the total elapsed time to the error against actual DeltaT to avoid 
  // accumulation of errors, as we only check for _elapsedTicks being >= ticks,
  // giving positive biased errors every time.
  t->_elapsedTicks -= deltaT;
    4c9a:	a5 01       	movw	r20, r10
    4c9c:	94 01       	movw	r18, r8
    4c9e:	26 1b       	sub	r18, r22
    4ca0:	37 0b       	sbc	r19, r23
    4ca2:	48 0b       	sbc	r20, r24
    4ca4:	59 0b       	sbc	r21, r25
    4ca6:	2e 87       	std	Y+14, r18	; 0x0e
    4ca8:	3f 87       	std	Y+15, r19	; 0x0f
    4caa:	48 8b       	std	Y+16, r20	; 0x10
    4cac:	59 8b       	std	Y+17, r21	; 0x11

  DUMP("\ndT: ", deltaT);
  DUMP(" + ", _elapsedTicks);
  DUMPS("\t");

  parseEvent(mf,t);
    4cae:	be 01       	movw	r22, r28
    4cb0:	c7 01       	movw	r24, r14
    4cb2:	0e 94 87 23 	call	0x470e	; 0x470e <parseEvent>

  // remember the offset for next time
  t->_currOffset = mf->_fd.fptr - t->_startOffset;
    4cb6:	f7 01       	movw	r30, r14
    4cb8:	84 85       	ldd	r24, Z+12	; 0x0c
    4cba:	95 85       	ldd	r25, Z+13	; 0x0d
    4cbc:	a6 85       	ldd	r26, Z+14	; 0x0e
    4cbe:	b7 85       	ldd	r27, Z+15	; 0x0f
    4cc0:	4d 81       	ldd	r20, Y+5	; 0x05
    4cc2:	5e 81       	ldd	r21, Y+6	; 0x06
    4cc4:	6f 81       	ldd	r22, Y+7	; 0x07
    4cc6:	78 85       	ldd	r23, Y+8	; 0x08
    4cc8:	84 1b       	sub	r24, r20
    4cca:	95 0b       	sbc	r25, r21
    4ccc:	a6 0b       	sbc	r26, r22
    4cce:	b7 0b       	sbc	r27, r23
    4cd0:	89 87       	std	Y+9, r24	; 0x09
    4cd2:	9a 87       	std	Y+10, r25	; 0x0a
    4cd4:	ab 87       	std	Y+11, r26	; 0x0b
    4cd6:	bc 87       	std	Y+12, r27	; 0x0c

  // catch end of track when there is no META event  
  t->_endOfTrack = t->_endOfTrack || (t->_currOffset >= t->_length);
    4cd8:	2d 85       	ldd	r18, Y+13	; 0x0d
    4cda:	21 11       	cpse	r18, r1
    4cdc:	0d c0       	rjmp	.+26     	; 0x4cf8 <getNextTrackEvent+0xd8>
    4cde:	21 e0       	ldi	r18, 0x01	; 1
    4ce0:	49 81       	ldd	r20, Y+1	; 0x01
    4ce2:	5a 81       	ldd	r21, Y+2	; 0x02
    4ce4:	6b 81       	ldd	r22, Y+3	; 0x03
    4ce6:	7c 81       	ldd	r23, Y+4	; 0x04
    4ce8:	84 17       	cp	r24, r20
    4cea:	95 07       	cpc	r25, r21
    4cec:	a6 07       	cpc	r26, r22
    4cee:	b7 07       	cpc	r27, r23
    4cf0:	08 f4       	brcc	.+2      	; 0x4cf4 <getNextTrackEvent+0xd4>
    4cf2:	20 e0       	ldi	r18, 0x00	; 0
    4cf4:	82 2f       	mov	r24, r18
    4cf6:	01 c0       	rjmp	.+2      	; 0x4cfa <getNextTrackEvent+0xda>
    4cf8:	81 e0       	ldi	r24, 0x01	; 1
    4cfa:	8d 87       	std	Y+13, r24	; 0x0d
  if (t->_endOfTrack) DUMPS(" - OUT OF TRACK");

  return(TRUE);
    4cfc:	11 e0       	ldi	r17, 0x01	; 1
    4cfe:	01 c0       	rjmp	.+2      	; 0x4d02 <getNextTrackEvent+0xe2>
{
  uint32_t deltaT;

  // is there anything to process?
  if (t->_endOfTrack)
    return(FALSE);
    4d00:	10 e0       	ldi	r17, 0x00	; 0
  // catch end of track when there is no META event  
  t->_endOfTrack = t->_endOfTrack || (t->_currOffset >= t->_length);
  if (t->_endOfTrack) DUMPS(" - OUT OF TRACK");

  return(TRUE);
}
    4d02:	81 2f       	mov	r24, r17
    4d04:	df 91       	pop	r29
    4d06:	cf 91       	pop	r28
    4d08:	1f 91       	pop	r17
    4d0a:	ff 90       	pop	r15
    4d0c:	ef 90       	pop	r14
    4d0e:	df 90       	pop	r13
    4d10:	cf 90       	pop	r12
    4d12:	bf 90       	pop	r11
    4d14:	af 90       	pop	r10
    4d16:	9f 90       	pop	r9
    4d18:	8f 90       	pop	r8
    4d1a:	08 95       	ret

00004d1c <loadTrack>:
    break;
  }
}

int loadTrack(struct MD_MFTrack *t,uint8_t trackId, struct MD_MIDIFile *mf)
{
    4d1c:	8f 92       	push	r8
    4d1e:	9f 92       	push	r9
    4d20:	af 92       	push	r10
    4d22:	bf 92       	push	r11
    4d24:	cf 92       	push	r12
    4d26:	df 92       	push	r13
    4d28:	ef 92       	push	r14
    4d2a:	ff 92       	push	r15
    4d2c:	0f 93       	push	r16
    4d2e:	1f 93       	push	r17
    4d30:	cf 93       	push	r28
    4d32:	df 93       	push	r29
    4d34:	cd b7       	in	r28, 0x3d	; 61
    4d36:	de b7       	in	r29, 0x3e	; 62
    4d38:	29 97       	sbiw	r28, 0x09	; 9
    4d3a:	0f b6       	in	r0, 0x3f	; 63
    4d3c:	f8 94       	cli
    4d3e:	de bf       	out	0x3e, r29	; 62
    4d40:	0f be       	out	0x3f, r0	; 63
    4d42:	cd bf       	out	0x3d, r28	; 61
    4d44:	8c 01       	movw	r16, r24
    4d46:	6a 01       	movw	r12, r20
  uint32_t  dat32;
  uint16_t  dat16;

  // save the trackid for use later
  t->_trackId = t->_mev.track = trackId;
    4d48:	fc 01       	movw	r30, r24
    4d4a:	62 8b       	std	Z+18, r22	; 0x12
    4d4c:	60 83       	st	Z, r22
  // Read the Track header
  // track_chunk = "MTrk" + <length:4> + <track_event> [+ <track_event> ...]
  {
    char    h[MTRK_HDR_SIZE+1]; // Header characters + nul
  
    f_read(&mf->_fd,h,MTRK_HDR_SIZE,&dat32);
    4d4e:	7a 01       	movw	r14, r20
    4d50:	f6 e0       	ldi	r31, 0x06	; 6
    4d52:	ef 0e       	add	r14, r31
    4d54:	f1 1c       	adc	r15, r1
    4d56:	9e 01       	movw	r18, r28
    4d58:	2f 5f       	subi	r18, 0xFF	; 255
    4d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d5c:	44 e0       	ldi	r20, 0x04	; 4
    4d5e:	50 e0       	ldi	r21, 0x00	; 0
    4d60:	be 01       	movw	r22, r28
    4d62:	6b 5f       	subi	r22, 0xFB	; 251
    4d64:	7f 4f       	sbci	r23, 0xFF	; 255
    4d66:	c7 01       	movw	r24, r14
    4d68:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <f_read>
    h[MTRK_HDR_SIZE] = '\0';
    4d6c:	19 86       	std	Y+9, r1	; 0x09

    if (strcmp(h, MTRK_HDR) != 0)
    4d6e:	6e ef       	ldi	r22, 0xFE	; 254
    4d70:	71 e0       	ldi	r23, 0x01	; 1
    4d72:	ce 01       	movw	r24, r28
    4d74:	05 96       	adiw	r24, 0x05	; 5
    4d76:	0e 94 90 34 	call	0x6920	; 0x6920 <strcmp>
    4d7a:	89 2b       	or	r24, r25
    4d7c:	19 f0       	breq	.+6      	; 0x4d84 <loadTrack+0x68>
      return(0);
    4d7e:	80 e0       	ldi	r24, 0x00	; 0
    4d80:	90 e0       	ldi	r25, 0x00	; 0
    4d82:	2b c0       	rjmp	.+86     	; 0x4dda <loadTrack+0xbe>
  }

  // Row read track chunk size and in bytes. This is not really necessary 
  // since the track MUST end with an end of track meta event.
  dat32 = readMultiByte(&mf->_fd, MB_LONG);
    4d84:	64 e0       	ldi	r22, 0x04	; 4
    4d86:	c7 01       	movw	r24, r14
    4d88:	0e 94 cf 22 	call	0x459e	; 0x459e <readMultiByte>
    4d8c:	69 83       	std	Y+1, r22	; 0x01
    4d8e:	7a 83       	std	Y+2, r23	; 0x02
    4d90:	8b 83       	std	Y+3, r24	; 0x03
    4d92:	9c 83       	std	Y+4, r25	; 0x04
  t->_length = dat32;
    4d94:	f8 01       	movw	r30, r16
    4d96:	61 83       	std	Z+1, r22	; 0x01
    4d98:	72 83       	std	Z+2, r23	; 0x02
    4d9a:	83 83       	std	Z+3, r24	; 0x03
    4d9c:	94 83       	std	Z+4, r25	; 0x04

  // save where we are in the file as this is the start of offset for this track
  t->_startOffset = mf->_fd.fptr;
    4d9e:	f6 01       	movw	r30, r12
    4da0:	84 84       	ldd	r8, Z+12	; 0x0c
    4da2:	95 84       	ldd	r9, Z+13	; 0x0d
    4da4:	a6 84       	ldd	r10, Z+14	; 0x0e
    4da6:	b7 84       	ldd	r11, Z+15	; 0x0f
    4da8:	f8 01       	movw	r30, r16
    4daa:	85 82       	std	Z+5, r8	; 0x05
    4dac:	96 82       	std	Z+6, r9	; 0x06
    4dae:	a7 82       	std	Z+7, r10	; 0x07
    4db0:	b0 86       	std	Z+8, r11	; 0x08
  t->_currOffset = 0;
    4db2:	11 86       	std	Z+9, r1	; 0x09
    4db4:	12 86       	std	Z+10, r1	; 0x0a
    4db6:	13 86       	std	Z+11, r1	; 0x0b
    4db8:	14 86       	std	Z+12, r1	; 0x0c

  // Advance the file pointer to the start of the next track;
  if (f_lseek(&mf->_fd,(t->_startOffset+t->_length)) != FR_OK)
    4dba:	ab 01       	movw	r20, r22
    4dbc:	bc 01       	movw	r22, r24
    4dbe:	48 0d       	add	r20, r8
    4dc0:	59 1d       	adc	r21, r9
    4dc2:	6a 1d       	adc	r22, r10
    4dc4:	7b 1d       	adc	r23, r11
    4dc6:	c7 01       	movw	r24, r14
    4dc8:	0e 94 34 14 	call	0x2868	; 0x2868 <f_lseek>
    4dcc:	81 11       	cpse	r24, r1
    4dce:	03 c0       	rjmp	.+6      	; 0x4dd6 <loadTrack+0xba>
    return(1);

  return(-1);
    4dd0:	8f ef       	ldi	r24, 0xFF	; 255
    4dd2:	9f ef       	ldi	r25, 0xFF	; 255
    4dd4:	02 c0       	rjmp	.+4      	; 0x4dda <loadTrack+0xbe>
  t->_startOffset = mf->_fd.fptr;
  t->_currOffset = 0;

  // Advance the file pointer to the start of the next track;
  if (f_lseek(&mf->_fd,(t->_startOffset+t->_length)) != FR_OK)
    return(1);
    4dd6:	81 e0       	ldi	r24, 0x01	; 1
    4dd8:	90 e0       	ldi	r25, 0x00	; 0

  return(-1);
}
    4dda:	29 96       	adiw	r28, 0x09	; 9
    4ddc:	0f b6       	in	r0, 0x3f	; 63
    4dde:	f8 94       	cli
    4de0:	de bf       	out	0x3e, r29	; 62
    4de2:	0f be       	out	0x3f, r0	; 63
    4de4:	cd bf       	out	0x3d, r28	; 61
    4de6:	df 91       	pop	r29
    4de8:	cf 91       	pop	r28
    4dea:	1f 91       	pop	r17
    4dec:	0f 91       	pop	r16
    4dee:	ff 90       	pop	r15
    4df0:	ef 90       	pop	r14
    4df2:	df 90       	pop	r13
    4df4:	cf 90       	pop	r12
    4df6:	bf 90       	pop	r11
    4df8:	af 90       	pop	r10
    4dfa:	9f 90       	pop	r9
    4dfc:	8f 90       	pop	r8
    4dfe:	08 95       	ret

00004e00 <midiInit>:
	midiState = MIDI_WAIT;
}

unsigned char * getMidiEvent(){
	return midiSt.midiEvent;
}
    4e00:	81 e0       	ldi	r24, 0x01	; 1
    4e02:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <midiState>
    4e06:	08 95       	ret

00004e08 <getMidiStruct>:

struct midiStruct * getMidiStruct(unsigned long dt){
	midiSt.size = midiReadIndex;
    4e08:	e1 ed       	ldi	r30, 0xD1	; 209
    4e0a:	f2 e0       	ldi	r31, 0x02	; 2
    4e0c:	20 91 d0 02 	lds	r18, 0x02D0	; 0x8002d0 <midiReadIndex>
    4e10:	24 83       	std	Z+4, r18	; 0x04
	midiSt.delta = dt;
    4e12:	60 83       	st	Z, r22
    4e14:	71 83       	std	Z+1, r23	; 0x01
    4e16:	82 83       	std	Z+2, r24	; 0x02
    4e18:	93 83       	std	Z+3, r25	; 0x03
	return &midiSt;
}
    4e1a:	cf 01       	movw	r24, r30
    4e1c:	08 95       	ret

00004e1e <sendMidiMessage>:
      }

   return FALSE;
}

void sendMidiMessage(unsigned char num){
    4e1e:	0f 93       	push	r16
    4e20:	1f 93       	push	r17
    4e22:	cf 93       	push	r28
    4e24:	df 93       	push	r29
	unsigned char i;
	for(i = 0; i < num; i++)
    4e26:	88 23       	and	r24, r24
    4e28:	61 f0       	breq	.+24     	; 0x4e42 <sendMidiMessage+0x24>
    4e2a:	d8 2f       	mov	r29, r24
    4e2c:	06 ed       	ldi	r16, 0xD6	; 214
    4e2e:	12 e0       	ldi	r17, 0x02	; 2
    4e30:	c0 e0       	ldi	r28, 0x00	; 0
		uartSendByte(midiSt.midiEvent[i]);
    4e32:	f8 01       	movw	r30, r16
    4e34:	81 91       	ld	r24, Z+
    4e36:	8f 01       	movw	r16, r30
    4e38:	0e 94 3a 32 	call	0x6474	; 0x6474 <uartSendByte>
   return FALSE;
}

void sendMidiMessage(unsigned char num){
	unsigned char i;
	for(i = 0; i < num; i++)
    4e3c:	cf 5f       	subi	r28, 0xFF	; 255
    4e3e:	dc 13       	cpse	r29, r28
    4e40:	f8 cf       	rjmp	.-16     	; 0x4e32 <sendMidiMessage+0x14>
		uartSendByte(midiSt.midiEvent[i]);
	
}
    4e42:	df 91       	pop	r29
    4e44:	cf 91       	pop	r28
    4e46:	1f 91       	pop	r17
    4e48:	0f 91       	pop	r16
    4e4a:	08 95       	ret

00004e4c <sendMidiBuffer>:

void sendMidiBuffer(unsigned char *buf,unsigned char num){
    4e4c:	0f 93       	push	r16
    4e4e:	1f 93       	push	r17
    4e50:	cf 93       	push	r28
    4e52:	df 93       	push	r29
	unsigned char i;
	for(i = 0; i < num; i++)
    4e54:	66 23       	and	r22, r22
    4e56:	71 f0       	breq	.+28     	; 0x4e74 <sendMidiBuffer+0x28>
    4e58:	ec 01       	movw	r28, r24
    4e5a:	61 50       	subi	r22, 0x01	; 1
    4e5c:	06 2f       	mov	r16, r22
    4e5e:	10 e0       	ldi	r17, 0x00	; 0
    4e60:	0f 5f       	subi	r16, 0xFF	; 255
    4e62:	1f 4f       	sbci	r17, 0xFF	; 255
    4e64:	08 0f       	add	r16, r24
    4e66:	19 1f       	adc	r17, r25
	uartSendByte(buf[i]);
    4e68:	89 91       	ld	r24, Y+
    4e6a:	0e 94 3a 32 	call	0x6474	; 0x6474 <uartSendByte>
	
}

void sendMidiBuffer(unsigned char *buf,unsigned char num){
	unsigned char i;
	for(i = 0; i < num; i++)
    4e6e:	c0 17       	cp	r28, r16
    4e70:	d1 07       	cpc	r29, r17
    4e72:	d1 f7       	brne	.-12     	; 0x4e68 <sendMidiBuffer+0x1c>
	uartSendByte(buf[i]);
}
    4e74:	df 91       	pop	r29
    4e76:	cf 91       	pop	r28
    4e78:	1f 91       	pop	r17
    4e7a:	0f 91       	pop	r16
    4e7c:	08 95       	ret

00004e7e <sendProgramChange>:

void sendProgramChange(unsigned char bank,unsigned char program){
    4e7e:	1f 93       	push	r17
    4e80:	cf 93       	push	r28
    4e82:	df 93       	push	r29
    4e84:	16 2f       	mov	r17, r22
	midiSt.midiEvent[0] = MIDI_CONTROL_CHANGE;
    4e86:	c1 ed       	ldi	r28, 0xD1	; 209
    4e88:	d2 e0       	ldi	r29, 0x02	; 2
    4e8a:	90 eb       	ldi	r25, 0xB0	; 176
    4e8c:	9d 83       	std	Y+5, r25	; 0x05
	midiSt.midiEvent[1] = 0;			// MSB
    4e8e:	1e 82       	std	Y+6, r1	; 0x06
	midiSt.midiEvent[2] = bank;		// LSB
    4e90:	8f 83       	std	Y+7, r24	; 0x07
	sendMidiMessage(3);
    4e92:	83 e0       	ldi	r24, 0x03	; 3
    4e94:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <sendMidiMessage>
	midiSt.midiEvent[0] = MIDI_PROGRAM_CHANGE;
    4e98:	80 ec       	ldi	r24, 0xC0	; 192
    4e9a:	8d 83       	std	Y+5, r24	; 0x05
	midiSt.midiEvent[1] = program;
    4e9c:	1e 83       	std	Y+6, r17	; 0x06
	sendMidiMessage(2);
    4e9e:	82 e0       	ldi	r24, 0x02	; 2
    4ea0:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <sendMidiMessage>
}
    4ea4:	df 91       	pop	r29
    4ea6:	cf 91       	pop	r28
    4ea8:	1f 91       	pop	r17
    4eaa:	08 95       	ret

00004eac <commandLen>:

unsigned char commandLen(unsigned char cmd)
{
    4eac:	e8 2f       	mov	r30, r24
    4eae:	e0 7f       	andi	r30, 0xF0	; 240
	
	if ((cmd & 0xF0) != 0xF0)
    4eb0:	e0 3f       	cpi	r30, 0xF0	; 240
    4eb2:	09 f4       	brne	.+2      	; 0x4eb6 <commandLen+0xa>
    4eb4:	e8 2f       	mov	r30, r24
	cmd = cmd & 0xF0;
	
	switch(cmd){
    4eb6:	8e 2f       	mov	r24, r30
    4eb8:	90 e0       	ldi	r25, 0x00	; 0
    4eba:	fc 01       	movw	r30, r24
    4ebc:	e0 58       	subi	r30, 0x80	; 128
    4ebe:	f1 09       	sbc	r31, r1
    4ec0:	e0 38       	cpi	r30, 0x80	; 128
    4ec2:	f1 05       	cpc	r31, r1
    4ec4:	40 f4       	brcc	.+16     	; 0x4ed6 <commandLen+0x2a>
    4ec6:	e6 5d       	subi	r30, 0xD6	; 214
    4ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eca:	0c 94 4f 33 	jmp	0x669e	; 0x669e <__tablejump2__>
					return 1;
		case	MIDI_PROGRAM_CHANGE:
		case	MIDI_CHANNEL_TOUCH:
		case	MIDI_MTC:
		case	MIDI_SONG_SEL:	
					return 2;
    4ece:	82 e0       	ldi	r24, 0x02	; 2
    4ed0:	08 95       	ret
		case	MIDI_NOTE_ON:
		case	MIDI_POLY_TOUCH:
		case	MIDI_CONTROL_CHANGE:
		case	MIDI_PITCH_BEND:
		case	MIDI_SPP:	
					return 3;
    4ed2:	83 e0       	ldi	r24, 0x03	; 3
    4ed4:	08 95       	ret
		
	}
	
	return 0;
    4ed6:	80 e0       	ldi	r24, 0x00	; 0
    4ed8:	08 95       	ret
		case	MIDI_START:
		case	MIDI_STOP:
		case	MIDI_CONT:
		case	MIDI_SENSE:
		case	MIDI_RESET:	
					return 1;
    4eda:	81 e0       	ldi	r24, 0x01	; 1
					return 3;
		
	}
	
	return 0;
}
    4edc:	08 95       	ret

00004ede <readMidiMessage>:
	midiSt.size = midiReadIndex;
	midiSt.delta = dt;
	return &midiSt;
}

BOOL readMidiMessage(unsigned char byte,unsigned char *len){
    4ede:	ff 92       	push	r15
    4ee0:	0f 93       	push	r16
    4ee2:	1f 93       	push	r17
    4ee4:	cf 93       	push	r28
    4ee6:	df 93       	push	r29
    4ee8:	d8 2f       	mov	r29, r24
    4eea:	8b 01       	movw	r16, r22
	
   unsigned char tmp;

   // state machine for parsing the byte
   switch(midiState)
    4eec:	c0 91 cf 02 	lds	r28, 0x02CF	; 0x8002cf <midiState>
    4ef0:	c2 30       	cpi	r28, 0x02	; 2
    4ef2:	51 f1       	breq	.+84     	; 0x4f48 <readMidiMessage+0x6a>
    4ef4:	c3 30       	cpi	r28, 0x03	; 3
    4ef6:	09 f4       	brne	.+2      	; 0x4efa <readMidiMessage+0x1c>
    4ef8:	53 c0       	rjmp	.+166    	; 0x4fa0 <readMidiMessage+0xc2>
    4efa:	c1 30       	cpi	r28, 0x01	; 1
    4efc:	09 f0       	breq	.+2      	; 0x4f00 <readMidiMessage+0x22>
    4efe:	57 c0       	rjmp	.+174    	; 0x4fae <readMidiMessage+0xd0>
   {
         // we are currently stateless, waiting to start reading an event we care about.
         case MIDI_WAIT:
            if (byte == 0xF0)
    4f00:	80 3f       	cpi	r24, 0xF0	; 240
    4f02:	09 f4       	brne	.+2      	; 0x4f06 <readMidiMessage+0x28>
    4f04:	56 c0       	rjmp	.+172    	; 0x4fb2 <readMidiMessage+0xd4>
               // call sysex handler, which will return the state we should be in.
               //midiState = handleSysex();
               break;
            }
            // store length of midi command
            tmp = commandLen(byte);
    4f06:	0e 94 56 27 	call	0x4eac	; 0x4eac <commandLen>
            // is the message one byte long?
            if (tmp == 1)
    4f0a:	81 30       	cpi	r24, 0x01	; 1
    4f0c:	39 f4       	brne	.+14     	; 0x4f1c <readMidiMessage+0x3e>
/*               if (byte == MIDI_CLOCK && midiClockFunc)
               {
                  // it's a clock event and we have a registered clock handler
                  midiClockFunc();
               } else {*/
            	 *len = 1;
    4f0e:	f8 01       	movw	r30, r16
    4f10:	80 83       	st	Z, r24
            	 midiSt.midiEvent[0] = byte;
    4f12:	d0 93 d6 02 	sts	0x02D6, r29	; 0x8002d6 <midiSt+0x5>
            	 noteEvent = FALSE;
    4f16:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <noteEvent>
                 return TRUE;
    4f1a:	50 c0       	rjmp	.+160    	; 0x4fbc <readMidiMessage+0xde>
            } else if(tmp == 0){
    4f1c:	81 11       	cpse	r24, r1
    4f1e:	0a c0       	rjmp	.+20     	; 0x4f34 <readMidiMessage+0x56>
            	if(noteEvent == TRUE) {
    4f20:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <noteEvent>
    4f24:	81 30       	cpi	r24, 0x01	; 1
    4f26:	59 f4       	brne	.+22     	; 0x4f3e <readMidiMessage+0x60>
            		midiSt.midiEvent[1] = byte;
    4f28:	d0 93 d7 02 	sts	0x02D7, r29	; 0x8002d7 <midiSt+0x6>
            		midiReadIndex = 2;
    4f2c:	82 e0       	ldi	r24, 0x02	; 2
    4f2e:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <midiReadIndex>
    4f32:	05 c0       	rjmp	.+10     	; 0x4f3e <readMidiMessage+0x60>
            	}
            }
			else {
				   // save first byte of event, position pointer..
				   midiSt.midiEvent[0] = byte;
    4f34:	d0 93 d6 02 	sts	0x02D6, r29	; 0x8002d6 <midiSt+0x5>
				   midiReadIndex = 1;
    4f38:	81 e0       	ldi	r24, 0x01	; 1
    4f3a:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <midiReadIndex>
				}
            midiState = MIDI_READING;
    4f3e:	82 e0       	ldi	r24, 0x02	; 2
    4f40:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <midiState>
               midiState = MIDI_WAIT;
            }
            break;
      }

   return FALSE;
    4f44:	c0 e0       	ldi	r28, 0x00	; 0
				   // save first byte of event, position pointer..
				   midiSt.midiEvent[0] = byte;
				   midiReadIndex = 1;
				}
            midiState = MIDI_READING;
            break;
    4f46:	3a c0       	rjmp	.+116    	; 0x4fbc <readMidiMessage+0xde>
         case MIDI_READING:
        	if(commandLen(byte) > 0){
    4f48:	0e 94 56 27 	call	0x4eac	; 0x4eac <commandLen>
    4f4c:	c8 2f       	mov	r28, r24
    4f4e:	88 23       	and	r24, r24
    4f50:	39 f0       	breq	.+14     	; 0x4f60 <readMidiMessage+0x82>
        		midiState = MIDI_WAIT;
    4f52:	81 e0       	ldi	r24, 0x01	; 1
    4f54:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <midiState>
        		noteEvent = FALSE;
    4f58:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <noteEvent>
        		return FALSE;
    4f5c:	c0 e0       	ldi	r28, 0x00	; 0
    4f5e:	2e c0       	rjmp	.+92     	; 0x4fbc <readMidiMessage+0xde>
        	}
        	midiSt.midiEvent[midiReadIndex++] = byte;
    4f60:	e0 91 d0 02 	lds	r30, 0x02D0	; 0x8002d0 <midiReadIndex>
    4f64:	ff 24       	eor	r15, r15
    4f66:	f3 94       	inc	r15
    4f68:	fe 0e       	add	r15, r30
    4f6a:	f0 92 d0 02 	sts	0x02D0, r15	; 0x8002d0 <midiReadIndex>
    4f6e:	f0 e0       	ldi	r31, 0x00	; 0
    4f70:	ef 52       	subi	r30, 0x2F	; 47
    4f72:	fd 4f       	sbci	r31, 0xFD	; 253
    4f74:	d5 83       	std	Z+5, r29	; 0x05
            if (midiReadIndex == commandLen(midiSt.midiEvent[0]&0xF0))
    4f76:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <midiSt+0x5>
    4f7a:	80 7f       	andi	r24, 0xF0	; 240
    4f7c:	0e 94 56 27 	call	0x4eac	; 0x4eac <commandLen>
    4f80:	f8 12       	cpse	r15, r24
    4f82:	1c c0       	rjmp	.+56     	; 0x4fbc <readMidiMessage+0xde>
            {
               midiState = MIDI_WAIT;
    4f84:	81 e0       	ldi	r24, 0x01	; 1
    4f86:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <midiState>
               *len = midiReadIndex;
    4f8a:	f8 01       	movw	r30, r16
    4f8c:	f0 82       	st	Z, r15
               if(midiSt.midiEvent[0] & (MIDI_NOTE_ON|MIDI_NOTE_OFF)){
    4f8e:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <midiSt+0x5>
    4f92:	80 79       	andi	r24, 0x90	; 144
    4f94:	81 f0       	breq	.+32     	; 0x4fb6 <readMidiMessage+0xd8>
            	   noteEvent = TRUE;
    4f96:	81 e0       	ldi	r24, 0x01	; 1
    4f98:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <noteEvent>
               }
               return TRUE;
    4f9c:	c1 e0       	ldi	r28, 0x01	; 1
    4f9e:	0e c0       	rjmp	.+28     	; 0x4fbc <readMidiMessage+0xde>
            }
            break;
         case MIDI_IGNORING:
            if (byte == 0xF7)
    4fa0:	87 3f       	cpi	r24, 0xF7	; 247
    4fa2:	59 f4       	brne	.+22     	; 0x4fba <readMidiMessage+0xdc>
            {
               midiState = MIDI_WAIT;
    4fa4:	81 e0       	ldi	r24, 0x01	; 1
    4fa6:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <midiState>
            }
            break;
      }

   return FALSE;
    4faa:	c0 e0       	ldi	r28, 0x00	; 0
    4fac:	07 c0       	rjmp	.+14     	; 0x4fbc <readMidiMessage+0xde>
    4fae:	c0 e0       	ldi	r28, 0x00	; 0
    4fb0:	05 c0       	rjmp	.+10     	; 0x4fbc <readMidiMessage+0xde>
    4fb2:	c0 e0       	ldi	r28, 0x00	; 0
    4fb4:	03 c0       	rjmp	.+6      	; 0x4fbc <readMidiMessage+0xde>
               midiState = MIDI_WAIT;
               *len = midiReadIndex;
               if(midiSt.midiEvent[0] & (MIDI_NOTE_ON|MIDI_NOTE_OFF)){
            	   noteEvent = TRUE;
               }
               return TRUE;
    4fb6:	c1 e0       	ldi	r28, 0x01	; 1
    4fb8:	01 c0       	rjmp	.+2      	; 0x4fbc <readMidiMessage+0xde>
               midiState = MIDI_WAIT;
            }
            break;
      }

   return FALSE;
    4fba:	c0 e0       	ldi	r28, 0x00	; 0
}
    4fbc:	8c 2f       	mov	r24, r28
    4fbe:	df 91       	pop	r29
    4fc0:	cf 91       	pop	r28
    4fc2:	1f 91       	pop	r17
    4fc4:	0f 91       	pop	r16
    4fc6:	ff 90       	pop	r15
    4fc8:	08 95       	ret

00004fca <metaFun>:
	}
	
	return 0;
}

void metaFun(meta_event *ev){
    4fca:	08 95       	ret

00004fcc <sysexFun>:
	
}

void sysexFun(sysex_event *ev){
    4fcc:	08 95       	ret

00004fce <midiFun>:
	
}

void midiFun(midi_event *ev){	
    4fce:	fc 01       	movw	r30, r24
	if((ev->data[0] & 0xF0) == 0x90)
    4fd0:	83 81       	ldd	r24, Z+3	; 0x03
    4fd2:	98 2f       	mov	r25, r24
    4fd4:	90 7f       	andi	r25, 0xF0	; 240
    4fd6:	90 39       	cpi	r25, 0x90	; 144
    4fd8:	21 f4       	brne	.+8      	; 0x4fe2 <midiFun+0x14>
		ev->data[2] = fileVolume;
    4fda:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <fileVolume>
    4fde:	95 83       	std	Z+5, r25	; 0x05
    4fe0:	03 c0       	rjmp	.+6      	; 0x4fe8 <midiFun+0x1a>
	else if((ev->data[0] & 0xF0) == 0x80)
    4fe2:	90 38       	cpi	r25, 0x80	; 128
    4fe4:	09 f4       	brne	.+2      	; 0x4fe8 <midiFun+0x1a>
		ev->data[2] = 0;
    4fe6:	15 82       	std	Z+5, r1	; 0x05
	ev->data[0] = ev->data[0] | ev->channel;
    4fe8:	91 81       	ldd	r25, Z+1	; 0x01
    4fea:	89 2b       	or	r24, r25
    4fec:	83 83       	std	Z+3, r24	; 0x03
	sendMidiBuffer(ev->data,ev->size);
    4fee:	62 81       	ldd	r22, Z+2	; 0x02
    4ff0:	cf 01       	movw	r24, r30
    4ff2:	03 96       	adiw	r24, 0x03	; 3
    4ff4:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <sendMidiBuffer>
    4ff8:	08 95       	ret

00004ffa <midiFileVolume>:
}

void midiFileVolume(unsigned char vol){
	fileVolume = vol;
    4ffa:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <fileVolume>
    4ffe:	08 95       	ret

00005000 <rcvr_spi>:
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    5000:	8f ef       	ldi	r24, 0xFF	; 255
    5002:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    5004:	77 9b       	sbis	0x0e, 7	; 14
    5006:	fe cf       	rjmp	.-4      	; 0x5004 <rcvr_spi+0x4>
	return SPDR;
    5008:	8f b1       	in	r24, 0x0f	; 15
}
    500a:	08 95       	ret

0000500c <wait_ready>:
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
    500c:	82 e3       	ldi	r24, 0x32	; 50
    500e:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <Timer2>
	rcvr_spi();
    5012:	0e 94 00 28 	call	0x5000	; 0x5000 <rcvr_spi>
	do
		if (rcvr_spi() == 0xFF) return 1;
    5016:	0e 94 00 28 	call	0x5000	; 0x5000 <rcvr_spi>
    501a:	8f 3f       	cpi	r24, 0xFF	; 255
    501c:	39 f0       	breq	.+14     	; 0x502c <wait_ready+0x20>
	while (Timer2);
    501e:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <Timer2>
    5022:	81 11       	cpse	r24, r1
    5024:	f8 cf       	rjmp	.-16     	; 0x5016 <wait_ready+0xa>

	return 0;
    5026:	80 e0       	ldi	r24, 0x00	; 0
    5028:	90 e0       	ldi	r25, 0x00	; 0
    502a:	08 95       	ret
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		if (rcvr_spi() == 0xFF) return 1;
    502c:	81 e0       	ldi	r24, 0x01	; 1
    502e:	90 e0       	ldi	r25, 0x00	; 0
	while (Timer2);

	return 0;
}
    5030:	08 95       	ret

00005032 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    5032:	c4 9a       	sbi	0x18, 4	; 24
	rcvr_spi();
    5034:	0e 94 00 28 	call	0x5000	; 0x5000 <rcvr_spi>
    5038:	08 95       	ret

0000503a <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
    503a:	cf 93       	push	r28
    503c:	df 93       	push	r29
	CS_LOW();
    503e:	c4 98       	cbi	0x18, 4	; 24
	if (!wait_ready()) {
    5040:	0e 94 06 28 	call	0x500c	; 0x500c <wait_ready>
    5044:	ec 01       	movw	r28, r24
    5046:	89 2b       	or	r24, r25
    5048:	19 f4       	brne	.+6      	; 0x5050 <select+0x16>
		deselect();
    504a:	0e 94 19 28 	call	0x5032	; 0x5032 <deselect>
		return 0;
    504e:	02 c0       	rjmp	.+4      	; 0x5054 <select+0x1a>
	}
	return 1;
    5050:	c1 e0       	ldi	r28, 0x01	; 1
    5052:	d0 e0       	ldi	r29, 0x00	; 0
}
    5054:	ce 01       	movw	r24, r28
    5056:	df 91       	pop	r29
    5058:	cf 91       	pop	r28
    505a:	08 95       	ret

0000505c <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    505c:	0f 93       	push	r16
    505e:	1f 93       	push	r17
    5060:	cf 93       	push	r28
    5062:	df 93       	push	r29
    5064:	08 2f       	mov	r16, r24
    5066:	19 2f       	mov	r17, r25
    5068:	eb 01       	movw	r28, r22
	BYTE token;


	Timer1 = 20;
    506a:	84 e1       	ldi	r24, 0x14	; 20
    506c:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <Timer1>
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
    5070:	0e 94 00 28 	call	0x5000	; 0x5000 <rcvr_spi>
	} while ((token == 0xFF) && Timer1);
    5074:	8f 3f       	cpi	r24, 0xFF	; 255
    5076:	39 f4       	brne	.+14     	; 0x5086 <rcvr_datablock+0x2a>
    5078:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <Timer1>
    507c:	81 11       	cpse	r24, r1
    507e:	f8 cf       	rjmp	.-16     	; 0x5070 <rcvr_datablock+0x14>
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
    5080:	80 e0       	ldi	r24, 0x00	; 0
    5082:	90 e0       	ldi	r25, 0x00	; 0
    5084:	2c c0       	rjmp	.+88     	; 0x50de <rcvr_datablock+0x82>
    5086:	8e 3f       	cpi	r24, 0xFE	; 254
    5088:	41 f5       	brne	.+80     	; 0x50da <rcvr_datablock+0x7e>
    508a:	e0 2f       	mov	r30, r16
    508c:	f1 2f       	mov	r31, r17

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
    508e:	8f ef       	ldi	r24, 0xFF	; 255
    5090:	8f b9       	out	0x0f, r24	; 15
    5092:	77 9b       	sbis	0x0e, 7	; 14
    5094:	fe cf       	rjmp	.-4      	; 0x5092 <rcvr_datablock+0x36>
    5096:	9f b1       	in	r25, 0x0f	; 15
    5098:	df 01       	movw	r26, r30
    509a:	90 83       	st	Z, r25
		rcvr_spi_m(buff++);
    509c:	8f b9       	out	0x0f, r24	; 15
    509e:	77 9b       	sbis	0x0e, 7	; 14
    50a0:	fe cf       	rjmp	.-4      	; 0x509e <rcvr_datablock+0x42>
    50a2:	9f b1       	in	r25, 0x0f	; 15
    50a4:	11 96       	adiw	r26, 0x01	; 1
    50a6:	9c 93       	st	X, r25
    50a8:	11 97       	sbiw	r26, 0x01	; 1
		rcvr_spi_m(buff++);
    50aa:	8f b9       	out	0x0f, r24	; 15
    50ac:	77 9b       	sbis	0x0e, 7	; 14
    50ae:	fe cf       	rjmp	.-4      	; 0x50ac <rcvr_datablock+0x50>
    50b0:	9f b1       	in	r25, 0x0f	; 15
    50b2:	12 96       	adiw	r26, 0x02	; 2
    50b4:	9c 93       	st	X, r25
    50b6:	12 97       	sbiw	r26, 0x02	; 2
		rcvr_spi_m(buff++);
    50b8:	8f b9       	out	0x0f, r24	; 15
    50ba:	77 9b       	sbis	0x0e, 7	; 14
    50bc:	fe cf       	rjmp	.-4      	; 0x50ba <rcvr_datablock+0x5e>
    50be:	9f b1       	in	r25, 0x0f	; 15
    50c0:	13 96       	adiw	r26, 0x03	; 3
    50c2:	9c 93       	st	X, r25
	} while (btr -= 4);
    50c4:	24 97       	sbiw	r28, 0x04	; 4
    50c6:	34 96       	adiw	r30, 0x04	; 4
    50c8:	20 97       	sbiw	r28, 0x00	; 0
    50ca:	11 f7       	brne	.-60     	; 0x5090 <rcvr_datablock+0x34>
	rcvr_spi();						/* Discard CRC */
    50cc:	0e 94 00 28 	call	0x5000	; 0x5000 <rcvr_spi>
	rcvr_spi();
    50d0:	0e 94 00 28 	call	0x5000	; 0x5000 <rcvr_spi>

	return 1;						/* Return with success */
    50d4:	81 e0       	ldi	r24, 0x01	; 1
    50d6:	90 e0       	ldi	r25, 0x00	; 0
    50d8:	02 c0       	rjmp	.+4      	; 0x50de <rcvr_datablock+0x82>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
    50da:	80 e0       	ldi	r24, 0x00	; 0
    50dc:	90 e0       	ldi	r25, 0x00	; 0
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return 1;						/* Return with success */
}
    50de:	df 91       	pop	r29
    50e0:	cf 91       	pop	r28
    50e2:	1f 91       	pop	r17
    50e4:	0f 91       	pop	r16
    50e6:	08 95       	ret

000050e8 <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    50e8:	0f 93       	push	r16
    50ea:	1f 93       	push	r17
    50ec:	cf 93       	push	r28
    50ee:	8c 01       	movw	r16, r24
    50f0:	c6 2f       	mov	r28, r22
	BYTE resp, wc;


	if (!wait_ready()) return 0;
    50f2:	0e 94 06 28 	call	0x500c	; 0x500c <wait_ready>
    50f6:	00 97       	sbiw	r24, 0x00	; 0
    50f8:	59 f1       	breq	.+86     	; 0x5150 <xmit_datablock+0x68>

	xmit_spi(token);					/* Xmit data token */
    50fa:	cf b9       	out	0x0f, r28	; 15
    50fc:	77 9b       	sbis	0x0e, 7	; 14
    50fe:	fe cf       	rjmp	.-4      	; 0x50fc <xmit_datablock+0x14>
	if (token != 0xFD) {	/* Is data token */
    5100:	cd 3f       	cpi	r28, 0xFD	; 253
    5102:	21 f1       	breq	.+72     	; 0x514c <xmit_datablock+0x64>
    5104:	f8 01       	movw	r30, r16
    5106:	98 01       	movw	r18, r16
    5108:	3e 5f       	subi	r19, 0xFE	; 254
    510a:	df 01       	movw	r26, r30
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
    510c:	80 81       	ld	r24, Z
    510e:	8f b9       	out	0x0f, r24	; 15
    5110:	77 9b       	sbis	0x0e, 7	; 14
    5112:	fe cf       	rjmp	.-4      	; 0x5110 <xmit_datablock+0x28>
			xmit_spi(*buff++);
    5114:	11 96       	adiw	r26, 0x01	; 1
    5116:	8c 91       	ld	r24, X
    5118:	8f b9       	out	0x0f, r24	; 15
    511a:	77 9b       	sbis	0x0e, 7	; 14
    511c:	fe cf       	rjmp	.-4      	; 0x511a <xmit_datablock+0x32>
    511e:	32 96       	adiw	r30, 0x02	; 2
		} while (--wc);
    5120:	e2 17       	cp	r30, r18
    5122:	f3 07       	cpc	r31, r19
    5124:	91 f7       	brne	.-28     	; 0x510a <xmit_datablock+0x22>
		xmit_spi(0xFF);					/* CRC (Dummy) */
    5126:	8f ef       	ldi	r24, 0xFF	; 255
    5128:	8f b9       	out	0x0f, r24	; 15
    512a:	77 9b       	sbis	0x0e, 7	; 14
    512c:	fe cf       	rjmp	.-4      	; 0x512a <xmit_datablock+0x42>
		xmit_spi(0xFF);
    512e:	8f ef       	ldi	r24, 0xFF	; 255
    5130:	8f b9       	out	0x0f, r24	; 15
    5132:	77 9b       	sbis	0x0e, 7	; 14
    5134:	fe cf       	rjmp	.-4      	; 0x5132 <xmit_datablock+0x4a>
		resp = rcvr_spi();				/* Reveive data response */
    5136:	0e 94 00 28 	call	0x5000	; 0x5000 <rcvr_spi>
)
{
	BYTE resp, wc;


	if (!wait_ready()) return 0;
    513a:	8f 71       	andi	r24, 0x1F	; 31
    513c:	31 e0       	ldi	r19, 0x01	; 1
    513e:	20 e0       	ldi	r18, 0x00	; 0
    5140:	85 30       	cpi	r24, 0x05	; 5
    5142:	09 f0       	breq	.+2      	; 0x5146 <xmit_datablock+0x5e>
    5144:	30 e0       	ldi	r19, 0x00	; 0
    5146:	83 2f       	mov	r24, r19
    5148:	92 2f       	mov	r25, r18
    514a:	02 c0       	rjmp	.+4      	; 0x5150 <xmit_datablock+0x68>
		resp = rcvr_spi();				/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
    514c:	81 e0       	ldi	r24, 0x01	; 1
    514e:	90 e0       	ldi	r25, 0x00	; 0
}
    5150:	cf 91       	pop	r28
    5152:	1f 91       	pop	r17
    5154:	0f 91       	pop	r16
    5156:	08 95       	ret

00005158 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    5158:	cf 92       	push	r12
    515a:	df 92       	push	r13
    515c:	ef 92       	push	r14
    515e:	ff 92       	push	r15
    5160:	cf 93       	push	r28
    5162:	c8 2f       	mov	r28, r24
    5164:	6a 01       	movw	r12, r20
    5166:	7b 01       	movw	r14, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    5168:	88 23       	and	r24, r24
    516a:	4c f4       	brge	.+18     	; 0x517e <send_cmd+0x26>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    516c:	40 e0       	ldi	r20, 0x00	; 0
    516e:	50 e0       	ldi	r21, 0x00	; 0
    5170:	ba 01       	movw	r22, r20
    5172:	87 e3       	ldi	r24, 0x37	; 55
    5174:	0e 94 ac 28 	call	0x5158	; 0x5158 <send_cmd>
		if (res > 1) return res;
    5178:	82 30       	cpi	r24, 0x02	; 2
    517a:	e0 f5       	brcc	.+120    	; 0x51f4 <send_cmd+0x9c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    517c:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
    517e:	0e 94 19 28 	call	0x5032	; 0x5032 <deselect>
	if (!select()) return 0xFF;
    5182:	0e 94 1d 28 	call	0x503a	; 0x503a <select>
    5186:	89 2b       	or	r24, r25
    5188:	a1 f1       	breq	.+104    	; 0x51f2 <send_cmd+0x9a>

	/* Send command packet */
	xmit_spi(0x40 | cmd);				/* Start + Command index */
    518a:	8c 2f       	mov	r24, r28
    518c:	80 64       	ori	r24, 0x40	; 64
    518e:	8f b9       	out	0x0f, r24	; 15
    5190:	77 9b       	sbis	0x0e, 7	; 14
    5192:	fe cf       	rjmp	.-4      	; 0x5190 <send_cmd+0x38>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    5194:	8f 2d       	mov	r24, r15
    5196:	99 27       	eor	r25, r25
    5198:	aa 27       	eor	r26, r26
    519a:	bb 27       	eor	r27, r27
    519c:	8f b9       	out	0x0f, r24	; 15
    519e:	77 9b       	sbis	0x0e, 7	; 14
    51a0:	fe cf       	rjmp	.-4      	; 0x519e <send_cmd+0x46>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    51a2:	c7 01       	movw	r24, r14
    51a4:	aa 27       	eor	r26, r26
    51a6:	bb 27       	eor	r27, r27
    51a8:	8f b9       	out	0x0f, r24	; 15
    51aa:	77 9b       	sbis	0x0e, 7	; 14
    51ac:	fe cf       	rjmp	.-4      	; 0x51aa <send_cmd+0x52>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    51ae:	bb 27       	eor	r27, r27
    51b0:	af 2d       	mov	r26, r15
    51b2:	9e 2d       	mov	r25, r14
    51b4:	8d 2d       	mov	r24, r13
    51b6:	8f b9       	out	0x0f, r24	; 15
    51b8:	77 9b       	sbis	0x0e, 7	; 14
    51ba:	fe cf       	rjmp	.-4      	; 0x51b8 <send_cmd+0x60>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    51bc:	cf b8       	out	0x0f, r12	; 15
    51be:	77 9b       	sbis	0x0e, 7	; 14
    51c0:	fe cf       	rjmp	.-4      	; 0x51be <send_cmd+0x66>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    51c2:	cc 23       	and	r28, r28
    51c4:	21 f0       	breq	.+8      	; 0x51ce <send_cmd+0x76>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    51c6:	c8 30       	cpi	r28, 0x08	; 8
    51c8:	21 f4       	brne	.+8      	; 0x51d2 <send_cmd+0x7a>
    51ca:	87 e8       	ldi	r24, 0x87	; 135
    51cc:	03 c0       	rjmp	.+6      	; 0x51d4 <send_cmd+0x7c>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    51ce:	85 e9       	ldi	r24, 0x95	; 149
    51d0:	01 c0       	rjmp	.+2      	; 0x51d4 <send_cmd+0x7c>
	xmit_spi(0x40 | cmd);				/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
    51d2:	81 e0       	ldi	r24, 0x01	; 1
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
	xmit_spi(n);
    51d4:	8f b9       	out	0x0f, r24	; 15
    51d6:	77 9b       	sbis	0x0e, 7	; 14
    51d8:	fe cf       	rjmp	.-4      	; 0x51d6 <send_cmd+0x7e>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
    51da:	cc 30       	cpi	r28, 0x0C	; 12
    51dc:	11 f4       	brne	.+4      	; 0x51e2 <send_cmd+0x8a>
    51de:	0e 94 00 28 	call	0x5000	; 0x5000 <rcvr_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    51e2:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
    51e4:	0e 94 00 28 	call	0x5000	; 0x5000 <rcvr_spi>
	while ((res & 0x80) && --n);
    51e8:	88 23       	and	r24, r24
    51ea:	24 f4       	brge	.+8      	; 0x51f4 <send_cmd+0x9c>
    51ec:	c1 50       	subi	r28, 0x01	; 1
    51ee:	d1 f7       	brne	.-12     	; 0x51e4 <send_cmd+0x8c>
    51f0:	01 c0       	rjmp	.+2      	; 0x51f4 <send_cmd+0x9c>
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
    51f2:	8f ef       	ldi	r24, 0xFF	; 255
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    51f4:	cf 91       	pop	r28
    51f6:	ff 90       	pop	r15
    51f8:	ef 90       	pop	r14
    51fa:	df 90       	pop	r13
    51fc:	cf 90       	pop	r12
    51fe:	08 95       	ret

00005200 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    5200:	cf 92       	push	r12
    5202:	df 92       	push	r13
    5204:	ef 92       	push	r14
    5206:	ff 92       	push	r15
    5208:	0f 93       	push	r16
    520a:	1f 93       	push	r17
    520c:	cf 93       	push	r28
    520e:	df 93       	push	r29
    5210:	00 d0       	rcall	.+0      	; 0x5212 <disk_initialize+0x12>
    5212:	00 d0       	rcall	.+0      	; 0x5214 <disk_initialize+0x14>
    5214:	cd b7       	in	r28, 0x3d	; 61
    5216:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    5218:	81 11       	cpse	r24, r1
    521a:	99 c0       	rjmp	.+306    	; 0x534e <disk_initialize+0x14e>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    521c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    5220:	81 ff       	sbrs	r24, 1
    5222:	03 c0       	rjmp	.+6      	; 0x522a <disk_initialize+0x2a>
    5224:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    5228:	9f c0       	rjmp	.+318    	; 0x5368 <disk_initialize+0x168>

	power_on();							/* Force socket power on */
	FCLK_SLOW();
    522a:	69 9a       	sbi	0x0d, 1	; 13
    522c:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
    522e:	0e 94 00 28 	call	0x5000	; 0x5000 <rcvr_spi>
    5232:	11 50       	subi	r17, 0x01	; 1
    5234:	e1 f7       	brne	.-8      	; 0x522e <disk_initialize+0x2e>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    5236:	40 e0       	ldi	r20, 0x00	; 0
    5238:	50 e0       	ldi	r21, 0x00	; 0
    523a:	ba 01       	movw	r22, r20
    523c:	80 e0       	ldi	r24, 0x00	; 0
    523e:	0e 94 ac 28 	call	0x5158	; 0x5158 <send_cmd>
    5242:	81 30       	cpi	r24, 0x01	; 1
    5244:	09 f0       	breq	.+2      	; 0x5248 <disk_initialize+0x48>
    5246:	8b c0       	rjmp	.+278    	; 0x535e <disk_initialize+0x15e>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    5248:	84 e6       	ldi	r24, 0x64	; 100
    524a:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <Timer1>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    524e:	4a ea       	ldi	r20, 0xAA	; 170
    5250:	51 e0       	ldi	r21, 0x01	; 1
    5252:	60 e0       	ldi	r22, 0x00	; 0
    5254:	70 e0       	ldi	r23, 0x00	; 0
    5256:	88 e0       	ldi	r24, 0x08	; 8
    5258:	0e 94 ac 28 	call	0x5158	; 0x5158 <send_cmd>
    525c:	81 30       	cpi	r24, 0x01	; 1
    525e:	09 f0       	breq	.+2      	; 0x5262 <disk_initialize+0x62>
    5260:	3f c0       	rjmp	.+126    	; 0x52e0 <disk_initialize+0xe0>
    5262:	ce 01       	movw	r24, r28
    5264:	01 96       	adiw	r24, 0x01	; 1
    5266:	6c 01       	movw	r12, r24
    5268:	7e 01       	movw	r14, r28
    526a:	95 e0       	ldi	r25, 0x05	; 5
    526c:	e9 0e       	add	r14, r25
    526e:	f1 1c       	adc	r15, r1
    5270:	86 01       	movw	r16, r12
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
    5272:	0e 94 00 28 	call	0x5000	; 0x5000 <rcvr_spi>
    5276:	f8 01       	movw	r30, r16
    5278:	81 93       	st	Z+, r24
    527a:	8f 01       	movw	r16, r30
    527c:	ee 16       	cp	r14, r30
    527e:	ff 06       	cpc	r15, r31
    5280:	c1 f7       	brne	.-16     	; 0x5272 <disk_initialize+0x72>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    5282:	8b 81       	ldd	r24, Y+3	; 0x03
    5284:	81 30       	cpi	r24, 0x01	; 1
    5286:	09 f0       	breq	.+2      	; 0x528a <disk_initialize+0x8a>
    5288:	6a c0       	rjmp	.+212    	; 0x535e <disk_initialize+0x15e>
    528a:	8c 81       	ldd	r24, Y+4	; 0x04
    528c:	8a 3a       	cpi	r24, 0xAA	; 170
    528e:	09 f0       	breq	.+2      	; 0x5292 <disk_initialize+0x92>
    5290:	66 c0       	rjmp	.+204    	; 0x535e <disk_initialize+0x15e>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    5292:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <Timer1>
    5296:	88 23       	and	r24, r24
    5298:	49 f0       	breq	.+18     	; 0x52ac <disk_initialize+0xac>
    529a:	40 e0       	ldi	r20, 0x00	; 0
    529c:	50 e0       	ldi	r21, 0x00	; 0
    529e:	60 e0       	ldi	r22, 0x00	; 0
    52a0:	70 e4       	ldi	r23, 0x40	; 64
    52a2:	89 ea       	ldi	r24, 0xA9	; 169
    52a4:	0e 94 ac 28 	call	0x5158	; 0x5158 <send_cmd>
    52a8:	81 11       	cpse	r24, r1
    52aa:	f3 cf       	rjmp	.-26     	; 0x5292 <disk_initialize+0x92>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    52ac:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <Timer1>
    52b0:	88 23       	and	r24, r24
    52b2:	09 f4       	brne	.+2      	; 0x52b6 <disk_initialize+0xb6>
    52b4:	54 c0       	rjmp	.+168    	; 0x535e <disk_initialize+0x15e>
    52b6:	40 e0       	ldi	r20, 0x00	; 0
    52b8:	50 e0       	ldi	r21, 0x00	; 0
    52ba:	ba 01       	movw	r22, r20
    52bc:	8a e3       	ldi	r24, 0x3A	; 58
    52be:	0e 94 ac 28 	call	0x5158	; 0x5158 <send_cmd>
    52c2:	81 11       	cpse	r24, r1
    52c4:	4c c0       	rjmp	.+152    	; 0x535e <disk_initialize+0x15e>
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
    52c6:	0e 94 00 28 	call	0x5000	; 0x5000 <rcvr_spi>
    52ca:	f6 01       	movw	r30, r12
    52cc:	81 93       	st	Z+, r24
    52ce:	6f 01       	movw	r12, r30
    52d0:	ee 16       	cp	r14, r30
    52d2:	ff 06       	cpc	r15, r31
    52d4:	c1 f7       	brne	.-16     	; 0x52c6 <disk_initialize+0xc6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    52d6:	89 81       	ldd	r24, Y+1	; 0x01
    52d8:	86 fd       	sbrc	r24, 6
    52da:	3b c0       	rjmp	.+118    	; 0x5352 <disk_initialize+0x152>
    52dc:	84 e0       	ldi	r24, 0x04	; 4
    52de:	3a c0       	rjmp	.+116    	; 0x5354 <disk_initialize+0x154>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    52e0:	40 e0       	ldi	r20, 0x00	; 0
    52e2:	50 e0       	ldi	r21, 0x00	; 0
    52e4:	ba 01       	movw	r22, r20
    52e6:	89 ea       	ldi	r24, 0xA9	; 169
    52e8:	0e 94 ac 28 	call	0x5158	; 0x5158 <send_cmd>
    52ec:	82 30       	cpi	r24, 0x02	; 2
    52ee:	18 f0       	brcs	.+6      	; 0x52f6 <disk_initialize+0xf6>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    52f0:	01 e0       	ldi	r16, 0x01	; 1
    52f2:	11 e0       	ldi	r17, 0x01	; 1
    52f4:	02 c0       	rjmp	.+4      	; 0x52fa <disk_initialize+0xfa>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    52f6:	02 e0       	ldi	r16, 0x02	; 2
    52f8:	19 ea       	ldi	r17, 0xA9	; 169
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    52fa:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <Timer1>
    52fe:	88 23       	and	r24, r24
    5300:	41 f0       	breq	.+16     	; 0x5312 <disk_initialize+0x112>
    5302:	40 e0       	ldi	r20, 0x00	; 0
    5304:	50 e0       	ldi	r21, 0x00	; 0
    5306:	ba 01       	movw	r22, r20
    5308:	81 2f       	mov	r24, r17
    530a:	0e 94 ac 28 	call	0x5158	; 0x5158 <send_cmd>
    530e:	81 11       	cpse	r24, r1
    5310:	f4 cf       	rjmp	.-24     	; 0x52fa <disk_initialize+0xfa>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    5312:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <Timer1>
    5316:	88 23       	and	r24, r24
    5318:	11 f1       	breq	.+68     	; 0x535e <disk_initialize+0x15e>
    531a:	40 e0       	ldi	r20, 0x00	; 0
    531c:	52 e0       	ldi	r21, 0x02	; 2
    531e:	60 e0       	ldi	r22, 0x00	; 0
    5320:	70 e0       	ldi	r23, 0x00	; 0
    5322:	80 e1       	ldi	r24, 0x10	; 16
    5324:	0e 94 ac 28 	call	0x5158	; 0x5158 <send_cmd>
    5328:	81 11       	cpse	r24, r1
    532a:	19 c0       	rjmp	.+50     	; 0x535e <disk_initialize+0x15e>
				ty = 0;
		}
	}
	//blinkWhiteLEDnrazy(ty);
	CardType = ty;
    532c:	00 93 1d 02 	sts	0x021D, r16	; 0x80021d <CardType>
	deselect();
    5330:	0e 94 19 28 	call	0x5032	; 0x5032 <deselect>

	if (ty) {			/* Initialization succeded */
    5334:	00 23       	and	r16, r16
    5336:	41 f0       	breq	.+16     	; 0x5348 <disk_initialize+0x148>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    5338:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    533c:	8e 7f       	andi	r24, 0xFE	; 254
    533e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Stat>
		FCLK_FAST();
    5342:	8d b1       	in	r24, 0x0d	; 13
    5344:	8c 7f       	andi	r24, 0xFC	; 252
    5346:	8d b9       	out	0x0d, r24	; 13
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
    5348:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    534c:	0d c0       	rjmp	.+26     	; 0x5368 <disk_initialize+0x168>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    534e:	81 e0       	ldi	r24, 0x01	; 1
    5350:	0b c0       	rjmp	.+22     	; 0x5368 <disk_initialize+0x168>
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    5352:	8c e0       	ldi	r24, 0x0C	; 12
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	//blinkWhiteLEDnrazy(ty);
	CardType = ty;
    5354:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <CardType>
	deselect();
    5358:	0e 94 19 28 	call	0x5032	; 0x5032 <deselect>
    535c:	ed cf       	rjmp	.-38     	; 0x5338 <disk_initialize+0x138>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	//blinkWhiteLEDnrazy(ty);
	CardType = ty;
    535e:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <CardType>
	deselect();
    5362:	0e 94 19 28 	call	0x5032	; 0x5032 <deselect>
    5366:	f0 cf       	rjmp	.-32     	; 0x5348 <disk_initialize+0x148>
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    5368:	0f 90       	pop	r0
    536a:	0f 90       	pop	r0
    536c:	0f 90       	pop	r0
    536e:	0f 90       	pop	r0
    5370:	df 91       	pop	r29
    5372:	cf 91       	pop	r28
    5374:	1f 91       	pop	r17
    5376:	0f 91       	pop	r16
    5378:	ff 90       	pop	r15
    537a:	ef 90       	pop	r14
    537c:	df 90       	pop	r13
    537e:	cf 90       	pop	r12
    5380:	08 95       	ret

00005382 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    5382:	81 11       	cpse	r24, r1
    5384:	03 c0       	rjmp	.+6      	; 0x538c <disk_status+0xa>
	return Stat;
    5386:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    538a:	08 95       	ret

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    538c:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    538e:	08 95       	ret

00005390 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    5390:	0f 93       	push	r16
    5392:	cf 93       	push	r28
    5394:	df 93       	push	r29
    5396:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
    5398:	81 11       	cpse	r24, r1
    539a:	44 c0       	rjmp	.+136    	; 0x5424 <disk_read+0x94>
    539c:	00 23       	and	r16, r16
    539e:	09 f4       	brne	.+2      	; 0x53a2 <disk_read+0x12>
    53a0:	43 c0       	rjmp	.+134    	; 0x5428 <disk_read+0x98>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    53a2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    53a6:	80 fd       	sbrc	r24, 0
    53a8:	41 c0       	rjmp	.+130    	; 0x542c <disk_read+0x9c>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    53aa:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <CardType>
    53ae:	83 fd       	sbrc	r24, 3
    53b0:	09 c0       	rjmp	.+18     	; 0x53c4 <disk_read+0x34>
    53b2:	01 2e       	mov	r0, r17
    53b4:	19 e0       	ldi	r17, 0x09	; 9
    53b6:	22 0f       	add	r18, r18
    53b8:	33 1f       	adc	r19, r19
    53ba:	44 1f       	adc	r20, r20
    53bc:	55 1f       	adc	r21, r21
    53be:	1a 95       	dec	r17
    53c0:	d1 f7       	brne	.-12     	; 0x53b6 <disk_read+0x26>
    53c2:	10 2d       	mov	r17, r0

	if (count == 1) {	/* Single block read */
    53c4:	01 30       	cpi	r16, 0x01	; 1
    53c6:	81 f4       	brne	.+32     	; 0x53e8 <disk_read+0x58>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
    53c8:	ba 01       	movw	r22, r20
    53ca:	a9 01       	movw	r20, r18
    53cc:	81 e1       	ldi	r24, 0x11	; 17
    53ce:	0e 94 ac 28 	call	0x5158	; 0x5158 <send_cmd>
    53d2:	81 11       	cpse	r24, r1
    53d4:	20 c0       	rjmp	.+64     	; 0x5416 <disk_read+0x86>
			&& rcvr_datablock(buff, 512))
    53d6:	60 e0       	ldi	r22, 0x00	; 0
    53d8:	72 e0       	ldi	r23, 0x02	; 2
    53da:	ce 01       	movw	r24, r28
    53dc:	0e 94 2e 28 	call	0x505c	; 0x505c <rcvr_datablock>
    53e0:	89 2b       	or	r24, r25
    53e2:	c9 f0       	breq	.+50     	; 0x5416 <disk_read+0x86>
    53e4:	00 e0       	ldi	r16, 0x00	; 0
    53e6:	17 c0       	rjmp	.+46     	; 0x5416 <disk_read+0x86>
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
    53e8:	ba 01       	movw	r22, r20
    53ea:	a9 01       	movw	r20, r18
    53ec:	82 e1       	ldi	r24, 0x12	; 18
    53ee:	0e 94 ac 28 	call	0x5158	; 0x5158 <send_cmd>
    53f2:	81 11       	cpse	r24, r1
    53f4:	10 c0       	rjmp	.+32     	; 0x5416 <disk_read+0x86>
			do {
				if (!rcvr_datablock(buff, 512)) break;
    53f6:	60 e0       	ldi	r22, 0x00	; 0
    53f8:	72 e0       	ldi	r23, 0x02	; 2
    53fa:	ce 01       	movw	r24, r28
    53fc:	0e 94 2e 28 	call	0x505c	; 0x505c <rcvr_datablock>
    5400:	89 2b       	or	r24, r25
    5402:	19 f0       	breq	.+6      	; 0x540a <disk_read+0x7a>
				buff += 512;
    5404:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    5406:	01 50       	subi	r16, 0x01	; 1
    5408:	b1 f7       	brne	.-20     	; 0x53f6 <disk_read+0x66>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
    540a:	40 e0       	ldi	r20, 0x00	; 0
    540c:	50 e0       	ldi	r21, 0x00	; 0
    540e:	ba 01       	movw	r22, r20
    5410:	8c e0       	ldi	r24, 0x0C	; 12
    5412:	0e 94 ac 28 	call	0x5158	; 0x5158 <send_cmd>
		}
	}
	deselect();
    5416:	0e 94 19 28 	call	0x5032	; 0x5032 <deselect>

	return count ? RES_ERROR : RES_OK;
    541a:	81 e0       	ldi	r24, 0x01	; 1
    541c:	01 11       	cpse	r16, r1
    541e:	07 c0       	rjmp	.+14     	; 0x542e <disk_read+0x9e>
    5420:	80 e0       	ldi	r24, 0x00	; 0
    5422:	05 c0       	rjmp	.+10     	; 0x542e <disk_read+0x9e>
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
    5424:	84 e0       	ldi	r24, 0x04	; 4
    5426:	03 c0       	rjmp	.+6      	; 0x542e <disk_read+0x9e>
    5428:	84 e0       	ldi	r24, 0x04	; 4
    542a:	01 c0       	rjmp	.+2      	; 0x542e <disk_read+0x9e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    542c:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    542e:	df 91       	pop	r29
    5430:	cf 91       	pop	r28
    5432:	0f 91       	pop	r16
    5434:	08 95       	ret

00005436 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    5436:	cf 92       	push	r12
    5438:	df 92       	push	r13
    543a:	ef 92       	push	r14
    543c:	ff 92       	push	r15
    543e:	0f 93       	push	r16
    5440:	cf 93       	push	r28
    5442:	df 93       	push	r29
    5444:	eb 01       	movw	r28, r22
    5446:	69 01       	movw	r12, r18
    5448:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
    544a:	81 11       	cpse	r24, r1
    544c:	51 c0       	rjmp	.+162    	; 0x54f0 <disk_write+0xba>
    544e:	00 23       	and	r16, r16
    5450:	09 f4       	brne	.+2      	; 0x5454 <disk_write+0x1e>
    5452:	50 c0       	rjmp	.+160    	; 0x54f4 <disk_write+0xbe>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    5454:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    5458:	80 fd       	sbrc	r24, 0
    545a:	4e c0       	rjmp	.+156    	; 0x54f8 <disk_write+0xc2>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    545c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    5460:	82 fd       	sbrc	r24, 2
    5462:	4c c0       	rjmp	.+152    	; 0x54fc <disk_write+0xc6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    5464:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <CardType>
    5468:	83 fd       	sbrc	r24, 3
    546a:	09 c0       	rjmp	.+18     	; 0x547e <disk_write+0x48>
    546c:	0b 2e       	mov	r0, r27
    546e:	b9 e0       	ldi	r27, 0x09	; 9
    5470:	cc 0c       	add	r12, r12
    5472:	dd 1c       	adc	r13, r13
    5474:	ee 1c       	adc	r14, r14
    5476:	ff 1c       	adc	r15, r15
    5478:	ba 95       	dec	r27
    547a:	d1 f7       	brne	.-12     	; 0x5470 <disk_write+0x3a>
    547c:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    547e:	01 30       	cpi	r16, 0x01	; 1
    5480:	79 f4       	brne	.+30     	; 0x54a0 <disk_write+0x6a>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    5482:	b7 01       	movw	r22, r14
    5484:	a6 01       	movw	r20, r12
    5486:	88 e1       	ldi	r24, 0x18	; 24
    5488:	0e 94 ac 28 	call	0x5158	; 0x5158 <send_cmd>
    548c:	81 11       	cpse	r24, r1
    548e:	29 c0       	rjmp	.+82     	; 0x54e2 <disk_write+0xac>
			&& xmit_datablock(buff, 0xFE))
    5490:	6e ef       	ldi	r22, 0xFE	; 254
    5492:	ce 01       	movw	r24, r28
    5494:	0e 94 74 28 	call	0x50e8	; 0x50e8 <xmit_datablock>
    5498:	89 2b       	or	r24, r25
    549a:	19 f1       	breq	.+70     	; 0x54e2 <disk_write+0xac>
    549c:	00 e0       	ldi	r16, 0x00	; 0
    549e:	21 c0       	rjmp	.+66     	; 0x54e2 <disk_write+0xac>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    54a0:	86 70       	andi	r24, 0x06	; 6
    54a2:	39 f0       	breq	.+14     	; 0x54b2 <disk_write+0x7c>
    54a4:	40 2f       	mov	r20, r16
    54a6:	50 e0       	ldi	r21, 0x00	; 0
    54a8:	60 e0       	ldi	r22, 0x00	; 0
    54aa:	70 e0       	ldi	r23, 0x00	; 0
    54ac:	87 e9       	ldi	r24, 0x97	; 151
    54ae:	0e 94 ac 28 	call	0x5158	; 0x5158 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    54b2:	b7 01       	movw	r22, r14
    54b4:	a6 01       	movw	r20, r12
    54b6:	89 e1       	ldi	r24, 0x19	; 25
    54b8:	0e 94 ac 28 	call	0x5158	; 0x5158 <send_cmd>
    54bc:	81 11       	cpse	r24, r1
    54be:	11 c0       	rjmp	.+34     	; 0x54e2 <disk_write+0xac>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    54c0:	6c ef       	ldi	r22, 0xFC	; 252
    54c2:	ce 01       	movw	r24, r28
    54c4:	0e 94 74 28 	call	0x50e8	; 0x50e8 <xmit_datablock>
    54c8:	89 2b       	or	r24, r25
    54ca:	19 f0       	breq	.+6      	; 0x54d2 <disk_write+0x9c>
				buff += 512;
    54cc:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    54ce:	01 50       	subi	r16, 0x01	; 1
    54d0:	b9 f7       	brne	.-18     	; 0x54c0 <disk_write+0x8a>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    54d2:	6d ef       	ldi	r22, 0xFD	; 253
    54d4:	80 e0       	ldi	r24, 0x00	; 0
    54d6:	90 e0       	ldi	r25, 0x00	; 0
    54d8:	0e 94 74 28 	call	0x50e8	; 0x50e8 <xmit_datablock>
    54dc:	89 2b       	or	r24, r25
    54de:	09 f4       	brne	.+2      	; 0x54e2 <disk_write+0xac>
				count = 1;
    54e0:	01 e0       	ldi	r16, 0x01	; 1
		}
	}
	deselect();
    54e2:	0e 94 19 28 	call	0x5032	; 0x5032 <deselect>

	return count ? RES_ERROR : RES_OK;
    54e6:	81 e0       	ldi	r24, 0x01	; 1
    54e8:	01 11       	cpse	r16, r1
    54ea:	09 c0       	rjmp	.+18     	; 0x54fe <disk_write+0xc8>
    54ec:	80 e0       	ldi	r24, 0x00	; 0
    54ee:	07 c0       	rjmp	.+14     	; 0x54fe <disk_write+0xc8>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
    54f0:	84 e0       	ldi	r24, 0x04	; 4
    54f2:	05 c0       	rjmp	.+10     	; 0x54fe <disk_write+0xc8>
    54f4:	84 e0       	ldi	r24, 0x04	; 4
    54f6:	03 c0       	rjmp	.+6      	; 0x54fe <disk_write+0xc8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    54f8:	83 e0       	ldi	r24, 0x03	; 3
    54fa:	01 c0       	rjmp	.+2      	; 0x54fe <disk_write+0xc8>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    54fc:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    54fe:	df 91       	pop	r29
    5500:	cf 91       	pop	r28
    5502:	0f 91       	pop	r16
    5504:	ff 90       	pop	r15
    5506:	ef 90       	pop	r14
    5508:	df 90       	pop	r13
    550a:	cf 90       	pop	r12
    550c:	08 95       	ret

0000550e <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    550e:	ef 92       	push	r14
    5510:	ff 92       	push	r15
    5512:	0f 93       	push	r16
    5514:	1f 93       	push	r17
    5516:	cf 93       	push	r28
    5518:	df 93       	push	r29
    551a:	cd b7       	in	r28, 0x3d	; 61
    551c:	de b7       	in	r29, 0x3e	; 62
    551e:	60 97       	sbiw	r28, 0x10	; 16
    5520:	0f b6       	in	r0, 0x3f	; 63
    5522:	f8 94       	cli
    5524:	de bf       	out	0x3e, r29	; 62
    5526:	0f be       	out	0x3f, r0	; 63
    5528:	cd bf       	out	0x3d, r28	; 61
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
    552a:	81 11       	cpse	r24, r1
    552c:	96 c1       	rjmp	.+812    	; 0x585a <disk_ioctl+0x34c>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
    552e:	65 30       	cpi	r22, 0x05	; 5
    5530:	71 f4       	brne	.+28     	; 0x554e <disk_ioctl+0x40>
		switch (ptr[0]) {
    5532:	fa 01       	movw	r30, r20
    5534:	80 81       	ld	r24, Z
    5536:	88 23       	and	r24, r24
    5538:	19 f0       	breq	.+6      	; 0x5540 <disk_ioctl+0x32>
    553a:	81 30       	cpi	r24, 0x01	; 1
    553c:	19 f0       	breq	.+6      	; 0x5544 <disk_ioctl+0x36>
    553e:	8f c1       	rjmp	.+798    	; 0x585e <disk_ioctl+0x350>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
			res = RES_OK;
    5540:	80 e0       	ldi	r24, 0x00	; 0
    5542:	90 c1       	rjmp	.+800    	; 0x5864 <disk_ioctl+0x356>
			break;
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
    5544:	81 e0       	ldi	r24, 0x01	; 1
    5546:	fa 01       	movw	r30, r20
    5548:	81 83       	std	Z+1, r24	; 0x01
			res = RES_OK;
    554a:	80 e0       	ldi	r24, 0x00	; 0
			break;
    554c:	8b c1       	rjmp	.+790    	; 0x5864 <disk_ioctl+0x356>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    554e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
    5552:	80 fd       	sbrc	r24, 0
    5554:	86 c1       	rjmp	.+780    	; 0x5862 <disk_ioctl+0x354>
    5556:	8a 01       	movw	r16, r20

		switch (ctrl) {
    5558:	86 2f       	mov	r24, r22
    555a:	90 e0       	ldi	r25, 0x00	; 0
    555c:	8f 30       	cpi	r24, 0x0F	; 15
    555e:	91 05       	cpc	r25, r1
    5560:	08 f0       	brcs	.+2      	; 0x5564 <disk_ioctl+0x56>
    5562:	60 c1       	rjmp	.+704    	; 0x5824 <disk_ioctl+0x316>
    5564:	fc 01       	movw	r30, r24
    5566:	e6 55       	subi	r30, 0x56	; 86
    5568:	ff 4f       	sbci	r31, 0xFF	; 255
    556a:	0c 94 4f 33 	jmp	0x669e	; 0x669e <__tablejump2__>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
    556e:	0e 94 1d 28 	call	0x503a	; 0x503a <select>
    5572:	89 2b       	or	r24, r25
    5574:	09 f4       	brne	.+2      	; 0x5578 <disk_ioctl+0x6a>
    5576:	58 c1       	rjmp	.+688    	; 0x5828 <disk_ioctl+0x31a>
				deselect();
    5578:	0e 94 19 28 	call	0x5032	; 0x5032 <deselect>
				res = RES_OK;
    557c:	10 e0       	ldi	r17, 0x00	; 0
    557e:	69 c1       	rjmp	.+722    	; 0x5852 <disk_ioctl+0x344>
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    5580:	40 e0       	ldi	r20, 0x00	; 0
    5582:	50 e0       	ldi	r21, 0x00	; 0
    5584:	ba 01       	movw	r22, r20
    5586:	89 e0       	ldi	r24, 0x09	; 9
    5588:	0e 94 ac 28 	call	0x5158	; 0x5158 <send_cmd>
    558c:	81 11       	cpse	r24, r1
    558e:	4e c1       	rjmp	.+668    	; 0x582c <disk_ioctl+0x31e>
    5590:	60 e1       	ldi	r22, 0x10	; 16
    5592:	70 e0       	ldi	r23, 0x00	; 0
    5594:	ce 01       	movw	r24, r28
    5596:	01 96       	adiw	r24, 0x01	; 1
    5598:	0e 94 2e 28 	call	0x505c	; 0x505c <rcvr_datablock>
    559c:	89 2b       	or	r24, r25
    559e:	09 f4       	brne	.+2      	; 0x55a2 <disk_ioctl+0x94>
    55a0:	47 c1       	rjmp	.+654    	; 0x5830 <disk_ioctl+0x322>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    55a2:	89 81       	ldd	r24, Y+1	; 0x01
    55a4:	82 95       	swap	r24
    55a6:	86 95       	lsr	r24
    55a8:	86 95       	lsr	r24
    55aa:	83 70       	andi	r24, 0x03	; 3
    55ac:	81 30       	cpi	r24, 0x01	; 1
    55ae:	d9 f4       	brne	.+54     	; 0x55e6 <disk_ioctl+0xd8>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
    55b0:	89 85       	ldd	r24, Y+9	; 0x09
    55b2:	90 e0       	ldi	r25, 0x00	; 0
    55b4:	38 2f       	mov	r19, r24
    55b6:	22 27       	eor	r18, r18
    55b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    55ba:	90 e0       	ldi	r25, 0x00	; 0
    55bc:	01 96       	adiw	r24, 0x01	; 1
    55be:	82 0f       	add	r24, r18
    55c0:	93 1f       	adc	r25, r19
    55c2:	a0 e0       	ldi	r26, 0x00	; 0
    55c4:	b0 e0       	ldi	r27, 0x00	; 0
    55c6:	07 2e       	mov	r0, r23
    55c8:	7a e0       	ldi	r23, 0x0A	; 10
    55ca:	88 0f       	add	r24, r24
    55cc:	99 1f       	adc	r25, r25
    55ce:	aa 1f       	adc	r26, r26
    55d0:	bb 1f       	adc	r27, r27
    55d2:	7a 95       	dec	r23
    55d4:	d1 f7       	brne	.-12     	; 0x55ca <disk_ioctl+0xbc>
    55d6:	70 2d       	mov	r23, r0
    55d8:	f8 01       	movw	r30, r16
    55da:	80 83       	st	Z, r24
    55dc:	91 83       	std	Z+1, r25	; 0x01
    55de:	a2 83       	std	Z+2, r26	; 0x02
    55e0:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
				}
				res = RES_OK;
    55e2:	10 e0       	ldi	r17, 0x00	; 0
    55e4:	36 c1       	rjmp	.+620    	; 0x5852 <disk_ioctl+0x344>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
    55e6:	29 85       	ldd	r18, Y+9	; 0x09
    55e8:	22 95       	swap	r18
    55ea:	26 95       	lsr	r18
    55ec:	26 95       	lsr	r18
    55ee:	23 70       	andi	r18, 0x03	; 3
    55f0:	88 85       	ldd	r24, Y+8	; 0x08
    55f2:	f4 e0       	ldi	r31, 0x04	; 4
    55f4:	8f 9f       	mul	r24, r31
    55f6:	c0 01       	movw	r24, r0
    55f8:	11 24       	eor	r1, r1
    55fa:	82 0f       	add	r24, r18
    55fc:	91 1d       	adc	r25, r1
    55fe:	9c 01       	movw	r18, r24
    5600:	2f 5f       	subi	r18, 0xFF	; 255
    5602:	3f 4f       	sbci	r19, 0xFF	; 255
    5604:	8f 81       	ldd	r24, Y+7	; 0x07
    5606:	83 70       	andi	r24, 0x03	; 3
    5608:	90 e0       	ldi	r25, 0x00	; 0
    560a:	98 2f       	mov	r25, r24
    560c:	88 27       	eor	r24, r24
    560e:	99 0f       	add	r25, r25
    5610:	99 0f       	add	r25, r25
    5612:	82 0f       	add	r24, r18
    5614:	93 1f       	adc	r25, r19
    5616:	a0 e0       	ldi	r26, 0x00	; 0
    5618:	b0 e0       	ldi	r27, 0x00	; 0
    561a:	3e 81       	ldd	r19, Y+6	; 0x06
    561c:	3f 70       	andi	r19, 0x0F	; 15
    561e:	2b 85       	ldd	r18, Y+11	; 0x0b
    5620:	22 1f       	adc	r18, r18
    5622:	22 27       	eor	r18, r18
    5624:	22 1f       	adc	r18, r18
    5626:	32 0f       	add	r19, r18
    5628:	2a 85       	ldd	r18, Y+10	; 0x0a
    562a:	23 70       	andi	r18, 0x03	; 3
    562c:	22 0f       	add	r18, r18
    562e:	23 0f       	add	r18, r19
    5630:	27 50       	subi	r18, 0x07	; 7
    5632:	04 c0       	rjmp	.+8      	; 0x563c <disk_ioctl+0x12e>
    5634:	88 0f       	add	r24, r24
    5636:	99 1f       	adc	r25, r25
    5638:	aa 1f       	adc	r26, r26
    563a:	bb 1f       	adc	r27, r27
    563c:	2a 95       	dec	r18
    563e:	d2 f7       	brpl	.-12     	; 0x5634 <disk_ioctl+0x126>
    5640:	f8 01       	movw	r30, r16
    5642:	80 83       	st	Z, r24
    5644:	91 83       	std	Z+1, r25	; 0x01
    5646:	a2 83       	std	Z+2, r26	; 0x02
    5648:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    564a:	10 e0       	ldi	r17, 0x00	; 0
    564c:	02 c1       	rjmp	.+516    	; 0x5852 <disk_ioctl+0x344>
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    564e:	80 e0       	ldi	r24, 0x00	; 0
    5650:	92 e0       	ldi	r25, 0x02	; 2
    5652:	fa 01       	movw	r30, r20
    5654:	91 83       	std	Z+1, r25	; 0x01
    5656:	80 83       	st	Z, r24
			res = RES_OK;
    5658:	10 e0       	ldi	r17, 0x00	; 0
			break;
    565a:	fb c0       	rjmp	.+502    	; 0x5852 <disk_ioctl+0x344>

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
    565c:	f0 90 1d 02 	lds	r15, 0x021D	; 0x80021d <CardType>
    5660:	f2 fe       	sbrs	r15, 2
    5662:	31 c0       	rjmp	.+98     	; 0x56c6 <disk_ioctl+0x1b8>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    5664:	40 e0       	ldi	r20, 0x00	; 0
    5666:	50 e0       	ldi	r21, 0x00	; 0
    5668:	ba 01       	movw	r22, r20
    566a:	8d e8       	ldi	r24, 0x8D	; 141
    566c:	0e 94 ac 28 	call	0x5158	; 0x5158 <send_cmd>
    5670:	81 11       	cpse	r24, r1
    5672:	e0 c0       	rjmp	.+448    	; 0x5834 <disk_ioctl+0x326>
					rcvr_spi();
    5674:	0e 94 00 28 	call	0x5000	; 0x5000 <rcvr_spi>
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    5678:	60 e1       	ldi	r22, 0x10	; 16
    567a:	70 e0       	ldi	r23, 0x00	; 0
    567c:	ce 01       	movw	r24, r28
    567e:	01 96       	adiw	r24, 0x01	; 1
    5680:	0e 94 2e 28 	call	0x505c	; 0x505c <rcvr_datablock>
    5684:	89 2b       	or	r24, r25
    5686:	09 f4       	brne	.+2      	; 0x568a <disk_ioctl+0x17c>
    5688:	d7 c0       	rjmp	.+430    	; 0x5838 <disk_ioctl+0x32a>
    568a:	0f 2e       	mov	r0, r31
    568c:	f0 e3       	ldi	r31, 0x30	; 48
    568e:	ff 2e       	mov	r15, r31
    5690:	f0 2d       	mov	r31, r0
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
    5692:	0e 94 00 28 	call	0x5000	; 0x5000 <rcvr_spi>
    5696:	fa 94       	dec	r15
    5698:	f1 10       	cpse	r15, r1
    569a:	fb cf       	rjmp	.-10     	; 0x5692 <disk_ioctl+0x184>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    569c:	2b 85       	ldd	r18, Y+11	; 0x0b
    569e:	22 95       	swap	r18
    56a0:	2f 70       	andi	r18, 0x0F	; 15
    56a2:	80 e1       	ldi	r24, 0x10	; 16
    56a4:	90 e0       	ldi	r25, 0x00	; 0
    56a6:	a0 e0       	ldi	r26, 0x00	; 0
    56a8:	b0 e0       	ldi	r27, 0x00	; 0
    56aa:	04 c0       	rjmp	.+8      	; 0x56b4 <disk_ioctl+0x1a6>
    56ac:	88 0f       	add	r24, r24
    56ae:	99 1f       	adc	r25, r25
    56b0:	aa 1f       	adc	r26, r26
    56b2:	bb 1f       	adc	r27, r27
    56b4:	2a 95       	dec	r18
    56b6:	d2 f7       	brpl	.-12     	; 0x56ac <disk_ioctl+0x19e>
    56b8:	f8 01       	movw	r30, r16
    56ba:	80 83       	st	Z, r24
    56bc:	91 83       	std	Z+1, r25	; 0x01
    56be:	a2 83       	std	Z+2, r26	; 0x02
    56c0:	b3 83       	std	Z+3, r27	; 0x03
						res = RES_OK;
    56c2:	10 e0       	ldi	r17, 0x00	; 0
    56c4:	c6 c0       	rjmp	.+396    	; 0x5852 <disk_ioctl+0x344>
					}
				}
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    56c6:	40 e0       	ldi	r20, 0x00	; 0
    56c8:	50 e0       	ldi	r21, 0x00	; 0
    56ca:	ba 01       	movw	r22, r20
    56cc:	89 e0       	ldi	r24, 0x09	; 9
    56ce:	0e 94 ac 28 	call	0x5158	; 0x5158 <send_cmd>
    56d2:	81 11       	cpse	r24, r1
    56d4:	b3 c0       	rjmp	.+358    	; 0x583c <disk_ioctl+0x32e>
    56d6:	60 e1       	ldi	r22, 0x10	; 16
    56d8:	70 e0       	ldi	r23, 0x00	; 0
    56da:	ce 01       	movw	r24, r28
    56dc:	01 96       	adiw	r24, 0x01	; 1
    56de:	0e 94 2e 28 	call	0x505c	; 0x505c <rcvr_datablock>
    56e2:	89 2b       	or	r24, r25
    56e4:	09 f4       	brne	.+2      	; 0x56e8 <disk_ioctl+0x1da>
    56e6:	ac c0       	rjmp	.+344    	; 0x5840 <disk_ioctl+0x332>
					if (CardType & CT_SD1) {	/* SDv1 */
    56e8:	f1 fe       	sbrs	r15, 1
    56ea:	20 c0       	rjmp	.+64     	; 0x572c <disk_ioctl+0x21e>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    56ec:	2b 85       	ldd	r18, Y+11	; 0x0b
    56ee:	2f 73       	andi	r18, 0x3F	; 63
    56f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    56f2:	88 1f       	adc	r24, r24
    56f4:	88 27       	eor	r24, r24
    56f6:	88 1f       	adc	r24, r24
    56f8:	90 e0       	ldi	r25, 0x00	; 0
    56fa:	01 96       	adiw	r24, 0x01	; 1
    56fc:	82 0f       	add	r24, r18
    56fe:	91 1d       	adc	r25, r1
    5700:	82 0f       	add	r24, r18
    5702:	91 1d       	adc	r25, r1
    5704:	2e 85       	ldd	r18, Y+14	; 0x0e
    5706:	22 95       	swap	r18
    5708:	26 95       	lsr	r18
    570a:	26 95       	lsr	r18
    570c:	23 70       	andi	r18, 0x03	; 3
    570e:	21 50       	subi	r18, 0x01	; 1
    5710:	02 c0       	rjmp	.+4      	; 0x5716 <disk_ioctl+0x208>
    5712:	88 0f       	add	r24, r24
    5714:	99 1f       	adc	r25, r25
    5716:	2a 95       	dec	r18
    5718:	e2 f7       	brpl	.-8      	; 0x5712 <disk_ioctl+0x204>
    571a:	a0 e0       	ldi	r26, 0x00	; 0
    571c:	b0 e0       	ldi	r27, 0x00	; 0
    571e:	f8 01       	movw	r30, r16
    5720:	80 83       	st	Z, r24
    5722:	91 83       	std	Z+1, r25	; 0x01
    5724:	a2 83       	std	Z+2, r26	; 0x02
    5726:	b3 83       	std	Z+3, r27	; 0x03
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
					}
					res = RES_OK;
    5728:	10 e0       	ldi	r17, 0x00	; 0
    572a:	93 c0       	rjmp	.+294    	; 0x5852 <disk_ioctl+0x344>
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
					if (CardType & CT_SD1) {	/* SDv1 */
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    572c:	8c 85       	ldd	r24, Y+12	; 0x0c
    572e:	28 2f       	mov	r18, r24
    5730:	23 70       	andi	r18, 0x03	; 3
    5732:	82 95       	swap	r24
    5734:	86 95       	lsr	r24
    5736:	87 70       	andi	r24, 0x07	; 7
    5738:	90 e0       	ldi	r25, 0x00	; 0
    573a:	f8 e0       	ldi	r31, 0x08	; 8
    573c:	2f 9f       	mul	r18, r31
    573e:	80 0d       	add	r24, r0
    5740:	91 1d       	adc	r25, r1
    5742:	11 24       	eor	r1, r1
    5744:	01 96       	adiw	r24, 0x01	; 1
    5746:	2b 85       	ldd	r18, Y+11	; 0x0b
    5748:	2c 77       	andi	r18, 0x7C	; 124
    574a:	30 e0       	ldi	r19, 0x00	; 0
    574c:	35 95       	asr	r19
    574e:	27 95       	ror	r18
    5750:	35 95       	asr	r19
    5752:	27 95       	ror	r18
    5754:	2f 5f       	subi	r18, 0xFF	; 255
    5756:	3f 4f       	sbci	r19, 0xFF	; 255
    5758:	82 9f       	mul	r24, r18
    575a:	a0 01       	movw	r20, r0
    575c:	83 9f       	mul	r24, r19
    575e:	50 0d       	add	r21, r0
    5760:	92 9f       	mul	r25, r18
    5762:	50 0d       	add	r21, r0
    5764:	11 24       	eor	r1, r1
    5766:	ca 01       	movw	r24, r20
    5768:	a0 e0       	ldi	r26, 0x00	; 0
    576a:	b0 e0       	ldi	r27, 0x00	; 0
    576c:	f8 01       	movw	r30, r16
    576e:	80 83       	st	Z, r24
    5770:	91 83       	std	Z+1, r25	; 0x01
    5772:	a2 83       	std	Z+2, r26	; 0x02
    5774:	b3 83       	std	Z+3, r27	; 0x03
					}
					res = RES_OK;
    5776:	10 e0       	ldi	r17, 0x00	; 0
    5778:	6c c0       	rjmp	.+216    	; 0x5852 <disk_ioctl+0x344>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    577a:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <CardType>
    577e:	fa 01       	movw	r30, r20
    5780:	80 83       	st	Z, r24
			res = RES_OK;
    5782:	10 e0       	ldi	r17, 0x00	; 0
			break;
    5784:	66 c0       	rjmp	.+204    	; 0x5852 <disk_ioctl+0x344>

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    5786:	40 e0       	ldi	r20, 0x00	; 0
    5788:	50 e0       	ldi	r21, 0x00	; 0
    578a:	ba 01       	movw	r22, r20
    578c:	89 e0       	ldi	r24, 0x09	; 9
    578e:	0e 94 ac 28 	call	0x5158	; 0x5158 <send_cmd>
    5792:	81 11       	cpse	r24, r1
    5794:	57 c0       	rjmp	.+174    	; 0x5844 <disk_ioctl+0x336>
				&& rcvr_datablock(ptr, 16))
    5796:	60 e1       	ldi	r22, 0x10	; 16
    5798:	70 e0       	ldi	r23, 0x00	; 0
    579a:	c8 01       	movw	r24, r16
    579c:	0e 94 2e 28 	call	0x505c	; 0x505c <rcvr_datablock>

		switch (ctrl) {
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
				deselect();
				res = RES_OK;
    57a0:	11 e0       	ldi	r17, 0x01	; 1
    57a2:	89 2b       	or	r24, r25
    57a4:	09 f4       	brne	.+2      	; 0x57a8 <disk_ioctl+0x29a>
    57a6:	55 c0       	rjmp	.+170    	; 0x5852 <disk_ioctl+0x344>
    57a8:	10 e0       	ldi	r17, 0x00	; 0
    57aa:	53 c0       	rjmp	.+166    	; 0x5852 <disk_ioctl+0x344>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    57ac:	40 e0       	ldi	r20, 0x00	; 0
    57ae:	50 e0       	ldi	r21, 0x00	; 0
    57b0:	ba 01       	movw	r22, r20
    57b2:	8a e0       	ldi	r24, 0x0A	; 10
    57b4:	0e 94 ac 28 	call	0x5158	; 0x5158 <send_cmd>
    57b8:	81 11       	cpse	r24, r1
    57ba:	46 c0       	rjmp	.+140    	; 0x5848 <disk_ioctl+0x33a>
				&& rcvr_datablock(ptr, 16))
    57bc:	60 e1       	ldi	r22, 0x10	; 16
    57be:	70 e0       	ldi	r23, 0x00	; 0
    57c0:	c8 01       	movw	r24, r16
    57c2:	0e 94 2e 28 	call	0x505c	; 0x505c <rcvr_datablock>

		switch (ctrl) {
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
				deselect();
				res = RES_OK;
    57c6:	11 e0       	ldi	r17, 0x01	; 1
    57c8:	89 2b       	or	r24, r25
    57ca:	09 f4       	brne	.+2      	; 0x57ce <disk_ioctl+0x2c0>
    57cc:	42 c0       	rjmp	.+132    	; 0x5852 <disk_ioctl+0x344>
    57ce:	10 e0       	ldi	r17, 0x00	; 0
    57d0:	40 c0       	rjmp	.+128    	; 0x5852 <disk_ioctl+0x344>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    57d2:	40 e0       	ldi	r20, 0x00	; 0
    57d4:	50 e0       	ldi	r21, 0x00	; 0
    57d6:	ba 01       	movw	r22, r20
    57d8:	8a e3       	ldi	r24, 0x3A	; 58
    57da:	0e 94 ac 28 	call	0x5158	; 0x5158 <send_cmd>
    57de:	81 11       	cpse	r24, r1
    57e0:	35 c0       	rjmp	.+106    	; 0x584c <disk_ioctl+0x33e>
    57e2:	78 01       	movw	r14, r16
    57e4:	0c 5f       	subi	r16, 0xFC	; 252
    57e6:	1f 4f       	sbci	r17, 0xFF	; 255
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    57e8:	0e 94 00 28 	call	0x5000	; 0x5000 <rcvr_spi>
    57ec:	f7 01       	movw	r30, r14
    57ee:	81 93       	st	Z+, r24
    57f0:	7f 01       	movw	r14, r30
    57f2:	0e 17       	cp	r16, r30
    57f4:	1f 07       	cpc	r17, r31
    57f6:	c1 f7       	brne	.-16     	; 0x57e8 <disk_ioctl+0x2da>
				res = RES_OK;
    57f8:	10 e0       	ldi	r17, 0x00	; 0
    57fa:	2b c0       	rjmp	.+86     	; 0x5852 <disk_ioctl+0x344>
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    57fc:	40 e0       	ldi	r20, 0x00	; 0
    57fe:	50 e0       	ldi	r21, 0x00	; 0
    5800:	ba 01       	movw	r22, r20
    5802:	8d e8       	ldi	r24, 0x8D	; 141
    5804:	0e 94 ac 28 	call	0x5158	; 0x5158 <send_cmd>
    5808:	81 11       	cpse	r24, r1
    580a:	22 c0       	rjmp	.+68     	; 0x5850 <disk_ioctl+0x342>
				rcvr_spi();
    580c:	0e 94 00 28 	call	0x5000	; 0x5000 <rcvr_spi>
				if (rcvr_datablock(ptr, 64))
    5810:	60 e4       	ldi	r22, 0x40	; 64
    5812:	70 e0       	ldi	r23, 0x00	; 0
    5814:	c8 01       	movw	r24, r16
    5816:	0e 94 2e 28 	call	0x505c	; 0x505c <rcvr_datablock>

		switch (ctrl) {
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
				deselect();
				res = RES_OK;
    581a:	11 e0       	ldi	r17, 0x01	; 1
    581c:	89 2b       	or	r24, r25
    581e:	c9 f0       	breq	.+50     	; 0x5852 <disk_ioctl+0x344>
    5820:	10 e0       	ldi	r17, 0x00	; 0
    5822:	17 c0       	rjmp	.+46     	; 0x5852 <disk_ioctl+0x344>
					res = RES_OK;
			}
			break;

		default:
			res = RES_PARERR;
    5824:	14 e0       	ldi	r17, 0x04	; 4
    5826:	15 c0       	rjmp	.+42     	; 0x5852 <disk_ioctl+0x344>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
    5828:	11 e0       	ldi	r17, 0x01	; 1
    582a:	13 c0       	rjmp	.+38     	; 0x5852 <disk_ioctl+0x344>
    582c:	11 e0       	ldi	r17, 0x01	; 1
    582e:	11 c0       	rjmp	.+34     	; 0x5852 <disk_ioctl+0x344>
    5830:	11 e0       	ldi	r17, 0x01	; 1
    5832:	0f c0       	rjmp	.+30     	; 0x5852 <disk_ioctl+0x344>
    5834:	11 e0       	ldi	r17, 0x01	; 1
    5836:	0d c0       	rjmp	.+26     	; 0x5852 <disk_ioctl+0x344>
    5838:	11 e0       	ldi	r17, 0x01	; 1
    583a:	0b c0       	rjmp	.+22     	; 0x5852 <disk_ioctl+0x344>
    583c:	11 e0       	ldi	r17, 0x01	; 1
    583e:	09 c0       	rjmp	.+18     	; 0x5852 <disk_ioctl+0x344>
    5840:	11 e0       	ldi	r17, 0x01	; 1
    5842:	07 c0       	rjmp	.+14     	; 0x5852 <disk_ioctl+0x344>
    5844:	11 e0       	ldi	r17, 0x01	; 1
    5846:	05 c0       	rjmp	.+10     	; 0x5852 <disk_ioctl+0x344>
    5848:	11 e0       	ldi	r17, 0x01	; 1
    584a:	03 c0       	rjmp	.+6      	; 0x5852 <disk_ioctl+0x344>
    584c:	11 e0       	ldi	r17, 0x01	; 1
    584e:	01 c0       	rjmp	.+2      	; 0x5852 <disk_ioctl+0x344>
    5850:	11 e0       	ldi	r17, 0x01	; 1

		default:
			res = RES_PARERR;
		}

		deselect();
    5852:	0e 94 19 28 	call	0x5032	; 0x5032 <deselect>
    5856:	81 2f       	mov	r24, r17
    5858:	05 c0       	rjmp	.+10     	; 0x5864 <disk_ioctl+0x356>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
    585a:	84 e0       	ldi	r24, 0x04	; 4
    585c:	03 c0       	rjmp	.+6      	; 0x5864 <disk_ioctl+0x356>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
			res = RES_OK;
			break;
		default :
			res = RES_PARERR;
    585e:	84 e0       	ldi	r24, 0x04	; 4
    5860:	01 c0       	rjmp	.+2      	; 0x5864 <disk_ioctl+0x356>
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    5862:	83 e0       	ldi	r24, 0x03	; 3

		deselect();
	}

	return res;
}
    5864:	60 96       	adiw	r28, 0x10	; 16
    5866:	0f b6       	in	r0, 0x3f	; 63
    5868:	f8 94       	cli
    586a:	de bf       	out	0x3e, r29	; 62
    586c:	0f be       	out	0x3f, r0	; 63
    586e:	cd bf       	out	0x3d, r28	; 61
    5870:	df 91       	pop	r29
    5872:	cf 91       	pop	r28
    5874:	1f 91       	pop	r17
    5876:	0f 91       	pop	r16
    5878:	ff 90       	pop	r15
    587a:	ef 90       	pop	r14
    587c:	08 95       	ret

0000587e <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;						/* 100Hz decrement timer */
    587e:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <Timer1>
	if (n) Timer1 = --n;
    5882:	88 23       	and	r24, r24
    5884:	19 f0       	breq	.+6      	; 0x588c <disk_timerproc+0xe>
    5886:	81 50       	subi	r24, 0x01	; 1
    5888:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <Timer1>
	n = Timer2;
    588c:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <Timer2>
	if (n) Timer2 = --n;
    5890:	88 23       	and	r24, r24
    5892:	19 f0       	breq	.+6      	; 0x589a <disk_timerproc+0x1c>
    5894:	81 50       	subi	r24, 0x01	; 1
    5896:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <Timer2>

	s = Stat;
    589a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Stat>
	//else					/* Write enabled */
		s &= ~STA_PROTECT;
	//if ( (SOCKINS & SOCKPORT))			/* Card inserted */
	//	s |= (STA_NODISK | STA_NOINIT);
	//else					/* Socket empty */ 
		s &= ~STA_NODISK;
    589e:	89 7f       	andi	r24, 0xF9	; 249
	Stat = s;
    58a0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Stat>
    58a4:	08 95       	ret

000058a6 <spiInit>:
    cbi(DDRB, 4);   // set MISO as input
    sbi(DDRB, 3);   // set MOSI as output
    sbi(DDRB, 2);   // SS must be output for Master mode to work
#else
	// setup SPI I/O pins
	sbi(PORTB, SCK);	// set SCK hi
    58a6:	c7 9a       	sbi	0x18, 7	; 24
	sbi(PORTB,MISO);	// set pull-up for MISO
    58a8:	c6 9a       	sbi	0x18, 6	; 24
	sbi(DDRB, SCK);	// set SCK as output
    58aa:	bf 9a       	sbi	0x17, 7	; 23
	cbi(DDRB, MISO);	// set MISO as input
    58ac:	be 98       	cbi	0x17, 6	; 23
	sbi(DDRB, MOSI);	// set MOSI as output
    58ae:	bd 9a       	sbi	0x17, 5	; 23
	sbi(DDRB, CS);	// SS must be output for Master mode to work
    58b0:	bc 9a       	sbi	0x17, 4	; 23
#endif
	
	// setup SPI interface :
	// master mode
	sbi(SPCR, MSTR);
    58b2:	6c 9a       	sbi	0x0d, 4	; 13
	// clock = f/4
//	cbi(SPCR, SPR0);
//	cbi(SPCR, SPR1);
	// clock = f/16
	sbi(SPCR, SPR0);
    58b4:	68 9a       	sbi	0x0d, 0	; 13
	sbi(SPCR, SPR1);
    58b6:	69 9a       	sbi	0x0d, 1	; 13
	// select clock phase positive-going in middle of data
	cbi(SPCR, CPOL);
    58b8:	6b 98       	cbi	0x0d, 3	; 13
	// Data order MSB first
	cbi(SPCR,DORD);
    58ba:	6d 98       	cbi	0x0d, 5	; 13
	// enable SPI
	sbi(SPCR, SPE);
    58bc:	6e 9a       	sbi	0x0d, 6	; 13
	//outp((1<<MSTR)|(1<<SPE)|(1<<SPR0), SPCR );
	//outp((1<<CPHA)|(1<<CPOL)|(1<<MSTR)|(1<<SPE)|(1<<SPR0)|(1<<SPR1), SPCR );
	//outp((1<<CPHA)|(1<<MSTR)|(1<<SPE)|(1<<SPR0), SPCR );
	
	// clear status
	inb(SPSR);
    58be:	8e b1       	in	r24, 0x0e	; 14
	spiTransferComplete = TRUE;
    58c0:	81 e0       	ldi	r24, 0x01	; 1
    58c2:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <spiTransferComplete>
    58c6:	08 95       	ret

000058c8 <spiSendByte>:
}
*/
void spiSendByte(u08 data)
{
	// send a byte over SPI and ignore reply
	outb(SPDR, data);
    58c8:	8f b9       	out	0x0f, r24	; 15
	#ifdef SPI_USEINT
		while(!spiTransferComplete);
		spiTransferComplete = FALSE;
	#else
		while(!(inb(SPSR) & (1<<SPIF)));
    58ca:	77 9b       	sbis	0x0e, 7	; 14
    58cc:	fe cf       	rjmp	.-4      	; 0x58ca <spiSendByte+0x2>
	#endif

	
}
    58ce:	08 95       	ret

000058d0 <spiTransferByte>:
	outb(SPDR, data);
	// wait for transfer to complete
	while(!spiTransferComplete);
	#else
	// send the given data
	outb(SPDR, data);
    58d0:	8f b9       	out	0x0f, r24	; 15
	// wait for transfer to complete
	while(!(inb(SPSR) & (1<<SPIF)));
    58d2:	77 9b       	sbis	0x0e, 7	; 14
    58d4:	fe cf       	rjmp	.-4      	; 0x58d2 <spiTransferByte+0x2>
	#endif
	// return the received data
	return inb(SPDR);
    58d6:	8f b1       	in	r24, 0x0f	; 15
}
    58d8:	08 95       	ret

000058da <SRAM_resetReader>:
		//while(!SPI_Rx_Buf_Full);
		*ReadData++ = ReadSPI();
	}
	SRAMDisable(currentSRAM);
	return ReadCnt;			//Return no# of bytes read from SRAM
}
    58da:	ed e2       	ldi	r30, 0x2D	; 45
    58dc:	f2 e0       	ldi	r31, 0x02	; 2
    58de:	10 82       	st	Z, r1
    58e0:	11 82       	std	Z+1, r1	; 0x01
    58e2:	12 82       	std	Z+2, r1	; 0x02
    58e4:	13 82       	std	Z+3, r1	; 0x03
    58e6:	14 82       	std	Z+4, r1	; 0x04
    58e8:	15 82       	std	Z+5, r1	; 0x05
    58ea:	16 82       	std	Z+6, r1	; 0x06
    58ec:	17 82       	std	Z+7, r1	; 0x07
    58ee:	10 86       	std	Z+8, r1	; 0x08
    58f0:	11 86       	std	Z+9, r1	; 0x09
    58f2:	12 86       	std	Z+10, r1	; 0x0a
    58f4:	13 86       	std	Z+11, r1	; 0x0b
    58f6:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <currentSRAM>
    58fa:	08 95       	ret

000058fc <SRAM_resetWriter>:
    58fc:	e0 e2       	ldi	r30, 0x20	; 32
    58fe:	f2 e0       	ldi	r31, 0x02	; 2
    5900:	10 82       	st	Z, r1
    5902:	11 82       	std	Z+1, r1	; 0x01
    5904:	12 82       	std	Z+2, r1	; 0x02
    5906:	13 82       	std	Z+3, r1	; 0x03
    5908:	14 82       	std	Z+4, r1	; 0x04
    590a:	15 82       	std	Z+5, r1	; 0x05
    590c:	16 82       	std	Z+6, r1	; 0x06
    590e:	17 82       	std	Z+7, r1	; 0x07
    5910:	10 86       	std	Z+8, r1	; 0x08
    5912:	11 86       	std	Z+9, r1	; 0x09
    5914:	12 86       	std	Z+10, r1	; 0x0a
    5916:	13 86       	std	Z+11, r1	; 0x0b
    5918:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <currentSRAM>
    591c:	08 95       	ret

0000591e <incrementReader>:
    591e:	09 2e       	mov	r0, r25
    5920:	00 0c       	add	r0, r0
    5922:	aa 0b       	sbc	r26, r26
    5924:	bb 0b       	sbc	r27, r27
    5926:	40 91 35 02 	lds	r20, 0x0235	; 0x800235 <currentReader+0x8>
    592a:	50 91 36 02 	lds	r21, 0x0236	; 0x800236 <currentReader+0x9>
    592e:	60 91 37 02 	lds	r22, 0x0237	; 0x800237 <currentReader+0xa>
    5932:	70 91 38 02 	lds	r23, 0x0238	; 0x800238 <currentReader+0xb>
    5936:	84 0f       	add	r24, r20
    5938:	95 1f       	adc	r25, r21
    593a:	a6 1f       	adc	r26, r22
    593c:	b7 1f       	adc	r27, r23
    593e:	00 97       	sbiw	r24, 0x00	; 0
    5940:	28 e0       	ldi	r18, 0x08	; 8
    5942:	a2 07       	cpc	r26, r18
    5944:	b1 05       	cpc	r27, r1
    5946:	48 f4       	brcc	.+18     	; 0x595a <incrementReader+0x3c>
    5948:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <currentReader+0x8>
    594c:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <currentReader+0x9>
    5950:	a0 93 37 02 	sts	0x0237, r26	; 0x800237 <currentReader+0xa>
    5954:	b0 93 38 02 	sts	0x0238, r27	; 0x800238 <currentReader+0xb>
    5958:	0a c0       	rjmp	.+20     	; 0x596e <incrementReader+0x50>
    595a:	a7 70       	andi	r26, 0x07	; 7
    595c:	bb 27       	eor	r27, r27
    595e:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <currentReader+0x8>
    5962:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <currentReader+0x9>
    5966:	a0 93 37 02 	sts	0x0237, r26	; 0x800237 <currentReader+0xa>
    596a:	b0 93 38 02 	sts	0x0238, r27	; 0x800238 <currentReader+0xb>
    596e:	ed e2       	ldi	r30, 0x2D	; 45
    5970:	f2 e0       	ldi	r31, 0x02	; 2
    5972:	80 85       	ldd	r24, Z+8	; 0x08
    5974:	91 85       	ldd	r25, Z+9	; 0x09
    5976:	a2 85       	ldd	r26, Z+10	; 0x0a
    5978:	b3 85       	ldd	r27, Z+11	; 0x0b
    597a:	ac 01       	movw	r20, r24
    597c:	bd 01       	movw	r22, r26
    597e:	61 70       	andi	r22, 0x01	; 1
    5980:	77 27       	eor	r23, r23
    5982:	40 83       	st	Z, r20
    5984:	51 83       	std	Z+1, r21	; 0x01
    5986:	62 83       	std	Z+2, r22	; 0x02
    5988:	73 83       	std	Z+3, r23	; 0x03
    598a:	ac 01       	movw	r20, r24
    598c:	bd 01       	movw	r22, r26
    598e:	68 94       	set
    5990:	14 f8       	bld	r1, 4
    5992:	76 95       	lsr	r23
    5994:	67 95       	ror	r22
    5996:	57 95       	ror	r21
    5998:	47 95       	ror	r20
    599a:	16 94       	lsr	r1
    599c:	d1 f7       	brne	.-12     	; 0x5992 <incrementReader+0x74>
    599e:	5f 70       	andi	r21, 0x0F	; 15
    59a0:	66 27       	eor	r22, r22
    59a2:	77 27       	eor	r23, r23
    59a4:	44 83       	std	Z+4, r20	; 0x04
    59a6:	55 83       	std	Z+5, r21	; 0x05
    59a8:	66 83       	std	Z+6, r22	; 0x06
    59aa:	77 83       	std	Z+7, r23	; 0x07
    59ac:	07 2e       	mov	r0, r23
    59ae:	71 e1       	ldi	r23, 0x11	; 17
    59b0:	b6 95       	lsr	r27
    59b2:	a7 95       	ror	r26
    59b4:	97 95       	ror	r25
    59b6:	87 95       	ror	r24
    59b8:	7a 95       	dec	r23
    59ba:	d1 f7       	brne	.-12     	; 0x59b0 <incrementReader+0x92>
    59bc:	70 2d       	mov	r23, r0
    59be:	84 87       	std	Z+12, r24	; 0x0c
    59c0:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <currentSRAM>
    59c4:	08 95       	ret

000059c6 <SRAM_seekRead>:
    59c6:	cf 93       	push	r28
    59c8:	df 93       	push	r29
    59ca:	ec 01       	movw	r28, r24
    59cc:	61 30       	cpi	r22, 0x01	; 1
    59ce:	71 05       	cpc	r23, r1
    59d0:	71 f0       	breq	.+28     	; 0x59ee <SRAM_seekRead+0x28>
    59d2:	20 f0       	brcs	.+8      	; 0x59dc <SRAM_seekRead+0x16>
    59d4:	62 30       	cpi	r22, 0x02	; 2
    59d6:	71 05       	cpc	r23, r1
    59d8:	39 f0       	breq	.+14     	; 0x59e8 <SRAM_seekRead+0x22>
    59da:	11 c0       	rjmp	.+34     	; 0x59fe <SRAM_seekRead+0x38>
    59dc:	0e 94 6d 2c 	call	0x58da	; 0x58da <SRAM_resetReader>
    59e0:	ce 01       	movw	r24, r28
    59e2:	0e 94 8f 2c 	call	0x591e	; 0x591e <incrementReader>
    59e6:	0b c0       	rjmp	.+22     	; 0x59fe <SRAM_seekRead+0x38>
    59e8:	0e 94 8f 2c 	call	0x591e	; 0x591e <incrementReader>
    59ec:	08 c0       	rjmp	.+16     	; 0x59fe <SRAM_seekRead+0x38>
    59ee:	0e 94 6d 2c 	call	0x58da	; 0x58da <SRAM_resetReader>
    59f2:	88 27       	eor	r24, r24
    59f4:	99 27       	eor	r25, r25
    59f6:	8c 1b       	sub	r24, r28
    59f8:	9d 0b       	sbc	r25, r29
    59fa:	0e 94 8f 2c 	call	0x591e	; 0x591e <incrementReader>
    59fe:	df 91       	pop	r29
    5a00:	cf 91       	pop	r28
    5a02:	08 95       	ret

00005a04 <incrementWriter>:
    5a04:	09 2e       	mov	r0, r25
    5a06:	00 0c       	add	r0, r0
    5a08:	aa 0b       	sbc	r26, r26
    5a0a:	bb 0b       	sbc	r27, r27
    5a0c:	40 91 28 02 	lds	r20, 0x0228	; 0x800228 <currentWriter+0x8>
    5a10:	50 91 29 02 	lds	r21, 0x0229	; 0x800229 <currentWriter+0x9>
    5a14:	60 91 2a 02 	lds	r22, 0x022A	; 0x80022a <currentWriter+0xa>
    5a18:	70 91 2b 02 	lds	r23, 0x022B	; 0x80022b <currentWriter+0xb>
    5a1c:	84 0f       	add	r24, r20
    5a1e:	95 1f       	adc	r25, r21
    5a20:	a6 1f       	adc	r26, r22
    5a22:	b7 1f       	adc	r27, r23
    5a24:	00 97       	sbiw	r24, 0x00	; 0
    5a26:	28 e0       	ldi	r18, 0x08	; 8
    5a28:	a2 07       	cpc	r26, r18
    5a2a:	b1 05       	cpc	r27, r1
    5a2c:	48 f4       	brcc	.+18     	; 0x5a40 <incrementWriter+0x3c>
    5a2e:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <currentWriter+0x8>
    5a32:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <currentWriter+0x9>
    5a36:	a0 93 2a 02 	sts	0x022A, r26	; 0x80022a <currentWriter+0xa>
    5a3a:	b0 93 2b 02 	sts	0x022B, r27	; 0x80022b <currentWriter+0xb>
    5a3e:	0a c0       	rjmp	.+20     	; 0x5a54 <incrementWriter+0x50>
    5a40:	a7 70       	andi	r26, 0x07	; 7
    5a42:	bb 27       	eor	r27, r27
    5a44:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <currentWriter+0x8>
    5a48:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <currentWriter+0x9>
    5a4c:	a0 93 2a 02 	sts	0x022A, r26	; 0x80022a <currentWriter+0xa>
    5a50:	b0 93 2b 02 	sts	0x022B, r27	; 0x80022b <currentWriter+0xb>
    5a54:	e0 e2       	ldi	r30, 0x20	; 32
    5a56:	f2 e0       	ldi	r31, 0x02	; 2
    5a58:	80 85       	ldd	r24, Z+8	; 0x08
    5a5a:	91 85       	ldd	r25, Z+9	; 0x09
    5a5c:	a2 85       	ldd	r26, Z+10	; 0x0a
    5a5e:	b3 85       	ldd	r27, Z+11	; 0x0b
    5a60:	ac 01       	movw	r20, r24
    5a62:	bd 01       	movw	r22, r26
    5a64:	61 70       	andi	r22, 0x01	; 1
    5a66:	77 27       	eor	r23, r23
    5a68:	40 83       	st	Z, r20
    5a6a:	51 83       	std	Z+1, r21	; 0x01
    5a6c:	62 83       	std	Z+2, r22	; 0x02
    5a6e:	73 83       	std	Z+3, r23	; 0x03
    5a70:	ac 01       	movw	r20, r24
    5a72:	bd 01       	movw	r22, r26
    5a74:	68 94       	set
    5a76:	14 f8       	bld	r1, 4
    5a78:	76 95       	lsr	r23
    5a7a:	67 95       	ror	r22
    5a7c:	57 95       	ror	r21
    5a7e:	47 95       	ror	r20
    5a80:	16 94       	lsr	r1
    5a82:	d1 f7       	brne	.-12     	; 0x5a78 <incrementWriter+0x74>
    5a84:	5f 70       	andi	r21, 0x0F	; 15
    5a86:	66 27       	eor	r22, r22
    5a88:	77 27       	eor	r23, r23
    5a8a:	44 83       	std	Z+4, r20	; 0x04
    5a8c:	55 83       	std	Z+5, r21	; 0x05
    5a8e:	66 83       	std	Z+6, r22	; 0x06
    5a90:	77 83       	std	Z+7, r23	; 0x07
    5a92:	07 2e       	mov	r0, r23
    5a94:	71 e1       	ldi	r23, 0x11	; 17
    5a96:	b6 95       	lsr	r27
    5a98:	a7 95       	ror	r26
    5a9a:	97 95       	ror	r25
    5a9c:	87 95       	ror	r24
    5a9e:	7a 95       	dec	r23
    5aa0:	d1 f7       	brne	.-12     	; 0x5a96 <incrementWriter+0x92>
    5aa2:	70 2d       	mov	r23, r0
    5aa4:	84 87       	std	Z+12, r24	; 0x0c
    5aa6:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <currentSRAM>
    5aaa:	08 95       	ret

00005aac <SRAM_seekWrite>:
    5aac:	cf 93       	push	r28
    5aae:	df 93       	push	r29
    5ab0:	ec 01       	movw	r28, r24
    5ab2:	61 30       	cpi	r22, 0x01	; 1
    5ab4:	71 05       	cpc	r23, r1
    5ab6:	71 f0       	breq	.+28     	; 0x5ad4 <SRAM_seekWrite+0x28>
    5ab8:	20 f0       	brcs	.+8      	; 0x5ac2 <SRAM_seekWrite+0x16>
    5aba:	62 30       	cpi	r22, 0x02	; 2
    5abc:	71 05       	cpc	r23, r1
    5abe:	39 f0       	breq	.+14     	; 0x5ace <SRAM_seekWrite+0x22>
    5ac0:	11 c0       	rjmp	.+34     	; 0x5ae4 <SRAM_seekWrite+0x38>
    5ac2:	0e 94 7e 2c 	call	0x58fc	; 0x58fc <SRAM_resetWriter>
    5ac6:	ce 01       	movw	r24, r28
    5ac8:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <incrementWriter>
    5acc:	0b c0       	rjmp	.+22     	; 0x5ae4 <SRAM_seekWrite+0x38>
    5ace:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <incrementWriter>
    5ad2:	08 c0       	rjmp	.+16     	; 0x5ae4 <SRAM_seekWrite+0x38>
    5ad4:	0e 94 7e 2c 	call	0x58fc	; 0x58fc <SRAM_resetWriter>
    5ad8:	88 27       	eor	r24, r24
    5ada:	99 27       	eor	r25, r25
    5adc:	8c 1b       	sub	r24, r28
    5ade:	9d 0b       	sbc	r25, r29
    5ae0:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <incrementWriter>
    5ae4:	df 91       	pop	r29
    5ae6:	cf 91       	pop	r28
    5ae8:	08 95       	ret

00005aea <ReadSPI>:
    5aea:	8f ef       	ldi	r24, 0xFF	; 255
    5aec:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <spiTransferByte>
    5af0:	08 95       	ret

00005af2 <SRAMEnable>:
    5af2:	90 e0       	ldi	r25, 0x00	; 0
    5af4:	fc 01       	movw	r30, r24
    5af6:	ee 0f       	add	r30, r30
    5af8:	ff 1f       	adc	r31, r31
    5afa:	e5 59       	subi	r30, 0x95	; 149
    5afc:	ff 4f       	sbci	r31, 0xFF	; 255
    5afe:	a0 81       	ld	r26, Z
    5b00:	b1 81       	ldd	r27, Z+1	; 0x01
    5b02:	fc 01       	movw	r30, r24
    5b04:	e9 59       	subi	r30, 0x99	; 153
    5b06:	ff 4f       	sbci	r31, 0xFF	; 255
    5b08:	81 e0       	ldi	r24, 0x01	; 1
    5b0a:	90 e0       	ldi	r25, 0x00	; 0
    5b0c:	00 80       	ld	r0, Z
    5b0e:	02 c0       	rjmp	.+4      	; 0x5b14 <SRAMEnable+0x22>
    5b10:	88 0f       	add	r24, r24
    5b12:	99 1f       	adc	r25, r25
    5b14:	0a 94       	dec	r0
    5b16:	e2 f7       	brpl	.-8      	; 0x5b10 <SRAMEnable+0x1e>
    5b18:	80 95       	com	r24
    5b1a:	9c 91       	ld	r25, X
    5b1c:	89 23       	and	r24, r25
    5b1e:	8c 93       	st	X, r24
    5b20:	08 95       	ret

00005b22 <SRAMDisable>:
    5b22:	90 e0       	ldi	r25, 0x00	; 0
    5b24:	fc 01       	movw	r30, r24
    5b26:	ee 0f       	add	r30, r30
    5b28:	ff 1f       	adc	r31, r31
    5b2a:	e5 59       	subi	r30, 0x95	; 149
    5b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    5b2e:	01 90       	ld	r0, Z+
    5b30:	f0 81       	ld	r31, Z
    5b32:	e0 2d       	mov	r30, r0
    5b34:	dc 01       	movw	r26, r24
    5b36:	a9 59       	subi	r26, 0x99	; 153
    5b38:	bf 4f       	sbci	r27, 0xFF	; 255
    5b3a:	21 e0       	ldi	r18, 0x01	; 1
    5b3c:	30 e0       	ldi	r19, 0x00	; 0
    5b3e:	c9 01       	movw	r24, r18
    5b40:	0c 90       	ld	r0, X
    5b42:	02 c0       	rjmp	.+4      	; 0x5b48 <SRAMDisable+0x26>
    5b44:	88 0f       	add	r24, r24
    5b46:	99 1f       	adc	r25, r25
    5b48:	0a 94       	dec	r0
    5b4a:	e2 f7       	brpl	.-8      	; 0x5b44 <SRAMDisable+0x22>
    5b4c:	90 81       	ld	r25, Z
    5b4e:	89 2b       	or	r24, r25
    5b50:	80 83       	st	Z, r24
    5b52:	08 95       	ret

00005b54 <InitSRAM>:
    5b54:	cf 93       	push	r28
    5b56:	df 93       	push	r29
    5b58:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <currentSRAM>
    5b5c:	80 e0       	ldi	r24, 0x00	; 0
    5b5e:	c1 e0       	ldi	r28, 0x01	; 1
    5b60:	d0 e0       	ldi	r29, 0x00	; 0
    5b62:	90 e0       	ldi	r25, 0x00	; 0
    5b64:	fc 01       	movw	r30, r24
    5b66:	ee 0f       	add	r30, r30
    5b68:	ff 1f       	adc	r31, r31
    5b6a:	ed 58       	subi	r30, 0x8D	; 141
    5b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    5b6e:	01 90       	ld	r0, Z+
    5b70:	f0 81       	ld	r31, Z
    5b72:	e0 2d       	mov	r30, r0
    5b74:	dc 01       	movw	r26, r24
    5b76:	a9 59       	subi	r26, 0x99	; 153
    5b78:	bf 4f       	sbci	r27, 0xFF	; 255
    5b7a:	ce 01       	movw	r24, r28
    5b7c:	0c 90       	ld	r0, X
    5b7e:	02 c0       	rjmp	.+4      	; 0x5b84 <InitSRAM+0x30>
    5b80:	88 0f       	add	r24, r24
    5b82:	99 1f       	adc	r25, r25
    5b84:	0a 94       	dec	r0
    5b86:	e2 f7       	brpl	.-8      	; 0x5b80 <InitSRAM+0x2c>
    5b88:	90 81       	ld	r25, Z
    5b8a:	89 2b       	or	r24, r25
    5b8c:	80 83       	st	Z, r24
    5b8e:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <currentSRAM>
    5b92:	0e 94 91 2d 	call	0x5b22	; 0x5b22 <SRAMDisable>
    5b96:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <currentSRAM>
    5b9a:	8f 5f       	subi	r24, 0xFF	; 255
    5b9c:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <currentSRAM>
    5ba0:	84 30       	cpi	r24, 0x04	; 4
    5ba2:	f8 f2       	brcs	.-66     	; 0x5b62 <InitSRAM+0xe>
    5ba4:	df 91       	pop	r29
    5ba6:	cf 91       	pop	r28
    5ba8:	08 95       	ret

00005baa <SRAMWriteStatusReg>:
    5baa:	cf 93       	push	r28
    5bac:	c8 2f       	mov	r28, r24
    5bae:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <currentSRAM>
    5bb2:	0e 94 79 2d 	call	0x5af2	; 0x5af2 <SRAMEnable>
    5bb6:	81 e0       	ldi	r24, 0x01	; 1
    5bb8:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <spiSendByte>
    5bbc:	8c 2f       	mov	r24, r28
    5bbe:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <spiSendByte>
    5bc2:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <currentSRAM>
    5bc6:	0e 94 91 2d 	call	0x5b22	; 0x5b22 <SRAMDisable>
    5bca:	80 e0       	ldi	r24, 0x00	; 0
    5bcc:	cf 91       	pop	r28
    5bce:	08 95       	ret

00005bd0 <SRAMCommand>:
    5bd0:	1f 93       	push	r17
    5bd2:	cf 93       	push	r28
    5bd4:	df 93       	push	r29
    5bd6:	c8 2f       	mov	r28, r24
    5bd8:	d6 2f       	mov	r29, r22
    5bda:	14 2f       	mov	r17, r20
    5bdc:	82 2f       	mov	r24, r18
    5bde:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <spiSendByte>
    5be2:	81 2f       	mov	r24, r17
    5be4:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <spiSendByte>
    5be8:	8d 2f       	mov	r24, r29
    5bea:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <spiSendByte>
    5bee:	8c 2f       	mov	r24, r28
    5bf0:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <spiSendByte>
    5bf4:	df 91       	pop	r29
    5bf6:	cf 91       	pop	r28
    5bf8:	1f 91       	pop	r17
    5bfa:	08 95       	ret

00005bfc <SRAMWriteByte>:
    5bfc:	0f 93       	push	r16
    5bfe:	1f 93       	push	r17
    5c00:	cf 93       	push	r28
    5c02:	df 93       	push	r29
    5c04:	d8 2f       	mov	r29, r24
    5c06:	16 2f       	mov	r17, r22
    5c08:	04 2f       	mov	r16, r20
    5c0a:	c2 2f       	mov	r28, r18
    5c0c:	80 e0       	ldi	r24, 0x00	; 0
    5c0e:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <SRAMWriteStatusReg>
    5c12:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <currentSRAM>
    5c16:	0e 94 79 2d 	call	0x5af2	; 0x5af2 <SRAMEnable>
    5c1a:	22 e0       	ldi	r18, 0x02	; 2
    5c1c:	40 2f       	mov	r20, r16
    5c1e:	61 2f       	mov	r22, r17
    5c20:	8d 2f       	mov	r24, r29
    5c22:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <SRAMCommand>
    5c26:	8c 2f       	mov	r24, r28
    5c28:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <spiSendByte>
    5c2c:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <currentSRAM>
    5c30:	0e 94 91 2d 	call	0x5b22	; 0x5b22 <SRAMDisable>
    5c34:	80 e0       	ldi	r24, 0x00	; 0
    5c36:	df 91       	pop	r29
    5c38:	cf 91       	pop	r28
    5c3a:	1f 91       	pop	r17
    5c3c:	0f 91       	pop	r16
    5c3e:	08 95       	ret

00005c40 <SRAMReadByte>:
    5c40:	1f 93       	push	r17
    5c42:	cf 93       	push	r28
    5c44:	df 93       	push	r29
    5c46:	c8 2f       	mov	r28, r24
    5c48:	d6 2f       	mov	r29, r22
    5c4a:	14 2f       	mov	r17, r20
    5c4c:	80 e0       	ldi	r24, 0x00	; 0
    5c4e:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <SRAMWriteStatusReg>
    5c52:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <currentSRAM>
    5c56:	0e 94 79 2d 	call	0x5af2	; 0x5af2 <SRAMEnable>
    5c5a:	23 e0       	ldi	r18, 0x03	; 3
    5c5c:	41 2f       	mov	r20, r17
    5c5e:	6d 2f       	mov	r22, r29
    5c60:	8c 2f       	mov	r24, r28
    5c62:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <SRAMCommand>
    5c66:	0e 94 75 2d 	call	0x5aea	; 0x5aea <ReadSPI>
    5c6a:	c8 2f       	mov	r28, r24
    5c6c:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <currentSRAM>
    5c70:	0e 94 91 2d 	call	0x5b22	; 0x5b22 <SRAMDisable>
    5c74:	8c 2f       	mov	r24, r28
    5c76:	df 91       	pop	r29
    5c78:	cf 91       	pop	r28
    5c7a:	1f 91       	pop	r17
    5c7c:	08 95       	ret

00005c7e <checkSRAM>:
    5c7e:	cf 93       	push	r28
    5c80:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <currentSRAM>
    5c84:	c0 e0       	ldi	r28, 0x00	; 0
    5c86:	23 e6       	ldi	r18, 0x63	; 99
    5c88:	40 e0       	ldi	r20, 0x00	; 0
    5c8a:	60 e0       	ldi	r22, 0x00	; 0
    5c8c:	80 e0       	ldi	r24, 0x00	; 0
    5c8e:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <SRAMWriteByte>
    5c92:	40 e0       	ldi	r20, 0x00	; 0
    5c94:	60 e0       	ldi	r22, 0x00	; 0
    5c96:	80 e0       	ldi	r24, 0x00	; 0
    5c98:	0e 94 20 2e 	call	0x5c40	; 0x5c40 <SRAMReadByte>
    5c9c:	83 36       	cpi	r24, 0x63	; 99
    5c9e:	09 f4       	brne	.+2      	; 0x5ca2 <checkSRAM+0x24>
    5ca0:	cf 5f       	subi	r28, 0xFF	; 255
    5ca2:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <currentSRAM>
    5ca6:	8f 5f       	subi	r24, 0xFF	; 255
    5ca8:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <currentSRAM>
    5cac:	84 30       	cpi	r24, 0x04	; 4
    5cae:	58 f3       	brcs	.-42     	; 0x5c86 <checkSRAM+0x8>
    5cb0:	81 e0       	ldi	r24, 0x01	; 1
    5cb2:	c4 30       	cpi	r28, 0x04	; 4
    5cb4:	09 f0       	breq	.+2      	; 0x5cb8 <checkSRAM+0x3a>
    5cb6:	80 e0       	ldi	r24, 0x00	; 0
    5cb8:	cf 91       	pop	r28
    5cba:	08 95       	ret

00005cbc <SRAMWriteSeq>:

uint8_t SRAMWriteSeq(uint8_t AddLB, uint8_t AddMB,uint8_t AddHB, uint8_t *WriteData,uint32_t WriteCnt)
{
    5cbc:	9f 92       	push	r9
    5cbe:	af 92       	push	r10
    5cc0:	bf 92       	push	r11
    5cc2:	cf 92       	push	r12
    5cc4:	df 92       	push	r13
    5cc6:	ef 92       	push	r14
    5cc8:	ff 92       	push	r15
    5cca:	0f 93       	push	r16
    5ccc:	1f 93       	push	r17
    5cce:	cf 93       	push	r28
    5cd0:	df 93       	push	r29
    5cd2:	c8 2f       	mov	r28, r24
    5cd4:	d6 2f       	mov	r29, r22
    5cd6:	b4 2e       	mov	r11, r20
    5cd8:	92 2e       	mov	r9, r18
    5cda:	a3 2e       	mov	r10, r19
    5cdc:	67 01       	movw	r12, r14
    5cde:	78 01       	movw	r14, r16
	SRAMWriteStatusReg(SRAMSeqMode);
    5ce0:	80 e4       	ldi	r24, 0x40	; 64
    5ce2:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <SRAMWriteStatusReg>
	//Send Write command to SRAM along with address
	SRAMEnable(currentSRAM);
    5ce6:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <currentSRAM>
    5cea:	0e 94 79 2d 	call	0x5af2	; 0x5af2 <SRAMEnable>
	SRAMCommand(AddLB,AddMB,AddHB,CMD_SRAMWrite);
    5cee:	22 e0       	ldi	r18, 0x02	; 2
    5cf0:	4b 2d       	mov	r20, r11
    5cf2:	6d 2f       	mov	r22, r29
    5cf4:	8c 2f       	mov	r24, r28
    5cf6:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <SRAMCommand>
	//Send Data to be written to SRAM
	for(;WriteCnt > 0;WriteCnt--)
    5cfa:	c1 14       	cp	r12, r1
    5cfc:	d1 04       	cpc	r13, r1
    5cfe:	e1 04       	cpc	r14, r1
    5d00:	f1 04       	cpc	r15, r1
    5d02:	59 f0       	breq	.+22     	; 0x5d1a <SRAMWriteSeq+0x5e>
    5d04:	c9 2d       	mov	r28, r9
    5d06:	da 2d       	mov	r29, r10
uint8_t ReadSPI(){
	return (uint8_t)spiTransferByte(DummyByte);
}

void WriteSPI(uint8_t byte){
	spiSendByte(byte);
    5d08:	89 91       	ld	r24, Y+
    5d0a:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <spiSendByte>
	SRAMWriteStatusReg(SRAMSeqMode);
	//Send Write command to SRAM along with address
	SRAMEnable(currentSRAM);
	SRAMCommand(AddLB,AddMB,AddHB,CMD_SRAMWrite);
	//Send Data to be written to SRAM
	for(;WriteCnt > 0;WriteCnt--)
    5d0e:	81 e0       	ldi	r24, 0x01	; 1
    5d10:	c8 1a       	sub	r12, r24
    5d12:	d1 08       	sbc	r13, r1
    5d14:	e1 08       	sbc	r14, r1
    5d16:	f1 08       	sbc	r15, r1
    5d18:	b9 f7       	brne	.-18     	; 0x5d08 <SRAMWriteSeq+0x4c>
	{
		WriteSPI(*WriteData++);
		//while(!SPI_Rx_Buf_Full);
		//DummyRead =ReadSPI();
	}
	SRAMDisable(currentSRAM);
    5d1a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <currentSRAM>
    5d1e:	0e 94 91 2d 	call	0x5b22	; 0x5b22 <SRAMDisable>
	return 0;			//Return non -ve nuber indicating success
}
    5d22:	80 e0       	ldi	r24, 0x00	; 0
    5d24:	df 91       	pop	r29
    5d26:	cf 91       	pop	r28
    5d28:	1f 91       	pop	r17
    5d2a:	0f 91       	pop	r16
    5d2c:	ff 90       	pop	r15
    5d2e:	ef 90       	pop	r14
    5d30:	df 90       	pop	r13
    5d32:	cf 90       	pop	r12
    5d34:	bf 90       	pop	r11
    5d36:	af 90       	pop	r10
    5d38:	9f 90       	pop	r9
    5d3a:	08 95       	ret

00005d3c <writeSRAM>:
	currentWriter.currentPage.value = (currentWriter.totalBytes.value / SRAMPageSize) % SRAMPageCount;
	currentWriter.currentSram = currentWriter.totalBytes.value / SRAMChipSize;
	currentSRAM = currentWriter.currentSram;
}

writeSRAM(unsigned char *buf,unsigned int size){
    5d3c:	af 92       	push	r10
    5d3e:	bf 92       	push	r11
    5d40:	cf 92       	push	r12
    5d42:	df 92       	push	r13
    5d44:	ef 92       	push	r14
    5d46:	ff 92       	push	r15
    5d48:	0f 93       	push	r16
    5d4a:	1f 93       	push	r17
    5d4c:	cf 93       	push	r28
    5d4e:	df 93       	push	r29
	unsigned int unaligned = currentWriter.currentByte.value % SRAMPageSize; // byte between start and end of page
    5d50:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <currentWriter>
    5d54:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <currentWriter+0x1>
    5d58:	4f 71       	andi	r20, 0x1F	; 31
    5d5a:	55 27       	eor	r21, r21
	unsigned int remainder = (unaligned > 0?(SRAMPageSize - unaligned):0); // bytes remaining to end of page
    5d5c:	41 15       	cp	r20, r1
    5d5e:	51 05       	cpc	r21, r1
    5d60:	31 f0       	breq	.+12     	; 0x5d6e <writeSRAM+0x32>
    5d62:	20 e2       	ldi	r18, 0x20	; 32
    5d64:	30 e0       	ldi	r19, 0x00	; 0
    5d66:	59 01       	movw	r10, r18
    5d68:	a4 1a       	sub	r10, r20
    5d6a:	b5 0a       	sbc	r11, r21
    5d6c:	02 c0       	rjmp	.+4      	; 0x5d72 <writeSRAM+0x36>
    5d6e:	a1 2c       	mov	r10, r1
    5d70:	b1 2c       	mov	r11, r1
	if(size == 0)
    5d72:	61 15       	cp	r22, r1
    5d74:	71 05       	cpc	r23, r1
    5d76:	09 f4       	brne	.+2      	; 0x5d7a <writeSRAM+0x3e>
    5d78:	70 c0       	rjmp	.+224    	; 0x5e5a <writeSRAM+0x11e>
    5d7a:	6b 01       	movw	r12, r22
    5d7c:	ec 01       	movw	r28, r24
		return;

	if(size >= SRAMPageSize){
    5d7e:	60 32       	cpi	r22, 0x20	; 32
    5d80:	71 05       	cpc	r23, r1
    5d82:	90 f1       	brcs	.+100    	; 0x5de8 <writeSRAM+0xac>
		if(unaligned == 0){
    5d84:	45 2b       	or	r20, r21
    5d86:	c9 f4       	brne	.+50     	; 0x5dba <writeSRAM+0x7e>
			// write page only, pass remaining size to next call
			SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,SRAMPageSize);
    5d88:	e0 e2       	ldi	r30, 0x20	; 32
    5d8a:	f2 e0       	ldi	r31, 0x02	; 2
    5d8c:	10 e2       	ldi	r17, 0x20	; 32
    5d8e:	e1 2e       	mov	r14, r17
    5d90:	f1 2c       	mov	r15, r1
    5d92:	00 e0       	ldi	r16, 0x00	; 0
    5d94:	10 e0       	ldi	r17, 0x00	; 0
    5d96:	9e 01       	movw	r18, r28
    5d98:	42 81       	ldd	r20, Z+2	; 0x02
    5d9a:	61 81       	ldd	r22, Z+1	; 0x01
    5d9c:	80 81       	ld	r24, Z
    5d9e:	0e 94 5e 2e 	call	0x5cbc	; 0x5cbc <SRAMWriteSeq>
			incrementWriter(SRAMPageSize);
    5da2:	80 e2       	ldi	r24, 0x20	; 32
    5da4:	90 e0       	ldi	r25, 0x00	; 0
    5da6:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <incrementWriter>
			writeSRAM(buf + SRAMPageSize,size - SRAMPageSize);
    5daa:	b6 01       	movw	r22, r12
    5dac:	60 52       	subi	r22, 0x20	; 32
    5dae:	71 09       	sbc	r23, r1
    5db0:	ce 01       	movw	r24, r28
    5db2:	80 96       	adiw	r24, 0x20	; 32
    5db4:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <writeSRAM>
    5db8:	50 c0       	rjmp	.+160    	; 0x5e5a <writeSRAM+0x11e>
		}
		else{
			// write remainder, pass remaining size to next call
			SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,remainder);
    5dba:	75 01       	movw	r14, r10
    5dbc:	00 e0       	ldi	r16, 0x00	; 0
    5dbe:	10 e0       	ldi	r17, 0x00	; 0
    5dc0:	e0 e2       	ldi	r30, 0x20	; 32
    5dc2:	f2 e0       	ldi	r31, 0x02	; 2
    5dc4:	9e 01       	movw	r18, r28
    5dc6:	42 81       	ldd	r20, Z+2	; 0x02
    5dc8:	61 81       	ldd	r22, Z+1	; 0x01
    5dca:	80 81       	ld	r24, Z
    5dcc:	0e 94 5e 2e 	call	0x5cbc	; 0x5cbc <SRAMWriteSeq>
			incrementWriter(remainder);
    5dd0:	c5 01       	movw	r24, r10
    5dd2:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <incrementWriter>
			writeSRAM(buf + remainder,size - remainder);
    5dd6:	b6 01       	movw	r22, r12
    5dd8:	6a 19       	sub	r22, r10
    5dda:	7b 09       	sbc	r23, r11
    5ddc:	ce 01       	movw	r24, r28
    5dde:	8a 0d       	add	r24, r10
    5de0:	9b 1d       	adc	r25, r11
    5de2:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <writeSRAM>
    5de6:	39 c0       	rjmp	.+114    	; 0x5e5a <writeSRAM+0x11e>


	}
	else{

		if(unaligned > 0){
    5de8:	45 2b       	or	r20, r21
    5dea:	49 f1       	breq	.+82     	; 0x5e3e <writeSRAM+0x102>
			if(size > remainder){
    5dec:	a6 16       	cp	r10, r22
    5dee:	b7 06       	cpc	r11, r23
    5df0:	b8 f4       	brcc	.+46     	; 0x5e20 <writeSRAM+0xe4>
				size -= remainder;
    5df2:	ca 18       	sub	r12, r10
    5df4:	db 08       	sbc	r13, r11
				SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,remainder);
    5df6:	75 01       	movw	r14, r10
    5df8:	00 e0       	ldi	r16, 0x00	; 0
    5dfa:	10 e0       	ldi	r17, 0x00	; 0
    5dfc:	e0 e2       	ldi	r30, 0x20	; 32
    5dfe:	f2 e0       	ldi	r31, 0x02	; 2
    5e00:	9e 01       	movw	r18, r28
    5e02:	42 81       	ldd	r20, Z+2	; 0x02
    5e04:	61 81       	ldd	r22, Z+1	; 0x01
    5e06:	80 81       	ld	r24, Z
    5e08:	0e 94 5e 2e 	call	0x5cbc	; 0x5cbc <SRAMWriteSeq>
				incrementWriter(remainder);
    5e0c:	c5 01       	movw	r24, r10
    5e0e:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <incrementWriter>
				writeSRAM(buf + remainder,size);
    5e12:	b6 01       	movw	r22, r12
    5e14:	ce 01       	movw	r24, r28
    5e16:	8a 0d       	add	r24, r10
    5e18:	9b 1d       	adc	r25, r11
    5e1a:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <writeSRAM>
    5e1e:	1d c0       	rjmp	.+58     	; 0x5e5a <writeSRAM+0x11e>
			}
			else{
				SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,size);
    5e20:	7b 01       	movw	r14, r22
    5e22:	00 e0       	ldi	r16, 0x00	; 0
    5e24:	10 e0       	ldi	r17, 0x00	; 0
    5e26:	e0 e2       	ldi	r30, 0x20	; 32
    5e28:	f2 e0       	ldi	r31, 0x02	; 2
    5e2a:	9e 01       	movw	r18, r28
    5e2c:	42 81       	ldd	r20, Z+2	; 0x02
    5e2e:	61 81       	ldd	r22, Z+1	; 0x01
    5e30:	80 81       	ld	r24, Z
    5e32:	0e 94 5e 2e 	call	0x5cbc	; 0x5cbc <SRAMWriteSeq>
				incrementWriter(size);
    5e36:	c6 01       	movw	r24, r12
    5e38:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <incrementWriter>
    5e3c:	0e c0       	rjmp	.+28     	; 0x5e5a <writeSRAM+0x11e>
			}

		}
		else{
			SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,size);
    5e3e:	7b 01       	movw	r14, r22
    5e40:	00 e0       	ldi	r16, 0x00	; 0
    5e42:	10 e0       	ldi	r17, 0x00	; 0
    5e44:	e0 e2       	ldi	r30, 0x20	; 32
    5e46:	f2 e0       	ldi	r31, 0x02	; 2
    5e48:	9e 01       	movw	r18, r28
    5e4a:	42 81       	ldd	r20, Z+2	; 0x02
    5e4c:	61 81       	ldd	r22, Z+1	; 0x01
    5e4e:	80 81       	ld	r24, Z
    5e50:	0e 94 5e 2e 	call	0x5cbc	; 0x5cbc <SRAMWriteSeq>
			incrementWriter(size);
    5e54:	c6 01       	movw	r24, r12
    5e56:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <incrementWriter>
		}
	}
}
    5e5a:	df 91       	pop	r29
    5e5c:	cf 91       	pop	r28
    5e5e:	1f 91       	pop	r17
    5e60:	0f 91       	pop	r16
    5e62:	ff 90       	pop	r15
    5e64:	ef 90       	pop	r14
    5e66:	df 90       	pop	r13
    5e68:	cf 90       	pop	r12
    5e6a:	bf 90       	pop	r11
    5e6c:	af 90       	pop	r10
    5e6e:	08 95       	ret

00005e70 <SRAMReadSeq>:
	SRAMDisable(currentSRAM);
	return 0;			//Return non -ve nuber indicating success
}

uint8_t SRAMReadSeq(uint8_t AddLB, uint8_t AddMB,uint8_t AddHB, uint8_t *ReadData,uint32_t ReadCnt)
{
    5e70:	9f 92       	push	r9
    5e72:	af 92       	push	r10
    5e74:	bf 92       	push	r11
    5e76:	cf 92       	push	r12
    5e78:	df 92       	push	r13
    5e7a:	ef 92       	push	r14
    5e7c:	ff 92       	push	r15
    5e7e:	0f 93       	push	r16
    5e80:	1f 93       	push	r17
    5e82:	cf 93       	push	r28
    5e84:	df 93       	push	r29
    5e86:	c8 2f       	mov	r28, r24
    5e88:	d6 2f       	mov	r29, r22
    5e8a:	b4 2e       	mov	r11, r20
    5e8c:	92 2e       	mov	r9, r18
    5e8e:	a3 2e       	mov	r10, r19
    5e90:	67 01       	movw	r12, r14
    5e92:	78 01       	movw	r14, r16
	SRAMWriteStatusReg(SRAMSeqMode);
    5e94:	80 e4       	ldi	r24, 0x40	; 64
    5e96:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <SRAMWriteStatusReg>
	//Send Read command to SRAM along with address
	SRAMEnable(currentSRAM);
    5e9a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <currentSRAM>
    5e9e:	0e 94 79 2d 	call	0x5af2	; 0x5af2 <SRAMEnable>
	SRAMCommand(AddLB,AddMB,AddHB,CMD_SRAMRead);
    5ea2:	23 e0       	ldi	r18, 0x03	; 3
    5ea4:	4b 2d       	mov	r20, r11
    5ea6:	6d 2f       	mov	r22, r29
    5ea8:	8c 2f       	mov	r24, r28
    5eaa:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <SRAMCommand>
	//Send dummy data so SRAM can put desired Data read from SRAM
	for(; ReadCnt > 0; ReadCnt--)
    5eae:	c1 14       	cp	r12, r1
    5eb0:	d1 04       	cpc	r13, r1
    5eb2:	e1 04       	cpc	r14, r1
    5eb4:	f1 04       	cpc	r15, r1
    5eb6:	59 f0       	breq	.+22     	; 0x5ece <SRAMReadSeq+0x5e>
    5eb8:	c9 2d       	mov	r28, r9
    5eba:	da 2d       	mov	r29, r10
	{
		//while(!SPI_Rx_Buf_Full);
		*ReadData++ = ReadSPI();
    5ebc:	0e 94 75 2d 	call	0x5aea	; 0x5aea <ReadSPI>
    5ec0:	89 93       	st	Y+, r24
	SRAMWriteStatusReg(SRAMSeqMode);
	//Send Read command to SRAM along with address
	SRAMEnable(currentSRAM);
	SRAMCommand(AddLB,AddMB,AddHB,CMD_SRAMRead);
	//Send dummy data so SRAM can put desired Data read from SRAM
	for(; ReadCnt > 0; ReadCnt--)
    5ec2:	81 e0       	ldi	r24, 0x01	; 1
    5ec4:	c8 1a       	sub	r12, r24
    5ec6:	d1 08       	sbc	r13, r1
    5ec8:	e1 08       	sbc	r14, r1
    5eca:	f1 08       	sbc	r15, r1
    5ecc:	b9 f7       	brne	.-18     	; 0x5ebc <SRAMReadSeq+0x4c>
	{
		//while(!SPI_Rx_Buf_Full);
		*ReadData++ = ReadSPI();
	}
	SRAMDisable(currentSRAM);
    5ece:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <currentSRAM>
    5ed2:	0e 94 91 2d 	call	0x5b22	; 0x5b22 <SRAMDisable>
	return 0;			//Return non -ve nuber indicating success
}
    5ed6:	80 e0       	ldi	r24, 0x00	; 0
    5ed8:	df 91       	pop	r29
    5eda:	cf 91       	pop	r28
    5edc:	1f 91       	pop	r17
    5ede:	0f 91       	pop	r16
    5ee0:	ff 90       	pop	r15
    5ee2:	ef 90       	pop	r14
    5ee4:	df 90       	pop	r13
    5ee6:	cf 90       	pop	r12
    5ee8:	bf 90       	pop	r11
    5eea:	af 90       	pop	r10
    5eec:	9f 90       	pop	r9
    5eee:	08 95       	ret

00005ef0 <readSRAM>:
		}
	}
}


void readSRAM(unsigned char *buf,unsigned int size){
    5ef0:	af 92       	push	r10
    5ef2:	bf 92       	push	r11
    5ef4:	cf 92       	push	r12
    5ef6:	df 92       	push	r13
    5ef8:	ef 92       	push	r14
    5efa:	ff 92       	push	r15
    5efc:	0f 93       	push	r16
    5efe:	1f 93       	push	r17
    5f00:	cf 93       	push	r28
    5f02:	df 93       	push	r29
	unsigned int unaligned = currentReader.currentByte.value % SRAMPageSize; // byte between start and end of page
    5f04:	40 91 2d 02 	lds	r20, 0x022D	; 0x80022d <currentReader>
    5f08:	50 91 2e 02 	lds	r21, 0x022E	; 0x80022e <currentReader+0x1>
    5f0c:	4f 71       	andi	r20, 0x1F	; 31
    5f0e:	55 27       	eor	r21, r21
	unsigned int remainder = (unaligned > 0?(SRAMPageSize - unaligned):0); // bytes remaining to end of page
    5f10:	41 15       	cp	r20, r1
    5f12:	51 05       	cpc	r21, r1
    5f14:	31 f0       	breq	.+12     	; 0x5f22 <readSRAM+0x32>
    5f16:	20 e2       	ldi	r18, 0x20	; 32
    5f18:	30 e0       	ldi	r19, 0x00	; 0
    5f1a:	59 01       	movw	r10, r18
    5f1c:	a4 1a       	sub	r10, r20
    5f1e:	b5 0a       	sbc	r11, r21
    5f20:	02 c0       	rjmp	.+4      	; 0x5f26 <readSRAM+0x36>
    5f22:	a1 2c       	mov	r10, r1
    5f24:	b1 2c       	mov	r11, r1

	if(size == 0)
    5f26:	61 15       	cp	r22, r1
    5f28:	71 05       	cpc	r23, r1
    5f2a:	09 f4       	brne	.+2      	; 0x5f2e <readSRAM+0x3e>
    5f2c:	70 c0       	rjmp	.+224    	; 0x600e <readSRAM+0x11e>
    5f2e:	6b 01       	movw	r12, r22
    5f30:	ec 01       	movw	r28, r24
		return;

	if(size >= SRAMPageSize){
    5f32:	60 32       	cpi	r22, 0x20	; 32
    5f34:	71 05       	cpc	r23, r1
    5f36:	90 f1       	brcs	.+100    	; 0x5f9c <readSRAM+0xac>
		if(unaligned == 0){
    5f38:	45 2b       	or	r20, r21
    5f3a:	c9 f4       	brne	.+50     	; 0x5f6e <readSRAM+0x7e>
			// read page only, pass remaining size to next call
			SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,SRAMPageSize);
    5f3c:	ed e2       	ldi	r30, 0x2D	; 45
    5f3e:	f2 e0       	ldi	r31, 0x02	; 2
    5f40:	10 e2       	ldi	r17, 0x20	; 32
    5f42:	e1 2e       	mov	r14, r17
    5f44:	f1 2c       	mov	r15, r1
    5f46:	00 e0       	ldi	r16, 0x00	; 0
    5f48:	10 e0       	ldi	r17, 0x00	; 0
    5f4a:	9e 01       	movw	r18, r28
    5f4c:	42 81       	ldd	r20, Z+2	; 0x02
    5f4e:	61 81       	ldd	r22, Z+1	; 0x01
    5f50:	80 81       	ld	r24, Z
    5f52:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <SRAMReadSeq>
			incrementReader(SRAMPageSize);
    5f56:	80 e2       	ldi	r24, 0x20	; 32
    5f58:	90 e0       	ldi	r25, 0x00	; 0
    5f5a:	0e 94 8f 2c 	call	0x591e	; 0x591e <incrementReader>
			readSRAM(buf + SRAMPageSize,size - SRAMPageSize);
    5f5e:	b6 01       	movw	r22, r12
    5f60:	60 52       	subi	r22, 0x20	; 32
    5f62:	71 09       	sbc	r23, r1
    5f64:	ce 01       	movw	r24, r28
    5f66:	80 96       	adiw	r24, 0x20	; 32
    5f68:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <readSRAM>
    5f6c:	50 c0       	rjmp	.+160    	; 0x600e <readSRAM+0x11e>
		}
		else{
			// read remainder, pass remaining size to next call
			SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,remainder);
    5f6e:	75 01       	movw	r14, r10
    5f70:	00 e0       	ldi	r16, 0x00	; 0
    5f72:	10 e0       	ldi	r17, 0x00	; 0
    5f74:	ed e2       	ldi	r30, 0x2D	; 45
    5f76:	f2 e0       	ldi	r31, 0x02	; 2
    5f78:	9e 01       	movw	r18, r28
    5f7a:	42 81       	ldd	r20, Z+2	; 0x02
    5f7c:	61 81       	ldd	r22, Z+1	; 0x01
    5f7e:	80 81       	ld	r24, Z
    5f80:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <SRAMReadSeq>
			incrementReader(remainder);
    5f84:	c5 01       	movw	r24, r10
    5f86:	0e 94 8f 2c 	call	0x591e	; 0x591e <incrementReader>
			readSRAM(buf + remainder,size - remainder);
    5f8a:	b6 01       	movw	r22, r12
    5f8c:	6a 19       	sub	r22, r10
    5f8e:	7b 09       	sbc	r23, r11
    5f90:	ce 01       	movw	r24, r28
    5f92:	8a 0d       	add	r24, r10
    5f94:	9b 1d       	adc	r25, r11
    5f96:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <readSRAM>
    5f9a:	39 c0       	rjmp	.+114    	; 0x600e <readSRAM+0x11e>


	}
	else{

		if(unaligned > 0){
    5f9c:	45 2b       	or	r20, r21
    5f9e:	49 f1       	breq	.+82     	; 0x5ff2 <readSRAM+0x102>
			if(size > remainder){
    5fa0:	a6 16       	cp	r10, r22
    5fa2:	b7 06       	cpc	r11, r23
    5fa4:	b8 f4       	brcc	.+46     	; 0x5fd4 <readSRAM+0xe4>
				size -= remainder;
    5fa6:	ca 18       	sub	r12, r10
    5fa8:	db 08       	sbc	r13, r11
				SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,remainder);
    5faa:	75 01       	movw	r14, r10
    5fac:	00 e0       	ldi	r16, 0x00	; 0
    5fae:	10 e0       	ldi	r17, 0x00	; 0
    5fb0:	ed e2       	ldi	r30, 0x2D	; 45
    5fb2:	f2 e0       	ldi	r31, 0x02	; 2
    5fb4:	9e 01       	movw	r18, r28
    5fb6:	42 81       	ldd	r20, Z+2	; 0x02
    5fb8:	61 81       	ldd	r22, Z+1	; 0x01
    5fba:	80 81       	ld	r24, Z
    5fbc:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <SRAMReadSeq>
				incrementReader(remainder);
    5fc0:	c5 01       	movw	r24, r10
    5fc2:	0e 94 8f 2c 	call	0x591e	; 0x591e <incrementReader>
				readSRAM(buf + remainder,size);
    5fc6:	b6 01       	movw	r22, r12
    5fc8:	ce 01       	movw	r24, r28
    5fca:	8a 0d       	add	r24, r10
    5fcc:	9b 1d       	adc	r25, r11
    5fce:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <readSRAM>
    5fd2:	1d c0       	rjmp	.+58     	; 0x600e <readSRAM+0x11e>
			}
			else{
				SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,size);
    5fd4:	7b 01       	movw	r14, r22
    5fd6:	00 e0       	ldi	r16, 0x00	; 0
    5fd8:	10 e0       	ldi	r17, 0x00	; 0
    5fda:	ed e2       	ldi	r30, 0x2D	; 45
    5fdc:	f2 e0       	ldi	r31, 0x02	; 2
    5fde:	9e 01       	movw	r18, r28
    5fe0:	42 81       	ldd	r20, Z+2	; 0x02
    5fe2:	61 81       	ldd	r22, Z+1	; 0x01
    5fe4:	80 81       	ld	r24, Z
    5fe6:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <SRAMReadSeq>
				incrementReader(size);
    5fea:	c6 01       	movw	r24, r12
    5fec:	0e 94 8f 2c 	call	0x591e	; 0x591e <incrementReader>
    5ff0:	0e c0       	rjmp	.+28     	; 0x600e <readSRAM+0x11e>
			}

		}
		else{
			SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,size);
    5ff2:	7b 01       	movw	r14, r22
    5ff4:	00 e0       	ldi	r16, 0x00	; 0
    5ff6:	10 e0       	ldi	r17, 0x00	; 0
    5ff8:	ed e2       	ldi	r30, 0x2D	; 45
    5ffa:	f2 e0       	ldi	r31, 0x02	; 2
    5ffc:	9e 01       	movw	r18, r28
    5ffe:	42 81       	ldd	r20, Z+2	; 0x02
    6000:	61 81       	ldd	r22, Z+1	; 0x01
    6002:	80 81       	ld	r24, Z
    6004:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <SRAMReadSeq>
			incrementReader(size);
    6008:	c6 01       	movw	r24, r12
    600a:	0e 94 8f 2c 	call	0x591e	; 0x591e <incrementReader>
		}
	}


}
    600e:	df 91       	pop	r29
    6010:	cf 91       	pop	r28
    6012:	1f 91       	pop	r17
    6014:	0f 91       	pop	r16
    6016:	ff 90       	pop	r15
    6018:	ef 90       	pop	r14
    601a:	df 90       	pop	r13
    601c:	cf 90       	pop	r12
    601e:	bf 90       	pop	r11
    6020:	af 90       	pop	r10
    6022:	08 95       	ret

00006024 <delay_us>:
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1BH);		// set the high 8bits of OCR1B
	//outp( (pwmDuty&0x00FF), OCR1BL);	// set the low 8bits of OCR1B
	OCR1B = pwmDuty;
    6024:	9c 01       	movw	r18, r24
    6026:	2d 5f       	subi	r18, 0xFD	; 253
    6028:	3f 4f       	sbci	r19, 0xFF	; 255
    602a:	ad ec       	ldi	r26, 0xCD	; 205
    602c:	bc ec       	ldi	r27, 0xCC	; 204
    602e:	0e 94 55 33 	call	0x66aa	; 0x66aa <__umulhisi3>
    6032:	96 95       	lsr	r25
    6034:	87 95       	ror	r24
    6036:	96 95       	lsr	r25
    6038:	87 95       	ror	r24
    603a:	82 95       	swap	r24
    603c:	92 95       	swap	r25
    603e:	90 7f       	andi	r25, 0xF0	; 240
    6040:	98 27       	eor	r25, r24
    6042:	80 7f       	andi	r24, 0xF0	; 240
    6044:	98 27       	eor	r25, r24
    6046:	00 97       	sbiw	r24, 0x00	; 0
    6048:	39 f0       	breq	.+14     	; 0x6058 <delay_us+0x34>
    604a:	20 e0       	ldi	r18, 0x00	; 0
    604c:	30 e0       	ldi	r19, 0x00	; 0
    604e:	2f 5f       	subi	r18, 0xFF	; 255
    6050:	3f 4f       	sbci	r19, 0xFF	; 255
    6052:	82 17       	cp	r24, r18
    6054:	93 07       	cpc	r25, r19
    6056:	d9 f7       	brne	.-10     	; 0x604e <delay_us+0x2a>
    6058:	08 95       	ret

0000605a <timerAttach>:
    605a:	88 30       	cpi	r24, 0x08	; 8
    605c:	40 f4       	brcc	.+16     	; 0x606e <timerAttach+0x14>
    605e:	e8 2f       	mov	r30, r24
    6060:	f0 e0       	ldi	r31, 0x00	; 0
    6062:	ee 0f       	add	r30, r30
    6064:	ff 1f       	adc	r31, r31
    6066:	e5 5c       	subi	r30, 0xC5	; 197
    6068:	fd 4f       	sbci	r31, 0xFD	; 253
    606a:	71 83       	std	Z+1, r23	; 0x01
    606c:	60 83       	st	Z, r22
    606e:	08 95       	ret

00006070 <__vector_11>:
}

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect)
{
    6070:	1f 92       	push	r1
    6072:	0f 92       	push	r0
    6074:	0f b6       	in	r0, 0x3f	; 63
    6076:	0f 92       	push	r0
    6078:	11 24       	eor	r1, r1
    607a:	2f 93       	push	r18
    607c:	3f 93       	push	r19
    607e:	4f 93       	push	r20
    6080:	5f 93       	push	r21
    6082:	6f 93       	push	r22
    6084:	7f 93       	push	r23
    6086:	8f 93       	push	r24
    6088:	9f 93       	push	r25
    608a:	af 93       	push	r26
    608c:	bf 93       	push	r27
    608e:	ef 93       	push	r30
    6090:	ff 93       	push	r31
	Timer0Reg0++;			// increment low-order counter
    6092:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <Timer0Reg0>
    6096:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <Timer0Reg0+0x1>
    609a:	a0 91 de 02 	lds	r26, 0x02DE	; 0x8002de <Timer0Reg0+0x2>
    609e:	b0 91 df 02 	lds	r27, 0x02DF	; 0x8002df <Timer0Reg0+0x3>
    60a2:	01 96       	adiw	r24, 0x01	; 1
    60a4:	a1 1d       	adc	r26, r1
    60a6:	b1 1d       	adc	r27, r1
    60a8:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <Timer0Reg0>
    60ac:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <Timer0Reg0+0x1>
    60b0:	a0 93 de 02 	sts	0x02DE, r26	; 0x8002de <Timer0Reg0+0x2>
    60b4:	b0 93 df 02 	sts	0x02DF, r27	; 0x8002df <Timer0Reg0+0x3>

	// increment pause counter
	TimerPauseReg++;
    60b8:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <TimerPauseReg>
    60bc:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <TimerPauseReg+0x1>
    60c0:	a0 91 e2 02 	lds	r26, 0x02E2	; 0x8002e2 <TimerPauseReg+0x2>
    60c4:	b0 91 e3 02 	lds	r27, 0x02E3	; 0x8002e3 <TimerPauseReg+0x3>
    60c8:	01 96       	adiw	r24, 0x01	; 1
    60ca:	a1 1d       	adc	r26, r1
    60cc:	b1 1d       	adc	r27, r1
    60ce:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <TimerPauseReg>
    60d2:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <TimerPauseReg+0x1>
    60d6:	a0 93 e2 02 	sts	0x02E2, r26	; 0x8002e2 <TimerPauseReg+0x2>
    60da:	b0 93 e3 02 	sts	0x02E3, r27	; 0x8002e3 <TimerPauseReg+0x3>

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
    60de:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <TimerIntFunc>
    60e2:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <TimerIntFunc+0x1>
    60e6:	89 2b       	or	r24, r25
    60e8:	29 f0       	breq	.+10     	; 0x60f4 <__vector_11+0x84>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
    60ea:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <TimerIntFunc>
    60ee:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <TimerIntFunc+0x1>
    60f2:	09 95       	icall
}
    60f4:	ff 91       	pop	r31
    60f6:	ef 91       	pop	r30
    60f8:	bf 91       	pop	r27
    60fa:	af 91       	pop	r26
    60fc:	9f 91       	pop	r25
    60fe:	8f 91       	pop	r24
    6100:	7f 91       	pop	r23
    6102:	6f 91       	pop	r22
    6104:	5f 91       	pop	r21
    6106:	4f 91       	pop	r20
    6108:	3f 91       	pop	r19
    610a:	2f 91       	pop	r18
    610c:	0f 90       	pop	r0
    610e:	0f be       	out	0x3f, r0	; 63
    6110:	0f 90       	pop	r0
    6112:	1f 90       	pop	r1
    6114:	18 95       	reti

00006116 <__vector_9>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect)
{
    6116:	1f 92       	push	r1
    6118:	0f 92       	push	r0
    611a:	0f b6       	in	r0, 0x3f	; 63
    611c:	0f 92       	push	r0
    611e:	11 24       	eor	r1, r1
    6120:	2f 93       	push	r18
    6122:	3f 93       	push	r19
    6124:	4f 93       	push	r20
    6126:	5f 93       	push	r21
    6128:	6f 93       	push	r22
    612a:	7f 93       	push	r23
    612c:	8f 93       	push	r24
    612e:	9f 93       	push	r25
    6130:	af 93       	push	r26
    6132:	bf 93       	push	r27
    6134:	ef 93       	push	r30
    6136:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
    6138:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <TimerIntFunc+0x2>
    613c:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <TimerIntFunc+0x3>
    6140:	89 2b       	or	r24, r25
    6142:	29 f0       	breq	.+10     	; 0x614e <__vector_9+0x38>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
    6144:	e0 91 3d 02 	lds	r30, 0x023D	; 0x80023d <TimerIntFunc+0x2>
    6148:	f0 91 3e 02 	lds	r31, 0x023E	; 0x80023e <TimerIntFunc+0x3>
    614c:	09 95       	icall
}
    614e:	ff 91       	pop	r31
    6150:	ef 91       	pop	r30
    6152:	bf 91       	pop	r27
    6154:	af 91       	pop	r26
    6156:	9f 91       	pop	r25
    6158:	8f 91       	pop	r24
    615a:	7f 91       	pop	r23
    615c:	6f 91       	pop	r22
    615e:	5f 91       	pop	r21
    6160:	4f 91       	pop	r20
    6162:	3f 91       	pop	r19
    6164:	2f 91       	pop	r18
    6166:	0f 90       	pop	r0
    6168:	0f be       	out	0x3f, r0	; 63
    616a:	0f 90       	pop	r0
    616c:	1f 90       	pop	r1
    616e:	18 95       	reti

00006170 <__vector_5>:

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_OVF_vect)
{
    6170:	1f 92       	push	r1
    6172:	0f 92       	push	r0
    6174:	0f b6       	in	r0, 0x3f	; 63
    6176:	0f 92       	push	r0
    6178:	11 24       	eor	r1, r1
    617a:	2f 93       	push	r18
    617c:	3f 93       	push	r19
    617e:	4f 93       	push	r20
    6180:	5f 93       	push	r21
    6182:	6f 93       	push	r22
    6184:	7f 93       	push	r23
    6186:	8f 93       	push	r24
    6188:	9f 93       	push	r25
    618a:	af 93       	push	r26
    618c:	bf 93       	push	r27
    618e:	ef 93       	push	r30
    6190:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
    6192:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <Timer2Reg0>
    6196:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <Timer2Reg0+0x1>
    619a:	a0 91 e6 02 	lds	r26, 0x02E6	; 0x8002e6 <Timer2Reg0+0x2>
    619e:	b0 91 e7 02 	lds	r27, 0x02E7	; 0x8002e7 <Timer2Reg0+0x3>
    61a2:	01 96       	adiw	r24, 0x01	; 1
    61a4:	a1 1d       	adc	r26, r1
    61a6:	b1 1d       	adc	r27, r1
    61a8:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <Timer2Reg0>
    61ac:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <Timer2Reg0+0x1>
    61b0:	a0 93 e6 02 	sts	0x02E6, r26	; 0x8002e6 <Timer2Reg0+0x2>
    61b4:	b0 93 e7 02 	sts	0x02E7, r27	; 0x8002e7 <Timer2Reg0+0x3>

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
    61b8:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <TimerIntFunc+0xa>
    61bc:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <TimerIntFunc+0xb>
    61c0:	89 2b       	or	r24, r25
    61c2:	29 f0       	breq	.+10     	; 0x61ce <__vector_5+0x5e>
		TimerIntFunc[TIMER2OVERFLOW_INT]();
    61c4:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <TimerIntFunc+0xa>
    61c8:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <TimerIntFunc+0xb>
    61cc:	09 95       	icall
}
    61ce:	ff 91       	pop	r31
    61d0:	ef 91       	pop	r30
    61d2:	bf 91       	pop	r27
    61d4:	af 91       	pop	r26
    61d6:	9f 91       	pop	r25
    61d8:	8f 91       	pop	r24
    61da:	7f 91       	pop	r23
    61dc:	6f 91       	pop	r22
    61de:	5f 91       	pop	r21
    61e0:	4f 91       	pop	r20
    61e2:	3f 91       	pop	r19
    61e4:	2f 91       	pop	r18
    61e6:	0f 90       	pop	r0
    61e8:	0f be       	out	0x3f, r0	; 63
    61ea:	0f 90       	pop	r0
    61ec:	1f 90       	pop	r1
    61ee:	18 95       	reti

000061f0 <__vector_10>:

#ifdef OCR0
// include support for Output Compare 0 for new AVR processors that support it
//! Interrupt handler for OutputCompare0 match (OC0) interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_COMP_vect)
{
    61f0:	1f 92       	push	r1
    61f2:	0f 92       	push	r0
    61f4:	0f b6       	in	r0, 0x3f	; 63
    61f6:	0f 92       	push	r0
    61f8:	11 24       	eor	r1, r1
    61fa:	2f 93       	push	r18
    61fc:	3f 93       	push	r19
    61fe:	4f 93       	push	r20
    6200:	5f 93       	push	r21
    6202:	6f 93       	push	r22
    6204:	7f 93       	push	r23
    6206:	8f 93       	push	r24
    6208:	9f 93       	push	r25
    620a:	af 93       	push	r26
    620c:	bf 93       	push	r27
    620e:	ef 93       	push	r30
    6210:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER0OUTCOMPARE_INT])
    6212:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <TimerIntFunc+0xe>
    6216:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <TimerIntFunc+0xf>
    621a:	89 2b       	or	r24, r25
    621c:	29 f0       	breq	.+10     	; 0x6228 <__vector_10+0x38>
		TimerIntFunc[TIMER0OUTCOMPARE_INT]();
    621e:	e0 91 49 02 	lds	r30, 0x0249	; 0x800249 <TimerIntFunc+0xe>
    6222:	f0 91 4a 02 	lds	r31, 0x024A	; 0x80024a <TimerIntFunc+0xf>
    6226:	09 95       	icall
}
    6228:	ff 91       	pop	r31
    622a:	ef 91       	pop	r30
    622c:	bf 91       	pop	r27
    622e:	af 91       	pop	r26
    6230:	9f 91       	pop	r25
    6232:	8f 91       	pop	r24
    6234:	7f 91       	pop	r23
    6236:	6f 91       	pop	r22
    6238:	5f 91       	pop	r21
    623a:	4f 91       	pop	r20
    623c:	3f 91       	pop	r19
    623e:	2f 91       	pop	r18
    6240:	0f 90       	pop	r0
    6242:	0f be       	out	0x3f, r0	; 63
    6244:	0f 90       	pop	r0
    6246:	1f 90       	pop	r1
    6248:	18 95       	reti

0000624a <__vector_7>:
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect)
{
    624a:	1f 92       	push	r1
    624c:	0f 92       	push	r0
    624e:	0f b6       	in	r0, 0x3f	; 63
    6250:	0f 92       	push	r0
    6252:	11 24       	eor	r1, r1
    6254:	2f 93       	push	r18
    6256:	3f 93       	push	r19
    6258:	4f 93       	push	r20
    625a:	5f 93       	push	r21
    625c:	6f 93       	push	r22
    625e:	7f 93       	push	r23
    6260:	8f 93       	push	r24
    6262:	9f 93       	push	r25
    6264:	af 93       	push	r26
    6266:	bf 93       	push	r27
    6268:	ef 93       	push	r30
    626a:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
    626c:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <TimerIntFunc+0x4>
    6270:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <TimerIntFunc+0x5>
    6274:	89 2b       	or	r24, r25
    6276:	29 f0       	breq	.+10     	; 0x6282 <__vector_7+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
    6278:	e0 91 3f 02 	lds	r30, 0x023F	; 0x80023f <TimerIntFunc+0x4>
    627c:	f0 91 40 02 	lds	r31, 0x0240	; 0x800240 <TimerIntFunc+0x5>
    6280:	09 95       	icall
}
    6282:	ff 91       	pop	r31
    6284:	ef 91       	pop	r30
    6286:	bf 91       	pop	r27
    6288:	af 91       	pop	r26
    628a:	9f 91       	pop	r25
    628c:	8f 91       	pop	r24
    628e:	7f 91       	pop	r23
    6290:	6f 91       	pop	r22
    6292:	5f 91       	pop	r21
    6294:	4f 91       	pop	r20
    6296:	3f 91       	pop	r19
    6298:	2f 91       	pop	r18
    629a:	0f 90       	pop	r0
    629c:	0f be       	out	0x3f, r0	; 63
    629e:	0f 90       	pop	r0
    62a0:	1f 90       	pop	r1
    62a2:	18 95       	reti

000062a4 <__vector_8>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect)
{
    62a4:	1f 92       	push	r1
    62a6:	0f 92       	push	r0
    62a8:	0f b6       	in	r0, 0x3f	; 63
    62aa:	0f 92       	push	r0
    62ac:	11 24       	eor	r1, r1
    62ae:	2f 93       	push	r18
    62b0:	3f 93       	push	r19
    62b2:	4f 93       	push	r20
    62b4:	5f 93       	push	r21
    62b6:	6f 93       	push	r22
    62b8:	7f 93       	push	r23
    62ba:	8f 93       	push	r24
    62bc:	9f 93       	push	r25
    62be:	af 93       	push	r26
    62c0:	bf 93       	push	r27
    62c2:	ef 93       	push	r30
    62c4:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
    62c6:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <TimerIntFunc+0x6>
    62ca:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <TimerIntFunc+0x7>
    62ce:	89 2b       	or	r24, r25
    62d0:	29 f0       	breq	.+10     	; 0x62dc <__vector_8+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
    62d2:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <TimerIntFunc+0x6>
    62d6:	f0 91 42 02 	lds	r31, 0x0242	; 0x800242 <TimerIntFunc+0x7>
    62da:	09 95       	icall
}
    62dc:	ff 91       	pop	r31
    62de:	ef 91       	pop	r30
    62e0:	bf 91       	pop	r27
    62e2:	af 91       	pop	r26
    62e4:	9f 91       	pop	r25
    62e6:	8f 91       	pop	r24
    62e8:	7f 91       	pop	r23
    62ea:	6f 91       	pop	r22
    62ec:	5f 91       	pop	r21
    62ee:	4f 91       	pop	r20
    62f0:	3f 91       	pop	r19
    62f2:	2f 91       	pop	r18
    62f4:	0f 90       	pop	r0
    62f6:	0f be       	out	0x3f, r0	; 63
    62f8:	0f 90       	pop	r0
    62fa:	1f 90       	pop	r1
    62fc:	18 95       	reti

000062fe <__vector_6>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect)
{
    62fe:	1f 92       	push	r1
    6300:	0f 92       	push	r0
    6302:	0f b6       	in	r0, 0x3f	; 63
    6304:	0f 92       	push	r0
    6306:	11 24       	eor	r1, r1
    6308:	2f 93       	push	r18
    630a:	3f 93       	push	r19
    630c:	4f 93       	push	r20
    630e:	5f 93       	push	r21
    6310:	6f 93       	push	r22
    6312:	7f 93       	push	r23
    6314:	8f 93       	push	r24
    6316:	9f 93       	push	r25
    6318:	af 93       	push	r26
    631a:	bf 93       	push	r27
    631c:	ef 93       	push	r30
    631e:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
    6320:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <TimerIntFunc+0x8>
    6324:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <TimerIntFunc+0x9>
    6328:	89 2b       	or	r24, r25
    632a:	29 f0       	breq	.+10     	; 0x6336 <__vector_6+0x38>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
    632c:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <TimerIntFunc+0x8>
    6330:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <TimerIntFunc+0x9>
    6334:	09 95       	icall
}
    6336:	ff 91       	pop	r31
    6338:	ef 91       	pop	r30
    633a:	bf 91       	pop	r27
    633c:	af 91       	pop	r26
    633e:	9f 91       	pop	r25
    6340:	8f 91       	pop	r24
    6342:	7f 91       	pop	r23
    6344:	6f 91       	pop	r22
    6346:	5f 91       	pop	r21
    6348:	4f 91       	pop	r20
    634a:	3f 91       	pop	r19
    634c:	2f 91       	pop	r18
    634e:	0f 90       	pop	r0
    6350:	0f be       	out	0x3f, r0	; 63
    6352:	0f 90       	pop	r0
    6354:	1f 90       	pop	r1
    6356:	18 95       	reti

00006358 <__vector_4>:

//! Interrupt handler for OutputCompare2 match (OC2) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMP_vect)
{
    6358:	1f 92       	push	r1
    635a:	0f 92       	push	r0
    635c:	0f b6       	in	r0, 0x3f	; 63
    635e:	0f 92       	push	r0
    6360:	11 24       	eor	r1, r1
    6362:	2f 93       	push	r18
    6364:	3f 93       	push	r19
    6366:	4f 93       	push	r20
    6368:	5f 93       	push	r21
    636a:	6f 93       	push	r22
    636c:	7f 93       	push	r23
    636e:	8f 93       	push	r24
    6370:	9f 93       	push	r25
    6372:	af 93       	push	r26
    6374:	bf 93       	push	r27
    6376:	ef 93       	push	r30
    6378:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
    637a:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <TimerIntFunc+0xc>
    637e:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <TimerIntFunc+0xd>
    6382:	89 2b       	or	r24, r25
    6384:	29 f0       	breq	.+10     	; 0x6390 <__vector_4+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
    6386:	e0 91 47 02 	lds	r30, 0x0247	; 0x800247 <TimerIntFunc+0xc>
    638a:	f0 91 48 02 	lds	r31, 0x0248	; 0x800248 <TimerIntFunc+0xd>
    638e:	09 95       	icall
}
    6390:	ff 91       	pop	r31
    6392:	ef 91       	pop	r30
    6394:	bf 91       	pop	r27
    6396:	af 91       	pop	r26
    6398:	9f 91       	pop	r25
    639a:	8f 91       	pop	r24
    639c:	7f 91       	pop	r23
    639e:	6f 91       	pop	r22
    63a0:	5f 91       	pop	r21
    63a2:	4f 91       	pop	r20
    63a4:	3f 91       	pop	r19
    63a6:	2f 91       	pop	r18
    63a8:	0f 90       	pop	r0
    63aa:	0f be       	out	0x3f, r0	; 63
    63ac:	0f 90       	pop	r0
    63ae:	1f 90       	pop	r1
    63b0:	18 95       	reti

000063b2 <uartInitBuffers>:
	else
	{
		// return failure
		return FALSE;
	}
}
    63b2:	40 e4       	ldi	r20, 0x40	; 64
    63b4:	50 e0       	ldi	r21, 0x00	; 0
    63b6:	6d e8       	ldi	r22, 0x8D	; 141
    63b8:	72 e0       	ldi	r23, 0x02	; 2
    63ba:	89 ee       	ldi	r24, 0xE9	; 233
    63bc:	92 e0       	ldi	r25, 0x02	; 2
    63be:	0e 94 67 01 	call	0x2ce	; 0x2ce <bufferInit>
    63c2:	40 e4       	ldi	r20, 0x40	; 64
    63c4:	50 e0       	ldi	r21, 0x00	; 0
    63c6:	6d e4       	ldi	r22, 0x4D	; 77
    63c8:	72 e0       	ldi	r23, 0x02	; 2
    63ca:	83 ef       	ldi	r24, 0xF3	; 243
    63cc:	92 e0       	ldi	r25, 0x02	; 2
    63ce:	0e 94 67 01 	call	0x2ce	; 0x2ce <bufferInit>
    63d2:	08 95       	ret

000063d4 <uartInit>:
    63d4:	0e 94 d9 31 	call	0x63b2	; 0x63b2 <uartInitBuffers>
    63d8:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <UartRxFunc+0x1>
    63dc:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <UartRxFunc>
    63e0:	88 ed       	ldi	r24, 0xD8	; 216
    63e2:	8a b9       	out	0x0a, r24	; 10
    63e4:	86 e8       	ldi	r24, 0x86	; 134
    63e6:	80 bd       	out	0x20, r24	; 32
    63e8:	87 e6       	ldi	r24, 0x67	; 103
    63ea:	89 b9       	out	0x09, r24	; 9
    63ec:	10 bc       	out	0x20, r1	; 32
    63ee:	81 e0       	ldi	r24, 0x01	; 1
    63f0:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <uartReadyTx>
    63f4:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <uartBufferedTx>
    63f8:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <uartRxOverflow+0x1>
    63fc:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <uartRxOverflow>
    6400:	78 94       	sei
    6402:	08 95       	ret

00006404 <uartSetRxHandler>:
    6404:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <UartRxFunc+0x1>
    6408:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <UartRxFunc>
    640c:	08 95       	ret

0000640e <uartSetBaudRate>:
    640e:	0f 93       	push	r16
    6410:	1f 93       	push	r17
    6412:	8b 01       	movw	r16, r22
    6414:	9c 01       	movw	r18, r24
    6416:	dc 01       	movw	r26, r24
    6418:	cb 01       	movw	r24, r22
    641a:	80 58       	subi	r24, 0x80	; 128
    641c:	9b 47       	sbci	r25, 0x7B	; 123
    641e:	a1 4e       	sbci	r26, 0xE1	; 225
    6420:	bf 4f       	sbci	r27, 0xFF	; 255
    6422:	88 0f       	add	r24, r24
    6424:	99 1f       	adc	r25, r25
    6426:	aa 1f       	adc	r26, r26
    6428:	bb 1f       	adc	r27, r27
    642a:	88 0f       	add	r24, r24
    642c:	99 1f       	adc	r25, r25
    642e:	aa 1f       	adc	r26, r26
    6430:	bb 1f       	adc	r27, r27
    6432:	bc 01       	movw	r22, r24
    6434:	cd 01       	movw	r24, r26
    6436:	66 0f       	add	r22, r22
    6438:	77 1f       	adc	r23, r23
    643a:	88 1f       	adc	r24, r24
    643c:	99 1f       	adc	r25, r25
    643e:	00 0f       	add	r16, r16
    6440:	11 1f       	adc	r17, r17
    6442:	22 1f       	adc	r18, r18
    6444:	33 1f       	adc	r19, r19
    6446:	00 0f       	add	r16, r16
    6448:	11 1f       	adc	r17, r17
    644a:	22 1f       	adc	r18, r18
    644c:	33 1f       	adc	r19, r19
    644e:	a9 01       	movw	r20, r18
    6450:	98 01       	movw	r18, r16
    6452:	22 0f       	add	r18, r18
    6454:	33 1f       	adc	r19, r19
    6456:	44 1f       	adc	r20, r20
    6458:	55 1f       	adc	r21, r21
    645a:	22 0f       	add	r18, r18
    645c:	33 1f       	adc	r19, r19
    645e:	44 1f       	adc	r20, r20
    6460:	55 1f       	adc	r21, r21
    6462:	0e 94 0e 33 	call	0x661c	; 0x661c <__udivmodsi4>
    6466:	21 50       	subi	r18, 0x01	; 1
    6468:	31 09       	sbc	r19, r1
    646a:	29 b9       	out	0x09, r18	; 9
    646c:	30 bd       	out	0x20, r19	; 32
    646e:	1f 91       	pop	r17
    6470:	0f 91       	pop	r16
    6472:	08 95       	ret

00006474 <uartSendByte>:
    6474:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <uartReadyTx>
    6478:	99 23       	and	r25, r25
    647a:	e1 f3       	breq	.-8      	; 0x6474 <uartSendByte>
    647c:	8c b9       	out	0x0c, r24	; 12
    647e:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <uartReadyTx>
    6482:	08 95       	ret

00006484 <uartReceiveByte>:
    6484:	cf 93       	push	r28
    6486:	df 93       	push	r29
    6488:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <uartRxBuffer+0x2>
    648c:	30 91 ec 02 	lds	r19, 0x02EC	; 0x8002ec <uartRxBuffer+0x3>
    6490:	23 2b       	or	r18, r19
    6492:	71 f0       	breq	.+28     	; 0x64b0 <uartReceiveByte+0x2c>
    6494:	20 91 ed 02 	lds	r18, 0x02ED	; 0x8002ed <uartRxBuffer+0x4>
    6498:	30 91 ee 02 	lds	r19, 0x02EE	; 0x8002ee <uartRxBuffer+0x5>
    649c:	23 2b       	or	r18, r19
    649e:	51 f0       	breq	.+20     	; 0x64b4 <uartReceiveByte+0x30>
    64a0:	ec 01       	movw	r28, r24
    64a2:	89 ee       	ldi	r24, 0xE9	; 233
    64a4:	92 e0       	ldi	r25, 0x02	; 2
    64a6:	0e 94 74 01 	call	0x2e8	; 0x2e8 <bufferGetFromFront>
    64aa:	88 83       	st	Y, r24
    64ac:	81 e0       	ldi	r24, 0x01	; 1
    64ae:	03 c0       	rjmp	.+6      	; 0x64b6 <uartReceiveByte+0x32>
    64b0:	80 e0       	ldi	r24, 0x00	; 0
    64b2:	01 c0       	rjmp	.+2      	; 0x64b6 <uartReceiveByte+0x32>
    64b4:	80 e0       	ldi	r24, 0x00	; 0
    64b6:	df 91       	pop	r29
    64b8:	cf 91       	pop	r28
    64ba:	08 95       	ret

000064bc <uartGetByte>:
    64bc:	cf 93       	push	r28
    64be:	df 93       	push	r29
    64c0:	1f 92       	push	r1
    64c2:	cd b7       	in	r28, 0x3d	; 61
    64c4:	de b7       	in	r29, 0x3e	; 62
    64c6:	ce 01       	movw	r24, r28
    64c8:	01 96       	adiw	r24, 0x01	; 1
    64ca:	0e 94 42 32 	call	0x6484	; 0x6484 <uartReceiveByte>
    64ce:	88 23       	and	r24, r24
    64d0:	19 f0       	breq	.+6      	; 0x64d8 <uartGetByte+0x1c>
    64d2:	89 81       	ldd	r24, Y+1	; 0x01
    64d4:	90 e0       	ldi	r25, 0x00	; 0
    64d6:	02 c0       	rjmp	.+4      	; 0x64dc <uartGetByte+0x20>
    64d8:	8f ef       	ldi	r24, 0xFF	; 255
    64da:	9f ef       	ldi	r25, 0xFF	; 255
    64dc:	0f 90       	pop	r0
    64de:	df 91       	pop	r29
    64e0:	cf 91       	pop	r28
    64e2:	08 95       	ret

000064e4 <uartFlushReceiveBuffer>:
    64e4:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <uartRxBuffer+0x5>
    64e8:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <uartRxBuffer+0x4>
    64ec:	08 95       	ret

000064ee <uartReceiveBufferIsEmpty>:
    64ee:	81 e0       	ldi	r24, 0x01	; 1
    64f0:	20 91 ed 02 	lds	r18, 0x02ED	; 0x8002ed <uartRxBuffer+0x4>
    64f4:	30 91 ee 02 	lds	r19, 0x02EE	; 0x8002ee <uartRxBuffer+0x5>
    64f8:	23 2b       	or	r18, r19
    64fa:	09 f0       	breq	.+2      	; 0x64fe <uartReceiveBufferIsEmpty+0x10>
    64fc:	80 e0       	ldi	r24, 0x00	; 0
    64fe:	08 95       	ret

00006500 <__vector_15>:

// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(USART_TXC_vect)
{
    6500:	1f 92       	push	r1
    6502:	0f 92       	push	r0
    6504:	0f b6       	in	r0, 0x3f	; 63
    6506:	0f 92       	push	r0
    6508:	11 24       	eor	r1, r1
    650a:	2f 93       	push	r18
    650c:	3f 93       	push	r19
    650e:	4f 93       	push	r20
    6510:	5f 93       	push	r21
    6512:	6f 93       	push	r22
    6514:	7f 93       	push	r23
    6516:	8f 93       	push	r24
    6518:	9f 93       	push	r25
    651a:	af 93       	push	r26
    651c:	bf 93       	push	r27
    651e:	ef 93       	push	r30
    6520:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
    6522:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <uartBufferedTx>
    6526:	88 23       	and	r24, r24
    6528:	91 f0       	breq	.+36     	; 0x654e <__vector_15+0x4e>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
    652a:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <uartTxBuffer+0x4>
    652e:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <uartTxBuffer+0x5>
    6532:	89 2b       	or	r24, r25
    6534:	31 f0       	breq	.+12     	; 0x6542 <__vector_15+0x42>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
    6536:	83 ef       	ldi	r24, 0xF3	; 243
    6538:	92 e0       	ldi	r25, 0x02	; 2
    653a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <bufferGetFromFront>
    653e:	8c b9       	out	0x0c, r24	; 12
    6540:	09 c0       	rjmp	.+18     	; 0x6554 <__vector_15+0x54>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
    6542:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <uartBufferedTx>
			// return to ready state
			uartReadyTx = TRUE;
    6546:	81 e0       	ldi	r24, 0x01	; 1
    6548:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <uartReadyTx>
    654c:	03 c0       	rjmp	.+6      	; 0x6554 <__vector_15+0x54>
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
    654e:	81 e0       	ldi	r24, 0x01	; 1
    6550:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <uartReadyTx>
	}
}
    6554:	ff 91       	pop	r31
    6556:	ef 91       	pop	r30
    6558:	bf 91       	pop	r27
    655a:	af 91       	pop	r26
    655c:	9f 91       	pop	r25
    655e:	8f 91       	pop	r24
    6560:	7f 91       	pop	r23
    6562:	6f 91       	pop	r22
    6564:	5f 91       	pop	r21
    6566:	4f 91       	pop	r20
    6568:	3f 91       	pop	r19
    656a:	2f 91       	pop	r18
    656c:	0f 90       	pop	r0
    656e:	0f be       	out	0x3f, r0	; 63
    6570:	0f 90       	pop	r0
    6572:	1f 90       	pop	r1
    6574:	18 95       	reti

00006576 <__vector_13>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(USART_RXC_vect)
{
    6576:	1f 92       	push	r1
    6578:	0f 92       	push	r0
    657a:	0f b6       	in	r0, 0x3f	; 63
    657c:	0f 92       	push	r0
    657e:	11 24       	eor	r1, r1
    6580:	2f 93       	push	r18
    6582:	3f 93       	push	r19
    6584:	4f 93       	push	r20
    6586:	5f 93       	push	r21
    6588:	6f 93       	push	r22
    658a:	7f 93       	push	r23
    658c:	8f 93       	push	r24
    658e:	9f 93       	push	r25
    6590:	af 93       	push	r26
    6592:	bf 93       	push	r27
    6594:	ef 93       	push	r30
    6596:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
    6598:	8c b1       	in	r24, 0x0c	; 12
	
	// if there's a user function to handle this receive event
	if(UartRxFunc)
    659a:	20 91 4b 02 	lds	r18, 0x024B	; 0x80024b <UartRxFunc>
    659e:	30 91 4c 02 	lds	r19, 0x024C	; 0x80024c <UartRxFunc+0x1>
    65a2:	23 2b       	or	r18, r19
    65a4:	31 f0       	breq	.+12     	; 0x65b2 <__vector_13+0x3c>
	{
		// call it and pass the received data
		UartRxFunc(c);
    65a6:	e0 91 4b 02 	lds	r30, 0x024B	; 0x80024b <UartRxFunc>
    65aa:	f0 91 4c 02 	lds	r31, 0x024C	; 0x80024c <UartRxFunc+0x1>
    65ae:	09 95       	icall
    65b0:	10 c0       	rjmp	.+32     	; 0x65d2 <__vector_13+0x5c>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
    65b2:	68 2f       	mov	r22, r24
    65b4:	89 ee       	ldi	r24, 0xE9	; 233
    65b6:	92 e0       	ldi	r25, 0x02	; 2
    65b8:	0e 94 98 01 	call	0x330	; 0x330 <bufferAddToEnd>
    65bc:	81 11       	cpse	r24, r1
    65be:	09 c0       	rjmp	.+18     	; 0x65d2 <__vector_13+0x5c>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
    65c0:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <uartRxOverflow>
    65c4:	90 91 fc 02 	lds	r25, 0x02FC	; 0x8002fc <uartRxOverflow+0x1>
    65c8:	01 96       	adiw	r24, 0x01	; 1
    65ca:	90 93 fc 02 	sts	0x02FC, r25	; 0x8002fc <uartRxOverflow+0x1>
    65ce:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <uartRxOverflow>
		}
	}
}
    65d2:	ff 91       	pop	r31
    65d4:	ef 91       	pop	r30
    65d6:	bf 91       	pop	r27
    65d8:	af 91       	pop	r26
    65da:	9f 91       	pop	r25
    65dc:	8f 91       	pop	r24
    65de:	7f 91       	pop	r23
    65e0:	6f 91       	pop	r22
    65e2:	5f 91       	pop	r21
    65e4:	4f 91       	pop	r20
    65e6:	3f 91       	pop	r19
    65e8:	2f 91       	pop	r18
    65ea:	0f 90       	pop	r0
    65ec:	0f be       	out	0x3f, r0	; 63
    65ee:	0f 90       	pop	r0
    65f0:	1f 90       	pop	r1
    65f2:	18 95       	reti

000065f4 <__udivmodhi4>:
    65f4:	aa 1b       	sub	r26, r26
    65f6:	bb 1b       	sub	r27, r27
    65f8:	51 e1       	ldi	r21, 0x11	; 17
    65fa:	07 c0       	rjmp	.+14     	; 0x660a <__udivmodhi4_ep>

000065fc <__udivmodhi4_loop>:
    65fc:	aa 1f       	adc	r26, r26
    65fe:	bb 1f       	adc	r27, r27
    6600:	a6 17       	cp	r26, r22
    6602:	b7 07       	cpc	r27, r23
    6604:	10 f0       	brcs	.+4      	; 0x660a <__udivmodhi4_ep>
    6606:	a6 1b       	sub	r26, r22
    6608:	b7 0b       	sbc	r27, r23

0000660a <__udivmodhi4_ep>:
    660a:	88 1f       	adc	r24, r24
    660c:	99 1f       	adc	r25, r25
    660e:	5a 95       	dec	r21
    6610:	a9 f7       	brne	.-22     	; 0x65fc <__udivmodhi4_loop>
    6612:	80 95       	com	r24
    6614:	90 95       	com	r25
    6616:	bc 01       	movw	r22, r24
    6618:	cd 01       	movw	r24, r26
    661a:	08 95       	ret

0000661c <__udivmodsi4>:
    661c:	a1 e2       	ldi	r26, 0x21	; 33
    661e:	1a 2e       	mov	r1, r26
    6620:	aa 1b       	sub	r26, r26
    6622:	bb 1b       	sub	r27, r27
    6624:	fd 01       	movw	r30, r26
    6626:	0d c0       	rjmp	.+26     	; 0x6642 <__udivmodsi4_ep>

00006628 <__udivmodsi4_loop>:
    6628:	aa 1f       	adc	r26, r26
    662a:	bb 1f       	adc	r27, r27
    662c:	ee 1f       	adc	r30, r30
    662e:	ff 1f       	adc	r31, r31
    6630:	a2 17       	cp	r26, r18
    6632:	b3 07       	cpc	r27, r19
    6634:	e4 07       	cpc	r30, r20
    6636:	f5 07       	cpc	r31, r21
    6638:	20 f0       	brcs	.+8      	; 0x6642 <__udivmodsi4_ep>
    663a:	a2 1b       	sub	r26, r18
    663c:	b3 0b       	sbc	r27, r19
    663e:	e4 0b       	sbc	r30, r20
    6640:	f5 0b       	sbc	r31, r21

00006642 <__udivmodsi4_ep>:
    6642:	66 1f       	adc	r22, r22
    6644:	77 1f       	adc	r23, r23
    6646:	88 1f       	adc	r24, r24
    6648:	99 1f       	adc	r25, r25
    664a:	1a 94       	dec	r1
    664c:	69 f7       	brne	.-38     	; 0x6628 <__udivmodsi4_loop>
    664e:	60 95       	com	r22
    6650:	70 95       	com	r23
    6652:	80 95       	com	r24
    6654:	90 95       	com	r25
    6656:	9b 01       	movw	r18, r22
    6658:	ac 01       	movw	r20, r24
    665a:	bd 01       	movw	r22, r26
    665c:	cf 01       	movw	r24, r30
    665e:	08 95       	ret

00006660 <__divmodsi4>:
    6660:	05 2e       	mov	r0, r21
    6662:	97 fb       	bst	r25, 7
    6664:	1e f4       	brtc	.+6      	; 0x666c <__divmodsi4+0xc>
    6666:	00 94       	com	r0
    6668:	0e 94 47 33 	call	0x668e	; 0x668e <__negsi2>
    666c:	57 fd       	sbrc	r21, 7
    666e:	07 d0       	rcall	.+14     	; 0x667e <__divmodsi4_neg2>
    6670:	0e 94 0e 33 	call	0x661c	; 0x661c <__udivmodsi4>
    6674:	07 fc       	sbrc	r0, 7
    6676:	03 d0       	rcall	.+6      	; 0x667e <__divmodsi4_neg2>
    6678:	4e f4       	brtc	.+18     	; 0x668c <__divmodsi4_exit>
    667a:	0c 94 47 33 	jmp	0x668e	; 0x668e <__negsi2>

0000667e <__divmodsi4_neg2>:
    667e:	50 95       	com	r21
    6680:	40 95       	com	r20
    6682:	30 95       	com	r19
    6684:	21 95       	neg	r18
    6686:	3f 4f       	sbci	r19, 0xFF	; 255
    6688:	4f 4f       	sbci	r20, 0xFF	; 255
    668a:	5f 4f       	sbci	r21, 0xFF	; 255

0000668c <__divmodsi4_exit>:
    668c:	08 95       	ret

0000668e <__negsi2>:
    668e:	90 95       	com	r25
    6690:	80 95       	com	r24
    6692:	70 95       	com	r23
    6694:	61 95       	neg	r22
    6696:	7f 4f       	sbci	r23, 0xFF	; 255
    6698:	8f 4f       	sbci	r24, 0xFF	; 255
    669a:	9f 4f       	sbci	r25, 0xFF	; 255
    669c:	08 95       	ret

0000669e <__tablejump2__>:
    669e:	ee 0f       	add	r30, r30
    66a0:	ff 1f       	adc	r31, r31
    66a2:	05 90       	lpm	r0, Z+
    66a4:	f4 91       	lpm	r31, Z
    66a6:	e0 2d       	mov	r30, r0
    66a8:	09 94       	ijmp

000066aa <__umulhisi3>:
    66aa:	a2 9f       	mul	r26, r18
    66ac:	b0 01       	movw	r22, r0
    66ae:	b3 9f       	mul	r27, r19
    66b0:	c0 01       	movw	r24, r0
    66b2:	a3 9f       	mul	r26, r19
    66b4:	70 0d       	add	r23, r0
    66b6:	81 1d       	adc	r24, r1
    66b8:	11 24       	eor	r1, r1
    66ba:	91 1d       	adc	r25, r1
    66bc:	b2 9f       	mul	r27, r18
    66be:	70 0d       	add	r23, r0
    66c0:	81 1d       	adc	r24, r1
    66c2:	11 24       	eor	r1, r1
    66c4:	91 1d       	adc	r25, r1
    66c6:	08 95       	ret

000066c8 <__muluhisi3>:
    66c8:	0e 94 55 33 	call	0x66aa	; 0x66aa <__umulhisi3>
    66cc:	a5 9f       	mul	r26, r21
    66ce:	90 0d       	add	r25, r0
    66d0:	b4 9f       	mul	r27, r20
    66d2:	90 0d       	add	r25, r0
    66d4:	a4 9f       	mul	r26, r20
    66d6:	80 0d       	add	r24, r0
    66d8:	91 1d       	adc	r25, r1
    66da:	11 24       	eor	r1, r1
    66dc:	08 95       	ret

000066de <malloc>:
    66de:	0f 93       	push	r16
    66e0:	1f 93       	push	r17
    66e2:	cf 93       	push	r28
    66e4:	df 93       	push	r29
    66e6:	82 30       	cpi	r24, 0x02	; 2
    66e8:	91 05       	cpc	r25, r1
    66ea:	10 f4       	brcc	.+4      	; 0x66f0 <malloc+0x12>
    66ec:	82 e0       	ldi	r24, 0x02	; 2
    66ee:	90 e0       	ldi	r25, 0x00	; 0
    66f0:	e0 91 ff 02 	lds	r30, 0x02FF	; 0x8002ff <__flp>
    66f4:	f0 91 00 03 	lds	r31, 0x0300	; 0x800300 <__flp+0x1>
    66f8:	20 e0       	ldi	r18, 0x00	; 0
    66fa:	30 e0       	ldi	r19, 0x00	; 0
    66fc:	a0 e0       	ldi	r26, 0x00	; 0
    66fe:	b0 e0       	ldi	r27, 0x00	; 0
    6700:	30 97       	sbiw	r30, 0x00	; 0
    6702:	19 f1       	breq	.+70     	; 0x674a <malloc+0x6c>
    6704:	40 81       	ld	r20, Z
    6706:	51 81       	ldd	r21, Z+1	; 0x01
    6708:	02 81       	ldd	r16, Z+2	; 0x02
    670a:	13 81       	ldd	r17, Z+3	; 0x03
    670c:	48 17       	cp	r20, r24
    670e:	59 07       	cpc	r21, r25
    6710:	c8 f0       	brcs	.+50     	; 0x6744 <malloc+0x66>
    6712:	84 17       	cp	r24, r20
    6714:	95 07       	cpc	r25, r21
    6716:	69 f4       	brne	.+26     	; 0x6732 <malloc+0x54>
    6718:	10 97       	sbiw	r26, 0x00	; 0
    671a:	31 f0       	breq	.+12     	; 0x6728 <malloc+0x4a>
    671c:	12 96       	adiw	r26, 0x02	; 2
    671e:	0c 93       	st	X, r16
    6720:	12 97       	sbiw	r26, 0x02	; 2
    6722:	13 96       	adiw	r26, 0x03	; 3
    6724:	1c 93       	st	X, r17
    6726:	27 c0       	rjmp	.+78     	; 0x6776 <malloc+0x98>
    6728:	00 93 ff 02 	sts	0x02FF, r16	; 0x8002ff <__flp>
    672c:	10 93 00 03 	sts	0x0300, r17	; 0x800300 <__flp+0x1>
    6730:	22 c0       	rjmp	.+68     	; 0x6776 <malloc+0x98>
    6732:	21 15       	cp	r18, r1
    6734:	31 05       	cpc	r19, r1
    6736:	19 f0       	breq	.+6      	; 0x673e <malloc+0x60>
    6738:	42 17       	cp	r20, r18
    673a:	53 07       	cpc	r21, r19
    673c:	18 f4       	brcc	.+6      	; 0x6744 <malloc+0x66>
    673e:	9a 01       	movw	r18, r20
    6740:	bd 01       	movw	r22, r26
    6742:	ef 01       	movw	r28, r30
    6744:	df 01       	movw	r26, r30
    6746:	f8 01       	movw	r30, r16
    6748:	db cf       	rjmp	.-74     	; 0x6700 <malloc+0x22>
    674a:	21 15       	cp	r18, r1
    674c:	31 05       	cpc	r19, r1
    674e:	f9 f0       	breq	.+62     	; 0x678e <malloc+0xb0>
    6750:	28 1b       	sub	r18, r24
    6752:	39 0b       	sbc	r19, r25
    6754:	24 30       	cpi	r18, 0x04	; 4
    6756:	31 05       	cpc	r19, r1
    6758:	80 f4       	brcc	.+32     	; 0x677a <malloc+0x9c>
    675a:	8a 81       	ldd	r24, Y+2	; 0x02
    675c:	9b 81       	ldd	r25, Y+3	; 0x03
    675e:	61 15       	cp	r22, r1
    6760:	71 05       	cpc	r23, r1
    6762:	21 f0       	breq	.+8      	; 0x676c <malloc+0x8e>
    6764:	fb 01       	movw	r30, r22
    6766:	93 83       	std	Z+3, r25	; 0x03
    6768:	82 83       	std	Z+2, r24	; 0x02
    676a:	04 c0       	rjmp	.+8      	; 0x6774 <malloc+0x96>
    676c:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <__flp+0x1>
    6770:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <__flp>
    6774:	fe 01       	movw	r30, r28
    6776:	32 96       	adiw	r30, 0x02	; 2
    6778:	44 c0       	rjmp	.+136    	; 0x6802 <malloc+0x124>
    677a:	fe 01       	movw	r30, r28
    677c:	e2 0f       	add	r30, r18
    677e:	f3 1f       	adc	r31, r19
    6780:	81 93       	st	Z+, r24
    6782:	91 93       	st	Z+, r25
    6784:	22 50       	subi	r18, 0x02	; 2
    6786:	31 09       	sbc	r19, r1
    6788:	39 83       	std	Y+1, r19	; 0x01
    678a:	28 83       	st	Y, r18
    678c:	3a c0       	rjmp	.+116    	; 0x6802 <malloc+0x124>
    678e:	20 91 fd 02 	lds	r18, 0x02FD	; 0x8002fd <__brkval>
    6792:	30 91 fe 02 	lds	r19, 0x02FE	; 0x8002fe <__brkval+0x1>
    6796:	23 2b       	or	r18, r19
    6798:	41 f4       	brne	.+16     	; 0x67aa <malloc+0xcc>
    679a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    679e:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    67a2:	30 93 fe 02 	sts	0x02FE, r19	; 0x8002fe <__brkval+0x1>
    67a6:	20 93 fd 02 	sts	0x02FD, r18	; 0x8002fd <__brkval>
    67aa:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
    67ae:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
    67b2:	21 15       	cp	r18, r1
    67b4:	31 05       	cpc	r19, r1
    67b6:	41 f4       	brne	.+16     	; 0x67c8 <malloc+0xea>
    67b8:	2d b7       	in	r18, 0x3d	; 61
    67ba:	3e b7       	in	r19, 0x3e	; 62
    67bc:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    67c0:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    67c4:	24 1b       	sub	r18, r20
    67c6:	35 0b       	sbc	r19, r21
    67c8:	e0 91 fd 02 	lds	r30, 0x02FD	; 0x8002fd <__brkval>
    67cc:	f0 91 fe 02 	lds	r31, 0x02FE	; 0x8002fe <__brkval+0x1>
    67d0:	e2 17       	cp	r30, r18
    67d2:	f3 07       	cpc	r31, r19
    67d4:	a0 f4       	brcc	.+40     	; 0x67fe <malloc+0x120>
    67d6:	2e 1b       	sub	r18, r30
    67d8:	3f 0b       	sbc	r19, r31
    67da:	28 17       	cp	r18, r24
    67dc:	39 07       	cpc	r19, r25
    67de:	78 f0       	brcs	.+30     	; 0x67fe <malloc+0x120>
    67e0:	ac 01       	movw	r20, r24
    67e2:	4e 5f       	subi	r20, 0xFE	; 254
    67e4:	5f 4f       	sbci	r21, 0xFF	; 255
    67e6:	24 17       	cp	r18, r20
    67e8:	35 07       	cpc	r19, r21
    67ea:	48 f0       	brcs	.+18     	; 0x67fe <malloc+0x120>
    67ec:	4e 0f       	add	r20, r30
    67ee:	5f 1f       	adc	r21, r31
    67f0:	50 93 fe 02 	sts	0x02FE, r21	; 0x8002fe <__brkval+0x1>
    67f4:	40 93 fd 02 	sts	0x02FD, r20	; 0x8002fd <__brkval>
    67f8:	81 93       	st	Z+, r24
    67fa:	91 93       	st	Z+, r25
    67fc:	02 c0       	rjmp	.+4      	; 0x6802 <malloc+0x124>
    67fe:	e0 e0       	ldi	r30, 0x00	; 0
    6800:	f0 e0       	ldi	r31, 0x00	; 0
    6802:	cf 01       	movw	r24, r30
    6804:	df 91       	pop	r29
    6806:	cf 91       	pop	r28
    6808:	1f 91       	pop	r17
    680a:	0f 91       	pop	r16
    680c:	08 95       	ret

0000680e <free>:
    680e:	cf 93       	push	r28
    6810:	df 93       	push	r29
    6812:	00 97       	sbiw	r24, 0x00	; 0
    6814:	09 f4       	brne	.+2      	; 0x6818 <free+0xa>
    6816:	81 c0       	rjmp	.+258    	; 0x691a <free+0x10c>
    6818:	fc 01       	movw	r30, r24
    681a:	32 97       	sbiw	r30, 0x02	; 2
    681c:	13 82       	std	Z+3, r1	; 0x03
    681e:	12 82       	std	Z+2, r1	; 0x02
    6820:	a0 91 ff 02 	lds	r26, 0x02FF	; 0x8002ff <__flp>
    6824:	b0 91 00 03 	lds	r27, 0x0300	; 0x800300 <__flp+0x1>
    6828:	10 97       	sbiw	r26, 0x00	; 0
    682a:	81 f4       	brne	.+32     	; 0x684c <free+0x3e>
    682c:	20 81       	ld	r18, Z
    682e:	31 81       	ldd	r19, Z+1	; 0x01
    6830:	82 0f       	add	r24, r18
    6832:	93 1f       	adc	r25, r19
    6834:	20 91 fd 02 	lds	r18, 0x02FD	; 0x8002fd <__brkval>
    6838:	30 91 fe 02 	lds	r19, 0x02FE	; 0x8002fe <__brkval+0x1>
    683c:	28 17       	cp	r18, r24
    683e:	39 07       	cpc	r19, r25
    6840:	51 f5       	brne	.+84     	; 0x6896 <free+0x88>
    6842:	f0 93 fe 02 	sts	0x02FE, r31	; 0x8002fe <__brkval+0x1>
    6846:	e0 93 fd 02 	sts	0x02FD, r30	; 0x8002fd <__brkval>
    684a:	67 c0       	rjmp	.+206    	; 0x691a <free+0x10c>
    684c:	ed 01       	movw	r28, r26
    684e:	20 e0       	ldi	r18, 0x00	; 0
    6850:	30 e0       	ldi	r19, 0x00	; 0
    6852:	ce 17       	cp	r28, r30
    6854:	df 07       	cpc	r29, r31
    6856:	40 f4       	brcc	.+16     	; 0x6868 <free+0x5a>
    6858:	4a 81       	ldd	r20, Y+2	; 0x02
    685a:	5b 81       	ldd	r21, Y+3	; 0x03
    685c:	9e 01       	movw	r18, r28
    685e:	41 15       	cp	r20, r1
    6860:	51 05       	cpc	r21, r1
    6862:	f1 f0       	breq	.+60     	; 0x68a0 <free+0x92>
    6864:	ea 01       	movw	r28, r20
    6866:	f5 cf       	rjmp	.-22     	; 0x6852 <free+0x44>
    6868:	d3 83       	std	Z+3, r29	; 0x03
    686a:	c2 83       	std	Z+2, r28	; 0x02
    686c:	40 81       	ld	r20, Z
    686e:	51 81       	ldd	r21, Z+1	; 0x01
    6870:	84 0f       	add	r24, r20
    6872:	95 1f       	adc	r25, r21
    6874:	c8 17       	cp	r28, r24
    6876:	d9 07       	cpc	r29, r25
    6878:	59 f4       	brne	.+22     	; 0x6890 <free+0x82>
    687a:	88 81       	ld	r24, Y
    687c:	99 81       	ldd	r25, Y+1	; 0x01
    687e:	84 0f       	add	r24, r20
    6880:	95 1f       	adc	r25, r21
    6882:	02 96       	adiw	r24, 0x02	; 2
    6884:	91 83       	std	Z+1, r25	; 0x01
    6886:	80 83       	st	Z, r24
    6888:	8a 81       	ldd	r24, Y+2	; 0x02
    688a:	9b 81       	ldd	r25, Y+3	; 0x03
    688c:	93 83       	std	Z+3, r25	; 0x03
    688e:	82 83       	std	Z+2, r24	; 0x02
    6890:	21 15       	cp	r18, r1
    6892:	31 05       	cpc	r19, r1
    6894:	29 f4       	brne	.+10     	; 0x68a0 <free+0x92>
    6896:	f0 93 00 03 	sts	0x0300, r31	; 0x800300 <__flp+0x1>
    689a:	e0 93 ff 02 	sts	0x02FF, r30	; 0x8002ff <__flp>
    689e:	3d c0       	rjmp	.+122    	; 0x691a <free+0x10c>
    68a0:	e9 01       	movw	r28, r18
    68a2:	fb 83       	std	Y+3, r31	; 0x03
    68a4:	ea 83       	std	Y+2, r30	; 0x02
    68a6:	49 91       	ld	r20, Y+
    68a8:	59 91       	ld	r21, Y+
    68aa:	c4 0f       	add	r28, r20
    68ac:	d5 1f       	adc	r29, r21
    68ae:	ec 17       	cp	r30, r28
    68b0:	fd 07       	cpc	r31, r29
    68b2:	61 f4       	brne	.+24     	; 0x68cc <free+0xbe>
    68b4:	80 81       	ld	r24, Z
    68b6:	91 81       	ldd	r25, Z+1	; 0x01
    68b8:	84 0f       	add	r24, r20
    68ba:	95 1f       	adc	r25, r21
    68bc:	02 96       	adiw	r24, 0x02	; 2
    68be:	e9 01       	movw	r28, r18
    68c0:	99 83       	std	Y+1, r25	; 0x01
    68c2:	88 83       	st	Y, r24
    68c4:	82 81       	ldd	r24, Z+2	; 0x02
    68c6:	93 81       	ldd	r25, Z+3	; 0x03
    68c8:	9b 83       	std	Y+3, r25	; 0x03
    68ca:	8a 83       	std	Y+2, r24	; 0x02
    68cc:	e0 e0       	ldi	r30, 0x00	; 0
    68ce:	f0 e0       	ldi	r31, 0x00	; 0
    68d0:	12 96       	adiw	r26, 0x02	; 2
    68d2:	8d 91       	ld	r24, X+
    68d4:	9c 91       	ld	r25, X
    68d6:	13 97       	sbiw	r26, 0x03	; 3
    68d8:	00 97       	sbiw	r24, 0x00	; 0
    68da:	19 f0       	breq	.+6      	; 0x68e2 <free+0xd4>
    68dc:	fd 01       	movw	r30, r26
    68de:	dc 01       	movw	r26, r24
    68e0:	f7 cf       	rjmp	.-18     	; 0x68d0 <free+0xc2>
    68e2:	8d 91       	ld	r24, X+
    68e4:	9c 91       	ld	r25, X
    68e6:	11 97       	sbiw	r26, 0x01	; 1
    68e8:	9d 01       	movw	r18, r26
    68ea:	2e 5f       	subi	r18, 0xFE	; 254
    68ec:	3f 4f       	sbci	r19, 0xFF	; 255
    68ee:	82 0f       	add	r24, r18
    68f0:	93 1f       	adc	r25, r19
    68f2:	20 91 fd 02 	lds	r18, 0x02FD	; 0x8002fd <__brkval>
    68f6:	30 91 fe 02 	lds	r19, 0x02FE	; 0x8002fe <__brkval+0x1>
    68fa:	28 17       	cp	r18, r24
    68fc:	39 07       	cpc	r19, r25
    68fe:	69 f4       	brne	.+26     	; 0x691a <free+0x10c>
    6900:	30 97       	sbiw	r30, 0x00	; 0
    6902:	29 f4       	brne	.+10     	; 0x690e <free+0x100>
    6904:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <__flp+0x1>
    6908:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <__flp>
    690c:	02 c0       	rjmp	.+4      	; 0x6912 <free+0x104>
    690e:	13 82       	std	Z+3, r1	; 0x03
    6910:	12 82       	std	Z+2, r1	; 0x02
    6912:	b0 93 fe 02 	sts	0x02FE, r27	; 0x8002fe <__brkval+0x1>
    6916:	a0 93 fd 02 	sts	0x02FD, r26	; 0x8002fd <__brkval>
    691a:	df 91       	pop	r29
    691c:	cf 91       	pop	r28
    691e:	08 95       	ret

00006920 <strcmp>:
    6920:	fb 01       	movw	r30, r22
    6922:	dc 01       	movw	r26, r24
    6924:	8d 91       	ld	r24, X+
    6926:	01 90       	ld	r0, Z+
    6928:	80 19       	sub	r24, r0
    692a:	01 10       	cpse	r0, r1
    692c:	d9 f3       	breq	.-10     	; 0x6924 <strcmp+0x4>
    692e:	99 0b       	sbc	r25, r25
    6930:	08 95       	ret

00006932 <strcpy>:
    6932:	fb 01       	movw	r30, r22
    6934:	dc 01       	movw	r26, r24
    6936:	01 90       	ld	r0, Z+
    6938:	0d 92       	st	X+, r0
    693a:	00 20       	and	r0, r0
    693c:	e1 f7       	brne	.-8      	; 0x6936 <strcpy+0x4>
    693e:	08 95       	ret

00006940 <strncpy>:
    6940:	fb 01       	movw	r30, r22
    6942:	dc 01       	movw	r26, r24
    6944:	41 50       	subi	r20, 0x01	; 1
    6946:	50 40       	sbci	r21, 0x00	; 0
    6948:	48 f0       	brcs	.+18     	; 0x695c <strncpy+0x1c>
    694a:	01 90       	ld	r0, Z+
    694c:	0d 92       	st	X+, r0
    694e:	00 20       	and	r0, r0
    6950:	c9 f7       	brne	.-14     	; 0x6944 <strncpy+0x4>
    6952:	01 c0       	rjmp	.+2      	; 0x6956 <strncpy+0x16>
    6954:	1d 92       	st	X+, r1
    6956:	41 50       	subi	r20, 0x01	; 1
    6958:	50 40       	sbci	r21, 0x00	; 0
    695a:	e0 f7       	brcc	.-8      	; 0x6954 <strncpy+0x14>
    695c:	08 95       	ret

0000695e <strstr>:
    695e:	fb 01       	movw	r30, r22
    6960:	51 91       	ld	r21, Z+
    6962:	55 23       	and	r21, r21
    6964:	a9 f0       	breq	.+42     	; 0x6990 <strstr+0x32>
    6966:	bf 01       	movw	r22, r30
    6968:	dc 01       	movw	r26, r24
    696a:	4d 91       	ld	r20, X+
    696c:	45 17       	cp	r20, r21
    696e:	41 11       	cpse	r20, r1
    6970:	e1 f7       	brne	.-8      	; 0x696a <strstr+0xc>
    6972:	59 f4       	brne	.+22     	; 0x698a <strstr+0x2c>
    6974:	cd 01       	movw	r24, r26
    6976:	01 90       	ld	r0, Z+
    6978:	00 20       	and	r0, r0
    697a:	49 f0       	breq	.+18     	; 0x698e <strstr+0x30>
    697c:	4d 91       	ld	r20, X+
    697e:	40 15       	cp	r20, r0
    6980:	41 11       	cpse	r20, r1
    6982:	c9 f3       	breq	.-14     	; 0x6976 <strstr+0x18>
    6984:	fb 01       	movw	r30, r22
    6986:	41 11       	cpse	r20, r1
    6988:	ef cf       	rjmp	.-34     	; 0x6968 <strstr+0xa>
    698a:	81 e0       	ldi	r24, 0x01	; 1
    698c:	90 e0       	ldi	r25, 0x00	; 0
    698e:	01 97       	sbiw	r24, 0x01	; 1
    6990:	08 95       	ret

00006992 <_exit>:
    6992:	f8 94       	cli

00006994 <__stop_program>:
    6994:	ff cf       	rjmp	.-2      	; 0x6994 <__stop_program>
