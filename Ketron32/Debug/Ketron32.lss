
Ketron32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007bd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  00007bd8  00007c6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002fe  0080018a  0080018a  00007d96  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00007d96  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007dc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007a0  00000000  00000000  00007e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006599  00000000  00000000  000085a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ae0  00000000  00000000  0000eb3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005ec9  00000000  00000000  0001061d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001e94  00000000  00000000  000164e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000166f  00000000  00000000  0001837c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000409a  00000000  00000000  000199eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006c0  00000000  00000000  0001da85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__ctors_end>
       4:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
       8:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
       c:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
      10:	0c 94 53 3b 	jmp	0x76a6	; 0x76a6 <__vector_4>
      14:	0c 94 2d 3a 	jmp	0x745a	; 0x745a <__vector_5>
      18:	0c 94 1c 3b 	jmp	0x7638	; 0x7638 <__vector_6>
      1c:	0c 94 ae 3a 	jmp	0x755c	; 0x755c <__vector_7>
      20:	0c 94 e5 3a 	jmp	0x75ca	; 0x75ca <__vector_8>
      24:	0c 94 f6 39 	jmp	0x73ec	; 0x73ec <__vector_9>
      28:	0c 94 77 3a 	jmp	0x74ee	; 0x74ee <__vector_10>
      2c:	0c 94 99 39 	jmp	0x7332	; 0x7332 <__vector_11>
      30:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
      34:	0c 94 f5 3c 	jmp	0x79ea	; 0x79ea <__vector_13>
      38:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
      3c:	0c 94 aa 3c 	jmp	0x7954	; 0x7954 <__vector_15>
      40:	0c 94 bc 01 	jmp	0x378	; 0x378 <__vector_16>
      44:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
      48:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
      4c:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
      50:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
      54:	d1 31       	cpi	r29, 0x11	; 17
      56:	d3 31       	cpi	r29, 0x13	; 19
      58:	d3 31       	cpi	r29, 0x13	; 19
      5a:	d3 31       	cpi	r29, 0x13	; 19
      5c:	d3 31       	cpi	r29, 0x13	; 19
      5e:	d3 31       	cpi	r29, 0x13	; 19
      60:	d3 31       	cpi	r29, 0x13	; 19
      62:	d3 31       	cpi	r29, 0x13	; 19
      64:	d3 31       	cpi	r29, 0x13	; 19
      66:	d3 31       	cpi	r29, 0x13	; 19
      68:	d3 31       	cpi	r29, 0x13	; 19
      6a:	d3 31       	cpi	r29, 0x13	; 19
      6c:	d3 31       	cpi	r29, 0x13	; 19
      6e:	d3 31       	cpi	r29, 0x13	; 19
      70:	d3 31       	cpi	r29, 0x13	; 19
      72:	d3 31       	cpi	r29, 0x13	; 19
      74:	d1 31       	cpi	r29, 0x11	; 17
      76:	d3 31       	cpi	r29, 0x13	; 19
      78:	d3 31       	cpi	r29, 0x13	; 19
      7a:	d3 31       	cpi	r29, 0x13	; 19
      7c:	d3 31       	cpi	r29, 0x13	; 19
      7e:	d3 31       	cpi	r29, 0x13	; 19
      80:	d3 31       	cpi	r29, 0x13	; 19
      82:	d3 31       	cpi	r29, 0x13	; 19
      84:	d3 31       	cpi	r29, 0x13	; 19
      86:	d3 31       	cpi	r29, 0x13	; 19
      88:	d3 31       	cpi	r29, 0x13	; 19
      8a:	d3 31       	cpi	r29, 0x13	; 19
      8c:	d3 31       	cpi	r29, 0x13	; 19
      8e:	d3 31       	cpi	r29, 0x13	; 19
      90:	d3 31       	cpi	r29, 0x13	; 19
      92:	d3 31       	cpi	r29, 0x13	; 19
      94:	d1 31       	cpi	r29, 0x11	; 17
      96:	d3 31       	cpi	r29, 0x13	; 19
      98:	d3 31       	cpi	r29, 0x13	; 19
      9a:	d3 31       	cpi	r29, 0x13	; 19
      9c:	d3 31       	cpi	r29, 0x13	; 19
      9e:	d3 31       	cpi	r29, 0x13	; 19
      a0:	d3 31       	cpi	r29, 0x13	; 19
      a2:	d3 31       	cpi	r29, 0x13	; 19
      a4:	d3 31       	cpi	r29, 0x13	; 19
      a6:	d3 31       	cpi	r29, 0x13	; 19
      a8:	d3 31       	cpi	r29, 0x13	; 19
      aa:	d3 31       	cpi	r29, 0x13	; 19
      ac:	d3 31       	cpi	r29, 0x13	; 19
      ae:	d3 31       	cpi	r29, 0x13	; 19
      b0:	d3 31       	cpi	r29, 0x13	; 19
      b2:	d3 31       	cpi	r29, 0x13	; 19
      b4:	d1 31       	cpi	r29, 0x11	; 17
      b6:	d3 31       	cpi	r29, 0x13	; 19
      b8:	d3 31       	cpi	r29, 0x13	; 19
      ba:	d3 31       	cpi	r29, 0x13	; 19
      bc:	d3 31       	cpi	r29, 0x13	; 19
      be:	d3 31       	cpi	r29, 0x13	; 19
      c0:	d3 31       	cpi	r29, 0x13	; 19
      c2:	d3 31       	cpi	r29, 0x13	; 19
      c4:	d3 31       	cpi	r29, 0x13	; 19
      c6:	d3 31       	cpi	r29, 0x13	; 19
      c8:	d3 31       	cpi	r29, 0x13	; 19
      ca:	d3 31       	cpi	r29, 0x13	; 19
      cc:	d3 31       	cpi	r29, 0x13	; 19
      ce:	d3 31       	cpi	r29, 0x13	; 19
      d0:	d3 31       	cpi	r29, 0x13	; 19
      d2:	d3 31       	cpi	r29, 0x13	; 19
      d4:	cf 31       	cpi	r28, 0x1F	; 31
      d6:	d3 31       	cpi	r29, 0x13	; 19
      d8:	d3 31       	cpi	r29, 0x13	; 19
      da:	d3 31       	cpi	r29, 0x13	; 19
      dc:	d3 31       	cpi	r29, 0x13	; 19
      de:	d3 31       	cpi	r29, 0x13	; 19
      e0:	d3 31       	cpi	r29, 0x13	; 19
      e2:	d3 31       	cpi	r29, 0x13	; 19
      e4:	d3 31       	cpi	r29, 0x13	; 19
      e6:	d3 31       	cpi	r29, 0x13	; 19
      e8:	d3 31       	cpi	r29, 0x13	; 19
      ea:	d3 31       	cpi	r29, 0x13	; 19
      ec:	d3 31       	cpi	r29, 0x13	; 19
      ee:	d3 31       	cpi	r29, 0x13	; 19
      f0:	d3 31       	cpi	r29, 0x13	; 19
      f2:	d3 31       	cpi	r29, 0x13	; 19
      f4:	cf 31       	cpi	r28, 0x1F	; 31
      f6:	d3 31       	cpi	r29, 0x13	; 19
      f8:	d3 31       	cpi	r29, 0x13	; 19
      fa:	d3 31       	cpi	r29, 0x13	; 19
      fc:	d3 31       	cpi	r29, 0x13	; 19
      fe:	d3 31       	cpi	r29, 0x13	; 19
     100:	d3 31       	cpi	r29, 0x13	; 19
     102:	d3 31       	cpi	r29, 0x13	; 19
     104:	d3 31       	cpi	r29, 0x13	; 19
     106:	d3 31       	cpi	r29, 0x13	; 19
     108:	d3 31       	cpi	r29, 0x13	; 19
     10a:	d3 31       	cpi	r29, 0x13	; 19
     10c:	d3 31       	cpi	r29, 0x13	; 19
     10e:	d3 31       	cpi	r29, 0x13	; 19
     110:	d3 31       	cpi	r29, 0x13	; 19
     112:	d3 31       	cpi	r29, 0x13	; 19
     114:	d1 31       	cpi	r29, 0x11	; 17
     116:	d3 31       	cpi	r29, 0x13	; 19
     118:	d3 31       	cpi	r29, 0x13	; 19
     11a:	d3 31       	cpi	r29, 0x13	; 19
     11c:	d3 31       	cpi	r29, 0x13	; 19
     11e:	d3 31       	cpi	r29, 0x13	; 19
     120:	d3 31       	cpi	r29, 0x13	; 19
     122:	d3 31       	cpi	r29, 0x13	; 19
     124:	d3 31       	cpi	r29, 0x13	; 19
     126:	d3 31       	cpi	r29, 0x13	; 19
     128:	d3 31       	cpi	r29, 0x13	; 19
     12a:	d3 31       	cpi	r29, 0x13	; 19
     12c:	d3 31       	cpi	r29, 0x13	; 19
     12e:	d3 31       	cpi	r29, 0x13	; 19
     130:	d3 31       	cpi	r29, 0x13	; 19
     132:	d3 31       	cpi	r29, 0x13	; 19
     134:	d3 31       	cpi	r29, 0x13	; 19
     136:	cf 31       	cpi	r28, 0x1F	; 31
     138:	d1 31       	cpi	r29, 0x11	; 17
     13a:	cf 31       	cpi	r28, 0x1F	; 31
     13c:	d3 31       	cpi	r29, 0x13	; 19
     13e:	d3 31       	cpi	r29, 0x13	; 19
     140:	cd 31       	cpi	r28, 0x1D	; 29
     142:	d3 31       	cpi	r29, 0x13	; 19
     144:	cd 31       	cpi	r28, 0x1D	; 29
     146:	cd 31       	cpi	r28, 0x1D	; 29
     148:	cd 31       	cpi	r28, 0x1D	; 29
     14a:	cd 31       	cpi	r28, 0x1D	; 29
     14c:	cd 31       	cpi	r28, 0x1D	; 29
     14e:	d3 31       	cpi	r29, 0x13	; 19
     150:	cd 31       	cpi	r28, 0x1D	; 29
     152:	cd 31       	cpi	r28, 0x1D	; 29
     154:	d0 36       	cpi	r29, 0x60	; 96
     156:	d9 36       	cpi	r29, 0x69	; 105
     158:	5b 37       	cpi	r21, 0x7B	; 123
     15a:	64 37       	cpi	r22, 0x74	; 116
     15c:	7e 38       	cpi	r23, 0x8E	; 142
     15e:	7e 38       	cpi	r23, 0x8E	; 142
     160:	7e 38       	cpi	r23, 0x8E	; 142
     162:	7e 38       	cpi	r23, 0x8E	; 142
     164:	7e 38       	cpi	r23, 0x8E	; 142
     166:	7e 38       	cpi	r23, 0x8E	; 142
     168:	1d 38       	cpi	r17, 0x8D	; 141
     16a:	25 38       	cpi	r18, 0x85	; 133
     16c:	39 38       	cpi	r19, 0x89	; 137
     16e:	4d 38       	cpi	r20, 0x8D	; 141
     170:	6a 38       	cpi	r22, 0x8A	; 138

00000172 <LcdCustomChar>:
     172:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     182:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     192:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     1a2:	03 07 0f 1f 0f 07 03 00 00 1f 1f 1f 1f 1f 1f 00     ................
     1b2:	1b 1b 1b 1b 1b 1b 1b 00 18 1c 1e 1f 1e 1c 18 00     ................
     1c2:	00 04 04 0e 0e 1f 1f 00 00 1f 1f 0e 0e 04 04 00     ................
	...
     1da:	00 0e 19 15 13 0e 00 00 00 0e 15 15 15 0e 00 00     ................
     1ea:	00 0e 13 15 19 0e 00 00 00 0e 11 1f 11 0e 00 00     ................

000001fa <__ctors_end>:
     1fa:	11 24       	eor	r1, r1
     1fc:	1f be       	out	0x3f, r1	; 63
     1fe:	cf e5       	ldi	r28, 0x5F	; 95
     200:	d8 e0       	ldi	r29, 0x08	; 8
     202:	de bf       	out	0x3e, r29	; 62
     204:	cd bf       	out	0x3d, r28	; 61

00000206 <__do_copy_data>:
     206:	11 e0       	ldi	r17, 0x01	; 1
     208:	a0 e6       	ldi	r26, 0x60	; 96
     20a:	b0 e0       	ldi	r27, 0x00	; 0
     20c:	e8 ed       	ldi	r30, 0xD8	; 216
     20e:	fb e7       	ldi	r31, 0x7B	; 123
     210:	02 c0       	rjmp	.+4      	; 0x216 <__do_copy_data+0x10>
     212:	05 90       	lpm	r0, Z+
     214:	0d 92       	st	X+, r0
     216:	aa 38       	cpi	r26, 0x8A	; 138
     218:	b1 07       	cpc	r27, r17
     21a:	d9 f7       	brne	.-10     	; 0x212 <__do_copy_data+0xc>

0000021c <__do_clear_bss>:
     21c:	24 e0       	ldi	r18, 0x04	; 4
     21e:	aa e8       	ldi	r26, 0x8A	; 138
     220:	b1 e0       	ldi	r27, 0x01	; 1
     222:	01 c0       	rjmp	.+2      	; 0x226 <.do_clear_bss_start>

00000224 <.do_clear_bss_loop>:
     224:	1d 92       	st	X+, r1

00000226 <.do_clear_bss_start>:
     226:	a8 38       	cpi	r26, 0x88	; 136
     228:	b2 07       	cpc	r27, r18
     22a:	e1 f7       	brne	.-8      	; 0x224 <.do_clear_bss_loop>
     22c:	0e 94 b5 23 	call	0x476a	; 0x476a <main>
     230:	0c 94 ea 3d 	jmp	0x7bd4	; 0x7bd4 <_exit>

00000234 <__bad_interrupt>:
     234:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000238 <a2dInit>:
// starts conversion, waits until conversion is done, and returns result
unsigned char a2dConvert8bit(unsigned char ch)
{
	// do 10-bit conversion and return highest 8 bits
	return a2dConvert10bit(ch)>>2;			// return ADC MSB byte
}
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	cd b7       	in	r28, 0x3d	; 61
     23e:	de b7       	in	r29, 0x3e	; 62
     240:	86 e2       	ldi	r24, 0x26	; 38
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	26 e2       	ldi	r18, 0x26	; 38
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	f9 01       	movw	r30, r18
     24a:	20 81       	ld	r18, Z
     24c:	20 68       	ori	r18, 0x80	; 128
     24e:	fc 01       	movw	r30, r24
     250:	20 83       	st	Z, r18
     252:	86 e2       	ldi	r24, 0x26	; 38
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	26 e2       	ldi	r18, 0x26	; 38
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	f9 01       	movw	r30, r18
     25c:	20 81       	ld	r18, Z
     25e:	2f 7d       	andi	r18, 0xDF	; 223
     260:	fc 01       	movw	r30, r24
     262:	20 83       	st	Z, r18
     264:	86 e0       	ldi	r24, 0x06	; 6
     266:	0e 94 51 01 	call	0x2a2	; 0x2a2 <a2dSetPrescaler>
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <a2dSetReference>
     270:	87 e2       	ldi	r24, 0x27	; 39
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	27 e2       	ldi	r18, 0x27	; 39
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	f9 01       	movw	r30, r18
     27a:	20 81       	ld	r18, Z
     27c:	2f 7d       	andi	r18, 0xDF	; 223
     27e:	fc 01       	movw	r30, r24
     280:	20 83       	st	Z, r18
     282:	86 e2       	ldi	r24, 0x26	; 38
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	26 e2       	ldi	r18, 0x26	; 38
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	f9 01       	movw	r30, r18
     28c:	20 81       	ld	r18, Z
     28e:	28 60       	ori	r18, 0x08	; 8
     290:	fc 01       	movw	r30, r24
     292:	20 83       	st	Z, r18
     294:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <a2dCompleteFlag>
     298:	78 94       	sei
     29a:	00 00       	nop
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	08 95       	ret

000002a2 <a2dSetPrescaler>:
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	1f 92       	push	r1
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
     2ac:	89 83       	std	Y+1, r24	; 0x01
     2ae:	86 e2       	ldi	r24, 0x26	; 38
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	26 e2       	ldi	r18, 0x26	; 38
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	f9 01       	movw	r30, r18
     2b8:	20 81       	ld	r18, Z
     2ba:	32 2f       	mov	r19, r18
     2bc:	38 7f       	andi	r19, 0xF8	; 248
     2be:	29 81       	ldd	r18, Y+1	; 0x01
     2c0:	23 2b       	or	r18, r19
     2c2:	fc 01       	movw	r30, r24
     2c4:	20 83       	st	Z, r18
     2c6:	00 00       	nop
     2c8:	0f 90       	pop	r0
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	08 95       	ret

000002d0 <a2dSetReference>:
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	1f 92       	push	r1
     2d6:	cd b7       	in	r28, 0x3d	; 61
     2d8:	de b7       	in	r29, 0x3e	; 62
     2da:	89 83       	std	Y+1, r24	; 0x01
     2dc:	87 e2       	ldi	r24, 0x27	; 39
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	27 e2       	ldi	r18, 0x27	; 39
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	f9 01       	movw	r30, r18
     2e6:	20 81       	ld	r18, Z
     2e8:	42 2f       	mov	r20, r18
     2ea:	4f 73       	andi	r20, 0x3F	; 63
     2ec:	29 81       	ldd	r18, Y+1	; 0x01
     2ee:	22 2f       	mov	r18, r18
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	00 24       	eor	r0, r0
     2f4:	36 95       	lsr	r19
     2f6:	27 95       	ror	r18
     2f8:	07 94       	ror	r0
     2fa:	36 95       	lsr	r19
     2fc:	27 95       	ror	r18
     2fe:	07 94       	ror	r0
     300:	32 2f       	mov	r19, r18
     302:	20 2d       	mov	r18, r0
     304:	24 2b       	or	r18, r20
     306:	fc 01       	movw	r30, r24
     308:	20 83       	st	Z, r18
     30a:	00 00       	nop
     30c:	0f 90       	pop	r0
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	08 95       	ret

00000314 <a2dSetChannel>:
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	1f 92       	push	r1
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	89 83       	std	Y+1, r24	; 0x01
     320:	87 e2       	ldi	r24, 0x27	; 39
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	27 e2       	ldi	r18, 0x27	; 39
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	f9 01       	movw	r30, r18
     32a:	20 81       	ld	r18, Z
     32c:	32 2f       	mov	r19, r18
     32e:	30 7e       	andi	r19, 0xE0	; 224
     330:	29 81       	ldd	r18, Y+1	; 0x01
     332:	2f 71       	andi	r18, 0x1F	; 31
     334:	23 2b       	or	r18, r19
     336:	fc 01       	movw	r30, r24
     338:	20 83       	st	Z, r18
     33a:	00 00       	nop
     33c:	0f 90       	pop	r0
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	08 95       	ret

00000344 <a2dStartConvert>:
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	cd b7       	in	r28, 0x3d	; 61
     34a:	de b7       	in	r29, 0x3e	; 62
     34c:	86 e2       	ldi	r24, 0x26	; 38
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	26 e2       	ldi	r18, 0x26	; 38
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	f9 01       	movw	r30, r18
     356:	20 81       	ld	r18, Z
     358:	20 61       	ori	r18, 0x10	; 16
     35a:	fc 01       	movw	r30, r24
     35c:	20 83       	st	Z, r18
     35e:	86 e2       	ldi	r24, 0x26	; 38
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	26 e2       	ldi	r18, 0x26	; 38
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	f9 01       	movw	r30, r18
     368:	20 81       	ld	r18, Z
     36a:	20 64       	ori	r18, 0x40	; 64
     36c:	fc 01       	movw	r30, r24
     36e:	20 83       	st	Z, r18
     370:	00 00       	nop
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	08 95       	ret

00000378 <__vector_16>:

//! Interrupt handler for ADC complete interrupt.
SIGNAL(ADC_vect)
{
     378:	1f 92       	push	r1
     37a:	0f 92       	push	r0
     37c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     380:	0f 92       	push	r0
     382:	11 24       	eor	r1, r1
     384:	8f 93       	push	r24
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
	// set the a2d conversion flag to indicate "complete"
	a2dCompleteFlag = TRUE;
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <a2dCompleteFlag>
	
}
     394:	00 00       	nop
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	8f 91       	pop	r24
     39c:	0f 90       	pop	r0
     39e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     3a2:	0f 90       	pop	r0
     3a4:	1f 90       	pop	r1
     3a6:	18 95       	reti

000003a8 <bufferInit>:
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
	return data;
}
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
     3b0:	27 97       	sbiw	r28, 0x07	; 7
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	f8 94       	cli
     3b6:	de bf       	out	0x3e, r29	; 62
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	cd bf       	out	0x3d, r28	; 61
     3bc:	9b 83       	std	Y+3, r25	; 0x03
     3be:	8a 83       	std	Y+2, r24	; 0x02
     3c0:	7d 83       	std	Y+5, r23	; 0x05
     3c2:	6c 83       	std	Y+4, r22	; 0x04
     3c4:	5f 83       	std	Y+7, r21	; 0x07
     3c6:	4e 83       	std	Y+6, r20	; 0x06
     3c8:	8f e5       	ldi	r24, 0x5F	; 95
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	fc 01       	movw	r30, r24
     3ce:	80 81       	ld	r24, Z
     3d0:	89 83       	std	Y+1, r24	; 0x01
     3d2:	f8 94       	cli
     3d4:	8a 81       	ldd	r24, Y+2	; 0x02
     3d6:	9b 81       	ldd	r25, Y+3	; 0x03
     3d8:	2c 81       	ldd	r18, Y+4	; 0x04
     3da:	3d 81       	ldd	r19, Y+5	; 0x05
     3dc:	fc 01       	movw	r30, r24
     3de:	31 83       	std	Z+1, r19	; 0x01
     3e0:	20 83       	st	Z, r18
     3e2:	8a 81       	ldd	r24, Y+2	; 0x02
     3e4:	9b 81       	ldd	r25, Y+3	; 0x03
     3e6:	2e 81       	ldd	r18, Y+6	; 0x06
     3e8:	3f 81       	ldd	r19, Y+7	; 0x07
     3ea:	fc 01       	movw	r30, r24
     3ec:	33 83       	std	Z+3, r19	; 0x03
     3ee:	22 83       	std	Z+2, r18	; 0x02
     3f0:	8a 81       	ldd	r24, Y+2	; 0x02
     3f2:	9b 81       	ldd	r25, Y+3	; 0x03
     3f4:	fc 01       	movw	r30, r24
     3f6:	17 82       	std	Z+7, r1	; 0x07
     3f8:	16 82       	std	Z+6, r1	; 0x06
     3fa:	8a 81       	ldd	r24, Y+2	; 0x02
     3fc:	9b 81       	ldd	r25, Y+3	; 0x03
     3fe:	fc 01       	movw	r30, r24
     400:	15 82       	std	Z+5, r1	; 0x05
     402:	14 82       	std	Z+4, r1	; 0x04
     404:	8f e5       	ldi	r24, 0x5F	; 95
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	29 81       	ldd	r18, Y+1	; 0x01
     40a:	fc 01       	movw	r30, r24
     40c:	20 83       	st	Z, r18
     40e:	00 00       	nop
     410:	27 96       	adiw	r28, 0x07	; 7
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	f8 94       	cli
     416:	de bf       	out	0x3e, r29	; 62
     418:	0f be       	out	0x3f, r0	; 63
     41a:	cd bf       	out	0x3d, r28	; 61
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	08 95       	ret

00000422 <bufferGetFromFront>:
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	00 d0       	rcall	.+0      	; 0x428 <bufferGetFromFront+0x6>
     428:	00 d0       	rcall	.+0      	; 0x42a <bufferGetFromFront+0x8>
     42a:	cd b7       	in	r28, 0x3d	; 61
     42c:	de b7       	in	r29, 0x3e	; 62
     42e:	9c 83       	std	Y+4, r25	; 0x04
     430:	8b 83       	std	Y+3, r24	; 0x03
     432:	19 82       	std	Y+1, r1	; 0x01
     434:	8f e5       	ldi	r24, 0x5F	; 95
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	fc 01       	movw	r30, r24
     43a:	80 81       	ld	r24, Z
     43c:	8a 83       	std	Y+2, r24	; 0x02
     43e:	f8 94       	cli
     440:	8b 81       	ldd	r24, Y+3	; 0x03
     442:	9c 81       	ldd	r25, Y+4	; 0x04
     444:	fc 01       	movw	r30, r24
     446:	84 81       	ldd	r24, Z+4	; 0x04
     448:	95 81       	ldd	r25, Z+5	; 0x05
     44a:	89 2b       	or	r24, r25
     44c:	09 f4       	brne	.+2      	; 0x450 <bufferGetFromFront+0x2e>
     44e:	47 c0       	rjmp	.+142    	; 0x4de <bufferGetFromFront+0xbc>
     450:	8b 81       	ldd	r24, Y+3	; 0x03
     452:	9c 81       	ldd	r25, Y+4	; 0x04
     454:	fc 01       	movw	r30, r24
     456:	20 81       	ld	r18, Z
     458:	31 81       	ldd	r19, Z+1	; 0x01
     45a:	8b 81       	ldd	r24, Y+3	; 0x03
     45c:	9c 81       	ldd	r25, Y+4	; 0x04
     45e:	fc 01       	movw	r30, r24
     460:	86 81       	ldd	r24, Z+6	; 0x06
     462:	97 81       	ldd	r25, Z+7	; 0x07
     464:	82 0f       	add	r24, r18
     466:	93 1f       	adc	r25, r19
     468:	fc 01       	movw	r30, r24
     46a:	80 81       	ld	r24, Z
     46c:	89 83       	std	Y+1, r24	; 0x01
     46e:	8b 81       	ldd	r24, Y+3	; 0x03
     470:	9c 81       	ldd	r25, Y+4	; 0x04
     472:	fc 01       	movw	r30, r24
     474:	86 81       	ldd	r24, Z+6	; 0x06
     476:	97 81       	ldd	r25, Z+7	; 0x07
     478:	9c 01       	movw	r18, r24
     47a:	2f 5f       	subi	r18, 0xFF	; 255
     47c:	3f 4f       	sbci	r19, 0xFF	; 255
     47e:	8b 81       	ldd	r24, Y+3	; 0x03
     480:	9c 81       	ldd	r25, Y+4	; 0x04
     482:	fc 01       	movw	r30, r24
     484:	37 83       	std	Z+7, r19	; 0x07
     486:	26 83       	std	Z+6, r18	; 0x06
     488:	8b 81       	ldd	r24, Y+3	; 0x03
     48a:	9c 81       	ldd	r25, Y+4	; 0x04
     48c:	fc 01       	movw	r30, r24
     48e:	26 81       	ldd	r18, Z+6	; 0x06
     490:	37 81       	ldd	r19, Z+7	; 0x07
     492:	8b 81       	ldd	r24, Y+3	; 0x03
     494:	9c 81       	ldd	r25, Y+4	; 0x04
     496:	fc 01       	movw	r30, r24
     498:	82 81       	ldd	r24, Z+2	; 0x02
     49a:	93 81       	ldd	r25, Z+3	; 0x03
     49c:	28 17       	cp	r18, r24
     49e:	39 07       	cpc	r19, r25
     4a0:	88 f0       	brcs	.+34     	; 0x4c4 <bufferGetFromFront+0xa2>
     4a2:	8b 81       	ldd	r24, Y+3	; 0x03
     4a4:	9c 81       	ldd	r25, Y+4	; 0x04
     4a6:	fc 01       	movw	r30, r24
     4a8:	26 81       	ldd	r18, Z+6	; 0x06
     4aa:	37 81       	ldd	r19, Z+7	; 0x07
     4ac:	8b 81       	ldd	r24, Y+3	; 0x03
     4ae:	9c 81       	ldd	r25, Y+4	; 0x04
     4b0:	fc 01       	movw	r30, r24
     4b2:	82 81       	ldd	r24, Z+2	; 0x02
     4b4:	93 81       	ldd	r25, Z+3	; 0x03
     4b6:	28 1b       	sub	r18, r24
     4b8:	39 0b       	sbc	r19, r25
     4ba:	8b 81       	ldd	r24, Y+3	; 0x03
     4bc:	9c 81       	ldd	r25, Y+4	; 0x04
     4be:	fc 01       	movw	r30, r24
     4c0:	37 83       	std	Z+7, r19	; 0x07
     4c2:	26 83       	std	Z+6, r18	; 0x06
     4c4:	8b 81       	ldd	r24, Y+3	; 0x03
     4c6:	9c 81       	ldd	r25, Y+4	; 0x04
     4c8:	fc 01       	movw	r30, r24
     4ca:	84 81       	ldd	r24, Z+4	; 0x04
     4cc:	95 81       	ldd	r25, Z+5	; 0x05
     4ce:	9c 01       	movw	r18, r24
     4d0:	21 50       	subi	r18, 0x01	; 1
     4d2:	31 09       	sbc	r19, r1
     4d4:	8b 81       	ldd	r24, Y+3	; 0x03
     4d6:	9c 81       	ldd	r25, Y+4	; 0x04
     4d8:	fc 01       	movw	r30, r24
     4da:	35 83       	std	Z+5, r19	; 0x05
     4dc:	24 83       	std	Z+4, r18	; 0x04
     4de:	8f e5       	ldi	r24, 0x5F	; 95
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	2a 81       	ldd	r18, Y+2	; 0x02
     4e4:	fc 01       	movw	r30, r24
     4e6:	20 83       	st	Z, r18
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	00 d0       	rcall	.+0      	; 0x4fe <bufferAddToEnd+0x6>
     4fe:	00 d0       	rcall	.+0      	; 0x500 <bufferAddToEnd+0x8>
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	9b 83       	std	Y+3, r25	; 0x03
     506:	8a 83       	std	Y+2, r24	; 0x02
     508:	6c 83       	std	Y+4, r22	; 0x04
	// begin critical section
	CRITICAL_SECTION_START;
     50a:	8f e5       	ldi	r24, 0x5F	; 95
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	fc 01       	movw	r30, r24
     510:	80 81       	ld	r24, Z
     512:	89 83       	std	Y+1, r24	; 0x01
     514:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     516:	8a 81       	ldd	r24, Y+2	; 0x02
     518:	9b 81       	ldd	r25, Y+3	; 0x03
     51a:	fc 01       	movw	r30, r24
     51c:	24 81       	ldd	r18, Z+4	; 0x04
     51e:	35 81       	ldd	r19, Z+5	; 0x05
     520:	8a 81       	ldd	r24, Y+2	; 0x02
     522:	9b 81       	ldd	r25, Y+3	; 0x03
     524:	fc 01       	movw	r30, r24
     526:	82 81       	ldd	r24, Z+2	; 0x02
     528:	93 81       	ldd	r25, Z+3	; 0x03
     52a:	28 17       	cp	r18, r24
     52c:	39 07       	cpc	r19, r25
     52e:	a0 f5       	brcc	.+104    	; 0x598 <bufferAddToEnd+0xa0>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     530:	8a 81       	ldd	r24, Y+2	; 0x02
     532:	9b 81       	ldd	r25, Y+3	; 0x03
     534:	fc 01       	movw	r30, r24
     536:	20 81       	ld	r18, Z
     538:	31 81       	ldd	r19, Z+1	; 0x01
     53a:	8a 81       	ldd	r24, Y+2	; 0x02
     53c:	9b 81       	ldd	r25, Y+3	; 0x03
     53e:	fc 01       	movw	r30, r24
     540:	46 81       	ldd	r20, Z+6	; 0x06
     542:	57 81       	ldd	r21, Z+7	; 0x07
     544:	8a 81       	ldd	r24, Y+2	; 0x02
     546:	9b 81       	ldd	r25, Y+3	; 0x03
     548:	fc 01       	movw	r30, r24
     54a:	84 81       	ldd	r24, Z+4	; 0x04
     54c:	95 81       	ldd	r25, Z+5	; 0x05
     54e:	ba 01       	movw	r22, r20
     550:	68 0f       	add	r22, r24
     552:	79 1f       	adc	r23, r25
     554:	8a 81       	ldd	r24, Y+2	; 0x02
     556:	9b 81       	ldd	r25, Y+3	; 0x03
     558:	fc 01       	movw	r30, r24
     55a:	42 81       	ldd	r20, Z+2	; 0x02
     55c:	53 81       	ldd	r21, Z+3	; 0x03
     55e:	cb 01       	movw	r24, r22
     560:	ba 01       	movw	r22, r20
     562:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <__udivmodhi4>
     566:	82 0f       	add	r24, r18
     568:	93 1f       	adc	r25, r19
     56a:	2c 81       	ldd	r18, Y+4	; 0x04
     56c:	fc 01       	movw	r30, r24
     56e:	20 83       	st	Z, r18
		// increment the length
		buffer->datalength++;
     570:	8a 81       	ldd	r24, Y+2	; 0x02
     572:	9b 81       	ldd	r25, Y+3	; 0x03
     574:	fc 01       	movw	r30, r24
     576:	84 81       	ldd	r24, Z+4	; 0x04
     578:	95 81       	ldd	r25, Z+5	; 0x05
     57a:	9c 01       	movw	r18, r24
     57c:	2f 5f       	subi	r18, 0xFF	; 255
     57e:	3f 4f       	sbci	r19, 0xFF	; 255
     580:	8a 81       	ldd	r24, Y+2	; 0x02
     582:	9b 81       	ldd	r25, Y+3	; 0x03
     584:	fc 01       	movw	r30, r24
     586:	35 83       	std	Z+5, r19	; 0x05
     588:	24 83       	std	Z+4, r18	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     58a:	8f e5       	ldi	r24, 0x5F	; 95
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	29 81       	ldd	r18, Y+1	; 0x01
     590:	fc 01       	movw	r30, r24
     592:	20 83       	st	Z, r18
		// return success
		return -1;
     594:	8f ef       	ldi	r24, 0xFF	; 255
     596:	06 c0       	rjmp	.+12     	; 0x5a4 <bufferAddToEnd+0xac>
	}
	// end critical section
	CRITICAL_SECTION_END;
     598:	8f e5       	ldi	r24, 0x5F	; 95
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	29 81       	ldd	r18, Y+1	; 0x01
     59e:	fc 01       	movw	r30, r24
     5a0:	20 83       	st	Z, r18
	// return failure
	return 0;
     5a2:	80 e0       	ldi	r24, 0x00	; 0
}
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	08 95       	ret

000005b2 <mem_cpy>:
		*tp = 0;
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	cd b7       	in	r28, 0x3d	; 61
     5b8:	de b7       	in	r29, 0x3e	; 62
     5ba:	2a 97       	sbiw	r28, 0x0a	; 10
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	f8 94       	cli
     5c0:	de bf       	out	0x3e, r29	; 62
     5c2:	0f be       	out	0x3f, r0	; 63
     5c4:	cd bf       	out	0x3d, r28	; 61
     5c6:	9e 83       	std	Y+6, r25	; 0x06
     5c8:	8d 83       	std	Y+5, r24	; 0x05
     5ca:	78 87       	std	Y+8, r23	; 0x08
     5cc:	6f 83       	std	Y+7, r22	; 0x07
     5ce:	5a 87       	std	Y+10, r21	; 0x0a
     5d0:	49 87       	std	Y+9, r20	; 0x09
     5d2:	8d 81       	ldd	r24, Y+5	; 0x05
     5d4:	9e 81       	ldd	r25, Y+6	; 0x06
     5d6:	9a 83       	std	Y+2, r25	; 0x02
     5d8:	89 83       	std	Y+1, r24	; 0x01
     5da:	8f 81       	ldd	r24, Y+7	; 0x07
     5dc:	98 85       	ldd	r25, Y+8	; 0x08
     5de:	9c 83       	std	Y+4, r25	; 0x04
     5e0:	8b 83       	std	Y+3, r24	; 0x03
     5e2:	19 c0       	rjmp	.+50     	; 0x616 <mem_cpy+0x64>
     5e4:	8b 81       	ldd	r24, Y+3	; 0x03
     5e6:	9c 81       	ldd	r25, Y+4	; 0x04
     5e8:	fc 01       	movw	r30, r24
     5ea:	20 81       	ld	r18, Z
     5ec:	31 81       	ldd	r19, Z+1	; 0x01
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	9a 81       	ldd	r25, Y+2	; 0x02
     5f2:	fc 01       	movw	r30, r24
     5f4:	31 83       	std	Z+1, r19	; 0x01
     5f6:	20 83       	st	Z, r18
     5f8:	89 81       	ldd	r24, Y+1	; 0x01
     5fa:	9a 81       	ldd	r25, Y+2	; 0x02
     5fc:	02 96       	adiw	r24, 0x02	; 2
     5fe:	9a 83       	std	Y+2, r25	; 0x02
     600:	89 83       	std	Y+1, r24	; 0x01
     602:	8b 81       	ldd	r24, Y+3	; 0x03
     604:	9c 81       	ldd	r25, Y+4	; 0x04
     606:	02 96       	adiw	r24, 0x02	; 2
     608:	9c 83       	std	Y+4, r25	; 0x04
     60a:	8b 83       	std	Y+3, r24	; 0x03
     60c:	89 85       	ldd	r24, Y+9	; 0x09
     60e:	9a 85       	ldd	r25, Y+10	; 0x0a
     610:	02 97       	sbiw	r24, 0x02	; 2
     612:	9a 87       	std	Y+10, r25	; 0x0a
     614:	89 87       	std	Y+9, r24	; 0x09
     616:	89 85       	ldd	r24, Y+9	; 0x09
     618:	9a 85       	ldd	r25, Y+10	; 0x0a
     61a:	02 97       	sbiw	r24, 0x02	; 2
     61c:	18 f7       	brcc	.-58     	; 0x5e4 <mem_cpy+0x32>
     61e:	12 c0       	rjmp	.+36     	; 0x644 <mem_cpy+0x92>
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	9a 81       	ldd	r25, Y+2	; 0x02
     624:	9c 01       	movw	r18, r24
     626:	2f 5f       	subi	r18, 0xFF	; 255
     628:	3f 4f       	sbci	r19, 0xFF	; 255
     62a:	3a 83       	std	Y+2, r19	; 0x02
     62c:	29 83       	std	Y+1, r18	; 0x01
     62e:	2b 81       	ldd	r18, Y+3	; 0x03
     630:	3c 81       	ldd	r19, Y+4	; 0x04
     632:	a9 01       	movw	r20, r18
     634:	4f 5f       	subi	r20, 0xFF	; 255
     636:	5f 4f       	sbci	r21, 0xFF	; 255
     638:	5c 83       	std	Y+4, r21	; 0x04
     63a:	4b 83       	std	Y+3, r20	; 0x03
     63c:	f9 01       	movw	r30, r18
     63e:	20 81       	ld	r18, Z
     640:	fc 01       	movw	r30, r24
     642:	20 83       	st	Z, r18
     644:	89 85       	ldd	r24, Y+9	; 0x09
     646:	9a 85       	ldd	r25, Y+10	; 0x0a
     648:	9c 01       	movw	r18, r24
     64a:	21 50       	subi	r18, 0x01	; 1
     64c:	31 09       	sbc	r19, r1
     64e:	3a 87       	std	Y+10, r19	; 0x0a
     650:	29 87       	std	Y+9, r18	; 0x09
     652:	89 2b       	or	r24, r25
     654:	29 f7       	brne	.-54     	; 0x620 <mem_cpy+0x6e>
     656:	00 00       	nop
     658:	2a 96       	adiw	r28, 0x0a	; 10
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	de bf       	out	0x3e, r29	; 62
     660:	0f be       	out	0x3f, r0	; 63
     662:	cd bf       	out	0x3d, r28	; 61
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	08 95       	ret

0000066a <mem_set>:
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
     66e:	cd b7       	in	r28, 0x3d	; 61
     670:	de b7       	in	r29, 0x3e	; 62
     672:	28 97       	sbiw	r28, 0x08	; 8
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	f8 94       	cli
     678:	de bf       	out	0x3e, r29	; 62
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	cd bf       	out	0x3d, r28	; 61
     67e:	9c 83       	std	Y+4, r25	; 0x04
     680:	8b 83       	std	Y+3, r24	; 0x03
     682:	7e 83       	std	Y+6, r23	; 0x06
     684:	6d 83       	std	Y+5, r22	; 0x05
     686:	58 87       	std	Y+8, r21	; 0x08
     688:	4f 83       	std	Y+7, r20	; 0x07
     68a:	8b 81       	ldd	r24, Y+3	; 0x03
     68c:	9c 81       	ldd	r25, Y+4	; 0x04
     68e:	9a 83       	std	Y+2, r25	; 0x02
     690:	89 83       	std	Y+1, r24	; 0x01
     692:	0a c0       	rjmp	.+20     	; 0x6a8 <mem_set+0x3e>
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	9a 81       	ldd	r25, Y+2	; 0x02
     698:	9c 01       	movw	r18, r24
     69a:	2f 5f       	subi	r18, 0xFF	; 255
     69c:	3f 4f       	sbci	r19, 0xFF	; 255
     69e:	3a 83       	std	Y+2, r19	; 0x02
     6a0:	29 83       	std	Y+1, r18	; 0x01
     6a2:	2d 81       	ldd	r18, Y+5	; 0x05
     6a4:	fc 01       	movw	r30, r24
     6a6:	20 83       	st	Z, r18
     6a8:	8f 81       	ldd	r24, Y+7	; 0x07
     6aa:	98 85       	ldd	r25, Y+8	; 0x08
     6ac:	9c 01       	movw	r18, r24
     6ae:	21 50       	subi	r18, 0x01	; 1
     6b0:	31 09       	sbc	r19, r1
     6b2:	38 87       	std	Y+8, r19	; 0x08
     6b4:	2f 83       	std	Y+7, r18	; 0x07
     6b6:	89 2b       	or	r24, r25
     6b8:	69 f7       	brne	.-38     	; 0x694 <mem_set+0x2a>
     6ba:	00 00       	nop
     6bc:	28 96       	adiw	r28, 0x08	; 8
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	f8 94       	cli
     6c2:	de bf       	out	0x3e, r29	; 62
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	cd bf       	out	0x3d, r28	; 61
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	08 95       	ret

000006ce <mem_cmp>:
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
     6d6:	2c 97       	sbiw	r28, 0x0c	; 12
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	f8 94       	cli
     6dc:	de bf       	out	0x3e, r29	; 62
     6de:	0f be       	out	0x3f, r0	; 63
     6e0:	cd bf       	out	0x3d, r28	; 61
     6e2:	98 87       	std	Y+8, r25	; 0x08
     6e4:	8f 83       	std	Y+7, r24	; 0x07
     6e6:	7a 87       	std	Y+10, r23	; 0x0a
     6e8:	69 87       	std	Y+9, r22	; 0x09
     6ea:	5c 87       	std	Y+12, r21	; 0x0c
     6ec:	4b 87       	std	Y+11, r20	; 0x0b
     6ee:	8f 81       	ldd	r24, Y+7	; 0x07
     6f0:	98 85       	ldd	r25, Y+8	; 0x08
     6f2:	9a 83       	std	Y+2, r25	; 0x02
     6f4:	89 83       	std	Y+1, r24	; 0x01
     6f6:	89 85       	ldd	r24, Y+9	; 0x09
     6f8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6fa:	9c 83       	std	Y+4, r25	; 0x04
     6fc:	8b 83       	std	Y+3, r24	; 0x03
     6fe:	1e 82       	std	Y+6, r1	; 0x06
     700:	1d 82       	std	Y+5, r1	; 0x05
     702:	00 00       	nop
     704:	8b 85       	ldd	r24, Y+11	; 0x0b
     706:	9c 85       	ldd	r25, Y+12	; 0x0c
     708:	9c 01       	movw	r18, r24
     70a:	21 50       	subi	r18, 0x01	; 1
     70c:	31 09       	sbc	r19, r1
     70e:	3c 87       	std	Y+12, r19	; 0x0c
     710:	2b 87       	std	Y+11, r18	; 0x0b
     712:	89 2b       	or	r24, r25
     714:	01 f1       	breq	.+64     	; 0x756 <mem_cmp+0x88>
     716:	89 81       	ldd	r24, Y+1	; 0x01
     718:	9a 81       	ldd	r25, Y+2	; 0x02
     71a:	9c 01       	movw	r18, r24
     71c:	2f 5f       	subi	r18, 0xFF	; 255
     71e:	3f 4f       	sbci	r19, 0xFF	; 255
     720:	3a 83       	std	Y+2, r19	; 0x02
     722:	29 83       	std	Y+1, r18	; 0x01
     724:	fc 01       	movw	r30, r24
     726:	80 81       	ld	r24, Z
     728:	28 2f       	mov	r18, r24
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	8b 81       	ldd	r24, Y+3	; 0x03
     72e:	9c 81       	ldd	r25, Y+4	; 0x04
     730:	ac 01       	movw	r20, r24
     732:	4f 5f       	subi	r20, 0xFF	; 255
     734:	5f 4f       	sbci	r21, 0xFF	; 255
     736:	5c 83       	std	Y+4, r21	; 0x04
     738:	4b 83       	std	Y+3, r20	; 0x03
     73a:	fc 01       	movw	r30, r24
     73c:	80 81       	ld	r24, Z
     73e:	88 2f       	mov	r24, r24
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	a9 01       	movw	r20, r18
     744:	48 1b       	sub	r20, r24
     746:	59 0b       	sbc	r21, r25
     748:	ca 01       	movw	r24, r20
     74a:	9e 83       	std	Y+6, r25	; 0x06
     74c:	8d 83       	std	Y+5, r24	; 0x05
     74e:	8d 81       	ldd	r24, Y+5	; 0x05
     750:	9e 81       	ldd	r25, Y+6	; 0x06
     752:	89 2b       	or	r24, r25
     754:	b9 f2       	breq	.-82     	; 0x704 <mem_cmp+0x36>
     756:	8d 81       	ldd	r24, Y+5	; 0x05
     758:	9e 81       	ldd	r25, Y+6	; 0x06
     75a:	2c 96       	adiw	r28, 0x0c	; 12
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	de bf       	out	0x3e, r29	; 62
     762:	0f be       	out	0x3f, r0	; 63
     764:	cd bf       	out	0x3d, r28	; 61
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	08 95       	ret

0000076c <chk_chr>:
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	00 d0       	rcall	.+0      	; 0x772 <chk_chr+0x6>
     772:	00 d0       	rcall	.+0      	; 0x774 <chk_chr+0x8>
     774:	cd b7       	in	r28, 0x3d	; 61
     776:	de b7       	in	r29, 0x3e	; 62
     778:	9a 83       	std	Y+2, r25	; 0x02
     77a:	89 83       	std	Y+1, r24	; 0x01
     77c:	7c 83       	std	Y+4, r23	; 0x04
     77e:	6b 83       	std	Y+3, r22	; 0x03
     780:	05 c0       	rjmp	.+10     	; 0x78c <chk_chr+0x20>
     782:	89 81       	ldd	r24, Y+1	; 0x01
     784:	9a 81       	ldd	r25, Y+2	; 0x02
     786:	01 96       	adiw	r24, 0x01	; 1
     788:	9a 83       	std	Y+2, r25	; 0x02
     78a:	89 83       	std	Y+1, r24	; 0x01
     78c:	89 81       	ldd	r24, Y+1	; 0x01
     78e:	9a 81       	ldd	r25, Y+2	; 0x02
     790:	fc 01       	movw	r30, r24
     792:	80 81       	ld	r24, Z
     794:	88 23       	and	r24, r24
     796:	59 f0       	breq	.+22     	; 0x7ae <chk_chr+0x42>
     798:	89 81       	ldd	r24, Y+1	; 0x01
     79a:	9a 81       	ldd	r25, Y+2	; 0x02
     79c:	fc 01       	movw	r30, r24
     79e:	80 81       	ld	r24, Z
     7a0:	28 2f       	mov	r18, r24
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	8b 81       	ldd	r24, Y+3	; 0x03
     7a6:	9c 81       	ldd	r25, Y+4	; 0x04
     7a8:	28 17       	cp	r18, r24
     7aa:	39 07       	cpc	r19, r25
     7ac:	51 f7       	brne	.-44     	; 0x782 <chk_chr+0x16>
     7ae:	89 81       	ldd	r24, Y+1	; 0x01
     7b0:	9a 81       	ldd	r25, Y+2	; 0x02
     7b2:	fc 01       	movw	r30, r24
     7b4:	80 81       	ld	r24, Z
     7b6:	88 2f       	mov	r24, r24
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	08 95       	ret

000007c8 <move_window>:
     7c8:	0f 93       	push	r16
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
     7d2:	2b 97       	sbiw	r28, 0x0b	; 11
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	f8 94       	cli
     7d8:	de bf       	out	0x3e, r29	; 62
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	cd bf       	out	0x3d, r28	; 61
     7de:	9f 83       	std	Y+7, r25	; 0x07
     7e0:	8e 83       	std	Y+6, r24	; 0x06
     7e2:	48 87       	std	Y+8, r20	; 0x08
     7e4:	59 87       	std	Y+9, r21	; 0x09
     7e6:	6a 87       	std	Y+10, r22	; 0x0a
     7e8:	7b 87       	std	Y+11, r23	; 0x0b
     7ea:	8e 81       	ldd	r24, Y+6	; 0x06
     7ec:	9f 81       	ldd	r25, Y+7	; 0x07
     7ee:	fc 01       	movw	r30, r24
     7f0:	86 a5       	ldd	r24, Z+46	; 0x2e
     7f2:	97 a5       	ldd	r25, Z+47	; 0x2f
     7f4:	a0 a9       	ldd	r26, Z+48	; 0x30
     7f6:	b1 a9       	ldd	r27, Z+49	; 0x31
     7f8:	89 83       	std	Y+1, r24	; 0x01
     7fa:	9a 83       	std	Y+2, r25	; 0x02
     7fc:	ab 83       	std	Y+3, r26	; 0x03
     7fe:	bc 83       	std	Y+4, r27	; 0x04
     800:	29 81       	ldd	r18, Y+1	; 0x01
     802:	3a 81       	ldd	r19, Y+2	; 0x02
     804:	4b 81       	ldd	r20, Y+3	; 0x03
     806:	5c 81       	ldd	r21, Y+4	; 0x04
     808:	88 85       	ldd	r24, Y+8	; 0x08
     80a:	99 85       	ldd	r25, Y+9	; 0x09
     80c:	aa 85       	ldd	r26, Y+10	; 0x0a
     80e:	bb 85       	ldd	r27, Y+11	; 0x0b
     810:	28 17       	cp	r18, r24
     812:	39 07       	cpc	r19, r25
     814:	4a 07       	cpc	r20, r26
     816:	5b 07       	cpc	r21, r27
     818:	09 f4       	brne	.+2      	; 0x81c <move_window+0x54>
     81a:	a0 c0       	rjmp	.+320    	; 0x95c <__stack+0xfd>
     81c:	8e 81       	ldd	r24, Y+6	; 0x06
     81e:	9f 81       	ldd	r25, Y+7	; 0x07
     820:	dc 01       	movw	r26, r24
     822:	14 96       	adiw	r26, 0x04	; 4
     824:	8c 91       	ld	r24, X
     826:	88 23       	and	r24, r24
     828:	09 f4       	brne	.+2      	; 0x82c <move_window+0x64>
     82a:	6d c0       	rjmp	.+218    	; 0x906 <__stack+0xa7>
     82c:	8e 81       	ldd	r24, Y+6	; 0x06
     82e:	9f 81       	ldd	r25, Y+7	; 0x07
     830:	bc 01       	movw	r22, r24
     832:	6e 5c       	subi	r22, 0xCE	; 206
     834:	7f 4f       	sbci	r23, 0xFF	; 255
     836:	8e 81       	ldd	r24, Y+6	; 0x06
     838:	9f 81       	ldd	r25, Y+7	; 0x07
     83a:	dc 01       	movw	r26, r24
     83c:	11 96       	adiw	r26, 0x01	; 1
     83e:	ec 91       	ld	r30, X
     840:	89 81       	ldd	r24, Y+1	; 0x01
     842:	9a 81       	ldd	r25, Y+2	; 0x02
     844:	ab 81       	ldd	r26, Y+3	; 0x03
     846:	bc 81       	ldd	r27, Y+4	; 0x04
     848:	01 e0       	ldi	r16, 0x01	; 1
     84a:	9c 01       	movw	r18, r24
     84c:	ad 01       	movw	r20, r26
     84e:	8e 2f       	mov	r24, r30
     850:	0e 94 ca 35 	call	0x6b94	; 0x6b94 <disk_write>
     854:	88 23       	and	r24, r24
     856:	11 f0       	breq	.+4      	; 0x85c <move_window+0x94>
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	81 c0       	rjmp	.+258    	; 0x95e <__stack+0xff>
     85c:	8e 81       	ldd	r24, Y+6	; 0x06
     85e:	9f 81       	ldd	r25, Y+7	; 0x07
     860:	fc 01       	movw	r30, r24
     862:	14 82       	std	Z+4, r1	; 0x04
     864:	8e 81       	ldd	r24, Y+6	; 0x06
     866:	9f 81       	ldd	r25, Y+7	; 0x07
     868:	dc 01       	movw	r26, r24
     86a:	92 96       	adiw	r26, 0x22	; 34
     86c:	2d 91       	ld	r18, X+
     86e:	3d 91       	ld	r19, X+
     870:	4d 91       	ld	r20, X+
     872:	5c 91       	ld	r21, X
     874:	95 97       	sbiw	r26, 0x25	; 37
     876:	8e 81       	ldd	r24, Y+6	; 0x06
     878:	9f 81       	ldd	r25, Y+7	; 0x07
     87a:	fc 01       	movw	r30, r24
     87c:	86 8d       	ldd	r24, Z+30	; 0x1e
     87e:	97 8d       	ldd	r25, Z+31	; 0x1f
     880:	a0 a1       	ldd	r26, Z+32	; 0x20
     882:	b1 a1       	ldd	r27, Z+33	; 0x21
     884:	28 0f       	add	r18, r24
     886:	39 1f       	adc	r19, r25
     888:	4a 1f       	adc	r20, r26
     88a:	5b 1f       	adc	r21, r27
     88c:	89 81       	ldd	r24, Y+1	; 0x01
     88e:	9a 81       	ldd	r25, Y+2	; 0x02
     890:	ab 81       	ldd	r26, Y+3	; 0x03
     892:	bc 81       	ldd	r27, Y+4	; 0x04
     894:	82 17       	cp	r24, r18
     896:	93 07       	cpc	r25, r19
     898:	a4 07       	cpc	r26, r20
     89a:	b5 07       	cpc	r27, r21
     89c:	a0 f5       	brcc	.+104    	; 0x906 <__stack+0xa7>
     89e:	8e 81       	ldd	r24, Y+6	; 0x06
     8a0:	9f 81       	ldd	r25, Y+7	; 0x07
     8a2:	dc 01       	movw	r26, r24
     8a4:	13 96       	adiw	r26, 0x03	; 3
     8a6:	8c 91       	ld	r24, X
     8a8:	8d 83       	std	Y+5, r24	; 0x05
     8aa:	2a c0       	rjmp	.+84     	; 0x900 <__stack+0xa1>
     8ac:	8e 81       	ldd	r24, Y+6	; 0x06
     8ae:	9f 81       	ldd	r25, Y+7	; 0x07
     8b0:	fc 01       	movw	r30, r24
     8b2:	86 8d       	ldd	r24, Z+30	; 0x1e
     8b4:	97 8d       	ldd	r25, Z+31	; 0x1f
     8b6:	a0 a1       	ldd	r26, Z+32	; 0x20
     8b8:	b1 a1       	ldd	r27, Z+33	; 0x21
     8ba:	29 81       	ldd	r18, Y+1	; 0x01
     8bc:	3a 81       	ldd	r19, Y+2	; 0x02
     8be:	4b 81       	ldd	r20, Y+3	; 0x03
     8c0:	5c 81       	ldd	r21, Y+4	; 0x04
     8c2:	82 0f       	add	r24, r18
     8c4:	93 1f       	adc	r25, r19
     8c6:	a4 1f       	adc	r26, r20
     8c8:	b5 1f       	adc	r27, r21
     8ca:	89 83       	std	Y+1, r24	; 0x01
     8cc:	9a 83       	std	Y+2, r25	; 0x02
     8ce:	ab 83       	std	Y+3, r26	; 0x03
     8d0:	bc 83       	std	Y+4, r27	; 0x04
     8d2:	8e 81       	ldd	r24, Y+6	; 0x06
     8d4:	9f 81       	ldd	r25, Y+7	; 0x07
     8d6:	bc 01       	movw	r22, r24
     8d8:	6e 5c       	subi	r22, 0xCE	; 206
     8da:	7f 4f       	sbci	r23, 0xFF	; 255
     8dc:	8e 81       	ldd	r24, Y+6	; 0x06
     8de:	9f 81       	ldd	r25, Y+7	; 0x07
     8e0:	dc 01       	movw	r26, r24
     8e2:	11 96       	adiw	r26, 0x01	; 1
     8e4:	ec 91       	ld	r30, X
     8e6:	89 81       	ldd	r24, Y+1	; 0x01
     8e8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ea:	ab 81       	ldd	r26, Y+3	; 0x03
     8ec:	bc 81       	ldd	r27, Y+4	; 0x04
     8ee:	01 e0       	ldi	r16, 0x01	; 1
     8f0:	9c 01       	movw	r18, r24
     8f2:	ad 01       	movw	r20, r26
     8f4:	8e 2f       	mov	r24, r30
     8f6:	0e 94 ca 35 	call	0x6b94	; 0x6b94 <disk_write>
     8fa:	8d 81       	ldd	r24, Y+5	; 0x05
     8fc:	81 50       	subi	r24, 0x01	; 1
     8fe:	8d 83       	std	Y+5, r24	; 0x05
     900:	8d 81       	ldd	r24, Y+5	; 0x05
     902:	82 30       	cpi	r24, 0x02	; 2
     904:	98 f6       	brcc	.-90     	; 0x8ac <__stack+0x4d>
     906:	88 85       	ldd	r24, Y+8	; 0x08
     908:	99 85       	ldd	r25, Y+9	; 0x09
     90a:	aa 85       	ldd	r26, Y+10	; 0x0a
     90c:	bb 85       	ldd	r27, Y+11	; 0x0b
     90e:	89 2b       	or	r24, r25
     910:	8a 2b       	or	r24, r26
     912:	8b 2b       	or	r24, r27
     914:	19 f1       	breq	.+70     	; 0x95c <__stack+0xfd>
     916:	8e 81       	ldd	r24, Y+6	; 0x06
     918:	9f 81       	ldd	r25, Y+7	; 0x07
     91a:	bc 01       	movw	r22, r24
     91c:	6e 5c       	subi	r22, 0xCE	; 206
     91e:	7f 4f       	sbci	r23, 0xFF	; 255
     920:	8e 81       	ldd	r24, Y+6	; 0x06
     922:	9f 81       	ldd	r25, Y+7	; 0x07
     924:	dc 01       	movw	r26, r24
     926:	11 96       	adiw	r26, 0x01	; 1
     928:	ec 91       	ld	r30, X
     92a:	88 85       	ldd	r24, Y+8	; 0x08
     92c:	99 85       	ldd	r25, Y+9	; 0x09
     92e:	aa 85       	ldd	r26, Y+10	; 0x0a
     930:	bb 85       	ldd	r27, Y+11	; 0x0b
     932:	01 e0       	ldi	r16, 0x01	; 1
     934:	9c 01       	movw	r18, r24
     936:	ad 01       	movw	r20, r26
     938:	8e 2f       	mov	r24, r30
     93a:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <disk_read>
     93e:	88 23       	and	r24, r24
     940:	11 f0       	breq	.+4      	; 0x946 <__stack+0xe7>
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	0c c0       	rjmp	.+24     	; 0x95e <__stack+0xff>
     946:	2e 81       	ldd	r18, Y+6	; 0x06
     948:	3f 81       	ldd	r19, Y+7	; 0x07
     94a:	88 85       	ldd	r24, Y+8	; 0x08
     94c:	99 85       	ldd	r25, Y+9	; 0x09
     94e:	aa 85       	ldd	r26, Y+10	; 0x0a
     950:	bb 85       	ldd	r27, Y+11	; 0x0b
     952:	f9 01       	movw	r30, r18
     954:	86 a7       	std	Z+46, r24	; 0x2e
     956:	97 a7       	std	Z+47, r25	; 0x2f
     958:	a0 ab       	std	Z+48, r26	; 0x30
     95a:	b1 ab       	std	Z+49, r27	; 0x31
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	2b 96       	adiw	r28, 0x0b	; 11
     960:	0f b6       	in	r0, 0x3f	; 63
     962:	f8 94       	cli
     964:	de bf       	out	0x3e, r29	; 62
     966:	0f be       	out	0x3f, r0	; 63
     968:	cd bf       	out	0x3d, r28	; 61
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	0f 91       	pop	r16
     970:	08 95       	ret

00000972 <sync>:
     972:	0f 93       	push	r16
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	00 d0       	rcall	.+0      	; 0x97a <sync+0x8>
     97a:	00 d0       	rcall	.+0      	; 0x97c <sync+0xa>
     97c:	cd b7       	in	r28, 0x3d	; 61
     97e:	de b7       	in	r29, 0x3e	; 62
     980:	9b 83       	std	Y+3, r25	; 0x03
     982:	8a 83       	std	Y+2, r24	; 0x02
     984:	8a 81       	ldd	r24, Y+2	; 0x02
     986:	9b 81       	ldd	r25, Y+3	; 0x03
     988:	40 e0       	ldi	r20, 0x00	; 0
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	ba 01       	movw	r22, r20
     98e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <move_window>
     992:	89 83       	std	Y+1, r24	; 0x01
     994:	89 81       	ldd	r24, Y+1	; 0x01
     996:	88 23       	and	r24, r24
     998:	09 f0       	breq	.+2      	; 0x99c <sync+0x2a>
     99a:	91 c0       	rjmp	.+290    	; 0xabe <sync+0x14c>
     99c:	8a 81       	ldd	r24, Y+2	; 0x02
     99e:	9b 81       	ldd	r25, Y+3	; 0x03
     9a0:	fc 01       	movw	r30, r24
     9a2:	80 81       	ld	r24, Z
     9a4:	83 30       	cpi	r24, 0x03	; 3
     9a6:	09 f0       	breq	.+2      	; 0x9aa <sync+0x38>
     9a8:	7d c0       	rjmp	.+250    	; 0xaa4 <sync+0x132>
     9aa:	8a 81       	ldd	r24, Y+2	; 0x02
     9ac:	9b 81       	ldd	r25, Y+3	; 0x03
     9ae:	fc 01       	movw	r30, r24
     9b0:	85 81       	ldd	r24, Z+5	; 0x05
     9b2:	88 23       	and	r24, r24
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <sync+0x46>
     9b6:	76 c0       	rjmp	.+236    	; 0xaa4 <sync+0x132>
     9b8:	8a 81       	ldd	r24, Y+2	; 0x02
     9ba:	9b 81       	ldd	r25, Y+3	; 0x03
     9bc:	fc 01       	movw	r30, r24
     9be:	16 a6       	std	Z+46, r1	; 0x2e
     9c0:	17 a6       	std	Z+47, r1	; 0x2f
     9c2:	10 aa       	std	Z+48, r1	; 0x30
     9c4:	11 aa       	std	Z+49, r1	; 0x31
     9c6:	8a 81       	ldd	r24, Y+2	; 0x02
     9c8:	9b 81       	ldd	r25, Y+3	; 0x03
     9ca:	c2 96       	adiw	r24, 0x32	; 50
     9cc:	40 e0       	ldi	r20, 0x00	; 0
     9ce:	52 e0       	ldi	r21, 0x02	; 2
     9d0:	60 e0       	ldi	r22, 0x00	; 0
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	0e 94 35 03 	call	0x66a	; 0x66a <mem_set>
     9d8:	8a 81       	ldd	r24, Y+2	; 0x02
     9da:	9b 81       	ldd	r25, Y+3	; 0x03
     9dc:	c2 96       	adiw	r24, 0x32	; 50
     9de:	82 50       	subi	r24, 0x02	; 2
     9e0:	9e 4f       	sbci	r25, 0xFE	; 254
     9e2:	25 e5       	ldi	r18, 0x55	; 85
     9e4:	3a ea       	ldi	r19, 0xAA	; 170
     9e6:	fc 01       	movw	r30, r24
     9e8:	31 83       	std	Z+1, r19	; 0x01
     9ea:	20 83       	st	Z, r18
     9ec:	8a 81       	ldd	r24, Y+2	; 0x02
     9ee:	9b 81       	ldd	r25, Y+3	; 0x03
     9f0:	9c 01       	movw	r18, r24
     9f2:	2e 5c       	subi	r18, 0xCE	; 206
     9f4:	3f 4f       	sbci	r19, 0xFF	; 255
     9f6:	82 e5       	ldi	r24, 0x52	; 82
     9f8:	92 e5       	ldi	r25, 0x52	; 82
     9fa:	a1 e6       	ldi	r26, 0x61	; 97
     9fc:	b1 e4       	ldi	r27, 0x41	; 65
     9fe:	f9 01       	movw	r30, r18
     a00:	80 83       	st	Z, r24
     a02:	91 83       	std	Z+1, r25	; 0x01
     a04:	a2 83       	std	Z+2, r26	; 0x02
     a06:	b3 83       	std	Z+3, r27	; 0x03
     a08:	8a 81       	ldd	r24, Y+2	; 0x02
     a0a:	9b 81       	ldd	r25, Y+3	; 0x03
     a0c:	c2 96       	adiw	r24, 0x32	; 50
     a0e:	9c 01       	movw	r18, r24
     a10:	2c 51       	subi	r18, 0x1C	; 28
     a12:	3e 4f       	sbci	r19, 0xFE	; 254
     a14:	82 e7       	ldi	r24, 0x72	; 114
     a16:	92 e7       	ldi	r25, 0x72	; 114
     a18:	a1 e4       	ldi	r26, 0x41	; 65
     a1a:	b1 e6       	ldi	r27, 0x61	; 97
     a1c:	f9 01       	movw	r30, r18
     a1e:	80 83       	st	Z, r24
     a20:	91 83       	std	Z+1, r25	; 0x01
     a22:	a2 83       	std	Z+2, r26	; 0x02
     a24:	b3 83       	std	Z+3, r27	; 0x03
     a26:	8a 81       	ldd	r24, Y+2	; 0x02
     a28:	9b 81       	ldd	r25, Y+3	; 0x03
     a2a:	c2 96       	adiw	r24, 0x32	; 50
     a2c:	9c 01       	movw	r18, r24
     a2e:	28 51       	subi	r18, 0x18	; 24
     a30:	3e 4f       	sbci	r19, 0xFE	; 254
     a32:	8a 81       	ldd	r24, Y+2	; 0x02
     a34:	9b 81       	ldd	r25, Y+3	; 0x03
     a36:	fc 01       	movw	r30, r24
     a38:	86 85       	ldd	r24, Z+14	; 0x0e
     a3a:	97 85       	ldd	r25, Z+15	; 0x0f
     a3c:	a0 89       	ldd	r26, Z+16	; 0x10
     a3e:	b1 89       	ldd	r27, Z+17	; 0x11
     a40:	f9 01       	movw	r30, r18
     a42:	80 83       	st	Z, r24
     a44:	91 83       	std	Z+1, r25	; 0x01
     a46:	a2 83       	std	Z+2, r26	; 0x02
     a48:	b3 83       	std	Z+3, r27	; 0x03
     a4a:	8a 81       	ldd	r24, Y+2	; 0x02
     a4c:	9b 81       	ldd	r25, Y+3	; 0x03
     a4e:	c2 96       	adiw	r24, 0x32	; 50
     a50:	9c 01       	movw	r18, r24
     a52:	24 51       	subi	r18, 0x14	; 20
     a54:	3e 4f       	sbci	r19, 0xFE	; 254
     a56:	8a 81       	ldd	r24, Y+2	; 0x02
     a58:	9b 81       	ldd	r25, Y+3	; 0x03
     a5a:	fc 01       	movw	r30, r24
     a5c:	82 85       	ldd	r24, Z+10	; 0x0a
     a5e:	93 85       	ldd	r25, Z+11	; 0x0b
     a60:	a4 85       	ldd	r26, Z+12	; 0x0c
     a62:	b5 85       	ldd	r27, Z+13	; 0x0d
     a64:	f9 01       	movw	r30, r18
     a66:	80 83       	st	Z, r24
     a68:	91 83       	std	Z+1, r25	; 0x01
     a6a:	a2 83       	std	Z+2, r26	; 0x02
     a6c:	b3 83       	std	Z+3, r27	; 0x03
     a6e:	8a 81       	ldd	r24, Y+2	; 0x02
     a70:	9b 81       	ldd	r25, Y+3	; 0x03
     a72:	fc 01       	movw	r30, r24
     a74:	82 89       	ldd	r24, Z+18	; 0x12
     a76:	93 89       	ldd	r25, Z+19	; 0x13
     a78:	a4 89       	ldd	r26, Z+20	; 0x14
     a7a:	b5 89       	ldd	r27, Z+21	; 0x15
     a7c:	2a 81       	ldd	r18, Y+2	; 0x02
     a7e:	3b 81       	ldd	r19, Y+3	; 0x03
     a80:	b9 01       	movw	r22, r18
     a82:	6e 5c       	subi	r22, 0xCE	; 206
     a84:	7f 4f       	sbci	r23, 0xFF	; 255
     a86:	2a 81       	ldd	r18, Y+2	; 0x02
     a88:	3b 81       	ldd	r19, Y+3	; 0x03
     a8a:	f9 01       	movw	r30, r18
     a8c:	f1 81       	ldd	r31, Z+1	; 0x01
     a8e:	fc 83       	std	Y+4, r31	; 0x04
     a90:	01 e0       	ldi	r16, 0x01	; 1
     a92:	9c 01       	movw	r18, r24
     a94:	ad 01       	movw	r20, r26
     a96:	8c 81       	ldd	r24, Y+4	; 0x04
     a98:	0e 94 ca 35 	call	0x6b94	; 0x6b94 <disk_write>
     a9c:	8a 81       	ldd	r24, Y+2	; 0x02
     a9e:	9b 81       	ldd	r25, Y+3	; 0x03
     aa0:	fc 01       	movw	r30, r24
     aa2:	15 82       	std	Z+5, r1	; 0x05
     aa4:	8a 81       	ldd	r24, Y+2	; 0x02
     aa6:	9b 81       	ldd	r25, Y+3	; 0x03
     aa8:	fc 01       	movw	r30, r24
     aaa:	81 81       	ldd	r24, Z+1	; 0x01
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	0e 94 75 36 	call	0x6cea	; 0x6cea <disk_ioctl>
     ab6:	88 23       	and	r24, r24
     ab8:	11 f0       	breq	.+4      	; 0xabe <sync+0x14c>
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	89 83       	std	Y+1, r24	; 0x01
     abe:	89 81       	ldd	r24, Y+1	; 0x01
     ac0:	0f 90       	pop	r0
     ac2:	0f 90       	pop	r0
     ac4:	0f 90       	pop	r0
     ac6:	0f 90       	pop	r0
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	0f 91       	pop	r16
     ace:	08 95       	ret

00000ad0 <clust2sect>:
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	00 d0       	rcall	.+0      	; 0xad6 <clust2sect+0x6>
     ad6:	00 d0       	rcall	.+0      	; 0xad8 <clust2sect+0x8>
     ad8:	00 d0       	rcall	.+0      	; 0xada <clust2sect+0xa>
     ada:	cd b7       	in	r28, 0x3d	; 61
     adc:	de b7       	in	r29, 0x3e	; 62
     ade:	9a 83       	std	Y+2, r25	; 0x02
     ae0:	89 83       	std	Y+1, r24	; 0x01
     ae2:	4b 83       	std	Y+3, r20	; 0x03
     ae4:	5c 83       	std	Y+4, r21	; 0x04
     ae6:	6d 83       	std	Y+5, r22	; 0x05
     ae8:	7e 83       	std	Y+6, r23	; 0x06
     aea:	8b 81       	ldd	r24, Y+3	; 0x03
     aec:	9c 81       	ldd	r25, Y+4	; 0x04
     aee:	ad 81       	ldd	r26, Y+5	; 0x05
     af0:	be 81       	ldd	r27, Y+6	; 0x06
     af2:	02 97       	sbiw	r24, 0x02	; 2
     af4:	a1 09       	sbc	r26, r1
     af6:	b1 09       	sbc	r27, r1
     af8:	8b 83       	std	Y+3, r24	; 0x03
     afa:	9c 83       	std	Y+4, r25	; 0x04
     afc:	ad 83       	std	Y+5, r26	; 0x05
     afe:	be 83       	std	Y+6, r27	; 0x06
     b00:	89 81       	ldd	r24, Y+1	; 0x01
     b02:	9a 81       	ldd	r25, Y+2	; 0x02
     b04:	fc 01       	movw	r30, r24
     b06:	82 8d       	ldd	r24, Z+26	; 0x1a
     b08:	93 8d       	ldd	r25, Z+27	; 0x1b
     b0a:	a4 8d       	ldd	r26, Z+28	; 0x1c
     b0c:	b5 8d       	ldd	r27, Z+29	; 0x1d
     b0e:	9c 01       	movw	r18, r24
     b10:	ad 01       	movw	r20, r26
     b12:	22 50       	subi	r18, 0x02	; 2
     b14:	31 09       	sbc	r19, r1
     b16:	41 09       	sbc	r20, r1
     b18:	51 09       	sbc	r21, r1
     b1a:	8b 81       	ldd	r24, Y+3	; 0x03
     b1c:	9c 81       	ldd	r25, Y+4	; 0x04
     b1e:	ad 81       	ldd	r26, Y+5	; 0x05
     b20:	be 81       	ldd	r27, Y+6	; 0x06
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	20 f0       	brcs	.+8      	; 0xb34 <clust2sect+0x64>
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	dc 01       	movw	r26, r24
     b32:	1d c0       	rjmp	.+58     	; 0xb6e <clust2sect+0x9e>
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	9a 81       	ldd	r25, Y+2	; 0x02
     b38:	fc 01       	movw	r30, r24
     b3a:	82 81       	ldd	r24, Z+2	; 0x02
     b3c:	28 2f       	mov	r18, r24
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	50 e0       	ldi	r21, 0x00	; 0
     b44:	8b 81       	ldd	r24, Y+3	; 0x03
     b46:	9c 81       	ldd	r25, Y+4	; 0x04
     b48:	ad 81       	ldd	r26, Y+5	; 0x05
     b4a:	be 81       	ldd	r27, Y+6	; 0x06
     b4c:	bc 01       	movw	r22, r24
     b4e:	cd 01       	movw	r24, r26
     b50:	0e 94 45 3d 	call	0x7a8a	; 0x7a8a <__mulsi3>
     b54:	9b 01       	movw	r18, r22
     b56:	ac 01       	movw	r20, r24
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	9a 81       	ldd	r25, Y+2	; 0x02
     b5c:	fc 01       	movw	r30, r24
     b5e:	82 a5       	ldd	r24, Z+42	; 0x2a
     b60:	93 a5       	ldd	r25, Z+43	; 0x2b
     b62:	a4 a5       	ldd	r26, Z+44	; 0x2c
     b64:	b5 a5       	ldd	r27, Z+45	; 0x2d
     b66:	82 0f       	add	r24, r18
     b68:	93 1f       	adc	r25, r19
     b6a:	a4 1f       	adc	r26, r20
     b6c:	b5 1f       	adc	r27, r21
     b6e:	bc 01       	movw	r22, r24
     b70:	cd 01       	movw	r24, r26
     b72:	26 96       	adiw	r28, 0x06	; 6
     b74:	0f b6       	in	r0, 0x3f	; 63
     b76:	f8 94       	cli
     b78:	de bf       	out	0x3e, r29	; 62
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	cd bf       	out	0x3d, r28	; 61
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	08 95       	ret

00000b84 <get_fat>:
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	2c 97       	sbiw	r28, 0x0c	; 12
     b8e:	0f b6       	in	r0, 0x3f	; 63
     b90:	f8 94       	cli
     b92:	de bf       	out	0x3e, r29	; 62
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	cd bf       	out	0x3d, r28	; 61
     b98:	98 87       	std	Y+8, r25	; 0x08
     b9a:	8f 83       	std	Y+7, r24	; 0x07
     b9c:	49 87       	std	Y+9, r20	; 0x09
     b9e:	5a 87       	std	Y+10, r21	; 0x0a
     ba0:	6b 87       	std	Y+11, r22	; 0x0b
     ba2:	7c 87       	std	Y+12, r23	; 0x0c
     ba4:	89 85       	ldd	r24, Y+9	; 0x09
     ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba8:	ab 85       	ldd	r26, Y+11	; 0x0b
     baa:	bc 85       	ldd	r27, Y+12	; 0x0c
     bac:	02 97       	sbiw	r24, 0x02	; 2
     bae:	a1 05       	cpc	r26, r1
     bb0:	b1 05       	cpc	r27, r1
     bb2:	80 f0       	brcs	.+32     	; 0xbd4 <get_fat+0x50>
     bb4:	8f 81       	ldd	r24, Y+7	; 0x07
     bb6:	98 85       	ldd	r25, Y+8	; 0x08
     bb8:	fc 01       	movw	r30, r24
     bba:	22 8d       	ldd	r18, Z+26	; 0x1a
     bbc:	33 8d       	ldd	r19, Z+27	; 0x1b
     bbe:	44 8d       	ldd	r20, Z+28	; 0x1c
     bc0:	55 8d       	ldd	r21, Z+29	; 0x1d
     bc2:	89 85       	ldd	r24, Y+9	; 0x09
     bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc6:	ab 85       	ldd	r26, Y+11	; 0x0b
     bc8:	bc 85       	ldd	r27, Y+12	; 0x0c
     bca:	82 17       	cp	r24, r18
     bcc:	93 07       	cpc	r25, r19
     bce:	a4 07       	cpc	r26, r20
     bd0:	b5 07       	cpc	r27, r21
     bd2:	28 f0       	brcs	.+10     	; 0xbde <get_fat+0x5a>
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	a0 e0       	ldi	r26, 0x00	; 0
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	25 c1       	rjmp	.+586    	; 0xe28 <get_fat+0x2a4>
     bde:	8f 81       	ldd	r24, Y+7	; 0x07
     be0:	98 85       	ldd	r25, Y+8	; 0x08
     be2:	fc 01       	movw	r30, r24
     be4:	80 81       	ld	r24, Z
     be6:	88 2f       	mov	r24, r24
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	82 30       	cpi	r24, 0x02	; 2
     bec:	91 05       	cpc	r25, r1
     bee:	09 f4       	brne	.+2      	; 0xbf2 <get_fat+0x6e>
     bf0:	98 c0       	rjmp	.+304    	; 0xd22 <get_fat+0x19e>
     bf2:	83 30       	cpi	r24, 0x03	; 3
     bf4:	91 05       	cpc	r25, r1
     bf6:	09 f4       	brne	.+2      	; 0xbfa <get_fat+0x76>
     bf8:	cd c0       	rjmp	.+410    	; 0xd94 <get_fat+0x210>
     bfa:	01 97       	sbiw	r24, 0x01	; 1
     bfc:	09 f0       	breq	.+2      	; 0xc00 <get_fat+0x7c>
     bfe:	11 c1       	rjmp	.+546    	; 0xe22 <get_fat+0x29e>
     c00:	89 85       	ldd	r24, Y+9	; 0x09
     c02:	9a 85       	ldd	r25, Y+10	; 0x0a
     c04:	9a 83       	std	Y+2, r25	; 0x02
     c06:	89 83       	std	Y+1, r24	; 0x01
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	9a 81       	ldd	r25, Y+2	; 0x02
     c0c:	96 95       	lsr	r25
     c0e:	87 95       	ror	r24
     c10:	29 81       	ldd	r18, Y+1	; 0x01
     c12:	3a 81       	ldd	r19, Y+2	; 0x02
     c14:	82 0f       	add	r24, r18
     c16:	93 1f       	adc	r25, r19
     c18:	9a 83       	std	Y+2, r25	; 0x02
     c1a:	89 83       	std	Y+1, r24	; 0x01
     c1c:	8f 81       	ldd	r24, Y+7	; 0x07
     c1e:	98 85       	ldd	r25, Y+8	; 0x08
     c20:	fc 01       	movw	r30, r24
     c22:	22 a1       	ldd	r18, Z+34	; 0x22
     c24:	33 a1       	ldd	r19, Z+35	; 0x23
     c26:	44 a1       	ldd	r20, Z+36	; 0x24
     c28:	55 a1       	ldd	r21, Z+37	; 0x25
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	9a 81       	ldd	r25, Y+2	; 0x02
     c2e:	89 2f       	mov	r24, r25
     c30:	99 27       	eor	r25, r25
     c32:	86 95       	lsr	r24
     c34:	cc 01       	movw	r24, r24
     c36:	a0 e0       	ldi	r26, 0x00	; 0
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	82 0f       	add	r24, r18
     c3c:	93 1f       	adc	r25, r19
     c3e:	a4 1f       	adc	r26, r20
     c40:	b5 1f       	adc	r27, r21
     c42:	2f 81       	ldd	r18, Y+7	; 0x07
     c44:	38 85       	ldd	r19, Y+8	; 0x08
     c46:	ac 01       	movw	r20, r24
     c48:	bd 01       	movw	r22, r26
     c4a:	c9 01       	movw	r24, r18
     c4c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <move_window>
     c50:	88 23       	and	r24, r24
     c52:	09 f0       	breq	.+2      	; 0xc56 <get_fat+0xd2>
     c54:	df c0       	rjmp	.+446    	; 0xe14 <get_fat+0x290>
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	9a 81       	ldd	r25, Y+2	; 0x02
     c5a:	91 70       	andi	r25, 0x01	; 1
     c5c:	2f 81       	ldd	r18, Y+7	; 0x07
     c5e:	38 85       	ldd	r19, Y+8	; 0x08
     c60:	82 0f       	add	r24, r18
     c62:	93 1f       	adc	r25, r19
     c64:	c2 96       	adiw	r24, 0x32	; 50
     c66:	fc 01       	movw	r30, r24
     c68:	80 81       	ld	r24, Z
     c6a:	88 2f       	mov	r24, r24
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	9c 83       	std	Y+4, r25	; 0x04
     c70:	8b 83       	std	Y+3, r24	; 0x03
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	9a 81       	ldd	r25, Y+2	; 0x02
     c76:	01 96       	adiw	r24, 0x01	; 1
     c78:	9a 83       	std	Y+2, r25	; 0x02
     c7a:	89 83       	std	Y+1, r24	; 0x01
     c7c:	8f 81       	ldd	r24, Y+7	; 0x07
     c7e:	98 85       	ldd	r25, Y+8	; 0x08
     c80:	fc 01       	movw	r30, r24
     c82:	22 a1       	ldd	r18, Z+34	; 0x22
     c84:	33 a1       	ldd	r19, Z+35	; 0x23
     c86:	44 a1       	ldd	r20, Z+36	; 0x24
     c88:	55 a1       	ldd	r21, Z+37	; 0x25
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	9a 81       	ldd	r25, Y+2	; 0x02
     c8e:	89 2f       	mov	r24, r25
     c90:	99 27       	eor	r25, r25
     c92:	86 95       	lsr	r24
     c94:	cc 01       	movw	r24, r24
     c96:	a0 e0       	ldi	r26, 0x00	; 0
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	82 0f       	add	r24, r18
     c9c:	93 1f       	adc	r25, r19
     c9e:	a4 1f       	adc	r26, r20
     ca0:	b5 1f       	adc	r27, r21
     ca2:	2f 81       	ldd	r18, Y+7	; 0x07
     ca4:	38 85       	ldd	r19, Y+8	; 0x08
     ca6:	ac 01       	movw	r20, r24
     ca8:	bd 01       	movw	r22, r26
     caa:	c9 01       	movw	r24, r18
     cac:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <move_window>
     cb0:	88 23       	and	r24, r24
     cb2:	09 f0       	breq	.+2      	; 0xcb6 <get_fat+0x132>
     cb4:	b1 c0       	rjmp	.+354    	; 0xe18 <get_fat+0x294>
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	9a 81       	ldd	r25, Y+2	; 0x02
     cba:	91 70       	andi	r25, 0x01	; 1
     cbc:	2f 81       	ldd	r18, Y+7	; 0x07
     cbe:	38 85       	ldd	r19, Y+8	; 0x08
     cc0:	82 0f       	add	r24, r18
     cc2:	93 1f       	adc	r25, r19
     cc4:	c2 96       	adiw	r24, 0x32	; 50
     cc6:	fc 01       	movw	r30, r24
     cc8:	80 81       	ld	r24, Z
     cca:	88 2f       	mov	r24, r24
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	98 2f       	mov	r25, r24
     cd0:	88 27       	eor	r24, r24
     cd2:	9c 01       	movw	r18, r24
     cd4:	8b 81       	ldd	r24, Y+3	; 0x03
     cd6:	9c 81       	ldd	r25, Y+4	; 0x04
     cd8:	82 2b       	or	r24, r18
     cda:	93 2b       	or	r25, r19
     cdc:	9c 83       	std	Y+4, r25	; 0x04
     cde:	8b 83       	std	Y+3, r24	; 0x03
     ce0:	89 85       	ldd	r24, Y+9	; 0x09
     ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce4:	ab 85       	ldd	r26, Y+11	; 0x0b
     ce6:	bc 85       	ldd	r27, Y+12	; 0x0c
     ce8:	81 70       	andi	r24, 0x01	; 1
     cea:	99 27       	eor	r25, r25
     cec:	aa 27       	eor	r26, r26
     cee:	bb 27       	eor	r27, r27
     cf0:	89 2b       	or	r24, r25
     cf2:	8a 2b       	or	r24, r26
     cf4:	8b 2b       	or	r24, r27
     cf6:	61 f0       	breq	.+24     	; 0xd10 <get_fat+0x18c>
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	9c 81       	ldd	r25, Y+4	; 0x04
     cfc:	92 95       	swap	r25
     cfe:	82 95       	swap	r24
     d00:	8f 70       	andi	r24, 0x0F	; 15
     d02:	89 27       	eor	r24, r25
     d04:	9f 70       	andi	r25, 0x0F	; 15
     d06:	89 27       	eor	r24, r25
     d08:	cc 01       	movw	r24, r24
     d0a:	a0 e0       	ldi	r26, 0x00	; 0
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	8c c0       	rjmp	.+280    	; 0xe28 <get_fat+0x2a4>
     d10:	8b 81       	ldd	r24, Y+3	; 0x03
     d12:	9c 81       	ldd	r25, Y+4	; 0x04
     d14:	cc 01       	movw	r24, r24
     d16:	a0 e0       	ldi	r26, 0x00	; 0
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	9f 70       	andi	r25, 0x0F	; 15
     d1c:	aa 27       	eor	r26, r26
     d1e:	bb 27       	eor	r27, r27
     d20:	83 c0       	rjmp	.+262    	; 0xe28 <get_fat+0x2a4>
     d22:	8f 81       	ldd	r24, Y+7	; 0x07
     d24:	98 85       	ldd	r25, Y+8	; 0x08
     d26:	fc 01       	movw	r30, r24
     d28:	22 a1       	ldd	r18, Z+34	; 0x22
     d2a:	33 a1       	ldd	r19, Z+35	; 0x23
     d2c:	44 a1       	ldd	r20, Z+36	; 0x24
     d2e:	55 a1       	ldd	r21, Z+37	; 0x25
     d30:	89 85       	ldd	r24, Y+9	; 0x09
     d32:	9a 85       	ldd	r25, Y+10	; 0x0a
     d34:	ab 85       	ldd	r26, Y+11	; 0x0b
     d36:	bc 85       	ldd	r27, Y+12	; 0x0c
     d38:	89 2f       	mov	r24, r25
     d3a:	9a 2f       	mov	r25, r26
     d3c:	ab 2f       	mov	r26, r27
     d3e:	bb 27       	eor	r27, r27
     d40:	82 0f       	add	r24, r18
     d42:	93 1f       	adc	r25, r19
     d44:	a4 1f       	adc	r26, r20
     d46:	b5 1f       	adc	r27, r21
     d48:	2f 81       	ldd	r18, Y+7	; 0x07
     d4a:	38 85       	ldd	r19, Y+8	; 0x08
     d4c:	ac 01       	movw	r20, r24
     d4e:	bd 01       	movw	r22, r26
     d50:	c9 01       	movw	r24, r18
     d52:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <move_window>
     d56:	88 23       	and	r24, r24
     d58:	09 f0       	breq	.+2      	; 0xd5c <get_fat+0x1d8>
     d5a:	60 c0       	rjmp	.+192    	; 0xe1c <get_fat+0x298>
     d5c:	89 85       	ldd	r24, Y+9	; 0x09
     d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d60:	ab 85       	ldd	r26, Y+11	; 0x0b
     d62:	bc 85       	ldd	r27, Y+12	; 0x0c
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	aa 1f       	adc	r26, r26
     d6a:	bb 1f       	adc	r27, r27
     d6c:	8e 7f       	andi	r24, 0xFE	; 254
     d6e:	91 70       	andi	r25, 0x01	; 1
     d70:	aa 27       	eor	r26, r26
     d72:	bb 27       	eor	r27, r27
     d74:	c2 96       	adiw	r24, 0x32	; 50
     d76:	2f 81       	ldd	r18, Y+7	; 0x07
     d78:	38 85       	ldd	r19, Y+8	; 0x08
     d7a:	82 0f       	add	r24, r18
     d7c:	93 1f       	adc	r25, r19
     d7e:	9e 83       	std	Y+6, r25	; 0x06
     d80:	8d 83       	std	Y+5, r24	; 0x05
     d82:	8d 81       	ldd	r24, Y+5	; 0x05
     d84:	9e 81       	ldd	r25, Y+6	; 0x06
     d86:	fc 01       	movw	r30, r24
     d88:	80 81       	ld	r24, Z
     d8a:	91 81       	ldd	r25, Z+1	; 0x01
     d8c:	cc 01       	movw	r24, r24
     d8e:	a0 e0       	ldi	r26, 0x00	; 0
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	4a c0       	rjmp	.+148    	; 0xe28 <get_fat+0x2a4>
     d94:	8f 81       	ldd	r24, Y+7	; 0x07
     d96:	98 85       	ldd	r25, Y+8	; 0x08
     d98:	fc 01       	movw	r30, r24
     d9a:	22 a1       	ldd	r18, Z+34	; 0x22
     d9c:	33 a1       	ldd	r19, Z+35	; 0x23
     d9e:	44 a1       	ldd	r20, Z+36	; 0x24
     da0:	55 a1       	ldd	r21, Z+37	; 0x25
     da2:	89 85       	ldd	r24, Y+9	; 0x09
     da4:	9a 85       	ldd	r25, Y+10	; 0x0a
     da6:	ab 85       	ldd	r26, Y+11	; 0x0b
     da8:	bc 85       	ldd	r27, Y+12	; 0x0c
     daa:	68 94       	set
     dac:	16 f8       	bld	r1, 6
     dae:	b6 95       	lsr	r27
     db0:	a7 95       	ror	r26
     db2:	97 95       	ror	r25
     db4:	87 95       	ror	r24
     db6:	16 94       	lsr	r1
     db8:	d1 f7       	brne	.-12     	; 0xdae <get_fat+0x22a>
     dba:	82 0f       	add	r24, r18
     dbc:	93 1f       	adc	r25, r19
     dbe:	a4 1f       	adc	r26, r20
     dc0:	b5 1f       	adc	r27, r21
     dc2:	2f 81       	ldd	r18, Y+7	; 0x07
     dc4:	38 85       	ldd	r19, Y+8	; 0x08
     dc6:	ac 01       	movw	r20, r24
     dc8:	bd 01       	movw	r22, r26
     dca:	c9 01       	movw	r24, r18
     dcc:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <move_window>
     dd0:	88 23       	and	r24, r24
     dd2:	31 f5       	brne	.+76     	; 0xe20 <get_fat+0x29c>
     dd4:	89 85       	ldd	r24, Y+9	; 0x09
     dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd8:	ab 85       	ldd	r26, Y+11	; 0x0b
     dda:	bc 85       	ldd	r27, Y+12	; 0x0c
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	aa 1f       	adc	r26, r26
     de2:	bb 1f       	adc	r27, r27
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	aa 1f       	adc	r26, r26
     dea:	bb 1f       	adc	r27, r27
     dec:	8c 7f       	andi	r24, 0xFC	; 252
     dee:	91 70       	andi	r25, 0x01	; 1
     df0:	aa 27       	eor	r26, r26
     df2:	bb 27       	eor	r27, r27
     df4:	c2 96       	adiw	r24, 0x32	; 50
     df6:	2f 81       	ldd	r18, Y+7	; 0x07
     df8:	38 85       	ldd	r19, Y+8	; 0x08
     dfa:	82 0f       	add	r24, r18
     dfc:	93 1f       	adc	r25, r19
     dfe:	9e 83       	std	Y+6, r25	; 0x06
     e00:	8d 83       	std	Y+5, r24	; 0x05
     e02:	8d 81       	ldd	r24, Y+5	; 0x05
     e04:	9e 81       	ldd	r25, Y+6	; 0x06
     e06:	fc 01       	movw	r30, r24
     e08:	80 81       	ld	r24, Z
     e0a:	91 81       	ldd	r25, Z+1	; 0x01
     e0c:	a2 81       	ldd	r26, Z+2	; 0x02
     e0e:	b3 81       	ldd	r27, Z+3	; 0x03
     e10:	bf 70       	andi	r27, 0x0F	; 15
     e12:	0a c0       	rjmp	.+20     	; 0xe28 <get_fat+0x2a4>
     e14:	00 00       	nop
     e16:	05 c0       	rjmp	.+10     	; 0xe22 <get_fat+0x29e>
     e18:	00 00       	nop
     e1a:	03 c0       	rjmp	.+6      	; 0xe22 <get_fat+0x29e>
     e1c:	00 00       	nop
     e1e:	01 c0       	rjmp	.+2      	; 0xe22 <get_fat+0x29e>
     e20:	00 00       	nop
     e22:	8f ef       	ldi	r24, 0xFF	; 255
     e24:	9f ef       	ldi	r25, 0xFF	; 255
     e26:	dc 01       	movw	r26, r24
     e28:	bc 01       	movw	r22, r24
     e2a:	cd 01       	movw	r24, r26
     e2c:	2c 96       	adiw	r28, 0x0c	; 12
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	f8 94       	cli
     e32:	de bf       	out	0x3e, r29	; 62
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	cd bf       	out	0x3d, r28	; 61
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	08 95       	ret

00000e3e <put_fat>:
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	2f 97       	sbiw	r28, 0x0f	; 15
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	de bf       	out	0x3e, r29	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	cd bf       	out	0x3d, r28	; 61
     e56:	9f 83       	std	Y+7, r25	; 0x07
     e58:	8e 83       	std	Y+6, r24	; 0x06
     e5a:	48 87       	std	Y+8, r20	; 0x08
     e5c:	59 87       	std	Y+9, r21	; 0x09
     e5e:	6a 87       	std	Y+10, r22	; 0x0a
     e60:	7b 87       	std	Y+11, r23	; 0x0b
     e62:	0c 87       	std	Y+12, r16	; 0x0c
     e64:	1d 87       	std	Y+13, r17	; 0x0d
     e66:	2e 87       	std	Y+14, r18	; 0x0e
     e68:	3f 87       	std	Y+15, r19	; 0x0f
     e6a:	88 85       	ldd	r24, Y+8	; 0x08
     e6c:	99 85       	ldd	r25, Y+9	; 0x09
     e6e:	aa 85       	ldd	r26, Y+10	; 0x0a
     e70:	bb 85       	ldd	r27, Y+11	; 0x0b
     e72:	02 97       	sbiw	r24, 0x02	; 2
     e74:	a1 05       	cpc	r26, r1
     e76:	b1 05       	cpc	r27, r1
     e78:	80 f0       	brcs	.+32     	; 0xe9a <put_fat+0x5c>
     e7a:	8e 81       	ldd	r24, Y+6	; 0x06
     e7c:	9f 81       	ldd	r25, Y+7	; 0x07
     e7e:	fc 01       	movw	r30, r24
     e80:	22 8d       	ldd	r18, Z+26	; 0x1a
     e82:	33 8d       	ldd	r19, Z+27	; 0x1b
     e84:	44 8d       	ldd	r20, Z+28	; 0x1c
     e86:	55 8d       	ldd	r21, Z+29	; 0x1d
     e88:	88 85       	ldd	r24, Y+8	; 0x08
     e8a:	99 85       	ldd	r25, Y+9	; 0x09
     e8c:	aa 85       	ldd	r26, Y+10	; 0x0a
     e8e:	bb 85       	ldd	r27, Y+11	; 0x0b
     e90:	82 17       	cp	r24, r18
     e92:	93 07       	cpc	r25, r19
     e94:	a4 07       	cpc	r26, r20
     e96:	b5 07       	cpc	r27, r21
     e98:	18 f0       	brcs	.+6      	; 0xea0 <put_fat+0x62>
     e9a:	82 e0       	ldi	r24, 0x02	; 2
     e9c:	89 83       	std	Y+1, r24	; 0x01
     e9e:	74 c1       	rjmp	.+744    	; 0x1188 <put_fat+0x34a>
     ea0:	8e 81       	ldd	r24, Y+6	; 0x06
     ea2:	9f 81       	ldd	r25, Y+7	; 0x07
     ea4:	fc 01       	movw	r30, r24
     ea6:	80 81       	ld	r24, Z
     ea8:	88 2f       	mov	r24, r24
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	82 30       	cpi	r24, 0x02	; 2
     eae:	91 05       	cpc	r25, r1
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <put_fat+0x76>
     eb2:	c4 c0       	rjmp	.+392    	; 0x103c <put_fat+0x1fe>
     eb4:	83 30       	cpi	r24, 0x03	; 3
     eb6:	91 05       	cpc	r25, r1
     eb8:	09 f4       	brne	.+2      	; 0xebc <put_fat+0x7e>
     eba:	fa c0       	rjmp	.+500    	; 0x10b0 <put_fat+0x272>
     ebc:	01 97       	sbiw	r24, 0x01	; 1
     ebe:	09 f0       	breq	.+2      	; 0xec2 <put_fat+0x84>
     ec0:	54 c1       	rjmp	.+680    	; 0x116a <put_fat+0x32c>
     ec2:	88 85       	ldd	r24, Y+8	; 0x08
     ec4:	99 85       	ldd	r25, Y+9	; 0x09
     ec6:	9b 83       	std	Y+3, r25	; 0x03
     ec8:	8a 83       	std	Y+2, r24	; 0x02
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	9b 81       	ldd	r25, Y+3	; 0x03
     ece:	96 95       	lsr	r25
     ed0:	87 95       	ror	r24
     ed2:	2a 81       	ldd	r18, Y+2	; 0x02
     ed4:	3b 81       	ldd	r19, Y+3	; 0x03
     ed6:	82 0f       	add	r24, r18
     ed8:	93 1f       	adc	r25, r19
     eda:	9b 83       	std	Y+3, r25	; 0x03
     edc:	8a 83       	std	Y+2, r24	; 0x02
     ede:	8e 81       	ldd	r24, Y+6	; 0x06
     ee0:	9f 81       	ldd	r25, Y+7	; 0x07
     ee2:	fc 01       	movw	r30, r24
     ee4:	22 a1       	ldd	r18, Z+34	; 0x22
     ee6:	33 a1       	ldd	r19, Z+35	; 0x23
     ee8:	44 a1       	ldd	r20, Z+36	; 0x24
     eea:	55 a1       	ldd	r21, Z+37	; 0x25
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	9b 81       	ldd	r25, Y+3	; 0x03
     ef0:	89 2f       	mov	r24, r25
     ef2:	99 27       	eor	r25, r25
     ef4:	86 95       	lsr	r24
     ef6:	cc 01       	movw	r24, r24
     ef8:	a0 e0       	ldi	r26, 0x00	; 0
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	82 0f       	add	r24, r18
     efe:	93 1f       	adc	r25, r19
     f00:	a4 1f       	adc	r26, r20
     f02:	b5 1f       	adc	r27, r21
     f04:	2e 81       	ldd	r18, Y+6	; 0x06
     f06:	3f 81       	ldd	r19, Y+7	; 0x07
     f08:	ac 01       	movw	r20, r24
     f0a:	bd 01       	movw	r22, r26
     f0c:	c9 01       	movw	r24, r18
     f0e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <move_window>
     f12:	89 83       	std	Y+1, r24	; 0x01
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	88 23       	and	r24, r24
     f18:	09 f0       	breq	.+2      	; 0xf1c <put_fat+0xde>
     f1a:	2a c1       	rjmp	.+596    	; 0x1170 <put_fat+0x332>
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	9b 81       	ldd	r25, Y+3	; 0x03
     f20:	91 70       	andi	r25, 0x01	; 1
     f22:	c2 96       	adiw	r24, 0x32	; 50
     f24:	2e 81       	ldd	r18, Y+6	; 0x06
     f26:	3f 81       	ldd	r19, Y+7	; 0x07
     f28:	82 0f       	add	r24, r18
     f2a:	93 1f       	adc	r25, r19
     f2c:	9d 83       	std	Y+5, r25	; 0x05
     f2e:	8c 83       	std	Y+4, r24	; 0x04
     f30:	88 85       	ldd	r24, Y+8	; 0x08
     f32:	99 85       	ldd	r25, Y+9	; 0x09
     f34:	aa 85       	ldd	r26, Y+10	; 0x0a
     f36:	bb 85       	ldd	r27, Y+11	; 0x0b
     f38:	81 70       	andi	r24, 0x01	; 1
     f3a:	99 27       	eor	r25, r25
     f3c:	aa 27       	eor	r26, r26
     f3e:	bb 27       	eor	r27, r27
     f40:	89 2b       	or	r24, r25
     f42:	8a 2b       	or	r24, r26
     f44:	8b 2b       	or	r24, r27
     f46:	91 f0       	breq	.+36     	; 0xf6c <put_fat+0x12e>
     f48:	8c 81       	ldd	r24, Y+4	; 0x04
     f4a:	9d 81       	ldd	r25, Y+5	; 0x05
     f4c:	fc 01       	movw	r30, r24
     f4e:	80 81       	ld	r24, Z
     f50:	28 2f       	mov	r18, r24
     f52:	2f 70       	andi	r18, 0x0F	; 15
     f54:	8c 85       	ldd	r24, Y+12	; 0x0c
     f56:	88 2f       	mov	r24, r24
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	82 95       	swap	r24
     f5c:	92 95       	swap	r25
     f5e:	90 7f       	andi	r25, 0xF0	; 240
     f60:	98 27       	eor	r25, r24
     f62:	80 7f       	andi	r24, 0xF0	; 240
     f64:	98 27       	eor	r25, r24
     f66:	82 2b       	or	r24, r18
     f68:	28 2f       	mov	r18, r24
     f6a:	01 c0       	rjmp	.+2      	; 0xf6e <put_fat+0x130>
     f6c:	2c 85       	ldd	r18, Y+12	; 0x0c
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	9d 81       	ldd	r25, Y+5	; 0x05
     f72:	fc 01       	movw	r30, r24
     f74:	20 83       	st	Z, r18
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	9b 81       	ldd	r25, Y+3	; 0x03
     f7a:	01 96       	adiw	r24, 0x01	; 1
     f7c:	9b 83       	std	Y+3, r25	; 0x03
     f7e:	8a 83       	std	Y+2, r24	; 0x02
     f80:	8e 81       	ldd	r24, Y+6	; 0x06
     f82:	9f 81       	ldd	r25, Y+7	; 0x07
     f84:	21 e0       	ldi	r18, 0x01	; 1
     f86:	fc 01       	movw	r30, r24
     f88:	24 83       	std	Z+4, r18	; 0x04
     f8a:	8e 81       	ldd	r24, Y+6	; 0x06
     f8c:	9f 81       	ldd	r25, Y+7	; 0x07
     f8e:	fc 01       	movw	r30, r24
     f90:	22 a1       	ldd	r18, Z+34	; 0x22
     f92:	33 a1       	ldd	r19, Z+35	; 0x23
     f94:	44 a1       	ldd	r20, Z+36	; 0x24
     f96:	55 a1       	ldd	r21, Z+37	; 0x25
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	9b 81       	ldd	r25, Y+3	; 0x03
     f9c:	89 2f       	mov	r24, r25
     f9e:	99 27       	eor	r25, r25
     fa0:	86 95       	lsr	r24
     fa2:	cc 01       	movw	r24, r24
     fa4:	a0 e0       	ldi	r26, 0x00	; 0
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	82 0f       	add	r24, r18
     faa:	93 1f       	adc	r25, r19
     fac:	a4 1f       	adc	r26, r20
     fae:	b5 1f       	adc	r27, r21
     fb0:	2e 81       	ldd	r18, Y+6	; 0x06
     fb2:	3f 81       	ldd	r19, Y+7	; 0x07
     fb4:	ac 01       	movw	r20, r24
     fb6:	bd 01       	movw	r22, r26
     fb8:	c9 01       	movw	r24, r18
     fba:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <move_window>
     fbe:	89 83       	std	Y+1, r24	; 0x01
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	88 23       	and	r24, r24
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <put_fat+0x18a>
     fc6:	d6 c0       	rjmp	.+428    	; 0x1174 <put_fat+0x336>
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	9b 81       	ldd	r25, Y+3	; 0x03
     fcc:	91 70       	andi	r25, 0x01	; 1
     fce:	c2 96       	adiw	r24, 0x32	; 50
     fd0:	2e 81       	ldd	r18, Y+6	; 0x06
     fd2:	3f 81       	ldd	r19, Y+7	; 0x07
     fd4:	82 0f       	add	r24, r18
     fd6:	93 1f       	adc	r25, r19
     fd8:	9d 83       	std	Y+5, r25	; 0x05
     fda:	8c 83       	std	Y+4, r24	; 0x04
     fdc:	88 85       	ldd	r24, Y+8	; 0x08
     fde:	99 85       	ldd	r25, Y+9	; 0x09
     fe0:	aa 85       	ldd	r26, Y+10	; 0x0a
     fe2:	bb 85       	ldd	r27, Y+11	; 0x0b
     fe4:	81 70       	andi	r24, 0x01	; 1
     fe6:	99 27       	eor	r25, r25
     fe8:	aa 27       	eor	r26, r26
     fea:	bb 27       	eor	r27, r27
     fec:	89 2b       	or	r24, r25
     fee:	8a 2b       	or	r24, r26
     ff0:	8b 2b       	or	r24, r27
     ff2:	71 f0       	breq	.+28     	; 0x1010 <put_fat+0x1d2>
     ff4:	8c 85       	ldd	r24, Y+12	; 0x0c
     ff6:	9d 85       	ldd	r25, Y+13	; 0x0d
     ff8:	ae 85       	ldd	r26, Y+14	; 0x0e
     ffa:	bf 85       	ldd	r27, Y+15	; 0x0f
     ffc:	68 94       	set
     ffe:	13 f8       	bld	r1, 3
    1000:	b6 95       	lsr	r27
    1002:	a7 95       	ror	r26
    1004:	97 95       	ror	r25
    1006:	87 95       	ror	r24
    1008:	16 94       	lsr	r1
    100a:	d1 f7       	brne	.-12     	; 0x1000 <put_fat+0x1c2>
    100c:	28 2f       	mov	r18, r24
    100e:	11 c0       	rjmp	.+34     	; 0x1032 <put_fat+0x1f4>
    1010:	8c 81       	ldd	r24, Y+4	; 0x04
    1012:	9d 81       	ldd	r25, Y+5	; 0x05
    1014:	fc 01       	movw	r30, r24
    1016:	80 81       	ld	r24, Z
    1018:	28 2f       	mov	r18, r24
    101a:	20 7f       	andi	r18, 0xF0	; 240
    101c:	8c 85       	ldd	r24, Y+12	; 0x0c
    101e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1020:	ae 85       	ldd	r26, Y+14	; 0x0e
    1022:	bf 85       	ldd	r27, Y+15	; 0x0f
    1024:	89 2f       	mov	r24, r25
    1026:	9a 2f       	mov	r25, r26
    1028:	ab 2f       	mov	r26, r27
    102a:	bb 27       	eor	r27, r27
    102c:	8f 70       	andi	r24, 0x0F	; 15
    102e:	82 2b       	or	r24, r18
    1030:	28 2f       	mov	r18, r24
    1032:	8c 81       	ldd	r24, Y+4	; 0x04
    1034:	9d 81       	ldd	r25, Y+5	; 0x05
    1036:	fc 01       	movw	r30, r24
    1038:	20 83       	st	Z, r18
    103a:	a1 c0       	rjmp	.+322    	; 0x117e <put_fat+0x340>
    103c:	8e 81       	ldd	r24, Y+6	; 0x06
    103e:	9f 81       	ldd	r25, Y+7	; 0x07
    1040:	fc 01       	movw	r30, r24
    1042:	22 a1       	ldd	r18, Z+34	; 0x22
    1044:	33 a1       	ldd	r19, Z+35	; 0x23
    1046:	44 a1       	ldd	r20, Z+36	; 0x24
    1048:	55 a1       	ldd	r21, Z+37	; 0x25
    104a:	88 85       	ldd	r24, Y+8	; 0x08
    104c:	99 85       	ldd	r25, Y+9	; 0x09
    104e:	aa 85       	ldd	r26, Y+10	; 0x0a
    1050:	bb 85       	ldd	r27, Y+11	; 0x0b
    1052:	89 2f       	mov	r24, r25
    1054:	9a 2f       	mov	r25, r26
    1056:	ab 2f       	mov	r26, r27
    1058:	bb 27       	eor	r27, r27
    105a:	82 0f       	add	r24, r18
    105c:	93 1f       	adc	r25, r19
    105e:	a4 1f       	adc	r26, r20
    1060:	b5 1f       	adc	r27, r21
    1062:	2e 81       	ldd	r18, Y+6	; 0x06
    1064:	3f 81       	ldd	r19, Y+7	; 0x07
    1066:	ac 01       	movw	r20, r24
    1068:	bd 01       	movw	r22, r26
    106a:	c9 01       	movw	r24, r18
    106c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <move_window>
    1070:	89 83       	std	Y+1, r24	; 0x01
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	88 23       	and	r24, r24
    1076:	09 f0       	breq	.+2      	; 0x107a <put_fat+0x23c>
    1078:	7f c0       	rjmp	.+254    	; 0x1178 <put_fat+0x33a>
    107a:	88 85       	ldd	r24, Y+8	; 0x08
    107c:	99 85       	ldd	r25, Y+9	; 0x09
    107e:	aa 85       	ldd	r26, Y+10	; 0x0a
    1080:	bb 85       	ldd	r27, Y+11	; 0x0b
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	aa 1f       	adc	r26, r26
    1088:	bb 1f       	adc	r27, r27
    108a:	8e 7f       	andi	r24, 0xFE	; 254
    108c:	91 70       	andi	r25, 0x01	; 1
    108e:	aa 27       	eor	r26, r26
    1090:	bb 27       	eor	r27, r27
    1092:	c2 96       	adiw	r24, 0x32	; 50
    1094:	2e 81       	ldd	r18, Y+6	; 0x06
    1096:	3f 81       	ldd	r19, Y+7	; 0x07
    1098:	82 0f       	add	r24, r18
    109a:	93 1f       	adc	r25, r19
    109c:	9d 83       	std	Y+5, r25	; 0x05
    109e:	8c 83       	std	Y+4, r24	; 0x04
    10a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    10a2:	3d 85       	ldd	r19, Y+13	; 0x0d
    10a4:	8c 81       	ldd	r24, Y+4	; 0x04
    10a6:	9d 81       	ldd	r25, Y+5	; 0x05
    10a8:	fc 01       	movw	r30, r24
    10aa:	31 83       	std	Z+1, r19	; 0x01
    10ac:	20 83       	st	Z, r18
    10ae:	67 c0       	rjmp	.+206    	; 0x117e <put_fat+0x340>
    10b0:	8e 81       	ldd	r24, Y+6	; 0x06
    10b2:	9f 81       	ldd	r25, Y+7	; 0x07
    10b4:	fc 01       	movw	r30, r24
    10b6:	22 a1       	ldd	r18, Z+34	; 0x22
    10b8:	33 a1       	ldd	r19, Z+35	; 0x23
    10ba:	44 a1       	ldd	r20, Z+36	; 0x24
    10bc:	55 a1       	ldd	r21, Z+37	; 0x25
    10be:	88 85       	ldd	r24, Y+8	; 0x08
    10c0:	99 85       	ldd	r25, Y+9	; 0x09
    10c2:	aa 85       	ldd	r26, Y+10	; 0x0a
    10c4:	bb 85       	ldd	r27, Y+11	; 0x0b
    10c6:	68 94       	set
    10c8:	16 f8       	bld	r1, 6
    10ca:	b6 95       	lsr	r27
    10cc:	a7 95       	ror	r26
    10ce:	97 95       	ror	r25
    10d0:	87 95       	ror	r24
    10d2:	16 94       	lsr	r1
    10d4:	d1 f7       	brne	.-12     	; 0x10ca <put_fat+0x28c>
    10d6:	82 0f       	add	r24, r18
    10d8:	93 1f       	adc	r25, r19
    10da:	a4 1f       	adc	r26, r20
    10dc:	b5 1f       	adc	r27, r21
    10de:	2e 81       	ldd	r18, Y+6	; 0x06
    10e0:	3f 81       	ldd	r19, Y+7	; 0x07
    10e2:	ac 01       	movw	r20, r24
    10e4:	bd 01       	movw	r22, r26
    10e6:	c9 01       	movw	r24, r18
    10e8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <move_window>
    10ec:	89 83       	std	Y+1, r24	; 0x01
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	88 23       	and	r24, r24
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <put_fat+0x2b8>
    10f4:	43 c0       	rjmp	.+134    	; 0x117c <put_fat+0x33e>
    10f6:	88 85       	ldd	r24, Y+8	; 0x08
    10f8:	99 85       	ldd	r25, Y+9	; 0x09
    10fa:	aa 85       	ldd	r26, Y+10	; 0x0a
    10fc:	bb 85       	ldd	r27, Y+11	; 0x0b
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	aa 1f       	adc	r26, r26
    1104:	bb 1f       	adc	r27, r27
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	aa 1f       	adc	r26, r26
    110c:	bb 1f       	adc	r27, r27
    110e:	8c 7f       	andi	r24, 0xFC	; 252
    1110:	91 70       	andi	r25, 0x01	; 1
    1112:	aa 27       	eor	r26, r26
    1114:	bb 27       	eor	r27, r27
    1116:	c2 96       	adiw	r24, 0x32	; 50
    1118:	2e 81       	ldd	r18, Y+6	; 0x06
    111a:	3f 81       	ldd	r19, Y+7	; 0x07
    111c:	82 0f       	add	r24, r18
    111e:	93 1f       	adc	r25, r19
    1120:	9d 83       	std	Y+5, r25	; 0x05
    1122:	8c 83       	std	Y+4, r24	; 0x04
    1124:	8c 81       	ldd	r24, Y+4	; 0x04
    1126:	9d 81       	ldd	r25, Y+5	; 0x05
    1128:	fc 01       	movw	r30, r24
    112a:	80 81       	ld	r24, Z
    112c:	91 81       	ldd	r25, Z+1	; 0x01
    112e:	a2 81       	ldd	r26, Z+2	; 0x02
    1130:	b3 81       	ldd	r27, Z+3	; 0x03
    1132:	88 27       	eor	r24, r24
    1134:	99 27       	eor	r25, r25
    1136:	aa 27       	eor	r26, r26
    1138:	b0 7f       	andi	r27, 0xF0	; 240
    113a:	2c 85       	ldd	r18, Y+12	; 0x0c
    113c:	3d 85       	ldd	r19, Y+13	; 0x0d
    113e:	4e 85       	ldd	r20, Y+14	; 0x0e
    1140:	5f 85       	ldd	r21, Y+15	; 0x0f
    1142:	82 2b       	or	r24, r18
    1144:	93 2b       	or	r25, r19
    1146:	a4 2b       	or	r26, r20
    1148:	b5 2b       	or	r27, r21
    114a:	8c 87       	std	Y+12, r24	; 0x0c
    114c:	9d 87       	std	Y+13, r25	; 0x0d
    114e:	ae 87       	std	Y+14, r26	; 0x0e
    1150:	bf 87       	std	Y+15, r27	; 0x0f
    1152:	2c 81       	ldd	r18, Y+4	; 0x04
    1154:	3d 81       	ldd	r19, Y+5	; 0x05
    1156:	8c 85       	ldd	r24, Y+12	; 0x0c
    1158:	9d 85       	ldd	r25, Y+13	; 0x0d
    115a:	ae 85       	ldd	r26, Y+14	; 0x0e
    115c:	bf 85       	ldd	r27, Y+15	; 0x0f
    115e:	f9 01       	movw	r30, r18
    1160:	80 83       	st	Z, r24
    1162:	91 83       	std	Z+1, r25	; 0x01
    1164:	a2 83       	std	Z+2, r26	; 0x02
    1166:	b3 83       	std	Z+3, r27	; 0x03
    1168:	0a c0       	rjmp	.+20     	; 0x117e <put_fat+0x340>
    116a:	82 e0       	ldi	r24, 0x02	; 2
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	07 c0       	rjmp	.+14     	; 0x117e <put_fat+0x340>
    1170:	00 00       	nop
    1172:	05 c0       	rjmp	.+10     	; 0x117e <put_fat+0x340>
    1174:	00 00       	nop
    1176:	03 c0       	rjmp	.+6      	; 0x117e <put_fat+0x340>
    1178:	00 00       	nop
    117a:	01 c0       	rjmp	.+2      	; 0x117e <put_fat+0x340>
    117c:	00 00       	nop
    117e:	8e 81       	ldd	r24, Y+6	; 0x06
    1180:	9f 81       	ldd	r25, Y+7	; 0x07
    1182:	21 e0       	ldi	r18, 0x01	; 1
    1184:	fc 01       	movw	r30, r24
    1186:	24 83       	std	Z+4, r18	; 0x04
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	2f 96       	adiw	r28, 0x0f	; 15
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	f8 94       	cli
    1190:	de bf       	out	0x3e, r29	; 62
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	cd bf       	out	0x3d, r28	; 61
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	1f 91       	pop	r17
    119c:	0f 91       	pop	r16
    119e:	08 95       	ret

000011a0 <remove_chain>:
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	2b 97       	sbiw	r28, 0x0b	; 11
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	cd bf       	out	0x3d, r28	; 61
    11b8:	9f 83       	std	Y+7, r25	; 0x07
    11ba:	8e 83       	std	Y+6, r24	; 0x06
    11bc:	48 87       	std	Y+8, r20	; 0x08
    11be:	59 87       	std	Y+9, r21	; 0x09
    11c0:	6a 87       	std	Y+10, r22	; 0x0a
    11c2:	7b 87       	std	Y+11, r23	; 0x0b
    11c4:	88 85       	ldd	r24, Y+8	; 0x08
    11c6:	99 85       	ldd	r25, Y+9	; 0x09
    11c8:	aa 85       	ldd	r26, Y+10	; 0x0a
    11ca:	bb 85       	ldd	r27, Y+11	; 0x0b
    11cc:	02 97       	sbiw	r24, 0x02	; 2
    11ce:	a1 05       	cpc	r26, r1
    11d0:	b1 05       	cpc	r27, r1
    11d2:	80 f0       	brcs	.+32     	; 0x11f4 <remove_chain+0x54>
    11d4:	8e 81       	ldd	r24, Y+6	; 0x06
    11d6:	9f 81       	ldd	r25, Y+7	; 0x07
    11d8:	fc 01       	movw	r30, r24
    11da:	22 8d       	ldd	r18, Z+26	; 0x1a
    11dc:	33 8d       	ldd	r19, Z+27	; 0x1b
    11de:	44 8d       	ldd	r20, Z+28	; 0x1c
    11e0:	55 8d       	ldd	r21, Z+29	; 0x1d
    11e2:	88 85       	ldd	r24, Y+8	; 0x08
    11e4:	99 85       	ldd	r25, Y+9	; 0x09
    11e6:	aa 85       	ldd	r26, Y+10	; 0x0a
    11e8:	bb 85       	ldd	r27, Y+11	; 0x0b
    11ea:	82 17       	cp	r24, r18
    11ec:	93 07       	cpc	r25, r19
    11ee:	a4 07       	cpc	r26, r20
    11f0:	b5 07       	cpc	r27, r21
    11f2:	18 f0       	brcs	.+6      	; 0x11fa <remove_chain+0x5a>
    11f4:	82 e0       	ldi	r24, 0x02	; 2
    11f6:	89 83       	std	Y+1, r24	; 0x01
    11f8:	85 c0       	rjmp	.+266    	; 0x1304 <remove_chain+0x164>
    11fa:	19 82       	std	Y+1, r1	; 0x01
    11fc:	6e c0       	rjmp	.+220    	; 0x12da <remove_chain+0x13a>
    11fe:	88 85       	ldd	r24, Y+8	; 0x08
    1200:	99 85       	ldd	r25, Y+9	; 0x09
    1202:	aa 85       	ldd	r26, Y+10	; 0x0a
    1204:	bb 85       	ldd	r27, Y+11	; 0x0b
    1206:	2e 81       	ldd	r18, Y+6	; 0x06
    1208:	3f 81       	ldd	r19, Y+7	; 0x07
    120a:	ac 01       	movw	r20, r24
    120c:	bd 01       	movw	r22, r26
    120e:	c9 01       	movw	r24, r18
    1210:	0e 94 c2 05 	call	0xb84	; 0xb84 <get_fat>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	8a 83       	std	Y+2, r24	; 0x02
    121a:	9b 83       	std	Y+3, r25	; 0x03
    121c:	ac 83       	std	Y+4, r26	; 0x04
    121e:	bd 83       	std	Y+5, r27	; 0x05
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	9b 81       	ldd	r25, Y+3	; 0x03
    1224:	ac 81       	ldd	r26, Y+4	; 0x04
    1226:	bd 81       	ldd	r27, Y+5	; 0x05
    1228:	89 2b       	or	r24, r25
    122a:	8a 2b       	or	r24, r26
    122c:	8b 2b       	or	r24, r27
    122e:	09 f4       	brne	.+2      	; 0x1232 <remove_chain+0x92>
    1230:	66 c0       	rjmp	.+204    	; 0x12fe <remove_chain+0x15e>
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	9b 81       	ldd	r25, Y+3	; 0x03
    1236:	ac 81       	ldd	r26, Y+4	; 0x04
    1238:	bd 81       	ldd	r27, Y+5	; 0x05
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	a1 05       	cpc	r26, r1
    123e:	b1 05       	cpc	r27, r1
    1240:	19 f4       	brne	.+6      	; 0x1248 <remove_chain+0xa8>
    1242:	82 e0       	ldi	r24, 0x02	; 2
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	5e c0       	rjmp	.+188    	; 0x1304 <remove_chain+0x164>
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	9b 81       	ldd	r25, Y+3	; 0x03
    124c:	ac 81       	ldd	r26, Y+4	; 0x04
    124e:	bd 81       	ldd	r27, Y+5	; 0x05
    1250:	8f 3f       	cpi	r24, 0xFF	; 255
    1252:	9f 4f       	sbci	r25, 0xFF	; 255
    1254:	af 4f       	sbci	r26, 0xFF	; 255
    1256:	bf 4f       	sbci	r27, 0xFF	; 255
    1258:	19 f4       	brne	.+6      	; 0x1260 <remove_chain+0xc0>
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	89 83       	std	Y+1, r24	; 0x01
    125e:	52 c0       	rjmp	.+164    	; 0x1304 <remove_chain+0x164>
    1260:	88 85       	ldd	r24, Y+8	; 0x08
    1262:	99 85       	ldd	r25, Y+9	; 0x09
    1264:	aa 85       	ldd	r26, Y+10	; 0x0a
    1266:	bb 85       	ldd	r27, Y+11	; 0x0b
    1268:	ee 81       	ldd	r30, Y+6	; 0x06
    126a:	ff 81       	ldd	r31, Y+7	; 0x07
    126c:	00 e0       	ldi	r16, 0x00	; 0
    126e:	10 e0       	ldi	r17, 0x00	; 0
    1270:	98 01       	movw	r18, r16
    1272:	ac 01       	movw	r20, r24
    1274:	bd 01       	movw	r22, r26
    1276:	cf 01       	movw	r24, r30
    1278:	0e 94 1f 07 	call	0xe3e	; 0xe3e <put_fat>
    127c:	89 83       	std	Y+1, r24	; 0x01
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	88 23       	and	r24, r24
    1282:	09 f0       	breq	.+2      	; 0x1286 <remove_chain+0xe6>
    1284:	3e c0       	rjmp	.+124    	; 0x1302 <remove_chain+0x162>
    1286:	8e 81       	ldd	r24, Y+6	; 0x06
    1288:	9f 81       	ldd	r25, Y+7	; 0x07
    128a:	fc 01       	movw	r30, r24
    128c:	86 85       	ldd	r24, Z+14	; 0x0e
    128e:	97 85       	ldd	r25, Z+15	; 0x0f
    1290:	a0 89       	ldd	r26, Z+16	; 0x10
    1292:	b1 89       	ldd	r27, Z+17	; 0x11
    1294:	8f 3f       	cpi	r24, 0xFF	; 255
    1296:	9f 4f       	sbci	r25, 0xFF	; 255
    1298:	af 4f       	sbci	r26, 0xFF	; 255
    129a:	bf 4f       	sbci	r27, 0xFF	; 255
    129c:	b1 f0       	breq	.+44     	; 0x12ca <remove_chain+0x12a>
    129e:	8e 81       	ldd	r24, Y+6	; 0x06
    12a0:	9f 81       	ldd	r25, Y+7	; 0x07
    12a2:	fc 01       	movw	r30, r24
    12a4:	86 85       	ldd	r24, Z+14	; 0x0e
    12a6:	97 85       	ldd	r25, Z+15	; 0x0f
    12a8:	a0 89       	ldd	r26, Z+16	; 0x10
    12aa:	b1 89       	ldd	r27, Z+17	; 0x11
    12ac:	01 96       	adiw	r24, 0x01	; 1
    12ae:	a1 1d       	adc	r26, r1
    12b0:	b1 1d       	adc	r27, r1
    12b2:	2e 81       	ldd	r18, Y+6	; 0x06
    12b4:	3f 81       	ldd	r19, Y+7	; 0x07
    12b6:	f9 01       	movw	r30, r18
    12b8:	86 87       	std	Z+14, r24	; 0x0e
    12ba:	97 87       	std	Z+15, r25	; 0x0f
    12bc:	a0 8b       	std	Z+16, r26	; 0x10
    12be:	b1 8b       	std	Z+17, r27	; 0x11
    12c0:	8e 81       	ldd	r24, Y+6	; 0x06
    12c2:	9f 81       	ldd	r25, Y+7	; 0x07
    12c4:	21 e0       	ldi	r18, 0x01	; 1
    12c6:	fc 01       	movw	r30, r24
    12c8:	25 83       	std	Z+5, r18	; 0x05
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	9b 81       	ldd	r25, Y+3	; 0x03
    12ce:	ac 81       	ldd	r26, Y+4	; 0x04
    12d0:	bd 81       	ldd	r27, Y+5	; 0x05
    12d2:	88 87       	std	Y+8, r24	; 0x08
    12d4:	99 87       	std	Y+9, r25	; 0x09
    12d6:	aa 87       	std	Y+10, r26	; 0x0a
    12d8:	bb 87       	std	Y+11, r27	; 0x0b
    12da:	8e 81       	ldd	r24, Y+6	; 0x06
    12dc:	9f 81       	ldd	r25, Y+7	; 0x07
    12de:	fc 01       	movw	r30, r24
    12e0:	22 8d       	ldd	r18, Z+26	; 0x1a
    12e2:	33 8d       	ldd	r19, Z+27	; 0x1b
    12e4:	44 8d       	ldd	r20, Z+28	; 0x1c
    12e6:	55 8d       	ldd	r21, Z+29	; 0x1d
    12e8:	88 85       	ldd	r24, Y+8	; 0x08
    12ea:	99 85       	ldd	r25, Y+9	; 0x09
    12ec:	aa 85       	ldd	r26, Y+10	; 0x0a
    12ee:	bb 85       	ldd	r27, Y+11	; 0x0b
    12f0:	82 17       	cp	r24, r18
    12f2:	93 07       	cpc	r25, r19
    12f4:	a4 07       	cpc	r26, r20
    12f6:	b5 07       	cpc	r27, r21
    12f8:	08 f4       	brcc	.+2      	; 0x12fc <remove_chain+0x15c>
    12fa:	81 cf       	rjmp	.-254    	; 0x11fe <remove_chain+0x5e>
    12fc:	03 c0       	rjmp	.+6      	; 0x1304 <remove_chain+0x164>
    12fe:	00 00       	nop
    1300:	01 c0       	rjmp	.+2      	; 0x1304 <remove_chain+0x164>
    1302:	00 00       	nop
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	2b 96       	adiw	r28, 0x0b	; 11
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	cd bf       	out	0x3d, r28	; 61
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	1f 91       	pop	r17
    1318:	0f 91       	pop	r16
    131a:	08 95       	ret

0000131c <create_chain>:
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
    1320:	cf 93       	push	r28
    1322:	df 93       	push	r29
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	63 97       	sbiw	r28, 0x13	; 19
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	f8 94       	cli
    132e:	de bf       	out	0x3e, r29	; 62
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	cd bf       	out	0x3d, r28	; 61
    1334:	9f 87       	std	Y+15, r25	; 0x0f
    1336:	8e 87       	std	Y+14, r24	; 0x0e
    1338:	48 8b       	std	Y+16, r20	; 0x10
    133a:	59 8b       	std	Y+17, r21	; 0x11
    133c:	6a 8b       	std	Y+18, r22	; 0x12
    133e:	7b 8b       	std	Y+19, r23	; 0x13
    1340:	88 89       	ldd	r24, Y+16	; 0x10
    1342:	99 89       	ldd	r25, Y+17	; 0x11
    1344:	aa 89       	ldd	r26, Y+18	; 0x12
    1346:	bb 89       	ldd	r27, Y+19	; 0x13
    1348:	89 2b       	or	r24, r25
    134a:	8a 2b       	or	r24, r26
    134c:	8b 2b       	or	r24, r27
    134e:	69 f5       	brne	.+90     	; 0x13aa <create_chain+0x8e>
    1350:	8e 85       	ldd	r24, Y+14	; 0x0e
    1352:	9f 85       	ldd	r25, Y+15	; 0x0f
    1354:	fc 01       	movw	r30, r24
    1356:	82 85       	ldd	r24, Z+10	; 0x0a
    1358:	93 85       	ldd	r25, Z+11	; 0x0b
    135a:	a4 85       	ldd	r26, Z+12	; 0x0c
    135c:	b5 85       	ldd	r27, Z+13	; 0x0d
    135e:	8d 83       	std	Y+5, r24	; 0x05
    1360:	9e 83       	std	Y+6, r25	; 0x06
    1362:	af 83       	std	Y+7, r26	; 0x07
    1364:	b8 87       	std	Y+8, r27	; 0x08
    1366:	8d 81       	ldd	r24, Y+5	; 0x05
    1368:	9e 81       	ldd	r25, Y+6	; 0x06
    136a:	af 81       	ldd	r26, Y+7	; 0x07
    136c:	b8 85       	ldd	r27, Y+8	; 0x08
    136e:	89 2b       	or	r24, r25
    1370:	8a 2b       	or	r24, r26
    1372:	8b 2b       	or	r24, r27
    1374:	89 f0       	breq	.+34     	; 0x1398 <create_chain+0x7c>
    1376:	8e 85       	ldd	r24, Y+14	; 0x0e
    1378:	9f 85       	ldd	r25, Y+15	; 0x0f
    137a:	fc 01       	movw	r30, r24
    137c:	22 8d       	ldd	r18, Z+26	; 0x1a
    137e:	33 8d       	ldd	r19, Z+27	; 0x1b
    1380:	44 8d       	ldd	r20, Z+28	; 0x1c
    1382:	55 8d       	ldd	r21, Z+29	; 0x1d
    1384:	8d 81       	ldd	r24, Y+5	; 0x05
    1386:	9e 81       	ldd	r25, Y+6	; 0x06
    1388:	af 81       	ldd	r26, Y+7	; 0x07
    138a:	b8 85       	ldd	r27, Y+8	; 0x08
    138c:	82 17       	cp	r24, r18
    138e:	93 07       	cpc	r25, r19
    1390:	a4 07       	cpc	r26, r20
    1392:	b5 07       	cpc	r27, r21
    1394:	08 f4       	brcc	.+2      	; 0x1398 <create_chain+0x7c>
    1396:	44 c0       	rjmp	.+136    	; 0x1420 <create_chain+0x104>
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	a0 e0       	ldi	r26, 0x00	; 0
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	8d 83       	std	Y+5, r24	; 0x05
    13a2:	9e 83       	std	Y+6, r25	; 0x06
    13a4:	af 83       	std	Y+7, r26	; 0x07
    13a6:	b8 87       	std	Y+8, r27	; 0x08
    13a8:	3b c0       	rjmp	.+118    	; 0x1420 <create_chain+0x104>
    13aa:	88 89       	ldd	r24, Y+16	; 0x10
    13ac:	99 89       	ldd	r25, Y+17	; 0x11
    13ae:	aa 89       	ldd	r26, Y+18	; 0x12
    13b0:	bb 89       	ldd	r27, Y+19	; 0x13
    13b2:	2e 85       	ldd	r18, Y+14	; 0x0e
    13b4:	3f 85       	ldd	r19, Y+15	; 0x0f
    13b6:	ac 01       	movw	r20, r24
    13b8:	bd 01       	movw	r22, r26
    13ba:	c9 01       	movw	r24, r18
    13bc:	0e 94 c2 05 	call	0xb84	; 0xb84 <get_fat>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	8a 87       	std	Y+10, r24	; 0x0a
    13c6:	9b 87       	std	Y+11, r25	; 0x0b
    13c8:	ac 87       	std	Y+12, r26	; 0x0c
    13ca:	bd 87       	std	Y+13, r27	; 0x0d
    13cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    13ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    13d0:	ac 85       	ldd	r26, Y+12	; 0x0c
    13d2:	bd 85       	ldd	r27, Y+13	; 0x0d
    13d4:	02 97       	sbiw	r24, 0x02	; 2
    13d6:	a1 05       	cpc	r26, r1
    13d8:	b1 05       	cpc	r27, r1
    13da:	28 f4       	brcc	.+10     	; 0x13e6 <create_chain+0xca>
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	a0 e0       	ldi	r26, 0x00	; 0
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	0c c1       	rjmp	.+536    	; 0x15fe <create_chain+0x2e2>
    13e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    13e8:	9f 85       	ldd	r25, Y+15	; 0x0f
    13ea:	fc 01       	movw	r30, r24
    13ec:	22 8d       	ldd	r18, Z+26	; 0x1a
    13ee:	33 8d       	ldd	r19, Z+27	; 0x1b
    13f0:	44 8d       	ldd	r20, Z+28	; 0x1c
    13f2:	55 8d       	ldd	r21, Z+29	; 0x1d
    13f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    13f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    13f8:	ac 85       	ldd	r26, Y+12	; 0x0c
    13fa:	bd 85       	ldd	r27, Y+13	; 0x0d
    13fc:	82 17       	cp	r24, r18
    13fe:	93 07       	cpc	r25, r19
    1400:	a4 07       	cpc	r26, r20
    1402:	b5 07       	cpc	r27, r21
    1404:	28 f4       	brcc	.+10     	; 0x1410 <create_chain+0xf4>
    1406:	8a 85       	ldd	r24, Y+10	; 0x0a
    1408:	9b 85       	ldd	r25, Y+11	; 0x0b
    140a:	ac 85       	ldd	r26, Y+12	; 0x0c
    140c:	bd 85       	ldd	r27, Y+13	; 0x0d
    140e:	f7 c0       	rjmp	.+494    	; 0x15fe <create_chain+0x2e2>
    1410:	88 89       	ldd	r24, Y+16	; 0x10
    1412:	99 89       	ldd	r25, Y+17	; 0x11
    1414:	aa 89       	ldd	r26, Y+18	; 0x12
    1416:	bb 89       	ldd	r27, Y+19	; 0x13
    1418:	8d 83       	std	Y+5, r24	; 0x05
    141a:	9e 83       	std	Y+6, r25	; 0x06
    141c:	af 83       	std	Y+7, r26	; 0x07
    141e:	b8 87       	std	Y+8, r27	; 0x08
    1420:	8d 81       	ldd	r24, Y+5	; 0x05
    1422:	9e 81       	ldd	r25, Y+6	; 0x06
    1424:	af 81       	ldd	r26, Y+7	; 0x07
    1426:	b8 85       	ldd	r27, Y+8	; 0x08
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	9a 83       	std	Y+2, r25	; 0x02
    142c:	ab 83       	std	Y+3, r26	; 0x03
    142e:	bc 83       	std	Y+4, r27	; 0x04
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	9a 81       	ldd	r25, Y+2	; 0x02
    1434:	ab 81       	ldd	r26, Y+3	; 0x03
    1436:	bc 81       	ldd	r27, Y+4	; 0x04
    1438:	01 96       	adiw	r24, 0x01	; 1
    143a:	a1 1d       	adc	r26, r1
    143c:	b1 1d       	adc	r27, r1
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	9a 83       	std	Y+2, r25	; 0x02
    1442:	ab 83       	std	Y+3, r26	; 0x03
    1444:	bc 83       	std	Y+4, r27	; 0x04
    1446:	8e 85       	ldd	r24, Y+14	; 0x0e
    1448:	9f 85       	ldd	r25, Y+15	; 0x0f
    144a:	fc 01       	movw	r30, r24
    144c:	22 8d       	ldd	r18, Z+26	; 0x1a
    144e:	33 8d       	ldd	r19, Z+27	; 0x1b
    1450:	44 8d       	ldd	r20, Z+28	; 0x1c
    1452:	55 8d       	ldd	r21, Z+29	; 0x1d
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	9a 81       	ldd	r25, Y+2	; 0x02
    1458:	ab 81       	ldd	r26, Y+3	; 0x03
    145a:	bc 81       	ldd	r27, Y+4	; 0x04
    145c:	82 17       	cp	r24, r18
    145e:	93 07       	cpc	r25, r19
    1460:	a4 07       	cpc	r26, r20
    1462:	b5 07       	cpc	r27, r21
    1464:	c8 f0       	brcs	.+50     	; 0x1498 <create_chain+0x17c>
    1466:	82 e0       	ldi	r24, 0x02	; 2
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	a0 e0       	ldi	r26, 0x00	; 0
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	89 83       	std	Y+1, r24	; 0x01
    1470:	9a 83       	std	Y+2, r25	; 0x02
    1472:	ab 83       	std	Y+3, r26	; 0x03
    1474:	bc 83       	std	Y+4, r27	; 0x04
    1476:	29 81       	ldd	r18, Y+1	; 0x01
    1478:	3a 81       	ldd	r19, Y+2	; 0x02
    147a:	4b 81       	ldd	r20, Y+3	; 0x03
    147c:	5c 81       	ldd	r21, Y+4	; 0x04
    147e:	8d 81       	ldd	r24, Y+5	; 0x05
    1480:	9e 81       	ldd	r25, Y+6	; 0x06
    1482:	af 81       	ldd	r26, Y+7	; 0x07
    1484:	b8 85       	ldd	r27, Y+8	; 0x08
    1486:	82 17       	cp	r24, r18
    1488:	93 07       	cpc	r25, r19
    148a:	a4 07       	cpc	r26, r20
    148c:	b5 07       	cpc	r27, r21
    148e:	20 f4       	brcc	.+8      	; 0x1498 <create_chain+0x17c>
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	dc 01       	movw	r26, r24
    1496:	b3 c0       	rjmp	.+358    	; 0x15fe <create_chain+0x2e2>
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	9a 81       	ldd	r25, Y+2	; 0x02
    149c:	ab 81       	ldd	r26, Y+3	; 0x03
    149e:	bc 81       	ldd	r27, Y+4	; 0x04
    14a0:	2e 85       	ldd	r18, Y+14	; 0x0e
    14a2:	3f 85       	ldd	r19, Y+15	; 0x0f
    14a4:	ac 01       	movw	r20, r24
    14a6:	bd 01       	movw	r22, r26
    14a8:	c9 01       	movw	r24, r18
    14aa:	0e 94 c2 05 	call	0xb84	; 0xb84 <get_fat>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	8a 87       	std	Y+10, r24	; 0x0a
    14b4:	9b 87       	std	Y+11, r25	; 0x0b
    14b6:	ac 87       	std	Y+12, r26	; 0x0c
    14b8:	bd 87       	std	Y+13, r27	; 0x0d
    14ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    14bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    14be:	ac 85       	ldd	r26, Y+12	; 0x0c
    14c0:	bd 85       	ldd	r27, Y+13	; 0x0d
    14c2:	89 2b       	or	r24, r25
    14c4:	8a 2b       	or	r24, r26
    14c6:	8b 2b       	or	r24, r27
    14c8:	41 f1       	breq	.+80     	; 0x151a <create_chain+0x1fe>
    14ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    14cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    14ce:	ac 85       	ldd	r26, Y+12	; 0x0c
    14d0:	bd 85       	ldd	r27, Y+13	; 0x0d
    14d2:	8f 3f       	cpi	r24, 0xFF	; 255
    14d4:	9f 4f       	sbci	r25, 0xFF	; 255
    14d6:	af 4f       	sbci	r26, 0xFF	; 255
    14d8:	bf 4f       	sbci	r27, 0xFF	; 255
    14da:	41 f0       	breq	.+16     	; 0x14ec <create_chain+0x1d0>
    14dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    14de:	9b 85       	ldd	r25, Y+11	; 0x0b
    14e0:	ac 85       	ldd	r26, Y+12	; 0x0c
    14e2:	bd 85       	ldd	r27, Y+13	; 0x0d
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	a1 05       	cpc	r26, r1
    14e8:	b1 05       	cpc	r27, r1
    14ea:	29 f4       	brne	.+10     	; 0x14f6 <create_chain+0x1da>
    14ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    14ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    14f0:	ac 85       	ldd	r26, Y+12	; 0x0c
    14f2:	bd 85       	ldd	r27, Y+13	; 0x0d
    14f4:	84 c0       	rjmp	.+264    	; 0x15fe <create_chain+0x2e2>
    14f6:	29 81       	ldd	r18, Y+1	; 0x01
    14f8:	3a 81       	ldd	r19, Y+2	; 0x02
    14fa:	4b 81       	ldd	r20, Y+3	; 0x03
    14fc:	5c 81       	ldd	r21, Y+4	; 0x04
    14fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1500:	9e 81       	ldd	r25, Y+6	; 0x06
    1502:	af 81       	ldd	r26, Y+7	; 0x07
    1504:	b8 85       	ldd	r27, Y+8	; 0x08
    1506:	28 17       	cp	r18, r24
    1508:	39 07       	cpc	r19, r25
    150a:	4a 07       	cpc	r20, r26
    150c:	5b 07       	cpc	r21, r27
    150e:	09 f0       	breq	.+2      	; 0x1512 <create_chain+0x1f6>
    1510:	8f cf       	rjmp	.-226    	; 0x1430 <create_chain+0x114>
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	dc 01       	movw	r26, r24
    1518:	72 c0       	rjmp	.+228    	; 0x15fe <create_chain+0x2e2>
    151a:	00 00       	nop
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	9a 81       	ldd	r25, Y+2	; 0x02
    1520:	ab 81       	ldd	r26, Y+3	; 0x03
    1522:	bc 81       	ldd	r27, Y+4	; 0x04
    1524:	ee 85       	ldd	r30, Y+14	; 0x0e
    1526:	ff 85       	ldd	r31, Y+15	; 0x0f
    1528:	0f ef       	ldi	r16, 0xFF	; 255
    152a:	1f ef       	ldi	r17, 0xFF	; 255
    152c:	2f ef       	ldi	r18, 0xFF	; 255
    152e:	3f e0       	ldi	r19, 0x0F	; 15
    1530:	ac 01       	movw	r20, r24
    1532:	bd 01       	movw	r22, r26
    1534:	cf 01       	movw	r24, r30
    1536:	0e 94 1f 07 	call	0xe3e	; 0xe3e <put_fat>
    153a:	89 87       	std	Y+9, r24	; 0x09
    153c:	89 85       	ldd	r24, Y+9	; 0x09
    153e:	88 23       	and	r24, r24
    1540:	d1 f4       	brne	.+52     	; 0x1576 <create_chain+0x25a>
    1542:	88 89       	ldd	r24, Y+16	; 0x10
    1544:	99 89       	ldd	r25, Y+17	; 0x11
    1546:	aa 89       	ldd	r26, Y+18	; 0x12
    1548:	bb 89       	ldd	r27, Y+19	; 0x13
    154a:	89 2b       	or	r24, r25
    154c:	8a 2b       	or	r24, r26
    154e:	8b 2b       	or	r24, r27
    1550:	91 f0       	breq	.+36     	; 0x1576 <create_chain+0x25a>
    1552:	29 81       	ldd	r18, Y+1	; 0x01
    1554:	3a 81       	ldd	r19, Y+2	; 0x02
    1556:	4b 81       	ldd	r20, Y+3	; 0x03
    1558:	5c 81       	ldd	r21, Y+4	; 0x04
    155a:	88 89       	ldd	r24, Y+16	; 0x10
    155c:	99 89       	ldd	r25, Y+17	; 0x11
    155e:	aa 89       	ldd	r26, Y+18	; 0x12
    1560:	bb 89       	ldd	r27, Y+19	; 0x13
    1562:	ee 85       	ldd	r30, Y+14	; 0x0e
    1564:	ff 85       	ldd	r31, Y+15	; 0x0f
    1566:	89 01       	movw	r16, r18
    1568:	9a 01       	movw	r18, r20
    156a:	ac 01       	movw	r20, r24
    156c:	bd 01       	movw	r22, r26
    156e:	cf 01       	movw	r24, r30
    1570:	0e 94 1f 07 	call	0xe3e	; 0xe3e <put_fat>
    1574:	89 87       	std	Y+9, r24	; 0x09
    1576:	89 85       	ldd	r24, Y+9	; 0x09
    1578:	88 23       	and	r24, r24
    157a:	71 f5       	brne	.+92     	; 0x15d8 <create_chain+0x2bc>
    157c:	2e 85       	ldd	r18, Y+14	; 0x0e
    157e:	3f 85       	ldd	r19, Y+15	; 0x0f
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	9a 81       	ldd	r25, Y+2	; 0x02
    1584:	ab 81       	ldd	r26, Y+3	; 0x03
    1586:	bc 81       	ldd	r27, Y+4	; 0x04
    1588:	f9 01       	movw	r30, r18
    158a:	82 87       	std	Z+10, r24	; 0x0a
    158c:	93 87       	std	Z+11, r25	; 0x0b
    158e:	a4 87       	std	Z+12, r26	; 0x0c
    1590:	b5 87       	std	Z+13, r27	; 0x0d
    1592:	8e 85       	ldd	r24, Y+14	; 0x0e
    1594:	9f 85       	ldd	r25, Y+15	; 0x0f
    1596:	fc 01       	movw	r30, r24
    1598:	86 85       	ldd	r24, Z+14	; 0x0e
    159a:	97 85       	ldd	r25, Z+15	; 0x0f
    159c:	a0 89       	ldd	r26, Z+16	; 0x10
    159e:	b1 89       	ldd	r27, Z+17	; 0x11
    15a0:	8f 3f       	cpi	r24, 0xFF	; 255
    15a2:	9f 4f       	sbci	r25, 0xFF	; 255
    15a4:	af 4f       	sbci	r26, 0xFF	; 255
    15a6:	bf 4f       	sbci	r27, 0xFF	; 255
    15a8:	31 f1       	breq	.+76     	; 0x15f6 <create_chain+0x2da>
    15aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    15ac:	9f 85       	ldd	r25, Y+15	; 0x0f
    15ae:	fc 01       	movw	r30, r24
    15b0:	86 85       	ldd	r24, Z+14	; 0x0e
    15b2:	97 85       	ldd	r25, Z+15	; 0x0f
    15b4:	a0 89       	ldd	r26, Z+16	; 0x10
    15b6:	b1 89       	ldd	r27, Z+17	; 0x11
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	a1 09       	sbc	r26, r1
    15bc:	b1 09       	sbc	r27, r1
    15be:	2e 85       	ldd	r18, Y+14	; 0x0e
    15c0:	3f 85       	ldd	r19, Y+15	; 0x0f
    15c2:	f9 01       	movw	r30, r18
    15c4:	86 87       	std	Z+14, r24	; 0x0e
    15c6:	97 87       	std	Z+15, r25	; 0x0f
    15c8:	a0 8b       	std	Z+16, r26	; 0x10
    15ca:	b1 8b       	std	Z+17, r27	; 0x11
    15cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    15ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    15d0:	21 e0       	ldi	r18, 0x01	; 1
    15d2:	fc 01       	movw	r30, r24
    15d4:	25 83       	std	Z+5, r18	; 0x05
    15d6:	0f c0       	rjmp	.+30     	; 0x15f6 <create_chain+0x2da>
    15d8:	89 85       	ldd	r24, Y+9	; 0x09
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	21 f4       	brne	.+8      	; 0x15e6 <create_chain+0x2ca>
    15de:	8f ef       	ldi	r24, 0xFF	; 255
    15e0:	9f ef       	ldi	r25, 0xFF	; 255
    15e2:	dc 01       	movw	r26, r24
    15e4:	04 c0       	rjmp	.+8      	; 0x15ee <create_chain+0x2d2>
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	a0 e0       	ldi	r26, 0x00	; 0
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	9a 83       	std	Y+2, r25	; 0x02
    15f2:	ab 83       	std	Y+3, r26	; 0x03
    15f4:	bc 83       	std	Y+4, r27	; 0x04
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	9a 81       	ldd	r25, Y+2	; 0x02
    15fa:	ab 81       	ldd	r26, Y+3	; 0x03
    15fc:	bc 81       	ldd	r27, Y+4	; 0x04
    15fe:	bc 01       	movw	r22, r24
    1600:	cd 01       	movw	r24, r26
    1602:	63 96       	adiw	r28, 0x13	; 19
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	08 95       	ret

00001618 <dir_sdi>:
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	2a 97       	sbiw	r28, 0x0a	; 10
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	de bf       	out	0x3e, r29	; 62
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	98 87       	std	Y+8, r25	; 0x08
    162e:	8f 83       	std	Y+7, r24	; 0x07
    1630:	7a 87       	std	Y+10, r23	; 0x0a
    1632:	69 87       	std	Y+9, r22	; 0x09
    1634:	8f 81       	ldd	r24, Y+7	; 0x07
    1636:	98 85       	ldd	r25, Y+8	; 0x08
    1638:	29 85       	ldd	r18, Y+9	; 0x09
    163a:	3a 85       	ldd	r19, Y+10	; 0x0a
    163c:	fc 01       	movw	r30, r24
    163e:	35 83       	std	Z+5, r19	; 0x05
    1640:	24 83       	std	Z+4, r18	; 0x04
    1642:	8f 81       	ldd	r24, Y+7	; 0x07
    1644:	98 85       	ldd	r25, Y+8	; 0x08
    1646:	fc 01       	movw	r30, r24
    1648:	86 81       	ldd	r24, Z+6	; 0x06
    164a:	97 81       	ldd	r25, Z+7	; 0x07
    164c:	a0 85       	ldd	r26, Z+8	; 0x08
    164e:	b1 85       	ldd	r27, Z+9	; 0x09
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	9a 83       	std	Y+2, r25	; 0x02
    1654:	ab 83       	std	Y+3, r26	; 0x03
    1656:	bc 83       	std	Y+4, r27	; 0x04
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	9a 81       	ldd	r25, Y+2	; 0x02
    165c:	ab 81       	ldd	r26, Y+3	; 0x03
    165e:	bc 81       	ldd	r27, Y+4	; 0x04
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	a1 05       	cpc	r26, r1
    1664:	b1 05       	cpc	r27, r1
    1666:	99 f0       	breq	.+38     	; 0x168e <dir_sdi+0x76>
    1668:	8f 81       	ldd	r24, Y+7	; 0x07
    166a:	98 85       	ldd	r25, Y+8	; 0x08
    166c:	fc 01       	movw	r30, r24
    166e:	80 81       	ld	r24, Z
    1670:	91 81       	ldd	r25, Z+1	; 0x01
    1672:	fc 01       	movw	r30, r24
    1674:	22 8d       	ldd	r18, Z+26	; 0x1a
    1676:	33 8d       	ldd	r19, Z+27	; 0x1b
    1678:	44 8d       	ldd	r20, Z+28	; 0x1c
    167a:	55 8d       	ldd	r21, Z+29	; 0x1d
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	9a 81       	ldd	r25, Y+2	; 0x02
    1680:	ab 81       	ldd	r26, Y+3	; 0x03
    1682:	bc 81       	ldd	r27, Y+4	; 0x04
    1684:	82 17       	cp	r24, r18
    1686:	93 07       	cpc	r25, r19
    1688:	a4 07       	cpc	r26, r20
    168a:	b5 07       	cpc	r27, r21
    168c:	10 f0       	brcs	.+4      	; 0x1692 <dir_sdi+0x7a>
    168e:	82 e0       	ldi	r24, 0x02	; 2
    1690:	0f c1       	rjmp	.+542    	; 0x18b0 <dir_sdi+0x298>
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	9a 81       	ldd	r25, Y+2	; 0x02
    1696:	ab 81       	ldd	r26, Y+3	; 0x03
    1698:	bc 81       	ldd	r27, Y+4	; 0x04
    169a:	89 2b       	or	r24, r25
    169c:	8a 2b       	or	r24, r26
    169e:	8b 2b       	or	r24, r27
    16a0:	b9 f4       	brne	.+46     	; 0x16d0 <dir_sdi+0xb8>
    16a2:	8f 81       	ldd	r24, Y+7	; 0x07
    16a4:	98 85       	ldd	r25, Y+8	; 0x08
    16a6:	fc 01       	movw	r30, r24
    16a8:	80 81       	ld	r24, Z
    16aa:	91 81       	ldd	r25, Z+1	; 0x01
    16ac:	fc 01       	movw	r30, r24
    16ae:	80 81       	ld	r24, Z
    16b0:	83 30       	cpi	r24, 0x03	; 3
    16b2:	71 f4       	brne	.+28     	; 0x16d0 <dir_sdi+0xb8>
    16b4:	8f 81       	ldd	r24, Y+7	; 0x07
    16b6:	98 85       	ldd	r25, Y+8	; 0x08
    16b8:	fc 01       	movw	r30, r24
    16ba:	80 81       	ld	r24, Z
    16bc:	91 81       	ldd	r25, Z+1	; 0x01
    16be:	fc 01       	movw	r30, r24
    16c0:	86 a1       	ldd	r24, Z+38	; 0x26
    16c2:	97 a1       	ldd	r25, Z+39	; 0x27
    16c4:	a0 a5       	ldd	r26, Z+40	; 0x28
    16c6:	b1 a5       	ldd	r27, Z+41	; 0x29
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	9a 83       	std	Y+2, r25	; 0x02
    16cc:	ab 83       	std	Y+3, r26	; 0x03
    16ce:	bc 83       	std	Y+4, r27	; 0x04
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	9a 81       	ldd	r25, Y+2	; 0x02
    16d4:	ab 81       	ldd	r26, Y+3	; 0x03
    16d6:	bc 81       	ldd	r27, Y+4	; 0x04
    16d8:	89 2b       	or	r24, r25
    16da:	8a 2b       	or	r24, r26
    16dc:	8b 2b       	or	r24, r27
    16de:	d9 f5       	brne	.+118    	; 0x1756 <dir_sdi+0x13e>
    16e0:	2f 81       	ldd	r18, Y+7	; 0x07
    16e2:	38 85       	ldd	r19, Y+8	; 0x08
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	9a 81       	ldd	r25, Y+2	; 0x02
    16e8:	ab 81       	ldd	r26, Y+3	; 0x03
    16ea:	bc 81       	ldd	r27, Y+4	; 0x04
    16ec:	f9 01       	movw	r30, r18
    16ee:	82 87       	std	Z+10, r24	; 0x0a
    16f0:	93 87       	std	Z+11, r25	; 0x0b
    16f2:	a4 87       	std	Z+12, r26	; 0x0c
    16f4:	b5 87       	std	Z+13, r27	; 0x0d
    16f6:	8f 81       	ldd	r24, Y+7	; 0x07
    16f8:	98 85       	ldd	r25, Y+8	; 0x08
    16fa:	fc 01       	movw	r30, r24
    16fc:	80 81       	ld	r24, Z
    16fe:	91 81       	ldd	r25, Z+1	; 0x01
    1700:	fc 01       	movw	r30, r24
    1702:	20 85       	ldd	r18, Z+8	; 0x08
    1704:	31 85       	ldd	r19, Z+9	; 0x09
    1706:	89 85       	ldd	r24, Y+9	; 0x09
    1708:	9a 85       	ldd	r25, Y+10	; 0x0a
    170a:	82 17       	cp	r24, r18
    170c:	93 07       	cpc	r25, r19
    170e:	10 f0       	brcs	.+4      	; 0x1714 <dir_sdi+0xfc>
    1710:	82 e0       	ldi	r24, 0x02	; 2
    1712:	ce c0       	rjmp	.+412    	; 0x18b0 <dir_sdi+0x298>
    1714:	8f 81       	ldd	r24, Y+7	; 0x07
    1716:	98 85       	ldd	r25, Y+8	; 0x08
    1718:	fc 01       	movw	r30, r24
    171a:	80 81       	ld	r24, Z
    171c:	91 81       	ldd	r25, Z+1	; 0x01
    171e:	fc 01       	movw	r30, r24
    1720:	26 a1       	ldd	r18, Z+38	; 0x26
    1722:	37 a1       	ldd	r19, Z+39	; 0x27
    1724:	40 a5       	ldd	r20, Z+40	; 0x28
    1726:	51 a5       	ldd	r21, Z+41	; 0x29
    1728:	89 85       	ldd	r24, Y+9	; 0x09
    172a:	9a 85       	ldd	r25, Y+10	; 0x0a
    172c:	92 95       	swap	r25
    172e:	82 95       	swap	r24
    1730:	8f 70       	andi	r24, 0x0F	; 15
    1732:	89 27       	eor	r24, r25
    1734:	9f 70       	andi	r25, 0x0F	; 15
    1736:	89 27       	eor	r24, r25
    1738:	cc 01       	movw	r24, r24
    173a:	a0 e0       	ldi	r26, 0x00	; 0
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	82 0f       	add	r24, r18
    1740:	93 1f       	adc	r25, r19
    1742:	a4 1f       	adc	r26, r20
    1744:	b5 1f       	adc	r27, r21
    1746:	2f 81       	ldd	r18, Y+7	; 0x07
    1748:	38 85       	ldd	r19, Y+8	; 0x08
    174a:	f9 01       	movw	r30, r18
    174c:	86 87       	std	Z+14, r24	; 0x0e
    174e:	97 87       	std	Z+15, r25	; 0x0f
    1750:	a0 8b       	std	Z+16, r26	; 0x10
    1752:	b1 8b       	std	Z+17, r27	; 0x11
    1754:	91 c0       	rjmp	.+290    	; 0x1878 <dir_sdi+0x260>
    1756:	8f 81       	ldd	r24, Y+7	; 0x07
    1758:	98 85       	ldd	r25, Y+8	; 0x08
    175a:	fc 01       	movw	r30, r24
    175c:	80 81       	ld	r24, Z
    175e:	91 81       	ldd	r25, Z+1	; 0x01
    1760:	fc 01       	movw	r30, r24
    1762:	82 81       	ldd	r24, Z+2	; 0x02
    1764:	88 2f       	mov	r24, r24
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	82 95       	swap	r24
    176a:	92 95       	swap	r25
    176c:	90 7f       	andi	r25, 0xF0	; 240
    176e:	98 27       	eor	r25, r24
    1770:	80 7f       	andi	r24, 0xF0	; 240
    1772:	98 27       	eor	r25, r24
    1774:	9e 83       	std	Y+6, r25	; 0x06
    1776:	8d 83       	std	Y+5, r24	; 0x05
    1778:	46 c0       	rjmp	.+140    	; 0x1806 <dir_sdi+0x1ee>
    177a:	8f 81       	ldd	r24, Y+7	; 0x07
    177c:	98 85       	ldd	r25, Y+8	; 0x08
    177e:	fc 01       	movw	r30, r24
    1780:	20 81       	ld	r18, Z
    1782:	31 81       	ldd	r19, Z+1	; 0x01
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	9a 81       	ldd	r25, Y+2	; 0x02
    1788:	ab 81       	ldd	r26, Y+3	; 0x03
    178a:	bc 81       	ldd	r27, Y+4	; 0x04
    178c:	ac 01       	movw	r20, r24
    178e:	bd 01       	movw	r22, r26
    1790:	c9 01       	movw	r24, r18
    1792:	0e 94 c2 05 	call	0xb84	; 0xb84 <get_fat>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	89 83       	std	Y+1, r24	; 0x01
    179c:	9a 83       	std	Y+2, r25	; 0x02
    179e:	ab 83       	std	Y+3, r26	; 0x03
    17a0:	bc 83       	std	Y+4, r27	; 0x04
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	9a 81       	ldd	r25, Y+2	; 0x02
    17a6:	ab 81       	ldd	r26, Y+3	; 0x03
    17a8:	bc 81       	ldd	r27, Y+4	; 0x04
    17aa:	8f 3f       	cpi	r24, 0xFF	; 255
    17ac:	9f 4f       	sbci	r25, 0xFF	; 255
    17ae:	af 4f       	sbci	r26, 0xFF	; 255
    17b0:	bf 4f       	sbci	r27, 0xFF	; 255
    17b2:	11 f4       	brne	.+4      	; 0x17b8 <dir_sdi+0x1a0>
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	7c c0       	rjmp	.+248    	; 0x18b0 <dir_sdi+0x298>
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	9a 81       	ldd	r25, Y+2	; 0x02
    17bc:	ab 81       	ldd	r26, Y+3	; 0x03
    17be:	bc 81       	ldd	r27, Y+4	; 0x04
    17c0:	02 97       	sbiw	r24, 0x02	; 2
    17c2:	a1 05       	cpc	r26, r1
    17c4:	b1 05       	cpc	r27, r1
    17c6:	98 f0       	brcs	.+38     	; 0x17ee <dir_sdi+0x1d6>
    17c8:	8f 81       	ldd	r24, Y+7	; 0x07
    17ca:	98 85       	ldd	r25, Y+8	; 0x08
    17cc:	fc 01       	movw	r30, r24
    17ce:	80 81       	ld	r24, Z
    17d0:	91 81       	ldd	r25, Z+1	; 0x01
    17d2:	fc 01       	movw	r30, r24
    17d4:	22 8d       	ldd	r18, Z+26	; 0x1a
    17d6:	33 8d       	ldd	r19, Z+27	; 0x1b
    17d8:	44 8d       	ldd	r20, Z+28	; 0x1c
    17da:	55 8d       	ldd	r21, Z+29	; 0x1d
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	9a 81       	ldd	r25, Y+2	; 0x02
    17e0:	ab 81       	ldd	r26, Y+3	; 0x03
    17e2:	bc 81       	ldd	r27, Y+4	; 0x04
    17e4:	82 17       	cp	r24, r18
    17e6:	93 07       	cpc	r25, r19
    17e8:	a4 07       	cpc	r26, r20
    17ea:	b5 07       	cpc	r27, r21
    17ec:	10 f0       	brcs	.+4      	; 0x17f2 <dir_sdi+0x1da>
    17ee:	82 e0       	ldi	r24, 0x02	; 2
    17f0:	5f c0       	rjmp	.+190    	; 0x18b0 <dir_sdi+0x298>
    17f2:	29 85       	ldd	r18, Y+9	; 0x09
    17f4:	3a 85       	ldd	r19, Y+10	; 0x0a
    17f6:	8d 81       	ldd	r24, Y+5	; 0x05
    17f8:	9e 81       	ldd	r25, Y+6	; 0x06
    17fa:	a9 01       	movw	r20, r18
    17fc:	48 1b       	sub	r20, r24
    17fe:	59 0b       	sbc	r21, r25
    1800:	ca 01       	movw	r24, r20
    1802:	9a 87       	std	Y+10, r25	; 0x0a
    1804:	89 87       	std	Y+9, r24	; 0x09
    1806:	29 85       	ldd	r18, Y+9	; 0x09
    1808:	3a 85       	ldd	r19, Y+10	; 0x0a
    180a:	8d 81       	ldd	r24, Y+5	; 0x05
    180c:	9e 81       	ldd	r25, Y+6	; 0x06
    180e:	28 17       	cp	r18, r24
    1810:	39 07       	cpc	r19, r25
    1812:	08 f0       	brcs	.+2      	; 0x1816 <dir_sdi+0x1fe>
    1814:	b2 cf       	rjmp	.-156    	; 0x177a <dir_sdi+0x162>
    1816:	2f 81       	ldd	r18, Y+7	; 0x07
    1818:	38 85       	ldd	r19, Y+8	; 0x08
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	9a 81       	ldd	r25, Y+2	; 0x02
    181e:	ab 81       	ldd	r26, Y+3	; 0x03
    1820:	bc 81       	ldd	r27, Y+4	; 0x04
    1822:	f9 01       	movw	r30, r18
    1824:	82 87       	std	Z+10, r24	; 0x0a
    1826:	93 87       	std	Z+11, r25	; 0x0b
    1828:	a4 87       	std	Z+12, r26	; 0x0c
    182a:	b5 87       	std	Z+13, r27	; 0x0d
    182c:	8f 81       	ldd	r24, Y+7	; 0x07
    182e:	98 85       	ldd	r25, Y+8	; 0x08
    1830:	fc 01       	movw	r30, r24
    1832:	20 81       	ld	r18, Z
    1834:	31 81       	ldd	r19, Z+1	; 0x01
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	9a 81       	ldd	r25, Y+2	; 0x02
    183a:	ab 81       	ldd	r26, Y+3	; 0x03
    183c:	bc 81       	ldd	r27, Y+4	; 0x04
    183e:	ac 01       	movw	r20, r24
    1840:	bd 01       	movw	r22, r26
    1842:	c9 01       	movw	r24, r18
    1844:	0e 94 68 05 	call	0xad0	; 0xad0 <clust2sect>
    1848:	9b 01       	movw	r18, r22
    184a:	ac 01       	movw	r20, r24
    184c:	89 85       	ldd	r24, Y+9	; 0x09
    184e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1850:	92 95       	swap	r25
    1852:	82 95       	swap	r24
    1854:	8f 70       	andi	r24, 0x0F	; 15
    1856:	89 27       	eor	r24, r25
    1858:	9f 70       	andi	r25, 0x0F	; 15
    185a:	89 27       	eor	r24, r25
    185c:	cc 01       	movw	r24, r24
    185e:	a0 e0       	ldi	r26, 0x00	; 0
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	82 0f       	add	r24, r18
    1864:	93 1f       	adc	r25, r19
    1866:	a4 1f       	adc	r26, r20
    1868:	b5 1f       	adc	r27, r21
    186a:	2f 81       	ldd	r18, Y+7	; 0x07
    186c:	38 85       	ldd	r19, Y+8	; 0x08
    186e:	f9 01       	movw	r30, r18
    1870:	86 87       	std	Z+14, r24	; 0x0e
    1872:	97 87       	std	Z+15, r25	; 0x0f
    1874:	a0 8b       	std	Z+16, r26	; 0x10
    1876:	b1 8b       	std	Z+17, r27	; 0x11
    1878:	8f 81       	ldd	r24, Y+7	; 0x07
    187a:	98 85       	ldd	r25, Y+8	; 0x08
    187c:	fc 01       	movw	r30, r24
    187e:	80 81       	ld	r24, Z
    1880:	91 81       	ldd	r25, Z+1	; 0x01
    1882:	9c 01       	movw	r18, r24
    1884:	2e 5c       	subi	r18, 0xCE	; 206
    1886:	3f 4f       	sbci	r19, 0xFF	; 255
    1888:	89 85       	ldd	r24, Y+9	; 0x09
    188a:	9a 85       	ldd	r25, Y+10	; 0x0a
    188c:	8f 70       	andi	r24, 0x0F	; 15
    188e:	99 27       	eor	r25, r25
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	82 95       	swap	r24
    1896:	92 95       	swap	r25
    1898:	90 7f       	andi	r25, 0xF0	; 240
    189a:	98 27       	eor	r25, r24
    189c:	80 7f       	andi	r24, 0xF0	; 240
    189e:	98 27       	eor	r25, r24
    18a0:	28 0f       	add	r18, r24
    18a2:	39 1f       	adc	r19, r25
    18a4:	8f 81       	ldd	r24, Y+7	; 0x07
    18a6:	98 85       	ldd	r25, Y+8	; 0x08
    18a8:	fc 01       	movw	r30, r24
    18aa:	33 8b       	std	Z+19, r19	; 0x13
    18ac:	22 8b       	std	Z+18, r18	; 0x12
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	2a 96       	adiw	r28, 0x0a	; 10
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	08 95       	ret

000018c2 <dir_next>:
    18c2:	ef 92       	push	r14
    18c4:	ff 92       	push	r15
    18c6:	0f 93       	push	r16
    18c8:	1f 93       	push	r17
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	2b 97       	sbiw	r28, 0x0b	; 11
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
    18de:	99 87       	std	Y+9, r25	; 0x09
    18e0:	88 87       	std	Y+8, r24	; 0x08
    18e2:	7b 87       	std	Y+11, r23	; 0x0b
    18e4:	6a 87       	std	Y+10, r22	; 0x0a
    18e6:	88 85       	ldd	r24, Y+8	; 0x08
    18e8:	99 85       	ldd	r25, Y+9	; 0x09
    18ea:	fc 01       	movw	r30, r24
    18ec:	84 81       	ldd	r24, Z+4	; 0x04
    18ee:	95 81       	ldd	r25, Z+5	; 0x05
    18f0:	01 96       	adiw	r24, 0x01	; 1
    18f2:	9f 83       	std	Y+7, r25	; 0x07
    18f4:	8e 83       	std	Y+6, r24	; 0x06
    18f6:	8e 81       	ldd	r24, Y+6	; 0x06
    18f8:	9f 81       	ldd	r25, Y+7	; 0x07
    18fa:	89 2b       	or	r24, r25
    18fc:	59 f0       	breq	.+22     	; 0x1914 <dir_next+0x52>
    18fe:	88 85       	ldd	r24, Y+8	; 0x08
    1900:	99 85       	ldd	r25, Y+9	; 0x09
    1902:	fc 01       	movw	r30, r24
    1904:	86 85       	ldd	r24, Z+14	; 0x0e
    1906:	97 85       	ldd	r25, Z+15	; 0x0f
    1908:	a0 89       	ldd	r26, Z+16	; 0x10
    190a:	b1 89       	ldd	r27, Z+17	; 0x11
    190c:	89 2b       	or	r24, r25
    190e:	8a 2b       	or	r24, r26
    1910:	8b 2b       	or	r24, r27
    1912:	11 f4       	brne	.+4      	; 0x1918 <dir_next+0x56>
    1914:	84 e0       	ldi	r24, 0x04	; 4
    1916:	98 c1       	rjmp	.+816    	; 0x1c48 <dir_next+0x386>
    1918:	8e 81       	ldd	r24, Y+6	; 0x06
    191a:	9f 81       	ldd	r25, Y+7	; 0x07
    191c:	8f 70       	andi	r24, 0x0F	; 15
    191e:	99 27       	eor	r25, r25
    1920:	89 2b       	or	r24, r25
    1922:	09 f0       	breq	.+2      	; 0x1926 <dir_next+0x64>
    1924:	6e c1       	rjmp	.+732    	; 0x1c02 <dir_next+0x340>
    1926:	88 85       	ldd	r24, Y+8	; 0x08
    1928:	99 85       	ldd	r25, Y+9	; 0x09
    192a:	fc 01       	movw	r30, r24
    192c:	86 85       	ldd	r24, Z+14	; 0x0e
    192e:	97 85       	ldd	r25, Z+15	; 0x0f
    1930:	a0 89       	ldd	r26, Z+16	; 0x10
    1932:	b1 89       	ldd	r27, Z+17	; 0x11
    1934:	01 96       	adiw	r24, 0x01	; 1
    1936:	a1 1d       	adc	r26, r1
    1938:	b1 1d       	adc	r27, r1
    193a:	28 85       	ldd	r18, Y+8	; 0x08
    193c:	39 85       	ldd	r19, Y+9	; 0x09
    193e:	f9 01       	movw	r30, r18
    1940:	86 87       	std	Z+14, r24	; 0x0e
    1942:	97 87       	std	Z+15, r25	; 0x0f
    1944:	a0 8b       	std	Z+16, r26	; 0x10
    1946:	b1 8b       	std	Z+17, r27	; 0x11
    1948:	88 85       	ldd	r24, Y+8	; 0x08
    194a:	99 85       	ldd	r25, Y+9	; 0x09
    194c:	fc 01       	movw	r30, r24
    194e:	82 85       	ldd	r24, Z+10	; 0x0a
    1950:	93 85       	ldd	r25, Z+11	; 0x0b
    1952:	a4 85       	ldd	r26, Z+12	; 0x0c
    1954:	b5 85       	ldd	r27, Z+13	; 0x0d
    1956:	89 2b       	or	r24, r25
    1958:	8a 2b       	or	r24, r26
    195a:	8b 2b       	or	r24, r27
    195c:	81 f4       	brne	.+32     	; 0x197e <dir_next+0xbc>
    195e:	88 85       	ldd	r24, Y+8	; 0x08
    1960:	99 85       	ldd	r25, Y+9	; 0x09
    1962:	fc 01       	movw	r30, r24
    1964:	80 81       	ld	r24, Z
    1966:	91 81       	ldd	r25, Z+1	; 0x01
    1968:	fc 01       	movw	r30, r24
    196a:	20 85       	ldd	r18, Z+8	; 0x08
    196c:	31 85       	ldd	r19, Z+9	; 0x09
    196e:	8e 81       	ldd	r24, Y+6	; 0x06
    1970:	9f 81       	ldd	r25, Y+7	; 0x07
    1972:	82 17       	cp	r24, r18
    1974:	93 07       	cpc	r25, r19
    1976:	08 f4       	brcc	.+2      	; 0x197a <dir_next+0xb8>
    1978:	44 c1       	rjmp	.+648    	; 0x1c02 <dir_next+0x340>
    197a:	84 e0       	ldi	r24, 0x04	; 4
    197c:	65 c1       	rjmp	.+714    	; 0x1c48 <dir_next+0x386>
    197e:	8e 81       	ldd	r24, Y+6	; 0x06
    1980:	9f 81       	ldd	r25, Y+7	; 0x07
    1982:	92 95       	swap	r25
    1984:	82 95       	swap	r24
    1986:	8f 70       	andi	r24, 0x0F	; 15
    1988:	89 27       	eor	r24, r25
    198a:	9f 70       	andi	r25, 0x0F	; 15
    198c:	89 27       	eor	r24, r25
    198e:	28 85       	ldd	r18, Y+8	; 0x08
    1990:	39 85       	ldd	r19, Y+9	; 0x09
    1992:	f9 01       	movw	r30, r18
    1994:	20 81       	ld	r18, Z
    1996:	31 81       	ldd	r19, Z+1	; 0x01
    1998:	f9 01       	movw	r30, r18
    199a:	22 81       	ldd	r18, Z+2	; 0x02
    199c:	22 2f       	mov	r18, r18
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	21 50       	subi	r18, 0x01	; 1
    19a2:	31 09       	sbc	r19, r1
    19a4:	82 23       	and	r24, r18
    19a6:	93 23       	and	r25, r19
    19a8:	89 2b       	or	r24, r25
    19aa:	09 f0       	breq	.+2      	; 0x19ae <dir_next+0xec>
    19ac:	2a c1       	rjmp	.+596    	; 0x1c02 <dir_next+0x340>
    19ae:	88 85       	ldd	r24, Y+8	; 0x08
    19b0:	99 85       	ldd	r25, Y+9	; 0x09
    19b2:	fc 01       	movw	r30, r24
    19b4:	82 85       	ldd	r24, Z+10	; 0x0a
    19b6:	93 85       	ldd	r25, Z+11	; 0x0b
    19b8:	a4 85       	ldd	r26, Z+12	; 0x0c
    19ba:	b5 85       	ldd	r27, Z+13	; 0x0d
    19bc:	28 85       	ldd	r18, Y+8	; 0x08
    19be:	39 85       	ldd	r19, Y+9	; 0x09
    19c0:	f9 01       	movw	r30, r18
    19c2:	20 81       	ld	r18, Z
    19c4:	31 81       	ldd	r19, Z+1	; 0x01
    19c6:	ac 01       	movw	r20, r24
    19c8:	bd 01       	movw	r22, r26
    19ca:	c9 01       	movw	r24, r18
    19cc:	0e 94 c2 05 	call	0xb84	; 0xb84 <get_fat>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	89 83       	std	Y+1, r24	; 0x01
    19d6:	9a 83       	std	Y+2, r25	; 0x02
    19d8:	ab 83       	std	Y+3, r26	; 0x03
    19da:	bc 83       	std	Y+4, r27	; 0x04
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	9a 81       	ldd	r25, Y+2	; 0x02
    19e0:	ab 81       	ldd	r26, Y+3	; 0x03
    19e2:	bc 81       	ldd	r27, Y+4	; 0x04
    19e4:	02 97       	sbiw	r24, 0x02	; 2
    19e6:	a1 05       	cpc	r26, r1
    19e8:	b1 05       	cpc	r27, r1
    19ea:	10 f4       	brcc	.+4      	; 0x19f0 <dir_next+0x12e>
    19ec:	82 e0       	ldi	r24, 0x02	; 2
    19ee:	2c c1       	rjmp	.+600    	; 0x1c48 <dir_next+0x386>
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	9a 81       	ldd	r25, Y+2	; 0x02
    19f4:	ab 81       	ldd	r26, Y+3	; 0x03
    19f6:	bc 81       	ldd	r27, Y+4	; 0x04
    19f8:	8f 3f       	cpi	r24, 0xFF	; 255
    19fa:	9f 4f       	sbci	r25, 0xFF	; 255
    19fc:	af 4f       	sbci	r26, 0xFF	; 255
    19fe:	bf 4f       	sbci	r27, 0xFF	; 255
    1a00:	11 f4       	brne	.+4      	; 0x1a06 <dir_next+0x144>
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	21 c1       	rjmp	.+578    	; 0x1c48 <dir_next+0x386>
    1a06:	88 85       	ldd	r24, Y+8	; 0x08
    1a08:	99 85       	ldd	r25, Y+9	; 0x09
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	80 81       	ld	r24, Z
    1a0e:	91 81       	ldd	r25, Z+1	; 0x01
    1a10:	fc 01       	movw	r30, r24
    1a12:	22 8d       	ldd	r18, Z+26	; 0x1a
    1a14:	33 8d       	ldd	r19, Z+27	; 0x1b
    1a16:	44 8d       	ldd	r20, Z+28	; 0x1c
    1a18:	55 8d       	ldd	r21, Z+29	; 0x1d
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1e:	ab 81       	ldd	r26, Y+3	; 0x03
    1a20:	bc 81       	ldd	r27, Y+4	; 0x04
    1a22:	82 17       	cp	r24, r18
    1a24:	93 07       	cpc	r25, r19
    1a26:	a4 07       	cpc	r26, r20
    1a28:	b5 07       	cpc	r27, r21
    1a2a:	08 f4       	brcc	.+2      	; 0x1a2e <dir_next+0x16c>
    1a2c:	c8 c0       	rjmp	.+400    	; 0x1bbe <dir_next+0x2fc>
    1a2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a30:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a32:	89 2b       	or	r24, r25
    1a34:	11 f4       	brne	.+4      	; 0x1a3a <dir_next+0x178>
    1a36:	84 e0       	ldi	r24, 0x04	; 4
    1a38:	07 c1       	rjmp	.+526    	; 0x1c48 <dir_next+0x386>
    1a3a:	88 85       	ldd	r24, Y+8	; 0x08
    1a3c:	99 85       	ldd	r25, Y+9	; 0x09
    1a3e:	fc 01       	movw	r30, r24
    1a40:	82 85       	ldd	r24, Z+10	; 0x0a
    1a42:	93 85       	ldd	r25, Z+11	; 0x0b
    1a44:	a4 85       	ldd	r26, Z+12	; 0x0c
    1a46:	b5 85       	ldd	r27, Z+13	; 0x0d
    1a48:	28 85       	ldd	r18, Y+8	; 0x08
    1a4a:	39 85       	ldd	r19, Y+9	; 0x09
    1a4c:	f9 01       	movw	r30, r18
    1a4e:	20 81       	ld	r18, Z
    1a50:	31 81       	ldd	r19, Z+1	; 0x01
    1a52:	ac 01       	movw	r20, r24
    1a54:	bd 01       	movw	r22, r26
    1a56:	c9 01       	movw	r24, r18
    1a58:	0e 94 8e 09 	call	0x131c	; 0x131c <create_chain>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	89 83       	std	Y+1, r24	; 0x01
    1a62:	9a 83       	std	Y+2, r25	; 0x02
    1a64:	ab 83       	std	Y+3, r26	; 0x03
    1a66:	bc 83       	std	Y+4, r27	; 0x04
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6c:	ab 81       	ldd	r26, Y+3	; 0x03
    1a6e:	bc 81       	ldd	r27, Y+4	; 0x04
    1a70:	89 2b       	or	r24, r25
    1a72:	8a 2b       	or	r24, r26
    1a74:	8b 2b       	or	r24, r27
    1a76:	11 f4       	brne	.+4      	; 0x1a7c <dir_next+0x1ba>
    1a78:	87 e0       	ldi	r24, 0x07	; 7
    1a7a:	e6 c0       	rjmp	.+460    	; 0x1c48 <dir_next+0x386>
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a80:	ab 81       	ldd	r26, Y+3	; 0x03
    1a82:	bc 81       	ldd	r27, Y+4	; 0x04
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	a1 05       	cpc	r26, r1
    1a88:	b1 05       	cpc	r27, r1
    1a8a:	11 f4       	brne	.+4      	; 0x1a90 <dir_next+0x1ce>
    1a8c:	82 e0       	ldi	r24, 0x02	; 2
    1a8e:	dc c0       	rjmp	.+440    	; 0x1c48 <dir_next+0x386>
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	9a 81       	ldd	r25, Y+2	; 0x02
    1a94:	ab 81       	ldd	r26, Y+3	; 0x03
    1a96:	bc 81       	ldd	r27, Y+4	; 0x04
    1a98:	8f 3f       	cpi	r24, 0xFF	; 255
    1a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9c:	af 4f       	sbci	r26, 0xFF	; 255
    1a9e:	bf 4f       	sbci	r27, 0xFF	; 255
    1aa0:	11 f4       	brne	.+4      	; 0x1aa6 <dir_next+0x1e4>
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	d1 c0       	rjmp	.+418    	; 0x1c48 <dir_next+0x386>
    1aa6:	88 85       	ldd	r24, Y+8	; 0x08
    1aa8:	99 85       	ldd	r25, Y+9	; 0x09
    1aaa:	fc 01       	movw	r30, r24
    1aac:	80 81       	ld	r24, Z
    1aae:	91 81       	ldd	r25, Z+1	; 0x01
    1ab0:	40 e0       	ldi	r20, 0x00	; 0
    1ab2:	50 e0       	ldi	r21, 0x00	; 0
    1ab4:	ba 01       	movw	r22, r20
    1ab6:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <move_window>
    1aba:	88 23       	and	r24, r24
    1abc:	11 f0       	breq	.+4      	; 0x1ac2 <dir_next+0x200>
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	c3 c0       	rjmp	.+390    	; 0x1c48 <dir_next+0x386>
    1ac2:	88 85       	ldd	r24, Y+8	; 0x08
    1ac4:	99 85       	ldd	r25, Y+9	; 0x09
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	80 81       	ld	r24, Z
    1aca:	91 81       	ldd	r25, Z+1	; 0x01
    1acc:	c2 96       	adiw	r24, 0x32	; 50
    1ace:	40 e0       	ldi	r20, 0x00	; 0
    1ad0:	52 e0       	ldi	r21, 0x02	; 2
    1ad2:	60 e0       	ldi	r22, 0x00	; 0
    1ad4:	70 e0       	ldi	r23, 0x00	; 0
    1ad6:	0e 94 35 03 	call	0x66a	; 0x66a <mem_set>
    1ada:	88 85       	ldd	r24, Y+8	; 0x08
    1adc:	99 85       	ldd	r25, Y+9	; 0x09
    1ade:	fc 01       	movw	r30, r24
    1ae0:	00 81       	ld	r16, Z
    1ae2:	11 81       	ldd	r17, Z+1	; 0x01
    1ae4:	88 85       	ldd	r24, Y+8	; 0x08
    1ae6:	99 85       	ldd	r25, Y+9	; 0x09
    1ae8:	fc 01       	movw	r30, r24
    1aea:	20 81       	ld	r18, Z
    1aec:	31 81       	ldd	r19, Z+1	; 0x01
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	9a 81       	ldd	r25, Y+2	; 0x02
    1af2:	ab 81       	ldd	r26, Y+3	; 0x03
    1af4:	bc 81       	ldd	r27, Y+4	; 0x04
    1af6:	ac 01       	movw	r20, r24
    1af8:	bd 01       	movw	r22, r26
    1afa:	c9 01       	movw	r24, r18
    1afc:	0e 94 68 05 	call	0xad0	; 0xad0 <clust2sect>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	f8 01       	movw	r30, r16
    1b06:	86 a7       	std	Z+46, r24	; 0x2e
    1b08:	97 a7       	std	Z+47, r25	; 0x2f
    1b0a:	a0 ab       	std	Z+48, r26	; 0x30
    1b0c:	b1 ab       	std	Z+49, r27	; 0x31
    1b0e:	1d 82       	std	Y+5, r1	; 0x05
    1b10:	2b c0       	rjmp	.+86     	; 0x1b68 <dir_next+0x2a6>
    1b12:	88 85       	ldd	r24, Y+8	; 0x08
    1b14:	99 85       	ldd	r25, Y+9	; 0x09
    1b16:	fc 01       	movw	r30, r24
    1b18:	80 81       	ld	r24, Z
    1b1a:	91 81       	ldd	r25, Z+1	; 0x01
    1b1c:	21 e0       	ldi	r18, 0x01	; 1
    1b1e:	fc 01       	movw	r30, r24
    1b20:	24 83       	std	Z+4, r18	; 0x04
    1b22:	88 85       	ldd	r24, Y+8	; 0x08
    1b24:	99 85       	ldd	r25, Y+9	; 0x09
    1b26:	fc 01       	movw	r30, r24
    1b28:	80 81       	ld	r24, Z
    1b2a:	91 81       	ldd	r25, Z+1	; 0x01
    1b2c:	40 e0       	ldi	r20, 0x00	; 0
    1b2e:	50 e0       	ldi	r21, 0x00	; 0
    1b30:	ba 01       	movw	r22, r20
    1b32:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <move_window>
    1b36:	88 23       	and	r24, r24
    1b38:	11 f0       	breq	.+4      	; 0x1b3e <dir_next+0x27c>
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	85 c0       	rjmp	.+266    	; 0x1c48 <dir_next+0x386>
    1b3e:	88 85       	ldd	r24, Y+8	; 0x08
    1b40:	99 85       	ldd	r25, Y+9	; 0x09
    1b42:	fc 01       	movw	r30, r24
    1b44:	20 81       	ld	r18, Z
    1b46:	31 81       	ldd	r19, Z+1	; 0x01
    1b48:	f9 01       	movw	r30, r18
    1b4a:	86 a5       	ldd	r24, Z+46	; 0x2e
    1b4c:	97 a5       	ldd	r25, Z+47	; 0x2f
    1b4e:	a0 a9       	ldd	r26, Z+48	; 0x30
    1b50:	b1 a9       	ldd	r27, Z+49	; 0x31
    1b52:	01 96       	adiw	r24, 0x01	; 1
    1b54:	a1 1d       	adc	r26, r1
    1b56:	b1 1d       	adc	r27, r1
    1b58:	f9 01       	movw	r30, r18
    1b5a:	86 a7       	std	Z+46, r24	; 0x2e
    1b5c:	97 a7       	std	Z+47, r25	; 0x2f
    1b5e:	a0 ab       	std	Z+48, r26	; 0x30
    1b60:	b1 ab       	std	Z+49, r27	; 0x31
    1b62:	8d 81       	ldd	r24, Y+5	; 0x05
    1b64:	8f 5f       	subi	r24, 0xFF	; 255
    1b66:	8d 83       	std	Y+5, r24	; 0x05
    1b68:	88 85       	ldd	r24, Y+8	; 0x08
    1b6a:	99 85       	ldd	r25, Y+9	; 0x09
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	80 81       	ld	r24, Z
    1b70:	91 81       	ldd	r25, Z+1	; 0x01
    1b72:	fc 01       	movw	r30, r24
    1b74:	92 81       	ldd	r25, Z+2	; 0x02
    1b76:	8d 81       	ldd	r24, Y+5	; 0x05
    1b78:	89 17       	cp	r24, r25
    1b7a:	58 f2       	brcs	.-106    	; 0x1b12 <dir_next+0x250>
    1b7c:	88 85       	ldd	r24, Y+8	; 0x08
    1b7e:	99 85       	ldd	r25, Y+9	; 0x09
    1b80:	fc 01       	movw	r30, r24
    1b82:	60 81       	ld	r22, Z
    1b84:	71 81       	ldd	r23, Z+1	; 0x01
    1b86:	88 85       	ldd	r24, Y+8	; 0x08
    1b88:	99 85       	ldd	r25, Y+9	; 0x09
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	80 81       	ld	r24, Z
    1b8e:	91 81       	ldd	r25, Z+1	; 0x01
    1b90:	fc 01       	movw	r30, r24
    1b92:	26 a5       	ldd	r18, Z+46	; 0x2e
    1b94:	37 a5       	ldd	r19, Z+47	; 0x2f
    1b96:	40 a9       	ldd	r20, Z+48	; 0x30
    1b98:	51 a9       	ldd	r21, Z+49	; 0x31
    1b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9c:	88 2f       	mov	r24, r24
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	a0 e0       	ldi	r26, 0x00	; 0
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	79 01       	movw	r14, r18
    1ba6:	8a 01       	movw	r16, r20
    1ba8:	e8 1a       	sub	r14, r24
    1baa:	f9 0a       	sbc	r15, r25
    1bac:	0a 0b       	sbc	r16, r26
    1bae:	1b 0b       	sbc	r17, r27
    1bb0:	d8 01       	movw	r26, r16
    1bb2:	c7 01       	movw	r24, r14
    1bb4:	fb 01       	movw	r30, r22
    1bb6:	86 a7       	std	Z+46, r24	; 0x2e
    1bb8:	97 a7       	std	Z+47, r25	; 0x2f
    1bba:	a0 ab       	std	Z+48, r26	; 0x30
    1bbc:	b1 ab       	std	Z+49, r27	; 0x31
    1bbe:	28 85       	ldd	r18, Y+8	; 0x08
    1bc0:	39 85       	ldd	r19, Y+9	; 0x09
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc6:	ab 81       	ldd	r26, Y+3	; 0x03
    1bc8:	bc 81       	ldd	r27, Y+4	; 0x04
    1bca:	f9 01       	movw	r30, r18
    1bcc:	82 87       	std	Z+10, r24	; 0x0a
    1bce:	93 87       	std	Z+11, r25	; 0x0b
    1bd0:	a4 87       	std	Z+12, r26	; 0x0c
    1bd2:	b5 87       	std	Z+13, r27	; 0x0d
    1bd4:	88 85       	ldd	r24, Y+8	; 0x08
    1bd6:	99 85       	ldd	r25, Y+9	; 0x09
    1bd8:	fc 01       	movw	r30, r24
    1bda:	20 81       	ld	r18, Z
    1bdc:	31 81       	ldd	r19, Z+1	; 0x01
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	9a 81       	ldd	r25, Y+2	; 0x02
    1be2:	ab 81       	ldd	r26, Y+3	; 0x03
    1be4:	bc 81       	ldd	r27, Y+4	; 0x04
    1be6:	ac 01       	movw	r20, r24
    1be8:	bd 01       	movw	r22, r26
    1bea:	c9 01       	movw	r24, r18
    1bec:	0e 94 68 05 	call	0xad0	; 0xad0 <clust2sect>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	28 85       	ldd	r18, Y+8	; 0x08
    1bf6:	39 85       	ldd	r19, Y+9	; 0x09
    1bf8:	f9 01       	movw	r30, r18
    1bfa:	86 87       	std	Z+14, r24	; 0x0e
    1bfc:	97 87       	std	Z+15, r25	; 0x0f
    1bfe:	a0 8b       	std	Z+16, r26	; 0x10
    1c00:	b1 8b       	std	Z+17, r27	; 0x11
    1c02:	88 85       	ldd	r24, Y+8	; 0x08
    1c04:	99 85       	ldd	r25, Y+9	; 0x09
    1c06:	2e 81       	ldd	r18, Y+6	; 0x06
    1c08:	3f 81       	ldd	r19, Y+7	; 0x07
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	35 83       	std	Z+5, r19	; 0x05
    1c0e:	24 83       	std	Z+4, r18	; 0x04
    1c10:	88 85       	ldd	r24, Y+8	; 0x08
    1c12:	99 85       	ldd	r25, Y+9	; 0x09
    1c14:	fc 01       	movw	r30, r24
    1c16:	80 81       	ld	r24, Z
    1c18:	91 81       	ldd	r25, Z+1	; 0x01
    1c1a:	9c 01       	movw	r18, r24
    1c1c:	2e 5c       	subi	r18, 0xCE	; 206
    1c1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c20:	8e 81       	ldd	r24, Y+6	; 0x06
    1c22:	9f 81       	ldd	r25, Y+7	; 0x07
    1c24:	8f 70       	andi	r24, 0x0F	; 15
    1c26:	99 27       	eor	r25, r25
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	82 95       	swap	r24
    1c2e:	92 95       	swap	r25
    1c30:	90 7f       	andi	r25, 0xF0	; 240
    1c32:	98 27       	eor	r25, r24
    1c34:	80 7f       	andi	r24, 0xF0	; 240
    1c36:	98 27       	eor	r25, r24
    1c38:	28 0f       	add	r18, r24
    1c3a:	39 1f       	adc	r19, r25
    1c3c:	88 85       	ldd	r24, Y+8	; 0x08
    1c3e:	99 85       	ldd	r25, Y+9	; 0x09
    1c40:	fc 01       	movw	r30, r24
    1c42:	33 8b       	std	Z+19, r19	; 0x13
    1c44:	22 8b       	std	Z+18, r18	; 0x12
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	2b 96       	adiw	r28, 0x0b	; 11
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	de bf       	out	0x3e, r29	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	cd bf       	out	0x3d, r28	; 61
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	1f 91       	pop	r17
    1c5a:	0f 91       	pop	r16
    1c5c:	ff 90       	pop	r15
    1c5e:	ef 90       	pop	r14
    1c60:	08 95       	ret

00001c62 <dir_find>:
    1c62:	cf 93       	push	r28
    1c64:	df 93       	push	r29
    1c66:	00 d0       	rcall	.+0      	; 0x1c68 <dir_find+0x6>
    1c68:	00 d0       	rcall	.+0      	; 0x1c6a <dir_find+0x8>
    1c6a:	00 d0       	rcall	.+0      	; 0x1c6c <dir_find+0xa>
    1c6c:	cd b7       	in	r28, 0x3d	; 61
    1c6e:	de b7       	in	r29, 0x3e	; 62
    1c70:	9e 83       	std	Y+6, r25	; 0x06
    1c72:	8d 83       	std	Y+5, r24	; 0x05
    1c74:	8d 81       	ldd	r24, Y+5	; 0x05
    1c76:	9e 81       	ldd	r25, Y+6	; 0x06
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	70 e0       	ldi	r23, 0x00	; 0
    1c7c:	0e 94 0c 0b 	call	0x1618	; 0x1618 <dir_sdi>
    1c80:	89 83       	std	Y+1, r24	; 0x01
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	88 23       	and	r24, r24
    1c86:	11 f0       	breq	.+4      	; 0x1c8c <dir_find+0x2a>
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	50 c0       	rjmp	.+160    	; 0x1d2c <dir_find+0xca>
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c90:	fc 01       	movw	r30, r24
    1c92:	86 85       	ldd	r24, Z+14	; 0x0e
    1c94:	97 85       	ldd	r25, Z+15	; 0x0f
    1c96:	a0 89       	ldd	r26, Z+16	; 0x10
    1c98:	b1 89       	ldd	r27, Z+17	; 0x11
    1c9a:	2d 81       	ldd	r18, Y+5	; 0x05
    1c9c:	3e 81       	ldd	r19, Y+6	; 0x06
    1c9e:	f9 01       	movw	r30, r18
    1ca0:	20 81       	ld	r18, Z
    1ca2:	31 81       	ldd	r19, Z+1	; 0x01
    1ca4:	ac 01       	movw	r20, r24
    1ca6:	bd 01       	movw	r22, r26
    1ca8:	c9 01       	movw	r24, r18
    1caa:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <move_window>
    1cae:	89 83       	std	Y+1, r24	; 0x01
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	88 23       	and	r24, r24
    1cb4:	b9 f5       	brne	.+110    	; 0x1d24 <dir_find+0xc2>
    1cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cba:	fc 01       	movw	r30, r24
    1cbc:	82 89       	ldd	r24, Z+18	; 0x12
    1cbe:	93 89       	ldd	r25, Z+19	; 0x13
    1cc0:	9b 83       	std	Y+3, r25	; 0x03
    1cc2:	8a 83       	std	Y+2, r24	; 0x02
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc8:	fc 01       	movw	r30, r24
    1cca:	80 81       	ld	r24, Z
    1ccc:	8c 83       	std	Y+4, r24	; 0x04
    1cce:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd0:	88 23       	and	r24, r24
    1cd2:	19 f4       	brne	.+6      	; 0x1cda <dir_find+0x78>
    1cd4:	84 e0       	ldi	r24, 0x04	; 4
    1cd6:	89 83       	std	Y+1, r24	; 0x01
    1cd8:	28 c0       	rjmp	.+80     	; 0x1d2a <dir_find+0xc8>
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	9b 81       	ldd	r25, Y+3	; 0x03
    1cde:	0b 96       	adiw	r24, 0x0b	; 11
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	80 81       	ld	r24, Z
    1ce4:	88 2f       	mov	r24, r24
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	88 70       	andi	r24, 0x08	; 8
    1cea:	99 27       	eor	r25, r25
    1cec:	89 2b       	or	r24, r25
    1cee:	71 f4       	brne	.+28     	; 0x1d0c <dir_find+0xaa>
    1cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	24 89       	ldd	r18, Z+20	; 0x14
    1cf8:	35 89       	ldd	r19, Z+21	; 0x15
    1cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfc:	9b 81       	ldd	r25, Y+3	; 0x03
    1cfe:	4b e0       	ldi	r20, 0x0B	; 11
    1d00:	50 e0       	ldi	r21, 0x00	; 0
    1d02:	b9 01       	movw	r22, r18
    1d04:	0e 94 67 03 	call	0x6ce	; 0x6ce <mem_cmp>
    1d08:	89 2b       	or	r24, r25
    1d0a:	71 f0       	breq	.+28     	; 0x1d28 <dir_find+0xc6>
    1d0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d10:	60 e0       	ldi	r22, 0x00	; 0
    1d12:	70 e0       	ldi	r23, 0x00	; 0
    1d14:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <dir_next>
    1d18:	89 83       	std	Y+1, r24	; 0x01
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
    1d1c:	88 23       	and	r24, r24
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <dir_find+0xc0>
    1d20:	b5 cf       	rjmp	.-150    	; 0x1c8c <dir_find+0x2a>
    1d22:	03 c0       	rjmp	.+6      	; 0x1d2a <dir_find+0xc8>
    1d24:	00 00       	nop
    1d26:	01 c0       	rjmp	.+2      	; 0x1d2a <dir_find+0xc8>
    1d28:	00 00       	nop
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	26 96       	adiw	r28, 0x06	; 6
    1d2e:	0f b6       	in	r0, 0x3f	; 63
    1d30:	f8 94       	cli
    1d32:	de bf       	out	0x3e, r29	; 62
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	cd bf       	out	0x3d, r28	; 61
    1d38:	df 91       	pop	r29
    1d3a:	cf 91       	pop	r28
    1d3c:	08 95       	ret

00001d3e <dir_register>:
    1d3e:	cf 93       	push	r28
    1d40:	df 93       	push	r29
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <dir_register+0x6>
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <dir_register+0x8>
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <dir_register+0xa>
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	9e 83       	std	Y+6, r25	; 0x06
    1d4e:	8d 83       	std	Y+5, r24	; 0x05
    1d50:	8d 81       	ldd	r24, Y+5	; 0x05
    1d52:	9e 81       	ldd	r25, Y+6	; 0x06
    1d54:	60 e0       	ldi	r22, 0x00	; 0
    1d56:	70 e0       	ldi	r23, 0x00	; 0
    1d58:	0e 94 0c 0b 	call	0x1618	; 0x1618 <dir_sdi>
    1d5c:	89 83       	std	Y+1, r24	; 0x01
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	88 23       	and	r24, r24
    1d62:	79 f5       	brne	.+94     	; 0x1dc2 <dir_register+0x84>
    1d64:	8d 81       	ldd	r24, Y+5	; 0x05
    1d66:	9e 81       	ldd	r25, Y+6	; 0x06
    1d68:	fc 01       	movw	r30, r24
    1d6a:	86 85       	ldd	r24, Z+14	; 0x0e
    1d6c:	97 85       	ldd	r25, Z+15	; 0x0f
    1d6e:	a0 89       	ldd	r26, Z+16	; 0x10
    1d70:	b1 89       	ldd	r27, Z+17	; 0x11
    1d72:	2d 81       	ldd	r18, Y+5	; 0x05
    1d74:	3e 81       	ldd	r19, Y+6	; 0x06
    1d76:	f9 01       	movw	r30, r18
    1d78:	20 81       	ld	r18, Z
    1d7a:	31 81       	ldd	r19, Z+1	; 0x01
    1d7c:	ac 01       	movw	r20, r24
    1d7e:	bd 01       	movw	r22, r26
    1d80:	c9 01       	movw	r24, r18
    1d82:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <move_window>
    1d86:	89 83       	std	Y+1, r24	; 0x01
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	88 23       	and	r24, r24
    1d8c:	c9 f4       	brne	.+50     	; 0x1dc0 <dir_register+0x82>
    1d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d90:	9e 81       	ldd	r25, Y+6	; 0x06
    1d92:	fc 01       	movw	r30, r24
    1d94:	82 89       	ldd	r24, Z+18	; 0x12
    1d96:	93 89       	ldd	r25, Z+19	; 0x13
    1d98:	fc 01       	movw	r30, r24
    1d9a:	80 81       	ld	r24, Z
    1d9c:	8a 83       	std	Y+2, r24	; 0x02
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	85 3e       	cpi	r24, 0xE5	; 229
    1da2:	79 f0       	breq	.+30     	; 0x1dc2 <dir_register+0x84>
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	88 23       	and	r24, r24
    1da8:	61 f0       	breq	.+24     	; 0x1dc2 <dir_register+0x84>
    1daa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dac:	9e 81       	ldd	r25, Y+6	; 0x06
    1dae:	61 e0       	ldi	r22, 0x01	; 1
    1db0:	70 e0       	ldi	r23, 0x00	; 0
    1db2:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <dir_next>
    1db6:	89 83       	std	Y+1, r24	; 0x01
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	88 23       	and	r24, r24
    1dbc:	99 f2       	breq	.-90     	; 0x1d64 <dir_register+0x26>
    1dbe:	01 c0       	rjmp	.+2      	; 0x1dc2 <dir_register+0x84>
    1dc0:	00 00       	nop
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	88 23       	and	r24, r24
    1dc6:	c1 f5       	brne	.+112    	; 0x1e38 <dir_register+0xfa>
    1dc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dca:	9e 81       	ldd	r25, Y+6	; 0x06
    1dcc:	fc 01       	movw	r30, r24
    1dce:	86 85       	ldd	r24, Z+14	; 0x0e
    1dd0:	97 85       	ldd	r25, Z+15	; 0x0f
    1dd2:	a0 89       	ldd	r26, Z+16	; 0x10
    1dd4:	b1 89       	ldd	r27, Z+17	; 0x11
    1dd6:	2d 81       	ldd	r18, Y+5	; 0x05
    1dd8:	3e 81       	ldd	r19, Y+6	; 0x06
    1dda:	f9 01       	movw	r30, r18
    1ddc:	20 81       	ld	r18, Z
    1dde:	31 81       	ldd	r19, Z+1	; 0x01
    1de0:	ac 01       	movw	r20, r24
    1de2:	bd 01       	movw	r22, r26
    1de4:	c9 01       	movw	r24, r18
    1de6:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <move_window>
    1dea:	89 83       	std	Y+1, r24	; 0x01
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	88 23       	and	r24, r24
    1df0:	19 f5       	brne	.+70     	; 0x1e38 <dir_register+0xfa>
    1df2:	8d 81       	ldd	r24, Y+5	; 0x05
    1df4:	9e 81       	ldd	r25, Y+6	; 0x06
    1df6:	fc 01       	movw	r30, r24
    1df8:	82 89       	ldd	r24, Z+18	; 0x12
    1dfa:	93 89       	ldd	r25, Z+19	; 0x13
    1dfc:	9c 83       	std	Y+4, r25	; 0x04
    1dfe:	8b 83       	std	Y+3, r24	; 0x03
    1e00:	8b 81       	ldd	r24, Y+3	; 0x03
    1e02:	9c 81       	ldd	r25, Y+4	; 0x04
    1e04:	40 e2       	ldi	r20, 0x20	; 32
    1e06:	50 e0       	ldi	r21, 0x00	; 0
    1e08:	60 e0       	ldi	r22, 0x00	; 0
    1e0a:	70 e0       	ldi	r23, 0x00	; 0
    1e0c:	0e 94 35 03 	call	0x66a	; 0x66a <mem_set>
    1e10:	8d 81       	ldd	r24, Y+5	; 0x05
    1e12:	9e 81       	ldd	r25, Y+6	; 0x06
    1e14:	fc 01       	movw	r30, r24
    1e16:	24 89       	ldd	r18, Z+20	; 0x14
    1e18:	35 89       	ldd	r19, Z+21	; 0x15
    1e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1e:	4b e0       	ldi	r20, 0x0B	; 11
    1e20:	50 e0       	ldi	r21, 0x00	; 0
    1e22:	b9 01       	movw	r22, r18
    1e24:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <mem_cpy>
    1e28:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	80 81       	ld	r24, Z
    1e30:	91 81       	ldd	r25, Z+1	; 0x01
    1e32:	21 e0       	ldi	r18, 0x01	; 1
    1e34:	fc 01       	movw	r30, r24
    1e36:	24 83       	std	Z+4, r18	; 0x04
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	26 96       	adiw	r28, 0x06	; 6
    1e3c:	0f b6       	in	r0, 0x3f	; 63
    1e3e:	f8 94       	cli
    1e40:	de bf       	out	0x3e, r29	; 62
    1e42:	0f be       	out	0x3f, r0	; 63
    1e44:	cd bf       	out	0x3d, r28	; 61
    1e46:	df 91       	pop	r29
    1e48:	cf 91       	pop	r28
    1e4a:	08 95       	ret

00001e4c <create_name>:
    1e4c:	cf 93       	push	r28
    1e4e:	df 93       	push	r29
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	60 97       	sbiw	r28, 0x10	; 16
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	9e 87       	std	Y+14, r25	; 0x0e
    1e62:	8d 87       	std	Y+13, r24	; 0x0d
    1e64:	78 8b       	std	Y+16, r23	; 0x10
    1e66:	6f 87       	std	Y+15, r22	; 0x0f
    1e68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	84 89       	ldd	r24, Z+20	; 0x14
    1e70:	95 89       	ldd	r25, Z+21	; 0x15
    1e72:	9a 87       	std	Y+10, r25	; 0x0a
    1e74:	89 87       	std	Y+9, r24	; 0x09
    1e76:	89 85       	ldd	r24, Y+9	; 0x09
    1e78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7a:	4b e0       	ldi	r20, 0x0B	; 11
    1e7c:	50 e0       	ldi	r21, 0x00	; 0
    1e7e:	60 e2       	ldi	r22, 0x20	; 32
    1e80:	70 e0       	ldi	r23, 0x00	; 0
    1e82:	0e 94 35 03 	call	0x66a	; 0x66a <mem_set>
    1e86:	19 82       	std	Y+1, r1	; 0x01
    1e88:	18 86       	std	Y+8, r1	; 0x08
    1e8a:	1f 82       	std	Y+7, r1	; 0x07
    1e8c:	8f 81       	ldd	r24, Y+7	; 0x07
    1e8e:	98 85       	ldd	r25, Y+8	; 0x08
    1e90:	9e 83       	std	Y+6, r25	; 0x06
    1e92:	8d 83       	std	Y+5, r24	; 0x05
    1e94:	88 e0       	ldi	r24, 0x08	; 8
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	9c 83       	std	Y+4, r25	; 0x04
    1e9a:	8b 83       	std	Y+3, r24	; 0x03
    1e9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e9e:	98 89       	ldd	r25, Y+16	; 0x10
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	80 81       	ld	r24, Z
    1ea4:	91 81       	ldd	r25, Z+1	; 0x01
    1ea6:	9c 87       	std	Y+12, r25	; 0x0c
    1ea8:	8b 87       	std	Y+11, r24	; 0x0b
    1eaa:	2b 85       	ldd	r18, Y+11	; 0x0b
    1eac:	3c 85       	ldd	r19, Y+12	; 0x0c
    1eae:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb2:	82 0f       	add	r24, r18
    1eb4:	93 1f       	adc	r25, r19
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	80 81       	ld	r24, Z
    1eba:	8e 32       	cpi	r24, 0x2E	; 46
    1ebc:	09 f0       	breq	.+2      	; 0x1ec0 <create_name+0x74>
    1ebe:	47 c0       	rjmp	.+142    	; 0x1f4e <create_name+0x102>
    1ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec4:	9c 01       	movw	r18, r24
    1ec6:	2f 5f       	subi	r18, 0xFF	; 255
    1ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eca:	3e 83       	std	Y+6, r19	; 0x06
    1ecc:	2d 83       	std	Y+5, r18	; 0x05
    1ece:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ed0:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ed2:	82 0f       	add	r24, r18
    1ed4:	93 1f       	adc	r25, r19
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	80 81       	ld	r24, Z
    1eda:	8a 83       	std	Y+2, r24	; 0x02
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	8e 32       	cpi	r24, 0x2E	; 46
    1ee0:	99 f4       	brne	.+38     	; 0x1f08 <create_name+0xbc>
    1ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee6:	03 97       	sbiw	r24, 0x03	; 3
    1ee8:	78 f4       	brcc	.+30     	; 0x1f08 <create_name+0xbc>
    1eea:	8f 81       	ldd	r24, Y+7	; 0x07
    1eec:	98 85       	ldd	r25, Y+8	; 0x08
    1eee:	9c 01       	movw	r18, r24
    1ef0:	2f 5f       	subi	r18, 0xFF	; 255
    1ef2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef4:	38 87       	std	Y+8, r19	; 0x08
    1ef6:	2f 83       	std	Y+7, r18	; 0x07
    1ef8:	29 85       	ldd	r18, Y+9	; 0x09
    1efa:	3a 85       	ldd	r19, Y+10	; 0x0a
    1efc:	82 0f       	add	r24, r18
    1efe:	93 1f       	adc	r25, r19
    1f00:	2a 81       	ldd	r18, Y+2	; 0x02
    1f02:	fc 01       	movw	r30, r24
    1f04:	20 83       	st	Z, r18
    1f06:	dc cf       	rjmp	.-72     	; 0x1ec0 <create_name+0x74>
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	8f 32       	cpi	r24, 0x2F	; 47
    1f0c:	41 f0       	breq	.+16     	; 0x1f1e <create_name+0xd2>
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	8c 35       	cpi	r24, 0x5C	; 92
    1f12:	29 f0       	breq	.+10     	; 0x1f1e <create_name+0xd2>
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	81 32       	cpi	r24, 0x21	; 33
    1f18:	10 f0       	brcs	.+4      	; 0x1f1e <create_name+0xd2>
    1f1a:	86 e0       	ldi	r24, 0x06	; 6
    1f1c:	d9 c0       	rjmp	.+434    	; 0x20d0 <create_name+0x284>
    1f1e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f20:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f22:	8d 81       	ldd	r24, Y+5	; 0x05
    1f24:	9e 81       	ldd	r25, Y+6	; 0x06
    1f26:	28 0f       	add	r18, r24
    1f28:	39 1f       	adc	r19, r25
    1f2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f2c:	98 89       	ldd	r25, Y+16	; 0x10
    1f2e:	fc 01       	movw	r30, r24
    1f30:	31 83       	std	Z+1, r19	; 0x01
    1f32:	20 83       	st	Z, r18
    1f34:	89 85       	ldd	r24, Y+9	; 0x09
    1f36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f38:	0b 96       	adiw	r24, 0x0b	; 11
    1f3a:	2a 81       	ldd	r18, Y+2	; 0x02
    1f3c:	21 32       	cpi	r18, 0x21	; 33
    1f3e:	10 f4       	brcc	.+4      	; 0x1f44 <create_name+0xf8>
    1f40:	24 e2       	ldi	r18, 0x24	; 36
    1f42:	01 c0       	rjmp	.+2      	; 0x1f46 <create_name+0xfa>
    1f44:	20 e2       	ldi	r18, 0x20	; 32
    1f46:	fc 01       	movw	r30, r24
    1f48:	20 83       	st	Z, r18
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	c1 c0       	rjmp	.+386    	; 0x20d0 <create_name+0x284>
    1f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f50:	9e 81       	ldd	r25, Y+6	; 0x06
    1f52:	9c 01       	movw	r18, r24
    1f54:	2f 5f       	subi	r18, 0xFF	; 255
    1f56:	3f 4f       	sbci	r19, 0xFF	; 255
    1f58:	3e 83       	std	Y+6, r19	; 0x06
    1f5a:	2d 83       	std	Y+5, r18	; 0x05
    1f5c:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f5e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f60:	82 0f       	add	r24, r18
    1f62:	93 1f       	adc	r25, r19
    1f64:	fc 01       	movw	r30, r24
    1f66:	80 81       	ld	r24, Z
    1f68:	8a 83       	std	Y+2, r24	; 0x02
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	81 32       	cpi	r24, 0x21	; 33
    1f6e:	08 f4       	brcc	.+2      	; 0x1f72 <create_name+0x126>
    1f70:	69 c0       	rjmp	.+210    	; 0x2044 <create_name+0x1f8>
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	8f 32       	cpi	r24, 0x2F	; 47
    1f76:	09 f4       	brne	.+2      	; 0x1f7a <create_name+0x12e>
    1f78:	65 c0       	rjmp	.+202    	; 0x2044 <create_name+0x1f8>
    1f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7c:	8c 35       	cpi	r24, 0x5C	; 92
    1f7e:	09 f4       	brne	.+2      	; 0x1f82 <create_name+0x136>
    1f80:	61 c0       	rjmp	.+194    	; 0x2044 <create_name+0x1f8>
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	8e 32       	cpi	r24, 0x2E	; 46
    1f86:	39 f0       	breq	.+14     	; 0x1f96 <create_name+0x14a>
    1f88:	2f 81       	ldd	r18, Y+7	; 0x07
    1f8a:	38 85       	ldd	r19, Y+8	; 0x08
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f90:	28 17       	cp	r18, r24
    1f92:	39 07       	cpc	r19, r25
    1f94:	b0 f0       	brcs	.+44     	; 0x1fc2 <create_name+0x176>
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9a:	08 97       	sbiw	r24, 0x08	; 8
    1f9c:	19 f4       	brne	.+6      	; 0x1fa4 <create_name+0x158>
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	8e 32       	cpi	r24, 0x2E	; 46
    1fa2:	11 f0       	breq	.+4      	; 0x1fa8 <create_name+0x15c>
    1fa4:	86 e0       	ldi	r24, 0x06	; 6
    1fa6:	94 c0       	rjmp	.+296    	; 0x20d0 <create_name+0x284>
    1fa8:	88 e0       	ldi	r24, 0x08	; 8
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	98 87       	std	Y+8, r25	; 0x08
    1fae:	8f 83       	std	Y+7, r24	; 0x07
    1fb0:	8b e0       	ldi	r24, 0x0B	; 11
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	9c 83       	std	Y+4, r25	; 0x04
    1fb6:	8b 83       	std	Y+3, r24	; 0x03
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	88 0f       	add	r24, r24
    1fbc:	88 0f       	add	r24, r24
    1fbe:	89 83       	std	Y+1, r24	; 0x01
    1fc0:	40 c0       	rjmp	.+128    	; 0x2042 <create_name+0x1f6>
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	88 23       	and	r24, r24
    1fc6:	6c f4       	brge	.+26     	; 0x1fe2 <create_name+0x196>
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	83 60       	ori	r24, 0x03	; 3
    1fcc:	89 83       	std	Y+1, r24	; 0x01
    1fce:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd0:	88 2f       	mov	r24, r24
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	80 58       	subi	r24, 0x80	; 128
    1fd6:	91 09       	sbc	r25, r1
    1fd8:	86 5f       	subi	r24, 0xF6	; 246
    1fda:	9e 4f       	sbci	r25, 0xFE	; 254
    1fdc:	fc 01       	movw	r30, r24
    1fde:	80 81       	ld	r24, Z
    1fe0:	8a 83       	std	Y+2, r24	; 0x02
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	88 2f       	mov	r24, r24
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	bc 01       	movw	r22, r24
    1fea:	81 e6       	ldi	r24, 0x61	; 97
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	0e 94 b6 03 	call	0x76c	; 0x76c <chk_chr>
    1ff2:	89 2b       	or	r24, r25
    1ff4:	11 f0       	breq	.+4      	; 0x1ffa <create_name+0x1ae>
    1ff6:	86 e0       	ldi	r24, 0x06	; 6
    1ff8:	6b c0       	rjmp	.+214    	; 0x20d0 <create_name+0x284>
    1ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffc:	81 34       	cpi	r24, 0x41	; 65
    1ffe:	38 f0       	brcs	.+14     	; 0x200e <create_name+0x1c2>
    2000:	8a 81       	ldd	r24, Y+2	; 0x02
    2002:	8b 35       	cpi	r24, 0x5B	; 91
    2004:	20 f4       	brcc	.+8      	; 0x200e <create_name+0x1c2>
    2006:	89 81       	ldd	r24, Y+1	; 0x01
    2008:	82 60       	ori	r24, 0x02	; 2
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	0c c0       	rjmp	.+24     	; 0x2026 <create_name+0x1da>
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	81 36       	cpi	r24, 0x61	; 97
    2012:	48 f0       	brcs	.+18     	; 0x2026 <create_name+0x1da>
    2014:	8a 81       	ldd	r24, Y+2	; 0x02
    2016:	8b 37       	cpi	r24, 0x7B	; 123
    2018:	30 f4       	brcc	.+12     	; 0x2026 <create_name+0x1da>
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	81 60       	ori	r24, 0x01	; 1
    201e:	89 83       	std	Y+1, r24	; 0x01
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	80 52       	subi	r24, 0x20	; 32
    2024:	8a 83       	std	Y+2, r24	; 0x02
    2026:	8f 81       	ldd	r24, Y+7	; 0x07
    2028:	98 85       	ldd	r25, Y+8	; 0x08
    202a:	9c 01       	movw	r18, r24
    202c:	2f 5f       	subi	r18, 0xFF	; 255
    202e:	3f 4f       	sbci	r19, 0xFF	; 255
    2030:	38 87       	std	Y+8, r19	; 0x08
    2032:	2f 83       	std	Y+7, r18	; 0x07
    2034:	29 85       	ldd	r18, Y+9	; 0x09
    2036:	3a 85       	ldd	r19, Y+10	; 0x0a
    2038:	82 0f       	add	r24, r18
    203a:	93 1f       	adc	r25, r19
    203c:	2a 81       	ldd	r18, Y+2	; 0x02
    203e:	fc 01       	movw	r30, r24
    2040:	20 83       	st	Z, r18
    2042:	85 cf       	rjmp	.-246    	; 0x1f4e <create_name+0x102>
    2044:	2b 85       	ldd	r18, Y+11	; 0x0b
    2046:	3c 85       	ldd	r19, Y+12	; 0x0c
    2048:	8d 81       	ldd	r24, Y+5	; 0x05
    204a:	9e 81       	ldd	r25, Y+6	; 0x06
    204c:	28 0f       	add	r18, r24
    204e:	39 1f       	adc	r19, r25
    2050:	8f 85       	ldd	r24, Y+15	; 0x0f
    2052:	98 89       	ldd	r25, Y+16	; 0x10
    2054:	fc 01       	movw	r30, r24
    2056:	31 83       	std	Z+1, r19	; 0x01
    2058:	20 83       	st	Z, r18
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	81 32       	cpi	r24, 0x21	; 33
    205e:	10 f4       	brcc	.+4      	; 0x2064 <create_name+0x218>
    2060:	84 e0       	ldi	r24, 0x04	; 4
    2062:	01 c0       	rjmp	.+2      	; 0x2066 <create_name+0x21a>
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	8a 83       	std	Y+2, r24	; 0x02
    2068:	8f 81       	ldd	r24, Y+7	; 0x07
    206a:	98 85       	ldd	r25, Y+8	; 0x08
    206c:	89 2b       	or	r24, r25
    206e:	11 f4       	brne	.+4      	; 0x2074 <create_name+0x228>
    2070:	86 e0       	ldi	r24, 0x06	; 6
    2072:	2e c0       	rjmp	.+92     	; 0x20d0 <create_name+0x284>
    2074:	89 85       	ldd	r24, Y+9	; 0x09
    2076:	9a 85       	ldd	r25, Y+10	; 0x0a
    2078:	fc 01       	movw	r30, r24
    207a:	80 81       	ld	r24, Z
    207c:	85 3e       	cpi	r24, 0xE5	; 229
    207e:	29 f4       	brne	.+10     	; 0x208a <create_name+0x23e>
    2080:	89 85       	ldd	r24, Y+9	; 0x09
    2082:	9a 85       	ldd	r25, Y+10	; 0x0a
    2084:	25 e0       	ldi	r18, 0x05	; 5
    2086:	fc 01       	movw	r30, r24
    2088:	20 83       	st	Z, r18
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	9c 81       	ldd	r25, Y+4	; 0x04
    208e:	08 97       	sbiw	r24, 0x08	; 8
    2090:	21 f4       	brne	.+8      	; 0x209a <create_name+0x24e>
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	88 0f       	add	r24, r24
    2096:	88 0f       	add	r24, r24
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	88 2f       	mov	r24, r24
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	83 70       	andi	r24, 0x03	; 3
    20a2:	99 27       	eor	r25, r25
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	19 f4       	brne	.+6      	; 0x20ae <create_name+0x262>
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	80 61       	ori	r24, 0x10	; 16
    20ac:	8a 83       	std	Y+2, r24	; 0x02
    20ae:	89 81       	ldd	r24, Y+1	; 0x01
    20b0:	88 2f       	mov	r24, r24
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	8c 70       	andi	r24, 0x0C	; 12
    20b6:	99 27       	eor	r25, r25
    20b8:	04 97       	sbiw	r24, 0x04	; 4
    20ba:	19 f4       	brne	.+6      	; 0x20c2 <create_name+0x276>
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	88 60       	ori	r24, 0x08	; 8
    20c0:	8a 83       	std	Y+2, r24	; 0x02
    20c2:	89 85       	ldd	r24, Y+9	; 0x09
    20c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c6:	0b 96       	adiw	r24, 0x0b	; 11
    20c8:	2a 81       	ldd	r18, Y+2	; 0x02
    20ca:	fc 01       	movw	r30, r24
    20cc:	20 83       	st	Z, r18
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	60 96       	adiw	r28, 0x10	; 16
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	df 91       	pop	r29
    20de:	cf 91       	pop	r28
    20e0:	08 95       	ret

000020e2 <follow_path>:
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
    20ea:	28 97       	sbiw	r28, 0x08	; 8
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	de bf       	out	0x3e, r29	; 62
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	cd bf       	out	0x3d, r28	; 61
    20f6:	9e 83       	std	Y+6, r25	; 0x06
    20f8:	8d 83       	std	Y+5, r24	; 0x05
    20fa:	78 87       	std	Y+8, r23	; 0x08
    20fc:	6f 83       	std	Y+7, r22	; 0x07
    20fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2100:	98 85       	ldd	r25, Y+8	; 0x08
    2102:	fc 01       	movw	r30, r24
    2104:	80 81       	ld	r24, Z
    2106:	8f 32       	cpi	r24, 0x2F	; 47
    2108:	31 f0       	breq	.+12     	; 0x2116 <follow_path+0x34>
    210a:	8f 81       	ldd	r24, Y+7	; 0x07
    210c:	98 85       	ldd	r25, Y+8	; 0x08
    210e:	fc 01       	movw	r30, r24
    2110:	80 81       	ld	r24, Z
    2112:	8c 35       	cpi	r24, 0x5C	; 92
    2114:	69 f4       	brne	.+26     	; 0x2130 <follow_path+0x4e>
    2116:	8f 81       	ldd	r24, Y+7	; 0x07
    2118:	98 85       	ldd	r25, Y+8	; 0x08
    211a:	01 96       	adiw	r24, 0x01	; 1
    211c:	98 87       	std	Y+8, r25	; 0x08
    211e:	8f 83       	std	Y+7, r24	; 0x07
    2120:	8d 81       	ldd	r24, Y+5	; 0x05
    2122:	9e 81       	ldd	r25, Y+6	; 0x06
    2124:	fc 01       	movw	r30, r24
    2126:	16 82       	std	Z+6, r1	; 0x06
    2128:	17 82       	std	Z+7, r1	; 0x07
    212a:	10 86       	std	Z+8, r1	; 0x08
    212c:	11 86       	std	Z+9, r1	; 0x09
    212e:	11 c0       	rjmp	.+34     	; 0x2152 <follow_path+0x70>
    2130:	8d 81       	ldd	r24, Y+5	; 0x05
    2132:	9e 81       	ldd	r25, Y+6	; 0x06
    2134:	fc 01       	movw	r30, r24
    2136:	80 81       	ld	r24, Z
    2138:	91 81       	ldd	r25, Z+1	; 0x01
    213a:	fc 01       	movw	r30, r24
    213c:	86 89       	ldd	r24, Z+22	; 0x16
    213e:	97 89       	ldd	r25, Z+23	; 0x17
    2140:	a0 8d       	ldd	r26, Z+24	; 0x18
    2142:	b1 8d       	ldd	r27, Z+25	; 0x19
    2144:	2d 81       	ldd	r18, Y+5	; 0x05
    2146:	3e 81       	ldd	r19, Y+6	; 0x06
    2148:	f9 01       	movw	r30, r18
    214a:	86 83       	std	Z+6, r24	; 0x06
    214c:	97 83       	std	Z+7, r25	; 0x07
    214e:	a0 87       	std	Z+8, r26	; 0x08
    2150:	b1 87       	std	Z+9, r27	; 0x09
    2152:	8f 81       	ldd	r24, Y+7	; 0x07
    2154:	98 85       	ldd	r25, Y+8	; 0x08
    2156:	fc 01       	movw	r30, r24
    2158:	80 81       	ld	r24, Z
    215a:	80 32       	cpi	r24, 0x20	; 32
    215c:	68 f4       	brcc	.+26     	; 0x2178 <follow_path+0x96>
    215e:	8d 81       	ldd	r24, Y+5	; 0x05
    2160:	9e 81       	ldd	r25, Y+6	; 0x06
    2162:	60 e0       	ldi	r22, 0x00	; 0
    2164:	70 e0       	ldi	r23, 0x00	; 0
    2166:	0e 94 0c 0b 	call	0x1618	; 0x1618 <dir_sdi>
    216a:	89 83       	std	Y+1, r24	; 0x01
    216c:	8d 81       	ldd	r24, Y+5	; 0x05
    216e:	9e 81       	ldd	r25, Y+6	; 0x06
    2170:	fc 01       	movw	r30, r24
    2172:	13 8a       	std	Z+19, r1	; 0x13
    2174:	12 8a       	std	Z+18, r1	; 0x12
    2176:	8d c0       	rjmp	.+282    	; 0x2292 <follow_path+0x1b0>
    2178:	9e 01       	movw	r18, r28
    217a:	29 5f       	subi	r18, 0xF9	; 249
    217c:	3f 4f       	sbci	r19, 0xFF	; 255
    217e:	8d 81       	ldd	r24, Y+5	; 0x05
    2180:	9e 81       	ldd	r25, Y+6	; 0x06
    2182:	b9 01       	movw	r22, r18
    2184:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <create_name>
    2188:	89 83       	std	Y+1, r24	; 0x01
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	88 23       	and	r24, r24
    218e:	09 f0       	breq	.+2      	; 0x2192 <follow_path+0xb0>
    2190:	79 c0       	rjmp	.+242    	; 0x2284 <follow_path+0x1a2>
    2192:	8d 81       	ldd	r24, Y+5	; 0x05
    2194:	9e 81       	ldd	r25, Y+6	; 0x06
    2196:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <dir_find>
    219a:	89 83       	std	Y+1, r24	; 0x01
    219c:	8d 81       	ldd	r24, Y+5	; 0x05
    219e:	9e 81       	ldd	r25, Y+6	; 0x06
    21a0:	fc 01       	movw	r30, r24
    21a2:	84 89       	ldd	r24, Z+20	; 0x14
    21a4:	95 89       	ldd	r25, Z+21	; 0x15
    21a6:	fc 01       	movw	r30, r24
    21a8:	83 85       	ldd	r24, Z+11	; 0x0b
    21aa:	8a 83       	std	Y+2, r24	; 0x02
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	88 23       	and	r24, r24
    21b0:	61 f1       	breq	.+88     	; 0x220a <follow_path+0x128>
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	84 30       	cpi	r24, 0x04	; 4
    21b6:	09 f0       	breq	.+2      	; 0x21ba <follow_path+0xd8>
    21b8:	67 c0       	rjmp	.+206    	; 0x2288 <follow_path+0x1a6>
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	88 2f       	mov	r24, r24
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	80 72       	andi	r24, 0x20	; 32
    21c2:	99 27       	eor	r25, r25
    21c4:	89 2b       	or	r24, r25
    21c6:	b1 f0       	breq	.+44     	; 0x21f4 <follow_path+0x112>
    21c8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ca:	9e 81       	ldd	r25, Y+6	; 0x06
    21cc:	fc 01       	movw	r30, r24
    21ce:	16 82       	std	Z+6, r1	; 0x06
    21d0:	17 82       	std	Z+7, r1	; 0x07
    21d2:	10 86       	std	Z+8, r1	; 0x08
    21d4:	11 86       	std	Z+9, r1	; 0x09
    21d6:	8d 81       	ldd	r24, Y+5	; 0x05
    21d8:	9e 81       	ldd	r25, Y+6	; 0x06
    21da:	fc 01       	movw	r30, r24
    21dc:	13 8a       	std	Z+19, r1	; 0x13
    21de:	12 8a       	std	Z+18, r1	; 0x12
    21e0:	19 82       	std	Y+1, r1	; 0x01
    21e2:	8a 81       	ldd	r24, Y+2	; 0x02
    21e4:	88 2f       	mov	r24, r24
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	84 70       	andi	r24, 0x04	; 4
    21ea:	99 27       	eor	r25, r25
    21ec:	89 2b       	or	r24, r25
    21ee:	09 f0       	breq	.+2      	; 0x21f2 <follow_path+0x110>
    21f0:	4d c0       	rjmp	.+154    	; 0x228c <follow_path+0x1aa>
    21f2:	47 c0       	rjmp	.+142    	; 0x2282 <follow_path+0x1a0>
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	88 2f       	mov	r24, r24
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	84 70       	andi	r24, 0x04	; 4
    21fc:	99 27       	eor	r25, r25
    21fe:	89 2b       	or	r24, r25
    2200:	09 f0       	breq	.+2      	; 0x2204 <follow_path+0x122>
    2202:	44 c0       	rjmp	.+136    	; 0x228c <follow_path+0x1aa>
    2204:	85 e0       	ldi	r24, 0x05	; 5
    2206:	89 83       	std	Y+1, r24	; 0x01
    2208:	41 c0       	rjmp	.+130    	; 0x228c <follow_path+0x1aa>
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	88 2f       	mov	r24, r24
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	84 70       	andi	r24, 0x04	; 4
    2212:	99 27       	eor	r25, r25
    2214:	89 2b       	or	r24, r25
    2216:	e1 f5       	brne	.+120    	; 0x2290 <follow_path+0x1ae>
    2218:	8d 81       	ldd	r24, Y+5	; 0x05
    221a:	9e 81       	ldd	r25, Y+6	; 0x06
    221c:	fc 01       	movw	r30, r24
    221e:	82 89       	ldd	r24, Z+18	; 0x12
    2220:	93 89       	ldd	r25, Z+19	; 0x13
    2222:	9c 83       	std	Y+4, r25	; 0x04
    2224:	8b 83       	std	Y+3, r24	; 0x03
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	9c 81       	ldd	r25, Y+4	; 0x04
    222a:	0b 96       	adiw	r24, 0x0b	; 11
    222c:	fc 01       	movw	r30, r24
    222e:	80 81       	ld	r24, Z
    2230:	88 2f       	mov	r24, r24
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	80 71       	andi	r24, 0x10	; 16
    2236:	99 27       	eor	r25, r25
    2238:	89 2b       	or	r24, r25
    223a:	19 f4       	brne	.+6      	; 0x2242 <follow_path+0x160>
    223c:	85 e0       	ldi	r24, 0x05	; 5
    223e:	89 83       	std	Y+1, r24	; 0x01
    2240:	28 c0       	rjmp	.+80     	; 0x2292 <follow_path+0x1b0>
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	9c 81       	ldd	r25, Y+4	; 0x04
    2246:	44 96       	adiw	r24, 0x14	; 20
    2248:	fc 01       	movw	r30, r24
    224a:	80 81       	ld	r24, Z
    224c:	91 81       	ldd	r25, Z+1	; 0x01
    224e:	cc 01       	movw	r24, r24
    2250:	a0 e0       	ldi	r26, 0x00	; 0
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	ac 01       	movw	r20, r24
    2256:	33 27       	eor	r19, r19
    2258:	22 27       	eor	r18, r18
    225a:	8b 81       	ldd	r24, Y+3	; 0x03
    225c:	9c 81       	ldd	r25, Y+4	; 0x04
    225e:	4a 96       	adiw	r24, 0x1a	; 26
    2260:	fc 01       	movw	r30, r24
    2262:	80 81       	ld	r24, Z
    2264:	91 81       	ldd	r25, Z+1	; 0x01
    2266:	cc 01       	movw	r24, r24
    2268:	a0 e0       	ldi	r26, 0x00	; 0
    226a:	b0 e0       	ldi	r27, 0x00	; 0
    226c:	82 2b       	or	r24, r18
    226e:	93 2b       	or	r25, r19
    2270:	a4 2b       	or	r26, r20
    2272:	b5 2b       	or	r27, r21
    2274:	2d 81       	ldd	r18, Y+5	; 0x05
    2276:	3e 81       	ldd	r19, Y+6	; 0x06
    2278:	f9 01       	movw	r30, r18
    227a:	86 83       	std	Z+6, r24	; 0x06
    227c:	97 83       	std	Z+7, r25	; 0x07
    227e:	a0 87       	std	Z+8, r26	; 0x08
    2280:	b1 87       	std	Z+9, r27	; 0x09
    2282:	7a cf       	rjmp	.-268    	; 0x2178 <follow_path+0x96>
    2284:	00 00       	nop
    2286:	05 c0       	rjmp	.+10     	; 0x2292 <follow_path+0x1b0>
    2288:	00 00       	nop
    228a:	03 c0       	rjmp	.+6      	; 0x2292 <follow_path+0x1b0>
    228c:	00 00       	nop
    228e:	01 c0       	rjmp	.+2      	; 0x2292 <follow_path+0x1b0>
    2290:	00 00       	nop
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	28 96       	adiw	r28, 0x08	; 8
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	cd bf       	out	0x3d, r28	; 61
    22a0:	df 91       	pop	r29
    22a2:	cf 91       	pop	r28
    22a4:	08 95       	ret

000022a6 <check_fs>:
    22a6:	0f 93       	push	r16
    22a8:	cf 93       	push	r28
    22aa:	df 93       	push	r29
    22ac:	00 d0       	rcall	.+0      	; 0x22ae <check_fs+0x8>
    22ae:	00 d0       	rcall	.+0      	; 0x22b0 <check_fs+0xa>
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <check_fs+0xc>
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
    22b6:	9a 83       	std	Y+2, r25	; 0x02
    22b8:	89 83       	std	Y+1, r24	; 0x01
    22ba:	4b 83       	std	Y+3, r20	; 0x03
    22bc:	5c 83       	std	Y+4, r21	; 0x04
    22be:	6d 83       	std	Y+5, r22	; 0x05
    22c0:	7e 83       	std	Y+6, r23	; 0x06
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	9a 81       	ldd	r25, Y+2	; 0x02
    22c6:	bc 01       	movw	r22, r24
    22c8:	6e 5c       	subi	r22, 0xCE	; 206
    22ca:	7f 4f       	sbci	r23, 0xFF	; 255
    22cc:	89 81       	ldd	r24, Y+1	; 0x01
    22ce:	9a 81       	ldd	r25, Y+2	; 0x02
    22d0:	dc 01       	movw	r26, r24
    22d2:	11 96       	adiw	r26, 0x01	; 1
    22d4:	ec 91       	ld	r30, X
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	9c 81       	ldd	r25, Y+4	; 0x04
    22da:	ad 81       	ldd	r26, Y+5	; 0x05
    22dc:	be 81       	ldd	r27, Y+6	; 0x06
    22de:	01 e0       	ldi	r16, 0x01	; 1
    22e0:	9c 01       	movw	r18, r24
    22e2:	ad 01       	movw	r20, r26
    22e4:	8e 2f       	mov	r24, r30
    22e6:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <disk_read>
    22ea:	88 23       	and	r24, r24
    22ec:	11 f0       	breq	.+4      	; 0x22f2 <check_fs+0x4c>
    22ee:	83 e0       	ldi	r24, 0x03	; 3
    22f0:	2f c0       	rjmp	.+94     	; 0x2350 <check_fs+0xaa>
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	9a 81       	ldd	r25, Y+2	; 0x02
    22f6:	80 5d       	subi	r24, 0xD0	; 208
    22f8:	9d 4f       	sbci	r25, 0xFD	; 253
    22fa:	fc 01       	movw	r30, r24
    22fc:	80 81       	ld	r24, Z
    22fe:	91 81       	ldd	r25, Z+1	; 0x01
    2300:	85 35       	cpi	r24, 0x55	; 85
    2302:	9a 4a       	sbci	r25, 0xAA	; 170
    2304:	11 f0       	breq	.+4      	; 0x230a <check_fs+0x64>
    2306:	82 e0       	ldi	r24, 0x02	; 2
    2308:	23 c0       	rjmp	.+70     	; 0x2350 <check_fs+0xaa>
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	9a 81       	ldd	r25, Y+2	; 0x02
    230e:	88 59       	subi	r24, 0x98	; 152
    2310:	9f 4f       	sbci	r25, 0xFF	; 255
    2312:	fc 01       	movw	r30, r24
    2314:	80 81       	ld	r24, Z
    2316:	91 81       	ldd	r25, Z+1	; 0x01
    2318:	a2 81       	ldd	r26, Z+2	; 0x02
    231a:	b3 81       	ldd	r27, Z+3	; 0x03
    231c:	bb 27       	eor	r27, r27
    231e:	86 34       	cpi	r24, 0x46	; 70
    2320:	91 44       	sbci	r25, 0x41	; 65
    2322:	a4 45       	sbci	r26, 0x54	; 84
    2324:	b1 05       	cpc	r27, r1
    2326:	11 f4       	brne	.+4      	; 0x232c <check_fs+0x86>
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	12 c0       	rjmp	.+36     	; 0x2350 <check_fs+0xaa>
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	9a 81       	ldd	r25, Y+2	; 0x02
    2330:	8c 57       	subi	r24, 0x7C	; 124
    2332:	9f 4f       	sbci	r25, 0xFF	; 255
    2334:	fc 01       	movw	r30, r24
    2336:	80 81       	ld	r24, Z
    2338:	91 81       	ldd	r25, Z+1	; 0x01
    233a:	a2 81       	ldd	r26, Z+2	; 0x02
    233c:	b3 81       	ldd	r27, Z+3	; 0x03
    233e:	bb 27       	eor	r27, r27
    2340:	86 34       	cpi	r24, 0x46	; 70
    2342:	91 44       	sbci	r25, 0x41	; 65
    2344:	a4 45       	sbci	r26, 0x54	; 84
    2346:	b1 05       	cpc	r27, r1
    2348:	11 f4       	brne	.+4      	; 0x234e <check_fs+0xa8>
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	01 c0       	rjmp	.+2      	; 0x2350 <check_fs+0xaa>
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	26 96       	adiw	r28, 0x06	; 6
    2352:	0f b6       	in	r0, 0x3f	; 63
    2354:	f8 94       	cli
    2356:	de bf       	out	0x3e, r29	; 62
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	cd bf       	out	0x3d, r28	; 61
    235c:	df 91       	pop	r29
    235e:	cf 91       	pop	r28
    2360:	0f 91       	pop	r16
    2362:	08 95       	ret

00002364 <chk_mounted>:
    2364:	ef 92       	push	r14
    2366:	ff 92       	push	r15
    2368:	0f 93       	push	r16
    236a:	1f 93       	push	r17
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
    2374:	ab 97       	sbiw	r28, 0x2b	; 43
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	9f a3       	std	Y+39, r25	; 0x27
    2382:	8e a3       	std	Y+38, r24	; 0x26
    2384:	79 a7       	std	Y+41, r23	; 0x29
    2386:	68 a7       	std	Y+40, r22	; 0x28
    2388:	4a a7       	std	Y+42, r20	; 0x2a
    238a:	8e a1       	ldd	r24, Y+38	; 0x26
    238c:	9f a1       	ldd	r25, Y+39	; 0x27
    238e:	fc 01       	movw	r30, r24
    2390:	80 81       	ld	r24, Z
    2392:	91 81       	ldd	r25, Z+1	; 0x01
    2394:	9d 8b       	std	Y+21, r25	; 0x15
    2396:	8c 8b       	std	Y+20, r24	; 0x14
    2398:	8c 89       	ldd	r24, Y+20	; 0x14
    239a:	9d 89       	ldd	r25, Y+21	; 0x15
    239c:	fc 01       	movw	r30, r24
    239e:	80 81       	ld	r24, Z
    23a0:	88 2f       	mov	r24, r24
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	c0 97       	sbiw	r24, 0x30	; 48
    23a6:	9b 83       	std	Y+3, r25	; 0x03
    23a8:	8a 83       	std	Y+2, r24	; 0x02
    23aa:	8a 81       	ldd	r24, Y+2	; 0x02
    23ac:	9b 81       	ldd	r25, Y+3	; 0x03
    23ae:	0a 97       	sbiw	r24, 0x0a	; 10
    23b0:	a0 f4       	brcc	.+40     	; 0x23da <chk_mounted+0x76>
    23b2:	8c 89       	ldd	r24, Y+20	; 0x14
    23b4:	9d 89       	ldd	r25, Y+21	; 0x15
    23b6:	01 96       	adiw	r24, 0x01	; 1
    23b8:	fc 01       	movw	r30, r24
    23ba:	80 81       	ld	r24, Z
    23bc:	8a 33       	cpi	r24, 0x3A	; 58
    23be:	69 f4       	brne	.+26     	; 0x23da <chk_mounted+0x76>
    23c0:	8c 89       	ldd	r24, Y+20	; 0x14
    23c2:	9d 89       	ldd	r25, Y+21	; 0x15
    23c4:	02 96       	adiw	r24, 0x02	; 2
    23c6:	9d 8b       	std	Y+21, r25	; 0x15
    23c8:	8c 8b       	std	Y+20, r24	; 0x14
    23ca:	8e a1       	ldd	r24, Y+38	; 0x26
    23cc:	9f a1       	ldd	r25, Y+39	; 0x27
    23ce:	2c 89       	ldd	r18, Y+20	; 0x14
    23d0:	3d 89       	ldd	r19, Y+21	; 0x15
    23d2:	fc 01       	movw	r30, r24
    23d4:	31 83       	std	Z+1, r19	; 0x01
    23d6:	20 83       	st	Z, r18
    23d8:	06 c0       	rjmp	.+12     	; 0x23e6 <chk_mounted+0x82>
    23da:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <CurrVol>
    23de:	88 2f       	mov	r24, r24
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	9b 83       	std	Y+3, r25	; 0x03
    23e4:	8a 83       	std	Y+2, r24	; 0x02
    23e6:	8a 81       	ldd	r24, Y+2	; 0x02
    23e8:	9b 81       	ldd	r25, Y+3	; 0x03
    23ea:	89 2b       	or	r24, r25
    23ec:	11 f0       	breq	.+4      	; 0x23f2 <chk_mounted+0x8e>
    23ee:	8b e0       	ldi	r24, 0x0B	; 11
    23f0:	77 c3       	rjmp	.+1774   	; 0x2ae0 <chk_mounted+0x77c>
    23f2:	8a 81       	ldd	r24, Y+2	; 0x02
    23f4:	9b 81       	ldd	r25, Y+3	; 0x03
    23f6:	88 0f       	add	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	86 57       	subi	r24, 0x76	; 118
    23fc:	9e 4f       	sbci	r25, 0xFE	; 254
    23fe:	fc 01       	movw	r30, r24
    2400:	80 81       	ld	r24, Z
    2402:	91 81       	ldd	r25, Z+1	; 0x01
    2404:	9f 8b       	std	Y+23, r25	; 0x17
    2406:	8e 8b       	std	Y+22, r24	; 0x16
    2408:	88 a5       	ldd	r24, Y+40	; 0x28
    240a:	99 a5       	ldd	r25, Y+41	; 0x29
    240c:	2e 89       	ldd	r18, Y+22	; 0x16
    240e:	3f 89       	ldd	r19, Y+23	; 0x17
    2410:	fc 01       	movw	r30, r24
    2412:	31 83       	std	Z+1, r19	; 0x01
    2414:	20 83       	st	Z, r18
    2416:	8e 89       	ldd	r24, Y+22	; 0x16
    2418:	9f 89       	ldd	r25, Y+23	; 0x17
    241a:	89 2b       	or	r24, r25
    241c:	11 f4       	brne	.+4      	; 0x2422 <chk_mounted+0xbe>
    241e:	8c e0       	ldi	r24, 0x0C	; 12
    2420:	5f c3       	rjmp	.+1726   	; 0x2ae0 <chk_mounted+0x77c>
    2422:	8e 89       	ldd	r24, Y+22	; 0x16
    2424:	9f 89       	ldd	r25, Y+23	; 0x17
    2426:	fc 01       	movw	r30, r24
    2428:	80 81       	ld	r24, Z
    242a:	88 23       	and	r24, r24
    242c:	e1 f0       	breq	.+56     	; 0x2466 <chk_mounted+0x102>
    242e:	8e 89       	ldd	r24, Y+22	; 0x16
    2430:	9f 89       	ldd	r25, Y+23	; 0x17
    2432:	fc 01       	movw	r30, r24
    2434:	81 81       	ldd	r24, Z+1	; 0x01
    2436:	0e 94 2c 35 	call	0x6a58	; 0x6a58 <disk_status>
    243a:	88 8f       	std	Y+24, r24	; 0x18
    243c:	88 8d       	ldd	r24, Y+24	; 0x18
    243e:	88 2f       	mov	r24, r24
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	81 70       	andi	r24, 0x01	; 1
    2444:	99 27       	eor	r25, r25
    2446:	89 2b       	or	r24, r25
    2448:	71 f4       	brne	.+28     	; 0x2466 <chk_mounted+0x102>
    244a:	8a a5       	ldd	r24, Y+42	; 0x2a
    244c:	88 23       	and	r24, r24
    244e:	49 f0       	breq	.+18     	; 0x2462 <chk_mounted+0xfe>
    2450:	88 8d       	ldd	r24, Y+24	; 0x18
    2452:	88 2f       	mov	r24, r24
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	84 70       	andi	r24, 0x04	; 4
    2458:	99 27       	eor	r25, r25
    245a:	89 2b       	or	r24, r25
    245c:	11 f0       	breq	.+4      	; 0x2462 <chk_mounted+0xfe>
    245e:	8a e0       	ldi	r24, 0x0A	; 10
    2460:	3f c3       	rjmp	.+1662   	; 0x2ae0 <chk_mounted+0x77c>
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	3d c3       	rjmp	.+1658   	; 0x2ae0 <chk_mounted+0x77c>
    2466:	8e 89       	ldd	r24, Y+22	; 0x16
    2468:	9f 89       	ldd	r25, Y+23	; 0x17
    246a:	fc 01       	movw	r30, r24
    246c:	10 82       	st	Z, r1
    246e:	2a 81       	ldd	r18, Y+2	; 0x02
    2470:	8e 89       	ldd	r24, Y+22	; 0x16
    2472:	9f 89       	ldd	r25, Y+23	; 0x17
    2474:	fc 01       	movw	r30, r24
    2476:	21 83       	std	Z+1, r18	; 0x01
    2478:	8e 89       	ldd	r24, Y+22	; 0x16
    247a:	9f 89       	ldd	r25, Y+23	; 0x17
    247c:	fc 01       	movw	r30, r24
    247e:	81 81       	ldd	r24, Z+1	; 0x01
    2480:	0e 94 38 34 	call	0x6870	; 0x6870 <disk_initialize>
    2484:	88 8f       	std	Y+24, r24	; 0x18
    2486:	88 8d       	ldd	r24, Y+24	; 0x18
    2488:	88 2f       	mov	r24, r24
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	81 70       	andi	r24, 0x01	; 1
    248e:	99 27       	eor	r25, r25
    2490:	89 2b       	or	r24, r25
    2492:	11 f0       	breq	.+4      	; 0x2498 <chk_mounted+0x134>
    2494:	83 e0       	ldi	r24, 0x03	; 3
    2496:	24 c3       	rjmp	.+1608   	; 0x2ae0 <chk_mounted+0x77c>
    2498:	8a a5       	ldd	r24, Y+42	; 0x2a
    249a:	88 23       	and	r24, r24
    249c:	49 f0       	breq	.+18     	; 0x24b0 <chk_mounted+0x14c>
    249e:	88 8d       	ldd	r24, Y+24	; 0x18
    24a0:	88 2f       	mov	r24, r24
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	84 70       	andi	r24, 0x04	; 4
    24a6:	99 27       	eor	r25, r25
    24a8:	89 2b       	or	r24, r25
    24aa:	11 f0       	breq	.+4      	; 0x24b0 <chk_mounted+0x14c>
    24ac:	8a e0       	ldi	r24, 0x0A	; 10
    24ae:	18 c3       	rjmp	.+1584   	; 0x2ae0 <chk_mounted+0x77c>
    24b0:	1c 82       	std	Y+4, r1	; 0x04
    24b2:	1d 82       	std	Y+5, r1	; 0x05
    24b4:	1e 82       	std	Y+6, r1	; 0x06
    24b6:	1f 82       	std	Y+7, r1	; 0x07
    24b8:	8c 81       	ldd	r24, Y+4	; 0x04
    24ba:	9d 81       	ldd	r25, Y+5	; 0x05
    24bc:	ae 81       	ldd	r26, Y+6	; 0x06
    24be:	bf 81       	ldd	r27, Y+7	; 0x07
    24c0:	2e 89       	ldd	r18, Y+22	; 0x16
    24c2:	3f 89       	ldd	r19, Y+23	; 0x17
    24c4:	ac 01       	movw	r20, r24
    24c6:	bd 01       	movw	r22, r26
    24c8:	c9 01       	movw	r24, r18
    24ca:	0e 94 53 11 	call	0x22a6	; 0x22a6 <check_fs>
    24ce:	89 83       	std	Y+1, r24	; 0x01
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	81 30       	cpi	r24, 0x01	; 1
    24d4:	29 f5       	brne	.+74     	; 0x2520 <chk_mounted+0x1bc>
    24d6:	8e 89       	ldd	r24, Y+22	; 0x16
    24d8:	9f 89       	ldd	r25, Y+23	; 0x17
    24da:	80 51       	subi	r24, 0x10	; 16
    24dc:	9e 4f       	sbci	r25, 0xFE	; 254
    24de:	9a 8f       	std	Y+26, r25	; 0x1a
    24e0:	89 8f       	std	Y+25, r24	; 0x19
    24e2:	89 8d       	ldd	r24, Y+25	; 0x19
    24e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    24e6:	04 96       	adiw	r24, 0x04	; 4
    24e8:	fc 01       	movw	r30, r24
    24ea:	80 81       	ld	r24, Z
    24ec:	88 23       	and	r24, r24
    24ee:	c1 f0       	breq	.+48     	; 0x2520 <chk_mounted+0x1bc>
    24f0:	89 8d       	ldd	r24, Y+25	; 0x19
    24f2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    24f4:	08 96       	adiw	r24, 0x08	; 8
    24f6:	fc 01       	movw	r30, r24
    24f8:	80 81       	ld	r24, Z
    24fa:	91 81       	ldd	r25, Z+1	; 0x01
    24fc:	a2 81       	ldd	r26, Z+2	; 0x02
    24fe:	b3 81       	ldd	r27, Z+3	; 0x03
    2500:	8c 83       	std	Y+4, r24	; 0x04
    2502:	9d 83       	std	Y+5, r25	; 0x05
    2504:	ae 83       	std	Y+6, r26	; 0x06
    2506:	bf 83       	std	Y+7, r27	; 0x07
    2508:	8c 81       	ldd	r24, Y+4	; 0x04
    250a:	9d 81       	ldd	r25, Y+5	; 0x05
    250c:	ae 81       	ldd	r26, Y+6	; 0x06
    250e:	bf 81       	ldd	r27, Y+7	; 0x07
    2510:	2e 89       	ldd	r18, Y+22	; 0x16
    2512:	3f 89       	ldd	r19, Y+23	; 0x17
    2514:	ac 01       	movw	r20, r24
    2516:	bd 01       	movw	r22, r26
    2518:	c9 01       	movw	r24, r18
    251a:	0e 94 53 11 	call	0x22a6	; 0x22a6 <check_fs>
    251e:	89 83       	std	Y+1, r24	; 0x01
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	83 30       	cpi	r24, 0x03	; 3
    2524:	11 f4       	brne	.+4      	; 0x252a <chk_mounted+0x1c6>
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	db c2       	rjmp	.+1462   	; 0x2ae0 <chk_mounted+0x77c>
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	88 23       	and	r24, r24
    252e:	11 f0       	breq	.+4      	; 0x2534 <chk_mounted+0x1d0>
    2530:	8d e0       	ldi	r24, 0x0D	; 13
    2532:	d6 c2       	rjmp	.+1452   	; 0x2ae0 <chk_mounted+0x77c>
    2534:	8e 89       	ldd	r24, Y+22	; 0x16
    2536:	9f 89       	ldd	r25, Y+23	; 0x17
    2538:	c2 96       	adiw	r24, 0x32	; 50
    253a:	0b 96       	adiw	r24, 0x0b	; 11
    253c:	fc 01       	movw	r30, r24
    253e:	80 81       	ld	r24, Z
    2540:	91 81       	ldd	r25, Z+1	; 0x01
    2542:	81 15       	cp	r24, r1
    2544:	92 40       	sbci	r25, 0x02	; 2
    2546:	11 f0       	breq	.+4      	; 0x254c <chk_mounted+0x1e8>
    2548:	8d e0       	ldi	r24, 0x0D	; 13
    254a:	ca c2       	rjmp	.+1428   	; 0x2ae0 <chk_mounted+0x77c>
    254c:	8e 89       	ldd	r24, Y+22	; 0x16
    254e:	9f 89       	ldd	r25, Y+23	; 0x17
    2550:	c2 96       	adiw	r24, 0x32	; 50
    2552:	46 96       	adiw	r24, 0x16	; 22
    2554:	fc 01       	movw	r30, r24
    2556:	80 81       	ld	r24, Z
    2558:	91 81       	ldd	r25, Z+1	; 0x01
    255a:	cc 01       	movw	r24, r24
    255c:	a0 e0       	ldi	r26, 0x00	; 0
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	88 87       	std	Y+8, r24	; 0x08
    2562:	99 87       	std	Y+9, r25	; 0x09
    2564:	aa 87       	std	Y+10, r26	; 0x0a
    2566:	bb 87       	std	Y+11, r27	; 0x0b
    2568:	88 85       	ldd	r24, Y+8	; 0x08
    256a:	99 85       	ldd	r25, Y+9	; 0x09
    256c:	aa 85       	ldd	r26, Y+10	; 0x0a
    256e:	bb 85       	ldd	r27, Y+11	; 0x0b
    2570:	89 2b       	or	r24, r25
    2572:	8a 2b       	or	r24, r26
    2574:	8b 2b       	or	r24, r27
    2576:	69 f4       	brne	.+26     	; 0x2592 <chk_mounted+0x22e>
    2578:	8e 89       	ldd	r24, Y+22	; 0x16
    257a:	9f 89       	ldd	r25, Y+23	; 0x17
    257c:	c2 96       	adiw	r24, 0x32	; 50
    257e:	84 96       	adiw	r24, 0x24	; 36
    2580:	fc 01       	movw	r30, r24
    2582:	80 81       	ld	r24, Z
    2584:	91 81       	ldd	r25, Z+1	; 0x01
    2586:	a2 81       	ldd	r26, Z+2	; 0x02
    2588:	b3 81       	ldd	r27, Z+3	; 0x03
    258a:	88 87       	std	Y+8, r24	; 0x08
    258c:	99 87       	std	Y+9, r25	; 0x09
    258e:	aa 87       	std	Y+10, r26	; 0x0a
    2590:	bb 87       	std	Y+11, r27	; 0x0b
    2592:	2e 89       	ldd	r18, Y+22	; 0x16
    2594:	3f 89       	ldd	r19, Y+23	; 0x17
    2596:	88 85       	ldd	r24, Y+8	; 0x08
    2598:	99 85       	ldd	r25, Y+9	; 0x09
    259a:	aa 85       	ldd	r26, Y+10	; 0x0a
    259c:	bb 85       	ldd	r27, Y+11	; 0x0b
    259e:	f9 01       	movw	r30, r18
    25a0:	86 8f       	std	Z+30, r24	; 0x1e
    25a2:	97 8f       	std	Z+31, r25	; 0x1f
    25a4:	a0 a3       	std	Z+32, r26	; 0x20
    25a6:	b1 a3       	std	Z+33, r27	; 0x21
    25a8:	8e 89       	ldd	r24, Y+22	; 0x16
    25aa:	9f 89       	ldd	r25, Y+23	; 0x17
    25ac:	8e 5b       	subi	r24, 0xBE	; 190
    25ae:	9f 4f       	sbci	r25, 0xFF	; 255
    25b0:	fc 01       	movw	r30, r24
    25b2:	80 81       	ld	r24, Z
    25b4:	8b 8f       	std	Y+27, r24	; 0x1b
    25b6:	8e 89       	ldd	r24, Y+22	; 0x16
    25b8:	9f 89       	ldd	r25, Y+23	; 0x17
    25ba:	2b 8d       	ldd	r18, Y+27	; 0x1b
    25bc:	fc 01       	movw	r30, r24
    25be:	23 83       	std	Z+3, r18	; 0x03
    25c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25c2:	81 30       	cpi	r24, 0x01	; 1
    25c4:	29 f0       	breq	.+10     	; 0x25d0 <chk_mounted+0x26c>
    25c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25c8:	82 30       	cpi	r24, 0x02	; 2
    25ca:	11 f0       	breq	.+4      	; 0x25d0 <chk_mounted+0x26c>
    25cc:	8d e0       	ldi	r24, 0x0D	; 13
    25ce:	88 c2       	rjmp	.+1296   	; 0x2ae0 <chk_mounted+0x77c>
    25d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25d2:	88 2f       	mov	r24, r24
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	a0 e0       	ldi	r26, 0x00	; 0
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	28 85       	ldd	r18, Y+8	; 0x08
    25dc:	39 85       	ldd	r19, Y+9	; 0x09
    25de:	4a 85       	ldd	r20, Y+10	; 0x0a
    25e0:	5b 85       	ldd	r21, Y+11	; 0x0b
    25e2:	bc 01       	movw	r22, r24
    25e4:	cd 01       	movw	r24, r26
    25e6:	0e 94 45 3d 	call	0x7a8a	; 0x7a8a <__mulsi3>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	88 87       	std	Y+8, r24	; 0x08
    25f0:	99 87       	std	Y+9, r25	; 0x09
    25f2:	aa 87       	std	Y+10, r26	; 0x0a
    25f4:	bb 87       	std	Y+11, r27	; 0x0b
    25f6:	8e 89       	ldd	r24, Y+22	; 0x16
    25f8:	9f 89       	ldd	r25, Y+23	; 0x17
    25fa:	fc 01       	movw	r30, r24
    25fc:	87 ad       	ldd	r24, Z+63	; 0x3f
    25fe:	8b 8f       	std	Y+27, r24	; 0x1b
    2600:	8e 89       	ldd	r24, Y+22	; 0x16
    2602:	9f 89       	ldd	r25, Y+23	; 0x17
    2604:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2606:	fc 01       	movw	r30, r24
    2608:	22 83       	std	Z+2, r18	; 0x02
    260a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    260c:	88 23       	and	r24, r24
    260e:	59 f0       	breq	.+22     	; 0x2626 <chk_mounted+0x2c2>
    2610:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2612:	28 2f       	mov	r18, r24
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2618:	88 2f       	mov	r24, r24
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	82 23       	and	r24, r18
    2620:	93 23       	and	r25, r19
    2622:	89 2b       	or	r24, r25
    2624:	11 f0       	breq	.+4      	; 0x262a <chk_mounted+0x2c6>
    2626:	8d e0       	ldi	r24, 0x0D	; 13
    2628:	5b c2       	rjmp	.+1206   	; 0x2ae0 <chk_mounted+0x77c>
    262a:	8e 89       	ldd	r24, Y+22	; 0x16
    262c:	9f 89       	ldd	r25, Y+23	; 0x17
    262e:	c2 96       	adiw	r24, 0x32	; 50
    2630:	41 96       	adiw	r24, 0x11	; 17
    2632:	fc 01       	movw	r30, r24
    2634:	20 81       	ld	r18, Z
    2636:	31 81       	ldd	r19, Z+1	; 0x01
    2638:	8e 89       	ldd	r24, Y+22	; 0x16
    263a:	9f 89       	ldd	r25, Y+23	; 0x17
    263c:	fc 01       	movw	r30, r24
    263e:	31 87       	std	Z+9, r19	; 0x09
    2640:	20 87       	std	Z+8, r18	; 0x08
    2642:	8e 89       	ldd	r24, Y+22	; 0x16
    2644:	9f 89       	ldd	r25, Y+23	; 0x17
    2646:	fc 01       	movw	r30, r24
    2648:	80 85       	ldd	r24, Z+8	; 0x08
    264a:	91 85       	ldd	r25, Z+9	; 0x09
    264c:	8f 70       	andi	r24, 0x0F	; 15
    264e:	99 27       	eor	r25, r25
    2650:	89 2b       	or	r24, r25
    2652:	11 f0       	breq	.+4      	; 0x2658 <chk_mounted+0x2f4>
    2654:	8d e0       	ldi	r24, 0x0D	; 13
    2656:	44 c2       	rjmp	.+1160   	; 0x2ae0 <chk_mounted+0x77c>
    2658:	8e 89       	ldd	r24, Y+22	; 0x16
    265a:	9f 89       	ldd	r25, Y+23	; 0x17
    265c:	c2 96       	adiw	r24, 0x32	; 50
    265e:	43 96       	adiw	r24, 0x13	; 19
    2660:	fc 01       	movw	r30, r24
    2662:	80 81       	ld	r24, Z
    2664:	91 81       	ldd	r25, Z+1	; 0x01
    2666:	cc 01       	movw	r24, r24
    2668:	a0 e0       	ldi	r26, 0x00	; 0
    266a:	b0 e0       	ldi	r27, 0x00	; 0
    266c:	8c 87       	std	Y+12, r24	; 0x0c
    266e:	9d 87       	std	Y+13, r25	; 0x0d
    2670:	ae 87       	std	Y+14, r26	; 0x0e
    2672:	bf 87       	std	Y+15, r27	; 0x0f
    2674:	8c 85       	ldd	r24, Y+12	; 0x0c
    2676:	9d 85       	ldd	r25, Y+13	; 0x0d
    2678:	ae 85       	ldd	r26, Y+14	; 0x0e
    267a:	bf 85       	ldd	r27, Y+15	; 0x0f
    267c:	89 2b       	or	r24, r25
    267e:	8a 2b       	or	r24, r26
    2680:	8b 2b       	or	r24, r27
    2682:	69 f4       	brne	.+26     	; 0x269e <chk_mounted+0x33a>
    2684:	8e 89       	ldd	r24, Y+22	; 0x16
    2686:	9f 89       	ldd	r25, Y+23	; 0x17
    2688:	c2 96       	adiw	r24, 0x32	; 50
    268a:	80 96       	adiw	r24, 0x20	; 32
    268c:	fc 01       	movw	r30, r24
    268e:	80 81       	ld	r24, Z
    2690:	91 81       	ldd	r25, Z+1	; 0x01
    2692:	a2 81       	ldd	r26, Z+2	; 0x02
    2694:	b3 81       	ldd	r27, Z+3	; 0x03
    2696:	8c 87       	std	Y+12, r24	; 0x0c
    2698:	9d 87       	std	Y+13, r25	; 0x0d
    269a:	ae 87       	std	Y+14, r26	; 0x0e
    269c:	bf 87       	std	Y+15, r27	; 0x0f
    269e:	8e 89       	ldd	r24, Y+22	; 0x16
    26a0:	9f 89       	ldd	r25, Y+23	; 0x17
    26a2:	c2 96       	adiw	r24, 0x32	; 50
    26a4:	0e 96       	adiw	r24, 0x0e	; 14
    26a6:	fc 01       	movw	r30, r24
    26a8:	80 81       	ld	r24, Z
    26aa:	91 81       	ldd	r25, Z+1	; 0x01
    26ac:	9d 8f       	std	Y+29, r25	; 0x1d
    26ae:	8c 8f       	std	Y+28, r24	; 0x1c
    26b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26b2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26b4:	89 2b       	or	r24, r25
    26b6:	11 f4       	brne	.+4      	; 0x26bc <chk_mounted+0x358>
    26b8:	8d e0       	ldi	r24, 0x0D	; 13
    26ba:	12 c2       	rjmp	.+1060   	; 0x2ae0 <chk_mounted+0x77c>
    26bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26be:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26c0:	9c 01       	movw	r18, r24
    26c2:	40 e0       	ldi	r20, 0x00	; 0
    26c4:	50 e0       	ldi	r21, 0x00	; 0
    26c6:	88 85       	ldd	r24, Y+8	; 0x08
    26c8:	99 85       	ldd	r25, Y+9	; 0x09
    26ca:	aa 85       	ldd	r26, Y+10	; 0x0a
    26cc:	bb 85       	ldd	r27, Y+11	; 0x0b
    26ce:	28 0f       	add	r18, r24
    26d0:	39 1f       	adc	r19, r25
    26d2:	4a 1f       	adc	r20, r26
    26d4:	5b 1f       	adc	r21, r27
    26d6:	8e 89       	ldd	r24, Y+22	; 0x16
    26d8:	9f 89       	ldd	r25, Y+23	; 0x17
    26da:	fc 01       	movw	r30, r24
    26dc:	80 85       	ldd	r24, Z+8	; 0x08
    26de:	91 85       	ldd	r25, Z+9	; 0x09
    26e0:	92 95       	swap	r25
    26e2:	82 95       	swap	r24
    26e4:	8f 70       	andi	r24, 0x0F	; 15
    26e6:	89 27       	eor	r24, r25
    26e8:	9f 70       	andi	r25, 0x0F	; 15
    26ea:	89 27       	eor	r24, r25
    26ec:	cc 01       	movw	r24, r24
    26ee:	a0 e0       	ldi	r26, 0x00	; 0
    26f0:	b0 e0       	ldi	r27, 0x00	; 0
    26f2:	82 0f       	add	r24, r18
    26f4:	93 1f       	adc	r25, r19
    26f6:	a4 1f       	adc	r26, r20
    26f8:	b5 1f       	adc	r27, r21
    26fa:	8e 8f       	std	Y+30, r24	; 0x1e
    26fc:	9f 8f       	std	Y+31, r25	; 0x1f
    26fe:	a8 a3       	std	Y+32, r26	; 0x20
    2700:	b9 a3       	std	Y+33, r27	; 0x21
    2702:	2c 85       	ldd	r18, Y+12	; 0x0c
    2704:	3d 85       	ldd	r19, Y+13	; 0x0d
    2706:	4e 85       	ldd	r20, Y+14	; 0x0e
    2708:	5f 85       	ldd	r21, Y+15	; 0x0f
    270a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    270c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    270e:	a8 a1       	ldd	r26, Y+32	; 0x20
    2710:	b9 a1       	ldd	r27, Y+33	; 0x21
    2712:	28 17       	cp	r18, r24
    2714:	39 07       	cpc	r19, r25
    2716:	4a 07       	cpc	r20, r26
    2718:	5b 07       	cpc	r21, r27
    271a:	10 f4       	brcc	.+4      	; 0x2720 <chk_mounted+0x3bc>
    271c:	8d e0       	ldi	r24, 0x0D	; 13
    271e:	e0 c1       	rjmp	.+960    	; 0x2ae0 <chk_mounted+0x77c>
    2720:	2c 85       	ldd	r18, Y+12	; 0x0c
    2722:	3d 85       	ldd	r19, Y+13	; 0x0d
    2724:	4e 85       	ldd	r20, Y+14	; 0x0e
    2726:	5f 85       	ldd	r21, Y+15	; 0x0f
    2728:	8e 8d       	ldd	r24, Y+30	; 0x1e
    272a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    272c:	a8 a1       	ldd	r26, Y+32	; 0x20
    272e:	b9 a1       	ldd	r27, Y+33	; 0x21
    2730:	79 01       	movw	r14, r18
    2732:	8a 01       	movw	r16, r20
    2734:	e8 1a       	sub	r14, r24
    2736:	f9 0a       	sbc	r15, r25
    2738:	0a 0b       	sbc	r16, r26
    273a:	1b 0b       	sbc	r17, r27
    273c:	d8 01       	movw	r26, r16
    273e:	c7 01       	movw	r24, r14
    2740:	2e 89       	ldd	r18, Y+22	; 0x16
    2742:	3f 89       	ldd	r19, Y+23	; 0x17
    2744:	f9 01       	movw	r30, r18
    2746:	22 81       	ldd	r18, Z+2	; 0x02
    2748:	22 2f       	mov	r18, r18
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e0       	ldi	r20, 0x00	; 0
    274e:	50 e0       	ldi	r21, 0x00	; 0
    2750:	bc 01       	movw	r22, r24
    2752:	cd 01       	movw	r24, r26
    2754:	0e 94 69 3d 	call	0x7ad2	; 0x7ad2 <__udivmodsi4>
    2758:	da 01       	movw	r26, r20
    275a:	c9 01       	movw	r24, r18
    275c:	8a a3       	std	Y+34, r24	; 0x22
    275e:	9b a3       	std	Y+35, r25	; 0x23
    2760:	ac a3       	std	Y+36, r26	; 0x24
    2762:	bd a3       	std	Y+37, r27	; 0x25
    2764:	8a a1       	ldd	r24, Y+34	; 0x22
    2766:	9b a1       	ldd	r25, Y+35	; 0x23
    2768:	ac a1       	ldd	r26, Y+36	; 0x24
    276a:	bd a1       	ldd	r27, Y+37	; 0x25
    276c:	89 2b       	or	r24, r25
    276e:	8a 2b       	or	r24, r26
    2770:	8b 2b       	or	r24, r27
    2772:	11 f4       	brne	.+4      	; 0x2778 <chk_mounted+0x414>
    2774:	8d e0       	ldi	r24, 0x0D	; 13
    2776:	b4 c1       	rjmp	.+872    	; 0x2ae0 <chk_mounted+0x77c>
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	89 83       	std	Y+1, r24	; 0x01
    277c:	8a a1       	ldd	r24, Y+34	; 0x22
    277e:	9b a1       	ldd	r25, Y+35	; 0x23
    2780:	ac a1       	ldd	r26, Y+36	; 0x24
    2782:	bd a1       	ldd	r27, Y+37	; 0x25
    2784:	86 3f       	cpi	r24, 0xF6	; 246
    2786:	9f 40       	sbci	r25, 0x0F	; 15
    2788:	a1 05       	cpc	r26, r1
    278a:	b1 05       	cpc	r27, r1
    278c:	10 f0       	brcs	.+4      	; 0x2792 <chk_mounted+0x42e>
    278e:	82 e0       	ldi	r24, 0x02	; 2
    2790:	89 83       	std	Y+1, r24	; 0x01
    2792:	8a a1       	ldd	r24, Y+34	; 0x22
    2794:	9b a1       	ldd	r25, Y+35	; 0x23
    2796:	ac a1       	ldd	r26, Y+36	; 0x24
    2798:	bd a1       	ldd	r27, Y+37	; 0x25
    279a:	86 3f       	cpi	r24, 0xF6	; 246
    279c:	9f 4f       	sbci	r25, 0xFF	; 255
    279e:	a1 05       	cpc	r26, r1
    27a0:	b1 05       	cpc	r27, r1
    27a2:	10 f0       	brcs	.+4      	; 0x27a8 <chk_mounted+0x444>
    27a4:	83 e0       	ldi	r24, 0x03	; 3
    27a6:	89 83       	std	Y+1, r24	; 0x01
    27a8:	8a a1       	ldd	r24, Y+34	; 0x22
    27aa:	9b a1       	ldd	r25, Y+35	; 0x23
    27ac:	ac a1       	ldd	r26, Y+36	; 0x24
    27ae:	bd a1       	ldd	r27, Y+37	; 0x25
    27b0:	02 96       	adiw	r24, 0x02	; 2
    27b2:	a1 1d       	adc	r26, r1
    27b4:	b1 1d       	adc	r27, r1
    27b6:	2e 89       	ldd	r18, Y+22	; 0x16
    27b8:	3f 89       	ldd	r19, Y+23	; 0x17
    27ba:	f9 01       	movw	r30, r18
    27bc:	82 8f       	std	Z+26, r24	; 0x1a
    27be:	93 8f       	std	Z+27, r25	; 0x1b
    27c0:	a4 8f       	std	Z+28, r26	; 0x1c
    27c2:	b5 8f       	std	Z+29, r27	; 0x1d
    27c4:	2c 81       	ldd	r18, Y+4	; 0x04
    27c6:	3d 81       	ldd	r19, Y+5	; 0x05
    27c8:	4e 81       	ldd	r20, Y+6	; 0x06
    27ca:	5f 81       	ldd	r21, Y+7	; 0x07
    27cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27ce:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27d0:	a8 a1       	ldd	r26, Y+32	; 0x20
    27d2:	b9 a1       	ldd	r27, Y+33	; 0x21
    27d4:	82 0f       	add	r24, r18
    27d6:	93 1f       	adc	r25, r19
    27d8:	a4 1f       	adc	r26, r20
    27da:	b5 1f       	adc	r27, r21
    27dc:	2e 89       	ldd	r18, Y+22	; 0x16
    27de:	3f 89       	ldd	r19, Y+23	; 0x17
    27e0:	f9 01       	movw	r30, r18
    27e2:	82 a7       	std	Z+42, r24	; 0x2a
    27e4:	93 a7       	std	Z+43, r25	; 0x2b
    27e6:	a4 a7       	std	Z+44, r26	; 0x2c
    27e8:	b5 a7       	std	Z+45, r27	; 0x2d
    27ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27ec:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27ee:	9c 01       	movw	r18, r24
    27f0:	40 e0       	ldi	r20, 0x00	; 0
    27f2:	50 e0       	ldi	r21, 0x00	; 0
    27f4:	8c 81       	ldd	r24, Y+4	; 0x04
    27f6:	9d 81       	ldd	r25, Y+5	; 0x05
    27f8:	ae 81       	ldd	r26, Y+6	; 0x06
    27fa:	bf 81       	ldd	r27, Y+7	; 0x07
    27fc:	82 0f       	add	r24, r18
    27fe:	93 1f       	adc	r25, r19
    2800:	a4 1f       	adc	r26, r20
    2802:	b5 1f       	adc	r27, r21
    2804:	2e 89       	ldd	r18, Y+22	; 0x16
    2806:	3f 89       	ldd	r19, Y+23	; 0x17
    2808:	f9 01       	movw	r30, r18
    280a:	82 a3       	std	Z+34, r24	; 0x22
    280c:	93 a3       	std	Z+35, r25	; 0x23
    280e:	a4 a3       	std	Z+36, r26	; 0x24
    2810:	b5 a3       	std	Z+37, r27	; 0x25
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	83 30       	cpi	r24, 0x03	; 3
    2816:	69 f5       	brne	.+90     	; 0x2872 <chk_mounted+0x50e>
    2818:	8e 89       	ldd	r24, Y+22	; 0x16
    281a:	9f 89       	ldd	r25, Y+23	; 0x17
    281c:	fc 01       	movw	r30, r24
    281e:	80 85       	ldd	r24, Z+8	; 0x08
    2820:	91 85       	ldd	r25, Z+9	; 0x09
    2822:	89 2b       	or	r24, r25
    2824:	11 f0       	breq	.+4      	; 0x282a <chk_mounted+0x4c6>
    2826:	8d e0       	ldi	r24, 0x0D	; 13
    2828:	5b c1       	rjmp	.+694    	; 0x2ae0 <chk_mounted+0x77c>
    282a:	8e 89       	ldd	r24, Y+22	; 0x16
    282c:	9f 89       	ldd	r25, Y+23	; 0x17
    282e:	c2 96       	adiw	r24, 0x32	; 50
    2830:	8c 96       	adiw	r24, 0x2c	; 44
    2832:	fc 01       	movw	r30, r24
    2834:	80 81       	ld	r24, Z
    2836:	91 81       	ldd	r25, Z+1	; 0x01
    2838:	a2 81       	ldd	r26, Z+2	; 0x02
    283a:	b3 81       	ldd	r27, Z+3	; 0x03
    283c:	2e 89       	ldd	r18, Y+22	; 0x16
    283e:	3f 89       	ldd	r19, Y+23	; 0x17
    2840:	f9 01       	movw	r30, r18
    2842:	86 a3       	std	Z+38, r24	; 0x26
    2844:	97 a3       	std	Z+39, r25	; 0x27
    2846:	a0 a7       	std	Z+40, r26	; 0x28
    2848:	b1 a7       	std	Z+41, r27	; 0x29
    284a:	8e 89       	ldd	r24, Y+22	; 0x16
    284c:	9f 89       	ldd	r25, Y+23	; 0x17
    284e:	fc 01       	movw	r30, r24
    2850:	82 8d       	ldd	r24, Z+26	; 0x1a
    2852:	93 8d       	ldd	r25, Z+27	; 0x1b
    2854:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2856:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2858:	88 0f       	add	r24, r24
    285a:	99 1f       	adc	r25, r25
    285c:	aa 1f       	adc	r26, r26
    285e:	bb 1f       	adc	r27, r27
    2860:	88 0f       	add	r24, r24
    2862:	99 1f       	adc	r25, r25
    2864:	aa 1f       	adc	r26, r26
    2866:	bb 1f       	adc	r27, r27
    2868:	88 8b       	std	Y+16, r24	; 0x10
    286a:	99 8b       	std	Y+17, r25	; 0x11
    286c:	aa 8b       	std	Y+18, r26	; 0x12
    286e:	bb 8b       	std	Y+19, r27	; 0x13
    2870:	58 c0       	rjmp	.+176    	; 0x2922 <chk_mounted+0x5be>
    2872:	8e 89       	ldd	r24, Y+22	; 0x16
    2874:	9f 89       	ldd	r25, Y+23	; 0x17
    2876:	fc 01       	movw	r30, r24
    2878:	80 85       	ldd	r24, Z+8	; 0x08
    287a:	91 85       	ldd	r25, Z+9	; 0x09
    287c:	89 2b       	or	r24, r25
    287e:	11 f4       	brne	.+4      	; 0x2884 <chk_mounted+0x520>
    2880:	8d e0       	ldi	r24, 0x0D	; 13
    2882:	2e c1       	rjmp	.+604    	; 0x2ae0 <chk_mounted+0x77c>
    2884:	8e 89       	ldd	r24, Y+22	; 0x16
    2886:	9f 89       	ldd	r25, Y+23	; 0x17
    2888:	fc 01       	movw	r30, r24
    288a:	22 a1       	ldd	r18, Z+34	; 0x22
    288c:	33 a1       	ldd	r19, Z+35	; 0x23
    288e:	44 a1       	ldd	r20, Z+36	; 0x24
    2890:	55 a1       	ldd	r21, Z+37	; 0x25
    2892:	88 85       	ldd	r24, Y+8	; 0x08
    2894:	99 85       	ldd	r25, Y+9	; 0x09
    2896:	aa 85       	ldd	r26, Y+10	; 0x0a
    2898:	bb 85       	ldd	r27, Y+11	; 0x0b
    289a:	82 0f       	add	r24, r18
    289c:	93 1f       	adc	r25, r19
    289e:	a4 1f       	adc	r26, r20
    28a0:	b5 1f       	adc	r27, r21
    28a2:	2e 89       	ldd	r18, Y+22	; 0x16
    28a4:	3f 89       	ldd	r19, Y+23	; 0x17
    28a6:	f9 01       	movw	r30, r18
    28a8:	86 a3       	std	Z+38, r24	; 0x26
    28aa:	97 a3       	std	Z+39, r25	; 0x27
    28ac:	a0 a7       	std	Z+40, r26	; 0x28
    28ae:	b1 a7       	std	Z+41, r27	; 0x29
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	82 30       	cpi	r24, 0x02	; 2
    28b4:	61 f4       	brne	.+24     	; 0x28ce <chk_mounted+0x56a>
    28b6:	8e 89       	ldd	r24, Y+22	; 0x16
    28b8:	9f 89       	ldd	r25, Y+23	; 0x17
    28ba:	fc 01       	movw	r30, r24
    28bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    28be:	93 8d       	ldd	r25, Z+27	; 0x1b
    28c0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    28c2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    28c4:	88 0f       	add	r24, r24
    28c6:	99 1f       	adc	r25, r25
    28c8:	aa 1f       	adc	r26, r26
    28ca:	bb 1f       	adc	r27, r27
    28cc:	26 c0       	rjmp	.+76     	; 0x291a <chk_mounted+0x5b6>
    28ce:	8e 89       	ldd	r24, Y+22	; 0x16
    28d0:	9f 89       	ldd	r25, Y+23	; 0x17
    28d2:	fc 01       	movw	r30, r24
    28d4:	22 8d       	ldd	r18, Z+26	; 0x1a
    28d6:	33 8d       	ldd	r19, Z+27	; 0x1b
    28d8:	44 8d       	ldd	r20, Z+28	; 0x1c
    28da:	55 8d       	ldd	r21, Z+29	; 0x1d
    28dc:	da 01       	movw	r26, r20
    28de:	c9 01       	movw	r24, r18
    28e0:	88 0f       	add	r24, r24
    28e2:	99 1f       	adc	r25, r25
    28e4:	aa 1f       	adc	r26, r26
    28e6:	bb 1f       	adc	r27, r27
    28e8:	82 0f       	add	r24, r18
    28ea:	93 1f       	adc	r25, r19
    28ec:	a4 1f       	adc	r26, r20
    28ee:	b5 1f       	adc	r27, r21
    28f0:	9c 01       	movw	r18, r24
    28f2:	ad 01       	movw	r20, r26
    28f4:	56 95       	lsr	r21
    28f6:	47 95       	ror	r20
    28f8:	37 95       	ror	r19
    28fa:	27 95       	ror	r18
    28fc:	8e 89       	ldd	r24, Y+22	; 0x16
    28fe:	9f 89       	ldd	r25, Y+23	; 0x17
    2900:	fc 01       	movw	r30, r24
    2902:	82 8d       	ldd	r24, Z+26	; 0x1a
    2904:	93 8d       	ldd	r25, Z+27	; 0x1b
    2906:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2908:	b5 8d       	ldd	r27, Z+29	; 0x1d
    290a:	81 70       	andi	r24, 0x01	; 1
    290c:	99 27       	eor	r25, r25
    290e:	aa 27       	eor	r26, r26
    2910:	bb 27       	eor	r27, r27
    2912:	82 0f       	add	r24, r18
    2914:	93 1f       	adc	r25, r19
    2916:	a4 1f       	adc	r26, r20
    2918:	b5 1f       	adc	r27, r21
    291a:	88 8b       	std	Y+16, r24	; 0x10
    291c:	99 8b       	std	Y+17, r25	; 0x11
    291e:	aa 8b       	std	Y+18, r26	; 0x12
    2920:	bb 8b       	std	Y+19, r27	; 0x13
    2922:	8e 89       	ldd	r24, Y+22	; 0x16
    2924:	9f 89       	ldd	r25, Y+23	; 0x17
    2926:	fc 01       	movw	r30, r24
    2928:	26 8d       	ldd	r18, Z+30	; 0x1e
    292a:	37 8d       	ldd	r19, Z+31	; 0x1f
    292c:	40 a1       	ldd	r20, Z+32	; 0x20
    292e:	51 a1       	ldd	r21, Z+33	; 0x21
    2930:	88 89       	ldd	r24, Y+16	; 0x10
    2932:	99 89       	ldd	r25, Y+17	; 0x11
    2934:	aa 89       	ldd	r26, Y+18	; 0x12
    2936:	bb 89       	ldd	r27, Y+19	; 0x13
    2938:	81 50       	subi	r24, 0x01	; 1
    293a:	9e 4f       	sbci	r25, 0xFE	; 254
    293c:	af 4f       	sbci	r26, 0xFF	; 255
    293e:	bf 4f       	sbci	r27, 0xFF	; 255
    2940:	07 2e       	mov	r0, r23
    2942:	79 e0       	ldi	r23, 0x09	; 9
    2944:	b6 95       	lsr	r27
    2946:	a7 95       	ror	r26
    2948:	97 95       	ror	r25
    294a:	87 95       	ror	r24
    294c:	7a 95       	dec	r23
    294e:	d1 f7       	brne	.-12     	; 0x2944 <chk_mounted+0x5e0>
    2950:	70 2d       	mov	r23, r0
    2952:	28 17       	cp	r18, r24
    2954:	39 07       	cpc	r19, r25
    2956:	4a 07       	cpc	r20, r26
    2958:	5b 07       	cpc	r21, r27
    295a:	10 f4       	brcc	.+4      	; 0x2960 <chk_mounted+0x5fc>
    295c:	8d e0       	ldi	r24, 0x0D	; 13
    295e:	c0 c0       	rjmp	.+384    	; 0x2ae0 <chk_mounted+0x77c>
    2960:	2e 89       	ldd	r18, Y+22	; 0x16
    2962:	3f 89       	ldd	r19, Y+23	; 0x17
    2964:	8f ef       	ldi	r24, 0xFF	; 255
    2966:	9f ef       	ldi	r25, 0xFF	; 255
    2968:	dc 01       	movw	r26, r24
    296a:	f9 01       	movw	r30, r18
    296c:	86 87       	std	Z+14, r24	; 0x0e
    296e:	97 87       	std	Z+15, r25	; 0x0f
    2970:	a0 8b       	std	Z+16, r26	; 0x10
    2972:	b1 8b       	std	Z+17, r27	; 0x11
    2974:	8e 89       	ldd	r24, Y+22	; 0x16
    2976:	9f 89       	ldd	r25, Y+23	; 0x17
    2978:	fc 01       	movw	r30, r24
    297a:	12 86       	std	Z+10, r1	; 0x0a
    297c:	13 86       	std	Z+11, r1	; 0x0b
    297e:	14 86       	std	Z+12, r1	; 0x0c
    2980:	15 86       	std	Z+13, r1	; 0x0d
    2982:	89 81       	ldd	r24, Y+1	; 0x01
    2984:	83 30       	cpi	r24, 0x03	; 3
    2986:	09 f0       	breq	.+2      	; 0x298a <chk_mounted+0x626>
    2988:	81 c0       	rjmp	.+258    	; 0x2a8c <chk_mounted+0x728>
    298a:	8e 89       	ldd	r24, Y+22	; 0x16
    298c:	9f 89       	ldd	r25, Y+23	; 0x17
    298e:	fc 01       	movw	r30, r24
    2990:	15 82       	std	Z+5, r1	; 0x05
    2992:	8e 89       	ldd	r24, Y+22	; 0x16
    2994:	9f 89       	ldd	r25, Y+23	; 0x17
    2996:	c2 96       	adiw	r24, 0x32	; 50
    2998:	c0 96       	adiw	r24, 0x30	; 48
    299a:	fc 01       	movw	r30, r24
    299c:	80 81       	ld	r24, Z
    299e:	91 81       	ldd	r25, Z+1	; 0x01
    29a0:	9c 01       	movw	r18, r24
    29a2:	40 e0       	ldi	r20, 0x00	; 0
    29a4:	50 e0       	ldi	r21, 0x00	; 0
    29a6:	8c 81       	ldd	r24, Y+4	; 0x04
    29a8:	9d 81       	ldd	r25, Y+5	; 0x05
    29aa:	ae 81       	ldd	r26, Y+6	; 0x06
    29ac:	bf 81       	ldd	r27, Y+7	; 0x07
    29ae:	82 0f       	add	r24, r18
    29b0:	93 1f       	adc	r25, r19
    29b2:	a4 1f       	adc	r26, r20
    29b4:	b5 1f       	adc	r27, r21
    29b6:	2e 89       	ldd	r18, Y+22	; 0x16
    29b8:	3f 89       	ldd	r19, Y+23	; 0x17
    29ba:	f9 01       	movw	r30, r18
    29bc:	82 8b       	std	Z+18, r24	; 0x12
    29be:	93 8b       	std	Z+19, r25	; 0x13
    29c0:	a4 8b       	std	Z+20, r26	; 0x14
    29c2:	b5 8b       	std	Z+21, r27	; 0x15
    29c4:	8e 89       	ldd	r24, Y+22	; 0x16
    29c6:	9f 89       	ldd	r25, Y+23	; 0x17
    29c8:	fc 01       	movw	r30, r24
    29ca:	82 89       	ldd	r24, Z+18	; 0x12
    29cc:	93 89       	ldd	r25, Z+19	; 0x13
    29ce:	a4 89       	ldd	r26, Z+20	; 0x14
    29d0:	b5 89       	ldd	r27, Z+21	; 0x15
    29d2:	2e 89       	ldd	r18, Y+22	; 0x16
    29d4:	3f 89       	ldd	r19, Y+23	; 0x17
    29d6:	b9 01       	movw	r22, r18
    29d8:	6e 5c       	subi	r22, 0xCE	; 206
    29da:	7f 4f       	sbci	r23, 0xFF	; 255
    29dc:	2e 89       	ldd	r18, Y+22	; 0x16
    29de:	3f 89       	ldd	r19, Y+23	; 0x17
    29e0:	f9 01       	movw	r30, r18
    29e2:	f1 81       	ldd	r31, Z+1	; 0x01
    29e4:	fb a7       	std	Y+43, r31	; 0x2b
    29e6:	01 e0       	ldi	r16, 0x01	; 1
    29e8:	9c 01       	movw	r18, r24
    29ea:	ad 01       	movw	r20, r26
    29ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    29ee:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <disk_read>
    29f2:	88 23       	and	r24, r24
    29f4:	09 f0       	breq	.+2      	; 0x29f8 <chk_mounted+0x694>
    29f6:	4a c0       	rjmp	.+148    	; 0x2a8c <chk_mounted+0x728>
    29f8:	8e 89       	ldd	r24, Y+22	; 0x16
    29fa:	9f 89       	ldd	r25, Y+23	; 0x17
    29fc:	c2 96       	adiw	r24, 0x32	; 50
    29fe:	82 50       	subi	r24, 0x02	; 2
    2a00:	9e 4f       	sbci	r25, 0xFE	; 254
    2a02:	fc 01       	movw	r30, r24
    2a04:	80 81       	ld	r24, Z
    2a06:	91 81       	ldd	r25, Z+1	; 0x01
    2a08:	85 35       	cpi	r24, 0x55	; 85
    2a0a:	9a 4a       	sbci	r25, 0xAA	; 170
    2a0c:	09 f0       	breq	.+2      	; 0x2a10 <chk_mounted+0x6ac>
    2a0e:	3e c0       	rjmp	.+124    	; 0x2a8c <chk_mounted+0x728>
    2a10:	8e 89       	ldd	r24, Y+22	; 0x16
    2a12:	9f 89       	ldd	r25, Y+23	; 0x17
    2a14:	c2 96       	adiw	r24, 0x32	; 50
    2a16:	fc 01       	movw	r30, r24
    2a18:	80 81       	ld	r24, Z
    2a1a:	91 81       	ldd	r25, Z+1	; 0x01
    2a1c:	a2 81       	ldd	r26, Z+2	; 0x02
    2a1e:	b3 81       	ldd	r27, Z+3	; 0x03
    2a20:	82 35       	cpi	r24, 0x52	; 82
    2a22:	92 45       	sbci	r25, 0x52	; 82
    2a24:	a1 46       	sbci	r26, 0x61	; 97
    2a26:	b1 44       	sbci	r27, 0x41	; 65
    2a28:	89 f5       	brne	.+98     	; 0x2a8c <chk_mounted+0x728>
    2a2a:	8e 89       	ldd	r24, Y+22	; 0x16
    2a2c:	9f 89       	ldd	r25, Y+23	; 0x17
    2a2e:	c2 96       	adiw	r24, 0x32	; 50
    2a30:	8c 51       	subi	r24, 0x1C	; 28
    2a32:	9e 4f       	sbci	r25, 0xFE	; 254
    2a34:	fc 01       	movw	r30, r24
    2a36:	80 81       	ld	r24, Z
    2a38:	91 81       	ldd	r25, Z+1	; 0x01
    2a3a:	a2 81       	ldd	r26, Z+2	; 0x02
    2a3c:	b3 81       	ldd	r27, Z+3	; 0x03
    2a3e:	82 37       	cpi	r24, 0x72	; 114
    2a40:	92 47       	sbci	r25, 0x72	; 114
    2a42:	a1 44       	sbci	r26, 0x41	; 65
    2a44:	b1 46       	sbci	r27, 0x61	; 97
    2a46:	11 f5       	brne	.+68     	; 0x2a8c <chk_mounted+0x728>
    2a48:	8e 89       	ldd	r24, Y+22	; 0x16
    2a4a:	9f 89       	ldd	r25, Y+23	; 0x17
    2a4c:	c2 96       	adiw	r24, 0x32	; 50
    2a4e:	84 51       	subi	r24, 0x14	; 20
    2a50:	9e 4f       	sbci	r25, 0xFE	; 254
    2a52:	fc 01       	movw	r30, r24
    2a54:	80 81       	ld	r24, Z
    2a56:	91 81       	ldd	r25, Z+1	; 0x01
    2a58:	a2 81       	ldd	r26, Z+2	; 0x02
    2a5a:	b3 81       	ldd	r27, Z+3	; 0x03
    2a5c:	2e 89       	ldd	r18, Y+22	; 0x16
    2a5e:	3f 89       	ldd	r19, Y+23	; 0x17
    2a60:	f9 01       	movw	r30, r18
    2a62:	82 87       	std	Z+10, r24	; 0x0a
    2a64:	93 87       	std	Z+11, r25	; 0x0b
    2a66:	a4 87       	std	Z+12, r26	; 0x0c
    2a68:	b5 87       	std	Z+13, r27	; 0x0d
    2a6a:	8e 89       	ldd	r24, Y+22	; 0x16
    2a6c:	9f 89       	ldd	r25, Y+23	; 0x17
    2a6e:	c2 96       	adiw	r24, 0x32	; 50
    2a70:	88 51       	subi	r24, 0x18	; 24
    2a72:	9e 4f       	sbci	r25, 0xFE	; 254
    2a74:	fc 01       	movw	r30, r24
    2a76:	80 81       	ld	r24, Z
    2a78:	91 81       	ldd	r25, Z+1	; 0x01
    2a7a:	a2 81       	ldd	r26, Z+2	; 0x02
    2a7c:	b3 81       	ldd	r27, Z+3	; 0x03
    2a7e:	2e 89       	ldd	r18, Y+22	; 0x16
    2a80:	3f 89       	ldd	r19, Y+23	; 0x17
    2a82:	f9 01       	movw	r30, r18
    2a84:	86 87       	std	Z+14, r24	; 0x0e
    2a86:	97 87       	std	Z+15, r25	; 0x0f
    2a88:	a0 8b       	std	Z+16, r26	; 0x10
    2a8a:	b1 8b       	std	Z+17, r27	; 0x11
    2a8c:	8e 89       	ldd	r24, Y+22	; 0x16
    2a8e:	9f 89       	ldd	r25, Y+23	; 0x17
    2a90:	29 81       	ldd	r18, Y+1	; 0x01
    2a92:	fc 01       	movw	r30, r24
    2a94:	20 83       	st	Z, r18
    2a96:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <Fsid>
    2a9a:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <Fsid+0x1>
    2a9e:	01 96       	adiw	r24, 0x01	; 1
    2aa0:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <Fsid+0x1>
    2aa4:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <Fsid>
    2aa8:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <Fsid>
    2aac:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <Fsid+0x1>
    2ab0:	8e 89       	ldd	r24, Y+22	; 0x16
    2ab2:	9f 89       	ldd	r25, Y+23	; 0x17
    2ab4:	fc 01       	movw	r30, r24
    2ab6:	37 83       	std	Z+7, r19	; 0x07
    2ab8:	26 83       	std	Z+6, r18	; 0x06
    2aba:	8e 89       	ldd	r24, Y+22	; 0x16
    2abc:	9f 89       	ldd	r25, Y+23	; 0x17
    2abe:	fc 01       	movw	r30, r24
    2ac0:	16 a6       	std	Z+46, r1	; 0x2e
    2ac2:	17 a6       	std	Z+47, r1	; 0x2f
    2ac4:	10 aa       	std	Z+48, r1	; 0x30
    2ac6:	11 aa       	std	Z+49, r1	; 0x31
    2ac8:	8e 89       	ldd	r24, Y+22	; 0x16
    2aca:	9f 89       	ldd	r25, Y+23	; 0x17
    2acc:	fc 01       	movw	r30, r24
    2ace:	14 82       	std	Z+4, r1	; 0x04
    2ad0:	8e 89       	ldd	r24, Y+22	; 0x16
    2ad2:	9f 89       	ldd	r25, Y+23	; 0x17
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	16 8a       	std	Z+22, r1	; 0x16
    2ad8:	17 8a       	std	Z+23, r1	; 0x17
    2ada:	10 8e       	std	Z+24, r1	; 0x18
    2adc:	11 8e       	std	Z+25, r1	; 0x19
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	ab 96       	adiw	r28, 0x2b	; 43
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	f8 94       	cli
    2ae6:	de bf       	out	0x3e, r29	; 62
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	cd bf       	out	0x3d, r28	; 61
    2aec:	df 91       	pop	r29
    2aee:	cf 91       	pop	r28
    2af0:	1f 91       	pop	r17
    2af2:	0f 91       	pop	r16
    2af4:	ff 90       	pop	r15
    2af6:	ef 90       	pop	r14
    2af8:	08 95       	ret

00002afa <validate>:
    2afa:	cf 93       	push	r28
    2afc:	df 93       	push	r29
    2afe:	00 d0       	rcall	.+0      	; 0x2b00 <validate+0x6>
    2b00:	00 d0       	rcall	.+0      	; 0x2b02 <validate+0x8>
    2b02:	cd b7       	in	r28, 0x3d	; 61
    2b04:	de b7       	in	r29, 0x3e	; 62
    2b06:	9a 83       	std	Y+2, r25	; 0x02
    2b08:	89 83       	std	Y+1, r24	; 0x01
    2b0a:	7c 83       	std	Y+4, r23	; 0x04
    2b0c:	6b 83       	std	Y+3, r22	; 0x03
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	9a 81       	ldd	r25, Y+2	; 0x02
    2b12:	89 2b       	or	r24, r25
    2b14:	81 f0       	breq	.+32     	; 0x2b36 <validate+0x3c>
    2b16:	89 81       	ldd	r24, Y+1	; 0x01
    2b18:	9a 81       	ldd	r25, Y+2	; 0x02
    2b1a:	fc 01       	movw	r30, r24
    2b1c:	80 81       	ld	r24, Z
    2b1e:	88 23       	and	r24, r24
    2b20:	51 f0       	breq	.+20     	; 0x2b36 <validate+0x3c>
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	9a 81       	ldd	r25, Y+2	; 0x02
    2b26:	fc 01       	movw	r30, r24
    2b28:	26 81       	ldd	r18, Z+6	; 0x06
    2b2a:	37 81       	ldd	r19, Z+7	; 0x07
    2b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b30:	28 17       	cp	r18, r24
    2b32:	39 07       	cpc	r19, r25
    2b34:	11 f0       	breq	.+4      	; 0x2b3a <validate+0x40>
    2b36:	89 e0       	ldi	r24, 0x09	; 9
    2b38:	0f c0       	rjmp	.+30     	; 0x2b58 <validate+0x5e>
    2b3a:	89 81       	ldd	r24, Y+1	; 0x01
    2b3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b3e:	fc 01       	movw	r30, r24
    2b40:	81 81       	ldd	r24, Z+1	; 0x01
    2b42:	0e 94 2c 35 	call	0x6a58	; 0x6a58 <disk_status>
    2b46:	88 2f       	mov	r24, r24
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	81 70       	andi	r24, 0x01	; 1
    2b4c:	99 27       	eor	r25, r25
    2b4e:	89 2b       	or	r24, r25
    2b50:	11 f0       	breq	.+4      	; 0x2b56 <validate+0x5c>
    2b52:	83 e0       	ldi	r24, 0x03	; 3
    2b54:	01 c0       	rjmp	.+2      	; 0x2b58 <validate+0x5e>
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	0f 90       	pop	r0
    2b5a:	0f 90       	pop	r0
    2b5c:	0f 90       	pop	r0
    2b5e:	0f 90       	pop	r0
    2b60:	df 91       	pop	r29
    2b62:	cf 91       	pop	r28
    2b64:	08 95       	ret

00002b66 <f_mount>:
    2b66:	cf 93       	push	r28
    2b68:	df 93       	push	r29
    2b6a:	00 d0       	rcall	.+0      	; 0x2b6c <f_mount+0x6>
    2b6c:	00 d0       	rcall	.+0      	; 0x2b6e <f_mount+0x8>
    2b6e:	1f 92       	push	r1
    2b70:	cd b7       	in	r28, 0x3d	; 61
    2b72:	de b7       	in	r29, 0x3e	; 62
    2b74:	8b 83       	std	Y+3, r24	; 0x03
    2b76:	7d 83       	std	Y+5, r23	; 0x05
    2b78:	6c 83       	std	Y+4, r22	; 0x04
    2b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7c:	88 23       	and	r24, r24
    2b7e:	11 f0       	breq	.+4      	; 0x2b84 <f_mount+0x1e>
    2b80:	8b e0       	ldi	r24, 0x0B	; 11
    2b82:	29 c0       	rjmp	.+82     	; 0x2bd6 <f_mount+0x70>
    2b84:	8b 81       	ldd	r24, Y+3	; 0x03
    2b86:	88 2f       	mov	r24, r24
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	88 0f       	add	r24, r24
    2b8c:	99 1f       	adc	r25, r25
    2b8e:	86 57       	subi	r24, 0x76	; 118
    2b90:	9e 4f       	sbci	r25, 0xFE	; 254
    2b92:	fc 01       	movw	r30, r24
    2b94:	80 81       	ld	r24, Z
    2b96:	91 81       	ldd	r25, Z+1	; 0x01
    2b98:	9a 83       	std	Y+2, r25	; 0x02
    2b9a:	89 83       	std	Y+1, r24	; 0x01
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba0:	89 2b       	or	r24, r25
    2ba2:	21 f0       	breq	.+8      	; 0x2bac <f_mount+0x46>
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
    2ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba8:	fc 01       	movw	r30, r24
    2baa:	10 82       	st	Z, r1
    2bac:	8c 81       	ldd	r24, Y+4	; 0x04
    2bae:	9d 81       	ldd	r25, Y+5	; 0x05
    2bb0:	89 2b       	or	r24, r25
    2bb2:	21 f0       	breq	.+8      	; 0x2bbc <f_mount+0x56>
    2bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb6:	9d 81       	ldd	r25, Y+5	; 0x05
    2bb8:	fc 01       	movw	r30, r24
    2bba:	10 82       	st	Z, r1
    2bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbe:	88 2f       	mov	r24, r24
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	88 0f       	add	r24, r24
    2bc4:	99 1f       	adc	r25, r25
    2bc6:	86 57       	subi	r24, 0x76	; 118
    2bc8:	9e 4f       	sbci	r25, 0xFE	; 254
    2bca:	2c 81       	ldd	r18, Y+4	; 0x04
    2bcc:	3d 81       	ldd	r19, Y+5	; 0x05
    2bce:	fc 01       	movw	r30, r24
    2bd0:	31 83       	std	Z+1, r19	; 0x01
    2bd2:	20 83       	st	Z, r18
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	0f 90       	pop	r0
    2bd8:	0f 90       	pop	r0
    2bda:	0f 90       	pop	r0
    2bdc:	0f 90       	pop	r0
    2bde:	0f 90       	pop	r0
    2be0:	df 91       	pop	r29
    2be2:	cf 91       	pop	r28
    2be4:	08 95       	ret

00002be6 <f_open>:
    2be6:	cf 93       	push	r28
    2be8:	df 93       	push	r29
    2bea:	cd b7       	in	r28, 0x3d	; 61
    2bec:	de b7       	in	r29, 0x3e	; 62
    2bee:	e2 97       	sbiw	r28, 0x32	; 50
    2bf0:	0f b6       	in	r0, 0x3f	; 63
    2bf2:	f8 94       	cli
    2bf4:	de bf       	out	0x3e, r29	; 62
    2bf6:	0f be       	out	0x3f, r0	; 63
    2bf8:	cd bf       	out	0x3d, r28	; 61
    2bfa:	9f a7       	std	Y+47, r25	; 0x2f
    2bfc:	8e a7       	std	Y+46, r24	; 0x2e
    2bfe:	79 ab       	std	Y+49, r23	; 0x31
    2c00:	68 ab       	std	Y+48, r22	; 0x30
    2c02:	4a ab       	std	Y+50, r20	; 0x32
    2c04:	8e a5       	ldd	r24, Y+46	; 0x2e
    2c06:	9f a5       	ldd	r25, Y+47	; 0x2f
    2c08:	fc 01       	movw	r30, r24
    2c0a:	11 82       	std	Z+1, r1	; 0x01
    2c0c:	10 82       	st	Z, r1
    2c0e:	8a a9       	ldd	r24, Y+50	; 0x32
    2c10:	8f 71       	andi	r24, 0x1F	; 31
    2c12:	8a ab       	std	Y+50, r24	; 0x32
    2c14:	8a a9       	ldd	r24, Y+50	; 0x32
    2c16:	48 2f       	mov	r20, r24
    2c18:	4e 7f       	andi	r20, 0xFE	; 254
    2c1a:	9e 01       	movw	r18, r28
    2c1c:	24 5f       	subi	r18, 0xF4	; 244
    2c1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c20:	ce 01       	movw	r24, r28
    2c22:	c0 96       	adiw	r24, 0x30	; 48
    2c24:	b9 01       	movw	r22, r18
    2c26:	0e 94 b2 11 	call	0x2364	; 0x2364 <chk_mounted>
    2c2a:	89 83       	std	Y+1, r24	; 0x01
    2c2c:	ce 01       	movw	r24, r28
    2c2e:	82 96       	adiw	r24, 0x22	; 34
    2c30:	99 a3       	std	Y+33, r25	; 0x21
    2c32:	88 a3       	std	Y+32, r24	; 0x20
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
    2c36:	88 23       	and	r24, r24
    2c38:	41 f4       	brne	.+16     	; 0x2c4a <f_open+0x64>
    2c3a:	28 a9       	ldd	r18, Y+48	; 0x30
    2c3c:	39 a9       	ldd	r19, Y+49	; 0x31
    2c3e:	ce 01       	movw	r24, r28
    2c40:	0c 96       	adiw	r24, 0x0c	; 12
    2c42:	b9 01       	movw	r22, r18
    2c44:	0e 94 71 10 	call	0x20e2	; 0x20e2 <follow_path>
    2c48:	89 83       	std	Y+1, r24	; 0x01
    2c4a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c4c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c4e:	9b 83       	std	Y+3, r25	; 0x03
    2c50:	8a 83       	std	Y+2, r24	; 0x02
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	88 23       	and	r24, r24
    2c56:	31 f4       	brne	.+12     	; 0x2c64 <f_open+0x7e>
    2c58:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c5c:	89 2b       	or	r24, r25
    2c5e:	11 f4       	brne	.+4      	; 0x2c64 <f_open+0x7e>
    2c60:	86 e0       	ldi	r24, 0x06	; 6
    2c62:	89 83       	std	Y+1, r24	; 0x01
    2c64:	8a a9       	ldd	r24, Y+50	; 0x32
    2c66:	88 2f       	mov	r24, r24
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	8c 71       	andi	r24, 0x1C	; 28
    2c6c:	99 27       	eor	r25, r25
    2c6e:	89 2b       	or	r24, r25
    2c70:	09 f4       	brne	.+2      	; 0x2c74 <f_open+0x8e>
    2c72:	c6 c0       	rjmp	.+396    	; 0x2e00 <f_open+0x21a>
    2c74:	89 81       	ldd	r24, Y+1	; 0x01
    2c76:	88 23       	and	r24, r24
    2c78:	81 f0       	breq	.+32     	; 0x2c9a <f_open+0xb4>
    2c7a:	89 81       	ldd	r24, Y+1	; 0x01
    2c7c:	84 30       	cpi	r24, 0x04	; 4
    2c7e:	29 f4       	brne	.+10     	; 0x2c8a <f_open+0xa4>
    2c80:	ce 01       	movw	r24, r28
    2c82:	0c 96       	adiw	r24, 0x0c	; 12
    2c84:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <dir_register>
    2c88:	89 83       	std	Y+1, r24	; 0x01
    2c8a:	8a a9       	ldd	r24, Y+50	; 0x32
    2c8c:	88 60       	ori	r24, 0x08	; 8
    2c8e:	8a ab       	std	Y+50, r24	; 0x32
    2c90:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c92:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c94:	9b 83       	std	Y+3, r25	; 0x03
    2c96:	8a 83       	std	Y+2, r24	; 0x02
    2c98:	17 c0       	rjmp	.+46     	; 0x2cc8 <f_open+0xe2>
    2c9a:	8a a9       	ldd	r24, Y+50	; 0x32
    2c9c:	88 2f       	mov	r24, r24
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	84 70       	andi	r24, 0x04	; 4
    2ca2:	99 27       	eor	r25, r25
    2ca4:	89 2b       	or	r24, r25
    2ca6:	19 f0       	breq	.+6      	; 0x2cae <f_open+0xc8>
    2ca8:	88 e0       	ldi	r24, 0x08	; 8
    2caa:	89 83       	std	Y+1, r24	; 0x01
    2cac:	0d c0       	rjmp	.+26     	; 0x2cc8 <f_open+0xe2>
    2cae:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb2:	0b 96       	adiw	r24, 0x0b	; 11
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	80 81       	ld	r24, Z
    2cb8:	88 2f       	mov	r24, r24
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	81 71       	andi	r24, 0x11	; 17
    2cbe:	99 27       	eor	r25, r25
    2cc0:	89 2b       	or	r24, r25
    2cc2:	11 f0       	breq	.+4      	; 0x2cc8 <f_open+0xe2>
    2cc4:	87 e0       	ldi	r24, 0x07	; 7
    2cc6:	89 83       	std	Y+1, r24	; 0x01
    2cc8:	89 81       	ldd	r24, Y+1	; 0x01
    2cca:	88 23       	and	r24, r24
    2ccc:	09 f0       	breq	.+2      	; 0x2cd0 <f_open+0xea>
    2cce:	bd c0       	rjmp	.+378    	; 0x2e4a <f_open+0x264>
    2cd0:	8a a9       	ldd	r24, Y+50	; 0x32
    2cd2:	88 2f       	mov	r24, r24
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	88 70       	andi	r24, 0x08	; 8
    2cd8:	99 27       	eor	r25, r25
    2cda:	89 2b       	or	r24, r25
    2cdc:	09 f4       	brne	.+2      	; 0x2ce0 <f_open+0xfa>
    2cde:	b5 c0       	rjmp	.+362    	; 0x2e4a <f_open+0x264>
    2ce0:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <get_fattime>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	8c 83       	std	Y+4, r24	; 0x04
    2cea:	9d 83       	std	Y+5, r25	; 0x05
    2cec:	ae 83       	std	Y+6, r26	; 0x06
    2cee:	bf 83       	std	Y+7, r27	; 0x07
    2cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf4:	9c 01       	movw	r18, r24
    2cf6:	22 5f       	subi	r18, 0xF2	; 242
    2cf8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cfa:	8c 81       	ldd	r24, Y+4	; 0x04
    2cfc:	9d 81       	ldd	r25, Y+5	; 0x05
    2cfe:	ae 81       	ldd	r26, Y+6	; 0x06
    2d00:	bf 81       	ldd	r27, Y+7	; 0x07
    2d02:	f9 01       	movw	r30, r18
    2d04:	80 83       	st	Z, r24
    2d06:	91 83       	std	Z+1, r25	; 0x01
    2d08:	a2 83       	std	Z+2, r26	; 0x02
    2d0a:	b3 83       	std	Z+3, r27	; 0x03
    2d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d10:	0b 96       	adiw	r24, 0x0b	; 11
    2d12:	fc 01       	movw	r30, r24
    2d14:	10 82       	st	Z, r1
    2d16:	8a 81       	ldd	r24, Y+2	; 0x02
    2d18:	9b 81       	ldd	r25, Y+3	; 0x03
    2d1a:	4c 96       	adiw	r24, 0x1c	; 28
    2d1c:	fc 01       	movw	r30, r24
    2d1e:	10 82       	st	Z, r1
    2d20:	11 82       	std	Z+1, r1	; 0x01
    2d22:	12 82       	std	Z+2, r1	; 0x02
    2d24:	13 82       	std	Z+3, r1	; 0x03
    2d26:	8a 81       	ldd	r24, Y+2	; 0x02
    2d28:	9b 81       	ldd	r25, Y+3	; 0x03
    2d2a:	44 96       	adiw	r24, 0x14	; 20
    2d2c:	fc 01       	movw	r30, r24
    2d2e:	80 81       	ld	r24, Z
    2d30:	91 81       	ldd	r25, Z+1	; 0x01
    2d32:	cc 01       	movw	r24, r24
    2d34:	a0 e0       	ldi	r26, 0x00	; 0
    2d36:	b0 e0       	ldi	r27, 0x00	; 0
    2d38:	ac 01       	movw	r20, r24
    2d3a:	33 27       	eor	r19, r19
    2d3c:	22 27       	eor	r18, r18
    2d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d40:	9b 81       	ldd	r25, Y+3	; 0x03
    2d42:	4a 96       	adiw	r24, 0x1a	; 26
    2d44:	fc 01       	movw	r30, r24
    2d46:	80 81       	ld	r24, Z
    2d48:	91 81       	ldd	r25, Z+1	; 0x01
    2d4a:	cc 01       	movw	r24, r24
    2d4c:	a0 e0       	ldi	r26, 0x00	; 0
    2d4e:	b0 e0       	ldi	r27, 0x00	; 0
    2d50:	82 2b       	or	r24, r18
    2d52:	93 2b       	or	r25, r19
    2d54:	a4 2b       	or	r26, r20
    2d56:	b5 2b       	or	r27, r21
    2d58:	88 87       	std	Y+8, r24	; 0x08
    2d5a:	99 87       	std	Y+9, r25	; 0x09
    2d5c:	aa 87       	std	Y+10, r26	; 0x0a
    2d5e:	bb 87       	std	Y+11, r27	; 0x0b
    2d60:	8a 81       	ldd	r24, Y+2	; 0x02
    2d62:	9b 81       	ldd	r25, Y+3	; 0x03
    2d64:	4a 96       	adiw	r24, 0x1a	; 26
    2d66:	fc 01       	movw	r30, r24
    2d68:	11 82       	std	Z+1, r1	; 0x01
    2d6a:	10 82       	st	Z, r1
    2d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d70:	44 96       	adiw	r24, 0x14	; 20
    2d72:	fc 01       	movw	r30, r24
    2d74:	11 82       	std	Z+1, r1	; 0x01
    2d76:	10 82       	st	Z, r1
    2d78:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d7a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d7c:	21 e0       	ldi	r18, 0x01	; 1
    2d7e:	fc 01       	movw	r30, r24
    2d80:	24 83       	std	Z+4, r18	; 0x04
    2d82:	88 85       	ldd	r24, Y+8	; 0x08
    2d84:	99 85       	ldd	r25, Y+9	; 0x09
    2d86:	aa 85       	ldd	r26, Y+10	; 0x0a
    2d88:	bb 85       	ldd	r27, Y+11	; 0x0b
    2d8a:	89 2b       	or	r24, r25
    2d8c:	8a 2b       	or	r24, r26
    2d8e:	8b 2b       	or	r24, r27
    2d90:	09 f4       	brne	.+2      	; 0x2d94 <f_open+0x1ae>
    2d92:	5b c0       	rjmp	.+182    	; 0x2e4a <f_open+0x264>
    2d94:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d96:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d98:	fc 01       	movw	r30, r24
    2d9a:	86 a5       	ldd	r24, Z+46	; 0x2e
    2d9c:	97 a5       	ldd	r25, Z+47	; 0x2f
    2d9e:	a0 a9       	ldd	r26, Z+48	; 0x30
    2da0:	b1 a9       	ldd	r27, Z+49	; 0x31
    2da2:	8c 83       	std	Y+4, r24	; 0x04
    2da4:	9d 83       	std	Y+5, r25	; 0x05
    2da6:	ae 83       	std	Y+6, r26	; 0x06
    2da8:	bf 83       	std	Y+7, r27	; 0x07
    2daa:	2c 85       	ldd	r18, Y+12	; 0x0c
    2dac:	3d 85       	ldd	r19, Y+13	; 0x0d
    2dae:	88 85       	ldd	r24, Y+8	; 0x08
    2db0:	99 85       	ldd	r25, Y+9	; 0x09
    2db2:	aa 85       	ldd	r26, Y+10	; 0x0a
    2db4:	bb 85       	ldd	r27, Y+11	; 0x0b
    2db6:	ac 01       	movw	r20, r24
    2db8:	bd 01       	movw	r22, r26
    2dba:	c9 01       	movw	r24, r18
    2dbc:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <remove_chain>
    2dc0:	89 83       	std	Y+1, r24	; 0x01
    2dc2:	89 81       	ldd	r24, Y+1	; 0x01
    2dc4:	88 23       	and	r24, r24
    2dc6:	09 f0       	breq	.+2      	; 0x2dca <f_open+0x1e4>
    2dc8:	40 c0       	rjmp	.+128    	; 0x2e4a <f_open+0x264>
    2dca:	2c 85       	ldd	r18, Y+12	; 0x0c
    2dcc:	3d 85       	ldd	r19, Y+13	; 0x0d
    2dce:	88 85       	ldd	r24, Y+8	; 0x08
    2dd0:	99 85       	ldd	r25, Y+9	; 0x09
    2dd2:	aa 85       	ldd	r26, Y+10	; 0x0a
    2dd4:	bb 85       	ldd	r27, Y+11	; 0x0b
    2dd6:	01 97       	sbiw	r24, 0x01	; 1
    2dd8:	a1 09       	sbc	r26, r1
    2dda:	b1 09       	sbc	r27, r1
    2ddc:	f9 01       	movw	r30, r18
    2dde:	82 87       	std	Z+10, r24	; 0x0a
    2de0:	93 87       	std	Z+11, r25	; 0x0b
    2de2:	a4 87       	std	Z+12, r26	; 0x0c
    2de4:	b5 87       	std	Z+13, r27	; 0x0d
    2de6:	2c 85       	ldd	r18, Y+12	; 0x0c
    2de8:	3d 85       	ldd	r19, Y+13	; 0x0d
    2dea:	8c 81       	ldd	r24, Y+4	; 0x04
    2dec:	9d 81       	ldd	r25, Y+5	; 0x05
    2dee:	ae 81       	ldd	r26, Y+6	; 0x06
    2df0:	bf 81       	ldd	r27, Y+7	; 0x07
    2df2:	ac 01       	movw	r20, r24
    2df4:	bd 01       	movw	r22, r26
    2df6:	c9 01       	movw	r24, r18
    2df8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <move_window>
    2dfc:	89 83       	std	Y+1, r24	; 0x01
    2dfe:	25 c0       	rjmp	.+74     	; 0x2e4a <f_open+0x264>
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	88 23       	and	r24, r24
    2e04:	11 f5       	brne	.+68     	; 0x2e4a <f_open+0x264>
    2e06:	8a 81       	ldd	r24, Y+2	; 0x02
    2e08:	9b 81       	ldd	r25, Y+3	; 0x03
    2e0a:	0b 96       	adiw	r24, 0x0b	; 11
    2e0c:	fc 01       	movw	r30, r24
    2e0e:	80 81       	ld	r24, Z
    2e10:	88 2f       	mov	r24, r24
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	80 71       	andi	r24, 0x10	; 16
    2e16:	99 27       	eor	r25, r25
    2e18:	89 2b       	or	r24, r25
    2e1a:	19 f0       	breq	.+6      	; 0x2e22 <f_open+0x23c>
    2e1c:	84 e0       	ldi	r24, 0x04	; 4
    2e1e:	89 83       	std	Y+1, r24	; 0x01
    2e20:	14 c0       	rjmp	.+40     	; 0x2e4a <f_open+0x264>
    2e22:	8a a9       	ldd	r24, Y+50	; 0x32
    2e24:	88 2f       	mov	r24, r24
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	82 70       	andi	r24, 0x02	; 2
    2e2a:	99 27       	eor	r25, r25
    2e2c:	89 2b       	or	r24, r25
    2e2e:	69 f0       	breq	.+26     	; 0x2e4a <f_open+0x264>
    2e30:	8a 81       	ldd	r24, Y+2	; 0x02
    2e32:	9b 81       	ldd	r25, Y+3	; 0x03
    2e34:	0b 96       	adiw	r24, 0x0b	; 11
    2e36:	fc 01       	movw	r30, r24
    2e38:	80 81       	ld	r24, Z
    2e3a:	88 2f       	mov	r24, r24
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	81 70       	andi	r24, 0x01	; 1
    2e40:	99 27       	eor	r25, r25
    2e42:	89 2b       	or	r24, r25
    2e44:	11 f0       	breq	.+4      	; 0x2e4a <f_open+0x264>
    2e46:	87 e0       	ldi	r24, 0x07	; 7
    2e48:	89 83       	std	Y+1, r24	; 0x01
    2e4a:	89 81       	ldd	r24, Y+1	; 0x01
    2e4c:	88 23       	and	r24, r24
    2e4e:	f9 f4       	brne	.+62     	; 0x2e8e <f_open+0x2a8>
    2e50:	8a a9       	ldd	r24, Y+50	; 0x32
    2e52:	88 2f       	mov	r24, r24
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	88 70       	andi	r24, 0x08	; 8
    2e58:	99 27       	eor	r25, r25
    2e5a:	89 2b       	or	r24, r25
    2e5c:	19 f0       	breq	.+6      	; 0x2e64 <f_open+0x27e>
    2e5e:	8a a9       	ldd	r24, Y+50	; 0x32
    2e60:	80 62       	ori	r24, 0x20	; 32
    2e62:	8a ab       	std	Y+50, r24	; 0x32
    2e64:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e66:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e68:	fc 01       	movw	r30, r24
    2e6a:	86 a5       	ldd	r24, Z+46	; 0x2e
    2e6c:	97 a5       	ldd	r25, Z+47	; 0x2f
    2e6e:	a0 a9       	ldd	r26, Z+48	; 0x30
    2e70:	b1 a9       	ldd	r27, Z+49	; 0x31
    2e72:	2e a5       	ldd	r18, Y+46	; 0x2e
    2e74:	3f a5       	ldd	r19, Y+47	; 0x2f
    2e76:	f9 01       	movw	r30, r18
    2e78:	82 8f       	std	Z+26, r24	; 0x1a
    2e7a:	93 8f       	std	Z+27, r25	; 0x1b
    2e7c:	a4 8f       	std	Z+28, r26	; 0x1c
    2e7e:	b5 8f       	std	Z+29, r27	; 0x1d
    2e80:	8e a5       	ldd	r24, Y+46	; 0x2e
    2e82:	9f a5       	ldd	r25, Y+47	; 0x2f
    2e84:	2a 81       	ldd	r18, Y+2	; 0x02
    2e86:	3b 81       	ldd	r19, Y+3	; 0x03
    2e88:	fc 01       	movw	r30, r24
    2e8a:	37 8f       	std	Z+31, r19	; 0x1f
    2e8c:	26 8f       	std	Z+30, r18	; 0x1e
    2e8e:	89 81       	ldd	r24, Y+1	; 0x01
    2e90:	88 23       	and	r24, r24
    2e92:	09 f0       	breq	.+2      	; 0x2e96 <f_open+0x2b0>
    2e94:	53 c0       	rjmp	.+166    	; 0x2f3c <f_open+0x356>
    2e96:	8e a5       	ldd	r24, Y+46	; 0x2e
    2e98:	9f a5       	ldd	r25, Y+47	; 0x2f
    2e9a:	2a a9       	ldd	r18, Y+50	; 0x32
    2e9c:	fc 01       	movw	r30, r24
    2e9e:	24 83       	std	Z+4, r18	; 0x04
    2ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ea4:	44 96       	adiw	r24, 0x14	; 20
    2ea6:	fc 01       	movw	r30, r24
    2ea8:	80 81       	ld	r24, Z
    2eaa:	91 81       	ldd	r25, Z+1	; 0x01
    2eac:	cc 01       	movw	r24, r24
    2eae:	a0 e0       	ldi	r26, 0x00	; 0
    2eb0:	b0 e0       	ldi	r27, 0x00	; 0
    2eb2:	ac 01       	movw	r20, r24
    2eb4:	33 27       	eor	r19, r19
    2eb6:	22 27       	eor	r18, r18
    2eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eba:	9b 81       	ldd	r25, Y+3	; 0x03
    2ebc:	4a 96       	adiw	r24, 0x1a	; 26
    2ebe:	fc 01       	movw	r30, r24
    2ec0:	80 81       	ld	r24, Z
    2ec2:	91 81       	ldd	r25, Z+1	; 0x01
    2ec4:	cc 01       	movw	r24, r24
    2ec6:	a0 e0       	ldi	r26, 0x00	; 0
    2ec8:	b0 e0       	ldi	r27, 0x00	; 0
    2eca:	82 2b       	or	r24, r18
    2ecc:	93 2b       	or	r25, r19
    2ece:	a4 2b       	or	r26, r20
    2ed0:	b5 2b       	or	r27, r21
    2ed2:	2e a5       	ldd	r18, Y+46	; 0x2e
    2ed4:	3f a5       	ldd	r19, Y+47	; 0x2f
    2ed6:	f9 01       	movw	r30, r18
    2ed8:	86 87       	std	Z+14, r24	; 0x0e
    2eda:	97 87       	std	Z+15, r25	; 0x0f
    2edc:	a0 8b       	std	Z+16, r26	; 0x10
    2ede:	b1 8b       	std	Z+17, r27	; 0x11
    2ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ee4:	4c 96       	adiw	r24, 0x1c	; 28
    2ee6:	fc 01       	movw	r30, r24
    2ee8:	80 81       	ld	r24, Z
    2eea:	91 81       	ldd	r25, Z+1	; 0x01
    2eec:	a2 81       	ldd	r26, Z+2	; 0x02
    2eee:	b3 81       	ldd	r27, Z+3	; 0x03
    2ef0:	2e a5       	ldd	r18, Y+46	; 0x2e
    2ef2:	3f a5       	ldd	r19, Y+47	; 0x2f
    2ef4:	f9 01       	movw	r30, r18
    2ef6:	82 87       	std	Z+10, r24	; 0x0a
    2ef8:	93 87       	std	Z+11, r25	; 0x0b
    2efa:	a4 87       	std	Z+12, r26	; 0x0c
    2efc:	b5 87       	std	Z+13, r27	; 0x0d
    2efe:	8e a5       	ldd	r24, Y+46	; 0x2e
    2f00:	9f a5       	ldd	r25, Y+47	; 0x2f
    2f02:	fc 01       	movw	r30, r24
    2f04:	16 82       	std	Z+6, r1	; 0x06
    2f06:	17 82       	std	Z+7, r1	; 0x07
    2f08:	10 86       	std	Z+8, r1	; 0x08
    2f0a:	11 86       	std	Z+9, r1	; 0x09
    2f0c:	8e a5       	ldd	r24, Y+46	; 0x2e
    2f0e:	9f a5       	ldd	r25, Y+47	; 0x2f
    2f10:	fc 01       	movw	r30, r24
    2f12:	16 8a       	std	Z+22, r1	; 0x16
    2f14:	17 8a       	std	Z+23, r1	; 0x17
    2f16:	10 8e       	std	Z+24, r1	; 0x18
    2f18:	11 8e       	std	Z+25, r1	; 0x19
    2f1a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f1c:	3d 85       	ldd	r19, Y+13	; 0x0d
    2f1e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2f20:	9f a5       	ldd	r25, Y+47	; 0x2f
    2f22:	fc 01       	movw	r30, r24
    2f24:	31 83       	std	Z+1, r19	; 0x01
    2f26:	20 83       	st	Z, r18
    2f28:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f2a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f2c:	fc 01       	movw	r30, r24
    2f2e:	26 81       	ldd	r18, Z+6	; 0x06
    2f30:	37 81       	ldd	r19, Z+7	; 0x07
    2f32:	8e a5       	ldd	r24, Y+46	; 0x2e
    2f34:	9f a5       	ldd	r25, Y+47	; 0x2f
    2f36:	fc 01       	movw	r30, r24
    2f38:	33 83       	std	Z+3, r19	; 0x03
    2f3a:	22 83       	std	Z+2, r18	; 0x02
    2f3c:	89 81       	ldd	r24, Y+1	; 0x01
    2f3e:	e2 96       	adiw	r28, 0x32	; 50
    2f40:	0f b6       	in	r0, 0x3f	; 63
    2f42:	f8 94       	cli
    2f44:	de bf       	out	0x3e, r29	; 62
    2f46:	0f be       	out	0x3f, r0	; 63
    2f48:	cd bf       	out	0x3d, r28	; 61
    2f4a:	df 91       	pop	r29
    2f4c:	cf 91       	pop	r28
    2f4e:	08 95       	ret

00002f50 <f_read>:
    2f50:	ef 92       	push	r14
    2f52:	ff 92       	push	r15
    2f54:	0f 93       	push	r16
    2f56:	1f 93       	push	r17
    2f58:	cf 93       	push	r28
    2f5a:	df 93       	push	r29
    2f5c:	cd b7       	in	r28, 0x3d	; 61
    2f5e:	de b7       	in	r29, 0x3e	; 62
    2f60:	6c 97       	sbiw	r28, 0x1c	; 28
    2f62:	0f b6       	in	r0, 0x3f	; 63
    2f64:	f8 94       	cli
    2f66:	de bf       	out	0x3e, r29	; 62
    2f68:	0f be       	out	0x3f, r0	; 63
    2f6a:	cd bf       	out	0x3d, r28	; 61
    2f6c:	9e 8b       	std	Y+22, r25	; 0x16
    2f6e:	8d 8b       	std	Y+21, r24	; 0x15
    2f70:	78 8f       	std	Y+24, r23	; 0x18
    2f72:	6f 8b       	std	Y+23, r22	; 0x17
    2f74:	5a 8f       	std	Y+26, r21	; 0x1a
    2f76:	49 8f       	std	Y+25, r20	; 0x19
    2f78:	3c 8f       	std	Y+28, r19	; 0x1c
    2f7a:	2b 8f       	std	Y+27, r18	; 0x1b
    2f7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2f80:	9e 83       	std	Y+6, r25	; 0x06
    2f82:	8d 83       	std	Y+5, r24	; 0x05
    2f84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f88:	dc 01       	movw	r26, r24
    2f8a:	1d 92       	st	X+, r1
    2f8c:	1c 92       	st	X, r1
    2f8e:	8d 89       	ldd	r24, Y+21	; 0x15
    2f90:	9e 89       	ldd	r25, Y+22	; 0x16
    2f92:	fc 01       	movw	r30, r24
    2f94:	22 81       	ldd	r18, Z+2	; 0x02
    2f96:	33 81       	ldd	r19, Z+3	; 0x03
    2f98:	8d 89       	ldd	r24, Y+21	; 0x15
    2f9a:	9e 89       	ldd	r25, Y+22	; 0x16
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	8d 91       	ld	r24, X+
    2fa0:	9c 91       	ld	r25, X
    2fa2:	b9 01       	movw	r22, r18
    2fa4:	0e 94 7d 15 	call	0x2afa	; 0x2afa <validate>
    2fa8:	8f 83       	std	Y+7, r24	; 0x07
    2faa:	8f 81       	ldd	r24, Y+7	; 0x07
    2fac:	88 23       	and	r24, r24
    2fae:	11 f0       	breq	.+4      	; 0x2fb4 <f_read+0x64>
    2fb0:	8f 81       	ldd	r24, Y+7	; 0x07
    2fb2:	5b c2       	rjmp	.+1206   	; 0x346a <f_read+0x51a>
    2fb4:	8d 89       	ldd	r24, Y+21	; 0x15
    2fb6:	9e 89       	ldd	r25, Y+22	; 0x16
    2fb8:	fc 01       	movw	r30, r24
    2fba:	84 81       	ldd	r24, Z+4	; 0x04
    2fbc:	88 23       	and	r24, r24
    2fbe:	14 f4       	brge	.+4      	; 0x2fc4 <f_read+0x74>
    2fc0:	82 e0       	ldi	r24, 0x02	; 2
    2fc2:	53 c2       	rjmp	.+1190   	; 0x346a <f_read+0x51a>
    2fc4:	8d 89       	ldd	r24, Y+21	; 0x15
    2fc6:	9e 89       	ldd	r25, Y+22	; 0x16
    2fc8:	dc 01       	movw	r26, r24
    2fca:	14 96       	adiw	r26, 0x04	; 4
    2fcc:	8c 91       	ld	r24, X
    2fce:	88 2f       	mov	r24, r24
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	81 70       	andi	r24, 0x01	; 1
    2fd4:	99 27       	eor	r25, r25
    2fd6:	89 2b       	or	r24, r25
    2fd8:	11 f4       	brne	.+4      	; 0x2fde <f_read+0x8e>
    2fda:	87 e0       	ldi	r24, 0x07	; 7
    2fdc:	46 c2       	rjmp	.+1164   	; 0x346a <f_read+0x51a>
    2fde:	8d 89       	ldd	r24, Y+21	; 0x15
    2fe0:	9e 89       	ldd	r25, Y+22	; 0x16
    2fe2:	fc 01       	movw	r30, r24
    2fe4:	22 85       	ldd	r18, Z+10	; 0x0a
    2fe6:	33 85       	ldd	r19, Z+11	; 0x0b
    2fe8:	44 85       	ldd	r20, Z+12	; 0x0c
    2fea:	55 85       	ldd	r21, Z+13	; 0x0d
    2fec:	8d 89       	ldd	r24, Y+21	; 0x15
    2fee:	9e 89       	ldd	r25, Y+22	; 0x16
    2ff0:	fc 01       	movw	r30, r24
    2ff2:	86 81       	ldd	r24, Z+6	; 0x06
    2ff4:	97 81       	ldd	r25, Z+7	; 0x07
    2ff6:	a0 85       	ldd	r26, Z+8	; 0x08
    2ff8:	b1 85       	ldd	r27, Z+9	; 0x09
    2ffa:	79 01       	movw	r14, r18
    2ffc:	8a 01       	movw	r16, r20
    2ffe:	e8 1a       	sub	r14, r24
    3000:	f9 0a       	sbc	r15, r25
    3002:	0a 0b       	sbc	r16, r26
    3004:	1b 0b       	sbc	r17, r27
    3006:	d8 01       	movw	r26, r16
    3008:	c7 01       	movw	r24, r14
    300a:	88 87       	std	Y+8, r24	; 0x08
    300c:	99 87       	std	Y+9, r25	; 0x09
    300e:	aa 87       	std	Y+10, r26	; 0x0a
    3010:	bb 87       	std	Y+11, r27	; 0x0b
    3012:	89 8d       	ldd	r24, Y+25	; 0x19
    3014:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3016:	9c 01       	movw	r18, r24
    3018:	40 e0       	ldi	r20, 0x00	; 0
    301a:	50 e0       	ldi	r21, 0x00	; 0
    301c:	88 85       	ldd	r24, Y+8	; 0x08
    301e:	99 85       	ldd	r25, Y+9	; 0x09
    3020:	aa 85       	ldd	r26, Y+10	; 0x0a
    3022:	bb 85       	ldd	r27, Y+11	; 0x0b
    3024:	82 17       	cp	r24, r18
    3026:	93 07       	cpc	r25, r19
    3028:	a4 07       	cpc	r26, r20
    302a:	b5 07       	cpc	r27, r21
    302c:	08 f0       	brcs	.+2      	; 0x3030 <f_read+0xe0>
    302e:	17 c2       	rjmp	.+1070   	; 0x345e <f_read+0x50e>
    3030:	88 85       	ldd	r24, Y+8	; 0x08
    3032:	99 85       	ldd	r25, Y+9	; 0x09
    3034:	9a 8f       	std	Y+26, r25	; 0x1a
    3036:	89 8f       	std	Y+25, r24	; 0x19
    3038:	12 c2       	rjmp	.+1060   	; 0x345e <f_read+0x50e>
    303a:	8d 89       	ldd	r24, Y+21	; 0x15
    303c:	9e 89       	ldd	r25, Y+22	; 0x16
    303e:	fc 01       	movw	r30, r24
    3040:	86 81       	ldd	r24, Z+6	; 0x06
    3042:	97 81       	ldd	r25, Z+7	; 0x07
    3044:	a0 85       	ldd	r26, Z+8	; 0x08
    3046:	b1 85       	ldd	r27, Z+9	; 0x09
    3048:	91 70       	andi	r25, 0x01	; 1
    304a:	aa 27       	eor	r26, r26
    304c:	bb 27       	eor	r27, r27
    304e:	89 2b       	or	r24, r25
    3050:	8a 2b       	or	r24, r26
    3052:	8b 2b       	or	r24, r27
    3054:	09 f0       	breq	.+2      	; 0x3058 <f_read+0x108>
    3056:	76 c1       	rjmp	.+748    	; 0x3344 <f_read+0x3f4>
    3058:	8d 89       	ldd	r24, Y+21	; 0x15
    305a:	9e 89       	ldd	r25, Y+22	; 0x16
    305c:	fc 01       	movw	r30, r24
    305e:	86 81       	ldd	r24, Z+6	; 0x06
    3060:	97 81       	ldd	r25, Z+7	; 0x07
    3062:	a0 85       	ldd	r26, Z+8	; 0x08
    3064:	b1 85       	ldd	r27, Z+9	; 0x09
    3066:	07 2e       	mov	r0, r23
    3068:	79 e0       	ldi	r23, 0x09	; 9
    306a:	b6 95       	lsr	r27
    306c:	a7 95       	ror	r26
    306e:	97 95       	ror	r25
    3070:	87 95       	ror	r24
    3072:	7a 95       	dec	r23
    3074:	d1 f7       	brne	.-12     	; 0x306a <f_read+0x11a>
    3076:	70 2d       	mov	r23, r0
    3078:	28 2f       	mov	r18, r24
    307a:	8d 89       	ldd	r24, Y+21	; 0x15
    307c:	9e 89       	ldd	r25, Y+22	; 0x16
    307e:	dc 01       	movw	r26, r24
    3080:	8d 91       	ld	r24, X+
    3082:	9c 91       	ld	r25, X
    3084:	fc 01       	movw	r30, r24
    3086:	82 81       	ldd	r24, Z+2	; 0x02
    3088:	81 50       	subi	r24, 0x01	; 1
    308a:	82 23       	and	r24, r18
    308c:	8c 87       	std	Y+12, r24	; 0x0c
    308e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3090:	88 23       	and	r24, r24
    3092:	09 f0       	breq	.+2      	; 0x3096 <f_read+0x146>
    3094:	60 c0       	rjmp	.+192    	; 0x3156 <f_read+0x206>
    3096:	8d 89       	ldd	r24, Y+21	; 0x15
    3098:	9e 89       	ldd	r25, Y+22	; 0x16
    309a:	fc 01       	movw	r30, r24
    309c:	86 81       	ldd	r24, Z+6	; 0x06
    309e:	97 81       	ldd	r25, Z+7	; 0x07
    30a0:	a0 85       	ldd	r26, Z+8	; 0x08
    30a2:	b1 85       	ldd	r27, Z+9	; 0x09
    30a4:	89 2b       	or	r24, r25
    30a6:	8a 2b       	or	r24, r26
    30a8:	8b 2b       	or	r24, r27
    30aa:	41 f4       	brne	.+16     	; 0x30bc <f_read+0x16c>
    30ac:	8d 89       	ldd	r24, Y+21	; 0x15
    30ae:	9e 89       	ldd	r25, Y+22	; 0x16
    30b0:	fc 01       	movw	r30, r24
    30b2:	86 85       	ldd	r24, Z+14	; 0x0e
    30b4:	97 85       	ldd	r25, Z+15	; 0x0f
    30b6:	a0 89       	ldd	r26, Z+16	; 0x10
    30b8:	b1 89       	ldd	r27, Z+17	; 0x11
    30ba:	13 c0       	rjmp	.+38     	; 0x30e2 <f_read+0x192>
    30bc:	8d 89       	ldd	r24, Y+21	; 0x15
    30be:	9e 89       	ldd	r25, Y+22	; 0x16
    30c0:	fc 01       	movw	r30, r24
    30c2:	82 89       	ldd	r24, Z+18	; 0x12
    30c4:	93 89       	ldd	r25, Z+19	; 0x13
    30c6:	a4 89       	ldd	r26, Z+20	; 0x14
    30c8:	b5 89       	ldd	r27, Z+21	; 0x15
    30ca:	2d 89       	ldd	r18, Y+21	; 0x15
    30cc:	3e 89       	ldd	r19, Y+22	; 0x16
    30ce:	f9 01       	movw	r30, r18
    30d0:	20 81       	ld	r18, Z
    30d2:	31 81       	ldd	r19, Z+1	; 0x01
    30d4:	ac 01       	movw	r20, r24
    30d6:	bd 01       	movw	r22, r26
    30d8:	c9 01       	movw	r24, r18
    30da:	0e 94 c2 05 	call	0xb84	; 0xb84 <get_fat>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	89 8b       	std	Y+17, r24	; 0x11
    30e4:	9a 8b       	std	Y+18, r25	; 0x12
    30e6:	ab 8b       	std	Y+19, r26	; 0x13
    30e8:	bc 8b       	std	Y+20, r27	; 0x14
    30ea:	89 89       	ldd	r24, Y+17	; 0x11
    30ec:	9a 89       	ldd	r25, Y+18	; 0x12
    30ee:	ab 89       	ldd	r26, Y+19	; 0x13
    30f0:	bc 89       	ldd	r27, Y+20	; 0x14
    30f2:	02 97       	sbiw	r24, 0x02	; 2
    30f4:	a1 05       	cpc	r26, r1
    30f6:	b1 05       	cpc	r27, r1
    30f8:	68 f4       	brcc	.+26     	; 0x3114 <f_read+0x1c4>
    30fa:	8d 89       	ldd	r24, Y+21	; 0x15
    30fc:	9e 89       	ldd	r25, Y+22	; 0x16
    30fe:	dc 01       	movw	r26, r24
    3100:	14 96       	adiw	r26, 0x04	; 4
    3102:	8c 91       	ld	r24, X
    3104:	28 2f       	mov	r18, r24
    3106:	20 68       	ori	r18, 0x80	; 128
    3108:	8d 89       	ldd	r24, Y+21	; 0x15
    310a:	9e 89       	ldd	r25, Y+22	; 0x16
    310c:	fc 01       	movw	r30, r24
    310e:	24 83       	std	Z+4, r18	; 0x04
    3110:	82 e0       	ldi	r24, 0x02	; 2
    3112:	ab c1       	rjmp	.+854    	; 0x346a <f_read+0x51a>
    3114:	89 89       	ldd	r24, Y+17	; 0x11
    3116:	9a 89       	ldd	r25, Y+18	; 0x12
    3118:	ab 89       	ldd	r26, Y+19	; 0x13
    311a:	bc 89       	ldd	r27, Y+20	; 0x14
    311c:	8f 3f       	cpi	r24, 0xFF	; 255
    311e:	9f 4f       	sbci	r25, 0xFF	; 255
    3120:	af 4f       	sbci	r26, 0xFF	; 255
    3122:	bf 4f       	sbci	r27, 0xFF	; 255
    3124:	69 f4       	brne	.+26     	; 0x3140 <f_read+0x1f0>
    3126:	8d 89       	ldd	r24, Y+21	; 0x15
    3128:	9e 89       	ldd	r25, Y+22	; 0x16
    312a:	dc 01       	movw	r26, r24
    312c:	14 96       	adiw	r26, 0x04	; 4
    312e:	8c 91       	ld	r24, X
    3130:	28 2f       	mov	r18, r24
    3132:	20 68       	ori	r18, 0x80	; 128
    3134:	8d 89       	ldd	r24, Y+21	; 0x15
    3136:	9e 89       	ldd	r25, Y+22	; 0x16
    3138:	fc 01       	movw	r30, r24
    313a:	24 83       	std	Z+4, r18	; 0x04
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	95 c1       	rjmp	.+810    	; 0x346a <f_read+0x51a>
    3140:	2d 89       	ldd	r18, Y+21	; 0x15
    3142:	3e 89       	ldd	r19, Y+22	; 0x16
    3144:	89 89       	ldd	r24, Y+17	; 0x11
    3146:	9a 89       	ldd	r25, Y+18	; 0x12
    3148:	ab 89       	ldd	r26, Y+19	; 0x13
    314a:	bc 89       	ldd	r27, Y+20	; 0x14
    314c:	f9 01       	movw	r30, r18
    314e:	82 8b       	std	Z+18, r24	; 0x12
    3150:	93 8b       	std	Z+19, r25	; 0x13
    3152:	a4 8b       	std	Z+20, r26	; 0x14
    3154:	b5 8b       	std	Z+21, r27	; 0x15
    3156:	8d 89       	ldd	r24, Y+21	; 0x15
    3158:	9e 89       	ldd	r25, Y+22	; 0x16
    315a:	fc 01       	movw	r30, r24
    315c:	82 89       	ldd	r24, Z+18	; 0x12
    315e:	93 89       	ldd	r25, Z+19	; 0x13
    3160:	a4 89       	ldd	r26, Z+20	; 0x14
    3162:	b5 89       	ldd	r27, Z+21	; 0x15
    3164:	2d 89       	ldd	r18, Y+21	; 0x15
    3166:	3e 89       	ldd	r19, Y+22	; 0x16
    3168:	f9 01       	movw	r30, r18
    316a:	20 81       	ld	r18, Z
    316c:	31 81       	ldd	r19, Z+1	; 0x01
    316e:	ac 01       	movw	r20, r24
    3170:	bd 01       	movw	r22, r26
    3172:	c9 01       	movw	r24, r18
    3174:	0e 94 68 05 	call	0xad0	; 0xad0 <clust2sect>
    3178:	dc 01       	movw	r26, r24
    317a:	cb 01       	movw	r24, r22
    317c:	8d 87       	std	Y+13, r24	; 0x0d
    317e:	9e 87       	std	Y+14, r25	; 0x0e
    3180:	af 87       	std	Y+15, r26	; 0x0f
    3182:	b8 8b       	std	Y+16, r27	; 0x10
    3184:	8d 85       	ldd	r24, Y+13	; 0x0d
    3186:	9e 85       	ldd	r25, Y+14	; 0x0e
    3188:	af 85       	ldd	r26, Y+15	; 0x0f
    318a:	b8 89       	ldd	r27, Y+16	; 0x10
    318c:	89 2b       	or	r24, r25
    318e:	8a 2b       	or	r24, r26
    3190:	8b 2b       	or	r24, r27
    3192:	69 f4       	brne	.+26     	; 0x31ae <f_read+0x25e>
    3194:	8d 89       	ldd	r24, Y+21	; 0x15
    3196:	9e 89       	ldd	r25, Y+22	; 0x16
    3198:	dc 01       	movw	r26, r24
    319a:	14 96       	adiw	r26, 0x04	; 4
    319c:	8c 91       	ld	r24, X
    319e:	28 2f       	mov	r18, r24
    31a0:	20 68       	ori	r18, 0x80	; 128
    31a2:	8d 89       	ldd	r24, Y+21	; 0x15
    31a4:	9e 89       	ldd	r25, Y+22	; 0x16
    31a6:	fc 01       	movw	r30, r24
    31a8:	24 83       	std	Z+4, r18	; 0x04
    31aa:	82 e0       	ldi	r24, 0x02	; 2
    31ac:	5e c1       	rjmp	.+700    	; 0x346a <f_read+0x51a>
    31ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    31b0:	88 2f       	mov	r24, r24
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	a0 e0       	ldi	r26, 0x00	; 0
    31b6:	b0 e0       	ldi	r27, 0x00	; 0
    31b8:	2d 85       	ldd	r18, Y+13	; 0x0d
    31ba:	3e 85       	ldd	r19, Y+14	; 0x0e
    31bc:	4f 85       	ldd	r20, Y+15	; 0x0f
    31be:	58 89       	ldd	r21, Y+16	; 0x10
    31c0:	82 0f       	add	r24, r18
    31c2:	93 1f       	adc	r25, r19
    31c4:	a4 1f       	adc	r26, r20
    31c6:	b5 1f       	adc	r27, r21
    31c8:	8d 87       	std	Y+13, r24	; 0x0d
    31ca:	9e 87       	std	Y+14, r25	; 0x0e
    31cc:	af 87       	std	Y+15, r26	; 0x0f
    31ce:	b8 8b       	std	Y+16, r27	; 0x10
    31d0:	89 8d       	ldd	r24, Y+25	; 0x19
    31d2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    31d4:	89 2f       	mov	r24, r25
    31d6:	99 27       	eor	r25, r25
    31d8:	86 95       	lsr	r24
    31da:	9c 83       	std	Y+4, r25	; 0x04
    31dc:	8b 83       	std	Y+3, r24	; 0x03
    31de:	8b 81       	ldd	r24, Y+3	; 0x03
    31e0:	9c 81       	ldd	r25, Y+4	; 0x04
    31e2:	89 2b       	or	r24, r25
    31e4:	09 f4       	brne	.+2      	; 0x31e8 <f_read+0x298>
    31e6:	a3 c0       	rjmp	.+326    	; 0x332e <f_read+0x3de>
    31e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    31ea:	28 2f       	mov	r18, r24
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	8b 81       	ldd	r24, Y+3	; 0x03
    31f0:	9c 81       	ldd	r25, Y+4	; 0x04
    31f2:	28 0f       	add	r18, r24
    31f4:	39 1f       	adc	r19, r25
    31f6:	8d 89       	ldd	r24, Y+21	; 0x15
    31f8:	9e 89       	ldd	r25, Y+22	; 0x16
    31fa:	dc 01       	movw	r26, r24
    31fc:	8d 91       	ld	r24, X+
    31fe:	9c 91       	ld	r25, X
    3200:	fc 01       	movw	r30, r24
    3202:	82 81       	ldd	r24, Z+2	; 0x02
    3204:	88 2f       	mov	r24, r24
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	82 17       	cp	r24, r18
    320a:	93 07       	cpc	r25, r19
    320c:	90 f4       	brcc	.+36     	; 0x3232 <f_read+0x2e2>
    320e:	8d 89       	ldd	r24, Y+21	; 0x15
    3210:	9e 89       	ldd	r25, Y+22	; 0x16
    3212:	dc 01       	movw	r26, r24
    3214:	8d 91       	ld	r24, X+
    3216:	9c 91       	ld	r25, X
    3218:	fc 01       	movw	r30, r24
    321a:	82 81       	ldd	r24, Z+2	; 0x02
    321c:	28 2f       	mov	r18, r24
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	8c 85       	ldd	r24, Y+12	; 0x0c
    3222:	88 2f       	mov	r24, r24
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	79 01       	movw	r14, r18
    3228:	e8 1a       	sub	r14, r24
    322a:	f9 0a       	sbc	r15, r25
    322c:	c7 01       	movw	r24, r14
    322e:	9c 83       	std	Y+4, r25	; 0x04
    3230:	8b 83       	std	Y+3, r24	; 0x03
    3232:	2b 81       	ldd	r18, Y+3	; 0x03
    3234:	8d 89       	ldd	r24, Y+21	; 0x15
    3236:	9e 89       	ldd	r25, Y+22	; 0x16
    3238:	dc 01       	movw	r26, r24
    323a:	8d 91       	ld	r24, X+
    323c:	9c 91       	ld	r25, X
    323e:	dc 01       	movw	r26, r24
    3240:	11 96       	adiw	r26, 0x01	; 1
    3242:	ec 91       	ld	r30, X
    3244:	8d 85       	ldd	r24, Y+13	; 0x0d
    3246:	9e 85       	ldd	r25, Y+14	; 0x0e
    3248:	af 85       	ldd	r26, Y+15	; 0x0f
    324a:	b8 89       	ldd	r27, Y+16	; 0x10
    324c:	6d 81       	ldd	r22, Y+5	; 0x05
    324e:	7e 81       	ldd	r23, Y+6	; 0x06
    3250:	02 2f       	mov	r16, r18
    3252:	9c 01       	movw	r18, r24
    3254:	ad 01       	movw	r20, r26
    3256:	8e 2f       	mov	r24, r30
    3258:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <disk_read>
    325c:	88 23       	and	r24, r24
    325e:	69 f0       	breq	.+26     	; 0x327a <f_read+0x32a>
    3260:	8d 89       	ldd	r24, Y+21	; 0x15
    3262:	9e 89       	ldd	r25, Y+22	; 0x16
    3264:	fc 01       	movw	r30, r24
    3266:	84 81       	ldd	r24, Z+4	; 0x04
    3268:	28 2f       	mov	r18, r24
    326a:	20 68       	ori	r18, 0x80	; 128
    326c:	8d 89       	ldd	r24, Y+21	; 0x15
    326e:	9e 89       	ldd	r25, Y+22	; 0x16
    3270:	dc 01       	movw	r26, r24
    3272:	14 96       	adiw	r26, 0x04	; 4
    3274:	2c 93       	st	X, r18
    3276:	81 e0       	ldi	r24, 0x01	; 1
    3278:	f8 c0       	rjmp	.+496    	; 0x346a <f_read+0x51a>
    327a:	8d 89       	ldd	r24, Y+21	; 0x15
    327c:	9e 89       	ldd	r25, Y+22	; 0x16
    327e:	fc 01       	movw	r30, r24
    3280:	80 81       	ld	r24, Z
    3282:	91 81       	ldd	r25, Z+1	; 0x01
    3284:	dc 01       	movw	r26, r24
    3286:	14 96       	adiw	r26, 0x04	; 4
    3288:	8c 91       	ld	r24, X
    328a:	88 23       	and	r24, r24
    328c:	09 f4       	brne	.+2      	; 0x3290 <f_read+0x340>
    328e:	47 c0       	rjmp	.+142    	; 0x331e <f_read+0x3ce>
    3290:	8d 89       	ldd	r24, Y+21	; 0x15
    3292:	9e 89       	ldd	r25, Y+22	; 0x16
    3294:	fc 01       	movw	r30, r24
    3296:	80 81       	ld	r24, Z
    3298:	91 81       	ldd	r25, Z+1	; 0x01
    329a:	dc 01       	movw	r26, r24
    329c:	9e 96       	adiw	r26, 0x2e	; 46
    329e:	2d 91       	ld	r18, X+
    32a0:	3d 91       	ld	r19, X+
    32a2:	4d 91       	ld	r20, X+
    32a4:	5c 91       	ld	r21, X
    32a6:	d1 97       	sbiw	r26, 0x31	; 49
    32a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    32ac:	af 85       	ldd	r26, Y+15	; 0x0f
    32ae:	b8 89       	ldd	r27, Y+16	; 0x10
    32b0:	28 1b       	sub	r18, r24
    32b2:	39 0b       	sbc	r19, r25
    32b4:	4a 0b       	sbc	r20, r26
    32b6:	5b 0b       	sbc	r21, r27
    32b8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ba:	9c 81       	ldd	r25, Y+4	; 0x04
    32bc:	cc 01       	movw	r24, r24
    32be:	a0 e0       	ldi	r26, 0x00	; 0
    32c0:	b0 e0       	ldi	r27, 0x00	; 0
    32c2:	28 17       	cp	r18, r24
    32c4:	39 07       	cpc	r19, r25
    32c6:	4a 07       	cpc	r20, r26
    32c8:	5b 07       	cpc	r21, r27
    32ca:	48 f5       	brcc	.+82     	; 0x331e <f_read+0x3ce>
    32cc:	8d 89       	ldd	r24, Y+21	; 0x15
    32ce:	9e 89       	ldd	r25, Y+22	; 0x16
    32d0:	fc 01       	movw	r30, r24
    32d2:	80 81       	ld	r24, Z
    32d4:	91 81       	ldd	r25, Z+1	; 0x01
    32d6:	bc 01       	movw	r22, r24
    32d8:	6e 5c       	subi	r22, 0xCE	; 206
    32da:	7f 4f       	sbci	r23, 0xFF	; 255
    32dc:	8d 89       	ldd	r24, Y+21	; 0x15
    32de:	9e 89       	ldd	r25, Y+22	; 0x16
    32e0:	dc 01       	movw	r26, r24
    32e2:	8d 91       	ld	r24, X+
    32e4:	9c 91       	ld	r25, X
    32e6:	fc 01       	movw	r30, r24
    32e8:	26 a5       	ldd	r18, Z+46	; 0x2e
    32ea:	37 a5       	ldd	r19, Z+47	; 0x2f
    32ec:	40 a9       	ldd	r20, Z+48	; 0x30
    32ee:	51 a9       	ldd	r21, Z+49	; 0x31
    32f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    32f4:	af 85       	ldd	r26, Y+15	; 0x0f
    32f6:	b8 89       	ldd	r27, Y+16	; 0x10
    32f8:	79 01       	movw	r14, r18
    32fa:	8a 01       	movw	r16, r20
    32fc:	e8 1a       	sub	r14, r24
    32fe:	f9 0a       	sbc	r15, r25
    3300:	0a 0b       	sbc	r16, r26
    3302:	1b 0b       	sbc	r17, r27
    3304:	d8 01       	movw	r26, r16
    3306:	c7 01       	movw	r24, r14
    3308:	98 2f       	mov	r25, r24
    330a:	88 27       	eor	r24, r24
    330c:	99 0f       	add	r25, r25
    330e:	2d 81       	ldd	r18, Y+5	; 0x05
    3310:	3e 81       	ldd	r19, Y+6	; 0x06
    3312:	82 0f       	add	r24, r18
    3314:	93 1f       	adc	r25, r19
    3316:	40 e0       	ldi	r20, 0x00	; 0
    3318:	52 e0       	ldi	r21, 0x02	; 2
    331a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <mem_cpy>
    331e:	8b 81       	ldd	r24, Y+3	; 0x03
    3320:	9c 81       	ldd	r25, Y+4	; 0x04
    3322:	98 2f       	mov	r25, r24
    3324:	88 27       	eor	r24, r24
    3326:	99 0f       	add	r25, r25
    3328:	9a 83       	std	Y+2, r25	; 0x02
    332a:	89 83       	std	Y+1, r24	; 0x01
    332c:	5f c0       	rjmp	.+190    	; 0x33ec <f_read+0x49c>
    332e:	2d 89       	ldd	r18, Y+21	; 0x15
    3330:	3e 89       	ldd	r19, Y+22	; 0x16
    3332:	8d 85       	ldd	r24, Y+13	; 0x0d
    3334:	9e 85       	ldd	r25, Y+14	; 0x0e
    3336:	af 85       	ldd	r26, Y+15	; 0x0f
    3338:	b8 89       	ldd	r27, Y+16	; 0x10
    333a:	f9 01       	movw	r30, r18
    333c:	86 8b       	std	Z+22, r24	; 0x16
    333e:	97 8b       	std	Z+23, r25	; 0x17
    3340:	a0 8f       	std	Z+24, r26	; 0x18
    3342:	b1 8f       	std	Z+25, r27	; 0x19
    3344:	8d 89       	ldd	r24, Y+21	; 0x15
    3346:	9e 89       	ldd	r25, Y+22	; 0x16
    3348:	fc 01       	movw	r30, r24
    334a:	86 81       	ldd	r24, Z+6	; 0x06
    334c:	97 81       	ldd	r25, Z+7	; 0x07
    334e:	a0 85       	ldd	r26, Z+8	; 0x08
    3350:	b1 85       	ldd	r27, Z+9	; 0x09
    3352:	91 70       	andi	r25, 0x01	; 1
    3354:	20 e0       	ldi	r18, 0x00	; 0
    3356:	32 e0       	ldi	r19, 0x02	; 2
    3358:	79 01       	movw	r14, r18
    335a:	e8 1a       	sub	r14, r24
    335c:	f9 0a       	sbc	r15, r25
    335e:	c7 01       	movw	r24, r14
    3360:	9a 83       	std	Y+2, r25	; 0x02
    3362:	89 83       	std	Y+1, r24	; 0x01
    3364:	29 81       	ldd	r18, Y+1	; 0x01
    3366:	3a 81       	ldd	r19, Y+2	; 0x02
    3368:	89 8d       	ldd	r24, Y+25	; 0x19
    336a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    336c:	82 17       	cp	r24, r18
    336e:	93 07       	cpc	r25, r19
    3370:	20 f4       	brcc	.+8      	; 0x337a <f_read+0x42a>
    3372:	89 8d       	ldd	r24, Y+25	; 0x19
    3374:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3376:	9a 83       	std	Y+2, r25	; 0x02
    3378:	89 83       	std	Y+1, r24	; 0x01
    337a:	8d 89       	ldd	r24, Y+21	; 0x15
    337c:	9e 89       	ldd	r25, Y+22	; 0x16
    337e:	fc 01       	movw	r30, r24
    3380:	86 89       	ldd	r24, Z+22	; 0x16
    3382:	97 89       	ldd	r25, Z+23	; 0x17
    3384:	a0 8d       	ldd	r26, Z+24	; 0x18
    3386:	b1 8d       	ldd	r27, Z+25	; 0x19
    3388:	2d 89       	ldd	r18, Y+21	; 0x15
    338a:	3e 89       	ldd	r19, Y+22	; 0x16
    338c:	f9 01       	movw	r30, r18
    338e:	20 81       	ld	r18, Z
    3390:	31 81       	ldd	r19, Z+1	; 0x01
    3392:	ac 01       	movw	r20, r24
    3394:	bd 01       	movw	r22, r26
    3396:	c9 01       	movw	r24, r18
    3398:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <move_window>
    339c:	88 23       	and	r24, r24
    339e:	69 f0       	breq	.+26     	; 0x33ba <f_read+0x46a>
    33a0:	8d 89       	ldd	r24, Y+21	; 0x15
    33a2:	9e 89       	ldd	r25, Y+22	; 0x16
    33a4:	dc 01       	movw	r26, r24
    33a6:	14 96       	adiw	r26, 0x04	; 4
    33a8:	8c 91       	ld	r24, X
    33aa:	28 2f       	mov	r18, r24
    33ac:	20 68       	ori	r18, 0x80	; 128
    33ae:	8d 89       	ldd	r24, Y+21	; 0x15
    33b0:	9e 89       	ldd	r25, Y+22	; 0x16
    33b2:	fc 01       	movw	r30, r24
    33b4:	24 83       	std	Z+4, r18	; 0x04
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	58 c0       	rjmp	.+176    	; 0x346a <f_read+0x51a>
    33ba:	8d 89       	ldd	r24, Y+21	; 0x15
    33bc:	9e 89       	ldd	r25, Y+22	; 0x16
    33be:	dc 01       	movw	r26, r24
    33c0:	2d 91       	ld	r18, X+
    33c2:	3c 91       	ld	r19, X
    33c4:	8d 89       	ldd	r24, Y+21	; 0x15
    33c6:	9e 89       	ldd	r25, Y+22	; 0x16
    33c8:	fc 01       	movw	r30, r24
    33ca:	86 81       	ldd	r24, Z+6	; 0x06
    33cc:	97 81       	ldd	r25, Z+7	; 0x07
    33ce:	a0 85       	ldd	r26, Z+8	; 0x08
    33d0:	b1 85       	ldd	r27, Z+9	; 0x09
    33d2:	91 70       	andi	r25, 0x01	; 1
    33d4:	aa 27       	eor	r26, r26
    33d6:	bb 27       	eor	r27, r27
    33d8:	c2 96       	adiw	r24, 0x32	; 50
    33da:	28 0f       	add	r18, r24
    33dc:	39 1f       	adc	r19, r25
    33de:	49 81       	ldd	r20, Y+1	; 0x01
    33e0:	5a 81       	ldd	r21, Y+2	; 0x02
    33e2:	8d 81       	ldd	r24, Y+5	; 0x05
    33e4:	9e 81       	ldd	r25, Y+6	; 0x06
    33e6:	b9 01       	movw	r22, r18
    33e8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <mem_cpy>
    33ec:	2d 81       	ldd	r18, Y+5	; 0x05
    33ee:	3e 81       	ldd	r19, Y+6	; 0x06
    33f0:	89 81       	ldd	r24, Y+1	; 0x01
    33f2:	9a 81       	ldd	r25, Y+2	; 0x02
    33f4:	82 0f       	add	r24, r18
    33f6:	93 1f       	adc	r25, r19
    33f8:	9e 83       	std	Y+6, r25	; 0x06
    33fa:	8d 83       	std	Y+5, r24	; 0x05
    33fc:	8d 89       	ldd	r24, Y+21	; 0x15
    33fe:	9e 89       	ldd	r25, Y+22	; 0x16
    3400:	dc 01       	movw	r26, r24
    3402:	16 96       	adiw	r26, 0x06	; 6
    3404:	2d 91       	ld	r18, X+
    3406:	3d 91       	ld	r19, X+
    3408:	4d 91       	ld	r20, X+
    340a:	5c 91       	ld	r21, X
    340c:	19 97       	sbiw	r26, 0x09	; 9
    340e:	89 81       	ldd	r24, Y+1	; 0x01
    3410:	9a 81       	ldd	r25, Y+2	; 0x02
    3412:	cc 01       	movw	r24, r24
    3414:	a0 e0       	ldi	r26, 0x00	; 0
    3416:	b0 e0       	ldi	r27, 0x00	; 0
    3418:	82 0f       	add	r24, r18
    341a:	93 1f       	adc	r25, r19
    341c:	a4 1f       	adc	r26, r20
    341e:	b5 1f       	adc	r27, r21
    3420:	2d 89       	ldd	r18, Y+21	; 0x15
    3422:	3e 89       	ldd	r19, Y+22	; 0x16
    3424:	f9 01       	movw	r30, r18
    3426:	86 83       	std	Z+6, r24	; 0x06
    3428:	97 83       	std	Z+7, r25	; 0x07
    342a:	a0 87       	std	Z+8, r26	; 0x08
    342c:	b1 87       	std	Z+9, r27	; 0x09
    342e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3430:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3432:	dc 01       	movw	r26, r24
    3434:	2d 91       	ld	r18, X+
    3436:	3c 91       	ld	r19, X
    3438:	89 81       	ldd	r24, Y+1	; 0x01
    343a:	9a 81       	ldd	r25, Y+2	; 0x02
    343c:	28 0f       	add	r18, r24
    343e:	39 1f       	adc	r19, r25
    3440:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3442:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3444:	fc 01       	movw	r30, r24
    3446:	31 83       	std	Z+1, r19	; 0x01
    3448:	20 83       	st	Z, r18
    344a:	29 8d       	ldd	r18, Y+25	; 0x19
    344c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    344e:	89 81       	ldd	r24, Y+1	; 0x01
    3450:	9a 81       	ldd	r25, Y+2	; 0x02
    3452:	79 01       	movw	r14, r18
    3454:	e8 1a       	sub	r14, r24
    3456:	f9 0a       	sbc	r15, r25
    3458:	c7 01       	movw	r24, r14
    345a:	9a 8f       	std	Y+26, r25	; 0x1a
    345c:	89 8f       	std	Y+25, r24	; 0x19
    345e:	89 8d       	ldd	r24, Y+25	; 0x19
    3460:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3462:	89 2b       	or	r24, r25
    3464:	09 f0       	breq	.+2      	; 0x3468 <f_read+0x518>
    3466:	e9 cd       	rjmp	.-1070   	; 0x303a <f_read+0xea>
    3468:	80 e0       	ldi	r24, 0x00	; 0
    346a:	6c 96       	adiw	r28, 0x1c	; 28
    346c:	0f b6       	in	r0, 0x3f	; 63
    346e:	f8 94       	cli
    3470:	de bf       	out	0x3e, r29	; 62
    3472:	0f be       	out	0x3f, r0	; 63
    3474:	cd bf       	out	0x3d, r28	; 61
    3476:	df 91       	pop	r29
    3478:	cf 91       	pop	r28
    347a:	1f 91       	pop	r17
    347c:	0f 91       	pop	r16
    347e:	ff 90       	pop	r15
    3480:	ef 90       	pop	r14
    3482:	08 95       	ret

00003484 <f_sync>:
    3484:	cf 93       	push	r28
    3486:	df 93       	push	r29
    3488:	cd b7       	in	r28, 0x3d	; 61
    348a:	de b7       	in	r29, 0x3e	; 62
    348c:	29 97       	sbiw	r28, 0x09	; 9
    348e:	0f b6       	in	r0, 0x3f	; 63
    3490:	f8 94       	cli
    3492:	de bf       	out	0x3e, r29	; 62
    3494:	0f be       	out	0x3f, r0	; 63
    3496:	cd bf       	out	0x3d, r28	; 61
    3498:	99 87       	std	Y+9, r25	; 0x09
    349a:	88 87       	std	Y+8, r24	; 0x08
    349c:	88 85       	ldd	r24, Y+8	; 0x08
    349e:	99 85       	ldd	r25, Y+9	; 0x09
    34a0:	fc 01       	movw	r30, r24
    34a2:	22 81       	ldd	r18, Z+2	; 0x02
    34a4:	33 81       	ldd	r19, Z+3	; 0x03
    34a6:	88 85       	ldd	r24, Y+8	; 0x08
    34a8:	99 85       	ldd	r25, Y+9	; 0x09
    34aa:	fc 01       	movw	r30, r24
    34ac:	80 81       	ld	r24, Z
    34ae:	91 81       	ldd	r25, Z+1	; 0x01
    34b0:	b9 01       	movw	r22, r18
    34b2:	0e 94 7d 15 	call	0x2afa	; 0x2afa <validate>
    34b6:	89 83       	std	Y+1, r24	; 0x01
    34b8:	89 81       	ldd	r24, Y+1	; 0x01
    34ba:	88 23       	and	r24, r24
    34bc:	09 f0       	breq	.+2      	; 0x34c0 <f_sync+0x3c>
    34be:	96 c0       	rjmp	.+300    	; 0x35ec <f_sync+0x168>
    34c0:	88 85       	ldd	r24, Y+8	; 0x08
    34c2:	99 85       	ldd	r25, Y+9	; 0x09
    34c4:	fc 01       	movw	r30, r24
    34c6:	84 81       	ldd	r24, Z+4	; 0x04
    34c8:	88 2f       	mov	r24, r24
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	80 72       	andi	r24, 0x20	; 32
    34ce:	99 27       	eor	r25, r25
    34d0:	89 2b       	or	r24, r25
    34d2:	09 f4       	brne	.+2      	; 0x34d6 <f_sync+0x52>
    34d4:	8b c0       	rjmp	.+278    	; 0x35ec <f_sync+0x168>
    34d6:	88 85       	ldd	r24, Y+8	; 0x08
    34d8:	99 85       	ldd	r25, Y+9	; 0x09
    34da:	fc 01       	movw	r30, r24
    34dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    34de:	93 8d       	ldd	r25, Z+27	; 0x1b
    34e0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    34e2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    34e4:	28 85       	ldd	r18, Y+8	; 0x08
    34e6:	39 85       	ldd	r19, Y+9	; 0x09
    34e8:	f9 01       	movw	r30, r18
    34ea:	20 81       	ld	r18, Z
    34ec:	31 81       	ldd	r19, Z+1	; 0x01
    34ee:	ac 01       	movw	r20, r24
    34f0:	bd 01       	movw	r22, r26
    34f2:	c9 01       	movw	r24, r18
    34f4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <move_window>
    34f8:	89 83       	std	Y+1, r24	; 0x01
    34fa:	89 81       	ldd	r24, Y+1	; 0x01
    34fc:	88 23       	and	r24, r24
    34fe:	09 f0       	breq	.+2      	; 0x3502 <f_sync+0x7e>
    3500:	75 c0       	rjmp	.+234    	; 0x35ec <f_sync+0x168>
    3502:	88 85       	ldd	r24, Y+8	; 0x08
    3504:	99 85       	ldd	r25, Y+9	; 0x09
    3506:	fc 01       	movw	r30, r24
    3508:	86 8d       	ldd	r24, Z+30	; 0x1e
    350a:	97 8d       	ldd	r25, Z+31	; 0x1f
    350c:	9b 83       	std	Y+3, r25	; 0x03
    350e:	8a 83       	std	Y+2, r24	; 0x02
    3510:	8a 81       	ldd	r24, Y+2	; 0x02
    3512:	9b 81       	ldd	r25, Y+3	; 0x03
    3514:	0b 96       	adiw	r24, 0x0b	; 11
    3516:	2a 81       	ldd	r18, Y+2	; 0x02
    3518:	3b 81       	ldd	r19, Y+3	; 0x03
    351a:	25 5f       	subi	r18, 0xF5	; 245
    351c:	3f 4f       	sbci	r19, 0xFF	; 255
    351e:	f9 01       	movw	r30, r18
    3520:	20 81       	ld	r18, Z
    3522:	20 62       	ori	r18, 0x20	; 32
    3524:	fc 01       	movw	r30, r24
    3526:	20 83       	st	Z, r18
    3528:	8a 81       	ldd	r24, Y+2	; 0x02
    352a:	9b 81       	ldd	r25, Y+3	; 0x03
    352c:	9c 01       	movw	r18, r24
    352e:	24 5e       	subi	r18, 0xE4	; 228
    3530:	3f 4f       	sbci	r19, 0xFF	; 255
    3532:	88 85       	ldd	r24, Y+8	; 0x08
    3534:	99 85       	ldd	r25, Y+9	; 0x09
    3536:	fc 01       	movw	r30, r24
    3538:	82 85       	ldd	r24, Z+10	; 0x0a
    353a:	93 85       	ldd	r25, Z+11	; 0x0b
    353c:	a4 85       	ldd	r26, Z+12	; 0x0c
    353e:	b5 85       	ldd	r27, Z+13	; 0x0d
    3540:	f9 01       	movw	r30, r18
    3542:	80 83       	st	Z, r24
    3544:	91 83       	std	Z+1, r25	; 0x01
    3546:	a2 83       	std	Z+2, r26	; 0x02
    3548:	b3 83       	std	Z+3, r27	; 0x03
    354a:	8a 81       	ldd	r24, Y+2	; 0x02
    354c:	9b 81       	ldd	r25, Y+3	; 0x03
    354e:	9c 01       	movw	r18, r24
    3550:	26 5e       	subi	r18, 0xE6	; 230
    3552:	3f 4f       	sbci	r19, 0xFF	; 255
    3554:	88 85       	ldd	r24, Y+8	; 0x08
    3556:	99 85       	ldd	r25, Y+9	; 0x09
    3558:	fc 01       	movw	r30, r24
    355a:	86 85       	ldd	r24, Z+14	; 0x0e
    355c:	97 85       	ldd	r25, Z+15	; 0x0f
    355e:	a0 89       	ldd	r26, Z+16	; 0x10
    3560:	b1 89       	ldd	r27, Z+17	; 0x11
    3562:	f9 01       	movw	r30, r18
    3564:	91 83       	std	Z+1, r25	; 0x01
    3566:	80 83       	st	Z, r24
    3568:	8a 81       	ldd	r24, Y+2	; 0x02
    356a:	9b 81       	ldd	r25, Y+3	; 0x03
    356c:	9c 01       	movw	r18, r24
    356e:	2c 5e       	subi	r18, 0xEC	; 236
    3570:	3f 4f       	sbci	r19, 0xFF	; 255
    3572:	88 85       	ldd	r24, Y+8	; 0x08
    3574:	99 85       	ldd	r25, Y+9	; 0x09
    3576:	fc 01       	movw	r30, r24
    3578:	86 85       	ldd	r24, Z+14	; 0x0e
    357a:	97 85       	ldd	r25, Z+15	; 0x0f
    357c:	a0 89       	ldd	r26, Z+16	; 0x10
    357e:	b1 89       	ldd	r27, Z+17	; 0x11
    3580:	cd 01       	movw	r24, r26
    3582:	aa 27       	eor	r26, r26
    3584:	bb 27       	eor	r27, r27
    3586:	f9 01       	movw	r30, r18
    3588:	91 83       	std	Z+1, r25	; 0x01
    358a:	80 83       	st	Z, r24
    358c:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <get_fattime>
    3590:	dc 01       	movw	r26, r24
    3592:	cb 01       	movw	r24, r22
    3594:	8c 83       	std	Y+4, r24	; 0x04
    3596:	9d 83       	std	Y+5, r25	; 0x05
    3598:	ae 83       	std	Y+6, r26	; 0x06
    359a:	bf 83       	std	Y+7, r27	; 0x07
    359c:	8a 81       	ldd	r24, Y+2	; 0x02
    359e:	9b 81       	ldd	r25, Y+3	; 0x03
    35a0:	9c 01       	movw	r18, r24
    35a2:	2a 5e       	subi	r18, 0xEA	; 234
    35a4:	3f 4f       	sbci	r19, 0xFF	; 255
    35a6:	8c 81       	ldd	r24, Y+4	; 0x04
    35a8:	9d 81       	ldd	r25, Y+5	; 0x05
    35aa:	ae 81       	ldd	r26, Y+6	; 0x06
    35ac:	bf 81       	ldd	r27, Y+7	; 0x07
    35ae:	f9 01       	movw	r30, r18
    35b0:	80 83       	st	Z, r24
    35b2:	91 83       	std	Z+1, r25	; 0x01
    35b4:	a2 83       	std	Z+2, r26	; 0x02
    35b6:	b3 83       	std	Z+3, r27	; 0x03
    35b8:	88 85       	ldd	r24, Y+8	; 0x08
    35ba:	99 85       	ldd	r25, Y+9	; 0x09
    35bc:	fc 01       	movw	r30, r24
    35be:	84 81       	ldd	r24, Z+4	; 0x04
    35c0:	28 2f       	mov	r18, r24
    35c2:	2f 7d       	andi	r18, 0xDF	; 223
    35c4:	88 85       	ldd	r24, Y+8	; 0x08
    35c6:	99 85       	ldd	r25, Y+9	; 0x09
    35c8:	fc 01       	movw	r30, r24
    35ca:	24 83       	std	Z+4, r18	; 0x04
    35cc:	88 85       	ldd	r24, Y+8	; 0x08
    35ce:	99 85       	ldd	r25, Y+9	; 0x09
    35d0:	fc 01       	movw	r30, r24
    35d2:	80 81       	ld	r24, Z
    35d4:	91 81       	ldd	r25, Z+1	; 0x01
    35d6:	21 e0       	ldi	r18, 0x01	; 1
    35d8:	fc 01       	movw	r30, r24
    35da:	24 83       	std	Z+4, r18	; 0x04
    35dc:	88 85       	ldd	r24, Y+8	; 0x08
    35de:	99 85       	ldd	r25, Y+9	; 0x09
    35e0:	fc 01       	movw	r30, r24
    35e2:	80 81       	ld	r24, Z
    35e4:	91 81       	ldd	r25, Z+1	; 0x01
    35e6:	0e 94 b9 04 	call	0x972	; 0x972 <sync>
    35ea:	89 83       	std	Y+1, r24	; 0x01
    35ec:	89 81       	ldd	r24, Y+1	; 0x01
    35ee:	29 96       	adiw	r28, 0x09	; 9
    35f0:	0f b6       	in	r0, 0x3f	; 63
    35f2:	f8 94       	cli
    35f4:	de bf       	out	0x3e, r29	; 62
    35f6:	0f be       	out	0x3f, r0	; 63
    35f8:	cd bf       	out	0x3d, r28	; 61
    35fa:	df 91       	pop	r29
    35fc:	cf 91       	pop	r28
    35fe:	08 95       	ret

00003600 <f_close>:
    3600:	cf 93       	push	r28
    3602:	df 93       	push	r29
    3604:	00 d0       	rcall	.+0      	; 0x3606 <f_close+0x6>
    3606:	1f 92       	push	r1
    3608:	cd b7       	in	r28, 0x3d	; 61
    360a:	de b7       	in	r29, 0x3e	; 62
    360c:	9b 83       	std	Y+3, r25	; 0x03
    360e:	8a 83       	std	Y+2, r24	; 0x02
    3610:	8a 81       	ldd	r24, Y+2	; 0x02
    3612:	9b 81       	ldd	r25, Y+3	; 0x03
    3614:	0e 94 42 1a 	call	0x3484	; 0x3484 <f_sync>
    3618:	89 83       	std	Y+1, r24	; 0x01
    361a:	89 81       	ldd	r24, Y+1	; 0x01
    361c:	88 23       	and	r24, r24
    361e:	29 f4       	brne	.+10     	; 0x362a <f_close+0x2a>
    3620:	8a 81       	ldd	r24, Y+2	; 0x02
    3622:	9b 81       	ldd	r25, Y+3	; 0x03
    3624:	fc 01       	movw	r30, r24
    3626:	11 82       	std	Z+1, r1	; 0x01
    3628:	10 82       	st	Z, r1
    362a:	89 81       	ldd	r24, Y+1	; 0x01
    362c:	0f 90       	pop	r0
    362e:	0f 90       	pop	r0
    3630:	0f 90       	pop	r0
    3632:	df 91       	pop	r29
    3634:	cf 91       	pop	r28
    3636:	08 95       	ret

00003638 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    3638:	ef 92       	push	r14
    363a:	ff 92       	push	r15
    363c:	0f 93       	push	r16
    363e:	1f 93       	push	r17
    3640:	cf 93       	push	r28
    3642:	df 93       	push	r29
    3644:	cd b7       	in	r28, 0x3d	; 61
    3646:	de b7       	in	r29, 0x3e	; 62
    3648:	67 97       	sbiw	r28, 0x17	; 23
    364a:	0f b6       	in	r0, 0x3f	; 63
    364c:	f8 94       	cli
    364e:	de bf       	out	0x3e, r29	; 62
    3650:	0f be       	out	0x3f, r0	; 63
    3652:	cd bf       	out	0x3d, r28	; 61
    3654:	9b 8b       	std	Y+19, r25	; 0x13
    3656:	8a 8b       	std	Y+18, r24	; 0x12
    3658:	4c 8b       	std	Y+20, r20	; 0x14
    365a:	5d 8b       	std	Y+21, r21	; 0x15
    365c:	6e 8b       	std	Y+22, r22	; 0x16
    365e:	7f 8b       	std	Y+23, r23	; 0x17
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    3660:	8a 89       	ldd	r24, Y+18	; 0x12
    3662:	9b 89       	ldd	r25, Y+19	; 0x13
    3664:	fc 01       	movw	r30, r24
    3666:	22 81       	ldd	r18, Z+2	; 0x02
    3668:	33 81       	ldd	r19, Z+3	; 0x03
    366a:	8a 89       	ldd	r24, Y+18	; 0x12
    366c:	9b 89       	ldd	r25, Y+19	; 0x13
    366e:	fc 01       	movw	r30, r24
    3670:	80 81       	ld	r24, Z
    3672:	91 81       	ldd	r25, Z+1	; 0x01
    3674:	b9 01       	movw	r22, r18
    3676:	0e 94 7d 15 	call	0x2afa	; 0x2afa <validate>
    367a:	89 87       	std	Y+9, r24	; 0x09
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    367c:	89 85       	ldd	r24, Y+9	; 0x09
    367e:	88 23       	and	r24, r24
    3680:	11 f0       	breq	.+4      	; 0x3686 <f_lseek+0x4e>
    3682:	89 85       	ldd	r24, Y+9	; 0x09
    3684:	c5 c2       	rjmp	.+1418   	; 0x3c10 <f_lseek+0x5d8>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    3686:	8a 89       	ldd	r24, Y+18	; 0x12
    3688:	9b 89       	ldd	r25, Y+19	; 0x13
    368a:	fc 01       	movw	r30, r24
    368c:	84 81       	ldd	r24, Z+4	; 0x04
    368e:	88 23       	and	r24, r24
    3690:	14 f4       	brge	.+4      	; 0x3696 <f_lseek+0x5e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    3692:	82 e0       	ldi	r24, 0x02	; 2
    3694:	bd c2       	rjmp	.+1402   	; 0x3c10 <f_lseek+0x5d8>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    3696:	8a 89       	ldd	r24, Y+18	; 0x12
    3698:	9b 89       	ldd	r25, Y+19	; 0x13
    369a:	fc 01       	movw	r30, r24
    369c:	22 85       	ldd	r18, Z+10	; 0x0a
    369e:	33 85       	ldd	r19, Z+11	; 0x0b
    36a0:	44 85       	ldd	r20, Z+12	; 0x0c
    36a2:	55 85       	ldd	r21, Z+13	; 0x0d
    36a4:	8c 89       	ldd	r24, Y+20	; 0x14
    36a6:	9d 89       	ldd	r25, Y+21	; 0x15
    36a8:	ae 89       	ldd	r26, Y+22	; 0x16
    36aa:	bf 89       	ldd	r27, Y+23	; 0x17
    36ac:	28 17       	cp	r18, r24
    36ae:	39 07       	cpc	r19, r25
    36b0:	4a 07       	cpc	r20, r26
    36b2:	5b 07       	cpc	r21, r27
    36b4:	a8 f4       	brcc	.+42     	; 0x36e0 <f_lseek+0xa8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    36b6:	8a 89       	ldd	r24, Y+18	; 0x12
    36b8:	9b 89       	ldd	r25, Y+19	; 0x13
    36ba:	fc 01       	movw	r30, r24
    36bc:	84 81       	ldd	r24, Z+4	; 0x04
    36be:	88 2f       	mov	r24, r24
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	82 70       	andi	r24, 0x02	; 2
    36c4:	99 27       	eor	r25, r25
    36c6:	89 2b       	or	r24, r25
    36c8:	59 f4       	brne	.+22     	; 0x36e0 <f_lseek+0xa8>
#endif
			) ofs = fp->fsize;
    36ca:	8a 89       	ldd	r24, Y+18	; 0x12
    36cc:	9b 89       	ldd	r25, Y+19	; 0x13
    36ce:	fc 01       	movw	r30, r24
    36d0:	82 85       	ldd	r24, Z+10	; 0x0a
    36d2:	93 85       	ldd	r25, Z+11	; 0x0b
    36d4:	a4 85       	ldd	r26, Z+12	; 0x0c
    36d6:	b5 85       	ldd	r27, Z+13	; 0x0d
    36d8:	8c 8b       	std	Y+20, r24	; 0x14
    36da:	9d 8b       	std	Y+21, r25	; 0x15
    36dc:	ae 8b       	std	Y+22, r26	; 0x16
    36de:	bf 8b       	std	Y+23, r27	; 0x17

		ifptr = fp->fptr;
    36e0:	8a 89       	ldd	r24, Y+18	; 0x12
    36e2:	9b 89       	ldd	r25, Y+19	; 0x13
    36e4:	fc 01       	movw	r30, r24
    36e6:	86 81       	ldd	r24, Z+6	; 0x06
    36e8:	97 81       	ldd	r25, Z+7	; 0x07
    36ea:	a0 85       	ldd	r26, Z+8	; 0x08
    36ec:	b1 85       	ldd	r27, Z+9	; 0x09
    36ee:	8a 87       	std	Y+10, r24	; 0x0a
    36f0:	9b 87       	std	Y+11, r25	; 0x0b
    36f2:	ac 87       	std	Y+12, r26	; 0x0c
    36f4:	bd 87       	std	Y+13, r27	; 0x0d
		fp->fptr = nsect = 0;
    36f6:	1d 82       	std	Y+5, r1	; 0x05
    36f8:	1e 82       	std	Y+6, r1	; 0x06
    36fa:	1f 82       	std	Y+7, r1	; 0x07
    36fc:	18 86       	std	Y+8, r1	; 0x08
    36fe:	2a 89       	ldd	r18, Y+18	; 0x12
    3700:	3b 89       	ldd	r19, Y+19	; 0x13
    3702:	8d 81       	ldd	r24, Y+5	; 0x05
    3704:	9e 81       	ldd	r25, Y+6	; 0x06
    3706:	af 81       	ldd	r26, Y+7	; 0x07
    3708:	b8 85       	ldd	r27, Y+8	; 0x08
    370a:	f9 01       	movw	r30, r18
    370c:	86 83       	std	Z+6, r24	; 0x06
    370e:	97 83       	std	Z+7, r25	; 0x07
    3710:	a0 87       	std	Z+8, r26	; 0x08
    3712:	b1 87       	std	Z+9, r27	; 0x09
		if (ofs) {
    3714:	8c 89       	ldd	r24, Y+20	; 0x14
    3716:	9d 89       	ldd	r25, Y+21	; 0x15
    3718:	ae 89       	ldd	r26, Y+22	; 0x16
    371a:	bf 89       	ldd	r27, Y+23	; 0x17
    371c:	89 2b       	or	r24, r25
    371e:	8a 2b       	or	r24, r26
    3720:	8b 2b       	or	r24, r27
    3722:	09 f4       	brne	.+2      	; 0x3726 <f_lseek+0xee>
    3724:	20 c2       	rjmp	.+1088   	; 0x3b66 <f_lseek+0x52e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    3726:	8a 89       	ldd	r24, Y+18	; 0x12
    3728:	9b 89       	ldd	r25, Y+19	; 0x13
    372a:	fc 01       	movw	r30, r24
    372c:	80 81       	ld	r24, Z
    372e:	91 81       	ldd	r25, Z+1	; 0x01
    3730:	fc 01       	movw	r30, r24
    3732:	82 81       	ldd	r24, Z+2	; 0x02
    3734:	88 2f       	mov	r24, r24
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	a0 e0       	ldi	r26, 0x00	; 0
    373a:	b0 e0       	ldi	r27, 0x00	; 0
    373c:	07 2e       	mov	r0, r23
    373e:	79 e0       	ldi	r23, 0x09	; 9
    3740:	88 0f       	add	r24, r24
    3742:	99 1f       	adc	r25, r25
    3744:	aa 1f       	adc	r26, r26
    3746:	bb 1f       	adc	r27, r27
    3748:	7a 95       	dec	r23
    374a:	d1 f7       	brne	.-12     	; 0x3740 <f_lseek+0x108>
    374c:	70 2d       	mov	r23, r0
    374e:	8e 87       	std	Y+14, r24	; 0x0e
    3750:	9f 87       	std	Y+15, r25	; 0x0f
    3752:	a8 8b       	std	Y+16, r26	; 0x10
    3754:	b9 8b       	std	Y+17, r27	; 0x11
			if (ifptr > 0 &&
    3756:	8a 85       	ldd	r24, Y+10	; 0x0a
    3758:	9b 85       	ldd	r25, Y+11	; 0x0b
    375a:	ac 85       	ldd	r26, Y+12	; 0x0c
    375c:	bd 85       	ldd	r27, Y+13	; 0x0d
    375e:	89 2b       	or	r24, r25
    3760:	8a 2b       	or	r24, r26
    3762:	8b 2b       	or	r24, r27
    3764:	09 f4       	brne	.+2      	; 0x3768 <f_lseek+0x130>
    3766:	6d c0       	rjmp	.+218    	; 0x3842 <f_lseek+0x20a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    3768:	8c 89       	ldd	r24, Y+20	; 0x14
    376a:	9d 89       	ldd	r25, Y+21	; 0x15
    376c:	ae 89       	ldd	r26, Y+22	; 0x16
    376e:	bf 89       	ldd	r27, Y+23	; 0x17
    3770:	01 97       	sbiw	r24, 0x01	; 1
    3772:	a1 09       	sbc	r26, r1
    3774:	b1 09       	sbc	r27, r1
    3776:	2e 85       	ldd	r18, Y+14	; 0x0e
    3778:	3f 85       	ldd	r19, Y+15	; 0x0f
    377a:	48 89       	ldd	r20, Y+16	; 0x10
    377c:	59 89       	ldd	r21, Y+17	; 0x11
    377e:	bc 01       	movw	r22, r24
    3780:	cd 01       	movw	r24, r26
    3782:	0e 94 69 3d 	call	0x7ad2	; 0x7ad2 <__udivmodsi4>
    3786:	da 01       	movw	r26, r20
    3788:	c9 01       	movw	r24, r18
    378a:	7c 01       	movw	r14, r24
    378c:	8d 01       	movw	r16, r26
    378e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3790:	9b 85       	ldd	r25, Y+11	; 0x0b
    3792:	ac 85       	ldd	r26, Y+12	; 0x0c
    3794:	bd 85       	ldd	r27, Y+13	; 0x0d
    3796:	01 97       	sbiw	r24, 0x01	; 1
    3798:	a1 09       	sbc	r26, r1
    379a:	b1 09       	sbc	r27, r1
    379c:	2e 85       	ldd	r18, Y+14	; 0x0e
    379e:	3f 85       	ldd	r19, Y+15	; 0x0f
    37a0:	48 89       	ldd	r20, Y+16	; 0x10
    37a2:	59 89       	ldd	r21, Y+17	; 0x11
    37a4:	bc 01       	movw	r22, r24
    37a6:	cd 01       	movw	r24, r26
    37a8:	0e 94 69 3d 	call	0x7ad2	; 0x7ad2 <__udivmodsi4>
    37ac:	da 01       	movw	r26, r20
    37ae:	c9 01       	movw	r24, r18

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    37b0:	e8 16       	cp	r14, r24
    37b2:	f9 06       	cpc	r15, r25
    37b4:	0a 07       	cpc	r16, r26
    37b6:	1b 07       	cpc	r17, r27
    37b8:	08 f4       	brcc	.+2      	; 0x37bc <f_lseek+0x184>
    37ba:	43 c0       	rjmp	.+134    	; 0x3842 <f_lseek+0x20a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    37bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    37be:	9b 85       	ldd	r25, Y+11	; 0x0b
    37c0:	ac 85       	ldd	r26, Y+12	; 0x0c
    37c2:	bd 85       	ldd	r27, Y+13	; 0x0d
    37c4:	9c 01       	movw	r18, r24
    37c6:	ad 01       	movw	r20, r26
    37c8:	21 50       	subi	r18, 0x01	; 1
    37ca:	31 09       	sbc	r19, r1
    37cc:	41 09       	sbc	r20, r1
    37ce:	51 09       	sbc	r21, r1
    37d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    37d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    37d4:	a8 89       	ldd	r26, Y+16	; 0x10
    37d6:	b9 89       	ldd	r27, Y+17	; 0x11
    37d8:	b0 95       	com	r27
    37da:	a0 95       	com	r26
    37dc:	90 95       	com	r25
    37de:	81 95       	neg	r24
    37e0:	9f 4f       	sbci	r25, 0xFF	; 255
    37e2:	af 4f       	sbci	r26, 0xFF	; 255
    37e4:	bf 4f       	sbci	r27, 0xFF	; 255
    37e6:	82 23       	and	r24, r18
    37e8:	93 23       	and	r25, r19
    37ea:	a4 23       	and	r26, r20
    37ec:	b5 23       	and	r27, r21
    37ee:	2a 89       	ldd	r18, Y+18	; 0x12
    37f0:	3b 89       	ldd	r19, Y+19	; 0x13
    37f2:	f9 01       	movw	r30, r18
    37f4:	86 83       	std	Z+6, r24	; 0x06
    37f6:	97 83       	std	Z+7, r25	; 0x07
    37f8:	a0 87       	std	Z+8, r26	; 0x08
    37fa:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    37fc:	8a 89       	ldd	r24, Y+18	; 0x12
    37fe:	9b 89       	ldd	r25, Y+19	; 0x13
    3800:	fc 01       	movw	r30, r24
    3802:	86 81       	ldd	r24, Z+6	; 0x06
    3804:	97 81       	ldd	r25, Z+7	; 0x07
    3806:	a0 85       	ldd	r26, Z+8	; 0x08
    3808:	b1 85       	ldd	r27, Z+9	; 0x09
    380a:	2c 89       	ldd	r18, Y+20	; 0x14
    380c:	3d 89       	ldd	r19, Y+21	; 0x15
    380e:	4e 89       	ldd	r20, Y+22	; 0x16
    3810:	5f 89       	ldd	r21, Y+23	; 0x17
    3812:	79 01       	movw	r14, r18
    3814:	8a 01       	movw	r16, r20
    3816:	e8 1a       	sub	r14, r24
    3818:	f9 0a       	sbc	r15, r25
    381a:	0a 0b       	sbc	r16, r26
    381c:	1b 0b       	sbc	r17, r27
    381e:	d8 01       	movw	r26, r16
    3820:	c7 01       	movw	r24, r14
    3822:	8c 8b       	std	Y+20, r24	; 0x14
    3824:	9d 8b       	std	Y+21, r25	; 0x15
    3826:	ae 8b       	std	Y+22, r26	; 0x16
    3828:	bf 8b       	std	Y+23, r27	; 0x17
				clst = fp->curr_clust;
    382a:	8a 89       	ldd	r24, Y+18	; 0x12
    382c:	9b 89       	ldd	r25, Y+19	; 0x13
    382e:	fc 01       	movw	r30, r24
    3830:	82 89       	ldd	r24, Z+18	; 0x12
    3832:	93 89       	ldd	r25, Z+19	; 0x13
    3834:	a4 89       	ldd	r26, Z+20	; 0x14
    3836:	b5 89       	ldd	r27, Z+21	; 0x15
    3838:	89 83       	std	Y+1, r24	; 0x01
    383a:	9a 83       	std	Y+2, r25	; 0x02
    383c:	ab 83       	std	Y+3, r26	; 0x03
    383e:	bc 83       	std	Y+4, r27	; 0x04
    3840:	63 c0       	rjmp	.+198    	; 0x3908 <f_lseek+0x2d0>
			} else {									/* When seek to back cluster, */
				clst = fp->org_clust;					/* start from the first cluster */
    3842:	8a 89       	ldd	r24, Y+18	; 0x12
    3844:	9b 89       	ldd	r25, Y+19	; 0x13
    3846:	fc 01       	movw	r30, r24
    3848:	86 85       	ldd	r24, Z+14	; 0x0e
    384a:	97 85       	ldd	r25, Z+15	; 0x0f
    384c:	a0 89       	ldd	r26, Z+16	; 0x10
    384e:	b1 89       	ldd	r27, Z+17	; 0x11
    3850:	89 83       	std	Y+1, r24	; 0x01
    3852:	9a 83       	std	Y+2, r25	; 0x02
    3854:	ab 83       	std	Y+3, r26	; 0x03
    3856:	bc 83       	std	Y+4, r27	; 0x04
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    3858:	89 81       	ldd	r24, Y+1	; 0x01
    385a:	9a 81       	ldd	r25, Y+2	; 0x02
    385c:	ab 81       	ldd	r26, Y+3	; 0x03
    385e:	bc 81       	ldd	r27, Y+4	; 0x04
    3860:	89 2b       	or	r24, r25
    3862:	8a 2b       	or	r24, r26
    3864:	8b 2b       	or	r24, r27
    3866:	09 f0       	breq	.+2      	; 0x386a <f_lseek+0x232>
    3868:	44 c0       	rjmp	.+136    	; 0x38f2 <f_lseek+0x2ba>
					clst = create_chain(fp->fs, 0);
    386a:	8a 89       	ldd	r24, Y+18	; 0x12
    386c:	9b 89       	ldd	r25, Y+19	; 0x13
    386e:	fc 01       	movw	r30, r24
    3870:	80 81       	ld	r24, Z
    3872:	91 81       	ldd	r25, Z+1	; 0x01
    3874:	40 e0       	ldi	r20, 0x00	; 0
    3876:	50 e0       	ldi	r21, 0x00	; 0
    3878:	ba 01       	movw	r22, r20
    387a:	0e 94 8e 09 	call	0x131c	; 0x131c <create_chain>
    387e:	dc 01       	movw	r26, r24
    3880:	cb 01       	movw	r24, r22
    3882:	89 83       	std	Y+1, r24	; 0x01
    3884:	9a 83       	std	Y+2, r25	; 0x02
    3886:	ab 83       	std	Y+3, r26	; 0x03
    3888:	bc 83       	std	Y+4, r27	; 0x04
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    388a:	89 81       	ldd	r24, Y+1	; 0x01
    388c:	9a 81       	ldd	r25, Y+2	; 0x02
    388e:	ab 81       	ldd	r26, Y+3	; 0x03
    3890:	bc 81       	ldd	r27, Y+4	; 0x04
    3892:	01 97       	sbiw	r24, 0x01	; 1
    3894:	a1 05       	cpc	r26, r1
    3896:	b1 05       	cpc	r27, r1
    3898:	61 f4       	brne	.+24     	; 0x38b2 <f_lseek+0x27a>
    389a:	8a 89       	ldd	r24, Y+18	; 0x12
    389c:	9b 89       	ldd	r25, Y+19	; 0x13
    389e:	fc 01       	movw	r30, r24
    38a0:	84 81       	ldd	r24, Z+4	; 0x04
    38a2:	28 2f       	mov	r18, r24
    38a4:	20 68       	ori	r18, 0x80	; 128
    38a6:	8a 89       	ldd	r24, Y+18	; 0x12
    38a8:	9b 89       	ldd	r25, Y+19	; 0x13
    38aa:	fc 01       	movw	r30, r24
    38ac:	24 83       	std	Z+4, r18	; 0x04
    38ae:	82 e0       	ldi	r24, 0x02	; 2
    38b0:	af c1       	rjmp	.+862    	; 0x3c10 <f_lseek+0x5d8>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    38b2:	89 81       	ldd	r24, Y+1	; 0x01
    38b4:	9a 81       	ldd	r25, Y+2	; 0x02
    38b6:	ab 81       	ldd	r26, Y+3	; 0x03
    38b8:	bc 81       	ldd	r27, Y+4	; 0x04
    38ba:	8f 3f       	cpi	r24, 0xFF	; 255
    38bc:	9f 4f       	sbci	r25, 0xFF	; 255
    38be:	af 4f       	sbci	r26, 0xFF	; 255
    38c0:	bf 4f       	sbci	r27, 0xFF	; 255
    38c2:	61 f4       	brne	.+24     	; 0x38dc <f_lseek+0x2a4>
    38c4:	8a 89       	ldd	r24, Y+18	; 0x12
    38c6:	9b 89       	ldd	r25, Y+19	; 0x13
    38c8:	fc 01       	movw	r30, r24
    38ca:	84 81       	ldd	r24, Z+4	; 0x04
    38cc:	28 2f       	mov	r18, r24
    38ce:	20 68       	ori	r18, 0x80	; 128
    38d0:	8a 89       	ldd	r24, Y+18	; 0x12
    38d2:	9b 89       	ldd	r25, Y+19	; 0x13
    38d4:	fc 01       	movw	r30, r24
    38d6:	24 83       	std	Z+4, r18	; 0x04
    38d8:	81 e0       	ldi	r24, 0x01	; 1
    38da:	9a c1       	rjmp	.+820    	; 0x3c10 <f_lseek+0x5d8>
					fp->org_clust = clst;
    38dc:	2a 89       	ldd	r18, Y+18	; 0x12
    38de:	3b 89       	ldd	r19, Y+19	; 0x13
    38e0:	89 81       	ldd	r24, Y+1	; 0x01
    38e2:	9a 81       	ldd	r25, Y+2	; 0x02
    38e4:	ab 81       	ldd	r26, Y+3	; 0x03
    38e6:	bc 81       	ldd	r27, Y+4	; 0x04
    38e8:	f9 01       	movw	r30, r18
    38ea:	86 87       	std	Z+14, r24	; 0x0e
    38ec:	97 87       	std	Z+15, r25	; 0x0f
    38ee:	a0 8b       	std	Z+16, r26	; 0x10
    38f0:	b1 8b       	std	Z+17, r27	; 0x11
				}
#endif
				fp->curr_clust = clst;
    38f2:	2a 89       	ldd	r18, Y+18	; 0x12
    38f4:	3b 89       	ldd	r19, Y+19	; 0x13
    38f6:	89 81       	ldd	r24, Y+1	; 0x01
    38f8:	9a 81       	ldd	r25, Y+2	; 0x02
    38fa:	ab 81       	ldd	r26, Y+3	; 0x03
    38fc:	bc 81       	ldd	r27, Y+4	; 0x04
    38fe:	f9 01       	movw	r30, r18
    3900:	82 8b       	std	Z+18, r24	; 0x12
    3902:	93 8b       	std	Z+19, r25	; 0x13
    3904:	a4 8b       	std	Z+20, r26	; 0x14
    3906:	b5 8b       	std	Z+21, r27	; 0x15
			}
			if (clst != 0) {
    3908:	89 81       	ldd	r24, Y+1	; 0x01
    390a:	9a 81       	ldd	r25, Y+2	; 0x02
    390c:	ab 81       	ldd	r26, Y+3	; 0x03
    390e:	bc 81       	ldd	r27, Y+4	; 0x04
    3910:	89 2b       	or	r24, r25
    3912:	8a 2b       	or	r24, r26
    3914:	8b 2b       	or	r24, r27
    3916:	09 f4       	brne	.+2      	; 0x391a <f_lseek+0x2e2>
    3918:	26 c1       	rjmp	.+588    	; 0x3b66 <f_lseek+0x52e>
				while (ofs > bcs) {						/* Cluster following loop */
    391a:	b4 c0       	rjmp	.+360    	; 0x3a84 <f_lseek+0x44c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    391c:	8a 89       	ldd	r24, Y+18	; 0x12
    391e:	9b 89       	ldd	r25, Y+19	; 0x13
    3920:	fc 01       	movw	r30, r24
    3922:	84 81       	ldd	r24, Z+4	; 0x04
    3924:	88 2f       	mov	r24, r24
    3926:	90 e0       	ldi	r25, 0x00	; 0
    3928:	82 70       	andi	r24, 0x02	; 2
    392a:	99 27       	eor	r25, r25
    392c:	89 2b       	or	r24, r25
    392e:	29 f1       	breq	.+74     	; 0x397a <f_lseek+0x342>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    3930:	8a 89       	ldd	r24, Y+18	; 0x12
    3932:	9b 89       	ldd	r25, Y+19	; 0x13
    3934:	fc 01       	movw	r30, r24
    3936:	20 81       	ld	r18, Z
    3938:	31 81       	ldd	r19, Z+1	; 0x01
    393a:	89 81       	ldd	r24, Y+1	; 0x01
    393c:	9a 81       	ldd	r25, Y+2	; 0x02
    393e:	ab 81       	ldd	r26, Y+3	; 0x03
    3940:	bc 81       	ldd	r27, Y+4	; 0x04
    3942:	ac 01       	movw	r20, r24
    3944:	bd 01       	movw	r22, r26
    3946:	c9 01       	movw	r24, r18
    3948:	0e 94 8e 09 	call	0x131c	; 0x131c <create_chain>
    394c:	dc 01       	movw	r26, r24
    394e:	cb 01       	movw	r24, r22
    3950:	89 83       	std	Y+1, r24	; 0x01
    3952:	9a 83       	std	Y+2, r25	; 0x02
    3954:	ab 83       	std	Y+3, r26	; 0x03
    3956:	bc 83       	std	Y+4, r27	; 0x04
						if (clst == 0) {				/* When disk gets full, clip file size */
    3958:	89 81       	ldd	r24, Y+1	; 0x01
    395a:	9a 81       	ldd	r25, Y+2	; 0x02
    395c:	ab 81       	ldd	r26, Y+3	; 0x03
    395e:	bc 81       	ldd	r27, Y+4	; 0x04
    3960:	89 2b       	or	r24, r25
    3962:	8a 2b       	or	r24, r26
    3964:	8b 2b       	or	r24, r27
    3966:	e9 f4       	brne	.+58     	; 0x39a2 <f_lseek+0x36a>
							ofs = bcs; break;
    3968:	8e 85       	ldd	r24, Y+14	; 0x0e
    396a:	9f 85       	ldd	r25, Y+15	; 0x0f
    396c:	a8 89       	ldd	r26, Y+16	; 0x10
    396e:	b9 89       	ldd	r27, Y+17	; 0x11
    3970:	8c 8b       	std	Y+20, r24	; 0x14
    3972:	9d 8b       	std	Y+21, r25	; 0x15
    3974:	ae 8b       	std	Y+22, r26	; 0x16
    3976:	bf 8b       	std	Y+23, r27	; 0x17
    3978:	93 c0       	rjmp	.+294    	; 0x3aa0 <f_lseek+0x468>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    397a:	8a 89       	ldd	r24, Y+18	; 0x12
    397c:	9b 89       	ldd	r25, Y+19	; 0x13
    397e:	fc 01       	movw	r30, r24
    3980:	20 81       	ld	r18, Z
    3982:	31 81       	ldd	r19, Z+1	; 0x01
    3984:	89 81       	ldd	r24, Y+1	; 0x01
    3986:	9a 81       	ldd	r25, Y+2	; 0x02
    3988:	ab 81       	ldd	r26, Y+3	; 0x03
    398a:	bc 81       	ldd	r27, Y+4	; 0x04
    398c:	ac 01       	movw	r20, r24
    398e:	bd 01       	movw	r22, r26
    3990:	c9 01       	movw	r24, r18
    3992:	0e 94 c2 05 	call	0xb84	; 0xb84 <get_fat>
    3996:	dc 01       	movw	r26, r24
    3998:	cb 01       	movw	r24, r22
    399a:	89 83       	std	Y+1, r24	; 0x01
    399c:	9a 83       	std	Y+2, r25	; 0x02
    399e:	ab 83       	std	Y+3, r26	; 0x03
    39a0:	bc 83       	std	Y+4, r27	; 0x04
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    39a2:	89 81       	ldd	r24, Y+1	; 0x01
    39a4:	9a 81       	ldd	r25, Y+2	; 0x02
    39a6:	ab 81       	ldd	r26, Y+3	; 0x03
    39a8:	bc 81       	ldd	r27, Y+4	; 0x04
    39aa:	8f 3f       	cpi	r24, 0xFF	; 255
    39ac:	9f 4f       	sbci	r25, 0xFF	; 255
    39ae:	af 4f       	sbci	r26, 0xFF	; 255
    39b0:	bf 4f       	sbci	r27, 0xFF	; 255
    39b2:	61 f4       	brne	.+24     	; 0x39cc <f_lseek+0x394>
    39b4:	8a 89       	ldd	r24, Y+18	; 0x12
    39b6:	9b 89       	ldd	r25, Y+19	; 0x13
    39b8:	fc 01       	movw	r30, r24
    39ba:	84 81       	ldd	r24, Z+4	; 0x04
    39bc:	28 2f       	mov	r18, r24
    39be:	20 68       	ori	r18, 0x80	; 128
    39c0:	8a 89       	ldd	r24, Y+18	; 0x12
    39c2:	9b 89       	ldd	r25, Y+19	; 0x13
    39c4:	fc 01       	movw	r30, r24
    39c6:	24 83       	std	Z+4, r18	; 0x04
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	22 c1       	rjmp	.+580    	; 0x3c10 <f_lseek+0x5d8>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    39cc:	89 81       	ldd	r24, Y+1	; 0x01
    39ce:	9a 81       	ldd	r25, Y+2	; 0x02
    39d0:	ab 81       	ldd	r26, Y+3	; 0x03
    39d2:	bc 81       	ldd	r27, Y+4	; 0x04
    39d4:	02 97       	sbiw	r24, 0x02	; 2
    39d6:	a1 05       	cpc	r26, r1
    39d8:	b1 05       	cpc	r27, r1
    39da:	98 f0       	brcs	.+38     	; 0x3a02 <f_lseek+0x3ca>
    39dc:	8a 89       	ldd	r24, Y+18	; 0x12
    39de:	9b 89       	ldd	r25, Y+19	; 0x13
    39e0:	fc 01       	movw	r30, r24
    39e2:	80 81       	ld	r24, Z
    39e4:	91 81       	ldd	r25, Z+1	; 0x01
    39e6:	fc 01       	movw	r30, r24
    39e8:	22 8d       	ldd	r18, Z+26	; 0x1a
    39ea:	33 8d       	ldd	r19, Z+27	; 0x1b
    39ec:	44 8d       	ldd	r20, Z+28	; 0x1c
    39ee:	55 8d       	ldd	r21, Z+29	; 0x1d
    39f0:	89 81       	ldd	r24, Y+1	; 0x01
    39f2:	9a 81       	ldd	r25, Y+2	; 0x02
    39f4:	ab 81       	ldd	r26, Y+3	; 0x03
    39f6:	bc 81       	ldd	r27, Y+4	; 0x04
    39f8:	82 17       	cp	r24, r18
    39fa:	93 07       	cpc	r25, r19
    39fc:	a4 07       	cpc	r26, r20
    39fe:	b5 07       	cpc	r27, r21
    3a00:	60 f0       	brcs	.+24     	; 0x3a1a <f_lseek+0x3e2>
    3a02:	8a 89       	ldd	r24, Y+18	; 0x12
    3a04:	9b 89       	ldd	r25, Y+19	; 0x13
    3a06:	fc 01       	movw	r30, r24
    3a08:	84 81       	ldd	r24, Z+4	; 0x04
    3a0a:	28 2f       	mov	r18, r24
    3a0c:	20 68       	ori	r18, 0x80	; 128
    3a0e:	8a 89       	ldd	r24, Y+18	; 0x12
    3a10:	9b 89       	ldd	r25, Y+19	; 0x13
    3a12:	fc 01       	movw	r30, r24
    3a14:	24 83       	std	Z+4, r18	; 0x04
    3a16:	82 e0       	ldi	r24, 0x02	; 2
    3a18:	fb c0       	rjmp	.+502    	; 0x3c10 <f_lseek+0x5d8>
					fp->curr_clust = clst;
    3a1a:	2a 89       	ldd	r18, Y+18	; 0x12
    3a1c:	3b 89       	ldd	r19, Y+19	; 0x13
    3a1e:	89 81       	ldd	r24, Y+1	; 0x01
    3a20:	9a 81       	ldd	r25, Y+2	; 0x02
    3a22:	ab 81       	ldd	r26, Y+3	; 0x03
    3a24:	bc 81       	ldd	r27, Y+4	; 0x04
    3a26:	f9 01       	movw	r30, r18
    3a28:	82 8b       	std	Z+18, r24	; 0x12
    3a2a:	93 8b       	std	Z+19, r25	; 0x13
    3a2c:	a4 8b       	std	Z+20, r26	; 0x14
    3a2e:	b5 8b       	std	Z+21, r27	; 0x15
					fp->fptr += bcs;
    3a30:	8a 89       	ldd	r24, Y+18	; 0x12
    3a32:	9b 89       	ldd	r25, Y+19	; 0x13
    3a34:	fc 01       	movw	r30, r24
    3a36:	26 81       	ldd	r18, Z+6	; 0x06
    3a38:	37 81       	ldd	r19, Z+7	; 0x07
    3a3a:	40 85       	ldd	r20, Z+8	; 0x08
    3a3c:	51 85       	ldd	r21, Z+9	; 0x09
    3a3e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a40:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a42:	a8 89       	ldd	r26, Y+16	; 0x10
    3a44:	b9 89       	ldd	r27, Y+17	; 0x11
    3a46:	82 0f       	add	r24, r18
    3a48:	93 1f       	adc	r25, r19
    3a4a:	a4 1f       	adc	r26, r20
    3a4c:	b5 1f       	adc	r27, r21
    3a4e:	2a 89       	ldd	r18, Y+18	; 0x12
    3a50:	3b 89       	ldd	r19, Y+19	; 0x13
    3a52:	f9 01       	movw	r30, r18
    3a54:	86 83       	std	Z+6, r24	; 0x06
    3a56:	97 83       	std	Z+7, r25	; 0x07
    3a58:	a0 87       	std	Z+8, r26	; 0x08
    3a5a:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    3a5c:	2c 89       	ldd	r18, Y+20	; 0x14
    3a5e:	3d 89       	ldd	r19, Y+21	; 0x15
    3a60:	4e 89       	ldd	r20, Y+22	; 0x16
    3a62:	5f 89       	ldd	r21, Y+23	; 0x17
    3a64:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a66:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a68:	a8 89       	ldd	r26, Y+16	; 0x10
    3a6a:	b9 89       	ldd	r27, Y+17	; 0x11
    3a6c:	79 01       	movw	r14, r18
    3a6e:	8a 01       	movw	r16, r20
    3a70:	e8 1a       	sub	r14, r24
    3a72:	f9 0a       	sbc	r15, r25
    3a74:	0a 0b       	sbc	r16, r26
    3a76:	1b 0b       	sbc	r17, r27
    3a78:	d8 01       	movw	r26, r16
    3a7a:	c7 01       	movw	r24, r14
    3a7c:	8c 8b       	std	Y+20, r24	; 0x14
    3a7e:	9d 8b       	std	Y+21, r25	; 0x15
    3a80:	ae 8b       	std	Y+22, r26	; 0x16
    3a82:	bf 8b       	std	Y+23, r27	; 0x17
				}
#endif
				fp->curr_clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    3a84:	2c 89       	ldd	r18, Y+20	; 0x14
    3a86:	3d 89       	ldd	r19, Y+21	; 0x15
    3a88:	4e 89       	ldd	r20, Y+22	; 0x16
    3a8a:	5f 89       	ldd	r21, Y+23	; 0x17
    3a8c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a8e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a90:	a8 89       	ldd	r26, Y+16	; 0x10
    3a92:	b9 89       	ldd	r27, Y+17	; 0x11
    3a94:	82 17       	cp	r24, r18
    3a96:	93 07       	cpc	r25, r19
    3a98:	a4 07       	cpc	r26, r20
    3a9a:	b5 07       	cpc	r27, r21
    3a9c:	08 f4       	brcc	.+2      	; 0x3aa0 <f_lseek+0x468>
    3a9e:	3e cf       	rjmp	.-388    	; 0x391c <f_lseek+0x2e4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->curr_clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    3aa0:	8a 89       	ldd	r24, Y+18	; 0x12
    3aa2:	9b 89       	ldd	r25, Y+19	; 0x13
    3aa4:	fc 01       	movw	r30, r24
    3aa6:	26 81       	ldd	r18, Z+6	; 0x06
    3aa8:	37 81       	ldd	r19, Z+7	; 0x07
    3aaa:	40 85       	ldd	r20, Z+8	; 0x08
    3aac:	51 85       	ldd	r21, Z+9	; 0x09
    3aae:	8c 89       	ldd	r24, Y+20	; 0x14
    3ab0:	9d 89       	ldd	r25, Y+21	; 0x15
    3ab2:	ae 89       	ldd	r26, Y+22	; 0x16
    3ab4:	bf 89       	ldd	r27, Y+23	; 0x17
    3ab6:	82 0f       	add	r24, r18
    3ab8:	93 1f       	adc	r25, r19
    3aba:	a4 1f       	adc	r26, r20
    3abc:	b5 1f       	adc	r27, r21
    3abe:	2a 89       	ldd	r18, Y+18	; 0x12
    3ac0:	3b 89       	ldd	r19, Y+19	; 0x13
    3ac2:	f9 01       	movw	r30, r18
    3ac4:	86 83       	std	Z+6, r24	; 0x06
    3ac6:	97 83       	std	Z+7, r25	; 0x07
    3ac8:	a0 87       	std	Z+8, r26	; 0x08
    3aca:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    3acc:	8c 89       	ldd	r24, Y+20	; 0x14
    3ace:	9d 89       	ldd	r25, Y+21	; 0x15
    3ad0:	ae 89       	ldd	r26, Y+22	; 0x16
    3ad2:	bf 89       	ldd	r27, Y+23	; 0x17
    3ad4:	91 70       	andi	r25, 0x01	; 1
    3ad6:	aa 27       	eor	r26, r26
    3ad8:	bb 27       	eor	r27, r27
    3ada:	89 2b       	or	r24, r25
    3adc:	8a 2b       	or	r24, r26
    3ade:	8b 2b       	or	r24, r27
    3ae0:	09 f4       	brne	.+2      	; 0x3ae4 <f_lseek+0x4ac>
    3ae2:	41 c0       	rjmp	.+130    	; 0x3b66 <f_lseek+0x52e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    3ae4:	8a 89       	ldd	r24, Y+18	; 0x12
    3ae6:	9b 89       	ldd	r25, Y+19	; 0x13
    3ae8:	fc 01       	movw	r30, r24
    3aea:	20 81       	ld	r18, Z
    3aec:	31 81       	ldd	r19, Z+1	; 0x01
    3aee:	89 81       	ldd	r24, Y+1	; 0x01
    3af0:	9a 81       	ldd	r25, Y+2	; 0x02
    3af2:	ab 81       	ldd	r26, Y+3	; 0x03
    3af4:	bc 81       	ldd	r27, Y+4	; 0x04
    3af6:	ac 01       	movw	r20, r24
    3af8:	bd 01       	movw	r22, r26
    3afa:	c9 01       	movw	r24, r18
    3afc:	0e 94 68 05 	call	0xad0	; 0xad0 <clust2sect>
    3b00:	dc 01       	movw	r26, r24
    3b02:	cb 01       	movw	r24, r22
    3b04:	8d 83       	std	Y+5, r24	; 0x05
    3b06:	9e 83       	std	Y+6, r25	; 0x06
    3b08:	af 83       	std	Y+7, r26	; 0x07
    3b0a:	b8 87       	std	Y+8, r27	; 0x08
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    3b0c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b0e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b10:	af 81       	ldd	r26, Y+7	; 0x07
    3b12:	b8 85       	ldd	r27, Y+8	; 0x08
    3b14:	89 2b       	or	r24, r25
    3b16:	8a 2b       	or	r24, r26
    3b18:	8b 2b       	or	r24, r27
    3b1a:	61 f4       	brne	.+24     	; 0x3b34 <f_lseek+0x4fc>
    3b1c:	8a 89       	ldd	r24, Y+18	; 0x12
    3b1e:	9b 89       	ldd	r25, Y+19	; 0x13
    3b20:	fc 01       	movw	r30, r24
    3b22:	84 81       	ldd	r24, Z+4	; 0x04
    3b24:	28 2f       	mov	r18, r24
    3b26:	20 68       	ori	r18, 0x80	; 128
    3b28:	8a 89       	ldd	r24, Y+18	; 0x12
    3b2a:	9b 89       	ldd	r25, Y+19	; 0x13
    3b2c:	fc 01       	movw	r30, r24
    3b2e:	24 83       	std	Z+4, r18	; 0x04
    3b30:	82 e0       	ldi	r24, 0x02	; 2
    3b32:	6e c0       	rjmp	.+220    	; 0x3c10 <f_lseek+0x5d8>
					nsect += ofs / SS(fp->fs);
    3b34:	8c 89       	ldd	r24, Y+20	; 0x14
    3b36:	9d 89       	ldd	r25, Y+21	; 0x15
    3b38:	ae 89       	ldd	r26, Y+22	; 0x16
    3b3a:	bf 89       	ldd	r27, Y+23	; 0x17
    3b3c:	07 2e       	mov	r0, r23
    3b3e:	79 e0       	ldi	r23, 0x09	; 9
    3b40:	b6 95       	lsr	r27
    3b42:	a7 95       	ror	r26
    3b44:	97 95       	ror	r25
    3b46:	87 95       	ror	r24
    3b48:	7a 95       	dec	r23
    3b4a:	d1 f7       	brne	.-12     	; 0x3b40 <f_lseek+0x508>
    3b4c:	70 2d       	mov	r23, r0
    3b4e:	2d 81       	ldd	r18, Y+5	; 0x05
    3b50:	3e 81       	ldd	r19, Y+6	; 0x06
    3b52:	4f 81       	ldd	r20, Y+7	; 0x07
    3b54:	58 85       	ldd	r21, Y+8	; 0x08
    3b56:	82 0f       	add	r24, r18
    3b58:	93 1f       	adc	r25, r19
    3b5a:	a4 1f       	adc	r26, r20
    3b5c:	b5 1f       	adc	r27, r21
    3b5e:	8d 83       	std	Y+5, r24	; 0x05
    3b60:	9e 83       	std	Y+6, r25	; 0x06
    3b62:	af 83       	std	Y+7, r26	; 0x07
    3b64:	b8 87       	std	Y+8, r27	; 0x08
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    3b66:	8a 89       	ldd	r24, Y+18	; 0x12
    3b68:	9b 89       	ldd	r25, Y+19	; 0x13
    3b6a:	fc 01       	movw	r30, r24
    3b6c:	86 81       	ldd	r24, Z+6	; 0x06
    3b6e:	97 81       	ldd	r25, Z+7	; 0x07
    3b70:	a0 85       	ldd	r26, Z+8	; 0x08
    3b72:	b1 85       	ldd	r27, Z+9	; 0x09
    3b74:	91 70       	andi	r25, 0x01	; 1
    3b76:	aa 27       	eor	r26, r26
    3b78:	bb 27       	eor	r27, r27
    3b7a:	89 2b       	or	r24, r25
    3b7c:	8a 2b       	or	r24, r26
    3b7e:	8b 2b       	or	r24, r27
    3b80:	d9 f0       	breq	.+54     	; 0x3bb8 <f_lseek+0x580>
    3b82:	8a 89       	ldd	r24, Y+18	; 0x12
    3b84:	9b 89       	ldd	r25, Y+19	; 0x13
    3b86:	fc 01       	movw	r30, r24
    3b88:	26 89       	ldd	r18, Z+22	; 0x16
    3b8a:	37 89       	ldd	r19, Z+23	; 0x17
    3b8c:	40 8d       	ldd	r20, Z+24	; 0x18
    3b8e:	51 8d       	ldd	r21, Z+25	; 0x19
    3b90:	8d 81       	ldd	r24, Y+5	; 0x05
    3b92:	9e 81       	ldd	r25, Y+6	; 0x06
    3b94:	af 81       	ldd	r26, Y+7	; 0x07
    3b96:	b8 85       	ldd	r27, Y+8	; 0x08
    3b98:	28 17       	cp	r18, r24
    3b9a:	39 07       	cpc	r19, r25
    3b9c:	4a 07       	cpc	r20, r26
    3b9e:	5b 07       	cpc	r21, r27
    3ba0:	59 f0       	breq	.+22     	; 0x3bb8 <f_lseek+0x580>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    3ba2:	2a 89       	ldd	r18, Y+18	; 0x12
    3ba4:	3b 89       	ldd	r19, Y+19	; 0x13
    3ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    3baa:	af 81       	ldd	r26, Y+7	; 0x07
    3bac:	b8 85       	ldd	r27, Y+8	; 0x08
    3bae:	f9 01       	movw	r30, r18
    3bb0:	86 8b       	std	Z+22, r24	; 0x16
    3bb2:	97 8b       	std	Z+23, r25	; 0x17
    3bb4:	a0 8f       	std	Z+24, r26	; 0x18
    3bb6:	b1 8f       	std	Z+25, r27	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set change flag if the file size is extended */
    3bb8:	8a 89       	ldd	r24, Y+18	; 0x12
    3bba:	9b 89       	ldd	r25, Y+19	; 0x13
    3bbc:	fc 01       	movw	r30, r24
    3bbe:	26 81       	ldd	r18, Z+6	; 0x06
    3bc0:	37 81       	ldd	r19, Z+7	; 0x07
    3bc2:	40 85       	ldd	r20, Z+8	; 0x08
    3bc4:	51 85       	ldd	r21, Z+9	; 0x09
    3bc6:	8a 89       	ldd	r24, Y+18	; 0x12
    3bc8:	9b 89       	ldd	r25, Y+19	; 0x13
    3bca:	fc 01       	movw	r30, r24
    3bcc:	82 85       	ldd	r24, Z+10	; 0x0a
    3bce:	93 85       	ldd	r25, Z+11	; 0x0b
    3bd0:	a4 85       	ldd	r26, Z+12	; 0x0c
    3bd2:	b5 85       	ldd	r27, Z+13	; 0x0d
    3bd4:	82 17       	cp	r24, r18
    3bd6:	93 07       	cpc	r25, r19
    3bd8:	a4 07       	cpc	r26, r20
    3bda:	b5 07       	cpc	r27, r21
    3bdc:	c0 f4       	brcc	.+48     	; 0x3c0e <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
    3bde:	8a 89       	ldd	r24, Y+18	; 0x12
    3be0:	9b 89       	ldd	r25, Y+19	; 0x13
    3be2:	fc 01       	movw	r30, r24
    3be4:	86 81       	ldd	r24, Z+6	; 0x06
    3be6:	97 81       	ldd	r25, Z+7	; 0x07
    3be8:	a0 85       	ldd	r26, Z+8	; 0x08
    3bea:	b1 85       	ldd	r27, Z+9	; 0x09
    3bec:	2a 89       	ldd	r18, Y+18	; 0x12
    3bee:	3b 89       	ldd	r19, Y+19	; 0x13
    3bf0:	f9 01       	movw	r30, r18
    3bf2:	82 87       	std	Z+10, r24	; 0x0a
    3bf4:	93 87       	std	Z+11, r25	; 0x0b
    3bf6:	a4 87       	std	Z+12, r26	; 0x0c
    3bf8:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    3bfa:	8a 89       	ldd	r24, Y+18	; 0x12
    3bfc:	9b 89       	ldd	r25, Y+19	; 0x13
    3bfe:	fc 01       	movw	r30, r24
    3c00:	84 81       	ldd	r24, Z+4	; 0x04
    3c02:	28 2f       	mov	r18, r24
    3c04:	20 62       	ori	r18, 0x20	; 32
    3c06:	8a 89       	ldd	r24, Y+18	; 0x12
    3c08:	9b 89       	ldd	r25, Y+19	; 0x13
    3c0a:	fc 01       	movw	r30, r24
    3c0c:	24 83       	std	Z+4, r18	; 0x04
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
    3c0e:	89 85       	ldd	r24, Y+9	; 0x09
}
    3c10:	67 96       	adiw	r28, 0x17	; 23
    3c12:	0f b6       	in	r0, 0x3f	; 63
    3c14:	f8 94       	cli
    3c16:	de bf       	out	0x3e, r29	; 62
    3c18:	0f be       	out	0x3f, r0	; 63
    3c1a:	cd bf       	out	0x3d, r28	; 61
    3c1c:	df 91       	pop	r29
    3c1e:	cf 91       	pop	r28
    3c20:	1f 91       	pop	r17
    3c22:	0f 91       	pop	r16
    3c24:	ff 90       	pop	r15
    3c26:	ef 90       	pop	r14
    3c28:	08 95       	ret

00003c2a <rx_handler>:

uint32_t getMillis(){	
	
	return _millis;	
	
}
    3c2a:	cf 93       	push	r28
    3c2c:	df 93       	push	r29
    3c2e:	1f 92       	push	r1
    3c30:	cd b7       	in	r28, 0x3d	; 61
    3c32:	de b7       	in	r29, 0x3e	; 62
    3c34:	89 83       	std	Y+1, r24	; 0x01
    3c36:	89 81       	ldd	r24, Y+1	; 0x01
    3c38:	8e 3f       	cpi	r24, 0xFE	; 254
    3c3a:	51 f0       	breq	.+20     	; 0x3c50 <rx_handler+0x26>
    3c3c:	69 81       	ldd	r22, Y+1	; 0x01
    3c3e:	84 e7       	ldi	r24, 0x74	; 116
    3c40:	94 e0       	ldi	r25, 0x04	; 4
    3c42:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <bufferAddToEnd>
    3c46:	88 23       	and	r24, r24
    3c48:	21 f4       	brne	.+8      	; 0x3c52 <rx_handler+0x28>
    3c4a:	0e 94 8e 3c 	call	0x791c	; 0x791c <uartFlushReceiveBuffer>
    3c4e:	01 c0       	rjmp	.+2      	; 0x3c52 <rx_handler+0x28>
    3c50:	00 00       	nop
    3c52:	0f 90       	pop	r0
    3c54:	df 91       	pop	r29
    3c56:	cf 91       	pop	r28
    3c58:	08 95       	ret

00003c5a <get_fattime>:
    3c5a:	cf 93       	push	r28
    3c5c:	df 93       	push	r29
    3c5e:	cd b7       	in	r28, 0x3d	; 61
    3c60:	de b7       	in	r29, 0x3e	; 62
    3c62:	80 e0       	ldi	r24, 0x00	; 0
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	dc 01       	movw	r26, r24
    3c68:	bc 01       	movw	r22, r24
    3c6a:	cd 01       	movw	r24, r26
    3c6c:	df 91       	pop	r29
    3c6e:	cf 91       	pop	r28
    3c70:	08 95       	ret

00003c72 <configTimers>:
    3c72:	cf 93       	push	r28
    3c74:	df 93       	push	r29
    3c76:	cd b7       	in	r28, 0x3d	; 61
    3c78:	de b7       	in	r29, 0x3e	; 62
    3c7a:	8e e4       	ldi	r24, 0x4E	; 78
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	2e e4       	ldi	r18, 0x4E	; 78
    3c80:	30 e0       	ldi	r19, 0x00	; 0
    3c82:	f9 01       	movw	r30, r18
    3c84:	20 81       	ld	r18, Z
    3c86:	2a 60       	ori	r18, 0x0A	; 10
    3c88:	fc 01       	movw	r30, r24
    3c8a:	20 83       	st	Z, r18
    3c8c:	8a e4       	ldi	r24, 0x4A	; 74
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	20 ed       	ldi	r18, 0xD0	; 208
    3c92:	37 e0       	ldi	r19, 0x07	; 7
    3c94:	fc 01       	movw	r30, r24
    3c96:	31 83       	std	Z+1, r19	; 0x01
    3c98:	20 83       	st	Z, r18
    3c9a:	89 e5       	ldi	r24, 0x59	; 89
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	29 e5       	ldi	r18, 0x59	; 89
    3ca0:	30 e0       	ldi	r19, 0x00	; 0
    3ca2:	f9 01       	movw	r30, r18
    3ca4:	20 81       	ld	r18, Z
    3ca6:	20 61       	ori	r18, 0x10	; 16
    3ca8:	fc 01       	movw	r30, r24
    3caa:	20 83       	st	Z, r18
    3cac:	83 e4       	ldi	r24, 0x43	; 67
    3cae:	90 e0       	ldi	r25, 0x00	; 0
    3cb0:	2c e9       	ldi	r18, 0x9C	; 156
    3cb2:	fc 01       	movw	r30, r24
    3cb4:	20 83       	st	Z, r18
    3cb6:	85 e4       	ldi	r24, 0x45	; 69
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	25 e4       	ldi	r18, 0x45	; 69
    3cbc:	30 e0       	ldi	r19, 0x00	; 0
    3cbe:	f9 01       	movw	r30, r18
    3cc0:	20 81       	ld	r18, Z
    3cc2:	28 60       	ori	r18, 0x08	; 8
    3cc4:	fc 01       	movw	r30, r24
    3cc6:	20 83       	st	Z, r18
    3cc8:	89 e5       	ldi	r24, 0x59	; 89
    3cca:	90 e0       	ldi	r25, 0x00	; 0
    3ccc:	29 e5       	ldi	r18, 0x59	; 89
    3cce:	30 e0       	ldi	r19, 0x00	; 0
    3cd0:	f9 01       	movw	r30, r18
    3cd2:	20 81       	ld	r18, Z
    3cd4:	20 68       	ori	r18, 0x80	; 128
    3cd6:	fc 01       	movw	r30, r24
    3cd8:	20 83       	st	Z, r18
    3cda:	85 e4       	ldi	r24, 0x45	; 69
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	25 e4       	ldi	r18, 0x45	; 69
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	f9 01       	movw	r30, r18
    3ce4:	20 81       	ld	r18, Z
    3ce6:	27 60       	ori	r18, 0x07	; 7
    3ce8:	fc 01       	movw	r30, r24
    3cea:	20 83       	st	Z, r18
    3cec:	00 00       	nop
    3cee:	df 91       	pop	r29
    3cf0:	cf 91       	pop	r28
    3cf2:	08 95       	ret

00003cf4 <resetTime>:
    3cf4:	cf 93       	push	r28
    3cf6:	df 93       	push	r29
    3cf8:	1f 92       	push	r1
    3cfa:	cd b7       	in	r28, 0x3d	; 61
    3cfc:	de b7       	in	r29, 0x3e	; 62
    3cfe:	8f e5       	ldi	r24, 0x5F	; 95
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	fc 01       	movw	r30, r24
    3d04:	80 81       	ld	r24, Z
    3d06:	89 83       	std	Y+1, r24	; 0x01
    3d08:	f8 94       	cli
    3d0a:	8c e4       	ldi	r24, 0x4C	; 76
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	fc 01       	movw	r30, r24
    3d10:	11 82       	std	Z+1, r1	; 0x01
    3d12:	10 82       	st	Z, r1
    3d14:	8f e5       	ldi	r24, 0x5F	; 95
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	29 81       	ldd	r18, Y+1	; 0x01
    3d1a:	fc 01       	movw	r30, r24
    3d1c:	20 83       	st	Z, r18
    3d1e:	00 00       	nop
    3d20:	0f 90       	pop	r0
    3d22:	df 91       	pop	r29
    3d24:	cf 91       	pop	r28
    3d26:	08 95       	ret

00003d28 <getMicros>:
    3d28:	cf 93       	push	r28
    3d2a:	df 93       	push	r29
    3d2c:	00 d0       	rcall	.+0      	; 0x3d2e <getMicros+0x6>
    3d2e:	cd b7       	in	r28, 0x3d	; 61
    3d30:	de b7       	in	r29, 0x3e	; 62
    3d32:	8f e5       	ldi	r24, 0x5F	; 95
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	fc 01       	movw	r30, r24
    3d38:	80 81       	ld	r24, Z
    3d3a:	89 83       	std	Y+1, r24	; 0x01
    3d3c:	f8 94       	cli
    3d3e:	8c e4       	ldi	r24, 0x4C	; 76
    3d40:	90 e0       	ldi	r25, 0x00	; 0
    3d42:	fc 01       	movw	r30, r24
    3d44:	80 81       	ld	r24, Z
    3d46:	91 81       	ldd	r25, Z+1	; 0x01
    3d48:	8a 83       	std	Y+2, r24	; 0x02
    3d4a:	8f e5       	ldi	r24, 0x5F	; 95
    3d4c:	90 e0       	ldi	r25, 0x00	; 0
    3d4e:	29 81       	ldd	r18, Y+1	; 0x01
    3d50:	fc 01       	movw	r30, r24
    3d52:	20 83       	st	Z, r18
    3d54:	20 91 8f 01 	lds	r18, 0x018F	; 0x80018f <_millis>
    3d58:	30 91 90 01 	lds	r19, 0x0190	; 0x800190 <_millis+0x1>
    3d5c:	40 91 91 01 	lds	r20, 0x0191	; 0x800191 <_millis+0x2>
    3d60:	50 91 92 01 	lds	r21, 0x0192	; 0x800192 <_millis+0x3>
    3d64:	88 ee       	ldi	r24, 0xE8	; 232
    3d66:	93 e0       	ldi	r25, 0x03	; 3
    3d68:	dc 01       	movw	r26, r24
    3d6a:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <__muluhisi3>
    3d6e:	9b 01       	movw	r18, r22
    3d70:	ac 01       	movw	r20, r24
    3d72:	8a 81       	ldd	r24, Y+2	; 0x02
    3d74:	86 95       	lsr	r24
    3d76:	88 2f       	mov	r24, r24
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	a0 e0       	ldi	r26, 0x00	; 0
    3d7c:	b0 e0       	ldi	r27, 0x00	; 0
    3d7e:	82 0f       	add	r24, r18
    3d80:	93 1f       	adc	r25, r19
    3d82:	a4 1f       	adc	r26, r20
    3d84:	b5 1f       	adc	r27, r21
    3d86:	bc 01       	movw	r22, r24
    3d88:	cd 01       	movw	r24, r26
    3d8a:	0f 90       	pop	r0
    3d8c:	0f 90       	pop	r0
    3d8e:	df 91       	pop	r29
    3d90:	cf 91       	pop	r28
    3d92:	08 95       	ret

00003d94 <addMillis>:

void addMillis(){
    3d94:	cf 93       	push	r28
    3d96:	df 93       	push	r29
    3d98:	1f 92       	push	r1
    3d9a:	cd b7       	in	r28, 0x3d	; 61
    3d9c:	de b7       	in	r29, 0x3e	; 62
	
	unsigned char statusReg = SREG; // Save the status register
    3d9e:	8f e5       	ldi	r24, 0x5F	; 95
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	fc 01       	movw	r30, r24
    3da4:	80 81       	ld	r24, Z
    3da6:	89 83       	std	Y+1, r24	; 0x01
	++_millis; // Add one millisecond, cause we interrupt once per millisecond
    3da8:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <_millis>
    3dac:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <_millis+0x1>
    3db0:	a0 91 91 01 	lds	r26, 0x0191	; 0x800191 <_millis+0x2>
    3db4:	b0 91 92 01 	lds	r27, 0x0192	; 0x800192 <_millis+0x3>
    3db8:	01 96       	adiw	r24, 0x01	; 1
    3dba:	a1 1d       	adc	r26, r1
    3dbc:	b1 1d       	adc	r27, r1
    3dbe:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <_millis>
    3dc2:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <_millis+0x1>
    3dc6:	a0 93 91 01 	sts	0x0191, r26	; 0x800191 <_millis+0x2>
    3dca:	b0 93 92 01 	sts	0x0192, r27	; 0x800192 <_millis+0x3>
	_seconds += (0 == (_millis % 1000))?1:0; // Increase seconds each thousand milliseconds
    3dce:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <_millis>
    3dd2:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <_millis+0x1>
    3dd6:	a0 91 91 01 	lds	r26, 0x0191	; 0x800191 <_millis+0x2>
    3dda:	b0 91 92 01 	lds	r27, 0x0192	; 0x800192 <_millis+0x3>
    3dde:	28 ee       	ldi	r18, 0xE8	; 232
    3de0:	33 e0       	ldi	r19, 0x03	; 3
    3de2:	40 e0       	ldi	r20, 0x00	; 0
    3de4:	50 e0       	ldi	r21, 0x00	; 0
    3de6:	bc 01       	movw	r22, r24
    3de8:	cd 01       	movw	r24, r26
    3dea:	0e 94 69 3d 	call	0x7ad2	; 0x7ad2 <__udivmodsi4>
    3dee:	dc 01       	movw	r26, r24
    3df0:	cb 01       	movw	r24, r22
    3df2:	21 e0       	ldi	r18, 0x01	; 1
    3df4:	89 2b       	or	r24, r25
    3df6:	8a 2b       	or	r24, r26
    3df8:	8b 2b       	or	r24, r27
    3dfa:	09 f0       	breq	.+2      	; 0x3dfe <addMillis+0x6a>
    3dfc:	20 e0       	ldi	r18, 0x00	; 0
    3dfe:	82 2f       	mov	r24, r18
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	9c 01       	movw	r18, r24
    3e04:	99 0f       	add	r25, r25
    3e06:	44 0b       	sbc	r20, r20
    3e08:	55 0b       	sbc	r21, r21
    3e0a:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <_seconds>
    3e0e:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <_seconds+0x1>
    3e12:	a0 91 95 01 	lds	r26, 0x0195	; 0x800195 <_seconds+0x2>
    3e16:	b0 91 96 01 	lds	r27, 0x0196	; 0x800196 <_seconds+0x3>
    3e1a:	82 0f       	add	r24, r18
    3e1c:	93 1f       	adc	r25, r19
    3e1e:	a4 1f       	adc	r26, r20
    3e20:	b5 1f       	adc	r27, r21
    3e22:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <_seconds>
    3e26:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <_seconds+0x1>
    3e2a:	a0 93 95 01 	sts	0x0195, r26	; 0x800195 <_seconds+0x2>
    3e2e:	b0 93 96 01 	sts	0x0196, r27	; 0x800196 <_seconds+0x3>
	SREG = statusReg; // Restore the status register
    3e32:	8f e5       	ldi	r24, 0x5F	; 95
    3e34:	90 e0       	ldi	r25, 0x00	; 0
    3e36:	29 81       	ldd	r18, Y+1	; 0x01
    3e38:	fc 01       	movw	r30, r24
    3e3a:	20 83       	st	Z, r18
    3e3c:	00 00       	nop
    3e3e:	0f 90       	pop	r0
    3e40:	df 91       	pop	r29
    3e42:	cf 91       	pop	r28
    3e44:	08 95       	ret

00003e46 <lcdInitHW>:

void lcdClear(void)
{
	// clear LCD
	lcdControlWrite(1<<LCD_CLR);
}
    3e46:	cf 93       	push	r28
    3e48:	df 93       	push	r29
    3e4a:	cd b7       	in	r28, 0x3d	; 61
    3e4c:	de b7       	in	r29, 0x3e	; 62
    3e4e:	82 e3       	ldi	r24, 0x32	; 50
    3e50:	90 e0       	ldi	r25, 0x00	; 0
    3e52:	22 e3       	ldi	r18, 0x32	; 50
    3e54:	30 e0       	ldi	r19, 0x00	; 0
    3e56:	f9 01       	movw	r30, r18
    3e58:	20 81       	ld	r18, Z
    3e5a:	2b 7f       	andi	r18, 0xFB	; 251
    3e5c:	fc 01       	movw	r30, r24
    3e5e:	20 83       	st	Z, r18
    3e60:	82 e3       	ldi	r24, 0x32	; 50
    3e62:	90 e0       	ldi	r25, 0x00	; 0
    3e64:	22 e3       	ldi	r18, 0x32	; 50
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	f9 01       	movw	r30, r18
    3e6a:	20 81       	ld	r18, Z
    3e6c:	27 7f       	andi	r18, 0xF7	; 247
    3e6e:	fc 01       	movw	r30, r24
    3e70:	20 83       	st	Z, r18
    3e72:	82 e3       	ldi	r24, 0x32	; 50
    3e74:	90 e0       	ldi	r25, 0x00	; 0
    3e76:	22 e3       	ldi	r18, 0x32	; 50
    3e78:	30 e0       	ldi	r19, 0x00	; 0
    3e7a:	f9 01       	movw	r30, r18
    3e7c:	20 81       	ld	r18, Z
    3e7e:	2f 7e       	andi	r18, 0xEF	; 239
    3e80:	fc 01       	movw	r30, r24
    3e82:	20 83       	st	Z, r18
    3e84:	81 e3       	ldi	r24, 0x31	; 49
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	21 e3       	ldi	r18, 0x31	; 49
    3e8a:	30 e0       	ldi	r19, 0x00	; 0
    3e8c:	f9 01       	movw	r30, r18
    3e8e:	20 81       	ld	r18, Z
    3e90:	24 60       	ori	r18, 0x04	; 4
    3e92:	fc 01       	movw	r30, r24
    3e94:	20 83       	st	Z, r18
    3e96:	81 e3       	ldi	r24, 0x31	; 49
    3e98:	90 e0       	ldi	r25, 0x00	; 0
    3e9a:	21 e3       	ldi	r18, 0x31	; 49
    3e9c:	30 e0       	ldi	r19, 0x00	; 0
    3e9e:	f9 01       	movw	r30, r18
    3ea0:	20 81       	ld	r18, Z
    3ea2:	28 60       	ori	r18, 0x08	; 8
    3ea4:	fc 01       	movw	r30, r24
    3ea6:	20 83       	st	Z, r18
    3ea8:	81 e3       	ldi	r24, 0x31	; 49
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	21 e3       	ldi	r18, 0x31	; 49
    3eae:	30 e0       	ldi	r19, 0x00	; 0
    3eb0:	f9 01       	movw	r30, r18
    3eb2:	20 81       	ld	r18, Z
    3eb4:	20 61       	ori	r18, 0x10	; 16
    3eb6:	fc 01       	movw	r30, r24
    3eb8:	20 83       	st	Z, r18
    3eba:	8a e3       	ldi	r24, 0x3A	; 58
    3ebc:	90 e0       	ldi	r25, 0x00	; 0
    3ebe:	2a e3       	ldi	r18, 0x3A	; 58
    3ec0:	30 e0       	ldi	r19, 0x00	; 0
    3ec2:	f9 01       	movw	r30, r18
    3ec4:	20 81       	ld	r18, Z
    3ec6:	2f 70       	andi	r18, 0x0F	; 15
    3ec8:	fc 01       	movw	r30, r24
    3eca:	20 83       	st	Z, r18
    3ecc:	8b e3       	ldi	r24, 0x3B	; 59
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	2b e3       	ldi	r18, 0x3B	; 59
    3ed2:	30 e0       	ldi	r19, 0x00	; 0
    3ed4:	f9 01       	movw	r30, r18
    3ed6:	20 81       	ld	r18, Z
    3ed8:	20 6f       	ori	r18, 0xF0	; 240
    3eda:	fc 01       	movw	r30, r24
    3edc:	20 83       	st	Z, r18
    3ede:	00 00       	nop
    3ee0:	df 91       	pop	r29
    3ee2:	cf 91       	pop	r28
    3ee4:	08 95       	ret

00003ee6 <lcdBusyWait>:
    3ee6:	cf 93       	push	r28
    3ee8:	df 93       	push	r29
    3eea:	cd b7       	in	r28, 0x3d	; 61
    3eec:	de b7       	in	r29, 0x3e	; 62
    3eee:	82 e3       	ldi	r24, 0x32	; 50
    3ef0:	90 e0       	ldi	r25, 0x00	; 0
    3ef2:	22 e3       	ldi	r18, 0x32	; 50
    3ef4:	30 e0       	ldi	r19, 0x00	; 0
    3ef6:	f9 01       	movw	r30, r18
    3ef8:	20 81       	ld	r18, Z
    3efa:	2b 7f       	andi	r18, 0xFB	; 251
    3efc:	fc 01       	movw	r30, r24
    3efe:	20 83       	st	Z, r18
    3f00:	8a e3       	ldi	r24, 0x3A	; 58
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	2a e3       	ldi	r18, 0x3A	; 58
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	f9 01       	movw	r30, r18
    3f0a:	20 81       	ld	r18, Z
    3f0c:	2f 70       	andi	r18, 0x0F	; 15
    3f0e:	fc 01       	movw	r30, r24
    3f10:	20 83       	st	Z, r18
    3f12:	8b e3       	ldi	r24, 0x3B	; 59
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	2b e3       	ldi	r18, 0x3B	; 59
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	f9 01       	movw	r30, r18
    3f1c:	20 81       	ld	r18, Z
    3f1e:	20 6f       	ori	r18, 0xF0	; 240
    3f20:	fc 01       	movw	r30, r24
    3f22:	20 83       	st	Z, r18
    3f24:	82 e3       	ldi	r24, 0x32	; 50
    3f26:	90 e0       	ldi	r25, 0x00	; 0
    3f28:	22 e3       	ldi	r18, 0x32	; 50
    3f2a:	30 e0       	ldi	r19, 0x00	; 0
    3f2c:	f9 01       	movw	r30, r18
    3f2e:	20 81       	ld	r18, Z
    3f30:	28 60       	ori	r18, 0x08	; 8
    3f32:	fc 01       	movw	r30, r24
    3f34:	20 83       	st	Z, r18
    3f36:	82 e3       	ldi	r24, 0x32	; 50
    3f38:	90 e0       	ldi	r25, 0x00	; 0
    3f3a:	22 e3       	ldi	r18, 0x32	; 50
    3f3c:	30 e0       	ldi	r19, 0x00	; 0
    3f3e:	f9 01       	movw	r30, r18
    3f40:	20 81       	ld	r18, Z
    3f42:	20 61       	ori	r18, 0x10	; 16
    3f44:	fc 01       	movw	r30, r24
    3f46:	20 83       	st	Z, r18
	...
    3f64:	94 c0       	rjmp	.+296    	; 0x408e <lcdBusyWait+0x1a8>
    3f66:	82 e3       	ldi	r24, 0x32	; 50
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	22 e3       	ldi	r18, 0x32	; 50
    3f6c:	30 e0       	ldi	r19, 0x00	; 0
    3f6e:	f9 01       	movw	r30, r18
    3f70:	20 81       	ld	r18, Z
    3f72:	2f 7e       	andi	r18, 0xEF	; 239
    3f74:	fc 01       	movw	r30, r24
    3f76:	20 83       	st	Z, r18
	...
    3fb0:	82 e3       	ldi	r24, 0x32	; 50
    3fb2:	90 e0       	ldi	r25, 0x00	; 0
    3fb4:	22 e3       	ldi	r18, 0x32	; 50
    3fb6:	30 e0       	ldi	r19, 0x00	; 0
    3fb8:	f9 01       	movw	r30, r18
    3fba:	20 81       	ld	r18, Z
    3fbc:	20 61       	ori	r18, 0x10	; 16
    3fbe:	fc 01       	movw	r30, r24
    3fc0:	20 83       	st	Z, r18
	...
    3ffa:	82 e3       	ldi	r24, 0x32	; 50
    3ffc:	90 e0       	ldi	r25, 0x00	; 0
    3ffe:	22 e3       	ldi	r18, 0x32	; 50
    4000:	30 e0       	ldi	r19, 0x00	; 0
    4002:	f9 01       	movw	r30, r18
    4004:	20 81       	ld	r18, Z
    4006:	2f 7e       	andi	r18, 0xEF	; 239
    4008:	fc 01       	movw	r30, r24
    400a:	20 83       	st	Z, r18
	...
    4044:	82 e3       	ldi	r24, 0x32	; 50
    4046:	90 e0       	ldi	r25, 0x00	; 0
    4048:	22 e3       	ldi	r18, 0x32	; 50
    404a:	30 e0       	ldi	r19, 0x00	; 0
    404c:	f9 01       	movw	r30, r18
    404e:	20 81       	ld	r18, Z
    4050:	20 61       	ori	r18, 0x10	; 16
    4052:	fc 01       	movw	r30, r24
    4054:	20 83       	st	Z, r18
	...
    408e:	89 e3       	ldi	r24, 0x39	; 57
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	fc 01       	movw	r30, r24
    4094:	80 81       	ld	r24, Z
    4096:	88 23       	and	r24, r24
    4098:	0c f4       	brge	.+2      	; 0x409c <lcdBusyWait+0x1b6>
    409a:	65 cf       	rjmp	.-310    	; 0x3f66 <lcdBusyWait+0x80>
    409c:	82 e3       	ldi	r24, 0x32	; 50
    409e:	90 e0       	ldi	r25, 0x00	; 0
    40a0:	22 e3       	ldi	r18, 0x32	; 50
    40a2:	30 e0       	ldi	r19, 0x00	; 0
    40a4:	f9 01       	movw	r30, r18
    40a6:	20 81       	ld	r18, Z
    40a8:	2f 7e       	andi	r18, 0xEF	; 239
    40aa:	fc 01       	movw	r30, r24
    40ac:	20 83       	st	Z, r18
    40ae:	00 00       	nop
    40b0:	df 91       	pop	r29
    40b2:	cf 91       	pop	r28
    40b4:	08 95       	ret

000040b6 <lcdControlWrite>:
    40b6:	cf 93       	push	r28
    40b8:	df 93       	push	r29
    40ba:	1f 92       	push	r1
    40bc:	cd b7       	in	r28, 0x3d	; 61
    40be:	de b7       	in	r29, 0x3e	; 62
    40c0:	89 83       	std	Y+1, r24	; 0x01
    40c2:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <lcdBusyWait>
    40c6:	82 e3       	ldi	r24, 0x32	; 50
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	22 e3       	ldi	r18, 0x32	; 50
    40cc:	30 e0       	ldi	r19, 0x00	; 0
    40ce:	f9 01       	movw	r30, r18
    40d0:	20 81       	ld	r18, Z
    40d2:	2b 7f       	andi	r18, 0xFB	; 251
    40d4:	fc 01       	movw	r30, r24
    40d6:	20 83       	st	Z, r18
    40d8:	82 e3       	ldi	r24, 0x32	; 50
    40da:	90 e0       	ldi	r25, 0x00	; 0
    40dc:	22 e3       	ldi	r18, 0x32	; 50
    40de:	30 e0       	ldi	r19, 0x00	; 0
    40e0:	f9 01       	movw	r30, r18
    40e2:	20 81       	ld	r18, Z
    40e4:	27 7f       	andi	r18, 0xF7	; 247
    40e6:	fc 01       	movw	r30, r24
    40e8:	20 83       	st	Z, r18
    40ea:	82 e3       	ldi	r24, 0x32	; 50
    40ec:	90 e0       	ldi	r25, 0x00	; 0
    40ee:	22 e3       	ldi	r18, 0x32	; 50
    40f0:	30 e0       	ldi	r19, 0x00	; 0
    40f2:	f9 01       	movw	r30, r18
    40f4:	20 81       	ld	r18, Z
    40f6:	20 61       	ori	r18, 0x10	; 16
    40f8:	fc 01       	movw	r30, r24
    40fa:	20 83       	st	Z, r18
    40fc:	8a e3       	ldi	r24, 0x3A	; 58
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	2a e3       	ldi	r18, 0x3A	; 58
    4102:	30 e0       	ldi	r19, 0x00	; 0
    4104:	f9 01       	movw	r30, r18
    4106:	20 81       	ld	r18, Z
    4108:	20 6f       	ori	r18, 0xF0	; 240
    410a:	fc 01       	movw	r30, r24
    410c:	20 83       	st	Z, r18
    410e:	8b e3       	ldi	r24, 0x3B	; 59
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	2b e3       	ldi	r18, 0x3B	; 59
    4114:	30 e0       	ldi	r19, 0x00	; 0
    4116:	f9 01       	movw	r30, r18
    4118:	20 81       	ld	r18, Z
    411a:	32 2f       	mov	r19, r18
    411c:	3f 70       	andi	r19, 0x0F	; 15
    411e:	29 81       	ldd	r18, Y+1	; 0x01
    4120:	20 7f       	andi	r18, 0xF0	; 240
    4122:	23 2b       	or	r18, r19
    4124:	fc 01       	movw	r30, r24
    4126:	20 83       	st	Z, r18
	...
    4160:	82 e3       	ldi	r24, 0x32	; 50
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	22 e3       	ldi	r18, 0x32	; 50
    4166:	30 e0       	ldi	r19, 0x00	; 0
    4168:	f9 01       	movw	r30, r18
    416a:	20 81       	ld	r18, Z
    416c:	2f 7e       	andi	r18, 0xEF	; 239
    416e:	fc 01       	movw	r30, r24
    4170:	20 83       	st	Z, r18
	...
    41aa:	82 e3       	ldi	r24, 0x32	; 50
    41ac:	90 e0       	ldi	r25, 0x00	; 0
    41ae:	22 e3       	ldi	r18, 0x32	; 50
    41b0:	30 e0       	ldi	r19, 0x00	; 0
    41b2:	f9 01       	movw	r30, r18
    41b4:	20 81       	ld	r18, Z
    41b6:	20 61       	ori	r18, 0x10	; 16
    41b8:	fc 01       	movw	r30, r24
    41ba:	20 83       	st	Z, r18
    41bc:	8b e3       	ldi	r24, 0x3B	; 59
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	2b e3       	ldi	r18, 0x3B	; 59
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	f9 01       	movw	r30, r18
    41c6:	20 81       	ld	r18, Z
    41c8:	42 2f       	mov	r20, r18
    41ca:	4f 70       	andi	r20, 0x0F	; 15
    41cc:	29 81       	ldd	r18, Y+1	; 0x01
    41ce:	22 2f       	mov	r18, r18
    41d0:	30 e0       	ldi	r19, 0x00	; 0
    41d2:	22 95       	swap	r18
    41d4:	32 95       	swap	r19
    41d6:	30 7f       	andi	r19, 0xF0	; 240
    41d8:	32 27       	eor	r19, r18
    41da:	20 7f       	andi	r18, 0xF0	; 240
    41dc:	32 27       	eor	r19, r18
    41de:	24 2b       	or	r18, r20
    41e0:	fc 01       	movw	r30, r24
    41e2:	20 83       	st	Z, r18
	...
    421c:	82 e3       	ldi	r24, 0x32	; 50
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	22 e3       	ldi	r18, 0x32	; 50
    4222:	30 e0       	ldi	r19, 0x00	; 0
    4224:	f9 01       	movw	r30, r18
    4226:	20 81       	ld	r18, Z
    4228:	2f 7e       	andi	r18, 0xEF	; 239
    422a:	fc 01       	movw	r30, r24
    422c:	20 83       	st	Z, r18
    422e:	8a e3       	ldi	r24, 0x3A	; 58
    4230:	90 e0       	ldi	r25, 0x00	; 0
    4232:	2a e3       	ldi	r18, 0x3A	; 58
    4234:	30 e0       	ldi	r19, 0x00	; 0
    4236:	f9 01       	movw	r30, r18
    4238:	20 81       	ld	r18, Z
    423a:	2f 70       	andi	r18, 0x0F	; 15
    423c:	fc 01       	movw	r30, r24
    423e:	20 83       	st	Z, r18
    4240:	8b e3       	ldi	r24, 0x3B	; 59
    4242:	90 e0       	ldi	r25, 0x00	; 0
    4244:	2b e3       	ldi	r18, 0x3B	; 59
    4246:	30 e0       	ldi	r19, 0x00	; 0
    4248:	f9 01       	movw	r30, r18
    424a:	20 81       	ld	r18, Z
    424c:	20 6f       	ori	r18, 0xF0	; 240
    424e:	fc 01       	movw	r30, r24
    4250:	20 83       	st	Z, r18
    4252:	00 00       	nop
    4254:	0f 90       	pop	r0
    4256:	df 91       	pop	r29
    4258:	cf 91       	pop	r28
    425a:	08 95       	ret

0000425c <lcdControlRead>:
    425c:	1f 93       	push	r17
    425e:	cf 93       	push	r28
    4260:	df 93       	push	r29
    4262:	cd b7       	in	r28, 0x3d	; 61
    4264:	de b7       	in	r29, 0x3e	; 62
    4266:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <lcdBusyWait>
    426a:	8a e3       	ldi	r24, 0x3A	; 58
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	2a e3       	ldi	r18, 0x3A	; 58
    4270:	30 e0       	ldi	r19, 0x00	; 0
    4272:	f9 01       	movw	r30, r18
    4274:	20 81       	ld	r18, Z
    4276:	2f 70       	andi	r18, 0x0F	; 15
    4278:	fc 01       	movw	r30, r24
    427a:	20 83       	st	Z, r18
    427c:	8b e3       	ldi	r24, 0x3B	; 59
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	2b e3       	ldi	r18, 0x3B	; 59
    4282:	30 e0       	ldi	r19, 0x00	; 0
    4284:	f9 01       	movw	r30, r18
    4286:	20 81       	ld	r18, Z
    4288:	20 6f       	ori	r18, 0xF0	; 240
    428a:	fc 01       	movw	r30, r24
    428c:	20 83       	st	Z, r18
    428e:	82 e3       	ldi	r24, 0x32	; 50
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	22 e3       	ldi	r18, 0x32	; 50
    4294:	30 e0       	ldi	r19, 0x00	; 0
    4296:	f9 01       	movw	r30, r18
    4298:	20 81       	ld	r18, Z
    429a:	2b 7f       	andi	r18, 0xFB	; 251
    429c:	fc 01       	movw	r30, r24
    429e:	20 83       	st	Z, r18
    42a0:	82 e3       	ldi	r24, 0x32	; 50
    42a2:	90 e0       	ldi	r25, 0x00	; 0
    42a4:	22 e3       	ldi	r18, 0x32	; 50
    42a6:	30 e0       	ldi	r19, 0x00	; 0
    42a8:	f9 01       	movw	r30, r18
    42aa:	20 81       	ld	r18, Z
    42ac:	28 60       	ori	r18, 0x08	; 8
    42ae:	fc 01       	movw	r30, r24
    42b0:	20 83       	st	Z, r18
    42b2:	82 e3       	ldi	r24, 0x32	; 50
    42b4:	90 e0       	ldi	r25, 0x00	; 0
    42b6:	22 e3       	ldi	r18, 0x32	; 50
    42b8:	30 e0       	ldi	r19, 0x00	; 0
    42ba:	f9 01       	movw	r30, r18
    42bc:	20 81       	ld	r18, Z
    42be:	20 61       	ori	r18, 0x10	; 16
    42c0:	fc 01       	movw	r30, r24
    42c2:	20 83       	st	Z, r18
	...
    42fc:	89 e3       	ldi	r24, 0x39	; 57
    42fe:	90 e0       	ldi	r25, 0x00	; 0
    4300:	fc 01       	movw	r30, r24
    4302:	80 81       	ld	r24, Z
    4304:	18 2f       	mov	r17, r24
    4306:	10 7f       	andi	r17, 0xF0	; 240
    4308:	82 e3       	ldi	r24, 0x32	; 50
    430a:	90 e0       	ldi	r25, 0x00	; 0
    430c:	22 e3       	ldi	r18, 0x32	; 50
    430e:	30 e0       	ldi	r19, 0x00	; 0
    4310:	f9 01       	movw	r30, r18
    4312:	20 81       	ld	r18, Z
    4314:	2f 7e       	andi	r18, 0xEF	; 239
    4316:	fc 01       	movw	r30, r24
    4318:	20 83       	st	Z, r18
	...
    4352:	82 e3       	ldi	r24, 0x32	; 50
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	22 e3       	ldi	r18, 0x32	; 50
    4358:	30 e0       	ldi	r19, 0x00	; 0
    435a:	f9 01       	movw	r30, r18
    435c:	20 81       	ld	r18, Z
    435e:	20 61       	ori	r18, 0x10	; 16
    4360:	fc 01       	movw	r30, r24
    4362:	20 83       	st	Z, r18
	...
    439c:	89 e3       	ldi	r24, 0x39	; 57
    439e:	90 e0       	ldi	r25, 0x00	; 0
    43a0:	fc 01       	movw	r30, r24
    43a2:	80 81       	ld	r24, Z
    43a4:	82 95       	swap	r24
    43a6:	8f 70       	andi	r24, 0x0F	; 15
    43a8:	88 2f       	mov	r24, r24
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	98 2f       	mov	r25, r24
    43ae:	81 2f       	mov	r24, r17
    43b0:	89 2b       	or	r24, r25
    43b2:	18 2f       	mov	r17, r24
    43b4:	82 e3       	ldi	r24, 0x32	; 50
    43b6:	90 e0       	ldi	r25, 0x00	; 0
    43b8:	22 e3       	ldi	r18, 0x32	; 50
    43ba:	30 e0       	ldi	r19, 0x00	; 0
    43bc:	f9 01       	movw	r30, r18
    43be:	20 81       	ld	r18, Z
    43c0:	2f 7e       	andi	r18, 0xEF	; 239
    43c2:	fc 01       	movw	r30, r24
    43c4:	20 83       	st	Z, r18
    43c6:	81 2f       	mov	r24, r17
    43c8:	df 91       	pop	r29
    43ca:	cf 91       	pop	r28
    43cc:	1f 91       	pop	r17
    43ce:	08 95       	ret

000043d0 <lcdDataWrite>:
    43d0:	cf 93       	push	r28
    43d2:	df 93       	push	r29
    43d4:	1f 92       	push	r1
    43d6:	cd b7       	in	r28, 0x3d	; 61
    43d8:	de b7       	in	r29, 0x3e	; 62
    43da:	89 83       	std	Y+1, r24	; 0x01
    43dc:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <lcdBusyWait>
    43e0:	82 e3       	ldi	r24, 0x32	; 50
    43e2:	90 e0       	ldi	r25, 0x00	; 0
    43e4:	22 e3       	ldi	r18, 0x32	; 50
    43e6:	30 e0       	ldi	r19, 0x00	; 0
    43e8:	f9 01       	movw	r30, r18
    43ea:	20 81       	ld	r18, Z
    43ec:	24 60       	ori	r18, 0x04	; 4
    43ee:	fc 01       	movw	r30, r24
    43f0:	20 83       	st	Z, r18
    43f2:	82 e3       	ldi	r24, 0x32	; 50
    43f4:	90 e0       	ldi	r25, 0x00	; 0
    43f6:	22 e3       	ldi	r18, 0x32	; 50
    43f8:	30 e0       	ldi	r19, 0x00	; 0
    43fa:	f9 01       	movw	r30, r18
    43fc:	20 81       	ld	r18, Z
    43fe:	27 7f       	andi	r18, 0xF7	; 247
    4400:	fc 01       	movw	r30, r24
    4402:	20 83       	st	Z, r18
    4404:	82 e3       	ldi	r24, 0x32	; 50
    4406:	90 e0       	ldi	r25, 0x00	; 0
    4408:	22 e3       	ldi	r18, 0x32	; 50
    440a:	30 e0       	ldi	r19, 0x00	; 0
    440c:	f9 01       	movw	r30, r18
    440e:	20 81       	ld	r18, Z
    4410:	20 61       	ori	r18, 0x10	; 16
    4412:	fc 01       	movw	r30, r24
    4414:	20 83       	st	Z, r18
    4416:	8a e3       	ldi	r24, 0x3A	; 58
    4418:	90 e0       	ldi	r25, 0x00	; 0
    441a:	2a e3       	ldi	r18, 0x3A	; 58
    441c:	30 e0       	ldi	r19, 0x00	; 0
    441e:	f9 01       	movw	r30, r18
    4420:	20 81       	ld	r18, Z
    4422:	20 6f       	ori	r18, 0xF0	; 240
    4424:	fc 01       	movw	r30, r24
    4426:	20 83       	st	Z, r18
    4428:	8b e3       	ldi	r24, 0x3B	; 59
    442a:	90 e0       	ldi	r25, 0x00	; 0
    442c:	2b e3       	ldi	r18, 0x3B	; 59
    442e:	30 e0       	ldi	r19, 0x00	; 0
    4430:	f9 01       	movw	r30, r18
    4432:	20 81       	ld	r18, Z
    4434:	32 2f       	mov	r19, r18
    4436:	3f 70       	andi	r19, 0x0F	; 15
    4438:	29 81       	ldd	r18, Y+1	; 0x01
    443a:	20 7f       	andi	r18, 0xF0	; 240
    443c:	23 2b       	or	r18, r19
    443e:	fc 01       	movw	r30, r24
    4440:	20 83       	st	Z, r18
	...
    447a:	82 e3       	ldi	r24, 0x32	; 50
    447c:	90 e0       	ldi	r25, 0x00	; 0
    447e:	22 e3       	ldi	r18, 0x32	; 50
    4480:	30 e0       	ldi	r19, 0x00	; 0
    4482:	f9 01       	movw	r30, r18
    4484:	20 81       	ld	r18, Z
    4486:	2f 7e       	andi	r18, 0xEF	; 239
    4488:	fc 01       	movw	r30, r24
    448a:	20 83       	st	Z, r18
	...
    44c4:	82 e3       	ldi	r24, 0x32	; 50
    44c6:	90 e0       	ldi	r25, 0x00	; 0
    44c8:	22 e3       	ldi	r18, 0x32	; 50
    44ca:	30 e0       	ldi	r19, 0x00	; 0
    44cc:	f9 01       	movw	r30, r18
    44ce:	20 81       	ld	r18, Z
    44d0:	20 61       	ori	r18, 0x10	; 16
    44d2:	fc 01       	movw	r30, r24
    44d4:	20 83       	st	Z, r18
    44d6:	8b e3       	ldi	r24, 0x3B	; 59
    44d8:	90 e0       	ldi	r25, 0x00	; 0
    44da:	2b e3       	ldi	r18, 0x3B	; 59
    44dc:	30 e0       	ldi	r19, 0x00	; 0
    44de:	f9 01       	movw	r30, r18
    44e0:	20 81       	ld	r18, Z
    44e2:	42 2f       	mov	r20, r18
    44e4:	4f 70       	andi	r20, 0x0F	; 15
    44e6:	29 81       	ldd	r18, Y+1	; 0x01
    44e8:	22 2f       	mov	r18, r18
    44ea:	30 e0       	ldi	r19, 0x00	; 0
    44ec:	22 95       	swap	r18
    44ee:	32 95       	swap	r19
    44f0:	30 7f       	andi	r19, 0xF0	; 240
    44f2:	32 27       	eor	r19, r18
    44f4:	20 7f       	andi	r18, 0xF0	; 240
    44f6:	32 27       	eor	r19, r18
    44f8:	24 2b       	or	r18, r20
    44fa:	fc 01       	movw	r30, r24
    44fc:	20 83       	st	Z, r18
	...
    4536:	82 e3       	ldi	r24, 0x32	; 50
    4538:	90 e0       	ldi	r25, 0x00	; 0
    453a:	22 e3       	ldi	r18, 0x32	; 50
    453c:	30 e0       	ldi	r19, 0x00	; 0
    453e:	f9 01       	movw	r30, r18
    4540:	20 81       	ld	r18, Z
    4542:	2f 7e       	andi	r18, 0xEF	; 239
    4544:	fc 01       	movw	r30, r24
    4546:	20 83       	st	Z, r18
    4548:	8a e3       	ldi	r24, 0x3A	; 58
    454a:	90 e0       	ldi	r25, 0x00	; 0
    454c:	2a e3       	ldi	r18, 0x3A	; 58
    454e:	30 e0       	ldi	r19, 0x00	; 0
    4550:	f9 01       	movw	r30, r18
    4552:	20 81       	ld	r18, Z
    4554:	2f 70       	andi	r18, 0x0F	; 15
    4556:	fc 01       	movw	r30, r24
    4558:	20 83       	st	Z, r18
    455a:	8b e3       	ldi	r24, 0x3B	; 59
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	2b e3       	ldi	r18, 0x3B	; 59
    4560:	30 e0       	ldi	r19, 0x00	; 0
    4562:	f9 01       	movw	r30, r18
    4564:	20 81       	ld	r18, Z
    4566:	20 6f       	ori	r18, 0xF0	; 240
    4568:	fc 01       	movw	r30, r24
    456a:	20 83       	st	Z, r18
    456c:	00 00       	nop
    456e:	0f 90       	pop	r0
    4570:	df 91       	pop	r29
    4572:	cf 91       	pop	r28
    4574:	08 95       	ret

00004576 <lcdInit>:
    4576:	cf 93       	push	r28
    4578:	df 93       	push	r29
    457a:	cd b7       	in	r28, 0x3d	; 61
    457c:	de b7       	in	r29, 0x3e	; 62
    457e:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <lcdInitHW>
    4582:	88 e2       	ldi	r24, 0x28	; 40
    4584:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <lcdControlWrite>
    4588:	81 e0       	ldi	r24, 0x01	; 1
    458a:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <lcdControlWrite>
    458e:	80 e6       	ldi	r24, 0x60	; 96
    4590:	9a ee       	ldi	r25, 0xEA	; 234
    4592:	0e 94 46 39 	call	0x728c	; 0x728c <delay_us>
    4596:	86 e0       	ldi	r24, 0x06	; 6
    4598:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <lcdControlWrite>
    459c:	8c e0       	ldi	r24, 0x0C	; 12
    459e:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <lcdControlWrite>
    45a2:	82 e0       	ldi	r24, 0x02	; 2
    45a4:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <lcdControlWrite>
    45a8:	80 e8       	ldi	r24, 0x80	; 128
    45aa:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <lcdControlWrite>
    45ae:	40 e0       	ldi	r20, 0x00	; 0
    45b0:	60 e0       	ldi	r22, 0x00	; 0
    45b2:	82 e7       	ldi	r24, 0x72	; 114
    45b4:	91 e0       	ldi	r25, 0x01	; 1
    45b6:	0e 94 3f 23 	call	0x467e	; 0x467e <lcdLoadCustomChar>
    45ba:	41 e0       	ldi	r20, 0x01	; 1
    45bc:	61 e0       	ldi	r22, 0x01	; 1
    45be:	82 e7       	ldi	r24, 0x72	; 114
    45c0:	91 e0       	ldi	r25, 0x01	; 1
    45c2:	0e 94 3f 23 	call	0x467e	; 0x467e <lcdLoadCustomChar>
    45c6:	42 e0       	ldi	r20, 0x02	; 2
    45c8:	62 e0       	ldi	r22, 0x02	; 2
    45ca:	82 e7       	ldi	r24, 0x72	; 114
    45cc:	91 e0       	ldi	r25, 0x01	; 1
    45ce:	0e 94 3f 23 	call	0x467e	; 0x467e <lcdLoadCustomChar>
    45d2:	43 e0       	ldi	r20, 0x03	; 3
    45d4:	63 e0       	ldi	r22, 0x03	; 3
    45d6:	82 e7       	ldi	r24, 0x72	; 114
    45d8:	91 e0       	ldi	r25, 0x01	; 1
    45da:	0e 94 3f 23 	call	0x467e	; 0x467e <lcdLoadCustomChar>
    45de:	44 e0       	ldi	r20, 0x04	; 4
    45e0:	64 e0       	ldi	r22, 0x04	; 4
    45e2:	82 e7       	ldi	r24, 0x72	; 114
    45e4:	91 e0       	ldi	r25, 0x01	; 1
    45e6:	0e 94 3f 23 	call	0x467e	; 0x467e <lcdLoadCustomChar>
    45ea:	45 e0       	ldi	r20, 0x05	; 5
    45ec:	65 e0       	ldi	r22, 0x05	; 5
    45ee:	82 e7       	ldi	r24, 0x72	; 114
    45f0:	91 e0       	ldi	r25, 0x01	; 1
    45f2:	0e 94 3f 23 	call	0x467e	; 0x467e <lcdLoadCustomChar>
    45f6:	46 e0       	ldi	r20, 0x06	; 6
    45f8:	66 e0       	ldi	r22, 0x06	; 6
    45fa:	82 e7       	ldi	r24, 0x72	; 114
    45fc:	91 e0       	ldi	r25, 0x01	; 1
    45fe:	0e 94 3f 23 	call	0x467e	; 0x467e <lcdLoadCustomChar>
    4602:	47 e0       	ldi	r20, 0x07	; 7
    4604:	67 e0       	ldi	r22, 0x07	; 7
    4606:	82 e7       	ldi	r24, 0x72	; 114
    4608:	91 e0       	ldi	r25, 0x01	; 1
    460a:	0e 94 3f 23 	call	0x467e	; 0x467e <lcdLoadCustomChar>
    460e:	00 00       	nop
    4610:	df 91       	pop	r29
    4612:	cf 91       	pop	r28
    4614:	08 95       	ret

00004616 <lcdGotoXY>:

void lcdGotoXY(u08 x, u08 y)
{
    4616:	1f 93       	push	r17
    4618:	cf 93       	push	r28
    461a:	df 93       	push	r29
    461c:	00 d0       	rcall	.+0      	; 0x461e <lcdGotoXY+0x8>
    461e:	cd b7       	in	r28, 0x3d	; 61
    4620:	de b7       	in	r29, 0x3e	; 62
    4622:	89 83       	std	Y+1, r24	; 0x01
    4624:	6a 83       	std	Y+2, r22	; 0x02
	register u08 DDRAMAddr;

	// remap lines into proper order
	switch(y)
    4626:	8a 81       	ldd	r24, Y+2	; 0x02
    4628:	88 2f       	mov	r24, r24
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	81 30       	cpi	r24, 0x01	; 1
    462e:	91 05       	cpc	r25, r1
    4630:	71 f0       	breq	.+28     	; 0x464e <lcdGotoXY+0x38>
    4632:	82 30       	cpi	r24, 0x02	; 2
    4634:	91 05       	cpc	r25, r1
    4636:	1c f4       	brge	.+6      	; 0x463e <lcdGotoXY+0x28>
    4638:	89 2b       	or	r24, r25
    463a:	39 f0       	breq	.+14     	; 0x464a <lcdGotoXY+0x34>
    463c:	14 c0       	rjmp	.+40     	; 0x4666 <lcdGotoXY+0x50>
    463e:	82 30       	cpi	r24, 0x02	; 2
    4640:	91 05       	cpc	r25, r1
    4642:	49 f0       	breq	.+18     	; 0x4656 <lcdGotoXY+0x40>
    4644:	03 97       	sbiw	r24, 0x03	; 3
    4646:	59 f0       	breq	.+22     	; 0x465e <lcdGotoXY+0x48>
    4648:	0e c0       	rjmp	.+28     	; 0x4666 <lcdGotoXY+0x50>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
    464a:	19 81       	ldd	r17, Y+1	; 0x01
    464c:	0d c0       	rjmp	.+26     	; 0x4668 <lcdGotoXY+0x52>
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    464e:	89 81       	ldd	r24, Y+1	; 0x01
    4650:	10 e4       	ldi	r17, 0x40	; 64
    4652:	18 0f       	add	r17, r24
    4654:	09 c0       	rjmp	.+18     	; 0x4668 <lcdGotoXY+0x52>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    4656:	89 81       	ldd	r24, Y+1	; 0x01
    4658:	14 e1       	ldi	r17, 0x14	; 20
    465a:	18 0f       	add	r17, r24
    465c:	05 c0       	rjmp	.+10     	; 0x4668 <lcdGotoXY+0x52>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    465e:	89 81       	ldd	r24, Y+1	; 0x01
    4660:	14 e5       	ldi	r17, 0x54	; 84
    4662:	18 0f       	add	r17, r24
    4664:	01 c0       	rjmp	.+2      	; 0x4668 <lcdGotoXY+0x52>
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
    4666:	19 81       	ldd	r17, Y+1	; 0x01
	}

	// set data address
	lcdControlWrite(1<<LCD_DDRAM | DDRAMAddr);
    4668:	81 2f       	mov	r24, r17
    466a:	80 68       	ori	r24, 0x80	; 128
    466c:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <lcdControlWrite>
}
    4670:	00 00       	nop
    4672:	0f 90       	pop	r0
    4674:	0f 90       	pop	r0
    4676:	df 91       	pop	r29
    4678:	cf 91       	pop	r28
    467a:	1f 91       	pop	r17
    467c:	08 95       	ret

0000467e <lcdLoadCustomChar>:

void lcdLoadCustomChar(u08* lcdCustomCharArray, u08 romCharNum, u08 lcdCharNum)
{
    467e:	1f 93       	push	r17
    4680:	cf 93       	push	r28
    4682:	df 93       	push	r29
    4684:	cd b7       	in	r28, 0x3d	; 61
    4686:	de b7       	in	r29, 0x3e	; 62
    4688:	28 97       	sbiw	r28, 0x08	; 8
    468a:	0f b6       	in	r0, 0x3f	; 63
    468c:	f8 94       	cli
    468e:	de bf       	out	0x3e, r29	; 62
    4690:	0f be       	out	0x3f, r0	; 63
    4692:	cd bf       	out	0x3d, r28	; 61
    4694:	9e 83       	std	Y+6, r25	; 0x06
    4696:	8d 83       	std	Y+5, r24	; 0x05
    4698:	6f 83       	std	Y+7, r22	; 0x07
    469a:	48 87       	std	Y+8, r20	; 0x08
	register u08 i;
	u08 saveDDRAMAddr;

	// backup the current cursor position
	saveDDRAMAddr = lcdControlRead() & 0x7F;
    469c:	0e 94 2e 21 	call	0x425c	; 0x425c <lcdControlRead>
    46a0:	8f 77       	andi	r24, 0x7F	; 127
    46a2:	89 83       	std	Y+1, r24	; 0x01

	// multiply the character index by 8
	lcdCharNum = (lcdCharNum<<3);	// each character occupies 8 bytes
    46a4:	88 85       	ldd	r24, Y+8	; 0x08
    46a6:	88 0f       	add	r24, r24
    46a8:	88 0f       	add	r24, r24
    46aa:	88 0f       	add	r24, r24
    46ac:	88 87       	std	Y+8, r24	; 0x08
	romCharNum = (romCharNum<<3);	// each character occupies 8 bytes
    46ae:	8f 81       	ldd	r24, Y+7	; 0x07
    46b0:	88 0f       	add	r24, r24
    46b2:	88 0f       	add	r24, r24
    46b4:	88 0f       	add	r24, r24
    46b6:	8f 83       	std	Y+7, r24	; 0x07

	// copy the 8 bytes into CG (character generator) RAM
	for(i=0; i<8; i++)
    46b8:	10 e0       	ldi	r17, 0x00	; 0
    46ba:	1d c0       	rjmp	.+58     	; 0x46f6 <lcdLoadCustomChar+0x78>
	{
		// set CG RAM address
		lcdControlWrite((1<<LCD_CGRAM) | (lcdCharNum+i));
    46bc:	88 85       	ldd	r24, Y+8	; 0x08
    46be:	81 0f       	add	r24, r17
    46c0:	80 64       	ori	r24, 0x40	; 64
    46c2:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <lcdControlWrite>
		// write character data
		lcdDataWrite( pgm_read_byte(lcdCustomCharArray+romCharNum+i) );
    46c6:	8f 81       	ldd	r24, Y+7	; 0x07
    46c8:	28 2f       	mov	r18, r24
    46ca:	30 e0       	ldi	r19, 0x00	; 0
    46cc:	81 2f       	mov	r24, r17
    46ce:	90 e0       	ldi	r25, 0x00	; 0
    46d0:	82 0f       	add	r24, r18
    46d2:	93 1f       	adc	r25, r19
    46d4:	2d 81       	ldd	r18, Y+5	; 0x05
    46d6:	3e 81       	ldd	r19, Y+6	; 0x06
    46d8:	82 0f       	add	r24, r18
    46da:	93 1f       	adc	r25, r19
    46dc:	9b 83       	std	Y+3, r25	; 0x03
    46de:	8a 83       	std	Y+2, r24	; 0x02
    46e0:	8a 81       	ldd	r24, Y+2	; 0x02
    46e2:	9b 81       	ldd	r25, Y+3	; 0x03
    46e4:	fc 01       	movw	r30, r24
    46e6:	84 91       	lpm	r24, Z
    46e8:	8c 83       	std	Y+4, r24	; 0x04
    46ea:	8c 81       	ldd	r24, Y+4	; 0x04
    46ec:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <lcdDataWrite>
	// multiply the character index by 8
	lcdCharNum = (lcdCharNum<<3);	// each character occupies 8 bytes
	romCharNum = (romCharNum<<3);	// each character occupies 8 bytes

	// copy the 8 bytes into CG (character generator) RAM
	for(i=0; i<8; i++)
    46f0:	81 2f       	mov	r24, r17
    46f2:	11 e0       	ldi	r17, 0x01	; 1
    46f4:	18 0f       	add	r17, r24
    46f6:	18 30       	cpi	r17, 0x08	; 8
    46f8:	08 f3       	brcs	.-62     	; 0x46bc <lcdLoadCustomChar+0x3e>
		// write character data
		lcdDataWrite( pgm_read_byte(lcdCustomCharArray+romCharNum+i) );
	}

	// restore the previous cursor position
	lcdControlWrite(1<<LCD_DDRAM | saveDDRAMAddr);
    46fa:	89 81       	ldd	r24, Y+1	; 0x01
    46fc:	80 68       	ori	r24, 0x80	; 128
    46fe:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <lcdControlWrite>

}
    4702:	00 00       	nop
    4704:	28 96       	adiw	r28, 0x08	; 8
    4706:	0f b6       	in	r0, 0x3f	; 63
    4708:	f8 94       	cli
    470a:	de bf       	out	0x3e, r29	; 62
    470c:	0f be       	out	0x3f, r0	; 63
    470e:	cd bf       	out	0x3d, r28	; 61
    4710:	df 91       	pop	r29
    4712:	cf 91       	pop	r28
    4714:	1f 91       	pop	r17
    4716:	08 95       	ret

00004718 <lcdPrintData>:

void lcdPrintData(char* data, u08 nBytes)
{
    4718:	1f 93       	push	r17
    471a:	cf 93       	push	r28
    471c:	df 93       	push	r29
    471e:	00 d0       	rcall	.+0      	; 0x4720 <lcdPrintData+0x8>
    4720:	1f 92       	push	r1
    4722:	cd b7       	in	r28, 0x3d	; 61
    4724:	de b7       	in	r29, 0x3e	; 62
    4726:	9a 83       	std	Y+2, r25	; 0x02
    4728:	89 83       	std	Y+1, r24	; 0x01
    472a:	6b 83       	std	Y+3, r22	; 0x03
	register u08 i;

	// check to make sure we have a good pointer
	if (!data) return;
    472c:	89 81       	ldd	r24, Y+1	; 0x01
    472e:	9a 81       	ldd	r25, Y+2	; 0x02
    4730:	89 2b       	or	r24, r25
    4732:	99 f0       	breq	.+38     	; 0x475a <lcdPrintData+0x42>

	// print data
	for(i=0; i<nBytes; i++)
    4734:	10 e0       	ldi	r17, 0x00	; 0
    4736:	0d c0       	rjmp	.+26     	; 0x4752 <lcdPrintData+0x3a>
	{
		lcdDataWrite(data[i]);
    4738:	81 2f       	mov	r24, r17
    473a:	90 e0       	ldi	r25, 0x00	; 0
    473c:	29 81       	ldd	r18, Y+1	; 0x01
    473e:	3a 81       	ldd	r19, Y+2	; 0x02
    4740:	82 0f       	add	r24, r18
    4742:	93 1f       	adc	r25, r19
    4744:	fc 01       	movw	r30, r24
    4746:	80 81       	ld	r24, Z
    4748:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <lcdDataWrite>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    474c:	81 2f       	mov	r24, r17
    474e:	11 e0       	ldi	r17, 0x01	; 1
    4750:	18 0f       	add	r17, r24
    4752:	8b 81       	ldd	r24, Y+3	; 0x03
    4754:	18 17       	cp	r17, r24
    4756:	80 f3       	brcs	.-32     	; 0x4738 <lcdPrintData+0x20>
    4758:	01 c0       	rjmp	.+2      	; 0x475c <lcdPrintData+0x44>
void lcdPrintData(char* data, u08 nBytes)
{
	register u08 i;

	// check to make sure we have a good pointer
	if (!data) return;
    475a:	00 00       	nop
	// print data
	for(i=0; i<nBytes; i++)
	{
		lcdDataWrite(data[i]);
	}
}
    475c:	0f 90       	pop	r0
    475e:	0f 90       	pop	r0
    4760:	0f 90       	pop	r0
    4762:	df 91       	pop	r29
    4764:	cf 91       	pop	r28
    4766:	1f 91       	pop	r17
    4768:	08 95       	ret

0000476a <main>:
#include "MD_MIDIFile.h"

FATFS Fatfs;

int main(void)
{
    476a:	cf 93       	push	r28
    476c:	df 93       	push	r29
    476e:	cd b7       	in	r28, 0x3d	; 61
    4770:	de b7       	in	r29, 0x3e	; 62
    4772:	c7 57       	subi	r28, 0x77	; 119
    4774:	d2 40       	sbci	r29, 0x02	; 2
    4776:	0f b6       	in	r0, 0x3f	; 63
    4778:	f8 94       	cli
    477a:	de bf       	out	0x3e, r29	; 62
    477c:	0f be       	out	0x3f, r0	; 63
    477e:	cd bf       	out	0x3d, r28	; 61
    unsigned char byteValue = 0;
    4780:	19 82       	std	Y+1, r1	; 0x01
	struct MD_MIDIFile mf;
	char indstr[17];
    unsigned int ind = 0;
    4782:	1b 82       	std	Y+3, r1	; 0x03
    4784:	1a 82       	std	Y+2, r1	; 0x02
    unsigned char numOfBytes = 0;
    4786:	ce 01       	movw	r24, r28
    4788:	8e 50       	subi	r24, 0x0E	; 14
    478a:	9e 4f       	sbci	r25, 0xFE	; 254
    478c:	fc 01       	movw	r30, r24
    478e:	10 82       	st	Z, r1
    unsigned char pot = 0;
    4790:	ce 01       	movw	r24, r28
    4792:	8d 50       	subi	r24, 0x0D	; 13
    4794:	9e 4f       	sbci	r25, 0xFE	; 254
    4796:	fc 01       	movw	r30, r24
    4798:	10 82       	st	Z, r1
    unsigned char buttons[4];
    INPUT input = NONE;
    479a:	8f ef       	ldi	r24, 0xFF	; 255
    479c:	8c 83       	std	Y+4, r24	; 0x04
    FIL file;
    FILINFO finfo;
    DIR directory;
    FRESULT res;    
	
	DDRA |= (1 << PA1);		// remove
    479e:	8a e3       	ldi	r24, 0x3A	; 58
    47a0:	90 e0       	ldi	r25, 0x00	; 0
    47a2:	2a e3       	ldi	r18, 0x3A	; 58
    47a4:	30 e0       	ldi	r19, 0x00	; 0
    47a6:	f9 01       	movw	r30, r18
    47a8:	20 81       	ld	r18, Z
    47aa:	22 60       	ori	r18, 0x02	; 2
    47ac:	fc 01       	movw	r30, r24
    47ae:	20 83       	st	Z, r18
			
	configTimers();	
    47b0:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <configTimers>
	lcdInit();	
    47b4:	0e 94 bb 22 	call	0x4576	; 0x4576 <lcdInit>
	uartInit();
    47b8:	0e 94 8a 3b 	call	0x7714	; 0x7714 <uartInit>
	midiInit();	
    47bc:	0e 94 c6 30 	call	0x618c	; 0x618c <midiInit>
	spiInit();	
    47c0:	0e 94 cb 38 	call	0x7196	; 0x7196 <spiInit>
	
	// >> ADC
	a2dInit();
    47c4:	0e 94 1c 01 	call	0x238	; 0x238 <a2dInit>
	a2dSetPrescaler(ADC_PRESCALE_DIV32);
    47c8:	85 e0       	ldi	r24, 0x05	; 5
    47ca:	0e 94 51 01 	call	0x2a2	; 0x2a2 <a2dSetPrescaler>
	a2dSetReference(ADC_REFERENCE_AVCC);
    47ce:	81 e0       	ldi	r24, 0x01	; 1
    47d0:	0e 94 68 01 	call	0x2d0	; 0x2d0 <a2dSetReference>
	a2dSetChannel(ADC_CH_ADC0);
    47d4:	80 e0       	ldi	r24, 0x00	; 0
    47d6:	0e 94 8a 01 	call	0x314	; 0x314 <a2dSetChannel>
	a2dStartConvert();		
    47da:	0e 94 a2 01 	call	0x344	; 0x344 <a2dStartConvert>
	// << ADC
	 
	timerAttach(TIMER2OUTCOMPARE_INT,disk_timerproc);
    47de:	6c e9       	ldi	r22, 0x9C	; 156
    47e0:	78 e3       	ldi	r23, 0x38	; 56
    47e2:	86 e0       	ldi	r24, 0x06	; 6
    47e4:	0e 94 7a 39 	call	0x72f4	; 0x72f4 <timerAttach>
	timerAttach(TIMER1OUTCOMPAREA_INT,addMillis);
    47e8:	6a ec       	ldi	r22, 0xCA	; 202
    47ea:	7e e1       	ldi	r23, 0x1E	; 30
    47ec:	82 e0       	ldi	r24, 0x02	; 2
    47ee:	0e 94 7a 39 	call	0x72f4	; 0x72f4 <timerAttach>
	
	
	uartSetBaudRate(MIDI_BAUD_RATE);
    47f2:	62 e1       	ldi	r22, 0x12	; 18
    47f4:	7a e7       	ldi	r23, 0x7A	; 122
    47f6:	80 e0       	ldi	r24, 0x00	; 0
    47f8:	90 e0       	ldi	r25, 0x00	; 0
    47fa:	0e 94 dd 3b 	call	0x77ba	; 0x77ba <uartSetBaudRate>
	uartSetRxHandler(rx_handler);
    47fe:	85 e1       	ldi	r24, 0x15	; 21
    4800:	9e e1       	ldi	r25, 0x1E	; 30
    4802:	0e 94 ca 3b 	call	0x7794	; 0x7794 <uartSetRxHandler>
	uartFlushReceiveBuffer();
    4806:	0e 94 8e 3c 	call	0x791c	; 0x791c <uartFlushReceiveBuffer>
	
	lcdGotoXY(0,0);	
    480a:	60 e0       	ldi	r22, 0x00	; 0
    480c:	80 e0       	ldi	r24, 0x00	; 0
    480e:	0e 94 0b 23 	call	0x4616	; 0x4616 <lcdGotoXY>
		
	if(f_mount(0,&Fatfs) != FR_OK)
    4812:	6e e2       	ldi	r22, 0x2E	; 46
    4814:	72 e0       	ldi	r23, 0x02	; 2
    4816:	80 e0       	ldi	r24, 0x00	; 0
    4818:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <f_mount>
    481c:	88 23       	and	r24, r24
    481e:	31 f0       	breq	.+12     	; 0x482c <main+0xc2>
		lcdPrintData("Mount failed",12);
    4820:	6c e0       	ldi	r22, 0x0C	; 12
    4822:	80 e7       	ldi	r24, 0x70	; 112
    4824:	90 e0       	ldi	r25, 0x00	; 0
    4826:	0e 94 8c 23 	call	0x4718	; 0x4718 <lcdPrintData>
    482a:	05 c0       	rjmp	.+10     	; 0x4836 <main+0xcc>
	else
		lcdPrintData("Mount OK",8);
    482c:	68 e0       	ldi	r22, 0x08	; 8
    482e:	8d e7       	ldi	r24, 0x7D	; 125
    4830:	90 e0       	ldi	r25, 0x00	; 0
    4832:	0e 94 8c 23 	call	0x4718	; 0x4718 <lcdPrintData>
	lcdGotoXY(0,1);		
    4836:	61 e0       	ldi	r22, 0x01	; 1
    4838:	80 e0       	ldi	r24, 0x00	; 0
    483a:	0e 94 0b 23 	call	0x4616	; 0x4616 <lcdGotoXY>
	
	if((res = f_open(&file,"Plik.mid",FA_READ)) != FR_OK)
    483e:	ce 01       	movw	r24, r28
    4840:	84 5d       	subi	r24, 0xD4	; 212
    4842:	9d 4f       	sbci	r25, 0xFD	; 253
    4844:	41 e0       	ldi	r20, 0x01	; 1
    4846:	66 e8       	ldi	r22, 0x86	; 134
    4848:	70 e0       	ldi	r23, 0x00	; 0
    484a:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <f_open>
    484e:	8d 83       	std	Y+5, r24	; 0x05
    4850:	8d 81       	ldd	r24, Y+5	; 0x05
    4852:	88 23       	and	r24, r24
    4854:	31 f0       	breq	.+12     	; 0x4862 <main+0xf8>
		lcdPrintData("Open failed",11);
    4856:	6b e0       	ldi	r22, 0x0B	; 11
    4858:	8f e8       	ldi	r24, 0x8F	; 143
    485a:	90 e0       	ldi	r25, 0x00	; 0
    485c:	0e 94 8c 23 	call	0x4718	; 0x4718 <lcdPrintData>
    4860:	05 c0       	rjmp	.+10     	; 0x486c <main+0x102>
	else
		lcdPrintData("Open OK",7);		
    4862:	67 e0       	ldi	r22, 0x07	; 7
    4864:	8b e9       	ldi	r24, 0x9B	; 155
    4866:	90 e0       	ldi	r25, 0x00	; 0
    4868:	0e 94 8c 23 	call	0x4718	; 0x4718 <lcdPrintData>
	f_close(&file);
    486c:	ce 01       	movw	r24, r28
    486e:	84 5d       	subi	r24, 0xD4	; 212
    4870:	9d 4f       	sbci	r25, 0xFD	; 253
    4872:	0e 94 00 1b 	call	0x3600	; 0x3600 <f_close>
	
	// >> MIDI
	memset(&mf,0,sizeof(struct MD_MIDIFile));
    4876:	ce 01       	movw	r24, r28
    4878:	06 96       	adiw	r24, 0x06	; 6
    487a:	4b ed       	ldi	r20, 0xDB	; 219
    487c:	51 e0       	ldi	r21, 0x01	; 1
    487e:	60 e0       	ldi	r22, 0x00	; 0
    4880:	70 e0       	ldi	r23, 0x00	; 0
    4882:	0e 94 ca 3d 	call	0x7b94	; 0x7b94 <memset>
	//initialise(&mf);
	setFilename(&mf,"Plik.mid");
    4886:	ce 01       	movw	r24, r28
    4888:	06 96       	adiw	r24, 0x06	; 6
    488a:	66 e8       	ldi	r22, 0x86	; 134
    488c:	70 e0       	ldi	r23, 0x00	; 0
    488e:	0e 94 5b 29 	call	0x52b6	; 0x52b6 <setFilename>
	
	if(loadMIDIFile(&mf) != -1){
    4892:	ce 01       	movw	r24, r28
    4894:	06 96       	adiw	r24, 0x06	; 6
    4896:	0e 94 04 28 	call	0x5008	; 0x5008 <loadMIDIFile>
    489a:	01 96       	adiw	r24, 0x01	; 1
    489c:	31 f0       	breq	.+12     	; 0x48aa <main+0x140>
		lcdPrintData("Open failed",11);
    489e:	6b e0       	ldi	r22, 0x0B	; 11
    48a0:	8f e8       	ldi	r24, 0x8F	; 143
    48a2:	90 e0       	ldi	r25, 0x00	; 0
    48a4:	0e 94 8c 23 	call	0x4718	; 0x4718 <lcdPrintData>
		while(1){}
    48a8:	ff cf       	rjmp	.-2      	; 0x48a8 <main+0x13e>
	}
	setMidiHandler(&mf,midiFun);
    48aa:	ce 01       	movw	r24, r28
    48ac:	06 96       	adiw	r24, 0x06	; 6
    48ae:	62 ef       	ldi	r22, 0xF2	; 242
    48b0:	71 e3       	ldi	r23, 0x31	; 49
    48b2:	0e 94 ab 24 	call	0x4956	; 0x4956 <setMidiHandler>
	setSysexHandler(&mf,sysexFun);
    48b6:	ce 01       	movw	r24, r28
    48b8:	06 96       	adiw	r24, 0x06	; 6
    48ba:	65 ee       	ldi	r22, 0xE5	; 229
    48bc:	71 e3       	ldi	r23, 0x31	; 49
    48be:	0e 94 dd 24 	call	0x49ba	; 0x49ba <setSysexHandler>
	setMetaHandler(&mf,metaFun);
    48c2:	ce 01       	movw	r24, r28
    48c4:	06 96       	adiw	r24, 0x06	; 6
    48c6:	68 ed       	ldi	r22, 0xD8	; 216
    48c8:	71 e3       	ldi	r23, 0x31	; 49
    48ca:	0e 94 c4 24 	call	0x4988	; 0x4988 <setMetaHandler>
	
	mf._paused = FALSE;
    48ce:	ce 01       	movw	r24, r28
    48d0:	88 5b       	subi	r24, 0xB8	; 184
    48d2:	9f 4f       	sbci	r25, 0xFF	; 255
    48d4:	fc 01       	movw	r30, r24
    48d6:	10 82       	st	Z, r1
	mf._looping = FALSE;
    48d8:	ce 01       	movw	r24, r28
    48da:	87 5b       	subi	r24, 0xB7	; 183
    48dc:	9f 4f       	sbci	r25, 0xFF	; 255
    48de:	fc 01       	movw	r30, r24
    48e0:	10 82       	st	Z, r1
	mf._tickTime = 2083;
    48e2:	83 e2       	ldi	r24, 0x23	; 35
    48e4:	98 e0       	ldi	r25, 0x08	; 8
    48e6:	a0 e0       	ldi	r26, 0x00	; 0
    48e8:	b0 e0       	ldi	r27, 0x00	; 0
    48ea:	9e 01       	movw	r18, r28
    48ec:	23 5c       	subi	r18, 0xC3	; 195
    48ee:	3f 4f       	sbci	r19, 0xFF	; 255
    48f0:	f9 01       	movw	r30, r18
    48f2:	80 83       	st	Z, r24
    48f4:	91 83       	std	Z+1, r25	; 0x01
    48f6:	a2 83       	std	Z+2, r26	; 0x02
    48f8:	b3 83       	std	Z+3, r27	; 0x03
	//synchTracks(&mf);
	resetTime();
    48fa:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <resetTime>
	while(!isEOF(&mf)){
    48fe:	1b c0       	rjmp	.+54     	; 0x4936 <main+0x1cc>
		getNextEvent(&mf);
    4900:	ce 01       	movw	r24, r28
    4902:	06 96       	adiw	r24, 0x06	; 6
    4904:	0e 94 65 27 	call	0x4eca	; 0x4eca <getNextEvent>
		if(!uartReceiveBufferIsEmpty()){
    4908:	0e 94 9a 3c 	call	0x7934	; 0x7934 <uartReceiveBufferIsEmpty>
    490c:	88 23       	and	r24, r24
    490e:	99 f4       	brne	.+38     	; 0x4936 <main+0x1cc>
				byteValue = (unsigned char)uartGetByte();
    4910:	0e 94 53 3c 	call	0x78a6	; 0x78a6 <uartGetByte>
    4914:	89 83       	std	Y+1, r24	; 0x01
				if(readMidiMessage(byteValue,&numOfBytes) == TRUE)
    4916:	ce 01       	movw	r24, r28
    4918:	8e 50       	subi	r24, 0x0E	; 14
    491a:	9e 4f       	sbci	r25, 0xFE	; 254
    491c:	bc 01       	movw	r22, r24
    491e:	89 81       	ldd	r24, Y+1	; 0x01
    4920:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <readMidiMessage>
    4924:	81 30       	cpi	r24, 0x01	; 1
    4926:	39 f4       	brne	.+14     	; 0x4936 <main+0x1cc>
					sendMidiMessage(numOfBytes);
    4928:	ce 01       	movw	r24, r28
    492a:	8e 50       	subi	r24, 0x0E	; 14
    492c:	9e 4f       	sbci	r25, 0xFE	; 254
    492e:	fc 01       	movw	r30, r24
    4930:	80 81       	ld	r24, Z
    4932:	0e 94 64 31 	call	0x62c8	; 0x62c8 <sendMidiMessage>
	mf._paused = FALSE;
	mf._looping = FALSE;
	mf._tickTime = 2083;
	//synchTracks(&mf);
	resetTime();
	while(!isEOF(&mf)){
    4936:	ce 01       	movw	r24, r28
    4938:	06 96       	adiw	r24, 0x06	; 6
    493a:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <isEOF>
    493e:	88 23       	and	r24, r24
    4940:	f9 f2       	breq	.-66     	; 0x4900 <main+0x196>
					sendMidiMessage(numOfBytes);
			
			}	
	}
	
	closeMIDIFile(&mf);
    4942:	ce 01       	movw	r24, r28
    4944:	06 96       	adiw	r24, 0x06	; 6
    4946:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <closeMIDIFile>
	lcdPrintData("Finished",8);
    494a:	68 e0       	ldi	r22, 0x08	; 8
    494c:	83 ea       	ldi	r24, 0xA3	; 163
    494e:	90 e0       	ldi	r25, 0x00	; 0
    4950:	0e 94 8c 23 	call	0x4718	; 0x4718 <lcdPrintData>
	while(1){}
    4954:	ff cf       	rjmp	.-2      	; 0x4954 <main+0x1ea>

00004956 <setMidiHandler>:


const char * getFilename(struct MD_MIDIFile *m) 
{ 
	return(m->_fileName); 
}
    4956:	cf 93       	push	r28
    4958:	df 93       	push	r29
    495a:	00 d0       	rcall	.+0      	; 0x495c <setMidiHandler+0x6>
    495c:	00 d0       	rcall	.+0      	; 0x495e <setMidiHandler+0x8>
    495e:	cd b7       	in	r28, 0x3d	; 61
    4960:	de b7       	in	r29, 0x3e	; 62
    4962:	9a 83       	std	Y+2, r25	; 0x02
    4964:	89 83       	std	Y+1, r24	; 0x01
    4966:	7c 83       	std	Y+4, r23	; 0x04
    4968:	6b 83       	std	Y+3, r22	; 0x03
    496a:	89 81       	ldd	r24, Y+1	; 0x01
    496c:	9a 81       	ldd	r25, Y+2	; 0x02
    496e:	2b 81       	ldd	r18, Y+3	; 0x03
    4970:	3c 81       	ldd	r19, Y+4	; 0x04
    4972:	fc 01       	movw	r30, r24
    4974:	31 83       	std	Z+1, r19	; 0x01
    4976:	20 83       	st	Z, r18
    4978:	00 00       	nop
    497a:	0f 90       	pop	r0
    497c:	0f 90       	pop	r0
    497e:	0f 90       	pop	r0
    4980:	0f 90       	pop	r0
    4982:	df 91       	pop	r29
    4984:	cf 91       	pop	r28
    4986:	08 95       	ret

00004988 <setMetaHandler>:
    4988:	cf 93       	push	r28
    498a:	df 93       	push	r29
    498c:	00 d0       	rcall	.+0      	; 0x498e <setMetaHandler+0x6>
    498e:	00 d0       	rcall	.+0      	; 0x4990 <setMetaHandler+0x8>
    4990:	cd b7       	in	r28, 0x3d	; 61
    4992:	de b7       	in	r29, 0x3e	; 62
    4994:	9a 83       	std	Y+2, r25	; 0x02
    4996:	89 83       	std	Y+1, r24	; 0x01
    4998:	7c 83       	std	Y+4, r23	; 0x04
    499a:	6b 83       	std	Y+3, r22	; 0x03
    499c:	89 81       	ldd	r24, Y+1	; 0x01
    499e:	9a 81       	ldd	r25, Y+2	; 0x02
    49a0:	2b 81       	ldd	r18, Y+3	; 0x03
    49a2:	3c 81       	ldd	r19, Y+4	; 0x04
    49a4:	fc 01       	movw	r30, r24
    49a6:	35 83       	std	Z+5, r19	; 0x05
    49a8:	24 83       	std	Z+4, r18	; 0x04
    49aa:	00 00       	nop
    49ac:	0f 90       	pop	r0
    49ae:	0f 90       	pop	r0
    49b0:	0f 90       	pop	r0
    49b2:	0f 90       	pop	r0
    49b4:	df 91       	pop	r29
    49b6:	cf 91       	pop	r28
    49b8:	08 95       	ret

000049ba <setSysexHandler>:
    49ba:	cf 93       	push	r28
    49bc:	df 93       	push	r29
    49be:	00 d0       	rcall	.+0      	; 0x49c0 <setSysexHandler+0x6>
    49c0:	00 d0       	rcall	.+0      	; 0x49c2 <setSysexHandler+0x8>
    49c2:	cd b7       	in	r28, 0x3d	; 61
    49c4:	de b7       	in	r29, 0x3e	; 62
    49c6:	9a 83       	std	Y+2, r25	; 0x02
    49c8:	89 83       	std	Y+1, r24	; 0x01
    49ca:	7c 83       	std	Y+4, r23	; 0x04
    49cc:	6b 83       	std	Y+3, r22	; 0x03
    49ce:	89 81       	ldd	r24, Y+1	; 0x01
    49d0:	9a 81       	ldd	r25, Y+2	; 0x02
    49d2:	2b 81       	ldd	r18, Y+3	; 0x03
    49d4:	3c 81       	ldd	r19, Y+4	; 0x04
    49d6:	fc 01       	movw	r30, r24
    49d8:	33 83       	std	Z+3, r19	; 0x03
    49da:	22 83       	std	Z+2, r18	; 0x02
    49dc:	00 00       	nop
    49de:	0f 90       	pop	r0
    49e0:	0f 90       	pop	r0
    49e2:	0f 90       	pop	r0
    49e4:	0f 90       	pop	r0
    49e6:	df 91       	pop	r29
    49e8:	cf 91       	pop	r28
    49ea:	08 95       	ret

000049ec <synchTracks>:
    49ec:	cf 93       	push	r28
    49ee:	df 93       	push	r29
    49f0:	00 d0       	rcall	.+0      	; 0x49f2 <synchTracks+0x6>
    49f2:	1f 92       	push	r1
    49f4:	cd b7       	in	r28, 0x3d	; 61
    49f6:	de b7       	in	r29, 0x3e	; 62
    49f8:	9b 83       	std	Y+3, r25	; 0x03
    49fa:	8a 83       	std	Y+2, r24	; 0x02
    49fc:	19 82       	std	Y+1, r1	; 0x01
    49fe:	14 c0       	rjmp	.+40     	; 0x4a28 <synchTracks+0x3c>
    4a00:	89 81       	ldd	r24, Y+1	; 0x01
    4a02:	28 2f       	mov	r18, r24
    4a04:	30 e0       	ldi	r19, 0x00	; 0
    4a06:	49 e1       	ldi	r20, 0x19	; 25
    4a08:	42 9f       	mul	r20, r18
    4a0a:	c0 01       	movw	r24, r0
    4a0c:	43 9f       	mul	r20, r19
    4a0e:	90 0d       	add	r25, r0
    4a10:	11 24       	eor	r1, r1
    4a12:	85 5b       	subi	r24, 0xB5	; 181
    4a14:	9f 4f       	sbci	r25, 0xFF	; 255
    4a16:	2a 81       	ldd	r18, Y+2	; 0x02
    4a18:	3b 81       	ldd	r19, Y+3	; 0x03
    4a1a:	82 0f       	add	r24, r18
    4a1c:	93 1f       	adc	r25, r19
    4a1e:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <syncTime>
    4a22:	89 81       	ldd	r24, Y+1	; 0x01
    4a24:	8f 5f       	subi	r24, 0xFF	; 255
    4a26:	89 83       	std	Y+1, r24	; 0x01
    4a28:	8a 81       	ldd	r24, Y+2	; 0x02
    4a2a:	9b 81       	ldd	r25, Y+3	; 0x03
    4a2c:	fc 01       	movw	r30, r24
    4a2e:	94 a9       	ldd	r25, Z+52	; 0x34
    4a30:	89 81       	ldd	r24, Y+1	; 0x01
    4a32:	89 17       	cp	r24, r25
    4a34:	28 f3       	brcs	.-54     	; 0x4a00 <synchTracks+0x14>
    4a36:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <getMicros>
    4a3a:	dc 01       	movw	r26, r24
    4a3c:	cb 01       	movw	r24, r22
    4a3e:	2a 81       	ldd	r18, Y+2	; 0x02
    4a40:	3b 81       	ldd	r19, Y+3	; 0x03
    4a42:	23 5c       	subi	r18, 0xC3	; 195
    4a44:	3f 4f       	sbci	r19, 0xFF	; 255
    4a46:	f9 01       	movw	r30, r18
    4a48:	80 83       	st	Z, r24
    4a4a:	91 83       	std	Z+1, r25	; 0x01
    4a4c:	a2 83       	std	Z+2, r26	; 0x02
    4a4e:	b3 83       	std	Z+3, r27	; 0x03
    4a50:	00 00       	nop
    4a52:	0f 90       	pop	r0
    4a54:	0f 90       	pop	r0
    4a56:	0f 90       	pop	r0
    4a58:	df 91       	pop	r29
    4a5a:	cf 91       	pop	r28
    4a5c:	08 95       	ret

00004a5e <closeMIDIFile>:
    4a5e:	cf 93       	push	r28
    4a60:	df 93       	push	r29
    4a62:	00 d0       	rcall	.+0      	; 0x4a64 <closeMIDIFile+0x6>
    4a64:	1f 92       	push	r1
    4a66:	cd b7       	in	r28, 0x3d	; 61
    4a68:	de b7       	in	r29, 0x3e	; 62
    4a6a:	9b 83       	std	Y+3, r25	; 0x03
    4a6c:	8a 83       	std	Y+2, r24	; 0x02
    4a6e:	19 82       	std	Y+1, r1	; 0x01
    4a70:	14 c0       	rjmp	.+40     	; 0x4a9a <closeMIDIFile+0x3c>
    4a72:	89 81       	ldd	r24, Y+1	; 0x01
    4a74:	28 2f       	mov	r18, r24
    4a76:	30 e0       	ldi	r19, 0x00	; 0
    4a78:	49 e1       	ldi	r20, 0x19	; 25
    4a7a:	42 9f       	mul	r20, r18
    4a7c:	c0 01       	movw	r24, r0
    4a7e:	43 9f       	mul	r20, r19
    4a80:	90 0d       	add	r25, r0
    4a82:	11 24       	eor	r1, r1
    4a84:	85 5b       	subi	r24, 0xB5	; 181
    4a86:	9f 4f       	sbci	r25, 0xFF	; 255
    4a88:	2a 81       	ldd	r18, Y+2	; 0x02
    4a8a:	3b 81       	ldd	r19, Y+3	; 0x03
    4a8c:	82 0f       	add	r24, r18
    4a8e:	93 1f       	adc	r25, r19
    4a90:	0e 94 4a 2a 	call	0x5494	; 0x5494 <closeTrack>
    4a94:	89 81       	ldd	r24, Y+1	; 0x01
    4a96:	8f 5f       	subi	r24, 0xFF	; 255
    4a98:	89 83       	std	Y+1, r24	; 0x01
    4a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a9c:	9b 81       	ldd	r25, Y+3	; 0x03
    4a9e:	fc 01       	movw	r30, r24
    4aa0:	94 a9       	ldd	r25, Z+52	; 0x34
    4aa2:	89 81       	ldd	r24, Y+1	; 0x01
    4aa4:	89 17       	cp	r24, r25
    4aa6:	28 f3       	brcs	.-54     	; 0x4a72 <closeMIDIFile+0x14>
    4aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    4aaa:	9b 81       	ldd	r25, Y+3	; 0x03
    4aac:	fc 01       	movw	r30, r24
    4aae:	14 aa       	std	Z+52, r1	; 0x34
    4ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ab2:	9b 81       	ldd	r25, Y+3	; 0x03
    4ab4:	8f 5b       	subi	r24, 0xBF	; 191
    4ab6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ab8:	fc 01       	movw	r30, r24
    4aba:	10 82       	st	Z, r1
    4abc:	8a 81       	ldd	r24, Y+2	; 0x02
    4abe:	9b 81       	ldd	r25, Y+3	; 0x03
    4ac0:	8e 5b       	subi	r24, 0xBE	; 190
    4ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ac4:	fc 01       	movw	r30, r24
    4ac6:	10 82       	st	Z, r1
    4ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    4aca:	9b 81       	ldd	r25, Y+3	; 0x03
    4acc:	6c ea       	ldi	r22, 0xAC	; 172
    4ace:	70 e0       	ldi	r23, 0x00	; 0
    4ad0:	0e 94 5b 29 	call	0x52b6	; 0x52b6 <setFilename>
    4ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ad6:	9b 81       	ldd	r25, Y+3	; 0x03
    4ad8:	06 96       	adiw	r24, 0x06	; 6
    4ada:	0e 94 00 1b 	call	0x3600	; 0x3600 <f_close>
    4ade:	00 00       	nop
    4ae0:	0f 90       	pop	r0
    4ae2:	0f 90       	pop	r0
    4ae4:	0f 90       	pop	r0
    4ae6:	df 91       	pop	r29
    4ae8:	cf 91       	pop	r28
    4aea:	08 95       	ret

00004aec <setTimeSignature>:
    4aec:	cf 93       	push	r28
    4aee:	df 93       	push	r29
    4af0:	00 d0       	rcall	.+0      	; 0x4af2 <setTimeSignature+0x6>
    4af2:	00 d0       	rcall	.+0      	; 0x4af4 <setTimeSignature+0x8>
    4af4:	cd b7       	in	r28, 0x3d	; 61
    4af6:	de b7       	in	r29, 0x3e	; 62
    4af8:	9a 83       	std	Y+2, r25	; 0x02
    4afa:	89 83       	std	Y+1, r24	; 0x01
    4afc:	6b 83       	std	Y+3, r22	; 0x03
    4afe:	4c 83       	std	Y+4, r20	; 0x04
    4b00:	89 81       	ldd	r24, Y+1	; 0x01
    4b02:	9a 81       	ldd	r25, Y+2	; 0x02
    4b04:	88 5b       	subi	r24, 0xB8	; 184
    4b06:	9f 4f       	sbci	r25, 0xFF	; 255
    4b08:	2b 81       	ldd	r18, Y+3	; 0x03
    4b0a:	fc 01       	movw	r30, r24
    4b0c:	20 83       	st	Z, r18
    4b0e:	89 81       	ldd	r24, Y+1	; 0x01
    4b10:	9a 81       	ldd	r25, Y+2	; 0x02
    4b12:	87 5b       	subi	r24, 0xB7	; 183
    4b14:	9f 4f       	sbci	r25, 0xFF	; 255
    4b16:	2c 81       	ldd	r18, Y+4	; 0x04
    4b18:	fc 01       	movw	r30, r24
    4b1a:	20 83       	st	Z, r18
    4b1c:	89 81       	ldd	r24, Y+1	; 0x01
    4b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    4b20:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <calcTickTime>
    4b24:	00 00       	nop
    4b26:	0f 90       	pop	r0
    4b28:	0f 90       	pop	r0
    4b2a:	0f 90       	pop	r0
    4b2c:	0f 90       	pop	r0
    4b2e:	df 91       	pop	r29
    4b30:	cf 91       	pop	r28
    4b32:	08 95       	ret

00004b34 <setMicrosecondPerQuarterNote>:
    4b34:	cf 93       	push	r28
    4b36:	df 93       	push	r29
    4b38:	00 d0       	rcall	.+0      	; 0x4b3a <setMicrosecondPerQuarterNote+0x6>
    4b3a:	00 d0       	rcall	.+0      	; 0x4b3c <setMicrosecondPerQuarterNote+0x8>
    4b3c:	00 d0       	rcall	.+0      	; 0x4b3e <setMicrosecondPerQuarterNote+0xa>
    4b3e:	cd b7       	in	r28, 0x3d	; 61
    4b40:	de b7       	in	r29, 0x3e	; 62
    4b42:	9a 83       	std	Y+2, r25	; 0x02
    4b44:	89 83       	std	Y+1, r24	; 0x01
    4b46:	4b 83       	std	Y+3, r20	; 0x03
    4b48:	5c 83       	std	Y+4, r21	; 0x04
    4b4a:	6d 83       	std	Y+5, r22	; 0x05
    4b4c:	7e 83       	std	Y+6, r23	; 0x06
    4b4e:	80 e0       	ldi	r24, 0x00	; 0
    4b50:	97 e8       	ldi	r25, 0x87	; 135
    4b52:	a3 e9       	ldi	r26, 0x93	; 147
    4b54:	b3 e0       	ldi	r27, 0x03	; 3
    4b56:	2b 81       	ldd	r18, Y+3	; 0x03
    4b58:	3c 81       	ldd	r19, Y+4	; 0x04
    4b5a:	4d 81       	ldd	r20, Y+5	; 0x05
    4b5c:	5e 81       	ldd	r21, Y+6	; 0x06
    4b5e:	bc 01       	movw	r22, r24
    4b60:	cd 01       	movw	r24, r26
    4b62:	0e 94 69 3d 	call	0x7ad2	; 0x7ad2 <__udivmodsi4>
    4b66:	da 01       	movw	r26, r20
    4b68:	c9 01       	movw	r24, r18
    4b6a:	9c 01       	movw	r18, r24
    4b6c:	89 81       	ldd	r24, Y+1	; 0x01
    4b6e:	9a 81       	ldd	r25, Y+2	; 0x02
    4b70:	8c 5b       	subi	r24, 0xBC	; 188
    4b72:	9f 4f       	sbci	r25, 0xFF	; 255
    4b74:	fc 01       	movw	r30, r24
    4b76:	31 83       	std	Z+1, r19	; 0x01
    4b78:	20 83       	st	Z, r18
    4b7a:	89 81       	ldd	r24, Y+1	; 0x01
    4b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    4b7e:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <calcTickTime>
    4b82:	00 00       	nop
    4b84:	26 96       	adiw	r28, 0x06	; 6
    4b86:	0f b6       	in	r0, 0x3f	; 63
    4b88:	f8 94       	cli
    4b8a:	de bf       	out	0x3e, r29	; 62
    4b8c:	0f be       	out	0x3f, r0	; 63
    4b8e:	cd bf       	out	0x3d, r28	; 61
    4b90:	df 91       	pop	r29
    4b92:	cf 91       	pop	r28
    4b94:	08 95       	ret

00004b96 <calcTickTime>:
    4b96:	cf 93       	push	r28
    4b98:	df 93       	push	r29
    4b9a:	00 d0       	rcall	.+0      	; 0x4b9c <calcTickTime+0x6>
    4b9c:	cd b7       	in	r28, 0x3d	; 61
    4b9e:	de b7       	in	r29, 0x3e	; 62
    4ba0:	9a 83       	std	Y+2, r25	; 0x02
    4ba2:	89 83       	std	Y+1, r24	; 0x01
    4ba4:	89 81       	ldd	r24, Y+1	; 0x01
    4ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ba8:	8c 5b       	subi	r24, 0xBC	; 188
    4baa:	9f 4f       	sbci	r25, 0xFF	; 255
    4bac:	fc 01       	movw	r30, r24
    4bae:	80 81       	ld	r24, Z
    4bb0:	91 81       	ldd	r25, Z+1	; 0x01
    4bb2:	29 81       	ldd	r18, Y+1	; 0x01
    4bb4:	3a 81       	ldd	r19, Y+2	; 0x02
    4bb6:	2a 5b       	subi	r18, 0xBA	; 186
    4bb8:	3f 4f       	sbci	r19, 0xFF	; 255
    4bba:	f9 01       	movw	r30, r18
    4bbc:	20 81       	ld	r18, Z
    4bbe:	31 81       	ldd	r19, Z+1	; 0x01
    4bc0:	82 0f       	add	r24, r18
    4bc2:	93 1f       	adc	r25, r19
    4bc4:	89 2b       	or	r24, r25
    4bc6:	09 f4       	brne	.+2      	; 0x4bca <calcTickTime+0x34>
    4bc8:	51 c0       	rjmp	.+162    	; 0x4c6c <calcTickTime+0xd6>
    4bca:	89 81       	ldd	r24, Y+1	; 0x01
    4bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    4bce:	fc 01       	movw	r30, r24
    4bd0:	85 a9       	ldd	r24, Z+53	; 0x35
    4bd2:	96 a9       	ldd	r25, Z+54	; 0x36
    4bd4:	89 2b       	or	r24, r25
    4bd6:	09 f4       	brne	.+2      	; 0x4bda <calcTickTime+0x44>
    4bd8:	49 c0       	rjmp	.+146    	; 0x4c6c <calcTickTime+0xd6>
    4bda:	89 81       	ldd	r24, Y+1	; 0x01
    4bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    4bde:	87 5b       	subi	r24, 0xB7	; 183
    4be0:	9f 4f       	sbci	r25, 0xFF	; 255
    4be2:	fc 01       	movw	r30, r24
    4be4:	80 81       	ld	r24, Z
    4be6:	88 23       	and	r24, r24
    4be8:	09 f4       	brne	.+2      	; 0x4bec <calcTickTime+0x56>
    4bea:	40 c0       	rjmp	.+128    	; 0x4c6c <calcTickTime+0xd6>
    4bec:	89 81       	ldd	r24, Y+1	; 0x01
    4bee:	9a 81       	ldd	r25, Y+2	; 0x02
    4bf0:	8c 5b       	subi	r24, 0xBC	; 188
    4bf2:	9f 4f       	sbci	r25, 0xFF	; 255
    4bf4:	fc 01       	movw	r30, r24
    4bf6:	80 81       	ld	r24, Z
    4bf8:	91 81       	ldd	r25, Z+1	; 0x01
    4bfa:	29 81       	ldd	r18, Y+1	; 0x01
    4bfc:	3a 81       	ldd	r19, Y+2	; 0x02
    4bfe:	2a 5b       	subi	r18, 0xBA	; 186
    4c00:	3f 4f       	sbci	r19, 0xFF	; 255
    4c02:	f9 01       	movw	r30, r18
    4c04:	20 81       	ld	r18, Z
    4c06:	31 81       	ldd	r19, Z+1	; 0x01
    4c08:	82 0f       	add	r24, r18
    4c0a:	93 1f       	adc	r25, r19
    4c0c:	9c 01       	movw	r18, r24
    4c0e:	40 e0       	ldi	r20, 0x00	; 0
    4c10:	50 e0       	ldi	r21, 0x00	; 0
    4c12:	80 e0       	ldi	r24, 0x00	; 0
    4c14:	97 e8       	ldi	r25, 0x87	; 135
    4c16:	a3 e9       	ldi	r26, 0x93	; 147
    4c18:	b3 e0       	ldi	r27, 0x03	; 3
    4c1a:	bc 01       	movw	r22, r24
    4c1c:	cd 01       	movw	r24, r26
    4c1e:	0e 94 8b 3d 	call	0x7b16	; 0x7b16 <__divmodsi4>
    4c22:	da 01       	movw	r26, r20
    4c24:	c9 01       	movw	r24, r18
    4c26:	29 81       	ldd	r18, Y+1	; 0x01
    4c28:	3a 81       	ldd	r19, Y+2	; 0x02
    4c2a:	f9 01       	movw	r30, r18
    4c2c:	87 ab       	std	Z+55, r24	; 0x37
    4c2e:	90 af       	std	Z+56, r25	; 0x38
    4c30:	a1 af       	std	Z+57, r26	; 0x39
    4c32:	b2 af       	std	Z+58, r27	; 0x3a
    4c34:	89 81       	ldd	r24, Y+1	; 0x01
    4c36:	9a 81       	ldd	r25, Y+2	; 0x02
    4c38:	fc 01       	movw	r30, r24
    4c3a:	87 a9       	ldd	r24, Z+55	; 0x37
    4c3c:	90 ad       	ldd	r25, Z+56	; 0x38
    4c3e:	a1 ad       	ldd	r26, Z+57	; 0x39
    4c40:	b2 ad       	ldd	r27, Z+58	; 0x3a
    4c42:	29 81       	ldd	r18, Y+1	; 0x01
    4c44:	3a 81       	ldd	r19, Y+2	; 0x02
    4c46:	f9 01       	movw	r30, r18
    4c48:	25 a9       	ldd	r18, Z+53	; 0x35
    4c4a:	36 a9       	ldd	r19, Z+54	; 0x36
    4c4c:	99 01       	movw	r18, r18
    4c4e:	40 e0       	ldi	r20, 0x00	; 0
    4c50:	50 e0       	ldi	r21, 0x00	; 0
    4c52:	bc 01       	movw	r22, r24
    4c54:	cd 01       	movw	r24, r26
    4c56:	0e 94 69 3d 	call	0x7ad2	; 0x7ad2 <__udivmodsi4>
    4c5a:	da 01       	movw	r26, r20
    4c5c:	c9 01       	movw	r24, r18
    4c5e:	29 81       	ldd	r18, Y+1	; 0x01
    4c60:	3a 81       	ldd	r19, Y+2	; 0x02
    4c62:	f9 01       	movw	r30, r18
    4c64:	87 ab       	std	Z+55, r24	; 0x37
    4c66:	90 af       	std	Z+56, r25	; 0x38
    4c68:	a1 af       	std	Z+57, r26	; 0x39
    4c6a:	b2 af       	std	Z+58, r27	; 0x3a
    4c6c:	00 00       	nop
    4c6e:	0f 90       	pop	r0
    4c70:	0f 90       	pop	r0
    4c72:	df 91       	pop	r29
    4c74:	cf 91       	pop	r28
    4c76:	08 95       	ret

00004c78 <isEOF>:
    4c78:	cf 93       	push	r28
    4c7a:	df 93       	push	r29
    4c7c:	00 d0       	rcall	.+0      	; 0x4c7e <isEOF+0x6>
    4c7e:	00 d0       	rcall	.+0      	; 0x4c80 <isEOF+0x8>
    4c80:	cd b7       	in	r28, 0x3d	; 61
    4c82:	de b7       	in	r29, 0x3e	; 62
    4c84:	9c 83       	std	Y+4, r25	; 0x04
    4c86:	8b 83       	std	Y+3, r24	; 0x03
    4c88:	81 e0       	ldi	r24, 0x01	; 1
    4c8a:	89 83       	std	Y+1, r24	; 0x01
    4c8c:	1a 82       	std	Y+2, r1	; 0x02
    4c8e:	1f c0       	rjmp	.+62     	; 0x4cce <isEOF+0x56>
    4c90:	8a 81       	ldd	r24, Y+2	; 0x02
    4c92:	28 2f       	mov	r18, r24
    4c94:	30 e0       	ldi	r19, 0x00	; 0
    4c96:	49 e1       	ldi	r20, 0x19	; 25
    4c98:	42 9f       	mul	r20, r18
    4c9a:	c0 01       	movw	r24, r0
    4c9c:	43 9f       	mul	r20, r19
    4c9e:	90 0d       	add	r25, r0
    4ca0:	11 24       	eor	r1, r1
    4ca2:	85 5b       	subi	r24, 0xB5	; 181
    4ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    4ca6:	2b 81       	ldd	r18, Y+3	; 0x03
    4ca8:	3c 81       	ldd	r19, Y+4	; 0x04
    4caa:	82 0f       	add	r24, r18
    4cac:	93 1f       	adc	r25, r19
    4cae:	0e 94 5b 2a 	call	0x54b6	; 0x54b6 <getEndOfTrack>
    4cb2:	88 23       	and	r24, r24
    4cb4:	31 f0       	breq	.+12     	; 0x4cc2 <isEOF+0x4a>
    4cb6:	89 81       	ldd	r24, Y+1	; 0x01
    4cb8:	88 23       	and	r24, r24
    4cba:	19 f0       	breq	.+6      	; 0x4cc2 <isEOF+0x4a>
    4cbc:	81 e0       	ldi	r24, 0x01	; 1
    4cbe:	90 e0       	ldi	r25, 0x00	; 0
    4cc0:	02 c0       	rjmp	.+4      	; 0x4cc6 <isEOF+0x4e>
    4cc2:	80 e0       	ldi	r24, 0x00	; 0
    4cc4:	90 e0       	ldi	r25, 0x00	; 0
    4cc6:	89 83       	std	Y+1, r24	; 0x01
    4cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    4cca:	8f 5f       	subi	r24, 0xFF	; 255
    4ccc:	8a 83       	std	Y+2, r24	; 0x02
    4cce:	8b 81       	ldd	r24, Y+3	; 0x03
    4cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    4cd2:	fc 01       	movw	r30, r24
    4cd4:	94 a9       	ldd	r25, Z+52	; 0x34
    4cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    4cd8:	89 17       	cp	r24, r25
    4cda:	18 f4       	brcc	.+6      	; 0x4ce2 <isEOF+0x6a>
    4cdc:	89 81       	ldd	r24, Y+1	; 0x01
    4cde:	88 23       	and	r24, r24
    4ce0:	b9 f6       	brne	.-82     	; 0x4c90 <isEOF+0x18>
    4ce2:	89 81       	ldd	r24, Y+1	; 0x01
    4ce4:	88 23       	and	r24, r24
    4ce6:	69 f0       	breq	.+26     	; 0x4d02 <isEOF+0x8a>
    4ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    4cea:	9c 81       	ldd	r25, Y+4	; 0x04
    4cec:	8d 5b       	subi	r24, 0xBD	; 189
    4cee:	9f 4f       	sbci	r25, 0xFF	; 255
    4cf0:	fc 01       	movw	r30, r24
    4cf2:	80 81       	ld	r24, Z
    4cf4:	88 23       	and	r24, r24
    4cf6:	29 f0       	breq	.+10     	; 0x4d02 <isEOF+0x8a>
    4cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    4cfa:	9c 81       	ldd	r25, Y+4	; 0x04
    4cfc:	0e 94 89 26 	call	0x4d12	; 0x4d12 <restart>
    4d00:	19 82       	std	Y+1, r1	; 0x01
    4d02:	89 81       	ldd	r24, Y+1	; 0x01
    4d04:	0f 90       	pop	r0
    4d06:	0f 90       	pop	r0
    4d08:	0f 90       	pop	r0
    4d0a:	0f 90       	pop	r0
    4d0c:	df 91       	pop	r29
    4d0e:	cf 91       	pop	r28
    4d10:	08 95       	ret

00004d12 <restart>:
    4d12:	cf 93       	push	r28
    4d14:	df 93       	push	r29
    4d16:	00 d0       	rcall	.+0      	; 0x4d18 <restart+0x6>
    4d18:	1f 92       	push	r1
    4d1a:	cd b7       	in	r28, 0x3d	; 61
    4d1c:	de b7       	in	r29, 0x3e	; 62
    4d1e:	9b 83       	std	Y+3, r25	; 0x03
    4d20:	8a 83       	std	Y+2, r24	; 0x02
    4d22:	8a 81       	ldd	r24, Y+2	; 0x02
    4d24:	9b 81       	ldd	r25, Y+3	; 0x03
    4d26:	8d 5b       	subi	r24, 0xBD	; 189
    4d28:	9f 4f       	sbci	r25, 0xFF	; 255
    4d2a:	fc 01       	movw	r30, r24
    4d2c:	80 81       	ld	r24, Z
    4d2e:	88 23       	and	r24, r24
    4d30:	49 f0       	breq	.+18     	; 0x4d44 <restart+0x32>
    4d32:	8a 81       	ldd	r24, Y+2	; 0x02
    4d34:	9b 81       	ldd	r25, Y+3	; 0x03
    4d36:	fc 01       	movw	r30, r24
    4d38:	84 a9       	ldd	r24, Z+52	; 0x34
    4d3a:	82 30       	cpi	r24, 0x02	; 2
    4d3c:	18 f0       	brcs	.+6      	; 0x4d44 <restart+0x32>
    4d3e:	81 e0       	ldi	r24, 0x01	; 1
    4d40:	90 e0       	ldi	r25, 0x00	; 0
    4d42:	02 c0       	rjmp	.+4      	; 0x4d48 <restart+0x36>
    4d44:	80 e0       	ldi	r24, 0x00	; 0
    4d46:	90 e0       	ldi	r25, 0x00	; 0
    4d48:	89 83       	std	Y+1, r24	; 0x01
    4d4a:	14 c0       	rjmp	.+40     	; 0x4d74 <restart+0x62>
    4d4c:	89 81       	ldd	r24, Y+1	; 0x01
    4d4e:	28 2f       	mov	r18, r24
    4d50:	30 e0       	ldi	r19, 0x00	; 0
    4d52:	49 e1       	ldi	r20, 0x19	; 25
    4d54:	42 9f       	mul	r20, r18
    4d56:	c0 01       	movw	r24, r0
    4d58:	43 9f       	mul	r20, r19
    4d5a:	90 0d       	add	r25, r0
    4d5c:	11 24       	eor	r1, r1
    4d5e:	85 5b       	subi	r24, 0xB5	; 181
    4d60:	9f 4f       	sbci	r25, 0xFF	; 255
    4d62:	2a 81       	ldd	r18, Y+2	; 0x02
    4d64:	3b 81       	ldd	r19, Y+3	; 0x03
    4d66:	82 0f       	add	r24, r18
    4d68:	93 1f       	adc	r25, r19
    4d6a:	0e 94 7f 2a 	call	0x54fe	; 0x54fe <restartTrack>
    4d6e:	89 81       	ldd	r24, Y+1	; 0x01
    4d70:	8f 5f       	subi	r24, 0xFF	; 255
    4d72:	89 83       	std	Y+1, r24	; 0x01
    4d74:	8a 81       	ldd	r24, Y+2	; 0x02
    4d76:	9b 81       	ldd	r25, Y+3	; 0x03
    4d78:	fc 01       	movw	r30, r24
    4d7a:	94 a9       	ldd	r25, Z+52	; 0x34
    4d7c:	89 81       	ldd	r24, Y+1	; 0x01
    4d7e:	89 17       	cp	r24, r25
    4d80:	28 f3       	brcs	.-54     	; 0x4d4c <restart+0x3a>
    4d82:	8a 81       	ldd	r24, Y+2	; 0x02
    4d84:	9b 81       	ldd	r25, Y+3	; 0x03
    4d86:	8f 5b       	subi	r24, 0xBF	; 191
    4d88:	9f 4f       	sbci	r25, 0xFF	; 255
    4d8a:	fc 01       	movw	r30, r24
    4d8c:	10 82       	st	Z, r1
    4d8e:	00 00       	nop
    4d90:	0f 90       	pop	r0
    4d92:	0f 90       	pop	r0
    4d94:	0f 90       	pop	r0
    4d96:	df 91       	pop	r29
    4d98:	cf 91       	pop	r28
    4d9a:	08 95       	ret

00004d9c <tickClock>:
    4d9c:	ef 92       	push	r14
    4d9e:	ff 92       	push	r15
    4da0:	0f 93       	push	r16
    4da2:	1f 93       	push	r17
    4da4:	cf 93       	push	r28
    4da6:	df 93       	push	r29
    4da8:	cd b7       	in	r28, 0x3d	; 61
    4daa:	de b7       	in	r29, 0x3e	; 62
    4dac:	2c 97       	sbiw	r28, 0x0c	; 12
    4dae:	0f b6       	in	r0, 0x3f	; 63
    4db0:	f8 94       	cli
    4db2:	de bf       	out	0x3e, r29	; 62
    4db4:	0f be       	out	0x3f, r0	; 63
    4db6:	cd bf       	out	0x3d, r28	; 61
    4db8:	9c 87       	std	Y+12, r25	; 0x0c
    4dba:	8b 87       	std	Y+11, r24	; 0x0b
    4dbc:	1a 82       	std	Y+2, r1	; 0x02
    4dbe:	19 82       	std	Y+1, r1	; 0x01
    4dc0:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <getMicros>
    4dc4:	dc 01       	movw	r26, r24
    4dc6:	cb 01       	movw	r24, r22
    4dc8:	8b 83       	std	Y+3, r24	; 0x03
    4dca:	9c 83       	std	Y+4, r25	; 0x04
    4dcc:	ad 83       	std	Y+5, r26	; 0x05
    4dce:	be 83       	std	Y+6, r27	; 0x06
    4dd0:	8b 85       	ldd	r24, Y+11	; 0x0b
    4dd2:	9c 85       	ldd	r25, Y+12	; 0x0c
    4dd4:	fc 01       	movw	r30, r24
    4dd6:	83 ad       	ldd	r24, Z+59	; 0x3b
    4dd8:	94 ad       	ldd	r25, Z+60	; 0x3c
    4dda:	9c 01       	movw	r18, r24
    4ddc:	40 e0       	ldi	r20, 0x00	; 0
    4dde:	50 e0       	ldi	r21, 0x00	; 0
    4de0:	8b 81       	ldd	r24, Y+3	; 0x03
    4de2:	9c 81       	ldd	r25, Y+4	; 0x04
    4de4:	ad 81       	ldd	r26, Y+5	; 0x05
    4de6:	be 81       	ldd	r27, Y+6	; 0x06
    4de8:	28 0f       	add	r18, r24
    4dea:	39 1f       	adc	r19, r25
    4dec:	4a 1f       	adc	r20, r26
    4dee:	5b 1f       	adc	r21, r27
    4df0:	8b 85       	ldd	r24, Y+11	; 0x0b
    4df2:	9c 85       	ldd	r25, Y+12	; 0x0c
    4df4:	cd 96       	adiw	r24, 0x3d	; 61
    4df6:	fc 01       	movw	r30, r24
    4df8:	80 81       	ld	r24, Z
    4dfa:	91 81       	ldd	r25, Z+1	; 0x01
    4dfc:	a2 81       	ldd	r26, Z+2	; 0x02
    4dfe:	b3 81       	ldd	r27, Z+3	; 0x03
    4e00:	79 01       	movw	r14, r18
    4e02:	8a 01       	movw	r16, r20
    4e04:	e8 1a       	sub	r14, r24
    4e06:	f9 0a       	sbc	r15, r25
    4e08:	0a 0b       	sbc	r16, r26
    4e0a:	1b 0b       	sbc	r17, r27
    4e0c:	d8 01       	movw	r26, r16
    4e0e:	c7 01       	movw	r24, r14
    4e10:	8f 83       	std	Y+7, r24	; 0x07
    4e12:	98 87       	std	Y+8, r25	; 0x08
    4e14:	a9 87       	std	Y+9, r26	; 0x09
    4e16:	ba 87       	std	Y+10, r27	; 0x0a
    4e18:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e1a:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e1c:	fc 01       	movw	r30, r24
    4e1e:	27 a9       	ldd	r18, Z+55	; 0x37
    4e20:	30 ad       	ldd	r19, Z+56	; 0x38
    4e22:	41 ad       	ldd	r20, Z+57	; 0x39
    4e24:	52 ad       	ldd	r21, Z+58	; 0x3a
    4e26:	8f 81       	ldd	r24, Y+7	; 0x07
    4e28:	98 85       	ldd	r25, Y+8	; 0x08
    4e2a:	a9 85       	ldd	r26, Y+9	; 0x09
    4e2c:	ba 85       	ldd	r27, Y+10	; 0x0a
    4e2e:	82 17       	cp	r24, r18
    4e30:	93 07       	cpc	r25, r19
    4e32:	a4 07       	cpc	r26, r20
    4e34:	b5 07       	cpc	r27, r21
    4e36:	d0 f1       	brcs	.+116    	; 0x4eac <tickClock+0x110>
    4e38:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e3a:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e3c:	fc 01       	movw	r30, r24
    4e3e:	27 a9       	ldd	r18, Z+55	; 0x37
    4e40:	30 ad       	ldd	r19, Z+56	; 0x38
    4e42:	41 ad       	ldd	r20, Z+57	; 0x39
    4e44:	52 ad       	ldd	r21, Z+58	; 0x3a
    4e46:	8f 81       	ldd	r24, Y+7	; 0x07
    4e48:	98 85       	ldd	r25, Y+8	; 0x08
    4e4a:	a9 85       	ldd	r26, Y+9	; 0x09
    4e4c:	ba 85       	ldd	r27, Y+10	; 0x0a
    4e4e:	bc 01       	movw	r22, r24
    4e50:	cd 01       	movw	r24, r26
    4e52:	0e 94 69 3d 	call	0x7ad2	; 0x7ad2 <__udivmodsi4>
    4e56:	da 01       	movw	r26, r20
    4e58:	c9 01       	movw	r24, r18
    4e5a:	9a 83       	std	Y+2, r25	; 0x02
    4e5c:	89 83       	std	Y+1, r24	; 0x01
    4e5e:	2f 81       	ldd	r18, Y+7	; 0x07
    4e60:	38 85       	ldd	r19, Y+8	; 0x08
    4e62:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e64:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e66:	fc 01       	movw	r30, r24
    4e68:	87 a9       	ldd	r24, Z+55	; 0x37
    4e6a:	90 ad       	ldd	r25, Z+56	; 0x38
    4e6c:	a1 ad       	ldd	r26, Z+57	; 0x39
    4e6e:	b2 ad       	ldd	r27, Z+58	; 0x3a
    4e70:	bc 01       	movw	r22, r24
    4e72:	49 81       	ldd	r20, Y+1	; 0x01
    4e74:	5a 81       	ldd	r21, Y+2	; 0x02
    4e76:	64 9f       	mul	r22, r20
    4e78:	c0 01       	movw	r24, r0
    4e7a:	65 9f       	mul	r22, r21
    4e7c:	90 0d       	add	r25, r0
    4e7e:	74 9f       	mul	r23, r20
    4e80:	90 0d       	add	r25, r0
    4e82:	11 24       	eor	r1, r1
    4e84:	28 1b       	sub	r18, r24
    4e86:	39 0b       	sbc	r19, r25
    4e88:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e8a:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e8c:	fc 01       	movw	r30, r24
    4e8e:	34 af       	std	Z+60, r19	; 0x3c
    4e90:	23 af       	std	Z+59, r18	; 0x3b
    4e92:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <getMicros>
    4e96:	dc 01       	movw	r26, r24
    4e98:	cb 01       	movw	r24, r22
    4e9a:	2b 85       	ldd	r18, Y+11	; 0x0b
    4e9c:	3c 85       	ldd	r19, Y+12	; 0x0c
    4e9e:	23 5c       	subi	r18, 0xC3	; 195
    4ea0:	3f 4f       	sbci	r19, 0xFF	; 255
    4ea2:	f9 01       	movw	r30, r18
    4ea4:	80 83       	st	Z, r24
    4ea6:	91 83       	std	Z+1, r25	; 0x01
    4ea8:	a2 83       	std	Z+2, r26	; 0x02
    4eaa:	b3 83       	std	Z+3, r27	; 0x03
    4eac:	89 81       	ldd	r24, Y+1	; 0x01
    4eae:	9a 81       	ldd	r25, Y+2	; 0x02
    4eb0:	2c 96       	adiw	r28, 0x0c	; 12
    4eb2:	0f b6       	in	r0, 0x3f	; 63
    4eb4:	f8 94       	cli
    4eb6:	de bf       	out	0x3e, r29	; 62
    4eb8:	0f be       	out	0x3f, r0	; 63
    4eba:	cd bf       	out	0x3d, r28	; 61
    4ebc:	df 91       	pop	r29
    4ebe:	cf 91       	pop	r28
    4ec0:	1f 91       	pop	r17
    4ec2:	0f 91       	pop	r16
    4ec4:	ff 90       	pop	r15
    4ec6:	ef 90       	pop	r14
    4ec8:	08 95       	ret

00004eca <getNextEvent>:
    4eca:	cf 93       	push	r28
    4ecc:	df 93       	push	r29
    4ece:	00 d0       	rcall	.+0      	; 0x4ed0 <getNextEvent+0x6>
    4ed0:	00 d0       	rcall	.+0      	; 0x4ed2 <getNextEvent+0x8>
    4ed2:	cd b7       	in	r28, 0x3d	; 61
    4ed4:	de b7       	in	r29, 0x3e	; 62
    4ed6:	9c 83       	std	Y+4, r25	; 0x04
    4ed8:	8b 83       	std	Y+3, r24	; 0x03
    4eda:	8b 81       	ldd	r24, Y+3	; 0x03
    4edc:	9c 81       	ldd	r25, Y+4	; 0x04
    4ede:	8e 5b       	subi	r24, 0xBE	; 190
    4ee0:	9f 4f       	sbci	r25, 0xFF	; 255
    4ee2:	fc 01       	movw	r30, r24
    4ee4:	80 81       	ld	r24, Z
    4ee6:	88 23       	and	r24, r24
    4ee8:	11 f0       	breq	.+4      	; 0x4eee <getNextEvent+0x24>
    4eea:	80 e0       	ldi	r24, 0x00	; 0
    4eec:	27 c0       	rjmp	.+78     	; 0x4f3c <getNextEvent+0x72>
    4eee:	8b 81       	ldd	r24, Y+3	; 0x03
    4ef0:	9c 81       	ldd	r25, Y+4	; 0x04
    4ef2:	8f 5b       	subi	r24, 0xBF	; 191
    4ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    4ef6:	fc 01       	movw	r30, r24
    4ef8:	80 81       	ld	r24, Z
    4efa:	88 23       	and	r24, r24
    4efc:	59 f4       	brne	.+22     	; 0x4f14 <getNextEvent+0x4a>
    4efe:	8b 81       	ldd	r24, Y+3	; 0x03
    4f00:	9c 81       	ldd	r25, Y+4	; 0x04
    4f02:	0e 94 f6 24 	call	0x49ec	; 0x49ec <synchTracks>
    4f06:	8b 81       	ldd	r24, Y+3	; 0x03
    4f08:	9c 81       	ldd	r25, Y+4	; 0x04
    4f0a:	8f 5b       	subi	r24, 0xBF	; 191
    4f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    4f0e:	21 e0       	ldi	r18, 0x01	; 1
    4f10:	fc 01       	movw	r30, r24
    4f12:	20 83       	st	Z, r18
    4f14:	8b 81       	ldd	r24, Y+3	; 0x03
    4f16:	9c 81       	ldd	r25, Y+4	; 0x04
    4f18:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <tickClock>
    4f1c:	9a 83       	std	Y+2, r25	; 0x02
    4f1e:	89 83       	std	Y+1, r24	; 0x01
    4f20:	89 81       	ldd	r24, Y+1	; 0x01
    4f22:	9a 81       	ldd	r25, Y+2	; 0x02
    4f24:	89 2b       	or	r24, r25
    4f26:	11 f4       	brne	.+4      	; 0x4f2c <getNextEvent+0x62>
    4f28:	80 e0       	ldi	r24, 0x00	; 0
    4f2a:	08 c0       	rjmp	.+16     	; 0x4f3c <getNextEvent+0x72>
    4f2c:	29 81       	ldd	r18, Y+1	; 0x01
    4f2e:	3a 81       	ldd	r19, Y+2	; 0x02
    4f30:	8b 81       	ldd	r24, Y+3	; 0x03
    4f32:	9c 81       	ldd	r25, Y+4	; 0x04
    4f34:	b9 01       	movw	r22, r18
    4f36:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <processEvents>
    4f3a:	81 e0       	ldi	r24, 0x01	; 1
    4f3c:	0f 90       	pop	r0
    4f3e:	0f 90       	pop	r0
    4f40:	0f 90       	pop	r0
    4f42:	0f 90       	pop	r0
    4f44:	df 91       	pop	r29
    4f46:	cf 91       	pop	r28
    4f48:	08 95       	ret

00004f4a <processEvents>:
    4f4a:	cf 93       	push	r28
    4f4c:	df 93       	push	r29
    4f4e:	cd b7       	in	r28, 0x3d	; 61
    4f50:	de b7       	in	r29, 0x3e	; 62
    4f52:	28 97       	sbiw	r28, 0x08	; 8
    4f54:	0f b6       	in	r0, 0x3f	; 63
    4f56:	f8 94       	cli
    4f58:	de bf       	out	0x3e, r29	; 62
    4f5a:	0f be       	out	0x3f, r0	; 63
    4f5c:	cd bf       	out	0x3d, r28	; 61
    4f5e:	9e 83       	std	Y+6, r25	; 0x06
    4f60:	8d 83       	std	Y+5, r24	; 0x05
    4f62:	78 87       	std	Y+8, r23	; 0x08
    4f64:	6f 83       	std	Y+7, r22	; 0x07
    4f66:	19 82       	std	Y+1, r1	; 0x01
    4f68:	3c c0       	rjmp	.+120    	; 0x4fe2 <processEvents+0x98>
    4f6a:	1a 82       	std	Y+2, r1	; 0x02
    4f6c:	1b 82       	std	Y+3, r1	; 0x03
    4f6e:	2c c0       	rjmp	.+88     	; 0x4fc8 <processEvents+0x7e>
    4f70:	89 81       	ldd	r24, Y+1	; 0x01
    4f72:	88 23       	and	r24, r24
    4f74:	19 f4       	brne	.+6      	; 0x4f7c <processEvents+0x32>
    4f76:	4f 81       	ldd	r20, Y+7	; 0x07
    4f78:	58 85       	ldd	r21, Y+8	; 0x08
    4f7a:	02 c0       	rjmp	.+4      	; 0x4f80 <processEvents+0x36>
    4f7c:	40 e0       	ldi	r20, 0x00	; 0
    4f7e:	50 e0       	ldi	r21, 0x00	; 0
    4f80:	8b 81       	ldd	r24, Y+3	; 0x03
    4f82:	28 2f       	mov	r18, r24
    4f84:	30 e0       	ldi	r19, 0x00	; 0
    4f86:	69 e1       	ldi	r22, 0x19	; 25
    4f88:	62 9f       	mul	r22, r18
    4f8a:	c0 01       	movw	r24, r0
    4f8c:	63 9f       	mul	r22, r19
    4f8e:	90 0d       	add	r25, r0
    4f90:	11 24       	eor	r1, r1
    4f92:	85 5b       	subi	r24, 0xB5	; 181
    4f94:	9f 4f       	sbci	r25, 0xFF	; 255
    4f96:	2d 81       	ldd	r18, Y+5	; 0x05
    4f98:	3e 81       	ldd	r19, Y+6	; 0x06
    4f9a:	28 0f       	add	r18, r24
    4f9c:	39 1f       	adc	r19, r25
    4f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    4fa0:	9e 81       	ldd	r25, Y+6	; 0x06
    4fa2:	b9 01       	movw	r22, r18
    4fa4:	0e 94 9e 2a 	call	0x553c	; 0x553c <getNextTrackEvent>
    4fa8:	8c 83       	std	Y+4, r24	; 0x04
    4faa:	8a 81       	ldd	r24, Y+2	; 0x02
    4fac:	88 23       	and	r24, r24
    4fae:	19 f4       	brne	.+6      	; 0x4fb6 <processEvents+0x6c>
    4fb0:	8c 81       	ldd	r24, Y+4	; 0x04
    4fb2:	88 23       	and	r24, r24
    4fb4:	19 f0       	breq	.+6      	; 0x4fbc <processEvents+0x72>
    4fb6:	81 e0       	ldi	r24, 0x01	; 1
    4fb8:	90 e0       	ldi	r25, 0x00	; 0
    4fba:	02 c0       	rjmp	.+4      	; 0x4fc0 <processEvents+0x76>
    4fbc:	80 e0       	ldi	r24, 0x00	; 0
    4fbe:	90 e0       	ldi	r25, 0x00	; 0
    4fc0:	8a 83       	std	Y+2, r24	; 0x02
    4fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    4fc4:	8f 5f       	subi	r24, 0xFF	; 255
    4fc6:	8b 83       	std	Y+3, r24	; 0x03
    4fc8:	8d 81       	ldd	r24, Y+5	; 0x05
    4fca:	9e 81       	ldd	r25, Y+6	; 0x06
    4fcc:	fc 01       	movw	r30, r24
    4fce:	94 a9       	ldd	r25, Z+52	; 0x34
    4fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    4fd2:	89 17       	cp	r24, r25
    4fd4:	68 f2       	brcs	.-102    	; 0x4f70 <processEvents+0x26>
    4fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    4fd8:	88 23       	and	r24, r24
    4fda:	59 f0       	breq	.+22     	; 0x4ff2 <processEvents+0xa8>
    4fdc:	89 81       	ldd	r24, Y+1	; 0x01
    4fde:	8f 5f       	subi	r24, 0xFF	; 255
    4fe0:	89 83       	std	Y+1, r24	; 0x01
    4fe2:	89 81       	ldd	r24, Y+1	; 0x01
    4fe4:	84 36       	cpi	r24, 0x64	; 100
    4fe6:	30 f4       	brcc	.+12     	; 0x4ff4 <processEvents+0xaa>
    4fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    4fea:	88 23       	and	r24, r24
    4fec:	09 f4       	brne	.+2      	; 0x4ff0 <processEvents+0xa6>
    4fee:	bd cf       	rjmp	.-134    	; 0x4f6a <processEvents+0x20>
    4ff0:	01 c0       	rjmp	.+2      	; 0x4ff4 <processEvents+0xaa>
    4ff2:	00 00       	nop
    4ff4:	00 00       	nop
    4ff6:	28 96       	adiw	r28, 0x08	; 8
    4ff8:	0f b6       	in	r0, 0x3f	; 63
    4ffa:	f8 94       	cli
    4ffc:	de bf       	out	0x3e, r29	; 62
    4ffe:	0f be       	out	0x3f, r0	; 63
    5000:	cd bf       	out	0x3d, r28	; 61
    5002:	df 91       	pop	r29
    5004:	cf 91       	pop	r28
    5006:	08 95       	ret

00005008 <loadMIDIFile>:
    5008:	cf 93       	push	r28
    500a:	df 93       	push	r29
    500c:	cd b7       	in	r28, 0x3d	; 61
    500e:	de b7       	in	r29, 0x3e	; 62
    5010:	65 97       	sbiw	r28, 0x15	; 21
    5012:	0f b6       	in	r0, 0x3f	; 63
    5014:	f8 94       	cli
    5016:	de bf       	out	0x3e, r29	; 62
    5018:	0f be       	out	0x3f, r0	; 63
    501a:	cd bf       	out	0x3d, r28	; 61
    501c:	9d 8b       	std	Y+21, r25	; 0x15
    501e:	8c 8b       	std	Y+20, r24	; 0x14
    5020:	8c 89       	ldd	r24, Y+20	; 0x14
    5022:	9d 89       	ldd	r25, Y+21	; 0x15
    5024:	fc 01       	movw	r30, r24
    5026:	86 a1       	ldd	r24, Z+38	; 0x26
    5028:	88 23       	and	r24, r24
    502a:	19 f4       	brne	.+6      	; 0x5032 <loadMIDIFile+0x2a>
    502c:	80 e0       	ldi	r24, 0x00	; 0
    502e:	90 e0       	ldi	r25, 0x00	; 0
    5030:	39 c1       	rjmp	.+626    	; 0x52a4 <loadMIDIFile+0x29c>
    5032:	8c 89       	ldd	r24, Y+20	; 0x14
    5034:	9d 89       	ldd	r25, Y+21	; 0x15
    5036:	9c 01       	movw	r18, r24
    5038:	2a 5d       	subi	r18, 0xDA	; 218
    503a:	3f 4f       	sbci	r19, 0xFF	; 255
    503c:	8c 89       	ldd	r24, Y+20	; 0x14
    503e:	9d 89       	ldd	r25, Y+21	; 0x15
    5040:	06 96       	adiw	r24, 0x06	; 6
    5042:	41 e0       	ldi	r20, 0x01	; 1
    5044:	b9 01       	movw	r22, r18
    5046:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <f_open>
    504a:	8e 83       	std	Y+6, r24	; 0x06
    504c:	8e 81       	ldd	r24, Y+6	; 0x06
    504e:	88 23       	and	r24, r24
    5050:	19 f0       	breq	.+6      	; 0x5058 <loadMIDIFile+0x50>
    5052:	82 e0       	ldi	r24, 0x02	; 2
    5054:	90 e0       	ldi	r25, 0x00	; 0
    5056:	26 c1       	rjmp	.+588    	; 0x52a4 <loadMIDIFile+0x29c>
    5058:	8c 89       	ldd	r24, Y+20	; 0x14
    505a:	9d 89       	ldd	r25, Y+21	; 0x15
    505c:	06 96       	adiw	r24, 0x06	; 6
    505e:	9e 01       	movw	r18, r28
    5060:	25 5f       	subi	r18, 0xF5	; 245
    5062:	3f 4f       	sbci	r19, 0xFF	; 255
    5064:	be 01       	movw	r22, r28
    5066:	61 5f       	subi	r22, 0xF1	; 241
    5068:	7f 4f       	sbci	r23, 0xFF	; 255
    506a:	44 e0       	ldi	r20, 0x04	; 4
    506c:	50 e0       	ldi	r21, 0x00	; 0
    506e:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <f_read>
    5072:	1b 8a       	std	Y+19, r1	; 0x13
    5074:	ce 01       	movw	r24, r28
    5076:	0f 96       	adiw	r24, 0x0f	; 15
    5078:	6d ea       	ldi	r22, 0xAD	; 173
    507a:	70 e0       	ldi	r23, 0x00	; 0
    507c:	0e 94 d1 3d 	call	0x7ba2	; 0x7ba2 <strcmp>
    5080:	89 2b       	or	r24, r25
    5082:	41 f0       	breq	.+16     	; 0x5094 <loadMIDIFile+0x8c>
    5084:	8c 89       	ldd	r24, Y+20	; 0x14
    5086:	9d 89       	ldd	r25, Y+21	; 0x15
    5088:	06 96       	adiw	r24, 0x06	; 6
    508a:	0e 94 00 1b 	call	0x3600	; 0x3600 <f_close>
    508e:	83 e0       	ldi	r24, 0x03	; 3
    5090:	90 e0       	ldi	r25, 0x00	; 0
    5092:	08 c1       	rjmp	.+528    	; 0x52a4 <loadMIDIFile+0x29c>
    5094:	8c 89       	ldd	r24, Y+20	; 0x14
    5096:	9d 89       	ldd	r25, Y+21	; 0x15
    5098:	06 96       	adiw	r24, 0x06	; 6
    509a:	64 e0       	ldi	r22, 0x04	; 4
    509c:	0e 94 79 29 	call	0x52f2	; 0x52f2 <readMultiByte>
    50a0:	dc 01       	movw	r26, r24
    50a2:	cb 01       	movw	r24, r22
    50a4:	8b 87       	std	Y+11, r24	; 0x0b
    50a6:	9c 87       	std	Y+12, r25	; 0x0c
    50a8:	ad 87       	std	Y+13, r26	; 0x0d
    50aa:	be 87       	std	Y+14, r27	; 0x0e
    50ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    50ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    50b0:	ad 85       	ldd	r26, Y+13	; 0x0d
    50b2:	be 85       	ldd	r27, Y+14	; 0x0e
    50b4:	06 97       	sbiw	r24, 0x06	; 6
    50b6:	a1 05       	cpc	r26, r1
    50b8:	b1 05       	cpc	r27, r1
    50ba:	41 f0       	breq	.+16     	; 0x50cc <loadMIDIFile+0xc4>
    50bc:	8c 89       	ldd	r24, Y+20	; 0x14
    50be:	9d 89       	ldd	r25, Y+21	; 0x15
    50c0:	06 96       	adiw	r24, 0x06	; 6
    50c2:	0e 94 00 1b 	call	0x3600	; 0x3600 <f_close>
    50c6:	84 e0       	ldi	r24, 0x04	; 4
    50c8:	90 e0       	ldi	r25, 0x00	; 0
    50ca:	ec c0       	rjmp	.+472    	; 0x52a4 <loadMIDIFile+0x29c>
    50cc:	8c 89       	ldd	r24, Y+20	; 0x14
    50ce:	9d 89       	ldd	r25, Y+21	; 0x15
    50d0:	06 96       	adiw	r24, 0x06	; 6
    50d2:	62 e0       	ldi	r22, 0x02	; 2
    50d4:	0e 94 79 29 	call	0x52f2	; 0x52f2 <readMultiByte>
    50d8:	dc 01       	movw	r26, r24
    50da:	cb 01       	movw	r24, r22
    50dc:	9a 83       	std	Y+2, r25	; 0x02
    50de:	89 83       	std	Y+1, r24	; 0x01
    50e0:	89 81       	ldd	r24, Y+1	; 0x01
    50e2:	9a 81       	ldd	r25, Y+2	; 0x02
    50e4:	89 2b       	or	r24, r25
    50e6:	61 f0       	breq	.+24     	; 0x5100 <loadMIDIFile+0xf8>
    50e8:	89 81       	ldd	r24, Y+1	; 0x01
    50ea:	9a 81       	ldd	r25, Y+2	; 0x02
    50ec:	01 97       	sbiw	r24, 0x01	; 1
    50ee:	41 f0       	breq	.+16     	; 0x5100 <loadMIDIFile+0xf8>
    50f0:	8c 89       	ldd	r24, Y+20	; 0x14
    50f2:	9d 89       	ldd	r25, Y+21	; 0x15
    50f4:	06 96       	adiw	r24, 0x06	; 6
    50f6:	0e 94 00 1b 	call	0x3600	; 0x3600 <f_close>
    50fa:	85 e0       	ldi	r24, 0x05	; 5
    50fc:	90 e0       	ldi	r25, 0x00	; 0
    50fe:	d2 c0       	rjmp	.+420    	; 0x52a4 <loadMIDIFile+0x29c>
    5100:	29 81       	ldd	r18, Y+1	; 0x01
    5102:	8c 89       	ldd	r24, Y+20	; 0x14
    5104:	9d 89       	ldd	r25, Y+21	; 0x15
    5106:	fc 01       	movw	r30, r24
    5108:	23 ab       	std	Z+51, r18	; 0x33
    510a:	8c 89       	ldd	r24, Y+20	; 0x14
    510c:	9d 89       	ldd	r25, Y+21	; 0x15
    510e:	06 96       	adiw	r24, 0x06	; 6
    5110:	62 e0       	ldi	r22, 0x02	; 2
    5112:	0e 94 79 29 	call	0x52f2	; 0x52f2 <readMultiByte>
    5116:	dc 01       	movw	r26, r24
    5118:	cb 01       	movw	r24, r22
    511a:	9a 83       	std	Y+2, r25	; 0x02
    511c:	89 83       	std	Y+1, r24	; 0x01
    511e:	8c 89       	ldd	r24, Y+20	; 0x14
    5120:	9d 89       	ldd	r25, Y+21	; 0x15
    5122:	fc 01       	movw	r30, r24
    5124:	83 a9       	ldd	r24, Z+51	; 0x33
    5126:	88 23       	and	r24, r24
    5128:	61 f4       	brne	.+24     	; 0x5142 <loadMIDIFile+0x13a>
    512a:	89 81       	ldd	r24, Y+1	; 0x01
    512c:	9a 81       	ldd	r25, Y+2	; 0x02
    512e:	01 97       	sbiw	r24, 0x01	; 1
    5130:	41 f0       	breq	.+16     	; 0x5142 <loadMIDIFile+0x13a>
    5132:	8c 89       	ldd	r24, Y+20	; 0x14
    5134:	9d 89       	ldd	r25, Y+21	; 0x15
    5136:	06 96       	adiw	r24, 0x06	; 6
    5138:	0e 94 00 1b 	call	0x3600	; 0x3600 <f_close>
    513c:	86 e0       	ldi	r24, 0x06	; 6
    513e:	90 e0       	ldi	r25, 0x00	; 0
    5140:	b1 c0       	rjmp	.+354    	; 0x52a4 <loadMIDIFile+0x29c>
    5142:	89 81       	ldd	r24, Y+1	; 0x01
    5144:	9a 81       	ldd	r25, Y+2	; 0x02
    5146:	41 97       	sbiw	r24, 0x11	; 17
    5148:	40 f0       	brcs	.+16     	; 0x515a <loadMIDIFile+0x152>
    514a:	8c 89       	ldd	r24, Y+20	; 0x14
    514c:	9d 89       	ldd	r25, Y+21	; 0x15
    514e:	06 96       	adiw	r24, 0x06	; 6
    5150:	0e 94 00 1b 	call	0x3600	; 0x3600 <f_close>
    5154:	87 e0       	ldi	r24, 0x07	; 7
    5156:	90 e0       	ldi	r25, 0x00	; 0
    5158:	a5 c0       	rjmp	.+330    	; 0x52a4 <loadMIDIFile+0x29c>
    515a:	29 81       	ldd	r18, Y+1	; 0x01
    515c:	8c 89       	ldd	r24, Y+20	; 0x14
    515e:	9d 89       	ldd	r25, Y+21	; 0x15
    5160:	fc 01       	movw	r30, r24
    5162:	24 ab       	std	Z+52, r18	; 0x34
    5164:	8c 89       	ldd	r24, Y+20	; 0x14
    5166:	9d 89       	ldd	r25, Y+21	; 0x15
    5168:	06 96       	adiw	r24, 0x06	; 6
    516a:	62 e0       	ldi	r22, 0x02	; 2
    516c:	0e 94 79 29 	call	0x52f2	; 0x52f2 <readMultiByte>
    5170:	dc 01       	movw	r26, r24
    5172:	cb 01       	movw	r24, r22
    5174:	9a 83       	std	Y+2, r25	; 0x02
    5176:	89 83       	std	Y+1, r24	; 0x01
    5178:	89 81       	ldd	r24, Y+1	; 0x01
    517a:	9a 81       	ldd	r25, Y+2	; 0x02
    517c:	99 23       	and	r25, r25
    517e:	0c f0       	brlt	.+2      	; 0x5182 <loadMIDIFile+0x17a>
    5180:	46 c0       	rjmp	.+140    	; 0x520e <loadMIDIFile+0x206>
    5182:	89 81       	ldd	r24, Y+1	; 0x01
    5184:	9a 81       	ldd	r25, Y+2	; 0x02
    5186:	89 2f       	mov	r24, r25
    5188:	99 27       	eor	r25, r25
    518a:	9c 83       	std	Y+4, r25	; 0x04
    518c:	8b 83       	std	Y+3, r24	; 0x03
    518e:	89 81       	ldd	r24, Y+1	; 0x01
    5190:	9a 81       	ldd	r25, Y+2	; 0x02
    5192:	99 27       	eor	r25, r25
    5194:	98 87       	std	Y+8, r25	; 0x08
    5196:	8f 83       	std	Y+7, r24	; 0x07
    5198:	8b 81       	ldd	r24, Y+3	; 0x03
    519a:	9c 81       	ldd	r25, Y+4	; 0x04
    519c:	83 3e       	cpi	r24, 0xE3	; 227
    519e:	91 05       	cpc	r25, r1
    51a0:	b9 f0       	breq	.+46     	; 0x51d0 <loadMIDIFile+0x1c8>
    51a2:	84 3e       	cpi	r24, 0xE4	; 228
    51a4:	91 05       	cpc	r25, r1
    51a6:	24 f4       	brge	.+8      	; 0x51b0 <loadMIDIFile+0x1a8>
    51a8:	82 3e       	cpi	r24, 0xE2	; 226
    51aa:	91 05       	cpc	r25, r1
    51ac:	b1 f0       	breq	.+44     	; 0x51da <loadMIDIFile+0x1d2>
    51ae:	1a c0       	rjmp	.+52     	; 0x51e4 <loadMIDIFile+0x1dc>
    51b0:	87 3e       	cpi	r24, 0xE7	; 231
    51b2:	91 05       	cpc	r25, r1
    51b4:	41 f0       	breq	.+16     	; 0x51c6 <loadMIDIFile+0x1be>
    51b6:	88 3e       	cpi	r24, 0xE8	; 232
    51b8:	91 05       	cpc	r25, r1
    51ba:	a1 f4       	brne	.+40     	; 0x51e4 <loadMIDIFile+0x1dc>
    51bc:	88 e1       	ldi	r24, 0x18	; 24
    51be:	90 e0       	ldi	r25, 0x00	; 0
    51c0:	9c 83       	std	Y+4, r25	; 0x04
    51c2:	8b 83       	std	Y+3, r24	; 0x03
    51c4:	17 c0       	rjmp	.+46     	; 0x51f4 <loadMIDIFile+0x1ec>
    51c6:	89 e1       	ldi	r24, 0x19	; 25
    51c8:	90 e0       	ldi	r25, 0x00	; 0
    51ca:	9c 83       	std	Y+4, r25	; 0x04
    51cc:	8b 83       	std	Y+3, r24	; 0x03
    51ce:	12 c0       	rjmp	.+36     	; 0x51f4 <loadMIDIFile+0x1ec>
    51d0:	8d e1       	ldi	r24, 0x1D	; 29
    51d2:	90 e0       	ldi	r25, 0x00	; 0
    51d4:	9c 83       	std	Y+4, r25	; 0x04
    51d6:	8b 83       	std	Y+3, r24	; 0x03
    51d8:	0d c0       	rjmp	.+26     	; 0x51f4 <loadMIDIFile+0x1ec>
    51da:	8e e1       	ldi	r24, 0x1E	; 30
    51dc:	90 e0       	ldi	r25, 0x00	; 0
    51de:	9c 83       	std	Y+4, r25	; 0x04
    51e0:	8b 83       	std	Y+3, r24	; 0x03
    51e2:	08 c0       	rjmp	.+16     	; 0x51f4 <loadMIDIFile+0x1ec>
    51e4:	8c 89       	ldd	r24, Y+20	; 0x14
    51e6:	9d 89       	ldd	r25, Y+21	; 0x15
    51e8:	06 96       	adiw	r24, 0x06	; 6
    51ea:	0e 94 00 1b 	call	0x3600	; 0x3600 <f_close>
    51ee:	87 e0       	ldi	r24, 0x07	; 7
    51f0:	90 e0       	ldi	r25, 0x00	; 0
    51f2:	58 c0       	rjmp	.+176    	; 0x52a4 <loadMIDIFile+0x29c>
    51f4:	4b 81       	ldd	r20, Y+3	; 0x03
    51f6:	5c 81       	ldd	r21, Y+4	; 0x04
    51f8:	2f 81       	ldd	r18, Y+7	; 0x07
    51fa:	38 85       	ldd	r19, Y+8	; 0x08
    51fc:	42 9f       	mul	r20, r18
    51fe:	c0 01       	movw	r24, r0
    5200:	43 9f       	mul	r20, r19
    5202:	90 0d       	add	r25, r0
    5204:	52 9f       	mul	r21, r18
    5206:	90 0d       	add	r25, r0
    5208:	11 24       	eor	r1, r1
    520a:	9a 83       	std	Y+2, r25	; 0x02
    520c:	89 83       	std	Y+1, r24	; 0x01
    520e:	8c 89       	ldd	r24, Y+20	; 0x14
    5210:	9d 89       	ldd	r25, Y+21	; 0x15
    5212:	29 81       	ldd	r18, Y+1	; 0x01
    5214:	3a 81       	ldd	r19, Y+2	; 0x02
    5216:	fc 01       	movw	r30, r24
    5218:	36 ab       	std	Z+54, r19	; 0x36
    521a:	25 ab       	std	Z+53, r18	; 0x35
    521c:	8c 89       	ldd	r24, Y+20	; 0x14
    521e:	9d 89       	ldd	r25, Y+21	; 0x15
    5220:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <calcTickTime>
    5224:	1d 82       	std	Y+5, r1	; 0x05
    5226:	35 c0       	rjmp	.+106    	; 0x5292 <loadMIDIFile+0x28a>
    5228:	8d 81       	ldd	r24, Y+5	; 0x05
    522a:	28 2f       	mov	r18, r24
    522c:	30 e0       	ldi	r19, 0x00	; 0
    522e:	49 e1       	ldi	r20, 0x19	; 25
    5230:	42 9f       	mul	r20, r18
    5232:	c0 01       	movw	r24, r0
    5234:	43 9f       	mul	r20, r19
    5236:	90 0d       	add	r25, r0
    5238:	11 24       	eor	r1, r1
    523a:	85 5b       	subi	r24, 0xB5	; 181
    523c:	9f 4f       	sbci	r25, 0xFF	; 255
    523e:	2c 89       	ldd	r18, Y+20	; 0x14
    5240:	3d 89       	ldd	r19, Y+21	; 0x15
    5242:	82 0f       	add	r24, r18
    5244:	93 1f       	adc	r25, r19
    5246:	2c 89       	ldd	r18, Y+20	; 0x14
    5248:	3d 89       	ldd	r19, Y+21	; 0x15
    524a:	a9 01       	movw	r20, r18
    524c:	6d 81       	ldd	r22, Y+5	; 0x05
    524e:	0e 94 3a 30 	call	0x6074	; 0x6074 <loadTrack>
    5252:	9a 87       	std	Y+10, r25	; 0x0a
    5254:	89 87       	std	Y+9, r24	; 0x09
    5256:	89 85       	ldd	r24, Y+9	; 0x09
    5258:	9a 85       	ldd	r25, Y+10	; 0x0a
    525a:	01 96       	adiw	r24, 0x01	; 1
    525c:	b9 f0       	breq	.+46     	; 0x528c <loadMIDIFile+0x284>
    525e:	8c 89       	ldd	r24, Y+20	; 0x14
    5260:	9d 89       	ldd	r25, Y+21	; 0x15
    5262:	06 96       	adiw	r24, 0x06	; 6
    5264:	0e 94 00 1b 	call	0x3600	; 0x3600 <f_close>
    5268:	8d 81       	ldd	r24, Y+5	; 0x05
    526a:	88 2f       	mov	r24, r24
    526c:	90 e0       	ldi	r25, 0x00	; 0
    526e:	01 96       	adiw	r24, 0x01	; 1
    5270:	88 0f       	add	r24, r24
    5272:	99 1f       	adc	r25, r25
    5274:	9c 01       	movw	r18, r24
    5276:	22 0f       	add	r18, r18
    5278:	33 1f       	adc	r19, r19
    527a:	22 0f       	add	r18, r18
    527c:	33 1f       	adc	r19, r19
    527e:	28 0f       	add	r18, r24
    5280:	39 1f       	adc	r19, r25
    5282:	89 85       	ldd	r24, Y+9	; 0x09
    5284:	9a 85       	ldd	r25, Y+10	; 0x0a
    5286:	82 0f       	add	r24, r18
    5288:	93 1f       	adc	r25, r19
    528a:	0c c0       	rjmp	.+24     	; 0x52a4 <loadMIDIFile+0x29c>
    528c:	8d 81       	ldd	r24, Y+5	; 0x05
    528e:	8f 5f       	subi	r24, 0xFF	; 255
    5290:	8d 83       	std	Y+5, r24	; 0x05
    5292:	8c 89       	ldd	r24, Y+20	; 0x14
    5294:	9d 89       	ldd	r25, Y+21	; 0x15
    5296:	fc 01       	movw	r30, r24
    5298:	94 a9       	ldd	r25, Z+52	; 0x34
    529a:	8d 81       	ldd	r24, Y+5	; 0x05
    529c:	89 17       	cp	r24, r25
    529e:	20 f2       	brcs	.-120    	; 0x5228 <loadMIDIFile+0x220>
    52a0:	8f ef       	ldi	r24, 0xFF	; 255
    52a2:	9f ef       	ldi	r25, 0xFF	; 255
    52a4:	65 96       	adiw	r28, 0x15	; 21
    52a6:	0f b6       	in	r0, 0x3f	; 63
    52a8:	f8 94       	cli
    52aa:	de bf       	out	0x3e, r29	; 62
    52ac:	0f be       	out	0x3f, r0	; 63
    52ae:	cd bf       	out	0x3d, r28	; 61
    52b0:	df 91       	pop	r29
    52b2:	cf 91       	pop	r28
    52b4:	08 95       	ret

000052b6 <setFilename>:

void setFilename(struct MD_MIDIFile *m,const char* aname) 
{ 
    52b6:	cf 93       	push	r28
    52b8:	df 93       	push	r29
    52ba:	00 d0       	rcall	.+0      	; 0x52bc <setFilename+0x6>
    52bc:	00 d0       	rcall	.+0      	; 0x52be <setFilename+0x8>
    52be:	cd b7       	in	r28, 0x3d	; 61
    52c0:	de b7       	in	r29, 0x3e	; 62
    52c2:	9a 83       	std	Y+2, r25	; 0x02
    52c4:	89 83       	std	Y+1, r24	; 0x01
    52c6:	7c 83       	std	Y+4, r23	; 0x04
    52c8:	6b 83       	std	Y+3, r22	; 0x03
	if (aname != NULL) strcpy(m->_fileName, aname); 
    52ca:	8b 81       	ldd	r24, Y+3	; 0x03
    52cc:	9c 81       	ldd	r25, Y+4	; 0x04
    52ce:	89 2b       	or	r24, r25
    52d0:	41 f0       	breq	.+16     	; 0x52e2 <setFilename+0x2c>
    52d2:	89 81       	ldd	r24, Y+1	; 0x01
    52d4:	9a 81       	ldd	r25, Y+2	; 0x02
    52d6:	86 96       	adiw	r24, 0x26	; 38
    52d8:	2b 81       	ldd	r18, Y+3	; 0x03
    52da:	3c 81       	ldd	r19, Y+4	; 0x04
    52dc:	b9 01       	movw	r22, r18
    52de:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <strcpy>
}	
    52e2:	00 00       	nop
    52e4:	0f 90       	pop	r0
    52e6:	0f 90       	pop	r0
    52e8:	0f 90       	pop	r0
    52ea:	0f 90       	pop	r0
    52ec:	df 91       	pop	r29
    52ee:	cf 91       	pop	r28
    52f0:	08 95       	ret

000052f2 <readMultiByte>:
 * \brief Main file for helper functions implementation
 */

uint32_t readMultiByte(FIL *f, uint8_t nLen)
// read fixed length parameter from input
{
    52f2:	cf 93       	push	r28
    52f4:	df 93       	push	r29
    52f6:	cd b7       	in	r28, 0x3d	; 61
    52f8:	de b7       	in	r29, 0x3e	; 62
    52fa:	2b 97       	sbiw	r28, 0x0b	; 11
    52fc:	0f b6       	in	r0, 0x3f	; 63
    52fe:	f8 94       	cli
    5300:	de bf       	out	0x3e, r29	; 62
    5302:	0f be       	out	0x3f, r0	; 63
    5304:	cd bf       	out	0x3d, r28	; 61
    5306:	9a 87       	std	Y+10, r25	; 0x0a
    5308:	89 87       	std	Y+9, r24	; 0x09
    530a:	6b 87       	std	Y+11, r22	; 0x0b
  uint32_t  value = 0L;
    530c:	19 82       	std	Y+1, r1	; 0x01
    530e:	1a 82       	std	Y+2, r1	; 0x02
    5310:	1b 82       	std	Y+3, r1	; 0x03
    5312:	1c 82       	std	Y+4, r1	; 0x04
  uint8_t c;
  UINT d;
  for (uint8_t i=0; i<nLen; i++)
    5314:	1d 82       	std	Y+5, r1	; 0x05
    5316:	24 c0       	rjmp	.+72     	; 0x5360 <readMultiByte+0x6e>
  {
    f_read(f,&c,1,&d);
    5318:	9e 01       	movw	r18, r28
    531a:	29 5f       	subi	r18, 0xF9	; 249
    531c:	3f 4f       	sbci	r19, 0xFF	; 255
    531e:	be 01       	movw	r22, r28
    5320:	6a 5f       	subi	r22, 0xFA	; 250
    5322:	7f 4f       	sbci	r23, 0xFF	; 255
    5324:	89 85       	ldd	r24, Y+9	; 0x09
    5326:	9a 85       	ldd	r25, Y+10	; 0x0a
    5328:	41 e0       	ldi	r20, 0x01	; 1
    532a:	50 e0       	ldi	r21, 0x00	; 0
    532c:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <f_read>
	value = (value << 8) + c;
    5330:	89 81       	ldd	r24, Y+1	; 0x01
    5332:	9a 81       	ldd	r25, Y+2	; 0x02
    5334:	ab 81       	ldd	r26, Y+3	; 0x03
    5336:	bc 81       	ldd	r27, Y+4	; 0x04
    5338:	22 27       	eor	r18, r18
    533a:	38 2f       	mov	r19, r24
    533c:	49 2f       	mov	r20, r25
    533e:	5a 2f       	mov	r21, r26
    5340:	8e 81       	ldd	r24, Y+6	; 0x06
    5342:	88 2f       	mov	r24, r24
    5344:	90 e0       	ldi	r25, 0x00	; 0
    5346:	a0 e0       	ldi	r26, 0x00	; 0
    5348:	b0 e0       	ldi	r27, 0x00	; 0
    534a:	82 0f       	add	r24, r18
    534c:	93 1f       	adc	r25, r19
    534e:	a4 1f       	adc	r26, r20
    5350:	b5 1f       	adc	r27, r21
    5352:	89 83       	std	Y+1, r24	; 0x01
    5354:	9a 83       	std	Y+2, r25	; 0x02
    5356:	ab 83       	std	Y+3, r26	; 0x03
    5358:	bc 83       	std	Y+4, r27	; 0x04
// read fixed length parameter from input
{
  uint32_t  value = 0L;
  uint8_t c;
  UINT d;
  for (uint8_t i=0; i<nLen; i++)
    535a:	8d 81       	ldd	r24, Y+5	; 0x05
    535c:	8f 5f       	subi	r24, 0xFF	; 255
    535e:	8d 83       	std	Y+5, r24	; 0x05
    5360:	9d 81       	ldd	r25, Y+5	; 0x05
    5362:	8b 85       	ldd	r24, Y+11	; 0x0b
    5364:	98 17       	cp	r25, r24
    5366:	c0 f2       	brcs	.-80     	; 0x5318 <readMultiByte+0x26>
  {
    f_read(f,&c,1,&d);
	value = (value << 8) + c;
  }
  
  return(value);
    5368:	89 81       	ldd	r24, Y+1	; 0x01
    536a:	9a 81       	ldd	r25, Y+2	; 0x02
    536c:	ab 81       	ldd	r26, Y+3	; 0x03
    536e:	bc 81       	ldd	r27, Y+4	; 0x04
}
    5370:	bc 01       	movw	r22, r24
    5372:	cd 01       	movw	r24, r26
    5374:	2b 96       	adiw	r28, 0x0b	; 11
    5376:	0f b6       	in	r0, 0x3f	; 63
    5378:	f8 94       	cli
    537a:	de bf       	out	0x3e, r29	; 62
    537c:	0f be       	out	0x3f, r0	; 63
    537e:	cd bf       	out	0x3d, r28	; 61
    5380:	df 91       	pop	r29
    5382:	cf 91       	pop	r28
    5384:	08 95       	ret

00005386 <readVarLen>:

uint32_t readVarLen(FIL *f)
// read variable length parameter from input
{
    5386:	cf 93       	push	r28
    5388:	df 93       	push	r29
    538a:	cd b7       	in	r28, 0x3d	; 61
    538c:	de b7       	in	r29, 0x3e	; 62
    538e:	2a 97       	sbiw	r28, 0x0a	; 10
    5390:	0f b6       	in	r0, 0x3f	; 63
    5392:	f8 94       	cli
    5394:	de bf       	out	0x3e, r29	; 62
    5396:	0f be       	out	0x3f, r0	; 63
    5398:	cd bf       	out	0x3d, r28	; 61
    539a:	9a 87       	std	Y+10, r25	; 0x0a
    539c:	89 87       	std	Y+9, r24	; 0x09
  uint32_t  value = 0;
    539e:	19 82       	std	Y+1, r1	; 0x01
    53a0:	1a 82       	std	Y+2, r1	; 0x02
    53a2:	1b 82       	std	Y+3, r1	; 0x03
    53a4:	1c 82       	std	Y+4, r1	; 0x04
  uint8_t      c;
  UINT d;
  FRESULT res;
  do
  {
    res = f_read(f,&c,1,&d);
    53a6:	9e 01       	movw	r18, r28
    53a8:	29 5f       	subi	r18, 0xF9	; 249
    53aa:	3f 4f       	sbci	r19, 0xFF	; 255
    53ac:	be 01       	movw	r22, r28
    53ae:	6a 5f       	subi	r22, 0xFA	; 250
    53b0:	7f 4f       	sbci	r23, 0xFF	; 255
    53b2:	89 85       	ldd	r24, Y+9	; 0x09
    53b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    53b6:	41 e0       	ldi	r20, 0x01	; 1
    53b8:	50 e0       	ldi	r21, 0x00	; 0
    53ba:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <f_read>
    53be:	8d 83       	std	Y+5, r24	; 0x05
    value = (value << 7) + (c & 0x7f);
    53c0:	89 81       	ldd	r24, Y+1	; 0x01
    53c2:	9a 81       	ldd	r25, Y+2	; 0x02
    53c4:	ab 81       	ldd	r26, Y+3	; 0x03
    53c6:	bc 81       	ldd	r27, Y+4	; 0x04
    53c8:	88 0f       	add	r24, r24
    53ca:	99 1f       	adc	r25, r25
    53cc:	aa 1f       	adc	r26, r26
    53ce:	bb 1f       	adc	r27, r27
    53d0:	88 0f       	add	r24, r24
    53d2:	99 1f       	adc	r25, r25
    53d4:	aa 1f       	adc	r26, r26
    53d6:	bb 1f       	adc	r27, r27
    53d8:	88 0f       	add	r24, r24
    53da:	99 1f       	adc	r25, r25
    53dc:	aa 1f       	adc	r26, r26
    53de:	bb 1f       	adc	r27, r27
    53e0:	88 0f       	add	r24, r24
    53e2:	99 1f       	adc	r25, r25
    53e4:	aa 1f       	adc	r26, r26
    53e6:	bb 1f       	adc	r27, r27
    53e8:	88 0f       	add	r24, r24
    53ea:	99 1f       	adc	r25, r25
    53ec:	aa 1f       	adc	r26, r26
    53ee:	bb 1f       	adc	r27, r27
    53f0:	88 0f       	add	r24, r24
    53f2:	99 1f       	adc	r25, r25
    53f4:	aa 1f       	adc	r26, r26
    53f6:	bb 1f       	adc	r27, r27
    53f8:	88 0f       	add	r24, r24
    53fa:	99 1f       	adc	r25, r25
    53fc:	aa 1f       	adc	r26, r26
    53fe:	bb 1f       	adc	r27, r27
    5400:	9c 01       	movw	r18, r24
    5402:	ad 01       	movw	r20, r26
    5404:	8e 81       	ldd	r24, Y+6	; 0x06
    5406:	88 2f       	mov	r24, r24
    5408:	90 e0       	ldi	r25, 0x00	; 0
    540a:	a0 e0       	ldi	r26, 0x00	; 0
    540c:	b0 e0       	ldi	r27, 0x00	; 0
    540e:	8f 77       	andi	r24, 0x7F	; 127
    5410:	99 27       	eor	r25, r25
    5412:	aa 27       	eor	r26, r26
    5414:	bb 27       	eor	r27, r27
    5416:	82 0f       	add	r24, r18
    5418:	93 1f       	adc	r25, r19
    541a:	a4 1f       	adc	r26, r20
    541c:	b5 1f       	adc	r27, r21
    541e:	89 83       	std	Y+1, r24	; 0x01
    5420:	9a 83       	std	Y+2, r25	; 0x02
    5422:	ab 83       	std	Y+3, r26	; 0x03
    5424:	bc 83       	std	Y+4, r27	; 0x04
  }  while (c & 0x80);
    5426:	8e 81       	ldd	r24, Y+6	; 0x06
    5428:	88 23       	and	r24, r24
    542a:	0c f4       	brge	.+2      	; 0x542e <readVarLen+0xa8>
    542c:	bc cf       	rjmp	.-136    	; 0x53a6 <readVarLen+0x20>
  
  return(value);
    542e:	89 81       	ldd	r24, Y+1	; 0x01
    5430:	9a 81       	ldd	r25, Y+2	; 0x02
    5432:	ab 81       	ldd	r26, Y+3	; 0x03
    5434:	bc 81       	ldd	r27, Y+4	; 0x04
}
    5436:	bc 01       	movw	r22, r24
    5438:	cd 01       	movw	r24, r26
    543a:	2a 96       	adiw	r28, 0x0a	; 10
    543c:	0f b6       	in	r0, 0x3f	; 63
    543e:	f8 94       	cli
    5440:	de bf       	out	0x3e, r29	; 62
    5442:	0f be       	out	0x3f, r0	; 63
    5444:	cd bf       	out	0x3d, r28	; 61
    5446:	df 91       	pop	r29
    5448:	cf 91       	pop	r28
    544a:	08 95       	ret

0000544c <resetTrack>:

uint32_t getLength(struct MD_MFTrack *t)
// size of track in bytes
{
  return t->_length;
}
    544c:	cf 93       	push	r28
    544e:	df 93       	push	r29
    5450:	00 d0       	rcall	.+0      	; 0x5452 <resetTrack+0x6>
    5452:	cd b7       	in	r28, 0x3d	; 61
    5454:	de b7       	in	r29, 0x3e	; 62
    5456:	9a 83       	std	Y+2, r25	; 0x02
    5458:	89 83       	std	Y+1, r24	; 0x01
    545a:	89 81       	ldd	r24, Y+1	; 0x01
    545c:	9a 81       	ldd	r25, Y+2	; 0x02
    545e:	fc 01       	movw	r30, r24
    5460:	11 82       	std	Z+1, r1	; 0x01
    5462:	12 82       	std	Z+2, r1	; 0x02
    5464:	13 82       	std	Z+3, r1	; 0x03
    5466:	14 82       	std	Z+4, r1	; 0x04
    5468:	89 81       	ldd	r24, Y+1	; 0x01
    546a:	9a 81       	ldd	r25, Y+2	; 0x02
    546c:	fc 01       	movw	r30, r24
    546e:	15 82       	std	Z+5, r1	; 0x05
    5470:	16 82       	std	Z+6, r1	; 0x06
    5472:	17 82       	std	Z+7, r1	; 0x07
    5474:	10 86       	std	Z+8, r1	; 0x08
    5476:	89 81       	ldd	r24, Y+1	; 0x01
    5478:	9a 81       	ldd	r25, Y+2	; 0x02
    547a:	0e 94 7f 2a 	call	0x54fe	; 0x54fe <restartTrack>
    547e:	89 81       	ldd	r24, Y+1	; 0x01
    5480:	9a 81       	ldd	r25, Y+2	; 0x02
    5482:	2f ef       	ldi	r18, 0xFF	; 255
    5484:	fc 01       	movw	r30, r24
    5486:	20 83       	st	Z, r18
    5488:	00 00       	nop
    548a:	0f 90       	pop	r0
    548c:	0f 90       	pop	r0
    548e:	df 91       	pop	r29
    5490:	cf 91       	pop	r28
    5492:	08 95       	ret

00005494 <closeTrack>:
    5494:	cf 93       	push	r28
    5496:	df 93       	push	r29
    5498:	00 d0       	rcall	.+0      	; 0x549a <closeTrack+0x6>
    549a:	cd b7       	in	r28, 0x3d	; 61
    549c:	de b7       	in	r29, 0x3e	; 62
    549e:	9a 83       	std	Y+2, r25	; 0x02
    54a0:	89 83       	std	Y+1, r24	; 0x01
    54a2:	89 81       	ldd	r24, Y+1	; 0x01
    54a4:	9a 81       	ldd	r25, Y+2	; 0x02
    54a6:	0e 94 26 2a 	call	0x544c	; 0x544c <resetTrack>
    54aa:	00 00       	nop
    54ac:	0f 90       	pop	r0
    54ae:	0f 90       	pop	r0
    54b0:	df 91       	pop	r29
    54b2:	cf 91       	pop	r28
    54b4:	08 95       	ret

000054b6 <getEndOfTrack>:

BOOL getEndOfTrack(struct MD_MFTrack *t)
// true if end of track has been reached
{
    54b6:	cf 93       	push	r28
    54b8:	df 93       	push	r29
    54ba:	00 d0       	rcall	.+0      	; 0x54bc <getEndOfTrack+0x6>
    54bc:	cd b7       	in	r28, 0x3d	; 61
    54be:	de b7       	in	r29, 0x3e	; 62
    54c0:	9a 83       	std	Y+2, r25	; 0x02
    54c2:	89 83       	std	Y+1, r24	; 0x01
  return t->_endOfTrack;
    54c4:	89 81       	ldd	r24, Y+1	; 0x01
    54c6:	9a 81       	ldd	r25, Y+2	; 0x02
    54c8:	fc 01       	movw	r30, r24
    54ca:	85 85       	ldd	r24, Z+13	; 0x0d
}
    54cc:	0f 90       	pop	r0
    54ce:	0f 90       	pop	r0
    54d0:	df 91       	pop	r29
    54d2:	cf 91       	pop	r28
    54d4:	08 95       	ret

000054d6 <syncTime>:

void syncTime(struct MD_MFTrack *t)
{
    54d6:	cf 93       	push	r28
    54d8:	df 93       	push	r29
    54da:	00 d0       	rcall	.+0      	; 0x54dc <syncTime+0x6>
    54dc:	cd b7       	in	r28, 0x3d	; 61
    54de:	de b7       	in	r29, 0x3e	; 62
    54e0:	9a 83       	std	Y+2, r25	; 0x02
    54e2:	89 83       	std	Y+1, r24	; 0x01
  t->_elapsedTicks = 0;
    54e4:	89 81       	ldd	r24, Y+1	; 0x01
    54e6:	9a 81       	ldd	r25, Y+2	; 0x02
    54e8:	fc 01       	movw	r30, r24
    54ea:	16 86       	std	Z+14, r1	; 0x0e
    54ec:	17 86       	std	Z+15, r1	; 0x0f
    54ee:	10 8a       	std	Z+16, r1	; 0x10
    54f0:	11 8a       	std	Z+17, r1	; 0x11
}
    54f2:	00 00       	nop
    54f4:	0f 90       	pop	r0
    54f6:	0f 90       	pop	r0
    54f8:	df 91       	pop	r29
    54fa:	cf 91       	pop	r28
    54fc:	08 95       	ret

000054fe <restartTrack>:

void restartTrack(struct MD_MFTrack *t)
// Start playing the track from the beginning again
{
    54fe:	cf 93       	push	r28
    5500:	df 93       	push	r29
    5502:	00 d0       	rcall	.+0      	; 0x5504 <restartTrack+0x6>
    5504:	cd b7       	in	r28, 0x3d	; 61
    5506:	de b7       	in	r29, 0x3e	; 62
    5508:	9a 83       	std	Y+2, r25	; 0x02
    550a:	89 83       	std	Y+1, r24	; 0x01
  t->_currOffset = 0;
    550c:	89 81       	ldd	r24, Y+1	; 0x01
    550e:	9a 81       	ldd	r25, Y+2	; 0x02
    5510:	fc 01       	movw	r30, r24
    5512:	11 86       	std	Z+9, r1	; 0x09
    5514:	12 86       	std	Z+10, r1	; 0x0a
    5516:	13 86       	std	Z+11, r1	; 0x0b
    5518:	14 86       	std	Z+12, r1	; 0x0c
  t->_endOfTrack = FALSE;
    551a:	89 81       	ldd	r24, Y+1	; 0x01
    551c:	9a 81       	ldd	r25, Y+2	; 0x02
    551e:	fc 01       	movw	r30, r24
    5520:	15 86       	std	Z+13, r1	; 0x0d
  t->_elapsedTicks = 0;
    5522:	89 81       	ldd	r24, Y+1	; 0x01
    5524:	9a 81       	ldd	r25, Y+2	; 0x02
    5526:	fc 01       	movw	r30, r24
    5528:	16 86       	std	Z+14, r1	; 0x0e
    552a:	17 86       	std	Z+15, r1	; 0x0f
    552c:	10 8a       	std	Z+16, r1	; 0x10
    552e:	11 8a       	std	Z+17, r1	; 0x11
}
    5530:	00 00       	nop
    5532:	0f 90       	pop	r0
    5534:	0f 90       	pop	r0
    5536:	df 91       	pop	r29
    5538:	cf 91       	pop	r28
    553a:	08 95       	ret

0000553c <getNextTrackEvent>:

BOOL getNextTrackEvent(struct MD_MIDIFile *mf,struct MD_MFTrack *t, uint16_t tickCount)
// track_event = <time:v> + [<midi_event> | <meta_event> | <sysex_event>]
{
    553c:	ef 92       	push	r14
    553e:	ff 92       	push	r15
    5540:	0f 93       	push	r16
    5542:	1f 93       	push	r17
    5544:	cf 93       	push	r28
    5546:	df 93       	push	r29
    5548:	cd b7       	in	r28, 0x3d	; 61
    554a:	de b7       	in	r29, 0x3e	; 62
    554c:	2a 97       	sbiw	r28, 0x0a	; 10
    554e:	0f b6       	in	r0, 0x3f	; 63
    5550:	f8 94       	cli
    5552:	de bf       	out	0x3e, r29	; 62
    5554:	0f be       	out	0x3f, r0	; 63
    5556:	cd bf       	out	0x3d, r28	; 61
    5558:	9e 83       	std	Y+6, r25	; 0x06
    555a:	8d 83       	std	Y+5, r24	; 0x05
    555c:	78 87       	std	Y+8, r23	; 0x08
    555e:	6f 83       	std	Y+7, r22	; 0x07
    5560:	5a 87       	std	Y+10, r21	; 0x0a
    5562:	49 87       	std	Y+9, r20	; 0x09
  uint32_t deltaT;

  // is there anything to process?
  if (t->_endOfTrack)
    5564:	8f 81       	ldd	r24, Y+7	; 0x07
    5566:	98 85       	ldd	r25, Y+8	; 0x08
    5568:	fc 01       	movw	r30, r24
    556a:	85 85       	ldd	r24, Z+13	; 0x0d
    556c:	88 23       	and	r24, r24
    556e:	11 f0       	breq	.+4      	; 0x5574 <getNextTrackEvent+0x38>
    return(FALSE);
    5570:	80 e0       	ldi	r24, 0x00	; 0
    5572:	b1 c0       	rjmp	.+354    	; 0x56d6 <getNextTrackEvent+0x19a>

  // move the file pointer to where we left off
  f_lseek(&mf->_fd,t->_startOffset+t->_currOffset);  
    5574:	8f 81       	ldd	r24, Y+7	; 0x07
    5576:	98 85       	ldd	r25, Y+8	; 0x08
    5578:	fc 01       	movw	r30, r24
    557a:	25 81       	ldd	r18, Z+5	; 0x05
    557c:	36 81       	ldd	r19, Z+6	; 0x06
    557e:	47 81       	ldd	r20, Z+7	; 0x07
    5580:	50 85       	ldd	r21, Z+8	; 0x08
    5582:	8f 81       	ldd	r24, Y+7	; 0x07
    5584:	98 85       	ldd	r25, Y+8	; 0x08
    5586:	fc 01       	movw	r30, r24
    5588:	81 85       	ldd	r24, Z+9	; 0x09
    558a:	92 85       	ldd	r25, Z+10	; 0x0a
    558c:	a3 85       	ldd	r26, Z+11	; 0x0b
    558e:	b4 85       	ldd	r27, Z+12	; 0x0c
    5590:	82 0f       	add	r24, r18
    5592:	93 1f       	adc	r25, r19
    5594:	a4 1f       	adc	r26, r20
    5596:	b5 1f       	adc	r27, r21
    5598:	2d 81       	ldd	r18, Y+5	; 0x05
    559a:	3e 81       	ldd	r19, Y+6	; 0x06
    559c:	2a 5f       	subi	r18, 0xFA	; 250
    559e:	3f 4f       	sbci	r19, 0xFF	; 255
    55a0:	ac 01       	movw	r20, r24
    55a2:	bd 01       	movw	r22, r26
    55a4:	c9 01       	movw	r24, r18
    55a6:	0e 94 1c 1b 	call	0x3638	; 0x3638 <f_lseek>

  // Work out new total elapsed ticks - include the overshoot from
  // last event.
  t->_elapsedTicks += tickCount;
    55aa:	8f 81       	ldd	r24, Y+7	; 0x07
    55ac:	98 85       	ldd	r25, Y+8	; 0x08
    55ae:	fc 01       	movw	r30, r24
    55b0:	26 85       	ldd	r18, Z+14	; 0x0e
    55b2:	37 85       	ldd	r19, Z+15	; 0x0f
    55b4:	40 89       	ldd	r20, Z+16	; 0x10
    55b6:	51 89       	ldd	r21, Z+17	; 0x11
    55b8:	89 85       	ldd	r24, Y+9	; 0x09
    55ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    55bc:	cc 01       	movw	r24, r24
    55be:	a0 e0       	ldi	r26, 0x00	; 0
    55c0:	b0 e0       	ldi	r27, 0x00	; 0
    55c2:	82 0f       	add	r24, r18
    55c4:	93 1f       	adc	r25, r19
    55c6:	a4 1f       	adc	r26, r20
    55c8:	b5 1f       	adc	r27, r21
    55ca:	2f 81       	ldd	r18, Y+7	; 0x07
    55cc:	38 85       	ldd	r19, Y+8	; 0x08
    55ce:	f9 01       	movw	r30, r18
    55d0:	86 87       	std	Z+14, r24	; 0x0e
    55d2:	97 87       	std	Z+15, r25	; 0x0f
    55d4:	a0 8b       	std	Z+16, r26	; 0x10
    55d6:	b1 8b       	std	Z+17, r27	; 0x11

  // Get the DeltaT from the file in order to see if enough ticks have
  // passed for the event to be active.
  deltaT = readVarLen(&mf->_fd);
    55d8:	8d 81       	ldd	r24, Y+5	; 0x05
    55da:	9e 81       	ldd	r25, Y+6	; 0x06
    55dc:	06 96       	adiw	r24, 0x06	; 6
    55de:	0e 94 c3 29 	call	0x5386	; 0x5386 <readVarLen>
    55e2:	dc 01       	movw	r26, r24
    55e4:	cb 01       	movw	r24, r22
    55e6:	89 83       	std	Y+1, r24	; 0x01
    55e8:	9a 83       	std	Y+2, r25	; 0x02
    55ea:	ab 83       	std	Y+3, r26	; 0x03
    55ec:	bc 83       	std	Y+4, r27	; 0x04

  // If not enough ticks, just return without saving the file pointer and 
  // we will go back to the same spot next time.
  if (t->_elapsedTicks < deltaT)
    55ee:	8f 81       	ldd	r24, Y+7	; 0x07
    55f0:	98 85       	ldd	r25, Y+8	; 0x08
    55f2:	fc 01       	movw	r30, r24
    55f4:	26 85       	ldd	r18, Z+14	; 0x0e
    55f6:	37 85       	ldd	r19, Z+15	; 0x0f
    55f8:	40 89       	ldd	r20, Z+16	; 0x10
    55fa:	51 89       	ldd	r21, Z+17	; 0x11
    55fc:	89 81       	ldd	r24, Y+1	; 0x01
    55fe:	9a 81       	ldd	r25, Y+2	; 0x02
    5600:	ab 81       	ldd	r26, Y+3	; 0x03
    5602:	bc 81       	ldd	r27, Y+4	; 0x04
    5604:	28 17       	cp	r18, r24
    5606:	39 07       	cpc	r19, r25
    5608:	4a 07       	cpc	r20, r26
    560a:	5b 07       	cpc	r21, r27
    560c:	10 f4       	brcc	.+4      	; 0x5612 <getNextTrackEvent+0xd6>
    return(FALSE);
    560e:	80 e0       	ldi	r24, 0x00	; 0
    5610:	62 c0       	rjmp	.+196    	; 0x56d6 <getNextTrackEvent+0x19a>

  // Adjust the total elapsed time to the error against actual DeltaT to avoid 
  // accumulation of errors, as we only check for _elapsedTicks being >= ticks,
  // giving positive biased errors every time.
  t->_elapsedTicks -= deltaT;
    5612:	8f 81       	ldd	r24, Y+7	; 0x07
    5614:	98 85       	ldd	r25, Y+8	; 0x08
    5616:	fc 01       	movw	r30, r24
    5618:	26 85       	ldd	r18, Z+14	; 0x0e
    561a:	37 85       	ldd	r19, Z+15	; 0x0f
    561c:	40 89       	ldd	r20, Z+16	; 0x10
    561e:	51 89       	ldd	r21, Z+17	; 0x11
    5620:	89 81       	ldd	r24, Y+1	; 0x01
    5622:	9a 81       	ldd	r25, Y+2	; 0x02
    5624:	ab 81       	ldd	r26, Y+3	; 0x03
    5626:	bc 81       	ldd	r27, Y+4	; 0x04
    5628:	79 01       	movw	r14, r18
    562a:	8a 01       	movw	r16, r20
    562c:	e8 1a       	sub	r14, r24
    562e:	f9 0a       	sbc	r15, r25
    5630:	0a 0b       	sbc	r16, r26
    5632:	1b 0b       	sbc	r17, r27
    5634:	d8 01       	movw	r26, r16
    5636:	c7 01       	movw	r24, r14
    5638:	2f 81       	ldd	r18, Y+7	; 0x07
    563a:	38 85       	ldd	r19, Y+8	; 0x08
    563c:	f9 01       	movw	r30, r18
    563e:	86 87       	std	Z+14, r24	; 0x0e
    5640:	97 87       	std	Z+15, r25	; 0x0f
    5642:	a0 8b       	std	Z+16, r26	; 0x10
    5644:	b1 8b       	std	Z+17, r27	; 0x11

  DUMP("\ndT: ", deltaT);
  DUMP(" + ", _elapsedTicks);
  DUMPS("\t");

  parseEvent(mf,t);
    5646:	2f 81       	ldd	r18, Y+7	; 0x07
    5648:	38 85       	ldd	r19, Y+8	; 0x08
    564a:	8d 81       	ldd	r24, Y+5	; 0x05
    564c:	9e 81       	ldd	r25, Y+6	; 0x06
    564e:	b9 01       	movw	r22, r18
    5650:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <parseEvent>

  // remember the offset for next time
  t->_currOffset = mf->_fd.fptr - t->_startOffset;
    5654:	8d 81       	ldd	r24, Y+5	; 0x05
    5656:	9e 81       	ldd	r25, Y+6	; 0x06
    5658:	fc 01       	movw	r30, r24
    565a:	24 85       	ldd	r18, Z+12	; 0x0c
    565c:	35 85       	ldd	r19, Z+13	; 0x0d
    565e:	46 85       	ldd	r20, Z+14	; 0x0e
    5660:	57 85       	ldd	r21, Z+15	; 0x0f
    5662:	8f 81       	ldd	r24, Y+7	; 0x07
    5664:	98 85       	ldd	r25, Y+8	; 0x08
    5666:	fc 01       	movw	r30, r24
    5668:	85 81       	ldd	r24, Z+5	; 0x05
    566a:	96 81       	ldd	r25, Z+6	; 0x06
    566c:	a7 81       	ldd	r26, Z+7	; 0x07
    566e:	b0 85       	ldd	r27, Z+8	; 0x08
    5670:	79 01       	movw	r14, r18
    5672:	8a 01       	movw	r16, r20
    5674:	e8 1a       	sub	r14, r24
    5676:	f9 0a       	sbc	r15, r25
    5678:	0a 0b       	sbc	r16, r26
    567a:	1b 0b       	sbc	r17, r27
    567c:	d8 01       	movw	r26, r16
    567e:	c7 01       	movw	r24, r14
    5680:	2f 81       	ldd	r18, Y+7	; 0x07
    5682:	38 85       	ldd	r19, Y+8	; 0x08
    5684:	f9 01       	movw	r30, r18
    5686:	81 87       	std	Z+9, r24	; 0x09
    5688:	92 87       	std	Z+10, r25	; 0x0a
    568a:	a3 87       	std	Z+11, r26	; 0x0b
    568c:	b4 87       	std	Z+12, r27	; 0x0c

  // catch end of track when there is no META event  
  t->_endOfTrack = t->_endOfTrack || (t->_currOffset >= t->_length);
    568e:	8f 81       	ldd	r24, Y+7	; 0x07
    5690:	98 85       	ldd	r25, Y+8	; 0x08
    5692:	fc 01       	movw	r30, r24
    5694:	85 85       	ldd	r24, Z+13	; 0x0d
    5696:	88 23       	and	r24, r24
    5698:	99 f4       	brne	.+38     	; 0x56c0 <getNextTrackEvent+0x184>
    569a:	8f 81       	ldd	r24, Y+7	; 0x07
    569c:	98 85       	ldd	r25, Y+8	; 0x08
    569e:	fc 01       	movw	r30, r24
    56a0:	21 85       	ldd	r18, Z+9	; 0x09
    56a2:	32 85       	ldd	r19, Z+10	; 0x0a
    56a4:	43 85       	ldd	r20, Z+11	; 0x0b
    56a6:	54 85       	ldd	r21, Z+12	; 0x0c
    56a8:	8f 81       	ldd	r24, Y+7	; 0x07
    56aa:	98 85       	ldd	r25, Y+8	; 0x08
    56ac:	fc 01       	movw	r30, r24
    56ae:	81 81       	ldd	r24, Z+1	; 0x01
    56b0:	92 81       	ldd	r25, Z+2	; 0x02
    56b2:	a3 81       	ldd	r26, Z+3	; 0x03
    56b4:	b4 81       	ldd	r27, Z+4	; 0x04
    56b6:	28 17       	cp	r18, r24
    56b8:	39 07       	cpc	r19, r25
    56ba:	4a 07       	cpc	r20, r26
    56bc:	5b 07       	cpc	r21, r27
    56be:	18 f0       	brcs	.+6      	; 0x56c6 <getNextTrackEvent+0x18a>
    56c0:	81 e0       	ldi	r24, 0x01	; 1
    56c2:	90 e0       	ldi	r25, 0x00	; 0
    56c4:	02 c0       	rjmp	.+4      	; 0x56ca <getNextTrackEvent+0x18e>
    56c6:	80 e0       	ldi	r24, 0x00	; 0
    56c8:	90 e0       	ldi	r25, 0x00	; 0
    56ca:	28 2f       	mov	r18, r24
    56cc:	8f 81       	ldd	r24, Y+7	; 0x07
    56ce:	98 85       	ldd	r25, Y+8	; 0x08
    56d0:	fc 01       	movw	r30, r24
    56d2:	25 87       	std	Z+13, r18	; 0x0d
  if (t->_endOfTrack) DUMPS(" - OUT OF TRACK");

  return(TRUE);
    56d4:	81 e0       	ldi	r24, 0x01	; 1
}
    56d6:	2a 96       	adiw	r28, 0x0a	; 10
    56d8:	0f b6       	in	r0, 0x3f	; 63
    56da:	f8 94       	cli
    56dc:	de bf       	out	0x3e, r29	; 62
    56de:	0f be       	out	0x3f, r0	; 63
    56e0:	cd bf       	out	0x3d, r28	; 61
    56e2:	df 91       	pop	r29
    56e4:	cf 91       	pop	r28
    56e6:	1f 91       	pop	r17
    56e8:	0f 91       	pop	r16
    56ea:	ff 90       	pop	r15
    56ec:	ef 90       	pop	r14
    56ee:	08 95       	ret

000056f0 <parseEvent>:

void parseEvent(struct MD_MIDIFile *mf,struct MD_MFTrack *t)
// process the event from the physical file
{
    56f0:	cf 93       	push	r28
    56f2:	df 93       	push	r29
    56f4:	cd b7       	in	r28, 0x3d	; 61
    56f6:	de b7       	in	r29, 0x3e	; 62
    56f8:	c9 57       	subi	r28, 0x79	; 121
    56fa:	d1 09       	sbc	r29, r1
    56fc:	0f b6       	in	r0, 0x3f	; 63
    56fe:	f8 94       	cli
    5700:	de bf       	out	0x3e, r29	; 62
    5702:	0f be       	out	0x3f, r0	; 63
    5704:	cd bf       	out	0x3d, r28	; 61
    5706:	9e 01       	movw	r18, r28
    5708:	2a 58       	subi	r18, 0x8A	; 138
    570a:	3f 4f       	sbci	r19, 0xFF	; 255
    570c:	f9 01       	movw	r30, r18
    570e:	91 83       	std	Z+1, r25	; 0x01
    5710:	80 83       	st	Z, r24
    5712:	ce 01       	movw	r24, r28
    5714:	88 58       	subi	r24, 0x88	; 136
    5716:	9f 4f       	sbci	r25, 0xFF	; 255
    5718:	fc 01       	movw	r30, r24
    571a:	71 83       	std	Z+1, r23	; 0x01
    571c:	60 83       	st	Z, r22
  uint8_t eType;
  uint32_t eLen, mLen;
  UINT bRead;
  // now we have to process this event
  f_read(&mf->_fd,&eType,1,&bRead);
    571e:	ce 01       	movw	r24, r28
    5720:	8a 58       	subi	r24, 0x8A	; 138
    5722:	9f 4f       	sbci	r25, 0xFF	; 255
    5724:	fc 01       	movw	r30, r24
    5726:	80 81       	ld	r24, Z
    5728:	91 81       	ldd	r25, Z+1	; 0x01
    572a:	06 96       	adiw	r24, 0x06	; 6
    572c:	9e 01       	movw	r18, r28
    572e:	2a 5e       	subi	r18, 0xEA	; 234
    5730:	3f 4f       	sbci	r19, 0xFF	; 255
    5732:	be 01       	movw	r22, r28
    5734:	6b 5e       	subi	r22, 0xEB	; 235
    5736:	7f 4f       	sbci	r23, 0xFF	; 255
    5738:	41 e0       	ldi	r20, 0x01	; 1
    573a:	50 e0       	ldi	r21, 0x00	; 0
    573c:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <f_read>

  switch (eType)
    5740:	8d 89       	ldd	r24, Y+21	; 0x15
    5742:	88 2f       	mov	r24, r24
    5744:	90 e0       	ldi	r25, 0x00	; 0
    5746:	80 3e       	cpi	r24, 0xE0	; 224
    5748:	91 05       	cpc	r25, r1
    574a:	64 f4       	brge	.+24     	; 0x5764 <parseEvent+0x74>
    574c:	80 3c       	cpi	r24, 0xC0	; 192
    574e:	91 05       	cpc	r25, r1
    5750:	0c f0       	brlt	.+2      	; 0x5754 <parseEvent+0x64>
    5752:	9b c0       	rjmp	.+310    	; 0x588a <parseEvent+0x19a>
    5754:	99 23       	and	r25, r25
    5756:	0c f4       	brge	.+2      	; 0x575a <parseEvent+0x6a>
    5758:	6f c4       	rjmp	.+2270   	; 0x6038 <parseEvent+0x948>
    575a:	80 38       	cpi	r24, 0x80	; 128
    575c:	91 05       	cpc	r25, r1
    575e:	0c f4       	brge	.+2      	; 0x5762 <parseEvent+0x72>
    5760:	00 c1       	rjmp	.+512    	; 0x5962 <parseEvent+0x272>
    5762:	10 c0       	rjmp	.+32     	; 0x5784 <parseEvent+0x94>
    5764:	80 3f       	cpi	r24, 0xF0	; 240
    5766:	91 05       	cpc	r25, r1
    5768:	09 f4       	brne	.+2      	; 0x576c <parseEvent+0x7c>
    576a:	5b c1       	rjmp	.+694    	; 0x5a22 <parseEvent+0x332>
    576c:	80 3f       	cpi	r24, 0xF0	; 240
    576e:	91 05       	cpc	r25, r1
    5770:	4c f0       	brlt	.+18     	; 0x5784 <parseEvent+0x94>
    5772:	87 3f       	cpi	r24, 0xF7	; 247
    5774:	91 05       	cpc	r25, r1
    5776:	09 f4       	brne	.+2      	; 0x577a <parseEvent+0x8a>
    5778:	54 c1       	rjmp	.+680    	; 0x5a22 <parseEvent+0x332>
    577a:	8f 3f       	cpi	r24, 0xFF	; 255
    577c:	91 05       	cpc	r25, r1
    577e:	09 f4       	brne	.+2      	; 0x5782 <parseEvent+0x92>
    5780:	fe c1       	rjmp	.+1020   	; 0x5b7e <parseEvent+0x48e>
    5782:	5a c4       	rjmp	.+2228   	; 0x6038 <parseEvent+0x948>
    // Midi events (status bytes 0x8n - 0xEn) The standard Channel MIDI messages, where 'n' is the MIDI channel (0 - 15).
    // This status byte will be followed by 1 or 2 data bytes, as is usual for the particular MIDI message. 
    // Any valid Channel MIDI message can be included in a MIDI file.
  case 0x80 ... 0xBf: // MIDI message with 2 parameters
  case 0xe0 ... 0xef:
    t->_mev.size = 3;
    5784:	ce 01       	movw	r24, r28
    5786:	88 58       	subi	r24, 0x88	; 136
    5788:	9f 4f       	sbci	r25, 0xFF	; 255
    578a:	fc 01       	movw	r30, r24
    578c:	80 81       	ld	r24, Z
    578e:	91 81       	ldd	r25, Z+1	; 0x01
    5790:	23 e0       	ldi	r18, 0x03	; 3
    5792:	fc 01       	movw	r30, r24
    5794:	24 8b       	std	Z+20, r18	; 0x14
    t->_mev.data[0] = eType;
    5796:	2d 89       	ldd	r18, Y+21	; 0x15
    5798:	ce 01       	movw	r24, r28
    579a:	88 58       	subi	r24, 0x88	; 136
    579c:	9f 4f       	sbci	r25, 0xFF	; 255
    579e:	fc 01       	movw	r30, r24
    57a0:	80 81       	ld	r24, Z
    57a2:	91 81       	ldd	r25, Z+1	; 0x01
    57a4:	fc 01       	movw	r30, r24
    57a6:	25 8b       	std	Z+21, r18	; 0x15
    t->_mev.channel = t->_mev.data[0] & 0xf;  // mask off the channel
    57a8:	ce 01       	movw	r24, r28
    57aa:	88 58       	subi	r24, 0x88	; 136
    57ac:	9f 4f       	sbci	r25, 0xFF	; 255
    57ae:	fc 01       	movw	r30, r24
    57b0:	80 81       	ld	r24, Z
    57b2:	91 81       	ldd	r25, Z+1	; 0x01
    57b4:	fc 01       	movw	r30, r24
    57b6:	85 89       	ldd	r24, Z+21	; 0x15
    57b8:	28 2f       	mov	r18, r24
    57ba:	2f 70       	andi	r18, 0x0F	; 15
    57bc:	ce 01       	movw	r24, r28
    57be:	88 58       	subi	r24, 0x88	; 136
    57c0:	9f 4f       	sbci	r25, 0xFF	; 255
    57c2:	fc 01       	movw	r30, r24
    57c4:	80 81       	ld	r24, Z
    57c6:	91 81       	ldd	r25, Z+1	; 0x01
    57c8:	fc 01       	movw	r30, r24
    57ca:	23 8b       	std	Z+19, r18	; 0x13
    t->_mev.data[0] = t->_mev.data[0] & 0xf0; // just the command byte
    57cc:	ce 01       	movw	r24, r28
    57ce:	88 58       	subi	r24, 0x88	; 136
    57d0:	9f 4f       	sbci	r25, 0xFF	; 255
    57d2:	fc 01       	movw	r30, r24
    57d4:	80 81       	ld	r24, Z
    57d6:	91 81       	ldd	r25, Z+1	; 0x01
    57d8:	fc 01       	movw	r30, r24
    57da:	85 89       	ldd	r24, Z+21	; 0x15
    57dc:	28 2f       	mov	r18, r24
    57de:	20 7f       	andi	r18, 0xF0	; 240
    57e0:	ce 01       	movw	r24, r28
    57e2:	88 58       	subi	r24, 0x88	; 136
    57e4:	9f 4f       	sbci	r25, 0xFF	; 255
    57e6:	fc 01       	movw	r30, r24
    57e8:	80 81       	ld	r24, Z
    57ea:	91 81       	ldd	r25, Z+1	; 0x01
    57ec:	fc 01       	movw	r30, r24
    57ee:	25 8b       	std	Z+21, r18	; 0x15
    f_read(&mf->_fd,&t->_mev.data[1],1,&bRead);
    57f0:	ce 01       	movw	r24, r28
    57f2:	88 58       	subi	r24, 0x88	; 136
    57f4:	9f 4f       	sbci	r25, 0xFF	; 255
    57f6:	fc 01       	movw	r30, r24
    57f8:	80 81       	ld	r24, Z
    57fa:	91 81       	ldd	r25, Z+1	; 0x01
    57fc:	bc 01       	movw	r22, r24
    57fe:	6a 5e       	subi	r22, 0xEA	; 234
    5800:	7f 4f       	sbci	r23, 0xFF	; 255
    5802:	ce 01       	movw	r24, r28
    5804:	8a 58       	subi	r24, 0x8A	; 138
    5806:	9f 4f       	sbci	r25, 0xFF	; 255
    5808:	fc 01       	movw	r30, r24
    580a:	80 81       	ld	r24, Z
    580c:	91 81       	ldd	r25, Z+1	; 0x01
    580e:	06 96       	adiw	r24, 0x06	; 6
    5810:	9e 01       	movw	r18, r28
    5812:	2a 5e       	subi	r18, 0xEA	; 234
    5814:	3f 4f       	sbci	r19, 0xFF	; 255
    5816:	41 e0       	ldi	r20, 0x01	; 1
    5818:	50 e0       	ldi	r21, 0x00	; 0
    581a:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <f_read>
    f_read(&mf->_fd,&t->_mev.data[2],1,&bRead);
    581e:	ce 01       	movw	r24, r28
    5820:	88 58       	subi	r24, 0x88	; 136
    5822:	9f 4f       	sbci	r25, 0xFF	; 255
    5824:	fc 01       	movw	r30, r24
    5826:	80 81       	ld	r24, Z
    5828:	91 81       	ldd	r25, Z+1	; 0x01
    582a:	bc 01       	movw	r22, r24
    582c:	69 5e       	subi	r22, 0xE9	; 233
    582e:	7f 4f       	sbci	r23, 0xFF	; 255
    5830:	ce 01       	movw	r24, r28
    5832:	8a 58       	subi	r24, 0x8A	; 138
    5834:	9f 4f       	sbci	r25, 0xFF	; 255
    5836:	fc 01       	movw	r30, r24
    5838:	80 81       	ld	r24, Z
    583a:	91 81       	ldd	r25, Z+1	; 0x01
    583c:	06 96       	adiw	r24, 0x06	; 6
    583e:	9e 01       	movw	r18, r28
    5840:	2a 5e       	subi	r18, 0xEA	; 234
    5842:	3f 4f       	sbci	r19, 0xFF	; 255
    5844:	41 e0       	ldi	r20, 0x01	; 1
    5846:	50 e0       	ldi	r21, 0x00	; 0
    5848:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <f_read>
    DUMP("[MID2] Ch: ", _mev.channel);
    DUMPX(" Data: ", _mev.data[0]);
    DUMPX(" ", _mev.data[1]);
    DUMPX(" ", _mev.data[2]);	
#if !DUMP_DATA
    if (mf->_midiHandler != NULL)
    584c:	ce 01       	movw	r24, r28
    584e:	8a 58       	subi	r24, 0x8A	; 138
    5850:	9f 4f       	sbci	r25, 0xFF	; 255
    5852:	fc 01       	movw	r30, r24
    5854:	80 81       	ld	r24, Z
    5856:	91 81       	ldd	r25, Z+1	; 0x01
    5858:	fc 01       	movw	r30, r24
    585a:	80 81       	ld	r24, Z
    585c:	91 81       	ldd	r25, Z+1	; 0x01
    585e:	89 2b       	or	r24, r25
    5860:	09 f4       	brne	.+2      	; 0x5864 <parseEvent+0x174>
    5862:	f4 c3       	rjmp	.+2024   	; 0x604c <parseEvent+0x95c>
      (mf->_midiHandler)(&t->_mev);
    5864:	ce 01       	movw	r24, r28
    5866:	8a 58       	subi	r24, 0x8A	; 138
    5868:	9f 4f       	sbci	r25, 0xFF	; 255
    586a:	fc 01       	movw	r30, r24
    586c:	80 81       	ld	r24, Z
    586e:	91 81       	ldd	r25, Z+1	; 0x01
    5870:	fc 01       	movw	r30, r24
    5872:	20 81       	ld	r18, Z
    5874:	31 81       	ldd	r19, Z+1	; 0x01
    5876:	ce 01       	movw	r24, r28
    5878:	88 58       	subi	r24, 0x88	; 136
    587a:	9f 4f       	sbci	r25, 0xFF	; 255
    587c:	fc 01       	movw	r30, r24
    587e:	80 81       	ld	r24, Z
    5880:	91 81       	ldd	r25, Z+1	; 0x01
    5882:	42 96       	adiw	r24, 0x12	; 18
    5884:	f9 01       	movw	r30, r18
    5886:	09 95       	icall
#endif // !DUMP_DATA
  break;
    5888:	e1 c3       	rjmp	.+1986   	; 0x604c <parseEvent+0x95c>

  case 0xc0 ... 0xdf: // MIDI message with 1 parameter
    t->_mev.size = 2;
    588a:	ce 01       	movw	r24, r28
    588c:	88 58       	subi	r24, 0x88	; 136
    588e:	9f 4f       	sbci	r25, 0xFF	; 255
    5890:	fc 01       	movw	r30, r24
    5892:	80 81       	ld	r24, Z
    5894:	91 81       	ldd	r25, Z+1	; 0x01
    5896:	22 e0       	ldi	r18, 0x02	; 2
    5898:	fc 01       	movw	r30, r24
    589a:	24 8b       	std	Z+20, r18	; 0x14
    t->_mev.data[0] = eType;
    589c:	2d 89       	ldd	r18, Y+21	; 0x15
    589e:	ce 01       	movw	r24, r28
    58a0:	88 58       	subi	r24, 0x88	; 136
    58a2:	9f 4f       	sbci	r25, 0xFF	; 255
    58a4:	fc 01       	movw	r30, r24
    58a6:	80 81       	ld	r24, Z
    58a8:	91 81       	ldd	r25, Z+1	; 0x01
    58aa:	fc 01       	movw	r30, r24
    58ac:	25 8b       	std	Z+21, r18	; 0x15
    t->_mev.channel = t->_mev.data[0] & 0xf;  // mask off the channel
    58ae:	ce 01       	movw	r24, r28
    58b0:	88 58       	subi	r24, 0x88	; 136
    58b2:	9f 4f       	sbci	r25, 0xFF	; 255
    58b4:	fc 01       	movw	r30, r24
    58b6:	80 81       	ld	r24, Z
    58b8:	91 81       	ldd	r25, Z+1	; 0x01
    58ba:	fc 01       	movw	r30, r24
    58bc:	85 89       	ldd	r24, Z+21	; 0x15
    58be:	28 2f       	mov	r18, r24
    58c0:	2f 70       	andi	r18, 0x0F	; 15
    58c2:	ce 01       	movw	r24, r28
    58c4:	88 58       	subi	r24, 0x88	; 136
    58c6:	9f 4f       	sbci	r25, 0xFF	; 255
    58c8:	fc 01       	movw	r30, r24
    58ca:	80 81       	ld	r24, Z
    58cc:	91 81       	ldd	r25, Z+1	; 0x01
    58ce:	fc 01       	movw	r30, r24
    58d0:	23 8b       	std	Z+19, r18	; 0x13
    t->_mev.data[0] = t->_mev.data[0] & 0xf0; // just the command byte
    58d2:	ce 01       	movw	r24, r28
    58d4:	88 58       	subi	r24, 0x88	; 136
    58d6:	9f 4f       	sbci	r25, 0xFF	; 255
    58d8:	fc 01       	movw	r30, r24
    58da:	80 81       	ld	r24, Z
    58dc:	91 81       	ldd	r25, Z+1	; 0x01
    58de:	fc 01       	movw	r30, r24
    58e0:	85 89       	ldd	r24, Z+21	; 0x15
    58e2:	28 2f       	mov	r18, r24
    58e4:	20 7f       	andi	r18, 0xF0	; 240
    58e6:	ce 01       	movw	r24, r28
    58e8:	88 58       	subi	r24, 0x88	; 136
    58ea:	9f 4f       	sbci	r25, 0xFF	; 255
    58ec:	fc 01       	movw	r30, r24
    58ee:	80 81       	ld	r24, Z
    58f0:	91 81       	ldd	r25, Z+1	; 0x01
    58f2:	fc 01       	movw	r30, r24
    58f4:	25 8b       	std	Z+21, r18	; 0x15
    f_read(&mf->_fd,&t->_mev.data[1],1,&bRead);
    58f6:	ce 01       	movw	r24, r28
    58f8:	88 58       	subi	r24, 0x88	; 136
    58fa:	9f 4f       	sbci	r25, 0xFF	; 255
    58fc:	fc 01       	movw	r30, r24
    58fe:	80 81       	ld	r24, Z
    5900:	91 81       	ldd	r25, Z+1	; 0x01
    5902:	bc 01       	movw	r22, r24
    5904:	6a 5e       	subi	r22, 0xEA	; 234
    5906:	7f 4f       	sbci	r23, 0xFF	; 255
    5908:	ce 01       	movw	r24, r28
    590a:	8a 58       	subi	r24, 0x8A	; 138
    590c:	9f 4f       	sbci	r25, 0xFF	; 255
    590e:	fc 01       	movw	r30, r24
    5910:	80 81       	ld	r24, Z
    5912:	91 81       	ldd	r25, Z+1	; 0x01
    5914:	06 96       	adiw	r24, 0x06	; 6
    5916:	9e 01       	movw	r18, r28
    5918:	2a 5e       	subi	r18, 0xEA	; 234
    591a:	3f 4f       	sbci	r19, 0xFF	; 255
    591c:	41 e0       	ldi	r20, 0x01	; 1
    591e:	50 e0       	ldi	r21, 0x00	; 0
    5920:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <f_read>
    DUMP("[MID1] Ch: ", _mev.channel);
    DUMPX(" Data: ", _mev.data[0]);
    DUMPX(" ", _mev.data[1]);

#if !DUMP_DATA
    if (mf->_midiHandler != NULL)
    5924:	ce 01       	movw	r24, r28
    5926:	8a 58       	subi	r24, 0x8A	; 138
    5928:	9f 4f       	sbci	r25, 0xFF	; 255
    592a:	fc 01       	movw	r30, r24
    592c:	80 81       	ld	r24, Z
    592e:	91 81       	ldd	r25, Z+1	; 0x01
    5930:	fc 01       	movw	r30, r24
    5932:	80 81       	ld	r24, Z
    5934:	91 81       	ldd	r25, Z+1	; 0x01
    5936:	89 2b       	or	r24, r25
    5938:	09 f4       	brne	.+2      	; 0x593c <parseEvent+0x24c>
    593a:	8a c3       	rjmp	.+1812   	; 0x6050 <parseEvent+0x960>
      (mf->_midiHandler)(&t->_mev);
    593c:	ce 01       	movw	r24, r28
    593e:	8a 58       	subi	r24, 0x8A	; 138
    5940:	9f 4f       	sbci	r25, 0xFF	; 255
    5942:	fc 01       	movw	r30, r24
    5944:	80 81       	ld	r24, Z
    5946:	91 81       	ldd	r25, Z+1	; 0x01
    5948:	fc 01       	movw	r30, r24
    594a:	20 81       	ld	r18, Z
    594c:	31 81       	ldd	r19, Z+1	; 0x01
    594e:	ce 01       	movw	r24, r28
    5950:	88 58       	subi	r24, 0x88	; 136
    5952:	9f 4f       	sbci	r25, 0xFF	; 255
    5954:	fc 01       	movw	r30, r24
    5956:	80 81       	ld	r24, Z
    5958:	91 81       	ldd	r25, Z+1	; 0x01
    595a:	42 96       	adiw	r24, 0x12	; 18
    595c:	f9 01       	movw	r30, r18
    595e:	09 95       	icall
#endif
  break;
    5960:	77 c3       	rjmp	.+1774   	; 0x6050 <parseEvent+0x960>
    // ie SysEx and Meta events clear running status. This means that the _mev structure 
    // should contain the info from the previous message in the structure's channel member 
    // and data[0] (for the MIDI command). 
    // Hence start saving the data at byte data[1] with the byte we have just read (eType) 
    // and use the size member to determine how large the message is (ie, same as before).
    t->_mev.data[1] = eType;
    5962:	2d 89       	ldd	r18, Y+21	; 0x15
    5964:	ce 01       	movw	r24, r28
    5966:	88 58       	subi	r24, 0x88	; 136
    5968:	9f 4f       	sbci	r25, 0xFF	; 255
    596a:	fc 01       	movw	r30, r24
    596c:	80 81       	ld	r24, Z
    596e:	91 81       	ldd	r25, Z+1	; 0x01
    5970:	fc 01       	movw	r30, r24
    5972:	26 8b       	std	Z+22, r18	; 0x16
    for (uint8_t i = 2; i < t->_mev.size; i++)
    5974:	82 e0       	ldi	r24, 0x02	; 2
    5976:	89 83       	std	Y+1, r24	; 0x01
    5978:	1a c0       	rjmp	.+52     	; 0x59ae <parseEvent+0x2be>
    {
      f_read(&mf->_fd,&t->_mev.data[1],1,&bRead);  // next byte
    597a:	ce 01       	movw	r24, r28
    597c:	88 58       	subi	r24, 0x88	; 136
    597e:	9f 4f       	sbci	r25, 0xFF	; 255
    5980:	fc 01       	movw	r30, r24
    5982:	80 81       	ld	r24, Z
    5984:	91 81       	ldd	r25, Z+1	; 0x01
    5986:	bc 01       	movw	r22, r24
    5988:	6a 5e       	subi	r22, 0xEA	; 234
    598a:	7f 4f       	sbci	r23, 0xFF	; 255
    598c:	ce 01       	movw	r24, r28
    598e:	8a 58       	subi	r24, 0x8A	; 138
    5990:	9f 4f       	sbci	r25, 0xFF	; 255
    5992:	fc 01       	movw	r30, r24
    5994:	80 81       	ld	r24, Z
    5996:	91 81       	ldd	r25, Z+1	; 0x01
    5998:	06 96       	adiw	r24, 0x06	; 6
    599a:	9e 01       	movw	r18, r28
    599c:	2a 5e       	subi	r18, 0xEA	; 234
    599e:	3f 4f       	sbci	r19, 0xFF	; 255
    59a0:	41 e0       	ldi	r20, 0x01	; 1
    59a2:	50 e0       	ldi	r21, 0x00	; 0
    59a4:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <f_read>
    // should contain the info from the previous message in the structure's channel member 
    // and data[0] (for the MIDI command). 
    // Hence start saving the data at byte data[1] with the byte we have just read (eType) 
    // and use the size member to determine how large the message is (ie, same as before).
    t->_mev.data[1] = eType;
    for (uint8_t i = 2; i < t->_mev.size; i++)
    59a8:	89 81       	ldd	r24, Y+1	; 0x01
    59aa:	8f 5f       	subi	r24, 0xFF	; 255
    59ac:	89 83       	std	Y+1, r24	; 0x01
    59ae:	ce 01       	movw	r24, r28
    59b0:	88 58       	subi	r24, 0x88	; 136
    59b2:	9f 4f       	sbci	r25, 0xFF	; 255
    59b4:	fc 01       	movw	r30, r24
    59b6:	80 81       	ld	r24, Z
    59b8:	91 81       	ldd	r25, Z+1	; 0x01
    59ba:	fc 01       	movw	r30, r24
    59bc:	94 89       	ldd	r25, Z+20	; 0x14
    59be:	89 81       	ldd	r24, Y+1	; 0x01
    59c0:	89 17       	cp	r24, r25
    59c2:	d8 f2       	brcs	.-74     	; 0x597a <parseEvent+0x28a>
      f_read(&mf->_fd,&t->_mev.data[1],1,&bRead);  // next byte
    } 

    DUMP("[MID+] Ch: ", _mev.channel);
    DUMPS(" Data:");
    for (uint8_t i = 0; i<t->_mev.size; i++)
    59c4:	1a 82       	std	Y+2, r1	; 0x02
    59c6:	03 c0       	rjmp	.+6      	; 0x59ce <parseEvent+0x2de>
    59c8:	8a 81       	ldd	r24, Y+2	; 0x02
    59ca:	8f 5f       	subi	r24, 0xFF	; 255
    59cc:	8a 83       	std	Y+2, r24	; 0x02
    59ce:	ce 01       	movw	r24, r28
    59d0:	88 58       	subi	r24, 0x88	; 136
    59d2:	9f 4f       	sbci	r25, 0xFF	; 255
    59d4:	fc 01       	movw	r30, r24
    59d6:	80 81       	ld	r24, Z
    59d8:	91 81       	ldd	r25, Z+1	; 0x01
    59da:	fc 01       	movw	r30, r24
    59dc:	94 89       	ldd	r25, Z+20	; 0x14
    59de:	8a 81       	ldd	r24, Y+2	; 0x02
    59e0:	89 17       	cp	r24, r25
    59e2:	90 f3       	brcs	.-28     	; 0x59c8 <parseEvent+0x2d8>
    {
      DUMPX(" ", t->_mev.data[i]);
    }

#if !DUMP_DATA
    if (mf->_midiHandler != NULL)
    59e4:	ce 01       	movw	r24, r28
    59e6:	8a 58       	subi	r24, 0x8A	; 138
    59e8:	9f 4f       	sbci	r25, 0xFF	; 255
    59ea:	fc 01       	movw	r30, r24
    59ec:	80 81       	ld	r24, Z
    59ee:	91 81       	ldd	r25, Z+1	; 0x01
    59f0:	fc 01       	movw	r30, r24
    59f2:	80 81       	ld	r24, Z
    59f4:	91 81       	ldd	r25, Z+1	; 0x01
    59f6:	89 2b       	or	r24, r25
    59f8:	09 f4       	brne	.+2      	; 0x59fc <parseEvent+0x30c>
    59fa:	2c c3       	rjmp	.+1624   	; 0x6054 <parseEvent+0x964>
      (mf->_midiHandler)(&t->_mev);
    59fc:	ce 01       	movw	r24, r28
    59fe:	8a 58       	subi	r24, 0x8A	; 138
    5a00:	9f 4f       	sbci	r25, 0xFF	; 255
    5a02:	fc 01       	movw	r30, r24
    5a04:	80 81       	ld	r24, Z
    5a06:	91 81       	ldd	r25, Z+1	; 0x01
    5a08:	fc 01       	movw	r30, r24
    5a0a:	20 81       	ld	r18, Z
    5a0c:	31 81       	ldd	r19, Z+1	; 0x01
    5a0e:	ce 01       	movw	r24, r28
    5a10:	88 58       	subi	r24, 0x88	; 136
    5a12:	9f 4f       	sbci	r25, 0xFF	; 255
    5a14:	fc 01       	movw	r30, r24
    5a16:	80 81       	ld	r24, Z
    5a18:	91 81       	ldd	r25, Z+1	; 0x01
    5a1a:	42 96       	adiw	r24, 0x12	; 18
    5a1c:	f9 01       	movw	r30, r18
    5a1e:	09 95       	icall
#endif
  }
  break;
    5a20:	19 c3       	rjmp	.+1586   	; 0x6054 <parseEvent+0x964>
// ---------------------------- SYSEX
  case 0xf0:  // sysex_event = 0xF0 + <len:1> + <data_bytes> + 0xF7 
  case 0xf7:  // sysex_event = 0xF7 + <len:1> + <data_bytes> + 0xF7 
  {
    sysex_event sev;
    uint16_t index = 0;
    5a22:	1c 82       	std	Y+4, r1	; 0x04
    5a24:	1b 82       	std	Y+3, r1	; 0x03

    // collect all the bytes until the 0xf7 - boundaries are included in the message
    sev.track = t->_trackId;
    5a26:	ce 01       	movw	r24, r28
    5a28:	88 58       	subi	r24, 0x88	; 136
    5a2a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a2c:	fc 01       	movw	r30, r24
    5a2e:	80 81       	ld	r24, Z
    5a30:	91 81       	ldd	r25, Z+1	; 0x01
    5a32:	fc 01       	movw	r30, r24
    5a34:	80 81       	ld	r24, Z
    5a36:	8c 8f       	std	Y+28, r24	; 0x1c
    mLen = readVarLen(&mf->_fd);
    5a38:	ce 01       	movw	r24, r28
    5a3a:	8a 58       	subi	r24, 0x8A	; 138
    5a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    5a3e:	fc 01       	movw	r30, r24
    5a40:	80 81       	ld	r24, Z
    5a42:	91 81       	ldd	r25, Z+1	; 0x01
    5a44:	06 96       	adiw	r24, 0x06	; 6
    5a46:	0e 94 c3 29 	call	0x5386	; 0x5386 <readVarLen>
    5a4a:	dc 01       	movw	r26, r24
    5a4c:	cb 01       	movw	r24, r22
    5a4e:	88 87       	std	Y+8, r24	; 0x08
    5a50:	99 87       	std	Y+9, r25	; 0x09
    5a52:	aa 87       	std	Y+10, r26	; 0x0a
    5a54:	bb 87       	std	Y+11, r27	; 0x0b
    sev.size = mLen;
    5a56:	88 85       	ldd	r24, Y+8	; 0x08
    5a58:	99 85       	ldd	r25, Y+9	; 0x09
    5a5a:	9e 8f       	std	Y+30, r25	; 0x1e
    5a5c:	8d 8f       	std	Y+29, r24	; 0x1d
    if (eType==0xF0)       // add space for 0xF0
    5a5e:	8d 89       	ldd	r24, Y+21	; 0x15
    5a60:	80 3f       	cpi	r24, 0xF0	; 240
    5a62:	a1 f4       	brne	.+40     	; 0x5a8c <parseEvent+0x39c>
    {
      sev.data[index++] = eType;
    5a64:	8b 81       	ldd	r24, Y+3	; 0x03
    5a66:	9c 81       	ldd	r25, Y+4	; 0x04
    5a68:	9c 01       	movw	r18, r24
    5a6a:	2f 5f       	subi	r18, 0xFF	; 255
    5a6c:	3f 4f       	sbci	r19, 0xFF	; 255
    5a6e:	3c 83       	std	Y+4, r19	; 0x04
    5a70:	2b 83       	std	Y+3, r18	; 0x03
    5a72:	4d 89       	ldd	r20, Y+21	; 0x15
    5a74:	9e 01       	movw	r18, r28
    5a76:	21 5e       	subi	r18, 0xE1	; 225
    5a78:	3f 4f       	sbci	r19, 0xFF	; 255
    5a7a:	82 0f       	add	r24, r18
    5a7c:	93 1f       	adc	r25, r19
    5a7e:	fc 01       	movw	r30, r24
    5a80:	40 83       	st	Z, r20
      sev.size++;
    5a82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5a84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5a86:	01 96       	adiw	r24, 0x01	; 1
    5a88:	9e 8f       	std	Y+30, r25	; 0x1e
    5a8a:	8d 8f       	std	Y+29, r24	; 0x1d
    }
    uint16_t minLen = min(sev.size, ARRAY_SIZE(sev.data));
    5a8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5a8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5a90:	83 33       	cpi	r24, 0x33	; 51
    5a92:	91 05       	cpc	r25, r1
    5a94:	10 f0       	brcs	.+4      	; 0x5a9a <parseEvent+0x3aa>
    5a96:	82 e3       	ldi	r24, 0x32	; 50
    5a98:	90 e0       	ldi	r25, 0x00	; 0
    5a9a:	9d 87       	std	Y+13, r25	; 0x0d
    5a9c:	8c 87       	std	Y+12, r24	; 0x0c
    // The length parameter includes the 0xF7 but not the start boundary.
    // However, it may be bigger than our buffer will allow us to store.
    for (uint16_t i=index; i<minLen; ++i)
    5a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    5aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    5aa2:	9e 83       	std	Y+6, r25	; 0x06
    5aa4:	8d 83       	std	Y+5, r24	; 0x05
    5aa6:	1c c0       	rjmp	.+56     	; 0x5ae0 <parseEvent+0x3f0>
      f_read(&mf->_fd,&sev.data[i],1,&bRead);
    5aa8:	9e 01       	movw	r18, r28
    5aaa:	24 5e       	subi	r18, 0xE4	; 228
    5aac:	3f 4f       	sbci	r19, 0xFF	; 255
    5aae:	8d 81       	ldd	r24, Y+5	; 0x05
    5ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    5ab2:	03 96       	adiw	r24, 0x03	; 3
    5ab4:	b9 01       	movw	r22, r18
    5ab6:	68 0f       	add	r22, r24
    5ab8:	79 1f       	adc	r23, r25
    5aba:	ce 01       	movw	r24, r28
    5abc:	8a 58       	subi	r24, 0x8A	; 138
    5abe:	9f 4f       	sbci	r25, 0xFF	; 255
    5ac0:	fc 01       	movw	r30, r24
    5ac2:	80 81       	ld	r24, Z
    5ac4:	91 81       	ldd	r25, Z+1	; 0x01
    5ac6:	06 96       	adiw	r24, 0x06	; 6
    5ac8:	9e 01       	movw	r18, r28
    5aca:	2a 5e       	subi	r18, 0xEA	; 234
    5acc:	3f 4f       	sbci	r19, 0xFF	; 255
    5ace:	41 e0       	ldi	r20, 0x01	; 1
    5ad0:	50 e0       	ldi	r21, 0x00	; 0
    5ad2:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <f_read>
      sev.size++;
    }
    uint16_t minLen = min(sev.size, ARRAY_SIZE(sev.data));
    // The length parameter includes the 0xF7 but not the start boundary.
    // However, it may be bigger than our buffer will allow us to store.
    for (uint16_t i=index; i<minLen; ++i)
    5ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    5ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    5ada:	01 96       	adiw	r24, 0x01	; 1
    5adc:	9e 83       	std	Y+6, r25	; 0x06
    5ade:	8d 83       	std	Y+5, r24	; 0x05
    5ae0:	2d 81       	ldd	r18, Y+5	; 0x05
    5ae2:	3e 81       	ldd	r19, Y+6	; 0x06
    5ae4:	8c 85       	ldd	r24, Y+12	; 0x0c
    5ae6:	9d 85       	ldd	r25, Y+13	; 0x0d
    5ae8:	28 17       	cp	r18, r24
    5aea:	39 07       	cpc	r19, r25
    5aec:	e8 f2       	brcs	.-70     	; 0x5aa8 <parseEvent+0x3b8>
      f_read(&mf->_fd,&sev.data[i],1,&bRead);
    if (sev.size>minLen)
    5aee:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5af0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5af2:	8c 85       	ldd	r24, Y+12	; 0x0c
    5af4:	9d 85       	ldd	r25, Y+13	; 0x0d
    5af6:	82 17       	cp	r24, r18
    5af8:	93 07       	cpc	r25, r19
    5afa:	38 f5       	brcc	.+78     	; 0x5b4a <parseEvent+0x45a>
      f_lseek(&mf->_fd,f_tell(&mf->_fd) + (sev.size-minLen));
    5afc:	ce 01       	movw	r24, r28
    5afe:	8a 58       	subi	r24, 0x8A	; 138
    5b00:	9f 4f       	sbci	r25, 0xFF	; 255
    5b02:	fc 01       	movw	r30, r24
    5b04:	80 81       	ld	r24, Z
    5b06:	91 81       	ldd	r25, Z+1	; 0x01
    5b08:	fc 01       	movw	r30, r24
    5b0a:	24 85       	ldd	r18, Z+12	; 0x0c
    5b0c:	35 85       	ldd	r19, Z+13	; 0x0d
    5b0e:	46 85       	ldd	r20, Z+14	; 0x0e
    5b10:	57 85       	ldd	r21, Z+15	; 0x0f
    5b12:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5b14:	7e 8d       	ldd	r23, Y+30	; 0x1e
    5b16:	8c 85       	ldd	r24, Y+12	; 0x0c
    5b18:	9d 85       	ldd	r25, Y+13	; 0x0d
    5b1a:	fb 01       	movw	r30, r22
    5b1c:	e8 1b       	sub	r30, r24
    5b1e:	f9 0b       	sbc	r31, r25
    5b20:	cf 01       	movw	r24, r30
    5b22:	cc 01       	movw	r24, r24
    5b24:	a0 e0       	ldi	r26, 0x00	; 0
    5b26:	b0 e0       	ldi	r27, 0x00	; 0
    5b28:	82 0f       	add	r24, r18
    5b2a:	93 1f       	adc	r25, r19
    5b2c:	a4 1f       	adc	r26, r20
    5b2e:	b5 1f       	adc	r27, r21
    5b30:	9e 01       	movw	r18, r28
    5b32:	2a 58       	subi	r18, 0x8A	; 138
    5b34:	3f 4f       	sbci	r19, 0xFF	; 255
    5b36:	f9 01       	movw	r30, r18
    5b38:	20 81       	ld	r18, Z
    5b3a:	31 81       	ldd	r19, Z+1	; 0x01
    5b3c:	2a 5f       	subi	r18, 0xFA	; 250
    5b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    5b40:	ac 01       	movw	r20, r24
    5b42:	bd 01       	movw	r22, r26
    5b44:	c9 01       	movw	r24, r18
    5b46:	0e 94 1c 1b 	call	0x3638	; 0x3638 <f_lseek>
      DUMPX(" ", sev.data[i]);
    }
    if (sev.size>minLen)
      DUMPS("...");
#else
    if (mf->_sysexHandler != NULL)
    5b4a:	ce 01       	movw	r24, r28
    5b4c:	8a 58       	subi	r24, 0x8A	; 138
    5b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    5b50:	fc 01       	movw	r30, r24
    5b52:	80 81       	ld	r24, Z
    5b54:	91 81       	ldd	r25, Z+1	; 0x01
    5b56:	fc 01       	movw	r30, r24
    5b58:	82 81       	ldd	r24, Z+2	; 0x02
    5b5a:	93 81       	ldd	r25, Z+3	; 0x03
    5b5c:	89 2b       	or	r24, r25
    5b5e:	09 f4       	brne	.+2      	; 0x5b62 <parseEvent+0x472>
    5b60:	7b c2       	rjmp	.+1270   	; 0x6058 <parseEvent+0x968>
      (mf->_sysexHandler)(&sev);
    5b62:	ce 01       	movw	r24, r28
    5b64:	8a 58       	subi	r24, 0x8A	; 138
    5b66:	9f 4f       	sbci	r25, 0xFF	; 255
    5b68:	fc 01       	movw	r30, r24
    5b6a:	80 81       	ld	r24, Z
    5b6c:	91 81       	ldd	r25, Z+1	; 0x01
    5b6e:	fc 01       	movw	r30, r24
    5b70:	22 81       	ldd	r18, Z+2	; 0x02
    5b72:	33 81       	ldd	r19, Z+3	; 0x03
    5b74:	ce 01       	movw	r24, r28
    5b76:	4c 96       	adiw	r24, 0x1c	; 28
    5b78:	f9 01       	movw	r30, r18
    5b7a:	09 95       	icall
#endif
  }
  break;
    5b7c:	6d c2       	rjmp	.+1242   	; 0x6058 <parseEvent+0x968>
  case 0xff:  // meta_event = 0xFF + <meta_type:1> + <length:v> + <event_data_bytes>
  {
    meta_event mev;

    //eType = 
	f_read(&mf->_fd,&eType,1,&bRead);
    5b7e:	ce 01       	movw	r24, r28
    5b80:	8a 58       	subi	r24, 0x8A	; 138
    5b82:	9f 4f       	sbci	r25, 0xFF	; 255
    5b84:	fc 01       	movw	r30, r24
    5b86:	80 81       	ld	r24, Z
    5b88:	91 81       	ldd	r25, Z+1	; 0x01
    5b8a:	06 96       	adiw	r24, 0x06	; 6
    5b8c:	9e 01       	movw	r18, r28
    5b8e:	2a 5e       	subi	r18, 0xEA	; 234
    5b90:	3f 4f       	sbci	r19, 0xFF	; 255
    5b92:	be 01       	movw	r22, r28
    5b94:	6b 5e       	subi	r22, 0xEB	; 235
    5b96:	7f 4f       	sbci	r23, 0xFF	; 255
    5b98:	41 e0       	ldi	r20, 0x01	; 1
    5b9a:	50 e0       	ldi	r21, 0x00	; 0
    5b9c:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <f_read>
    mLen =  readVarLen(&mf->_fd);
    5ba0:	ce 01       	movw	r24, r28
    5ba2:	8a 58       	subi	r24, 0x8A	; 138
    5ba4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ba6:	fc 01       	movw	r30, r24
    5ba8:	80 81       	ld	r24, Z
    5baa:	91 81       	ldd	r25, Z+1	; 0x01
    5bac:	06 96       	adiw	r24, 0x06	; 6
    5bae:	0e 94 c3 29 	call	0x5386	; 0x5386 <readVarLen>
    5bb2:	dc 01       	movw	r26, r24
    5bb4:	cb 01       	movw	r24, r22
    5bb6:	88 87       	std	Y+8, r24	; 0x08
    5bb8:	99 87       	std	Y+9, r25	; 0x09
    5bba:	aa 87       	std	Y+10, r26	; 0x0a
    5bbc:	bb 87       	std	Y+11, r27	; 0x0b

    mev.track = t->_trackId;
    5bbe:	ce 01       	movw	r24, r28
    5bc0:	88 58       	subi	r24, 0x88	; 136
    5bc2:	9f 4f       	sbci	r25, 0xFF	; 255
    5bc4:	fc 01       	movw	r30, r24
    5bc6:	80 81       	ld	r24, Z
    5bc8:	91 81       	ldd	r25, Z+1	; 0x01
    5bca:	fc 01       	movw	r30, r24
    5bcc:	80 81       	ld	r24, Z
    5bce:	8c 8f       	std	Y+28, r24	; 0x1c
    mev.size = mLen;
    5bd0:	88 85       	ldd	r24, Y+8	; 0x08
    5bd2:	99 85       	ldd	r25, Y+9	; 0x09
    5bd4:	9e 8f       	std	Y+30, r25	; 0x1e
    5bd6:	8d 8f       	std	Y+29, r24	; 0x1d
    mev.type = eType;
    5bd8:	8d 89       	ldd	r24, Y+21	; 0x15
    5bda:	8f 8f       	std	Y+31, r24	; 0x1f

    DUMPX("[META] Type: 0x", eType);
    DUMP("\tLen: ", mLen);
    DUMPS("\t");

    switch (eType)
    5bdc:	8d 89       	ldd	r24, Y+21	; 0x15
    5bde:	88 2f       	mov	r24, r24
    5be0:	90 e0       	ldi	r25, 0x00	; 0
    5be2:	8f 32       	cpi	r24, 0x2F	; 47
    5be4:	91 05       	cpc	r25, r1
    5be6:	d9 f0       	breq	.+54     	; 0x5c1e <parseEvent+0x52e>
    5be8:	80 33       	cpi	r24, 0x30	; 48
    5bea:	91 05       	cpc	r25, r1
    5bec:	64 f4       	brge	.+24     	; 0x5c06 <parseEvent+0x516>
    5bee:	80 32       	cpi	r24, 0x20	; 32
    5bf0:	91 05       	cpc	r25, r1
    5bf2:	09 f4       	brne	.+2      	; 0x5bf6 <parseEvent+0x506>
    5bf4:	87 c1       	rjmp	.+782    	; 0x5f04 <parseEvent+0x814>
    5bf6:	81 32       	cpi	r24, 0x21	; 33
    5bf8:	91 05       	cpc	r25, r1
    5bfa:	09 f4       	brne	.+2      	; 0x5bfe <parseEvent+0x50e>
    5bfc:	91 c1       	rjmp	.+802    	; 0x5f20 <parseEvent+0x830>
    5bfe:	89 2b       	or	r24, r25
    5c00:	09 f4       	brne	.+2      	; 0x5c04 <parseEvent+0x514>
    5c02:	6a c1       	rjmp	.+724    	; 0x5ed8 <parseEvent+0x7e8>
    5c04:	9b c1       	rjmp	.+822    	; 0x5f3c <parseEvent+0x84c>
    5c06:	88 35       	cpi	r24, 0x58	; 88
    5c08:	91 05       	cpc	r25, r1
    5c0a:	09 f4       	brne	.+2      	; 0x5c0e <parseEvent+0x51e>
    5c0c:	45 c0       	rjmp	.+138    	; 0x5c98 <parseEvent+0x5a8>
    5c0e:	89 35       	cpi	r24, 0x59	; 89
    5c10:	91 05       	cpc	r25, r1
    5c12:	09 f4       	brne	.+2      	; 0x5c16 <parseEvent+0x526>
    5c14:	a3 c0       	rjmp	.+326    	; 0x5d5c <parseEvent+0x66c>
    5c16:	81 35       	cpi	r24, 0x51	; 81
    5c18:	91 05       	cpc	r25, r1
    5c1a:	59 f0       	breq	.+22     	; 0x5c32 <parseEvent+0x542>
    5c1c:	8f c1       	rjmp	.+798    	; 0x5f3c <parseEvent+0x84c>
    {
      case 0x2f:  // End of track
      {
        t->_endOfTrack = TRUE;
    5c1e:	ce 01       	movw	r24, r28
    5c20:	88 58       	subi	r24, 0x88	; 136
    5c22:	9f 4f       	sbci	r25, 0xFF	; 255
    5c24:	fc 01       	movw	r30, r24
    5c26:	80 81       	ld	r24, Z
    5c28:	91 81       	ldd	r25, Z+1	; 0x01
    5c2a:	21 e0       	ldi	r18, 0x01	; 1
    5c2c:	fc 01       	movw	r30, r24
    5c2e:	25 87       	std	Z+13, r18	; 0x0d
        DUMPS("END OF TRACK");
      }
      break;
    5c30:	ea c1       	rjmp	.+980    	; 0x6006 <parseEvent+0x916>

      case 0x51:  // set Tempo - really the microseconds per tick
      {
        uint32_t value = readMultiByte(&mf->_fd, MB_TRYTE);
    5c32:	ce 01       	movw	r24, r28
    5c34:	8a 58       	subi	r24, 0x8A	; 138
    5c36:	9f 4f       	sbci	r25, 0xFF	; 255
    5c38:	fc 01       	movw	r30, r24
    5c3a:	80 81       	ld	r24, Z
    5c3c:	91 81       	ldd	r25, Z+1	; 0x01
    5c3e:	06 96       	adiw	r24, 0x06	; 6
    5c40:	63 e0       	ldi	r22, 0x03	; 3
    5c42:	0e 94 79 29 	call	0x52f2	; 0x52f2 <readMultiByte>
    5c46:	dc 01       	movw	r26, r24
    5c48:	cb 01       	movw	r24, r22
    5c4a:	8e 87       	std	Y+14, r24	; 0x0e
    5c4c:	9f 87       	std	Y+15, r25	; 0x0f
    5c4e:	a8 8b       	std	Y+16, r26	; 0x10
    5c50:	b9 8b       	std	Y+17, r27	; 0x11
        
        setMicrosecondPerQuarterNote(mf,value);
    5c52:	8e 85       	ldd	r24, Y+14	; 0x0e
    5c54:	9f 85       	ldd	r25, Y+15	; 0x0f
    5c56:	a8 89       	ldd	r26, Y+16	; 0x10
    5c58:	b9 89       	ldd	r27, Y+17	; 0x11
    5c5a:	9e 01       	movw	r18, r28
    5c5c:	2a 58       	subi	r18, 0x8A	; 138
    5c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    5c60:	f9 01       	movw	r30, r18
    5c62:	20 81       	ld	r18, Z
    5c64:	31 81       	ldd	r19, Z+1	; 0x01
    5c66:	ac 01       	movw	r20, r24
    5c68:	bd 01       	movw	r22, r26
    5c6a:	c9 01       	movw	r24, r18
    5c6c:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <setMicrosecondPerQuarterNote>
        
        mev.data[0] = (value >> 16) & 0xFF;
    5c70:	8e 85       	ldd	r24, Y+14	; 0x0e
    5c72:	9f 85       	ldd	r25, Y+15	; 0x0f
    5c74:	a8 89       	ldd	r26, Y+16	; 0x10
    5c76:	b9 89       	ldd	r27, Y+17	; 0x11
    5c78:	cd 01       	movw	r24, r26
    5c7a:	aa 27       	eor	r26, r26
    5c7c:	bb 27       	eor	r27, r27
    5c7e:	88 a3       	std	Y+32, r24	; 0x20
        mev.data[1] = (value >> 8) & 0xFF;
    5c80:	8e 85       	ldd	r24, Y+14	; 0x0e
    5c82:	9f 85       	ldd	r25, Y+15	; 0x0f
    5c84:	a8 89       	ldd	r26, Y+16	; 0x10
    5c86:	b9 89       	ldd	r27, Y+17	; 0x11
    5c88:	89 2f       	mov	r24, r25
    5c8a:	9a 2f       	mov	r25, r26
    5c8c:	ab 2f       	mov	r26, r27
    5c8e:	bb 27       	eor	r27, r27
    5c90:	89 a3       	std	Y+33, r24	; 0x21
        mev.data[2] = value & 0xFF;
    5c92:	8e 85       	ldd	r24, Y+14	; 0x0e
    5c94:	8a a3       	std	Y+34, r24	; 0x22
        
        DUMP("SET TEMPO to ", getTickTime(mf));
        DUMP(" us/tick or ", getTempo(mf));
        DUMPS(" beats/min");
      }
      break;
    5c96:	b7 c1       	rjmp	.+878    	; 0x6006 <parseEvent+0x916>

      case 0x58:  // time signature
      {
        uint8_t n,d;
		f_read(&mf->_fd,&n,1,&bRead);
    5c98:	ce 01       	movw	r24, r28
    5c9a:	8a 58       	subi	r24, 0x8A	; 138
    5c9c:	9f 4f       	sbci	r25, 0xFF	; 255
    5c9e:	fc 01       	movw	r30, r24
    5ca0:	80 81       	ld	r24, Z
    5ca2:	91 81       	ldd	r25, Z+1	; 0x01
    5ca4:	06 96       	adiw	r24, 0x06	; 6
    5ca6:	9e 01       	movw	r18, r28
    5ca8:	2a 5e       	subi	r18, 0xEA	; 234
    5caa:	3f 4f       	sbci	r19, 0xFF	; 255
    5cac:	be 01       	movw	r22, r28
    5cae:	68 5e       	subi	r22, 0xE8	; 232
    5cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    5cb2:	41 e0       	ldi	r20, 0x01	; 1
    5cb4:	50 e0       	ldi	r21, 0x00	; 0
    5cb6:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <f_read>
        f_read(&mf->_fd,&d,1,&bRead);
    5cba:	ce 01       	movw	r24, r28
    5cbc:	8a 58       	subi	r24, 0x8A	; 138
    5cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    5cc0:	fc 01       	movw	r30, r24
    5cc2:	80 81       	ld	r24, Z
    5cc4:	91 81       	ldd	r25, Z+1	; 0x01
    5cc6:	06 96       	adiw	r24, 0x06	; 6
    5cc8:	9e 01       	movw	r18, r28
    5cca:	2a 5e       	subi	r18, 0xEA	; 234
    5ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    5cce:	be 01       	movw	r22, r28
    5cd0:	67 5e       	subi	r22, 0xE7	; 231
    5cd2:	7f 4f       	sbci	r23, 0xFF	; 255
    5cd4:	41 e0       	ldi	r20, 0x01	; 1
    5cd6:	50 e0       	ldi	r21, 0x00	; 0
    5cd8:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <f_read>
        
        setTimeSignature(mf,n, 1 << d);  // denominator is 2^n
    5cdc:	89 8d       	ldd	r24, Y+25	; 0x19
    5cde:	28 2f       	mov	r18, r24
    5ce0:	30 e0       	ldi	r19, 0x00	; 0
    5ce2:	81 e0       	ldi	r24, 0x01	; 1
    5ce4:	90 e0       	ldi	r25, 0x00	; 0
    5ce6:	02 c0       	rjmp	.+4      	; 0x5cec <parseEvent+0x5fc>
    5ce8:	88 0f       	add	r24, r24
    5cea:	99 1f       	adc	r25, r25
    5cec:	2a 95       	dec	r18
    5cee:	e2 f7       	brpl	.-8      	; 0x5ce8 <parseEvent+0x5f8>
    5cf0:	38 2f       	mov	r19, r24
    5cf2:	28 8d       	ldd	r18, Y+24	; 0x18
    5cf4:	ce 01       	movw	r24, r28
    5cf6:	8a 58       	subi	r24, 0x8A	; 138
    5cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    5cfa:	fc 01       	movw	r30, r24
    5cfc:	80 81       	ld	r24, Z
    5cfe:	91 81       	ldd	r25, Z+1	; 0x01
    5d00:	43 2f       	mov	r20, r19
    5d02:	62 2f       	mov	r22, r18
    5d04:	0e 94 76 25 	call	0x4aec	; 0x4aec <setTimeSignature>
        f_lseek(&mf->_fd,f_tell(&mf->_fd) + (mLen - 2));
    5d08:	ce 01       	movw	r24, r28
    5d0a:	8a 58       	subi	r24, 0x8A	; 138
    5d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d0e:	fc 01       	movw	r30, r24
    5d10:	80 81       	ld	r24, Z
    5d12:	91 81       	ldd	r25, Z+1	; 0x01
    5d14:	fc 01       	movw	r30, r24
    5d16:	24 85       	ldd	r18, Z+12	; 0x0c
    5d18:	35 85       	ldd	r19, Z+13	; 0x0d
    5d1a:	46 85       	ldd	r20, Z+14	; 0x0e
    5d1c:	57 85       	ldd	r21, Z+15	; 0x0f
    5d1e:	88 85       	ldd	r24, Y+8	; 0x08
    5d20:	99 85       	ldd	r25, Y+9	; 0x09
    5d22:	aa 85       	ldd	r26, Y+10	; 0x0a
    5d24:	bb 85       	ldd	r27, Y+11	; 0x0b
    5d26:	82 0f       	add	r24, r18
    5d28:	93 1f       	adc	r25, r19
    5d2a:	a4 1f       	adc	r26, r20
    5d2c:	b5 1f       	adc	r27, r21
    5d2e:	02 97       	sbiw	r24, 0x02	; 2
    5d30:	a1 09       	sbc	r26, r1
    5d32:	b1 09       	sbc	r27, r1
    5d34:	9e 01       	movw	r18, r28
    5d36:	2a 58       	subi	r18, 0x8A	; 138
    5d38:	3f 4f       	sbci	r19, 0xFF	; 255
    5d3a:	f9 01       	movw	r30, r18
    5d3c:	20 81       	ld	r18, Z
    5d3e:	31 81       	ldd	r19, Z+1	; 0x01
    5d40:	2a 5f       	subi	r18, 0xFA	; 250
    5d42:	3f 4f       	sbci	r19, 0xFF	; 255
    5d44:	ac 01       	movw	r20, r24
    5d46:	bd 01       	movw	r22, r26
    5d48:	c9 01       	movw	r24, r18
    5d4a:	0e 94 1c 1b 	call	0x3638	; 0x3638 <f_lseek>

        mev.data[0] = n;
    5d4e:	88 8d       	ldd	r24, Y+24	; 0x18
    5d50:	88 a3       	std	Y+32, r24	; 0x20
        mev.data[1] = d;
    5d52:	89 8d       	ldd	r24, Y+25	; 0x19
    5d54:	89 a3       	std	Y+33, r24	; 0x21
        mev.data[2] = 0;
    5d56:	1a a2       	std	Y+34, r1	; 0x22
        mev.data[3] = 0;
    5d58:	1b a2       	std	Y+35, r1	; 0x23

        DUMP("SET TIME SIGNATURE to ", getTimeSignature(mf) >> 8);
        DUMP("/", getTimeSignature(mf) & 0xf);
      }
      break;
    5d5a:	55 c1       	rjmp	.+682    	; 0x6006 <parseEvent+0x916>

      case 0x59:  // Key Signature
      {
        int8_t sf,mi;
		DUMPS("KEY SIGNATURE");
        f_read(&mf->_fd,&sf,1,&bRead);
    5d5c:	ce 01       	movw	r24, r28
    5d5e:	8a 58       	subi	r24, 0x8A	; 138
    5d60:	9f 4f       	sbci	r25, 0xFF	; 255
    5d62:	fc 01       	movw	r30, r24
    5d64:	80 81       	ld	r24, Z
    5d66:	91 81       	ldd	r25, Z+1	; 0x01
    5d68:	06 96       	adiw	r24, 0x06	; 6
    5d6a:	9e 01       	movw	r18, r28
    5d6c:	2a 5e       	subi	r18, 0xEA	; 234
    5d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    5d70:	be 01       	movw	r22, r28
    5d72:	66 5e       	subi	r22, 0xE6	; 230
    5d74:	7f 4f       	sbci	r23, 0xFF	; 255
    5d76:	41 e0       	ldi	r20, 0x01	; 1
    5d78:	50 e0       	ldi	r21, 0x00	; 0
    5d7a:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <f_read>
        f_read(&mf->_fd,&mi,1,&bRead);
    5d7e:	ce 01       	movw	r24, r28
    5d80:	8a 58       	subi	r24, 0x8A	; 138
    5d82:	9f 4f       	sbci	r25, 0xFF	; 255
    5d84:	fc 01       	movw	r30, r24
    5d86:	80 81       	ld	r24, Z
    5d88:	91 81       	ldd	r25, Z+1	; 0x01
    5d8a:	06 96       	adiw	r24, 0x06	; 6
    5d8c:	9e 01       	movw	r18, r28
    5d8e:	2a 5e       	subi	r18, 0xEA	; 234
    5d90:	3f 4f       	sbci	r19, 0xFF	; 255
    5d92:	be 01       	movw	r22, r28
    5d94:	65 5e       	subi	r22, 0xE5	; 229
    5d96:	7f 4f       	sbci	r23, 0xFF	; 255
    5d98:	41 e0       	ldi	r20, 0x01	; 1
    5d9a:	50 e0       	ldi	r21, 0x00	; 0
    5d9c:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <f_read>
        const char* aaa[] = {"Cb", "Gb", "Db", "Ab", "Eb", "Bb", "F", "C", "G", "D", "A", "E", "B", "F#", "C#", "G#", "D#", "A#"};
    5da0:	ce 01       	movw	r24, r28
    5da2:	8e 5a       	subi	r24, 0xAE	; 174
    5da4:	9f 4f       	sbci	r25, 0xFF	; 255
    5da6:	24 e2       	ldi	r18, 0x24	; 36
    5da8:	e1 ee       	ldi	r30, 0xE1	; 225
    5daa:	f0 e0       	ldi	r31, 0x00	; 0
    5dac:	dc 01       	movw	r26, r24
    5dae:	01 90       	ld	r0, Z+
    5db0:	0d 92       	st	X+, r0
    5db2:	2a 95       	dec	r18
    5db4:	e1 f7       	brne	.-8      	; 0x5dae <parseEvent+0x6be>

        if (sf >= -7 && sf <= 7) 
    5db6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5db8:	89 3f       	cpi	r24, 0xF9	; 249
    5dba:	0c f4       	brge	.+2      	; 0x5dbe <parseEvent+0x6ce>
    5dbc:	78 c0       	rjmp	.+240    	; 0x5eae <parseEvent+0x7be>
    5dbe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5dc0:	88 30       	cpi	r24, 0x08	; 8
    5dc2:	0c f0       	brlt	.+2      	; 0x5dc6 <parseEvent+0x6d6>
    5dc4:	74 c0       	rjmp	.+232    	; 0x5eae <parseEvent+0x7be>
        {
          switch(mi)
    5dc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5dc8:	08 2e       	mov	r0, r24
    5dca:	00 0c       	add	r0, r0
    5dcc:	99 0b       	sbc	r25, r25
    5dce:	00 97       	sbiw	r24, 0x00	; 0
    5dd0:	19 f0       	breq	.+6      	; 0x5dd8 <parseEvent+0x6e8>
    5dd2:	01 97       	sbiw	r24, 0x01	; 1
    5dd4:	79 f1       	breq	.+94     	; 0x5e34 <parseEvent+0x744>
    5dd6:	5c c0       	rjmp	.+184    	; 0x5e90 <parseEvent+0x7a0>
          {
            case 0:
              strcpy(mev.chars, aaa[sf+7]);
    5dd8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5dda:	08 2e       	mov	r0, r24
    5ddc:	00 0c       	add	r0, r0
    5dde:	99 0b       	sbc	r25, r25
    5de0:	07 96       	adiw	r24, 0x07	; 7
    5de2:	9e 01       	movw	r18, r28
    5de4:	2e 5a       	subi	r18, 0xAE	; 174
    5de6:	3f 4f       	sbci	r19, 0xFF	; 255
    5de8:	88 0f       	add	r24, r24
    5dea:	99 1f       	adc	r25, r25
    5dec:	82 0f       	add	r24, r18
    5dee:	93 1f       	adc	r25, r19
    5df0:	fc 01       	movw	r30, r24
    5df2:	20 81       	ld	r18, Z
    5df4:	31 81       	ldd	r19, Z+1	; 0x01
    5df6:	ce 01       	movw	r24, r28
    5df8:	4c 96       	adiw	r24, 0x1c	; 28
    5dfa:	04 96       	adiw	r24, 0x04	; 4
    5dfc:	b9 01       	movw	r22, r18
    5dfe:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <strcpy>
              strcat(mev.chars, "M");
    5e02:	ce 01       	movw	r24, r28
    5e04:	4c 96       	adiw	r24, 0x1c	; 28
    5e06:	04 96       	adiw	r24, 0x04	; 4
    5e08:	9c 01       	movw	r18, r24
    5e0a:	f9 01       	movw	r30, r18
    5e0c:	01 90       	ld	r0, Z+
    5e0e:	00 20       	and	r0, r0
    5e10:	e9 f7       	brne	.-6      	; 0x5e0c <parseEvent+0x71c>
    5e12:	cf 01       	movw	r24, r30
    5e14:	01 97       	sbiw	r24, 0x01	; 1
    5e16:	82 1b       	sub	r24, r18
    5e18:	93 0b       	sbc	r25, r19
    5e1a:	9e 01       	movw	r18, r28
    5e1c:	24 5e       	subi	r18, 0xE4	; 228
    5e1e:	3f 4f       	sbci	r19, 0xFF	; 255
    5e20:	2c 5f       	subi	r18, 0xFC	; 252
    5e22:	3f 4f       	sbci	r19, 0xFF	; 255
    5e24:	82 0f       	add	r24, r18
    5e26:	93 1f       	adc	r25, r19
    5e28:	2d e4       	ldi	r18, 0x4D	; 77
    5e2a:	30 e0       	ldi	r19, 0x00	; 0
    5e2c:	fc 01       	movw	r30, r24
    5e2e:	31 83       	std	Z+1, r19	; 0x01
    5e30:	20 83       	st	Z, r18
              break;
    5e32:	3c c0       	rjmp	.+120    	; 0x5eac <parseEvent+0x7bc>
            case 1:
              strcpy(mev.chars, aaa[sf+10]);
    5e34:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5e36:	08 2e       	mov	r0, r24
    5e38:	00 0c       	add	r0, r0
    5e3a:	99 0b       	sbc	r25, r25
    5e3c:	0a 96       	adiw	r24, 0x0a	; 10
    5e3e:	9e 01       	movw	r18, r28
    5e40:	2e 5a       	subi	r18, 0xAE	; 174
    5e42:	3f 4f       	sbci	r19, 0xFF	; 255
    5e44:	88 0f       	add	r24, r24
    5e46:	99 1f       	adc	r25, r25
    5e48:	82 0f       	add	r24, r18
    5e4a:	93 1f       	adc	r25, r19
    5e4c:	fc 01       	movw	r30, r24
    5e4e:	20 81       	ld	r18, Z
    5e50:	31 81       	ldd	r19, Z+1	; 0x01
    5e52:	ce 01       	movw	r24, r28
    5e54:	4c 96       	adiw	r24, 0x1c	; 28
    5e56:	04 96       	adiw	r24, 0x04	; 4
    5e58:	b9 01       	movw	r22, r18
    5e5a:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <strcpy>
              strcat(mev.chars, "m");
    5e5e:	ce 01       	movw	r24, r28
    5e60:	4c 96       	adiw	r24, 0x1c	; 28
    5e62:	04 96       	adiw	r24, 0x04	; 4
    5e64:	9c 01       	movw	r18, r24
    5e66:	f9 01       	movw	r30, r18
    5e68:	01 90       	ld	r0, Z+
    5e6a:	00 20       	and	r0, r0
    5e6c:	e9 f7       	brne	.-6      	; 0x5e68 <parseEvent+0x778>
    5e6e:	cf 01       	movw	r24, r30
    5e70:	01 97       	sbiw	r24, 0x01	; 1
    5e72:	82 1b       	sub	r24, r18
    5e74:	93 0b       	sbc	r25, r19
    5e76:	9e 01       	movw	r18, r28
    5e78:	24 5e       	subi	r18, 0xE4	; 228
    5e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    5e7c:	2c 5f       	subi	r18, 0xFC	; 252
    5e7e:	3f 4f       	sbci	r19, 0xFF	; 255
    5e80:	82 0f       	add	r24, r18
    5e82:	93 1f       	adc	r25, r19
    5e84:	2d e6       	ldi	r18, 0x6D	; 109
    5e86:	30 e0       	ldi	r19, 0x00	; 0
    5e88:	fc 01       	movw	r30, r24
    5e8a:	31 83       	std	Z+1, r19	; 0x01
    5e8c:	20 83       	st	Z, r18
              break;
    5e8e:	0e c0       	rjmp	.+28     	; 0x5eac <parseEvent+0x7bc>
            default:
              strcpy(mev.chars, "Err"); // error mi
    5e90:	ce 01       	movw	r24, r28
    5e92:	4c 96       	adiw	r24, 0x1c	; 28
    5e94:	04 96       	adiw	r24, 0x04	; 4
    5e96:	25 e4       	ldi	r18, 0x45	; 69
    5e98:	32 e7       	ldi	r19, 0x72	; 114
    5e9a:	fc 01       	movw	r30, r24
    5e9c:	31 83       	std	Z+1, r19	; 0x01
    5e9e:	20 83       	st	Z, r18
    5ea0:	22 e7       	ldi	r18, 0x72	; 114
    5ea2:	30 e0       	ldi	r19, 0x00	; 0
    5ea4:	fc 01       	movw	r30, r24
    5ea6:	33 83       	std	Z+3, r19	; 0x03
    5ea8:	22 83       	std	Z+2, r18	; 0x02
          }
        } else
    5eaa:	0e c0       	rjmp	.+28     	; 0x5ec8 <parseEvent+0x7d8>
    5eac:	0d c0       	rjmp	.+26     	; 0x5ec8 <parseEvent+0x7d8>
          strcpy(mev.chars, "Err"); // error sf
    5eae:	ce 01       	movw	r24, r28
    5eb0:	4c 96       	adiw	r24, 0x1c	; 28
    5eb2:	04 96       	adiw	r24, 0x04	; 4
    5eb4:	25 e4       	ldi	r18, 0x45	; 69
    5eb6:	32 e7       	ldi	r19, 0x72	; 114
    5eb8:	fc 01       	movw	r30, r24
    5eba:	31 83       	std	Z+1, r19	; 0x01
    5ebc:	20 83       	st	Z, r18
    5ebe:	22 e7       	ldi	r18, 0x72	; 114
    5ec0:	30 e0       	ldi	r19, 0x00	; 0
    5ec2:	fc 01       	movw	r30, r24
    5ec4:	33 83       	std	Z+3, r19	; 0x03
    5ec6:	22 83       	std	Z+2, r18	; 0x02

        mev.size = strlen(mev.chars); // change META length
    5ec8:	ce 01       	movw	r24, r28
    5eca:	4c 96       	adiw	r24, 0x1c	; 28
    5ecc:	04 96       	adiw	r24, 0x04	; 4
    5ece:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <strlen>
    5ed2:	9e 8f       	std	Y+30, r25	; 0x1e
    5ed4:	8d 8f       	std	Y+29, r24	; 0x1d
        DUMP(" ", mev.chars);
      }
      break;
    5ed6:	97 c0       	rjmp	.+302    	; 0x6006 <parseEvent+0x916>

      case 0x00:  // Sequence Number
      {
        uint16_t x = readMultiByte(&mf->_fd, MB_WORD);
    5ed8:	ce 01       	movw	r24, r28
    5eda:	8a 58       	subi	r24, 0x8A	; 138
    5edc:	9f 4f       	sbci	r25, 0xFF	; 255
    5ede:	fc 01       	movw	r30, r24
    5ee0:	80 81       	ld	r24, Z
    5ee2:	91 81       	ldd	r25, Z+1	; 0x01
    5ee4:	06 96       	adiw	r24, 0x06	; 6
    5ee6:	62 e0       	ldi	r22, 0x02	; 2
    5ee8:	0e 94 79 29 	call	0x52f2	; 0x52f2 <readMultiByte>
    5eec:	dc 01       	movw	r26, r24
    5eee:	cb 01       	movw	r24, r22
    5ef0:	9b 8b       	std	Y+19, r25	; 0x13
    5ef2:	8a 8b       	std	Y+18, r24	; 0x12

        mev.data[0] = (x >> 8) & 0xFF;
    5ef4:	8a 89       	ldd	r24, Y+18	; 0x12
    5ef6:	9b 89       	ldd	r25, Y+19	; 0x13
    5ef8:	89 2f       	mov	r24, r25
    5efa:	99 27       	eor	r25, r25
    5efc:	88 a3       	std	Y+32, r24	; 0x20
        mev.data[1] = x & 0xFF;
    5efe:	8a 89       	ldd	r24, Y+18	; 0x12
    5f00:	89 a3       	std	Y+33, r24	; 0x21

        DUMP("SEQUENCE NUMBER ", mev.data[0]);
        DUMP(" ", mev.data[1]);
      }
      break;
    5f02:	81 c0       	rjmp	.+258    	; 0x6006 <parseEvent+0x916>

      case 0x20:  // Channel Prefix
      mev.data[0] = readMultiByte(&mf->_fd, MB_BYTE);
    5f04:	ce 01       	movw	r24, r28
    5f06:	8a 58       	subi	r24, 0x8A	; 138
    5f08:	9f 4f       	sbci	r25, 0xFF	; 255
    5f0a:	fc 01       	movw	r30, r24
    5f0c:	80 81       	ld	r24, Z
    5f0e:	91 81       	ldd	r25, Z+1	; 0x01
    5f10:	06 96       	adiw	r24, 0x06	; 6
    5f12:	61 e0       	ldi	r22, 0x01	; 1
    5f14:	0e 94 79 29 	call	0x52f2	; 0x52f2 <readMultiByte>
    5f18:	dc 01       	movw	r26, r24
    5f1a:	cb 01       	movw	r24, r22
    5f1c:	88 a3       	std	Y+32, r24	; 0x20
      DUMP("CHANNEL PREFIX ", mev.data[0]);
      break;
    5f1e:	73 c0       	rjmp	.+230    	; 0x6006 <parseEvent+0x916>

      case 0x21:  // Port Prefix
      mev.data[0] = readMultiByte(&mf->_fd, MB_BYTE);
    5f20:	ce 01       	movw	r24, r28
    5f22:	8a 58       	subi	r24, 0x8A	; 138
    5f24:	9f 4f       	sbci	r25, 0xFF	; 255
    5f26:	fc 01       	movw	r30, r24
    5f28:	80 81       	ld	r24, Z
    5f2a:	91 81       	ldd	r25, Z+1	; 0x01
    5f2c:	06 96       	adiw	r24, 0x06	; 6
    5f2e:	61 e0       	ldi	r22, 0x01	; 1
    5f30:	0e 94 79 29 	call	0x52f2	; 0x52f2 <readMultiByte>
    5f34:	dc 01       	movw	r26, r24
    5f36:	cb 01       	movw	r24, r22
    5f38:	88 a3       	std	Y+32, r24	; 0x20
      DUMP("PORT PREFIX ", mev.data[0]);
      break;
    5f3a:	65 c0       	rjmp	.+202    	; 0x6006 <parseEvent+0x916>
      break;
#endif // SHOW_UNUSED_META

      default:
      {
        uint8_t minLen = min(ARRAY_SIZE(mev.data), mLen);
    5f3c:	88 85       	ldd	r24, Y+8	; 0x08
    5f3e:	99 85       	ldd	r25, Y+9	; 0x09
    5f40:	aa 85       	ldd	r26, Y+10	; 0x0a
    5f42:	bb 85       	ldd	r27, Y+11	; 0x0b
    5f44:	83 33       	cpi	r24, 0x33	; 51
    5f46:	91 05       	cpc	r25, r1
    5f48:	a1 05       	cpc	r26, r1
    5f4a:	b1 05       	cpc	r27, r1
    5f4c:	20 f0       	brcs	.+8      	; 0x5f56 <parseEvent+0x866>
    5f4e:	82 e3       	ldi	r24, 0x32	; 50
    5f50:	90 e0       	ldi	r25, 0x00	; 0
    5f52:	a0 e0       	ldi	r26, 0x00	; 0
    5f54:	b0 e0       	ldi	r27, 0x00	; 0
    5f56:	8c 8b       	std	Y+20, r24	; 0x14
        
        for (uint8_t i = 0; i < minLen; ++i)
    5f58:	1f 82       	std	Y+7, r1	; 0x07
    5f5a:	1b c0       	rjmp	.+54     	; 0x5f92 <parseEvent+0x8a2>
          f_read(&mf->_fd,&mev.data[i],1,&bRead); // read next
    5f5c:	8f 81       	ldd	r24, Y+7	; 0x07
    5f5e:	88 2f       	mov	r24, r24
    5f60:	90 e0       	ldi	r25, 0x00	; 0
    5f62:	9e 01       	movw	r18, r28
    5f64:	24 5e       	subi	r18, 0xE4	; 228
    5f66:	3f 4f       	sbci	r19, 0xFF	; 255
    5f68:	04 96       	adiw	r24, 0x04	; 4
    5f6a:	b9 01       	movw	r22, r18
    5f6c:	68 0f       	add	r22, r24
    5f6e:	79 1f       	adc	r23, r25
    5f70:	ce 01       	movw	r24, r28
    5f72:	8a 58       	subi	r24, 0x8A	; 138
    5f74:	9f 4f       	sbci	r25, 0xFF	; 255
    5f76:	fc 01       	movw	r30, r24
    5f78:	80 81       	ld	r24, Z
    5f7a:	91 81       	ldd	r25, Z+1	; 0x01
    5f7c:	06 96       	adiw	r24, 0x06	; 6
    5f7e:	9e 01       	movw	r18, r28
    5f80:	2a 5e       	subi	r18, 0xEA	; 234
    5f82:	3f 4f       	sbci	r19, 0xFF	; 255
    5f84:	41 e0       	ldi	r20, 0x01	; 1
    5f86:	50 e0       	ldi	r21, 0x00	; 0
    5f88:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <f_read>

      default:
      {
        uint8_t minLen = min(ARRAY_SIZE(mev.data), mLen);
        
        for (uint8_t i = 0; i < minLen; ++i)
    5f8c:	8f 81       	ldd	r24, Y+7	; 0x07
    5f8e:	8f 5f       	subi	r24, 0xFF	; 255
    5f90:	8f 83       	std	Y+7, r24	; 0x07
    5f92:	9f 81       	ldd	r25, Y+7	; 0x07
    5f94:	8c 89       	ldd	r24, Y+20	; 0x14
    5f96:	98 17       	cp	r25, r24
    5f98:	08 f3       	brcs	.-62     	; 0x5f5c <parseEvent+0x86c>
          f_read(&mf->_fd,&mev.data[i],1,&bRead); // read next
		 		  
        mev.chars[minLen] = '\0'; // in case it is a string
    5f9a:	8c 89       	ldd	r24, Y+20	; 0x14
    5f9c:	88 2f       	mov	r24, r24
    5f9e:	90 e0       	ldi	r25, 0x00	; 0
    5fa0:	9e 01       	movw	r18, r28
    5fa2:	20 5e       	subi	r18, 0xE0	; 224
    5fa4:	3f 4f       	sbci	r19, 0xFF	; 255
    5fa6:	82 0f       	add	r24, r18
    5fa8:	93 1f       	adc	r25, r19
    5faa:	fc 01       	movw	r30, r24
    5fac:	10 82       	st	Z, r1
        if (mLen > ARRAY_SIZE(mev.data))
    5fae:	88 85       	ldd	r24, Y+8	; 0x08
    5fb0:	99 85       	ldd	r25, Y+9	; 0x09
    5fb2:	aa 85       	ldd	r26, Y+10	; 0x0a
    5fb4:	bb 85       	ldd	r27, Y+11	; 0x0b
    5fb6:	c3 97       	sbiw	r24, 0x33	; 51
    5fb8:	a1 05       	cpc	r26, r1
    5fba:	b1 05       	cpc	r27, r1
    5fbc:	18 f1       	brcs	.+70     	; 0x6004 <parseEvent+0x914>
          f_lseek(&mf->_fd,f_tell(&mf->_fd) + (mLen-ARRAY_SIZE(mev.data)));
    5fbe:	ce 01       	movw	r24, r28
    5fc0:	8a 58       	subi	r24, 0x8A	; 138
    5fc2:	9f 4f       	sbci	r25, 0xFF	; 255
    5fc4:	fc 01       	movw	r30, r24
    5fc6:	80 81       	ld	r24, Z
    5fc8:	91 81       	ldd	r25, Z+1	; 0x01
    5fca:	fc 01       	movw	r30, r24
    5fcc:	24 85       	ldd	r18, Z+12	; 0x0c
    5fce:	35 85       	ldd	r19, Z+13	; 0x0d
    5fd0:	46 85       	ldd	r20, Z+14	; 0x0e
    5fd2:	57 85       	ldd	r21, Z+15	; 0x0f
    5fd4:	88 85       	ldd	r24, Y+8	; 0x08
    5fd6:	99 85       	ldd	r25, Y+9	; 0x09
    5fd8:	aa 85       	ldd	r26, Y+10	; 0x0a
    5fda:	bb 85       	ldd	r27, Y+11	; 0x0b
    5fdc:	82 0f       	add	r24, r18
    5fde:	93 1f       	adc	r25, r19
    5fe0:	a4 1f       	adc	r26, r20
    5fe2:	b5 1f       	adc	r27, r21
    5fe4:	c2 97       	sbiw	r24, 0x32	; 50
    5fe6:	a1 09       	sbc	r26, r1
    5fe8:	b1 09       	sbc	r27, r1
    5fea:	9e 01       	movw	r18, r28
    5fec:	2a 58       	subi	r18, 0x8A	; 138
    5fee:	3f 4f       	sbci	r19, 0xFF	; 255
    5ff0:	f9 01       	movw	r30, r18
    5ff2:	20 81       	ld	r18, Z
    5ff4:	31 81       	ldd	r19, Z+1	; 0x01
    5ff6:	2a 5f       	subi	r18, 0xFA	; 250
    5ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    5ffa:	ac 01       	movw	r20, r24
    5ffc:	bd 01       	movw	r22, r26
    5ffe:	c9 01       	movw	r24, r18
    6000:	0e 94 1c 1b 	call	0x3638	; 0x3638 <f_lseek>
  //    DUMPS("IGNORED");
      }
      break;
    6004:	00 00       	nop
    }
    if (mf->_metaHandler != NULL)
    6006:	ce 01       	movw	r24, r28
    6008:	8a 58       	subi	r24, 0x8A	; 138
    600a:	9f 4f       	sbci	r25, 0xFF	; 255
    600c:	fc 01       	movw	r30, r24
    600e:	80 81       	ld	r24, Z
    6010:	91 81       	ldd	r25, Z+1	; 0x01
    6012:	fc 01       	movw	r30, r24
    6014:	84 81       	ldd	r24, Z+4	; 0x04
    6016:	95 81       	ldd	r25, Z+5	; 0x05
    6018:	89 2b       	or	r24, r25
    601a:	01 f1       	breq	.+64     	; 0x605c <parseEvent+0x96c>
      (mf->_metaHandler)(&mev);
    601c:	ce 01       	movw	r24, r28
    601e:	8a 58       	subi	r24, 0x8A	; 138
    6020:	9f 4f       	sbci	r25, 0xFF	; 255
    6022:	fc 01       	movw	r30, r24
    6024:	80 81       	ld	r24, Z
    6026:	91 81       	ldd	r25, Z+1	; 0x01
    6028:	fc 01       	movw	r30, r24
    602a:	24 81       	ldd	r18, Z+4	; 0x04
    602c:	35 81       	ldd	r19, Z+5	; 0x05
    602e:	ce 01       	movw	r24, r28
    6030:	4c 96       	adiw	r24, 0x1c	; 28
    6032:	f9 01       	movw	r30, r18
    6034:	09 95       	icall
  }
  break;
    6036:	12 c0       	rjmp	.+36     	; 0x605c <parseEvent+0x96c>
  
// ---------------------------- UNKNOWN
  default:
    // stop playing this track as we cannot identify the eType
    t->_endOfTrack = TRUE;
    6038:	ce 01       	movw	r24, r28
    603a:	88 58       	subi	r24, 0x88	; 136
    603c:	9f 4f       	sbci	r25, 0xFF	; 255
    603e:	fc 01       	movw	r30, r24
    6040:	80 81       	ld	r24, Z
    6042:	91 81       	ldd	r25, Z+1	; 0x01
    6044:	21 e0       	ldi	r18, 0x01	; 1
    6046:	fc 01       	movw	r30, r24
    6048:	25 87       	std	Z+13, r18	; 0x0d
    DUMPX("[UKNOWN 0x", eType);
    DUMPS("] Track aborted");
    break;
    604a:	09 c0       	rjmp	.+18     	; 0x605e <parseEvent+0x96e>
    DUMPX(" ", _mev.data[2]);	
#if !DUMP_DATA
    if (mf->_midiHandler != NULL)
      (mf->_midiHandler)(&t->_mev);
#endif // !DUMP_DATA
  break;
    604c:	00 00       	nop
    604e:	07 c0       	rjmp	.+14     	; 0x605e <parseEvent+0x96e>

#if !DUMP_DATA
    if (mf->_midiHandler != NULL)
      (mf->_midiHandler)(&t->_mev);
#endif
  break;
    6050:	00 00       	nop
    6052:	05 c0       	rjmp	.+10     	; 0x605e <parseEvent+0x96e>
#if !DUMP_DATA
    if (mf->_midiHandler != NULL)
      (mf->_midiHandler)(&t->_mev);
#endif
  }
  break;
    6054:	00 00       	nop
    6056:	03 c0       	rjmp	.+6      	; 0x605e <parseEvent+0x96e>
#else
    if (mf->_sysexHandler != NULL)
      (mf->_sysexHandler)(&sev);
#endif
  }
  break;
    6058:	00 00       	nop
    605a:	01 c0       	rjmp	.+2      	; 0x605e <parseEvent+0x96e>
      break;
    }
    if (mf->_metaHandler != NULL)
      (mf->_metaHandler)(&mev);
  }
  break;
    605c:	00 00       	nop
    t->_endOfTrack = TRUE;
    DUMPX("[UKNOWN 0x", eType);
    DUMPS("] Track aborted");
    break;
  }
}
    605e:	00 00       	nop
    6060:	c7 58       	subi	r28, 0x87	; 135
    6062:	df 4f       	sbci	r29, 0xFF	; 255
    6064:	0f b6       	in	r0, 0x3f	; 63
    6066:	f8 94       	cli
    6068:	de bf       	out	0x3e, r29	; 62
    606a:	0f be       	out	0x3f, r0	; 63
    606c:	cd bf       	out	0x3d, r28	; 61
    606e:	df 91       	pop	r29
    6070:	cf 91       	pop	r28
    6072:	08 95       	ret

00006074 <loadTrack>:

int loadTrack(struct MD_MFTrack *t,uint8_t trackId, struct MD_MIDIFile *mf)
{
    6074:	cf 93       	push	r28
    6076:	df 93       	push	r29
    6078:	cd b7       	in	r28, 0x3d	; 61
    607a:	de b7       	in	r29, 0x3e	; 62
    607c:	2e 97       	sbiw	r28, 0x0e	; 14
    607e:	0f b6       	in	r0, 0x3f	; 63
    6080:	f8 94       	cli
    6082:	de bf       	out	0x3e, r29	; 62
    6084:	0f be       	out	0x3f, r0	; 63
    6086:	cd bf       	out	0x3d, r28	; 61
    6088:	9b 87       	std	Y+11, r25	; 0x0b
    608a:	8a 87       	std	Y+10, r24	; 0x0a
    608c:	6c 87       	std	Y+12, r22	; 0x0c
    608e:	5e 87       	std	Y+14, r21	; 0x0e
    6090:	4d 87       	std	Y+13, r20	; 0x0d
  uint32_t  dat32;
  uint16_t  dat16;

  // save the trackid for use later
  t->_trackId = t->_mev.track = trackId;
    6092:	8a 85       	ldd	r24, Y+10	; 0x0a
    6094:	9b 85       	ldd	r25, Y+11	; 0x0b
    6096:	2c 85       	ldd	r18, Y+12	; 0x0c
    6098:	fc 01       	movw	r30, r24
    609a:	22 8b       	std	Z+18, r18	; 0x12
    609c:	8a 85       	ldd	r24, Y+10	; 0x0a
    609e:	9b 85       	ldd	r25, Y+11	; 0x0b
    60a0:	fc 01       	movw	r30, r24
    60a2:	22 89       	ldd	r18, Z+18	; 0x12
    60a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    60a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    60a8:	fc 01       	movw	r30, r24
    60aa:	20 83       	st	Z, r18
  // Read the Track header
  // track_chunk = "MTrk" + <length:4> + <track_event> [+ <track_event> ...]
  {
    char    h[MTRK_HDR_SIZE+1]; // Header characters + nul
  
    f_read(&mf->_fd,h,MTRK_HDR_SIZE,&dat32);
    60ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    60ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    60b0:	06 96       	adiw	r24, 0x06	; 6
    60b2:	be 01       	movw	r22, r28
    60b4:	6b 5f       	subi	r22, 0xFB	; 251
    60b6:	7f 4f       	sbci	r23, 0xFF	; 255
    60b8:	9e 01       	movw	r18, r28
    60ba:	2f 5f       	subi	r18, 0xFF	; 255
    60bc:	3f 4f       	sbci	r19, 0xFF	; 255
    60be:	44 e0       	ldi	r20, 0x04	; 4
    60c0:	50 e0       	ldi	r21, 0x00	; 0
    60c2:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <f_read>
    h[MTRK_HDR_SIZE] = '\0';
    60c6:	19 86       	std	Y+9, r1	; 0x09

    if (strcmp(h, MTRK_HDR) != 0)
    60c8:	ce 01       	movw	r24, r28
    60ca:	05 96       	adiw	r24, 0x05	; 5
    60cc:	65 e0       	ldi	r22, 0x05	; 5
    60ce:	71 e0       	ldi	r23, 0x01	; 1
    60d0:	0e 94 d1 3d 	call	0x7ba2	; 0x7ba2 <strcmp>
    60d4:	89 2b       	or	r24, r25
    60d6:	19 f0       	breq	.+6      	; 0x60de <loadTrack+0x6a>
      return(0);
    60d8:	80 e0       	ldi	r24, 0x00	; 0
    60da:	90 e0       	ldi	r25, 0x00	; 0
    60dc:	4e c0       	rjmp	.+156    	; 0x617a <loadTrack+0x106>
  }

  // Row read track chunk size and in bytes. This is not really necessary 
  // since the track MUST end with an end of track meta event.
  dat32 = readMultiByte(&mf->_fd, MB_LONG);
    60de:	8d 85       	ldd	r24, Y+13	; 0x0d
    60e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    60e2:	06 96       	adiw	r24, 0x06	; 6
    60e4:	64 e0       	ldi	r22, 0x04	; 4
    60e6:	0e 94 79 29 	call	0x52f2	; 0x52f2 <readMultiByte>
    60ea:	dc 01       	movw	r26, r24
    60ec:	cb 01       	movw	r24, r22
    60ee:	89 83       	std	Y+1, r24	; 0x01
    60f0:	9a 83       	std	Y+2, r25	; 0x02
    60f2:	ab 83       	std	Y+3, r26	; 0x03
    60f4:	bc 83       	std	Y+4, r27	; 0x04
  t->_length = dat32;
    60f6:	89 81       	ldd	r24, Y+1	; 0x01
    60f8:	9a 81       	ldd	r25, Y+2	; 0x02
    60fa:	ab 81       	ldd	r26, Y+3	; 0x03
    60fc:	bc 81       	ldd	r27, Y+4	; 0x04
    60fe:	2a 85       	ldd	r18, Y+10	; 0x0a
    6100:	3b 85       	ldd	r19, Y+11	; 0x0b
    6102:	f9 01       	movw	r30, r18
    6104:	81 83       	std	Z+1, r24	; 0x01
    6106:	92 83       	std	Z+2, r25	; 0x02
    6108:	a3 83       	std	Z+3, r26	; 0x03
    610a:	b4 83       	std	Z+4, r27	; 0x04

  // save where we are in the file as this is the start of offset for this track
  t->_startOffset = mf->_fd.fptr;
    610c:	8d 85       	ldd	r24, Y+13	; 0x0d
    610e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6110:	fc 01       	movw	r30, r24
    6112:	84 85       	ldd	r24, Z+12	; 0x0c
    6114:	95 85       	ldd	r25, Z+13	; 0x0d
    6116:	a6 85       	ldd	r26, Z+14	; 0x0e
    6118:	b7 85       	ldd	r27, Z+15	; 0x0f
    611a:	2a 85       	ldd	r18, Y+10	; 0x0a
    611c:	3b 85       	ldd	r19, Y+11	; 0x0b
    611e:	f9 01       	movw	r30, r18
    6120:	85 83       	std	Z+5, r24	; 0x05
    6122:	96 83       	std	Z+6, r25	; 0x06
    6124:	a7 83       	std	Z+7, r26	; 0x07
    6126:	b0 87       	std	Z+8, r27	; 0x08
  t->_currOffset = 0;
    6128:	8a 85       	ldd	r24, Y+10	; 0x0a
    612a:	9b 85       	ldd	r25, Y+11	; 0x0b
    612c:	fc 01       	movw	r30, r24
    612e:	11 86       	std	Z+9, r1	; 0x09
    6130:	12 86       	std	Z+10, r1	; 0x0a
    6132:	13 86       	std	Z+11, r1	; 0x0b
    6134:	14 86       	std	Z+12, r1	; 0x0c

  // Advance the file pointer to the start of the next track;
  if (f_lseek(&mf->_fd,(t->_startOffset+t->_length)) != FR_OK)
    6136:	8a 85       	ldd	r24, Y+10	; 0x0a
    6138:	9b 85       	ldd	r25, Y+11	; 0x0b
    613a:	fc 01       	movw	r30, r24
    613c:	25 81       	ldd	r18, Z+5	; 0x05
    613e:	36 81       	ldd	r19, Z+6	; 0x06
    6140:	47 81       	ldd	r20, Z+7	; 0x07
    6142:	50 85       	ldd	r21, Z+8	; 0x08
    6144:	8a 85       	ldd	r24, Y+10	; 0x0a
    6146:	9b 85       	ldd	r25, Y+11	; 0x0b
    6148:	fc 01       	movw	r30, r24
    614a:	81 81       	ldd	r24, Z+1	; 0x01
    614c:	92 81       	ldd	r25, Z+2	; 0x02
    614e:	a3 81       	ldd	r26, Z+3	; 0x03
    6150:	b4 81       	ldd	r27, Z+4	; 0x04
    6152:	82 0f       	add	r24, r18
    6154:	93 1f       	adc	r25, r19
    6156:	a4 1f       	adc	r26, r20
    6158:	b5 1f       	adc	r27, r21
    615a:	2d 85       	ldd	r18, Y+13	; 0x0d
    615c:	3e 85       	ldd	r19, Y+14	; 0x0e
    615e:	2a 5f       	subi	r18, 0xFA	; 250
    6160:	3f 4f       	sbci	r19, 0xFF	; 255
    6162:	ac 01       	movw	r20, r24
    6164:	bd 01       	movw	r22, r26
    6166:	c9 01       	movw	r24, r18
    6168:	0e 94 1c 1b 	call	0x3638	; 0x3638 <f_lseek>
    616c:	88 23       	and	r24, r24
    616e:	19 f0       	breq	.+6      	; 0x6176 <loadTrack+0x102>
    return(1);
    6170:	81 e0       	ldi	r24, 0x01	; 1
    6172:	90 e0       	ldi	r25, 0x00	; 0
    6174:	02 c0       	rjmp	.+4      	; 0x617a <loadTrack+0x106>

  return(-1);
    6176:	8f ef       	ldi	r24, 0xFF	; 255
    6178:	9f ef       	ldi	r25, 0xFF	; 255
}
    617a:	2e 96       	adiw	r28, 0x0e	; 14
    617c:	0f b6       	in	r0, 0x3f	; 63
    617e:	f8 94       	cli
    6180:	de bf       	out	0x3e, r29	; 62
    6182:	0f be       	out	0x3f, r0	; 63
    6184:	cd bf       	out	0x3d, r28	; 61
    6186:	df 91       	pop	r29
    6188:	cf 91       	pop	r28
    618a:	08 95       	ret

0000618c <midiInit>:
	midiEvent[2] = bank;		// LSB
	sendMidiMessage(3);
	midiEvent[0] = MIDI_PROGRAM_CHANGE;
	midiEvent[1] = program;
	sendMidiMessage(2);
}
    618c:	cf 93       	push	r28
    618e:	df 93       	push	r29
    6190:	cd b7       	in	r28, 0x3d	; 61
    6192:	de b7       	in	r29, 0x3e	; 62
    6194:	81 e0       	ldi	r24, 0x01	; 1
    6196:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <midiState>
    619a:	00 00       	nop
    619c:	df 91       	pop	r29
    619e:	cf 91       	pop	r28
    61a0:	08 95       	ret

000061a2 <readMidiMessage>:
    61a2:	cf 93       	push	r28
    61a4:	df 93       	push	r29
    61a6:	00 d0       	rcall	.+0      	; 0x61a8 <readMidiMessage+0x6>
    61a8:	00 d0       	rcall	.+0      	; 0x61aa <readMidiMessage+0x8>
    61aa:	cd b7       	in	r28, 0x3d	; 61
    61ac:	de b7       	in	r29, 0x3e	; 62
    61ae:	8a 83       	std	Y+2, r24	; 0x02
    61b0:	7c 83       	std	Y+4, r23	; 0x04
    61b2:	6b 83       	std	Y+3, r22	; 0x03
    61b4:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <midiState>
    61b8:	88 2f       	mov	r24, r24
    61ba:	90 e0       	ldi	r25, 0x00	; 0
    61bc:	82 30       	cpi	r24, 0x02	; 2
    61be:	91 05       	cpc	r25, r1
    61c0:	b1 f1       	breq	.+108    	; 0x622e <readMidiMessage+0x8c>
    61c2:	83 30       	cpi	r24, 0x03	; 3
    61c4:	91 05       	cpc	r25, r1
    61c6:	09 f4       	brne	.+2      	; 0x61ca <readMidiMessage+0x28>
    61c8:	6b c0       	rjmp	.+214    	; 0x62a0 <readMidiMessage+0xfe>
    61ca:	01 97       	sbiw	r24, 0x01	; 1
    61cc:	09 f0       	breq	.+2      	; 0x61d0 <readMidiMessage+0x2e>
    61ce:	74 c0       	rjmp	.+232    	; 0x62b8 <readMidiMessage+0x116>
    61d0:	8a 81       	ldd	r24, Y+2	; 0x02
    61d2:	80 3f       	cpi	r24, 0xF0	; 240
    61d4:	09 f4       	brne	.+2      	; 0x61d8 <readMidiMessage+0x36>
    61d6:	6b c0       	rjmp	.+214    	; 0x62ae <readMidiMessage+0x10c>
    61d8:	8a 81       	ldd	r24, Y+2	; 0x02
    61da:	0e 94 a7 31 	call	0x634e	; 0x634e <commandLen>
    61de:	89 83       	std	Y+1, r24	; 0x01
    61e0:	89 81       	ldd	r24, Y+1	; 0x01
    61e2:	81 30       	cpi	r24, 0x01	; 1
    61e4:	61 f4       	brne	.+24     	; 0x61fe <readMidiMessage+0x5c>
    61e6:	8b 81       	ldd	r24, Y+3	; 0x03
    61e8:	9c 81       	ldd	r25, Y+4	; 0x04
    61ea:	21 e0       	ldi	r18, 0x01	; 1
    61ec:	fc 01       	movw	r30, r24
    61ee:	20 83       	st	Z, r18
    61f0:	8a 81       	ldd	r24, Y+2	; 0x02
    61f2:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <midiEvent>
    61f6:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <noteEvent>
    61fa:	81 e0       	ldi	r24, 0x01	; 1
    61fc:	5e c0       	rjmp	.+188    	; 0x62ba <readMidiMessage+0x118>
    61fe:	89 81       	ldd	r24, Y+1	; 0x01
    6200:	88 23       	and	r24, r24
    6202:	59 f4       	brne	.+22     	; 0x621a <readMidiMessage+0x78>
    6204:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <noteEvent>
    6208:	81 30       	cpi	r24, 0x01	; 1
    620a:	69 f4       	brne	.+26     	; 0x6226 <readMidiMessage+0x84>
    620c:	8a 81       	ldd	r24, Y+2	; 0x02
    620e:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <midiEvent+0x1>
    6212:	82 e0       	ldi	r24, 0x02	; 2
    6214:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <midiReadIndex>
    6218:	06 c0       	rjmp	.+12     	; 0x6226 <readMidiMessage+0x84>
    621a:	8a 81       	ldd	r24, Y+2	; 0x02
    621c:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <midiEvent>
    6220:	81 e0       	ldi	r24, 0x01	; 1
    6222:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <midiReadIndex>
    6226:	82 e0       	ldi	r24, 0x02	; 2
    6228:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <midiState>
    622c:	45 c0       	rjmp	.+138    	; 0x62b8 <readMidiMessage+0x116>
    622e:	8a 81       	ldd	r24, Y+2	; 0x02
    6230:	0e 94 a7 31 	call	0x634e	; 0x634e <commandLen>
    6234:	88 23       	and	r24, r24
    6236:	39 f0       	breq	.+14     	; 0x6246 <readMidiMessage+0xa4>
    6238:	81 e0       	ldi	r24, 0x01	; 1
    623a:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <midiState>
    623e:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <noteEvent>
    6242:	80 e0       	ldi	r24, 0x00	; 0
    6244:	3a c0       	rjmp	.+116    	; 0x62ba <readMidiMessage+0x118>
    6246:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <midiReadIndex>
    624a:	91 e0       	ldi	r25, 0x01	; 1
    624c:	98 0f       	add	r25, r24
    624e:	90 93 61 04 	sts	0x0461, r25	; 0x800461 <midiReadIndex>
    6252:	88 2f       	mov	r24, r24
    6254:	90 e0       	ldi	r25, 0x00	; 0
    6256:	8d 59       	subi	r24, 0x9D	; 157
    6258:	9b 4f       	sbci	r25, 0xFB	; 251
    625a:	2a 81       	ldd	r18, Y+2	; 0x02
    625c:	fc 01       	movw	r30, r24
    625e:	20 83       	st	Z, r18
    6260:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <midiEvent>
    6264:	80 7f       	andi	r24, 0xF0	; 240
    6266:	0e 94 a7 31 	call	0x634e	; 0x634e <commandLen>
    626a:	98 2f       	mov	r25, r24
    626c:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <midiReadIndex>
    6270:	98 17       	cp	r25, r24
    6272:	f9 f4       	brne	.+62     	; 0x62b2 <readMidiMessage+0x110>
    6274:	81 e0       	ldi	r24, 0x01	; 1
    6276:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <midiState>
    627a:	20 91 61 04 	lds	r18, 0x0461	; 0x800461 <midiReadIndex>
    627e:	8b 81       	ldd	r24, Y+3	; 0x03
    6280:	9c 81       	ldd	r25, Y+4	; 0x04
    6282:	fc 01       	movw	r30, r24
    6284:	20 83       	st	Z, r18
    6286:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <midiEvent>
    628a:	88 2f       	mov	r24, r24
    628c:	90 e0       	ldi	r25, 0x00	; 0
    628e:	80 79       	andi	r24, 0x90	; 144
    6290:	99 27       	eor	r25, r25
    6292:	89 2b       	or	r24, r25
    6294:	19 f0       	breq	.+6      	; 0x629c <readMidiMessage+0xfa>
    6296:	81 e0       	ldi	r24, 0x01	; 1
    6298:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <noteEvent>
    629c:	81 e0       	ldi	r24, 0x01	; 1
    629e:	0d c0       	rjmp	.+26     	; 0x62ba <readMidiMessage+0x118>
    62a0:	8a 81       	ldd	r24, Y+2	; 0x02
    62a2:	87 3f       	cpi	r24, 0xF7	; 247
    62a4:	41 f4       	brne	.+16     	; 0x62b6 <readMidiMessage+0x114>
    62a6:	81 e0       	ldi	r24, 0x01	; 1
    62a8:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <midiState>
    62ac:	04 c0       	rjmp	.+8      	; 0x62b6 <readMidiMessage+0x114>
    62ae:	00 00       	nop
    62b0:	03 c0       	rjmp	.+6      	; 0x62b8 <readMidiMessage+0x116>
    62b2:	00 00       	nop
    62b4:	01 c0       	rjmp	.+2      	; 0x62b8 <readMidiMessage+0x116>
    62b6:	00 00       	nop
    62b8:	80 e0       	ldi	r24, 0x00	; 0
    62ba:	0f 90       	pop	r0
    62bc:	0f 90       	pop	r0
    62be:	0f 90       	pop	r0
    62c0:	0f 90       	pop	r0
    62c2:	df 91       	pop	r29
    62c4:	cf 91       	pop	r28
    62c6:	08 95       	ret

000062c8 <sendMidiMessage>:
    62c8:	cf 93       	push	r28
    62ca:	df 93       	push	r29
    62cc:	00 d0       	rcall	.+0      	; 0x62ce <sendMidiMessage+0x6>
    62ce:	cd b7       	in	r28, 0x3d	; 61
    62d0:	de b7       	in	r29, 0x3e	; 62
    62d2:	8a 83       	std	Y+2, r24	; 0x02
    62d4:	19 82       	std	Y+1, r1	; 0x01
    62d6:	0c c0       	rjmp	.+24     	; 0x62f0 <sendMidiMessage+0x28>
    62d8:	89 81       	ldd	r24, Y+1	; 0x01
    62da:	88 2f       	mov	r24, r24
    62dc:	90 e0       	ldi	r25, 0x00	; 0
    62de:	8d 59       	subi	r24, 0x9D	; 157
    62e0:	9b 4f       	sbci	r25, 0xFB	; 251
    62e2:	fc 01       	movw	r30, r24
    62e4:	80 81       	ld	r24, Z
    62e6:	0e 94 3c 3c 	call	0x7878	; 0x7878 <uartSendByte>
    62ea:	89 81       	ldd	r24, Y+1	; 0x01
    62ec:	8f 5f       	subi	r24, 0xFF	; 255
    62ee:	89 83       	std	Y+1, r24	; 0x01
    62f0:	99 81       	ldd	r25, Y+1	; 0x01
    62f2:	8a 81       	ldd	r24, Y+2	; 0x02
    62f4:	98 17       	cp	r25, r24
    62f6:	80 f3       	brcs	.-32     	; 0x62d8 <sendMidiMessage+0x10>
    62f8:	00 00       	nop
    62fa:	0f 90       	pop	r0
    62fc:	0f 90       	pop	r0
    62fe:	df 91       	pop	r29
    6300:	cf 91       	pop	r28
    6302:	08 95       	ret

00006304 <sendMidiBuffer>:
    6304:	cf 93       	push	r28
    6306:	df 93       	push	r29
    6308:	00 d0       	rcall	.+0      	; 0x630a <sendMidiBuffer+0x6>
    630a:	00 d0       	rcall	.+0      	; 0x630c <sendMidiBuffer+0x8>
    630c:	cd b7       	in	r28, 0x3d	; 61
    630e:	de b7       	in	r29, 0x3e	; 62
    6310:	9b 83       	std	Y+3, r25	; 0x03
    6312:	8a 83       	std	Y+2, r24	; 0x02
    6314:	6c 83       	std	Y+4, r22	; 0x04
    6316:	19 82       	std	Y+1, r1	; 0x01
    6318:	0e c0       	rjmp	.+28     	; 0x6336 <sendMidiBuffer+0x32>
    631a:	89 81       	ldd	r24, Y+1	; 0x01
    631c:	88 2f       	mov	r24, r24
    631e:	90 e0       	ldi	r25, 0x00	; 0
    6320:	2a 81       	ldd	r18, Y+2	; 0x02
    6322:	3b 81       	ldd	r19, Y+3	; 0x03
    6324:	82 0f       	add	r24, r18
    6326:	93 1f       	adc	r25, r19
    6328:	fc 01       	movw	r30, r24
    632a:	80 81       	ld	r24, Z
    632c:	0e 94 3c 3c 	call	0x7878	; 0x7878 <uartSendByte>
    6330:	89 81       	ldd	r24, Y+1	; 0x01
    6332:	8f 5f       	subi	r24, 0xFF	; 255
    6334:	89 83       	std	Y+1, r24	; 0x01
    6336:	99 81       	ldd	r25, Y+1	; 0x01
    6338:	8c 81       	ldd	r24, Y+4	; 0x04
    633a:	98 17       	cp	r25, r24
    633c:	70 f3       	brcs	.-36     	; 0x631a <sendMidiBuffer+0x16>
    633e:	00 00       	nop
    6340:	0f 90       	pop	r0
    6342:	0f 90       	pop	r0
    6344:	0f 90       	pop	r0
    6346:	0f 90       	pop	r0
    6348:	df 91       	pop	r29
    634a:	cf 91       	pop	r28
    634c:	08 95       	ret

0000634e <commandLen>:

unsigned char commandLen(unsigned char cmd)
{
    634e:	cf 93       	push	r28
    6350:	df 93       	push	r29
    6352:	1f 92       	push	r1
    6354:	cd b7       	in	r28, 0x3d	; 61
    6356:	de b7       	in	r29, 0x3e	; 62
    6358:	89 83       	std	Y+1, r24	; 0x01
	
	if ((cmd & 0xF0) != 0xF0)
    635a:	89 81       	ldd	r24, Y+1	; 0x01
    635c:	88 2f       	mov	r24, r24
    635e:	90 e0       	ldi	r25, 0x00	; 0
    6360:	80 7f       	andi	r24, 0xF0	; 240
    6362:	99 27       	eor	r25, r25
    6364:	80 3f       	cpi	r24, 0xF0	; 240
    6366:	91 05       	cpc	r25, r1
    6368:	19 f0       	breq	.+6      	; 0x6370 <commandLen+0x22>
	cmd = cmd & 0xF0;
    636a:	89 81       	ldd	r24, Y+1	; 0x01
    636c:	80 7f       	andi	r24, 0xF0	; 240
    636e:	89 83       	std	Y+1, r24	; 0x01
	
	switch(cmd){
    6370:	89 81       	ldd	r24, Y+1	; 0x01
    6372:	88 2f       	mov	r24, r24
    6374:	90 e0       	ldi	r25, 0x00	; 0
    6376:	09 2e       	mov	r0, r25
    6378:	00 0c       	add	r0, r0
    637a:	aa 0b       	sbc	r26, r26
    637c:	bb 0b       	sbc	r27, r27
    637e:	40 e8       	ldi	r20, 0x80	; 128
    6380:	50 e0       	ldi	r21, 0x00	; 0
    6382:	2f e7       	ldi	r18, 0x7F	; 127
    6384:	30 e0       	ldi	r19, 0x00	; 0
    6386:	84 1b       	sub	r24, r20
    6388:	95 0b       	sbc	r25, r21
    638a:	28 17       	cp	r18, r24
    638c:	39 07       	cpc	r19, r25
    638e:	58 f0       	brcs	.+22     	; 0x63a6 <commandLen+0x58>
    6390:	86 5d       	subi	r24, 0xD6	; 214
    6392:	9f 4f       	sbci	r25, 0xFF	; 255
    6394:	fc 01       	movw	r30, r24
    6396:	0c 94 aa 3d 	jmp	0x7b54	; 0x7b54 <__tablejump2__>
		case	MIDI_START:
		case	MIDI_STOP:
		case	MIDI_CONT:
		case	MIDI_SENSE:
		case	MIDI_RESET:	
					return 1;
    639a:	81 e0       	ldi	r24, 0x01	; 1
    639c:	05 c0       	rjmp	.+10     	; 0x63a8 <commandLen+0x5a>
		case	MIDI_PROGRAM_CHANGE:
		case	MIDI_CHANNEL_TOUCH:
		case	MIDI_MTC:
		case	MIDI_SONG_SEL:	
					return 2;
    639e:	82 e0       	ldi	r24, 0x02	; 2
    63a0:	03 c0       	rjmp	.+6      	; 0x63a8 <commandLen+0x5a>
		case	MIDI_NOTE_ON:
		case	MIDI_POLY_TOUCH:
		case	MIDI_CONTROL_CHANGE:
		case	MIDI_PITCH_BEND:
		case	MIDI_SPP:	
					return 3;
    63a2:	83 e0       	ldi	r24, 0x03	; 3
    63a4:	01 c0       	rjmp	.+2      	; 0x63a8 <commandLen+0x5a>
		
	}
	
	return 0;
    63a6:	80 e0       	ldi	r24, 0x00	; 0
}
    63a8:	0f 90       	pop	r0
    63aa:	df 91       	pop	r29
    63ac:	cf 91       	pop	r28
    63ae:	08 95       	ret

000063b0 <metaFun>:

void metaFun(meta_event *ev){
    63b0:	cf 93       	push	r28
    63b2:	df 93       	push	r29
    63b4:	00 d0       	rcall	.+0      	; 0x63b6 <metaFun+0x6>
    63b6:	cd b7       	in	r28, 0x3d	; 61
    63b8:	de b7       	in	r29, 0x3e	; 62
    63ba:	9a 83       	std	Y+2, r25	; 0x02
    63bc:	89 83       	std	Y+1, r24	; 0x01
	
}
    63be:	00 00       	nop
    63c0:	0f 90       	pop	r0
    63c2:	0f 90       	pop	r0
    63c4:	df 91       	pop	r29
    63c6:	cf 91       	pop	r28
    63c8:	08 95       	ret

000063ca <sysexFun>:

void sysexFun(sysex_event *ev){
    63ca:	cf 93       	push	r28
    63cc:	df 93       	push	r29
    63ce:	00 d0       	rcall	.+0      	; 0x63d0 <sysexFun+0x6>
    63d0:	cd b7       	in	r28, 0x3d	; 61
    63d2:	de b7       	in	r29, 0x3e	; 62
    63d4:	9a 83       	std	Y+2, r25	; 0x02
    63d6:	89 83       	std	Y+1, r24	; 0x01
	
}
    63d8:	00 00       	nop
    63da:	0f 90       	pop	r0
    63dc:	0f 90       	pop	r0
    63de:	df 91       	pop	r29
    63e0:	cf 91       	pop	r28
    63e2:	08 95       	ret

000063e4 <midiFun>:

void midiFun(midi_event *ev){
    63e4:	cf 93       	push	r28
    63e6:	df 93       	push	r29
    63e8:	00 d0       	rcall	.+0      	; 0x63ea <midiFun+0x6>
    63ea:	cd b7       	in	r28, 0x3d	; 61
    63ec:	de b7       	in	r29, 0x3e	; 62
    63ee:	9a 83       	std	Y+2, r25	; 0x02
    63f0:	89 83       	std	Y+1, r24	; 0x01
	sendMidiBuffer(ev->data,ev->size);
    63f2:	89 81       	ldd	r24, Y+1	; 0x01
    63f4:	9a 81       	ldd	r25, Y+2	; 0x02
    63f6:	fc 01       	movw	r30, r24
    63f8:	22 81       	ldd	r18, Z+2	; 0x02
    63fa:	89 81       	ldd	r24, Y+1	; 0x01
    63fc:	9a 81       	ldd	r25, Y+2	; 0x02
    63fe:	03 96       	adiw	r24, 0x03	; 3
    6400:	62 2f       	mov	r22, r18
    6402:	0e 94 82 31 	call	0x6304	; 0x6304 <sendMidiBuffer>
}
    6406:	00 00       	nop
    6408:	0f 90       	pop	r0
    640a:	0f 90       	pop	r0
    640c:	df 91       	pop	r29
    640e:	cf 91       	pop	r28
    6410:	08 95       	ret

00006412 <rcvr_spi>:
/* Receive a byte from MMC via SPI  (Platform dependent)                 */
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
    6412:	cf 93       	push	r28
    6414:	df 93       	push	r29
    6416:	cd b7       	in	r28, 0x3d	; 61
    6418:	de b7       	in	r29, 0x3e	; 62
	SPDR = 0xFF;
    641a:	8f e2       	ldi	r24, 0x2F	; 47
    641c:	90 e0       	ldi	r25, 0x00	; 0
    641e:	2f ef       	ldi	r18, 0xFF	; 255
    6420:	fc 01       	movw	r30, r24
    6422:	20 83       	st	Z, r18
	loop_until_bit_is_set(SPSR, SPIF);
    6424:	8e e2       	ldi	r24, 0x2E	; 46
    6426:	90 e0       	ldi	r25, 0x00	; 0
    6428:	fc 01       	movw	r30, r24
    642a:	80 81       	ld	r24, Z
    642c:	88 23       	and	r24, r24
    642e:	d4 f7       	brge	.-12     	; 0x6424 <rcvr_spi+0x12>
	return SPDR;
    6430:	8f e2       	ldi	r24, 0x2F	; 47
    6432:	90 e0       	ldi	r25, 0x00	; 0
    6434:	fc 01       	movw	r30, r24
    6436:	80 81       	ld	r24, Z
}
    6438:	df 91       	pop	r29
    643a:	cf 91       	pop	r28
    643c:	08 95       	ret

0000643e <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
    643e:	cf 93       	push	r28
    6440:	df 93       	push	r29
    6442:	cd b7       	in	r28, 0x3d	; 61
    6444:	de b7       	in	r29, 0x3e	; 62
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
    6446:	82 e3       	ldi	r24, 0x32	; 50
    6448:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <Timer2>
	rcvr_spi();
    644c:	0e 94 09 32 	call	0x6412	; 0x6412 <rcvr_spi>
	do
		if (rcvr_spi() == 0xFF) return 1;
    6450:	0e 94 09 32 	call	0x6412	; 0x6412 <rcvr_spi>
    6454:	8f 3f       	cpi	r24, 0xFF	; 255
    6456:	19 f4       	brne	.+6      	; 0x645e <wait_ready+0x20>
    6458:	81 e0       	ldi	r24, 0x01	; 1
    645a:	90 e0       	ldi	r25, 0x00	; 0
    645c:	06 c0       	rjmp	.+12     	; 0x646a <wait_ready+0x2c>
	while (Timer2);
    645e:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <Timer2>
    6462:	88 23       	and	r24, r24
    6464:	a9 f7       	brne	.-22     	; 0x6450 <wait_ready+0x12>

	return 0;
    6466:	80 e0       	ldi	r24, 0x00	; 0
    6468:	90 e0       	ldi	r25, 0x00	; 0
}
    646a:	df 91       	pop	r29
    646c:	cf 91       	pop	r28
    646e:	08 95       	ret

00006470 <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
    6470:	cf 93       	push	r28
    6472:	df 93       	push	r29
    6474:	cd b7       	in	r28, 0x3d	; 61
    6476:	de b7       	in	r29, 0x3e	; 62
	CS_HIGH();
    6478:	88 e3       	ldi	r24, 0x38	; 56
    647a:	90 e0       	ldi	r25, 0x00	; 0
    647c:	28 e3       	ldi	r18, 0x38	; 56
    647e:	30 e0       	ldi	r19, 0x00	; 0
    6480:	f9 01       	movw	r30, r18
    6482:	20 81       	ld	r18, Z
    6484:	20 61       	ori	r18, 0x10	; 16
    6486:	fc 01       	movw	r30, r24
    6488:	20 83       	st	Z, r18
	rcvr_spi();
    648a:	0e 94 09 32 	call	0x6412	; 0x6412 <rcvr_spi>
}
    648e:	00 00       	nop
    6490:	df 91       	pop	r29
    6492:	cf 91       	pop	r28
    6494:	08 95       	ret

00006496 <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
    6496:	cf 93       	push	r28
    6498:	df 93       	push	r29
    649a:	cd b7       	in	r28, 0x3d	; 61
    649c:	de b7       	in	r29, 0x3e	; 62
	CS_LOW();
    649e:	88 e3       	ldi	r24, 0x38	; 56
    64a0:	90 e0       	ldi	r25, 0x00	; 0
    64a2:	28 e3       	ldi	r18, 0x38	; 56
    64a4:	30 e0       	ldi	r19, 0x00	; 0
    64a6:	f9 01       	movw	r30, r18
    64a8:	20 81       	ld	r18, Z
    64aa:	2f 7e       	andi	r18, 0xEF	; 239
    64ac:	fc 01       	movw	r30, r24
    64ae:	20 83       	st	Z, r18
	if (!wait_ready()) {
    64b0:	0e 94 1f 32 	call	0x643e	; 0x643e <wait_ready>
    64b4:	89 2b       	or	r24, r25
    64b6:	29 f4       	brne	.+10     	; 0x64c2 <select+0x2c>
		deselect();
    64b8:	0e 94 38 32 	call	0x6470	; 0x6470 <deselect>
		return 0;
    64bc:	80 e0       	ldi	r24, 0x00	; 0
    64be:	90 e0       	ldi	r25, 0x00	; 0
    64c0:	02 c0       	rjmp	.+4      	; 0x64c6 <select+0x30>
	}
	return 1;
    64c2:	81 e0       	ldi	r24, 0x01	; 1
    64c4:	90 e0       	ldi	r25, 0x00	; 0
}
    64c6:	df 91       	pop	r29
    64c8:	cf 91       	pop	r28
    64ca:	08 95       	ret

000064cc <power_status>:
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
int power_status(void)		/* Socket power state: 0=off, 1=on */
{
    64cc:	cf 93       	push	r28
    64ce:	df 93       	push	r29
    64d0:	cd b7       	in	r28, 0x3d	; 61
    64d2:	de b7       	in	r29, 0x3e	; 62
	//return (PORTE & 0x80) ? 0 : 1;
	return 1;
    64d4:	81 e0       	ldi	r24, 0x01	; 1
    64d6:	90 e0       	ldi	r25, 0x00	; 0
}
    64d8:	df 91       	pop	r29
    64da:	cf 91       	pop	r28
    64dc:	08 95       	ret

000064de <power_on>:


static

void power_on (void)
{
    64de:	cf 93       	push	r28
    64e0:	df 93       	push	r29
    64e2:	cd b7       	in	r28, 0x3d	; 61
    64e4:	de b7       	in	r29, 0x3e	; 62
	//DDRB  = 0b11000111;

	//SPCR = 0x52;			/* Enable SPI function in mode 0 */
	//SPSR = 0x01;        	/* SPI 2x mode */
	
}
    64e6:	00 00       	nop
    64e8:	df 91       	pop	r29
    64ea:	cf 91       	pop	r28
    64ec:	08 95       	ret

000064ee <power_off>:


static
void power_off (void)
{
    64ee:	cf 93       	push	r28
    64f0:	df 93       	push	r29
    64f2:	cd b7       	in	r28, 0x3d	; 61
    64f4:	de b7       	in	r29, 0x3e	; 62
	//DDRB  = 0b11000000;		/* Disable drivers */
	//PORTB = 0b10110000;

	//PORTE |=  0x80;			/* Socket power off */
	//Stat |= STA_NOINIT;
}
    64f6:	00 00       	nop
    64f8:	df 91       	pop	r29
    64fa:	cf 91       	pop	r28
    64fc:	08 95       	ret

000064fe <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    64fe:	cf 93       	push	r28
    6500:	df 93       	push	r29
    6502:	00 d0       	rcall	.+0      	; 0x6504 <rcvr_datablock+0x6>
    6504:	00 d0       	rcall	.+0      	; 0x6506 <rcvr_datablock+0x8>
    6506:	1f 92       	push	r1
    6508:	cd b7       	in	r28, 0x3d	; 61
    650a:	de b7       	in	r29, 0x3e	; 62
    650c:	9b 83       	std	Y+3, r25	; 0x03
    650e:	8a 83       	std	Y+2, r24	; 0x02
    6510:	7d 83       	std	Y+5, r23	; 0x05
    6512:	6c 83       	std	Y+4, r22	; 0x04
	BYTE token;


	Timer1 = 20;
    6514:	84 e1       	ldi	r24, 0x14	; 20
    6516:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <Timer1>
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
    651a:	0e 94 09 32 	call	0x6412	; 0x6412 <rcvr_spi>
    651e:	89 83       	std	Y+1, r24	; 0x01
	} while ((token == 0xFF) && Timer1);
    6520:	89 81       	ldd	r24, Y+1	; 0x01
    6522:	8f 3f       	cpi	r24, 0xFF	; 255
    6524:	21 f4       	brne	.+8      	; 0x652e <rcvr_datablock+0x30>
    6526:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <Timer1>
    652a:	88 23       	and	r24, r24
    652c:	b1 f7       	brne	.-20     	; 0x651a <rcvr_datablock+0x1c>
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
    652e:	89 81       	ldd	r24, Y+1	; 0x01
    6530:	8e 3f       	cpi	r24, 0xFE	; 254
    6532:	19 f0       	breq	.+6      	; 0x653a <rcvr_datablock+0x3c>
    6534:	80 e0       	ldi	r24, 0x00	; 0
    6536:	90 e0       	ldi	r25, 0x00	; 0
    6538:	70 c0       	rjmp	.+224    	; 0x661a <rcvr_datablock+0x11c>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
    653a:	8f e2       	ldi	r24, 0x2F	; 47
    653c:	90 e0       	ldi	r25, 0x00	; 0
    653e:	2f ef       	ldi	r18, 0xFF	; 255
    6540:	fc 01       	movw	r30, r24
    6542:	20 83       	st	Z, r18
    6544:	8e e2       	ldi	r24, 0x2E	; 46
    6546:	90 e0       	ldi	r25, 0x00	; 0
    6548:	fc 01       	movw	r30, r24
    654a:	80 81       	ld	r24, Z
    654c:	88 23       	and	r24, r24
    654e:	d4 f7       	brge	.-12     	; 0x6544 <rcvr_datablock+0x46>
    6550:	8a 81       	ldd	r24, Y+2	; 0x02
    6552:	9b 81       	ldd	r25, Y+3	; 0x03
    6554:	9c 01       	movw	r18, r24
    6556:	2f 5f       	subi	r18, 0xFF	; 255
    6558:	3f 4f       	sbci	r19, 0xFF	; 255
    655a:	3b 83       	std	Y+3, r19	; 0x03
    655c:	2a 83       	std	Y+2, r18	; 0x02
    655e:	2f e2       	ldi	r18, 0x2F	; 47
    6560:	30 e0       	ldi	r19, 0x00	; 0
    6562:	f9 01       	movw	r30, r18
    6564:	20 81       	ld	r18, Z
    6566:	fc 01       	movw	r30, r24
    6568:	20 83       	st	Z, r18
		rcvr_spi_m(buff++);
    656a:	8f e2       	ldi	r24, 0x2F	; 47
    656c:	90 e0       	ldi	r25, 0x00	; 0
    656e:	2f ef       	ldi	r18, 0xFF	; 255
    6570:	fc 01       	movw	r30, r24
    6572:	20 83       	st	Z, r18
    6574:	8e e2       	ldi	r24, 0x2E	; 46
    6576:	90 e0       	ldi	r25, 0x00	; 0
    6578:	fc 01       	movw	r30, r24
    657a:	80 81       	ld	r24, Z
    657c:	88 23       	and	r24, r24
    657e:	d4 f7       	brge	.-12     	; 0x6574 <rcvr_datablock+0x76>
    6580:	8a 81       	ldd	r24, Y+2	; 0x02
    6582:	9b 81       	ldd	r25, Y+3	; 0x03
    6584:	9c 01       	movw	r18, r24
    6586:	2f 5f       	subi	r18, 0xFF	; 255
    6588:	3f 4f       	sbci	r19, 0xFF	; 255
    658a:	3b 83       	std	Y+3, r19	; 0x03
    658c:	2a 83       	std	Y+2, r18	; 0x02
    658e:	2f e2       	ldi	r18, 0x2F	; 47
    6590:	30 e0       	ldi	r19, 0x00	; 0
    6592:	f9 01       	movw	r30, r18
    6594:	20 81       	ld	r18, Z
    6596:	fc 01       	movw	r30, r24
    6598:	20 83       	st	Z, r18
		rcvr_spi_m(buff++);
    659a:	8f e2       	ldi	r24, 0x2F	; 47
    659c:	90 e0       	ldi	r25, 0x00	; 0
    659e:	2f ef       	ldi	r18, 0xFF	; 255
    65a0:	fc 01       	movw	r30, r24
    65a2:	20 83       	st	Z, r18
    65a4:	8e e2       	ldi	r24, 0x2E	; 46
    65a6:	90 e0       	ldi	r25, 0x00	; 0
    65a8:	fc 01       	movw	r30, r24
    65aa:	80 81       	ld	r24, Z
    65ac:	88 23       	and	r24, r24
    65ae:	d4 f7       	brge	.-12     	; 0x65a4 <rcvr_datablock+0xa6>
    65b0:	8a 81       	ldd	r24, Y+2	; 0x02
    65b2:	9b 81       	ldd	r25, Y+3	; 0x03
    65b4:	9c 01       	movw	r18, r24
    65b6:	2f 5f       	subi	r18, 0xFF	; 255
    65b8:	3f 4f       	sbci	r19, 0xFF	; 255
    65ba:	3b 83       	std	Y+3, r19	; 0x03
    65bc:	2a 83       	std	Y+2, r18	; 0x02
    65be:	2f e2       	ldi	r18, 0x2F	; 47
    65c0:	30 e0       	ldi	r19, 0x00	; 0
    65c2:	f9 01       	movw	r30, r18
    65c4:	20 81       	ld	r18, Z
    65c6:	fc 01       	movw	r30, r24
    65c8:	20 83       	st	Z, r18
		rcvr_spi_m(buff++);
    65ca:	8f e2       	ldi	r24, 0x2F	; 47
    65cc:	90 e0       	ldi	r25, 0x00	; 0
    65ce:	2f ef       	ldi	r18, 0xFF	; 255
    65d0:	fc 01       	movw	r30, r24
    65d2:	20 83       	st	Z, r18
    65d4:	8e e2       	ldi	r24, 0x2E	; 46
    65d6:	90 e0       	ldi	r25, 0x00	; 0
    65d8:	fc 01       	movw	r30, r24
    65da:	80 81       	ld	r24, Z
    65dc:	88 23       	and	r24, r24
    65de:	d4 f7       	brge	.-12     	; 0x65d4 <rcvr_datablock+0xd6>
    65e0:	8a 81       	ldd	r24, Y+2	; 0x02
    65e2:	9b 81       	ldd	r25, Y+3	; 0x03
    65e4:	9c 01       	movw	r18, r24
    65e6:	2f 5f       	subi	r18, 0xFF	; 255
    65e8:	3f 4f       	sbci	r19, 0xFF	; 255
    65ea:	3b 83       	std	Y+3, r19	; 0x03
    65ec:	2a 83       	std	Y+2, r18	; 0x02
    65ee:	2f e2       	ldi	r18, 0x2F	; 47
    65f0:	30 e0       	ldi	r19, 0x00	; 0
    65f2:	f9 01       	movw	r30, r18
    65f4:	20 81       	ld	r18, Z
    65f6:	fc 01       	movw	r30, r24
    65f8:	20 83       	st	Z, r18
	} while (btr -= 4);
    65fa:	8c 81       	ldd	r24, Y+4	; 0x04
    65fc:	9d 81       	ldd	r25, Y+5	; 0x05
    65fe:	04 97       	sbiw	r24, 0x04	; 4
    6600:	9d 83       	std	Y+5, r25	; 0x05
    6602:	8c 83       	std	Y+4, r24	; 0x04
    6604:	8c 81       	ldd	r24, Y+4	; 0x04
    6606:	9d 81       	ldd	r25, Y+5	; 0x05
    6608:	89 2b       	or	r24, r25
    660a:	09 f0       	breq	.+2      	; 0x660e <rcvr_datablock+0x110>
    660c:	96 cf       	rjmp	.-212    	; 0x653a <rcvr_datablock+0x3c>
	rcvr_spi();						/* Discard CRC */
    660e:	0e 94 09 32 	call	0x6412	; 0x6412 <rcvr_spi>
	rcvr_spi();
    6612:	0e 94 09 32 	call	0x6412	; 0x6412 <rcvr_spi>

	return 1;						/* Return with success */
    6616:	81 e0       	ldi	r24, 0x01	; 1
    6618:	90 e0       	ldi	r25, 0x00	; 0
}
    661a:	0f 90       	pop	r0
    661c:	0f 90       	pop	r0
    661e:	0f 90       	pop	r0
    6620:	0f 90       	pop	r0
    6622:	0f 90       	pop	r0
    6624:	df 91       	pop	r29
    6626:	cf 91       	pop	r28
    6628:	08 95       	ret

0000662a <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    662a:	cf 93       	push	r28
    662c:	df 93       	push	r29
    662e:	00 d0       	rcall	.+0      	; 0x6630 <xmit_datablock+0x6>
    6630:	00 d0       	rcall	.+0      	; 0x6632 <xmit_datablock+0x8>
    6632:	1f 92       	push	r1
    6634:	cd b7       	in	r28, 0x3d	; 61
    6636:	de b7       	in	r29, 0x3e	; 62
    6638:	9c 83       	std	Y+4, r25	; 0x04
    663a:	8b 83       	std	Y+3, r24	; 0x03
    663c:	6d 83       	std	Y+5, r22	; 0x05
	BYTE resp, wc;


	if (!wait_ready()) return 0;
    663e:	0e 94 1f 32 	call	0x643e	; 0x643e <wait_ready>
    6642:	89 2b       	or	r24, r25
    6644:	19 f4       	brne	.+6      	; 0x664c <xmit_datablock+0x22>
    6646:	80 e0       	ldi	r24, 0x00	; 0
    6648:	90 e0       	ldi	r25, 0x00	; 0
    664a:	61 c0       	rjmp	.+194    	; 0x670e <xmit_datablock+0xe4>

	xmit_spi(token);					/* Xmit data token */
    664c:	8f e2       	ldi	r24, 0x2F	; 47
    664e:	90 e0       	ldi	r25, 0x00	; 0
    6650:	2d 81       	ldd	r18, Y+5	; 0x05
    6652:	fc 01       	movw	r30, r24
    6654:	20 83       	st	Z, r18
    6656:	8e e2       	ldi	r24, 0x2E	; 46
    6658:	90 e0       	ldi	r25, 0x00	; 0
    665a:	fc 01       	movw	r30, r24
    665c:	80 81       	ld	r24, Z
    665e:	88 23       	and	r24, r24
    6660:	d4 f7       	brge	.-12     	; 0x6656 <xmit_datablock+0x2c>
	if (token != 0xFD) {	/* Is data token */
    6662:	8d 81       	ldd	r24, Y+5	; 0x05
    6664:	8d 3f       	cpi	r24, 0xFD	; 253
    6666:	09 f4       	brne	.+2      	; 0x666a <xmit_datablock+0x40>
    6668:	50 c0       	rjmp	.+160    	; 0x670a <xmit_datablock+0xe0>
		wc = 0;
    666a:	19 82       	std	Y+1, r1	; 0x01
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
    666c:	2f e2       	ldi	r18, 0x2F	; 47
    666e:	30 e0       	ldi	r19, 0x00	; 0
    6670:	8b 81       	ldd	r24, Y+3	; 0x03
    6672:	9c 81       	ldd	r25, Y+4	; 0x04
    6674:	ac 01       	movw	r20, r24
    6676:	4f 5f       	subi	r20, 0xFF	; 255
    6678:	5f 4f       	sbci	r21, 0xFF	; 255
    667a:	5c 83       	std	Y+4, r21	; 0x04
    667c:	4b 83       	std	Y+3, r20	; 0x03
    667e:	fc 01       	movw	r30, r24
    6680:	80 81       	ld	r24, Z
    6682:	f9 01       	movw	r30, r18
    6684:	80 83       	st	Z, r24
    6686:	8e e2       	ldi	r24, 0x2E	; 46
    6688:	90 e0       	ldi	r25, 0x00	; 0
    668a:	fc 01       	movw	r30, r24
    668c:	80 81       	ld	r24, Z
    668e:	88 23       	and	r24, r24
    6690:	d4 f7       	brge	.-12     	; 0x6686 <xmit_datablock+0x5c>
			xmit_spi(*buff++);
    6692:	2f e2       	ldi	r18, 0x2F	; 47
    6694:	30 e0       	ldi	r19, 0x00	; 0
    6696:	8b 81       	ldd	r24, Y+3	; 0x03
    6698:	9c 81       	ldd	r25, Y+4	; 0x04
    669a:	ac 01       	movw	r20, r24
    669c:	4f 5f       	subi	r20, 0xFF	; 255
    669e:	5f 4f       	sbci	r21, 0xFF	; 255
    66a0:	5c 83       	std	Y+4, r21	; 0x04
    66a2:	4b 83       	std	Y+3, r20	; 0x03
    66a4:	fc 01       	movw	r30, r24
    66a6:	80 81       	ld	r24, Z
    66a8:	f9 01       	movw	r30, r18
    66aa:	80 83       	st	Z, r24
    66ac:	8e e2       	ldi	r24, 0x2E	; 46
    66ae:	90 e0       	ldi	r25, 0x00	; 0
    66b0:	fc 01       	movw	r30, r24
    66b2:	80 81       	ld	r24, Z
    66b4:	88 23       	and	r24, r24
    66b6:	d4 f7       	brge	.-12     	; 0x66ac <xmit_datablock+0x82>
		} while (--wc);
    66b8:	89 81       	ldd	r24, Y+1	; 0x01
    66ba:	81 50       	subi	r24, 0x01	; 1
    66bc:	89 83       	std	Y+1, r24	; 0x01
    66be:	89 81       	ldd	r24, Y+1	; 0x01
    66c0:	88 23       	and	r24, r24
    66c2:	a1 f6       	brne	.-88     	; 0x666c <xmit_datablock+0x42>
		xmit_spi(0xFF);					/* CRC (Dummy) */
    66c4:	8f e2       	ldi	r24, 0x2F	; 47
    66c6:	90 e0       	ldi	r25, 0x00	; 0
    66c8:	2f ef       	ldi	r18, 0xFF	; 255
    66ca:	fc 01       	movw	r30, r24
    66cc:	20 83       	st	Z, r18
    66ce:	8e e2       	ldi	r24, 0x2E	; 46
    66d0:	90 e0       	ldi	r25, 0x00	; 0
    66d2:	fc 01       	movw	r30, r24
    66d4:	80 81       	ld	r24, Z
    66d6:	88 23       	and	r24, r24
    66d8:	d4 f7       	brge	.-12     	; 0x66ce <xmit_datablock+0xa4>
		xmit_spi(0xFF);
    66da:	8f e2       	ldi	r24, 0x2F	; 47
    66dc:	90 e0       	ldi	r25, 0x00	; 0
    66de:	2f ef       	ldi	r18, 0xFF	; 255
    66e0:	fc 01       	movw	r30, r24
    66e2:	20 83       	st	Z, r18
    66e4:	8e e2       	ldi	r24, 0x2E	; 46
    66e6:	90 e0       	ldi	r25, 0x00	; 0
    66e8:	fc 01       	movw	r30, r24
    66ea:	80 81       	ld	r24, Z
    66ec:	88 23       	and	r24, r24
    66ee:	d4 f7       	brge	.-12     	; 0x66e4 <xmit_datablock+0xba>
		resp = rcvr_spi();				/* Reveive data response */
    66f0:	0e 94 09 32 	call	0x6412	; 0x6412 <rcvr_spi>
    66f4:	8a 83       	std	Y+2, r24	; 0x02
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
    66f6:	8a 81       	ldd	r24, Y+2	; 0x02
    66f8:	88 2f       	mov	r24, r24
    66fa:	90 e0       	ldi	r25, 0x00	; 0
    66fc:	8f 71       	andi	r24, 0x1F	; 31
    66fe:	99 27       	eor	r25, r25
    6700:	05 97       	sbiw	r24, 0x05	; 5
    6702:	19 f0       	breq	.+6      	; 0x670a <xmit_datablock+0xe0>
			return 0;
    6704:	80 e0       	ldi	r24, 0x00	; 0
    6706:	90 e0       	ldi	r25, 0x00	; 0
    6708:	02 c0       	rjmp	.+4      	; 0x670e <xmit_datablock+0xe4>
	}

	return 1;
    670a:	81 e0       	ldi	r24, 0x01	; 1
    670c:	90 e0       	ldi	r25, 0x00	; 0
}
    670e:	0f 90       	pop	r0
    6710:	0f 90       	pop	r0
    6712:	0f 90       	pop	r0
    6714:	0f 90       	pop	r0
    6716:	0f 90       	pop	r0
    6718:	df 91       	pop	r29
    671a:	cf 91       	pop	r28
    671c:	08 95       	ret

0000671e <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    671e:	cf 93       	push	r28
    6720:	df 93       	push	r29
    6722:	cd b7       	in	r28, 0x3d	; 61
    6724:	de b7       	in	r29, 0x3e	; 62
    6726:	27 97       	sbiw	r28, 0x07	; 7
    6728:	0f b6       	in	r0, 0x3f	; 63
    672a:	f8 94       	cli
    672c:	de bf       	out	0x3e, r29	; 62
    672e:	0f be       	out	0x3f, r0	; 63
    6730:	cd bf       	out	0x3d, r28	; 61
    6732:	8b 83       	std	Y+3, r24	; 0x03
    6734:	4c 83       	std	Y+4, r20	; 0x04
    6736:	5d 83       	std	Y+5, r21	; 0x05
    6738:	6e 83       	std	Y+6, r22	; 0x06
    673a:	7f 83       	std	Y+7, r23	; 0x07
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    673c:	8b 81       	ldd	r24, Y+3	; 0x03
    673e:	88 23       	and	r24, r24
    6740:	7c f4       	brge	.+30     	; 0x6760 <send_cmd+0x42>
		cmd &= 0x7F;
    6742:	8b 81       	ldd	r24, Y+3	; 0x03
    6744:	8f 77       	andi	r24, 0x7F	; 127
    6746:	8b 83       	std	Y+3, r24	; 0x03
		res = send_cmd(CMD55, 0);
    6748:	40 e0       	ldi	r20, 0x00	; 0
    674a:	50 e0       	ldi	r21, 0x00	; 0
    674c:	ba 01       	movw	r22, r20
    674e:	87 e3       	ldi	r24, 0x37	; 55
    6750:	0e 94 8f 33 	call	0x671e	; 0x671e <send_cmd>
    6754:	8a 83       	std	Y+2, r24	; 0x02
		if (res > 1) return res;
    6756:	8a 81       	ldd	r24, Y+2	; 0x02
    6758:	82 30       	cpi	r24, 0x02	; 2
    675a:	10 f0       	brcs	.+4      	; 0x6760 <send_cmd+0x42>
    675c:	8a 81       	ldd	r24, Y+2	; 0x02
    675e:	7f c0       	rjmp	.+254    	; 0x685e <send_cmd+0x140>
	}

	/* Select the card and wait for ready */
	deselect();
    6760:	0e 94 38 32 	call	0x6470	; 0x6470 <deselect>
	if (!select()) return 0xFF;
    6764:	0e 94 4b 32 	call	0x6496	; 0x6496 <select>
    6768:	89 2b       	or	r24, r25
    676a:	11 f4       	brne	.+4      	; 0x6770 <send_cmd+0x52>
    676c:	8f ef       	ldi	r24, 0xFF	; 255
    676e:	77 c0       	rjmp	.+238    	; 0x685e <send_cmd+0x140>

	/* Send command packet */
	xmit_spi(0x40 | cmd);				/* Start + Command index */
    6770:	8f e2       	ldi	r24, 0x2F	; 47
    6772:	90 e0       	ldi	r25, 0x00	; 0
    6774:	2b 81       	ldd	r18, Y+3	; 0x03
    6776:	20 64       	ori	r18, 0x40	; 64
    6778:	fc 01       	movw	r30, r24
    677a:	20 83       	st	Z, r18
    677c:	8e e2       	ldi	r24, 0x2E	; 46
    677e:	90 e0       	ldi	r25, 0x00	; 0
    6780:	fc 01       	movw	r30, r24
    6782:	80 81       	ld	r24, Z
    6784:	88 23       	and	r24, r24
    6786:	d4 f7       	brge	.-12     	; 0x677c <send_cmd+0x5e>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    6788:	2f e2       	ldi	r18, 0x2F	; 47
    678a:	30 e0       	ldi	r19, 0x00	; 0
    678c:	8c 81       	ldd	r24, Y+4	; 0x04
    678e:	9d 81       	ldd	r25, Y+5	; 0x05
    6790:	ae 81       	ldd	r26, Y+6	; 0x06
    6792:	bf 81       	ldd	r27, Y+7	; 0x07
    6794:	8b 2f       	mov	r24, r27
    6796:	99 27       	eor	r25, r25
    6798:	aa 27       	eor	r26, r26
    679a:	bb 27       	eor	r27, r27
    679c:	f9 01       	movw	r30, r18
    679e:	80 83       	st	Z, r24
    67a0:	8e e2       	ldi	r24, 0x2E	; 46
    67a2:	90 e0       	ldi	r25, 0x00	; 0
    67a4:	fc 01       	movw	r30, r24
    67a6:	80 81       	ld	r24, Z
    67a8:	88 23       	and	r24, r24
    67aa:	d4 f7       	brge	.-12     	; 0x67a0 <send_cmd+0x82>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    67ac:	2f e2       	ldi	r18, 0x2F	; 47
    67ae:	30 e0       	ldi	r19, 0x00	; 0
    67b0:	8c 81       	ldd	r24, Y+4	; 0x04
    67b2:	9d 81       	ldd	r25, Y+5	; 0x05
    67b4:	ae 81       	ldd	r26, Y+6	; 0x06
    67b6:	bf 81       	ldd	r27, Y+7	; 0x07
    67b8:	cd 01       	movw	r24, r26
    67ba:	aa 27       	eor	r26, r26
    67bc:	bb 27       	eor	r27, r27
    67be:	f9 01       	movw	r30, r18
    67c0:	80 83       	st	Z, r24
    67c2:	8e e2       	ldi	r24, 0x2E	; 46
    67c4:	90 e0       	ldi	r25, 0x00	; 0
    67c6:	fc 01       	movw	r30, r24
    67c8:	80 81       	ld	r24, Z
    67ca:	88 23       	and	r24, r24
    67cc:	d4 f7       	brge	.-12     	; 0x67c2 <send_cmd+0xa4>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    67ce:	2f e2       	ldi	r18, 0x2F	; 47
    67d0:	30 e0       	ldi	r19, 0x00	; 0
    67d2:	8c 81       	ldd	r24, Y+4	; 0x04
    67d4:	9d 81       	ldd	r25, Y+5	; 0x05
    67d6:	ae 81       	ldd	r26, Y+6	; 0x06
    67d8:	bf 81       	ldd	r27, Y+7	; 0x07
    67da:	89 2f       	mov	r24, r25
    67dc:	9a 2f       	mov	r25, r26
    67de:	ab 2f       	mov	r26, r27
    67e0:	bb 27       	eor	r27, r27
    67e2:	f9 01       	movw	r30, r18
    67e4:	80 83       	st	Z, r24
    67e6:	8e e2       	ldi	r24, 0x2E	; 46
    67e8:	90 e0       	ldi	r25, 0x00	; 0
    67ea:	fc 01       	movw	r30, r24
    67ec:	80 81       	ld	r24, Z
    67ee:	88 23       	and	r24, r24
    67f0:	d4 f7       	brge	.-12     	; 0x67e6 <send_cmd+0xc8>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    67f2:	8f e2       	ldi	r24, 0x2F	; 47
    67f4:	90 e0       	ldi	r25, 0x00	; 0
    67f6:	2c 81       	ldd	r18, Y+4	; 0x04
    67f8:	fc 01       	movw	r30, r24
    67fa:	20 83       	st	Z, r18
    67fc:	8e e2       	ldi	r24, 0x2E	; 46
    67fe:	90 e0       	ldi	r25, 0x00	; 0
    6800:	fc 01       	movw	r30, r24
    6802:	80 81       	ld	r24, Z
    6804:	88 23       	and	r24, r24
    6806:	d4 f7       	brge	.-12     	; 0x67fc <send_cmd+0xde>
	n = 0x01;							/* Dummy CRC + Stop */
    6808:	81 e0       	ldi	r24, 0x01	; 1
    680a:	89 83       	std	Y+1, r24	; 0x01
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    680c:	8b 81       	ldd	r24, Y+3	; 0x03
    680e:	88 23       	and	r24, r24
    6810:	11 f4       	brne	.+4      	; 0x6816 <send_cmd+0xf8>
    6812:	85 e9       	ldi	r24, 0x95	; 149
    6814:	89 83       	std	Y+1, r24	; 0x01
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    6816:	8b 81       	ldd	r24, Y+3	; 0x03
    6818:	88 30       	cpi	r24, 0x08	; 8
    681a:	11 f4       	brne	.+4      	; 0x6820 <send_cmd+0x102>
    681c:	87 e8       	ldi	r24, 0x87	; 135
    681e:	89 83       	std	Y+1, r24	; 0x01
	xmit_spi(n);
    6820:	8f e2       	ldi	r24, 0x2F	; 47
    6822:	90 e0       	ldi	r25, 0x00	; 0
    6824:	29 81       	ldd	r18, Y+1	; 0x01
    6826:	fc 01       	movw	r30, r24
    6828:	20 83       	st	Z, r18
    682a:	8e e2       	ldi	r24, 0x2E	; 46
    682c:	90 e0       	ldi	r25, 0x00	; 0
    682e:	fc 01       	movw	r30, r24
    6830:	80 81       	ld	r24, Z
    6832:	88 23       	and	r24, r24
    6834:	d4 f7       	brge	.-12     	; 0x682a <send_cmd+0x10c>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
    6836:	8b 81       	ldd	r24, Y+3	; 0x03
    6838:	8c 30       	cpi	r24, 0x0C	; 12
    683a:	11 f4       	brne	.+4      	; 0x6840 <send_cmd+0x122>
    683c:	0e 94 09 32 	call	0x6412	; 0x6412 <rcvr_spi>
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
    6840:	8a e0       	ldi	r24, 0x0A	; 10
    6842:	89 83       	std	Y+1, r24	; 0x01
	do
		res = rcvr_spi();
    6844:	0e 94 09 32 	call	0x6412	; 0x6412 <rcvr_spi>
    6848:	8a 83       	std	Y+2, r24	; 0x02
	while ((res & 0x80) && --n);
    684a:	8a 81       	ldd	r24, Y+2	; 0x02
    684c:	88 23       	and	r24, r24
    684e:	34 f4       	brge	.+12     	; 0x685c <send_cmd+0x13e>
    6850:	89 81       	ldd	r24, Y+1	; 0x01
    6852:	81 50       	subi	r24, 0x01	; 1
    6854:	89 83       	std	Y+1, r24	; 0x01
    6856:	89 81       	ldd	r24, Y+1	; 0x01
    6858:	88 23       	and	r24, r24
    685a:	a1 f7       	brne	.-24     	; 0x6844 <send_cmd+0x126>

	return res;			/* Return with the response value */
    685c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    685e:	27 96       	adiw	r28, 0x07	; 7
    6860:	0f b6       	in	r0, 0x3f	; 63
    6862:	f8 94       	cli
    6864:	de bf       	out	0x3e, r29	; 62
    6866:	0f be       	out	0x3f, r0	; 63
    6868:	cd bf       	out	0x3d, r28	; 61
    686a:	df 91       	pop	r29
    686c:	cf 91       	pop	r28
    686e:	08 95       	ret

00006870 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    6870:	0f 93       	push	r16
    6872:	1f 93       	push	r17
    6874:	cf 93       	push	r28
    6876:	df 93       	push	r29
    6878:	cd b7       	in	r28, 0x3d	; 61
    687a:	de b7       	in	r29, 0x3e	; 62
    687c:	28 97       	sbiw	r28, 0x08	; 8
    687e:	0f b6       	in	r0, 0x3f	; 63
    6880:	f8 94       	cli
    6882:	de bf       	out	0x3e, r29	; 62
    6884:	0f be       	out	0x3f, r0	; 63
    6886:	cd bf       	out	0x3d, r28	; 61
    6888:	88 87       	std	Y+8, r24	; 0x08
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    688a:	88 85       	ldd	r24, Y+8	; 0x08
    688c:	88 23       	and	r24, r24
    688e:	11 f0       	breq	.+4      	; 0x6894 <disk_initialize+0x24>
    6890:	81 e0       	ldi	r24, 0x01	; 1
    6892:	d7 c0       	rjmp	.+430    	; 0x6a42 <disk_initialize+0x1d2>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    6894:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    6898:	88 2f       	mov	r24, r24
    689a:	90 e0       	ldi	r25, 0x00	; 0
    689c:	82 70       	andi	r24, 0x02	; 2
    689e:	99 27       	eor	r25, r25
    68a0:	89 2b       	or	r24, r25
    68a2:	19 f0       	breq	.+6      	; 0x68aa <disk_initialize+0x3a>
    68a4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    68a8:	cc c0       	rjmp	.+408    	; 0x6a42 <disk_initialize+0x1d2>

	power_on();							/* Force socket power on */
    68aa:	0e 94 6f 32 	call	0x64de	; 0x64de <power_on>
	FCLK_SLOW();
    68ae:	8d e2       	ldi	r24, 0x2D	; 45
    68b0:	90 e0       	ldi	r25, 0x00	; 0
    68b2:	2d e2       	ldi	r18, 0x2D	; 45
    68b4:	30 e0       	ldi	r19, 0x00	; 0
    68b6:	f9 01       	movw	r30, r18
    68b8:	20 81       	ld	r18, Z
    68ba:	22 60       	ori	r18, 0x02	; 2
    68bc:	fc 01       	movw	r30, r24
    68be:	20 83       	st	Z, r18
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
    68c0:	8a e0       	ldi	r24, 0x0A	; 10
    68c2:	89 83       	std	Y+1, r24	; 0x01
    68c4:	05 c0       	rjmp	.+10     	; 0x68d0 <disk_initialize+0x60>
    68c6:	0e 94 09 32 	call	0x6412	; 0x6412 <rcvr_spi>
    68ca:	89 81       	ldd	r24, Y+1	; 0x01
    68cc:	81 50       	subi	r24, 0x01	; 1
    68ce:	89 83       	std	Y+1, r24	; 0x01
    68d0:	89 81       	ldd	r24, Y+1	; 0x01
    68d2:	88 23       	and	r24, r24
    68d4:	c1 f7       	brne	.-16     	; 0x68c6 <disk_initialize+0x56>

	ty = 0;
    68d6:	1b 82       	std	Y+3, r1	; 0x03
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    68d8:	40 e0       	ldi	r20, 0x00	; 0
    68da:	50 e0       	ldi	r21, 0x00	; 0
    68dc:	ba 01       	movw	r22, r20
    68de:	80 e0       	ldi	r24, 0x00	; 0
    68e0:	0e 94 8f 33 	call	0x671e	; 0x671e <send_cmd>
    68e4:	81 30       	cpi	r24, 0x01	; 1
    68e6:	09 f0       	breq	.+2      	; 0x68ea <disk_initialize+0x7a>
    68e8:	91 c0       	rjmp	.+290    	; 0x6a0c <disk_initialize+0x19c>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    68ea:	84 e6       	ldi	r24, 0x64	; 100
    68ec:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <Timer1>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    68f0:	4a ea       	ldi	r20, 0xAA	; 170
    68f2:	51 e0       	ldi	r21, 0x01	; 1
    68f4:	60 e0       	ldi	r22, 0x00	; 0
    68f6:	70 e0       	ldi	r23, 0x00	; 0
    68f8:	88 e0       	ldi	r24, 0x08	; 8
    68fa:	0e 94 8f 33 	call	0x671e	; 0x671e <send_cmd>
    68fe:	81 30       	cpi	r24, 0x01	; 1
    6900:	09 f0       	breq	.+2      	; 0x6904 <disk_initialize+0x94>
    6902:	58 c0       	rjmp	.+176    	; 0x69b4 <disk_initialize+0x144>
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
    6904:	19 82       	std	Y+1, r1	; 0x01
    6906:	0f c0       	rjmp	.+30     	; 0x6926 <disk_initialize+0xb6>
    6908:	89 81       	ldd	r24, Y+1	; 0x01
    690a:	08 2f       	mov	r16, r24
    690c:	10 e0       	ldi	r17, 0x00	; 0
    690e:	0e 94 09 32 	call	0x6412	; 0x6412 <rcvr_spi>
    6912:	28 2f       	mov	r18, r24
    6914:	ce 01       	movw	r24, r28
    6916:	04 96       	adiw	r24, 0x04	; 4
    6918:	80 0f       	add	r24, r16
    691a:	91 1f       	adc	r25, r17
    691c:	fc 01       	movw	r30, r24
    691e:	20 83       	st	Z, r18
    6920:	89 81       	ldd	r24, Y+1	; 0x01
    6922:	8f 5f       	subi	r24, 0xFF	; 255
    6924:	89 83       	std	Y+1, r24	; 0x01
    6926:	89 81       	ldd	r24, Y+1	; 0x01
    6928:	84 30       	cpi	r24, 0x04	; 4
    692a:	70 f3       	brcs	.-36     	; 0x6908 <disk_initialize+0x98>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    692c:	8e 81       	ldd	r24, Y+6	; 0x06
    692e:	81 30       	cpi	r24, 0x01	; 1
    6930:	09 f0       	breq	.+2      	; 0x6934 <disk_initialize+0xc4>
    6932:	6c c0       	rjmp	.+216    	; 0x6a0c <disk_initialize+0x19c>
    6934:	8f 81       	ldd	r24, Y+7	; 0x07
    6936:	8a 3a       	cpi	r24, 0xAA	; 170
    6938:	09 f0       	breq	.+2      	; 0x693c <disk_initialize+0xcc>
    693a:	68 c0       	rjmp	.+208    	; 0x6a0c <disk_initialize+0x19c>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    693c:	00 00       	nop
    693e:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <Timer1>
    6942:	88 23       	and	r24, r24
    6944:	49 f0       	breq	.+18     	; 0x6958 <disk_initialize+0xe8>
    6946:	40 e0       	ldi	r20, 0x00	; 0
    6948:	50 e0       	ldi	r21, 0x00	; 0
    694a:	60 e0       	ldi	r22, 0x00	; 0
    694c:	70 e4       	ldi	r23, 0x40	; 64
    694e:	89 ea       	ldi	r24, 0xA9	; 169
    6950:	0e 94 8f 33 	call	0x671e	; 0x671e <send_cmd>
    6954:	88 23       	and	r24, r24
    6956:	99 f7       	brne	.-26     	; 0x693e <disk_initialize+0xce>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    6958:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <Timer1>
    695c:	88 23       	and	r24, r24
    695e:	09 f4       	brne	.+2      	; 0x6962 <disk_initialize+0xf2>
    6960:	55 c0       	rjmp	.+170    	; 0x6a0c <disk_initialize+0x19c>
    6962:	40 e0       	ldi	r20, 0x00	; 0
    6964:	50 e0       	ldi	r21, 0x00	; 0
    6966:	ba 01       	movw	r22, r20
    6968:	8a e3       	ldi	r24, 0x3A	; 58
    696a:	0e 94 8f 33 	call	0x671e	; 0x671e <send_cmd>
    696e:	88 23       	and	r24, r24
    6970:	09 f0       	breq	.+2      	; 0x6974 <disk_initialize+0x104>
    6972:	4c c0       	rjmp	.+152    	; 0x6a0c <disk_initialize+0x19c>
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
    6974:	19 82       	std	Y+1, r1	; 0x01
    6976:	0f c0       	rjmp	.+30     	; 0x6996 <disk_initialize+0x126>
    6978:	89 81       	ldd	r24, Y+1	; 0x01
    697a:	08 2f       	mov	r16, r24
    697c:	10 e0       	ldi	r17, 0x00	; 0
    697e:	0e 94 09 32 	call	0x6412	; 0x6412 <rcvr_spi>
    6982:	28 2f       	mov	r18, r24
    6984:	ce 01       	movw	r24, r28
    6986:	04 96       	adiw	r24, 0x04	; 4
    6988:	80 0f       	add	r24, r16
    698a:	91 1f       	adc	r25, r17
    698c:	fc 01       	movw	r30, r24
    698e:	20 83       	st	Z, r18
    6990:	89 81       	ldd	r24, Y+1	; 0x01
    6992:	8f 5f       	subi	r24, 0xFF	; 255
    6994:	89 83       	std	Y+1, r24	; 0x01
    6996:	89 81       	ldd	r24, Y+1	; 0x01
    6998:	84 30       	cpi	r24, 0x04	; 4
    699a:	70 f3       	brcs	.-36     	; 0x6978 <disk_initialize+0x108>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    699c:	8c 81       	ldd	r24, Y+4	; 0x04
    699e:	88 2f       	mov	r24, r24
    69a0:	90 e0       	ldi	r25, 0x00	; 0
    69a2:	80 74       	andi	r24, 0x40	; 64
    69a4:	99 27       	eor	r25, r25
    69a6:	89 2b       	or	r24, r25
    69a8:	11 f0       	breq	.+4      	; 0x69ae <disk_initialize+0x13e>
    69aa:	8c e0       	ldi	r24, 0x0C	; 12
    69ac:	01 c0       	rjmp	.+2      	; 0x69b0 <disk_initialize+0x140>
    69ae:	84 e0       	ldi	r24, 0x04	; 4
    69b0:	8b 83       	std	Y+3, r24	; 0x03
    69b2:	2c c0       	rjmp	.+88     	; 0x6a0c <disk_initialize+0x19c>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    69b4:	40 e0       	ldi	r20, 0x00	; 0
    69b6:	50 e0       	ldi	r21, 0x00	; 0
    69b8:	ba 01       	movw	r22, r20
    69ba:	89 ea       	ldi	r24, 0xA9	; 169
    69bc:	0e 94 8f 33 	call	0x671e	; 0x671e <send_cmd>
    69c0:	82 30       	cpi	r24, 0x02	; 2
    69c2:	28 f4       	brcc	.+10     	; 0x69ce <disk_initialize+0x15e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    69c4:	82 e0       	ldi	r24, 0x02	; 2
    69c6:	8b 83       	std	Y+3, r24	; 0x03
    69c8:	89 ea       	ldi	r24, 0xA9	; 169
    69ca:	8a 83       	std	Y+2, r24	; 0x02
    69cc:	04 c0       	rjmp	.+8      	; 0x69d6 <disk_initialize+0x166>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    69ce:	81 e0       	ldi	r24, 0x01	; 1
    69d0:	8b 83       	std	Y+3, r24	; 0x03
    69d2:	81 e0       	ldi	r24, 0x01	; 1
    69d4:	8a 83       	std	Y+2, r24	; 0x02
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    69d6:	00 00       	nop
    69d8:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <Timer1>
    69dc:	88 23       	and	r24, r24
    69de:	41 f0       	breq	.+16     	; 0x69f0 <disk_initialize+0x180>
    69e0:	40 e0       	ldi	r20, 0x00	; 0
    69e2:	50 e0       	ldi	r21, 0x00	; 0
    69e4:	ba 01       	movw	r22, r20
    69e6:	8a 81       	ldd	r24, Y+2	; 0x02
    69e8:	0e 94 8f 33 	call	0x671e	; 0x671e <send_cmd>
    69ec:	88 23       	and	r24, r24
    69ee:	a1 f7       	brne	.-24     	; 0x69d8 <disk_initialize+0x168>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    69f0:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <Timer1>
    69f4:	88 23       	and	r24, r24
    69f6:	49 f0       	breq	.+18     	; 0x6a0a <disk_initialize+0x19a>
    69f8:	40 e0       	ldi	r20, 0x00	; 0
    69fa:	52 e0       	ldi	r21, 0x02	; 2
    69fc:	60 e0       	ldi	r22, 0x00	; 0
    69fe:	70 e0       	ldi	r23, 0x00	; 0
    6a00:	80 e1       	ldi	r24, 0x10	; 16
    6a02:	0e 94 8f 33 	call	0x671e	; 0x671e <send_cmd>
    6a06:	88 23       	and	r24, r24
    6a08:	09 f0       	breq	.+2      	; 0x6a0c <disk_initialize+0x19c>
				ty = 0;
    6a0a:	1b 82       	std	Y+3, r1	; 0x03
		}
	}
	//blinkWhiteLEDnrazy(ty);
	CardType = ty;
    6a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    6a0e:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <CardType>
	deselect();
    6a12:	0e 94 38 32 	call	0x6470	; 0x6470 <deselect>

	if (ty) {			/* Initialization succeded */
    6a16:	8b 81       	ldd	r24, Y+3	; 0x03
    6a18:	88 23       	and	r24, r24
    6a1a:	79 f0       	breq	.+30     	; 0x6a3a <disk_initialize+0x1ca>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    6a1c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    6a20:	8e 7f       	andi	r24, 0xFE	; 254
    6a22:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		FCLK_FAST();
    6a26:	8d e2       	ldi	r24, 0x2D	; 45
    6a28:	90 e0       	ldi	r25, 0x00	; 0
    6a2a:	2d e2       	ldi	r18, 0x2D	; 45
    6a2c:	30 e0       	ldi	r19, 0x00	; 0
    6a2e:	f9 01       	movw	r30, r18
    6a30:	20 81       	ld	r18, Z
    6a32:	2c 7f       	andi	r18, 0xFC	; 252
    6a34:	fc 01       	movw	r30, r24
    6a36:	20 83       	st	Z, r18
    6a38:	02 c0       	rjmp	.+4      	; 0x6a3e <disk_initialize+0x1ce>
	} else {			/* Initialization failed */
		power_off();
    6a3a:	0e 94 77 32 	call	0x64ee	; 0x64ee <power_off>
	}

	return Stat;
    6a3e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
}
    6a42:	28 96       	adiw	r28, 0x08	; 8
    6a44:	0f b6       	in	r0, 0x3f	; 63
    6a46:	f8 94       	cli
    6a48:	de bf       	out	0x3e, r29	; 62
    6a4a:	0f be       	out	0x3f, r0	; 63
    6a4c:	cd bf       	out	0x3d, r28	; 61
    6a4e:	df 91       	pop	r29
    6a50:	cf 91       	pop	r28
    6a52:	1f 91       	pop	r17
    6a54:	0f 91       	pop	r16
    6a56:	08 95       	ret

00006a58 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    6a58:	cf 93       	push	r28
    6a5a:	df 93       	push	r29
    6a5c:	1f 92       	push	r1
    6a5e:	cd b7       	in	r28, 0x3d	; 61
    6a60:	de b7       	in	r29, 0x3e	; 62
    6a62:	89 83       	std	Y+1, r24	; 0x01
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    6a64:	89 81       	ldd	r24, Y+1	; 0x01
    6a66:	88 23       	and	r24, r24
    6a68:	11 f0       	breq	.+4      	; 0x6a6e <disk_status+0x16>
    6a6a:	81 e0       	ldi	r24, 0x01	; 1
    6a6c:	02 c0       	rjmp	.+4      	; 0x6a72 <disk_status+0x1a>
	return Stat;
    6a6e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
}
    6a72:	0f 90       	pop	r0
    6a74:	df 91       	pop	r29
    6a76:	cf 91       	pop	r28
    6a78:	08 95       	ret

00006a7a <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    6a7a:	0f 93       	push	r16
    6a7c:	cf 93       	push	r28
    6a7e:	df 93       	push	r29
    6a80:	cd b7       	in	r28, 0x3d	; 61
    6a82:	de b7       	in	r29, 0x3e	; 62
    6a84:	28 97       	sbiw	r28, 0x08	; 8
    6a86:	0f b6       	in	r0, 0x3f	; 63
    6a88:	f8 94       	cli
    6a8a:	de bf       	out	0x3e, r29	; 62
    6a8c:	0f be       	out	0x3f, r0	; 63
    6a8e:	cd bf       	out	0x3d, r28	; 61
    6a90:	89 83       	std	Y+1, r24	; 0x01
    6a92:	7b 83       	std	Y+3, r23	; 0x03
    6a94:	6a 83       	std	Y+2, r22	; 0x02
    6a96:	2c 83       	std	Y+4, r18	; 0x04
    6a98:	3d 83       	std	Y+5, r19	; 0x05
    6a9a:	4e 83       	std	Y+6, r20	; 0x06
    6a9c:	5f 83       	std	Y+7, r21	; 0x07
    6a9e:	08 87       	std	Y+8, r16	; 0x08
	if (drv || !count) return RES_PARERR;
    6aa0:	89 81       	ldd	r24, Y+1	; 0x01
    6aa2:	88 23       	and	r24, r24
    6aa4:	19 f4       	brne	.+6      	; 0x6aac <disk_read+0x32>
    6aa6:	88 85       	ldd	r24, Y+8	; 0x08
    6aa8:	88 23       	and	r24, r24
    6aaa:	11 f4       	brne	.+4      	; 0x6ab0 <disk_read+0x36>
    6aac:	84 e0       	ldi	r24, 0x04	; 4
    6aae:	68 c0       	rjmp	.+208    	; 0x6b80 <disk_read+0x106>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    6ab0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    6ab4:	88 2f       	mov	r24, r24
    6ab6:	90 e0       	ldi	r25, 0x00	; 0
    6ab8:	81 70       	andi	r24, 0x01	; 1
    6aba:	99 27       	eor	r25, r25
    6abc:	89 2b       	or	r24, r25
    6abe:	11 f0       	breq	.+4      	; 0x6ac4 <disk_read+0x4a>
    6ac0:	83 e0       	ldi	r24, 0x03	; 3
    6ac2:	5e c0       	rjmp	.+188    	; 0x6b80 <disk_read+0x106>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    6ac4:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <CardType>
    6ac8:	88 2f       	mov	r24, r24
    6aca:	90 e0       	ldi	r25, 0x00	; 0
    6acc:	88 70       	andi	r24, 0x08	; 8
    6ace:	99 27       	eor	r25, r25
    6ad0:	89 2b       	or	r24, r25
    6ad2:	89 f4       	brne	.+34     	; 0x6af6 <disk_read+0x7c>
    6ad4:	8c 81       	ldd	r24, Y+4	; 0x04
    6ad6:	9d 81       	ldd	r25, Y+5	; 0x05
    6ad8:	ae 81       	ldd	r26, Y+6	; 0x06
    6ada:	bf 81       	ldd	r27, Y+7	; 0x07
    6adc:	07 2e       	mov	r0, r23
    6ade:	79 e0       	ldi	r23, 0x09	; 9
    6ae0:	88 0f       	add	r24, r24
    6ae2:	99 1f       	adc	r25, r25
    6ae4:	aa 1f       	adc	r26, r26
    6ae6:	bb 1f       	adc	r27, r27
    6ae8:	7a 95       	dec	r23
    6aea:	d1 f7       	brne	.-12     	; 0x6ae0 <disk_read+0x66>
    6aec:	70 2d       	mov	r23, r0
    6aee:	8c 83       	std	Y+4, r24	; 0x04
    6af0:	9d 83       	std	Y+5, r25	; 0x05
    6af2:	ae 83       	std	Y+6, r26	; 0x06
    6af4:	bf 83       	std	Y+7, r27	; 0x07

	if (count == 1) {	/* Single block read */
    6af6:	88 85       	ldd	r24, Y+8	; 0x08
    6af8:	81 30       	cpi	r24, 0x01	; 1
    6afa:	a9 f4       	brne	.+42     	; 0x6b26 <disk_read+0xac>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
    6afc:	8c 81       	ldd	r24, Y+4	; 0x04
    6afe:	9d 81       	ldd	r25, Y+5	; 0x05
    6b00:	ae 81       	ldd	r26, Y+6	; 0x06
    6b02:	bf 81       	ldd	r27, Y+7	; 0x07
    6b04:	ac 01       	movw	r20, r24
    6b06:	bd 01       	movw	r22, r26
    6b08:	81 e1       	ldi	r24, 0x11	; 17
    6b0a:	0e 94 8f 33 	call	0x671e	; 0x671e <send_cmd>
    6b0e:	88 23       	and	r24, r24
    6b10:	81 f5       	brne	.+96     	; 0x6b72 <disk_read+0xf8>
			&& rcvr_datablock(buff, 512))
    6b12:	8a 81       	ldd	r24, Y+2	; 0x02
    6b14:	9b 81       	ldd	r25, Y+3	; 0x03
    6b16:	60 e0       	ldi	r22, 0x00	; 0
    6b18:	72 e0       	ldi	r23, 0x02	; 2
    6b1a:	0e 94 7f 32 	call	0x64fe	; 0x64fe <rcvr_datablock>
    6b1e:	89 2b       	or	r24, r25
    6b20:	41 f1       	breq	.+80     	; 0x6b72 <disk_read+0xf8>
			count = 0;
    6b22:	18 86       	std	Y+8, r1	; 0x08
    6b24:	26 c0       	rjmp	.+76     	; 0x6b72 <disk_read+0xf8>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
    6b26:	8c 81       	ldd	r24, Y+4	; 0x04
    6b28:	9d 81       	ldd	r25, Y+5	; 0x05
    6b2a:	ae 81       	ldd	r26, Y+6	; 0x06
    6b2c:	bf 81       	ldd	r27, Y+7	; 0x07
    6b2e:	ac 01       	movw	r20, r24
    6b30:	bd 01       	movw	r22, r26
    6b32:	82 e1       	ldi	r24, 0x12	; 18
    6b34:	0e 94 8f 33 	call	0x671e	; 0x671e <send_cmd>
    6b38:	88 23       	and	r24, r24
    6b3a:	d9 f4       	brne	.+54     	; 0x6b72 <disk_read+0xf8>
			do {
				if (!rcvr_datablock(buff, 512)) break;
    6b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    6b3e:	9b 81       	ldd	r25, Y+3	; 0x03
    6b40:	60 e0       	ldi	r22, 0x00	; 0
    6b42:	72 e0       	ldi	r23, 0x02	; 2
    6b44:	0e 94 7f 32 	call	0x64fe	; 0x64fe <rcvr_datablock>
    6b48:	89 2b       	or	r24, r25
    6b4a:	61 f0       	breq	.+24     	; 0x6b64 <disk_read+0xea>
				buff += 512;
    6b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    6b4e:	9b 81       	ldd	r25, Y+3	; 0x03
    6b50:	9e 5f       	subi	r25, 0xFE	; 254
    6b52:	9b 83       	std	Y+3, r25	; 0x03
    6b54:	8a 83       	std	Y+2, r24	; 0x02
			} while (--count);
    6b56:	88 85       	ldd	r24, Y+8	; 0x08
    6b58:	81 50       	subi	r24, 0x01	; 1
    6b5a:	88 87       	std	Y+8, r24	; 0x08
    6b5c:	88 85       	ldd	r24, Y+8	; 0x08
    6b5e:	88 23       	and	r24, r24
    6b60:	69 f7       	brne	.-38     	; 0x6b3c <disk_read+0xc2>
    6b62:	01 c0       	rjmp	.+2      	; 0x6b66 <disk_read+0xec>
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
    6b64:	00 00       	nop
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
    6b66:	40 e0       	ldi	r20, 0x00	; 0
    6b68:	50 e0       	ldi	r21, 0x00	; 0
    6b6a:	ba 01       	movw	r22, r20
    6b6c:	8c e0       	ldi	r24, 0x0C	; 12
    6b6e:	0e 94 8f 33 	call	0x671e	; 0x671e <send_cmd>
		}
	}
	deselect();
    6b72:	0e 94 38 32 	call	0x6470	; 0x6470 <deselect>

	return count ? RES_ERROR : RES_OK;
    6b76:	81 e0       	ldi	r24, 0x01	; 1
    6b78:	98 85       	ldd	r25, Y+8	; 0x08
    6b7a:	99 23       	and	r25, r25
    6b7c:	09 f4       	brne	.+2      	; 0x6b80 <disk_read+0x106>
    6b7e:	80 e0       	ldi	r24, 0x00	; 0
}
    6b80:	28 96       	adiw	r28, 0x08	; 8
    6b82:	0f b6       	in	r0, 0x3f	; 63
    6b84:	f8 94       	cli
    6b86:	de bf       	out	0x3e, r29	; 62
    6b88:	0f be       	out	0x3f, r0	; 63
    6b8a:	cd bf       	out	0x3d, r28	; 61
    6b8c:	df 91       	pop	r29
    6b8e:	cf 91       	pop	r28
    6b90:	0f 91       	pop	r16
    6b92:	08 95       	ret

00006b94 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    6b94:	0f 93       	push	r16
    6b96:	cf 93       	push	r28
    6b98:	df 93       	push	r29
    6b9a:	cd b7       	in	r28, 0x3d	; 61
    6b9c:	de b7       	in	r29, 0x3e	; 62
    6b9e:	28 97       	sbiw	r28, 0x08	; 8
    6ba0:	0f b6       	in	r0, 0x3f	; 63
    6ba2:	f8 94       	cli
    6ba4:	de bf       	out	0x3e, r29	; 62
    6ba6:	0f be       	out	0x3f, r0	; 63
    6ba8:	cd bf       	out	0x3d, r28	; 61
    6baa:	89 83       	std	Y+1, r24	; 0x01
    6bac:	7b 83       	std	Y+3, r23	; 0x03
    6bae:	6a 83       	std	Y+2, r22	; 0x02
    6bb0:	2c 83       	std	Y+4, r18	; 0x04
    6bb2:	3d 83       	std	Y+5, r19	; 0x05
    6bb4:	4e 83       	std	Y+6, r20	; 0x06
    6bb6:	5f 83       	std	Y+7, r21	; 0x07
    6bb8:	08 87       	std	Y+8, r16	; 0x08
	if (drv || !count) return RES_PARERR;
    6bba:	89 81       	ldd	r24, Y+1	; 0x01
    6bbc:	88 23       	and	r24, r24
    6bbe:	19 f4       	brne	.+6      	; 0x6bc6 <disk_write+0x32>
    6bc0:	88 85       	ldd	r24, Y+8	; 0x08
    6bc2:	88 23       	and	r24, r24
    6bc4:	11 f4       	brne	.+4      	; 0x6bca <disk_write+0x36>
    6bc6:	84 e0       	ldi	r24, 0x04	; 4
    6bc8:	86 c0       	rjmp	.+268    	; 0x6cd6 <disk_write+0x142>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    6bca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    6bce:	88 2f       	mov	r24, r24
    6bd0:	90 e0       	ldi	r25, 0x00	; 0
    6bd2:	81 70       	andi	r24, 0x01	; 1
    6bd4:	99 27       	eor	r25, r25
    6bd6:	89 2b       	or	r24, r25
    6bd8:	11 f0       	breq	.+4      	; 0x6bde <disk_write+0x4a>
    6bda:	83 e0       	ldi	r24, 0x03	; 3
    6bdc:	7c c0       	rjmp	.+248    	; 0x6cd6 <disk_write+0x142>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    6bde:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    6be2:	88 2f       	mov	r24, r24
    6be4:	90 e0       	ldi	r25, 0x00	; 0
    6be6:	84 70       	andi	r24, 0x04	; 4
    6be8:	99 27       	eor	r25, r25
    6bea:	89 2b       	or	r24, r25
    6bec:	11 f0       	breq	.+4      	; 0x6bf2 <disk_write+0x5e>
    6bee:	82 e0       	ldi	r24, 0x02	; 2
    6bf0:	72 c0       	rjmp	.+228    	; 0x6cd6 <disk_write+0x142>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    6bf2:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <CardType>
    6bf6:	88 2f       	mov	r24, r24
    6bf8:	90 e0       	ldi	r25, 0x00	; 0
    6bfa:	88 70       	andi	r24, 0x08	; 8
    6bfc:	99 27       	eor	r25, r25
    6bfe:	89 2b       	or	r24, r25
    6c00:	89 f4       	brne	.+34     	; 0x6c24 <disk_write+0x90>
    6c02:	8c 81       	ldd	r24, Y+4	; 0x04
    6c04:	9d 81       	ldd	r25, Y+5	; 0x05
    6c06:	ae 81       	ldd	r26, Y+6	; 0x06
    6c08:	bf 81       	ldd	r27, Y+7	; 0x07
    6c0a:	07 2e       	mov	r0, r23
    6c0c:	79 e0       	ldi	r23, 0x09	; 9
    6c0e:	88 0f       	add	r24, r24
    6c10:	99 1f       	adc	r25, r25
    6c12:	aa 1f       	adc	r26, r26
    6c14:	bb 1f       	adc	r27, r27
    6c16:	7a 95       	dec	r23
    6c18:	d1 f7       	brne	.-12     	; 0x6c0e <disk_write+0x7a>
    6c1a:	70 2d       	mov	r23, r0
    6c1c:	8c 83       	std	Y+4, r24	; 0x04
    6c1e:	9d 83       	std	Y+5, r25	; 0x05
    6c20:	ae 83       	std	Y+6, r26	; 0x06
    6c22:	bf 83       	std	Y+7, r27	; 0x07

	if (count == 1) {	/* Single block write */
    6c24:	88 85       	ldd	r24, Y+8	; 0x08
    6c26:	81 30       	cpi	r24, 0x01	; 1
    6c28:	a9 f4       	brne	.+42     	; 0x6c54 <disk_write+0xc0>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    6c2a:	8c 81       	ldd	r24, Y+4	; 0x04
    6c2c:	9d 81       	ldd	r25, Y+5	; 0x05
    6c2e:	ae 81       	ldd	r26, Y+6	; 0x06
    6c30:	bf 81       	ldd	r27, Y+7	; 0x07
    6c32:	ac 01       	movw	r20, r24
    6c34:	bd 01       	movw	r22, r26
    6c36:	88 e1       	ldi	r24, 0x18	; 24
    6c38:	0e 94 8f 33 	call	0x671e	; 0x671e <send_cmd>
    6c3c:	88 23       	and	r24, r24
    6c3e:	09 f0       	breq	.+2      	; 0x6c42 <disk_write+0xae>
    6c40:	43 c0       	rjmp	.+134    	; 0x6cc8 <disk_write+0x134>
			&& xmit_datablock(buff, 0xFE))
    6c42:	8a 81       	ldd	r24, Y+2	; 0x02
    6c44:	9b 81       	ldd	r25, Y+3	; 0x03
    6c46:	6e ef       	ldi	r22, 0xFE	; 254
    6c48:	0e 94 15 33 	call	0x662a	; 0x662a <xmit_datablock>
    6c4c:	89 2b       	or	r24, r25
    6c4e:	e1 f1       	breq	.+120    	; 0x6cc8 <disk_write+0x134>
			count = 0;
    6c50:	18 86       	std	Y+8, r1	; 0x08
    6c52:	3a c0       	rjmp	.+116    	; 0x6cc8 <disk_write+0x134>
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    6c54:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <CardType>
    6c58:	88 2f       	mov	r24, r24
    6c5a:	90 e0       	ldi	r25, 0x00	; 0
    6c5c:	86 70       	andi	r24, 0x06	; 6
    6c5e:	99 27       	eor	r25, r25
    6c60:	89 2b       	or	r24, r25
    6c62:	51 f0       	breq	.+20     	; 0x6c78 <disk_write+0xe4>
    6c64:	88 85       	ldd	r24, Y+8	; 0x08
    6c66:	88 2f       	mov	r24, r24
    6c68:	90 e0       	ldi	r25, 0x00	; 0
    6c6a:	a0 e0       	ldi	r26, 0x00	; 0
    6c6c:	b0 e0       	ldi	r27, 0x00	; 0
    6c6e:	ac 01       	movw	r20, r24
    6c70:	bd 01       	movw	r22, r26
    6c72:	87 e9       	ldi	r24, 0x97	; 151
    6c74:	0e 94 8f 33 	call	0x671e	; 0x671e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    6c78:	8c 81       	ldd	r24, Y+4	; 0x04
    6c7a:	9d 81       	ldd	r25, Y+5	; 0x05
    6c7c:	ae 81       	ldd	r26, Y+6	; 0x06
    6c7e:	bf 81       	ldd	r27, Y+7	; 0x07
    6c80:	ac 01       	movw	r20, r24
    6c82:	bd 01       	movw	r22, r26
    6c84:	89 e1       	ldi	r24, 0x19	; 25
    6c86:	0e 94 8f 33 	call	0x671e	; 0x671e <send_cmd>
    6c8a:	88 23       	and	r24, r24
    6c8c:	e9 f4       	brne	.+58     	; 0x6cc8 <disk_write+0x134>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    6c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    6c90:	9b 81       	ldd	r25, Y+3	; 0x03
    6c92:	6c ef       	ldi	r22, 0xFC	; 252
    6c94:	0e 94 15 33 	call	0x662a	; 0x662a <xmit_datablock>
    6c98:	89 2b       	or	r24, r25
    6c9a:	61 f0       	breq	.+24     	; 0x6cb4 <disk_write+0x120>
				buff += 512;
    6c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    6c9e:	9b 81       	ldd	r25, Y+3	; 0x03
    6ca0:	9e 5f       	subi	r25, 0xFE	; 254
    6ca2:	9b 83       	std	Y+3, r25	; 0x03
    6ca4:	8a 83       	std	Y+2, r24	; 0x02
			} while (--count);
    6ca6:	88 85       	ldd	r24, Y+8	; 0x08
    6ca8:	81 50       	subi	r24, 0x01	; 1
    6caa:	88 87       	std	Y+8, r24	; 0x08
    6cac:	88 85       	ldd	r24, Y+8	; 0x08
    6cae:	88 23       	and	r24, r24
    6cb0:	71 f7       	brne	.-36     	; 0x6c8e <disk_write+0xfa>
    6cb2:	01 c0       	rjmp	.+2      	; 0x6cb6 <disk_write+0x122>
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    6cb4:	00 00       	nop
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    6cb6:	6d ef       	ldi	r22, 0xFD	; 253
    6cb8:	80 e0       	ldi	r24, 0x00	; 0
    6cba:	90 e0       	ldi	r25, 0x00	; 0
    6cbc:	0e 94 15 33 	call	0x662a	; 0x662a <xmit_datablock>
    6cc0:	89 2b       	or	r24, r25
    6cc2:	11 f4       	brne	.+4      	; 0x6cc8 <disk_write+0x134>
				count = 1;
    6cc4:	81 e0       	ldi	r24, 0x01	; 1
    6cc6:	88 87       	std	Y+8, r24	; 0x08
		}
	}
	deselect();
    6cc8:	0e 94 38 32 	call	0x6470	; 0x6470 <deselect>

	return count ? RES_ERROR : RES_OK;
    6ccc:	81 e0       	ldi	r24, 0x01	; 1
    6cce:	98 85       	ldd	r25, Y+8	; 0x08
    6cd0:	99 23       	and	r25, r25
    6cd2:	09 f4       	brne	.+2      	; 0x6cd6 <disk_write+0x142>
    6cd4:	80 e0       	ldi	r24, 0x00	; 0
}
    6cd6:	28 96       	adiw	r28, 0x08	; 8
    6cd8:	0f b6       	in	r0, 0x3f	; 63
    6cda:	f8 94       	cli
    6cdc:	de bf       	out	0x3e, r29	; 62
    6cde:	0f be       	out	0x3f, r0	; 63
    6ce0:	cd bf       	out	0x3d, r28	; 61
    6ce2:	df 91       	pop	r29
    6ce4:	cf 91       	pop	r28
    6ce6:	0f 91       	pop	r16
    6ce8:	08 95       	ret

00006cea <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    6cea:	0f 93       	push	r16
    6cec:	1f 93       	push	r17
    6cee:	cf 93       	push	r28
    6cf0:	df 93       	push	r29
    6cf2:	cd b7       	in	r28, 0x3d	; 61
    6cf4:	de b7       	in	r29, 0x3e	; 62
    6cf6:	6a 97       	sbiw	r28, 0x1a	; 26
    6cf8:	0f b6       	in	r0, 0x3f	; 63
    6cfa:	f8 94       	cli
    6cfc:	de bf       	out	0x3e, r29	; 62
    6cfe:	0f be       	out	0x3f, r0	; 63
    6d00:	cd bf       	out	0x3d, r28	; 61
    6d02:	8f 8b       	std	Y+23, r24	; 0x17
    6d04:	68 8f       	std	Y+24, r22	; 0x18
    6d06:	5a 8f       	std	Y+26, r21	; 0x1a
    6d08:	49 8f       	std	Y+25, r20	; 0x19
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
    6d0a:	89 8d       	ldd	r24, Y+25	; 0x19
    6d0c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6d0e:	9c 83       	std	Y+4, r25	; 0x04
    6d10:	8b 83       	std	Y+3, r24	; 0x03
	WORD csize;


	if (drv) return RES_PARERR;
    6d12:	8f 89       	ldd	r24, Y+23	; 0x17
    6d14:	88 23       	and	r24, r24
    6d16:	11 f0       	breq	.+4      	; 0x6d1c <disk_ioctl+0x32>
    6d18:	84 e0       	ldi	r24, 0x04	; 4
    6d1a:	03 c2       	rjmp	.+1030   	; 0x7122 <disk_ioctl+0x438>

	res = RES_ERROR;
    6d1c:	81 e0       	ldi	r24, 0x01	; 1
    6d1e:	89 83       	std	Y+1, r24	; 0x01

	if (ctrl == CTRL_POWER) {
    6d20:	88 8d       	ldd	r24, Y+24	; 0x18
    6d22:	85 30       	cpi	r24, 0x05	; 5
    6d24:	e9 f4       	brne	.+58     	; 0x6d60 <disk_ioctl+0x76>
		switch (ptr[0]) {
    6d26:	8b 81       	ldd	r24, Y+3	; 0x03
    6d28:	9c 81       	ldd	r25, Y+4	; 0x04
    6d2a:	fc 01       	movw	r30, r24
    6d2c:	80 81       	ld	r24, Z
    6d2e:	88 2f       	mov	r24, r24
    6d30:	90 e0       	ldi	r25, 0x00	; 0
    6d32:	00 97       	sbiw	r24, 0x00	; 0
    6d34:	19 f0       	breq	.+6      	; 0x6d3c <disk_ioctl+0x52>
    6d36:	01 97       	sbiw	r24, 0x01	; 1
    6d38:	29 f0       	breq	.+10     	; 0x6d44 <disk_ioctl+0x5a>
    6d3a:	0f c0       	rjmp	.+30     	; 0x6d5a <disk_ioctl+0x70>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
    6d3c:	0e 94 77 32 	call	0x64ee	; 0x64ee <power_off>
			res = RES_OK;
    6d40:	19 82       	std	Y+1, r1	; 0x01
			break;
    6d42:	ee c1       	rjmp	.+988    	; 0x7120 <disk_ioctl+0x436>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
    6d44:	8b 81       	ldd	r24, Y+3	; 0x03
    6d46:	9c 81       	ldd	r25, Y+4	; 0x04
    6d48:	8c 01       	movw	r16, r24
    6d4a:	0f 5f       	subi	r16, 0xFF	; 255
    6d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    6d4e:	0e 94 66 32 	call	0x64cc	; 0x64cc <power_status>
    6d52:	f8 01       	movw	r30, r16
    6d54:	80 83       	st	Z, r24
			res = RES_OK;
    6d56:	19 82       	std	Y+1, r1	; 0x01
			break;
    6d58:	e3 c1       	rjmp	.+966    	; 0x7120 <disk_ioctl+0x436>
		default :
			res = RES_PARERR;
    6d5a:	84 e0       	ldi	r24, 0x04	; 4
    6d5c:	89 83       	std	Y+1, r24	; 0x01
    6d5e:	e0 c1       	rjmp	.+960    	; 0x7120 <disk_ioctl+0x436>
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    6d60:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    6d64:	88 2f       	mov	r24, r24
    6d66:	90 e0       	ldi	r25, 0x00	; 0
    6d68:	81 70       	andi	r24, 0x01	; 1
    6d6a:	99 27       	eor	r25, r25
    6d6c:	89 2b       	or	r24, r25
    6d6e:	11 f0       	breq	.+4      	; 0x6d74 <disk_ioctl+0x8a>
    6d70:	83 e0       	ldi	r24, 0x03	; 3
    6d72:	d7 c1       	rjmp	.+942    	; 0x7122 <disk_ioctl+0x438>

		switch (ctrl) {
    6d74:	88 8d       	ldd	r24, Y+24	; 0x18
    6d76:	88 2f       	mov	r24, r24
    6d78:	90 e0       	ldi	r25, 0x00	; 0
    6d7a:	09 2e       	mov	r0, r25
    6d7c:	00 0c       	add	r0, r0
    6d7e:	aa 0b       	sbc	r26, r26
    6d80:	bb 0b       	sbc	r27, r27
    6d82:	40 e0       	ldi	r20, 0x00	; 0
    6d84:	50 e0       	ldi	r21, 0x00	; 0
    6d86:	2e e0       	ldi	r18, 0x0E	; 14
    6d88:	30 e0       	ldi	r19, 0x00	; 0
    6d8a:	84 1b       	sub	r24, r20
    6d8c:	95 0b       	sbc	r25, r21
    6d8e:	28 17       	cp	r18, r24
    6d90:	39 07       	cpc	r19, r25
    6d92:	08 f4       	brcc	.+2      	; 0x6d96 <disk_ioctl+0xac>
    6d94:	b3 c1       	rjmp	.+870    	; 0x70fc <disk_ioctl+0x412>
    6d96:	86 55       	subi	r24, 0x56	; 86
    6d98:	9f 4f       	sbci	r25, 0xFF	; 255
    6d9a:	fc 01       	movw	r30, r24
    6d9c:	0c 94 aa 3d 	jmp	0x7b54	; 0x7b54 <__tablejump2__>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
    6da0:	0e 94 4b 32 	call	0x6496	; 0x6496 <select>
    6da4:	89 2b       	or	r24, r25
    6da6:	09 f4       	brne	.+2      	; 0x6daa <disk_ioctl+0xc0>
    6da8:	ac c1       	rjmp	.+856    	; 0x7102 <disk_ioctl+0x418>
				deselect();
    6daa:	0e 94 38 32 	call	0x6470	; 0x6470 <deselect>
				res = RES_OK;
    6dae:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
    6db0:	a8 c1       	rjmp	.+848    	; 0x7102 <disk_ioctl+0x418>

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    6db2:	40 e0       	ldi	r20, 0x00	; 0
    6db4:	50 e0       	ldi	r21, 0x00	; 0
    6db6:	ba 01       	movw	r22, r20
    6db8:	89 e0       	ldi	r24, 0x09	; 9
    6dba:	0e 94 8f 33 	call	0x671e	; 0x671e <send_cmd>
    6dbe:	88 23       	and	r24, r24
    6dc0:	09 f0       	breq	.+2      	; 0x6dc4 <disk_ioctl+0xda>
    6dc2:	a1 c1       	rjmp	.+834    	; 0x7106 <disk_ioctl+0x41c>
    6dc4:	ce 01       	movw	r24, r28
    6dc6:	07 96       	adiw	r24, 0x07	; 7
    6dc8:	60 e1       	ldi	r22, 0x10	; 16
    6dca:	70 e0       	ldi	r23, 0x00	; 0
    6dcc:	0e 94 7f 32 	call	0x64fe	; 0x64fe <rcvr_datablock>
    6dd0:	89 2b       	or	r24, r25
    6dd2:	09 f4       	brne	.+2      	; 0x6dd6 <disk_ioctl+0xec>
    6dd4:	98 c1       	rjmp	.+816    	; 0x7106 <disk_ioctl+0x41c>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    6dd6:	8f 81       	ldd	r24, Y+7	; 0x07
    6dd8:	82 95       	swap	r24
    6dda:	86 95       	lsr	r24
    6ddc:	86 95       	lsr	r24
    6dde:	83 70       	andi	r24, 0x03	; 3
    6de0:	81 30       	cpi	r24, 0x01	; 1
    6de2:	19 f5       	brne	.+70     	; 0x6e2a <disk_ioctl+0x140>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
    6de4:	88 89       	ldd	r24, Y+16	; 0x10
    6de6:	28 2f       	mov	r18, r24
    6de8:	30 e0       	ldi	r19, 0x00	; 0
    6dea:	8f 85       	ldd	r24, Y+15	; 0x0f
    6dec:	88 2f       	mov	r24, r24
    6dee:	90 e0       	ldi	r25, 0x00	; 0
    6df0:	98 2f       	mov	r25, r24
    6df2:	88 27       	eor	r24, r24
    6df4:	82 0f       	add	r24, r18
    6df6:	93 1f       	adc	r25, r19
    6df8:	01 96       	adiw	r24, 0x01	; 1
    6dfa:	9e 83       	std	Y+6, r25	; 0x06
    6dfc:	8d 83       	std	Y+5, r24	; 0x05
					*(DWORD*)buff = (DWORD)csize << 10;
    6dfe:	8d 81       	ldd	r24, Y+5	; 0x05
    6e00:	9e 81       	ldd	r25, Y+6	; 0x06
    6e02:	cc 01       	movw	r24, r24
    6e04:	a0 e0       	ldi	r26, 0x00	; 0
    6e06:	b0 e0       	ldi	r27, 0x00	; 0
    6e08:	07 2e       	mov	r0, r23
    6e0a:	7a e0       	ldi	r23, 0x0A	; 10
    6e0c:	88 0f       	add	r24, r24
    6e0e:	99 1f       	adc	r25, r25
    6e10:	aa 1f       	adc	r26, r26
    6e12:	bb 1f       	adc	r27, r27
    6e14:	7a 95       	dec	r23
    6e16:	d1 f7       	brne	.-12     	; 0x6e0c <disk_ioctl+0x122>
    6e18:	70 2d       	mov	r23, r0
    6e1a:	29 8d       	ldd	r18, Y+25	; 0x19
    6e1c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    6e1e:	f9 01       	movw	r30, r18
    6e20:	80 83       	st	Z, r24
    6e22:	91 83       	std	Z+1, r25	; 0x01
    6e24:	a2 83       	std	Z+2, r26	; 0x02
    6e26:	b3 83       	std	Z+3, r27	; 0x03
    6e28:	44 c0       	rjmp	.+136    	; 0x6eb2 <disk_ioctl+0x1c8>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    6e2a:	8c 85       	ldd	r24, Y+12	; 0x0c
    6e2c:	98 2f       	mov	r25, r24
    6e2e:	9f 70       	andi	r25, 0x0F	; 15
    6e30:	89 89       	ldd	r24, Y+17	; 0x11
    6e32:	88 1f       	adc	r24, r24
    6e34:	88 27       	eor	r24, r24
    6e36:	88 1f       	adc	r24, r24
    6e38:	98 0f       	add	r25, r24
    6e3a:	88 89       	ldd	r24, Y+16	; 0x10
    6e3c:	83 70       	andi	r24, 0x03	; 3
    6e3e:	88 0f       	add	r24, r24
    6e40:	89 0f       	add	r24, r25
    6e42:	8e 5f       	subi	r24, 0xFE	; 254
    6e44:	8a 83       	std	Y+2, r24	; 0x02
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    6e46:	8f 85       	ldd	r24, Y+15	; 0x0f
    6e48:	82 95       	swap	r24
    6e4a:	86 95       	lsr	r24
    6e4c:	86 95       	lsr	r24
    6e4e:	83 70       	andi	r24, 0x03	; 3
    6e50:	28 2f       	mov	r18, r24
    6e52:	30 e0       	ldi	r19, 0x00	; 0
    6e54:	8e 85       	ldd	r24, Y+14	; 0x0e
    6e56:	88 2f       	mov	r24, r24
    6e58:	90 e0       	ldi	r25, 0x00	; 0
    6e5a:	88 0f       	add	r24, r24
    6e5c:	99 1f       	adc	r25, r25
    6e5e:	88 0f       	add	r24, r24
    6e60:	99 1f       	adc	r25, r25
    6e62:	28 0f       	add	r18, r24
    6e64:	39 1f       	adc	r19, r25
    6e66:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e68:	88 2f       	mov	r24, r24
    6e6a:	90 e0       	ldi	r25, 0x00	; 0
    6e6c:	83 70       	andi	r24, 0x03	; 3
    6e6e:	99 27       	eor	r25, r25
    6e70:	98 2f       	mov	r25, r24
    6e72:	88 27       	eor	r24, r24
    6e74:	99 0f       	add	r25, r25
    6e76:	99 0f       	add	r25, r25
    6e78:	82 0f       	add	r24, r18
    6e7a:	93 1f       	adc	r25, r19
    6e7c:	01 96       	adiw	r24, 0x01	; 1
    6e7e:	9e 83       	std	Y+6, r25	; 0x06
    6e80:	8d 83       	std	Y+5, r24	; 0x05
					*(DWORD*)buff = (DWORD)csize << (n - 9);
    6e82:	8d 81       	ldd	r24, Y+5	; 0x05
    6e84:	9e 81       	ldd	r25, Y+6	; 0x06
    6e86:	cc 01       	movw	r24, r24
    6e88:	a0 e0       	ldi	r26, 0x00	; 0
    6e8a:	b0 e0       	ldi	r27, 0x00	; 0
    6e8c:	2a 81       	ldd	r18, Y+2	; 0x02
    6e8e:	22 2f       	mov	r18, r18
    6e90:	30 e0       	ldi	r19, 0x00	; 0
    6e92:	29 50       	subi	r18, 0x09	; 9
    6e94:	31 09       	sbc	r19, r1
    6e96:	04 c0       	rjmp	.+8      	; 0x6ea0 <disk_ioctl+0x1b6>
    6e98:	88 0f       	add	r24, r24
    6e9a:	99 1f       	adc	r25, r25
    6e9c:	aa 1f       	adc	r26, r26
    6e9e:	bb 1f       	adc	r27, r27
    6ea0:	2a 95       	dec	r18
    6ea2:	d2 f7       	brpl	.-12     	; 0x6e98 <disk_ioctl+0x1ae>
    6ea4:	29 8d       	ldd	r18, Y+25	; 0x19
    6ea6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    6ea8:	f9 01       	movw	r30, r18
    6eaa:	80 83       	st	Z, r24
    6eac:	91 83       	std	Z+1, r25	; 0x01
    6eae:	a2 83       	std	Z+2, r26	; 0x02
    6eb0:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    6eb2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
    6eb4:	28 c1       	rjmp	.+592    	; 0x7106 <disk_ioctl+0x41c>

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    6eb6:	89 8d       	ldd	r24, Y+25	; 0x19
    6eb8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6eba:	20 e0       	ldi	r18, 0x00	; 0
    6ebc:	32 e0       	ldi	r19, 0x02	; 2
    6ebe:	fc 01       	movw	r30, r24
    6ec0:	31 83       	std	Z+1, r19	; 0x01
    6ec2:	20 83       	st	Z, r18
			res = RES_OK;
    6ec4:	19 82       	std	Y+1, r1	; 0x01
			break;
    6ec6:	2a c1       	rjmp	.+596    	; 0x711c <disk_ioctl+0x432>

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
    6ec8:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <CardType>
    6ecc:	88 2f       	mov	r24, r24
    6ece:	90 e0       	ldi	r25, 0x00	; 0
    6ed0:	84 70       	andi	r24, 0x04	; 4
    6ed2:	99 27       	eor	r25, r25
    6ed4:	89 2b       	or	r24, r25
    6ed6:	c1 f1       	breq	.+112    	; 0x6f48 <disk_ioctl+0x25e>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    6ed8:	40 e0       	ldi	r20, 0x00	; 0
    6eda:	50 e0       	ldi	r21, 0x00	; 0
    6edc:	ba 01       	movw	r22, r20
    6ede:	8d e8       	ldi	r24, 0x8D	; 141
    6ee0:	0e 94 8f 33 	call	0x671e	; 0x671e <send_cmd>
    6ee4:	88 23       	and	r24, r24
    6ee6:	09 f0       	breq	.+2      	; 0x6eea <disk_ioctl+0x200>
    6ee8:	10 c1       	rjmp	.+544    	; 0x710a <disk_ioctl+0x420>
					rcvr_spi();
    6eea:	0e 94 09 32 	call	0x6412	; 0x6412 <rcvr_spi>
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    6eee:	ce 01       	movw	r24, r28
    6ef0:	07 96       	adiw	r24, 0x07	; 7
    6ef2:	60 e1       	ldi	r22, 0x10	; 16
    6ef4:	70 e0       	ldi	r23, 0x00	; 0
    6ef6:	0e 94 7f 32 	call	0x64fe	; 0x64fe <rcvr_datablock>
    6efa:	89 2b       	or	r24, r25
    6efc:	09 f4       	brne	.+2      	; 0x6f00 <disk_ioctl+0x216>
    6efe:	05 c1       	rjmp	.+522    	; 0x710a <disk_ioctl+0x420>
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
    6f00:	80 e3       	ldi	r24, 0x30	; 48
    6f02:	8a 83       	std	Y+2, r24	; 0x02
    6f04:	05 c0       	rjmp	.+10     	; 0x6f10 <disk_ioctl+0x226>
    6f06:	0e 94 09 32 	call	0x6412	; 0x6412 <rcvr_spi>
    6f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    6f0c:	81 50       	subi	r24, 0x01	; 1
    6f0e:	8a 83       	std	Y+2, r24	; 0x02
    6f10:	8a 81       	ldd	r24, Y+2	; 0x02
    6f12:	88 23       	and	r24, r24
    6f14:	c1 f7       	brne	.-16     	; 0x6f06 <disk_ioctl+0x21c>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    6f16:	89 89       	ldd	r24, Y+17	; 0x11
    6f18:	82 95       	swap	r24
    6f1a:	8f 70       	andi	r24, 0x0F	; 15
    6f1c:	28 2f       	mov	r18, r24
    6f1e:	30 e0       	ldi	r19, 0x00	; 0
    6f20:	80 e1       	ldi	r24, 0x10	; 16
    6f22:	90 e0       	ldi	r25, 0x00	; 0
    6f24:	a0 e0       	ldi	r26, 0x00	; 0
    6f26:	b0 e0       	ldi	r27, 0x00	; 0
    6f28:	04 c0       	rjmp	.+8      	; 0x6f32 <disk_ioctl+0x248>
    6f2a:	88 0f       	add	r24, r24
    6f2c:	99 1f       	adc	r25, r25
    6f2e:	aa 1f       	adc	r26, r26
    6f30:	bb 1f       	adc	r27, r27
    6f32:	2a 95       	dec	r18
    6f34:	d2 f7       	brpl	.-12     	; 0x6f2a <disk_ioctl+0x240>
    6f36:	29 8d       	ldd	r18, Y+25	; 0x19
    6f38:	3a 8d       	ldd	r19, Y+26	; 0x1a
    6f3a:	f9 01       	movw	r30, r18
    6f3c:	80 83       	st	Z, r24
    6f3e:	91 83       	std	Z+1, r25	; 0x01
    6f40:	a2 83       	std	Z+2, r26	; 0x02
    6f42:	b3 83       	std	Z+3, r27	; 0x03
						res = RES_OK;
    6f44:	19 82       	std	Y+1, r1	; 0x01
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
					}
					res = RES_OK;
				}
			}
			break;
    6f46:	e1 c0       	rjmp	.+450    	; 0x710a <disk_ioctl+0x420>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
						res = RES_OK;
					}
				}
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    6f48:	40 e0       	ldi	r20, 0x00	; 0
    6f4a:	50 e0       	ldi	r21, 0x00	; 0
    6f4c:	ba 01       	movw	r22, r20
    6f4e:	89 e0       	ldi	r24, 0x09	; 9
    6f50:	0e 94 8f 33 	call	0x671e	; 0x671e <send_cmd>
    6f54:	88 23       	and	r24, r24
    6f56:	09 f0       	breq	.+2      	; 0x6f5a <disk_ioctl+0x270>
    6f58:	d8 c0       	rjmp	.+432    	; 0x710a <disk_ioctl+0x420>
    6f5a:	ce 01       	movw	r24, r28
    6f5c:	07 96       	adiw	r24, 0x07	; 7
    6f5e:	60 e1       	ldi	r22, 0x10	; 16
    6f60:	70 e0       	ldi	r23, 0x00	; 0
    6f62:	0e 94 7f 32 	call	0x64fe	; 0x64fe <rcvr_datablock>
    6f66:	89 2b       	or	r24, r25
    6f68:	09 f4       	brne	.+2      	; 0x6f6c <disk_ioctl+0x282>
    6f6a:	cf c0       	rjmp	.+414    	; 0x710a <disk_ioctl+0x420>
					if (CardType & CT_SD1) {	/* SDv1 */
    6f6c:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <CardType>
    6f70:	88 2f       	mov	r24, r24
    6f72:	90 e0       	ldi	r25, 0x00	; 0
    6f74:	82 70       	andi	r24, 0x02	; 2
    6f76:	99 27       	eor	r25, r25
    6f78:	89 2b       	or	r24, r25
    6f7a:	51 f1       	breq	.+84     	; 0x6fd0 <disk_ioctl+0x2e6>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    6f7c:	89 89       	ldd	r24, Y+17	; 0x11
    6f7e:	88 2f       	mov	r24, r24
    6f80:	90 e0       	ldi	r25, 0x00	; 0
    6f82:	8f 73       	andi	r24, 0x3F	; 63
    6f84:	99 27       	eor	r25, r25
    6f86:	88 0f       	add	r24, r24
    6f88:	99 1f       	adc	r25, r25
    6f8a:	9c 01       	movw	r18, r24
    6f8c:	8a 89       	ldd	r24, Y+18	; 0x12
    6f8e:	88 1f       	adc	r24, r24
    6f90:	88 27       	eor	r24, r24
    6f92:	88 1f       	adc	r24, r24
    6f94:	88 2f       	mov	r24, r24
    6f96:	90 e0       	ldi	r25, 0x00	; 0
    6f98:	82 0f       	add	r24, r18
    6f9a:	93 1f       	adc	r25, r19
    6f9c:	01 96       	adiw	r24, 0x01	; 1
    6f9e:	2c 89       	ldd	r18, Y+20	; 0x14
    6fa0:	22 95       	swap	r18
    6fa2:	26 95       	lsr	r18
    6fa4:	26 95       	lsr	r18
    6fa6:	23 70       	andi	r18, 0x03	; 3
    6fa8:	22 2f       	mov	r18, r18
    6faa:	30 e0       	ldi	r19, 0x00	; 0
    6fac:	21 50       	subi	r18, 0x01	; 1
    6fae:	31 09       	sbc	r19, r1
    6fb0:	02 c0       	rjmp	.+4      	; 0x6fb6 <disk_ioctl+0x2cc>
    6fb2:	88 0f       	add	r24, r24
    6fb4:	99 1f       	adc	r25, r25
    6fb6:	2a 95       	dec	r18
    6fb8:	e2 f7       	brpl	.-8      	; 0x6fb2 <disk_ioctl+0x2c8>
    6fba:	cc 01       	movw	r24, r24
    6fbc:	a0 e0       	ldi	r26, 0x00	; 0
    6fbe:	b0 e0       	ldi	r27, 0x00	; 0
    6fc0:	29 8d       	ldd	r18, Y+25	; 0x19
    6fc2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    6fc4:	f9 01       	movw	r30, r18
    6fc6:	80 83       	st	Z, r24
    6fc8:	91 83       	std	Z+1, r25	; 0x01
    6fca:	a2 83       	std	Z+2, r26	; 0x02
    6fcc:	b3 83       	std	Z+3, r27	; 0x03
    6fce:	33 c0       	rjmp	.+102    	; 0x7036 <disk_ioctl+0x34c>
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    6fd0:	89 89       	ldd	r24, Y+17	; 0x11
    6fd2:	88 2f       	mov	r24, r24
    6fd4:	90 e0       	ldi	r25, 0x00	; 0
    6fd6:	8c 77       	andi	r24, 0x7C	; 124
    6fd8:	99 27       	eor	r25, r25
    6fda:	95 95       	asr	r25
    6fdc:	87 95       	ror	r24
    6fde:	95 95       	asr	r25
    6fe0:	87 95       	ror	r24
    6fe2:	9c 01       	movw	r18, r24
    6fe4:	2f 5f       	subi	r18, 0xFF	; 255
    6fe6:	3f 4f       	sbci	r19, 0xFF	; 255
    6fe8:	8a 89       	ldd	r24, Y+18	; 0x12
    6fea:	88 2f       	mov	r24, r24
    6fec:	90 e0       	ldi	r25, 0x00	; 0
    6fee:	83 70       	andi	r24, 0x03	; 3
    6ff0:	99 27       	eor	r25, r25
    6ff2:	ac 01       	movw	r20, r24
    6ff4:	44 0f       	add	r20, r20
    6ff6:	55 1f       	adc	r21, r21
    6ff8:	44 0f       	add	r20, r20
    6ffa:	55 1f       	adc	r21, r21
    6ffc:	44 0f       	add	r20, r20
    6ffe:	55 1f       	adc	r21, r21
    7000:	8a 89       	ldd	r24, Y+18	; 0x12
    7002:	82 95       	swap	r24
    7004:	86 95       	lsr	r24
    7006:	87 70       	andi	r24, 0x07	; 7
    7008:	88 2f       	mov	r24, r24
    700a:	90 e0       	ldi	r25, 0x00	; 0
    700c:	84 0f       	add	r24, r20
    700e:	95 1f       	adc	r25, r21
    7010:	01 96       	adiw	r24, 0x01	; 1
    7012:	ac 01       	movw	r20, r24
    7014:	24 9f       	mul	r18, r20
    7016:	c0 01       	movw	r24, r0
    7018:	25 9f       	mul	r18, r21
    701a:	90 0d       	add	r25, r0
    701c:	34 9f       	mul	r19, r20
    701e:	90 0d       	add	r25, r0
    7020:	11 24       	eor	r1, r1
    7022:	cc 01       	movw	r24, r24
    7024:	a0 e0       	ldi	r26, 0x00	; 0
    7026:	b0 e0       	ldi	r27, 0x00	; 0
    7028:	29 8d       	ldd	r18, Y+25	; 0x19
    702a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    702c:	f9 01       	movw	r30, r18
    702e:	80 83       	st	Z, r24
    7030:	91 83       	std	Z+1, r25	; 0x01
    7032:	a2 83       	std	Z+2, r26	; 0x02
    7034:	b3 83       	std	Z+3, r27	; 0x03
					}
					res = RES_OK;
    7036:	19 82       	std	Y+1, r1	; 0x01
				}
			}
			break;
    7038:	68 c0       	rjmp	.+208    	; 0x710a <disk_ioctl+0x420>

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    703a:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <CardType>
    703e:	8b 81       	ldd	r24, Y+3	; 0x03
    7040:	9c 81       	ldd	r25, Y+4	; 0x04
    7042:	fc 01       	movw	r30, r24
    7044:	20 83       	st	Z, r18
			res = RES_OK;
    7046:	19 82       	std	Y+1, r1	; 0x01
			break;
    7048:	69 c0       	rjmp	.+210    	; 0x711c <disk_ioctl+0x432>

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    704a:	40 e0       	ldi	r20, 0x00	; 0
    704c:	50 e0       	ldi	r21, 0x00	; 0
    704e:	ba 01       	movw	r22, r20
    7050:	89 e0       	ldi	r24, 0x09	; 9
    7052:	0e 94 8f 33 	call	0x671e	; 0x671e <send_cmd>
    7056:	88 23       	and	r24, r24
    7058:	09 f0       	breq	.+2      	; 0x705c <disk_ioctl+0x372>
    705a:	59 c0       	rjmp	.+178    	; 0x710e <disk_ioctl+0x424>
				&& rcvr_datablock(ptr, 16))
    705c:	8b 81       	ldd	r24, Y+3	; 0x03
    705e:	9c 81       	ldd	r25, Y+4	; 0x04
    7060:	60 e1       	ldi	r22, 0x10	; 16
    7062:	70 e0       	ldi	r23, 0x00	; 0
    7064:	0e 94 7f 32 	call	0x64fe	; 0x64fe <rcvr_datablock>
    7068:	89 2b       	or	r24, r25
    706a:	09 f4       	brne	.+2      	; 0x706e <disk_ioctl+0x384>
    706c:	50 c0       	rjmp	.+160    	; 0x710e <disk_ioctl+0x424>
				res = RES_OK;
    706e:	19 82       	std	Y+1, r1	; 0x01
			break;
    7070:	4e c0       	rjmp	.+156    	; 0x710e <disk_ioctl+0x424>

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    7072:	40 e0       	ldi	r20, 0x00	; 0
    7074:	50 e0       	ldi	r21, 0x00	; 0
    7076:	ba 01       	movw	r22, r20
    7078:	8a e0       	ldi	r24, 0x0A	; 10
    707a:	0e 94 8f 33 	call	0x671e	; 0x671e <send_cmd>
    707e:	88 23       	and	r24, r24
    7080:	09 f0       	breq	.+2      	; 0x7084 <disk_ioctl+0x39a>
    7082:	47 c0       	rjmp	.+142    	; 0x7112 <disk_ioctl+0x428>
				&& rcvr_datablock(ptr, 16))
    7084:	8b 81       	ldd	r24, Y+3	; 0x03
    7086:	9c 81       	ldd	r25, Y+4	; 0x04
    7088:	60 e1       	ldi	r22, 0x10	; 16
    708a:	70 e0       	ldi	r23, 0x00	; 0
    708c:	0e 94 7f 32 	call	0x64fe	; 0x64fe <rcvr_datablock>
    7090:	89 2b       	or	r24, r25
    7092:	09 f4       	brne	.+2      	; 0x7096 <disk_ioctl+0x3ac>
    7094:	3e c0       	rjmp	.+124    	; 0x7112 <disk_ioctl+0x428>
				res = RES_OK;
    7096:	19 82       	std	Y+1, r1	; 0x01
			break;
    7098:	3c c0       	rjmp	.+120    	; 0x7112 <disk_ioctl+0x428>

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    709a:	40 e0       	ldi	r20, 0x00	; 0
    709c:	50 e0       	ldi	r21, 0x00	; 0
    709e:	ba 01       	movw	r22, r20
    70a0:	8a e3       	ldi	r24, 0x3A	; 58
    70a2:	0e 94 8f 33 	call	0x671e	; 0x671e <send_cmd>
    70a6:	88 23       	and	r24, r24
    70a8:	b1 f5       	brne	.+108    	; 0x7116 <disk_ioctl+0x42c>
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    70aa:	84 e0       	ldi	r24, 0x04	; 4
    70ac:	8a 83       	std	Y+2, r24	; 0x02
    70ae:	0d c0       	rjmp	.+26     	; 0x70ca <disk_ioctl+0x3e0>
    70b0:	0b 81       	ldd	r16, Y+3	; 0x03
    70b2:	1c 81       	ldd	r17, Y+4	; 0x04
    70b4:	c8 01       	movw	r24, r16
    70b6:	01 96       	adiw	r24, 0x01	; 1
    70b8:	9c 83       	std	Y+4, r25	; 0x04
    70ba:	8b 83       	std	Y+3, r24	; 0x03
    70bc:	0e 94 09 32 	call	0x6412	; 0x6412 <rcvr_spi>
    70c0:	f8 01       	movw	r30, r16
    70c2:	80 83       	st	Z, r24
    70c4:	8a 81       	ldd	r24, Y+2	; 0x02
    70c6:	81 50       	subi	r24, 0x01	; 1
    70c8:	8a 83       	std	Y+2, r24	; 0x02
    70ca:	8a 81       	ldd	r24, Y+2	; 0x02
    70cc:	88 23       	and	r24, r24
    70ce:	81 f7       	brne	.-32     	; 0x70b0 <disk_ioctl+0x3c6>
				res = RES_OK;
    70d0:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
    70d2:	21 c0       	rjmp	.+66     	; 0x7116 <disk_ioctl+0x42c>

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    70d4:	40 e0       	ldi	r20, 0x00	; 0
    70d6:	50 e0       	ldi	r21, 0x00	; 0
    70d8:	ba 01       	movw	r22, r20
    70da:	8d e8       	ldi	r24, 0x8D	; 141
    70dc:	0e 94 8f 33 	call	0x671e	; 0x671e <send_cmd>
    70e0:	88 23       	and	r24, r24
    70e2:	d9 f4       	brne	.+54     	; 0x711a <disk_ioctl+0x430>
				rcvr_spi();
    70e4:	0e 94 09 32 	call	0x6412	; 0x6412 <rcvr_spi>
				if (rcvr_datablock(ptr, 64))
    70e8:	8b 81       	ldd	r24, Y+3	; 0x03
    70ea:	9c 81       	ldd	r25, Y+4	; 0x04
    70ec:	60 e4       	ldi	r22, 0x40	; 64
    70ee:	70 e0       	ldi	r23, 0x00	; 0
    70f0:	0e 94 7f 32 	call	0x64fe	; 0x64fe <rcvr_datablock>
    70f4:	89 2b       	or	r24, r25
    70f6:	89 f0       	breq	.+34     	; 0x711a <disk_ioctl+0x430>
					res = RES_OK;
    70f8:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
    70fa:	0f c0       	rjmp	.+30     	; 0x711a <disk_ioctl+0x430>

		default:
			res = RES_PARERR;
    70fc:	84 e0       	ldi	r24, 0x04	; 4
    70fe:	89 83       	std	Y+1, r24	; 0x01
    7100:	0d c0       	rjmp	.+26     	; 0x711c <disk_ioctl+0x432>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
				deselect();
				res = RES_OK;
			}
			break;
    7102:	00 00       	nop
    7104:	0b c0       	rjmp	.+22     	; 0x711c <disk_ioctl+0x432>
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
				}
				res = RES_OK;
			}
			break;
    7106:	00 00       	nop
    7108:	09 c0       	rjmp	.+18     	; 0x711c <disk_ioctl+0x432>
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
					}
					res = RES_OK;
				}
			}
			break;
    710a:	00 00       	nop
    710c:	07 c0       	rjmp	.+14     	; 0x711c <disk_ioctl+0x432>

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;
    710e:	00 00       	nop
    7110:	05 c0       	rjmp	.+10     	; 0x711c <disk_ioctl+0x432>

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;
    7112:	00 00       	nop
    7114:	03 c0       	rjmp	.+6      	; 0x711c <disk_ioctl+0x432>
		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
				res = RES_OK;
			}
			break;
    7116:	00 00       	nop
    7118:	01 c0       	rjmp	.+2      	; 0x711c <disk_ioctl+0x432>
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
					res = RES_OK;
			}
			break;
    711a:	00 00       	nop

		default:
			res = RES_PARERR;
		}

		deselect();
    711c:	0e 94 38 32 	call	0x6470	; 0x6470 <deselect>
	}

	return res;
    7120:	89 81       	ldd	r24, Y+1	; 0x01
}
    7122:	6a 96       	adiw	r28, 0x1a	; 26
    7124:	0f b6       	in	r0, 0x3f	; 63
    7126:	f8 94       	cli
    7128:	de bf       	out	0x3e, r29	; 62
    712a:	0f be       	out	0x3f, r0	; 63
    712c:	cd bf       	out	0x3d, r28	; 61
    712e:	df 91       	pop	r29
    7130:	cf 91       	pop	r28
    7132:	1f 91       	pop	r17
    7134:	0f 91       	pop	r16
    7136:	08 95       	ret

00007138 <disk_timerproc>:
/* Device Timer Interrupt Procedure                                      */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc (void)
{
    7138:	cf 93       	push	r28
    713a:	df 93       	push	r29
    713c:	00 d0       	rcall	.+0      	; 0x713e <disk_timerproc+0x6>
    713e:	cd b7       	in	r28, 0x3d	; 61
    7140:	de b7       	in	r29, 0x3e	; 62
	BYTE n, s;


	n = Timer1;						/* 100Hz decrement timer */
    7142:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <Timer1>
    7146:	89 83       	std	Y+1, r24	; 0x01
	if (n) Timer1 = --n;
    7148:	89 81       	ldd	r24, Y+1	; 0x01
    714a:	88 23       	and	r24, r24
    714c:	31 f0       	breq	.+12     	; 0x715a <disk_timerproc+0x22>
    714e:	89 81       	ldd	r24, Y+1	; 0x01
    7150:	81 50       	subi	r24, 0x01	; 1
    7152:	89 83       	std	Y+1, r24	; 0x01
    7154:	89 81       	ldd	r24, Y+1	; 0x01
    7156:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <Timer1>
	n = Timer2;
    715a:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <Timer2>
    715e:	89 83       	std	Y+1, r24	; 0x01
	if (n) Timer2 = --n;
    7160:	89 81       	ldd	r24, Y+1	; 0x01
    7162:	88 23       	and	r24, r24
    7164:	31 f0       	breq	.+12     	; 0x7172 <disk_timerproc+0x3a>
    7166:	89 81       	ldd	r24, Y+1	; 0x01
    7168:	81 50       	subi	r24, 0x01	; 1
    716a:	89 83       	std	Y+1, r24	; 0x01
    716c:	89 81       	ldd	r24, Y+1	; 0x01
    716e:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <Timer2>

	s = Stat;
    7172:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    7176:	8a 83       	std	Y+2, r24	; 0x02

	//if ( (SOCKWP & SOCKPORT ))				/* Write protected */
	//	s |= STA_PROTECT;
	//else					/* Write enabled */
		s &= ~STA_PROTECT;
    7178:	8a 81       	ldd	r24, Y+2	; 0x02
    717a:	8b 7f       	andi	r24, 0xFB	; 251
    717c:	8a 83       	std	Y+2, r24	; 0x02
	//if ( (SOCKINS & SOCKPORT))			/* Card inserted */
	//	s |= (STA_NODISK | STA_NOINIT);
	//else					/* Socket empty */ 
		s &= ~STA_NODISK;
    717e:	8a 81       	ldd	r24, Y+2	; 0x02
    7180:	8d 7f       	andi	r24, 0xFD	; 253
    7182:	8a 83       	std	Y+2, r24	; 0x02
	Stat = s;
    7184:	8a 81       	ldd	r24, Y+2	; 0x02
    7186:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
}
    718a:	00 00       	nop
    718c:	0f 90       	pop	r0
    718e:	0f 90       	pop	r0
    7190:	df 91       	pop	r29
    7192:	cf 91       	pop	r28
    7194:	08 95       	ret

00007196 <spiInit>:
}
#endif

// access routines
void spiInit()
{
    7196:	cf 93       	push	r28
    7198:	df 93       	push	r29
    719a:	cd b7       	in	r28, 0x3d	; 61
    719c:	de b7       	in	r29, 0x3e	; 62
    cbi(DDRB, 4);   // set MISO as input
    sbi(DDRB, 3);   // set MOSI as output
    sbi(DDRB, 2);   // SS must be output for Master mode to work
#else
	// setup SPI I/O pins
	sbi(PORTB, SCK);	// set SCK hi
    719e:	88 e3       	ldi	r24, 0x38	; 56
    71a0:	90 e0       	ldi	r25, 0x00	; 0
    71a2:	28 e3       	ldi	r18, 0x38	; 56
    71a4:	30 e0       	ldi	r19, 0x00	; 0
    71a6:	f9 01       	movw	r30, r18
    71a8:	20 81       	ld	r18, Z
    71aa:	20 68       	ori	r18, 0x80	; 128
    71ac:	fc 01       	movw	r30, r24
    71ae:	20 83       	st	Z, r18
	sbi(PORTB,MISO);	// set pull-up for MISO
    71b0:	88 e3       	ldi	r24, 0x38	; 56
    71b2:	90 e0       	ldi	r25, 0x00	; 0
    71b4:	28 e3       	ldi	r18, 0x38	; 56
    71b6:	30 e0       	ldi	r19, 0x00	; 0
    71b8:	f9 01       	movw	r30, r18
    71ba:	20 81       	ld	r18, Z
    71bc:	20 64       	ori	r18, 0x40	; 64
    71be:	fc 01       	movw	r30, r24
    71c0:	20 83       	st	Z, r18
	sbi(DDRB, SCK);	// set SCK as output
    71c2:	87 e3       	ldi	r24, 0x37	; 55
    71c4:	90 e0       	ldi	r25, 0x00	; 0
    71c6:	27 e3       	ldi	r18, 0x37	; 55
    71c8:	30 e0       	ldi	r19, 0x00	; 0
    71ca:	f9 01       	movw	r30, r18
    71cc:	20 81       	ld	r18, Z
    71ce:	20 68       	ori	r18, 0x80	; 128
    71d0:	fc 01       	movw	r30, r24
    71d2:	20 83       	st	Z, r18
	cbi(DDRB, MISO);	// set MISO as input
    71d4:	87 e3       	ldi	r24, 0x37	; 55
    71d6:	90 e0       	ldi	r25, 0x00	; 0
    71d8:	27 e3       	ldi	r18, 0x37	; 55
    71da:	30 e0       	ldi	r19, 0x00	; 0
    71dc:	f9 01       	movw	r30, r18
    71de:	20 81       	ld	r18, Z
    71e0:	2f 7b       	andi	r18, 0xBF	; 191
    71e2:	fc 01       	movw	r30, r24
    71e4:	20 83       	st	Z, r18
	sbi(DDRB, MOSI);	// set MOSI as output
    71e6:	87 e3       	ldi	r24, 0x37	; 55
    71e8:	90 e0       	ldi	r25, 0x00	; 0
    71ea:	27 e3       	ldi	r18, 0x37	; 55
    71ec:	30 e0       	ldi	r19, 0x00	; 0
    71ee:	f9 01       	movw	r30, r18
    71f0:	20 81       	ld	r18, Z
    71f2:	20 62       	ori	r18, 0x20	; 32
    71f4:	fc 01       	movw	r30, r24
    71f6:	20 83       	st	Z, r18
	sbi(DDRB, CS);	// SS must be output for Master mode to work
    71f8:	87 e3       	ldi	r24, 0x37	; 55
    71fa:	90 e0       	ldi	r25, 0x00	; 0
    71fc:	27 e3       	ldi	r18, 0x37	; 55
    71fe:	30 e0       	ldi	r19, 0x00	; 0
    7200:	f9 01       	movw	r30, r18
    7202:	20 81       	ld	r18, Z
    7204:	20 61       	ori	r18, 0x10	; 16
    7206:	fc 01       	movw	r30, r24
    7208:	20 83       	st	Z, r18
#endif
	
	// setup SPI interface :
	// master mode
	sbi(SPCR, MSTR);
    720a:	8d e2       	ldi	r24, 0x2D	; 45
    720c:	90 e0       	ldi	r25, 0x00	; 0
    720e:	2d e2       	ldi	r18, 0x2D	; 45
    7210:	30 e0       	ldi	r19, 0x00	; 0
    7212:	f9 01       	movw	r30, r18
    7214:	20 81       	ld	r18, Z
    7216:	20 61       	ori	r18, 0x10	; 16
    7218:	fc 01       	movw	r30, r24
    721a:	20 83       	st	Z, r18
	// clock = f/4
//	cbi(SPCR, SPR0);
//	cbi(SPCR, SPR1);
	// clock = f/16
	sbi(SPCR, SPR0);
    721c:	8d e2       	ldi	r24, 0x2D	; 45
    721e:	90 e0       	ldi	r25, 0x00	; 0
    7220:	2d e2       	ldi	r18, 0x2D	; 45
    7222:	30 e0       	ldi	r19, 0x00	; 0
    7224:	f9 01       	movw	r30, r18
    7226:	20 81       	ld	r18, Z
    7228:	21 60       	ori	r18, 0x01	; 1
    722a:	fc 01       	movw	r30, r24
    722c:	20 83       	st	Z, r18
	sbi(SPCR, SPR1);
    722e:	8d e2       	ldi	r24, 0x2D	; 45
    7230:	90 e0       	ldi	r25, 0x00	; 0
    7232:	2d e2       	ldi	r18, 0x2D	; 45
    7234:	30 e0       	ldi	r19, 0x00	; 0
    7236:	f9 01       	movw	r30, r18
    7238:	20 81       	ld	r18, Z
    723a:	22 60       	ori	r18, 0x02	; 2
    723c:	fc 01       	movw	r30, r24
    723e:	20 83       	st	Z, r18
	// select clock phase positive-going in middle of data
	cbi(SPCR, CPOL);
    7240:	8d e2       	ldi	r24, 0x2D	; 45
    7242:	90 e0       	ldi	r25, 0x00	; 0
    7244:	2d e2       	ldi	r18, 0x2D	; 45
    7246:	30 e0       	ldi	r19, 0x00	; 0
    7248:	f9 01       	movw	r30, r18
    724a:	20 81       	ld	r18, Z
    724c:	27 7f       	andi	r18, 0xF7	; 247
    724e:	fc 01       	movw	r30, r24
    7250:	20 83       	st	Z, r18
	// Data order MSB first
	cbi(SPCR,DORD);
    7252:	8d e2       	ldi	r24, 0x2D	; 45
    7254:	90 e0       	ldi	r25, 0x00	; 0
    7256:	2d e2       	ldi	r18, 0x2D	; 45
    7258:	30 e0       	ldi	r19, 0x00	; 0
    725a:	f9 01       	movw	r30, r18
    725c:	20 81       	ld	r18, Z
    725e:	2f 7d       	andi	r18, 0xDF	; 223
    7260:	fc 01       	movw	r30, r24
    7262:	20 83       	st	Z, r18
	// enable SPI
	sbi(SPCR, SPE);
    7264:	8d e2       	ldi	r24, 0x2D	; 45
    7266:	90 e0       	ldi	r25, 0x00	; 0
    7268:	2d e2       	ldi	r18, 0x2D	; 45
    726a:	30 e0       	ldi	r19, 0x00	; 0
    726c:	f9 01       	movw	r30, r18
    726e:	20 81       	ld	r18, Z
    7270:	20 64       	ori	r18, 0x40	; 64
    7272:	fc 01       	movw	r30, r24
    7274:	20 83       	st	Z, r18
	//outp((1<<MSTR)|(1<<SPE)|(1<<SPR0), SPCR );
	//outp((1<<CPHA)|(1<<CPOL)|(1<<MSTR)|(1<<SPE)|(1<<SPR0)|(1<<SPR1), SPCR );
	//outp((1<<CPHA)|(1<<MSTR)|(1<<SPE)|(1<<SPR0), SPCR );
	
	// clear status
	inb(SPSR);
    7276:	8e e2       	ldi	r24, 0x2E	; 46
    7278:	90 e0       	ldi	r25, 0x00	; 0
    727a:	fc 01       	movw	r30, r24
    727c:	80 81       	ld	r24, Z
	spiTransferComplete = TRUE;
    727e:	81 e0       	ldi	r24, 0x01	; 1
    7280:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <spiTransferComplete>

	// enable SPI interrupt
	#ifdef SPI_USEINT
	sbi(SPCR, SPIE);
	#endif
}
    7284:	00 00       	nop
    7286:	df 91       	pop	r29
    7288:	cf 91       	pop	r28
    728a:	08 95       	ret

0000728c <delay_us>:
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1BH);		// set the high 8bits of OCR1B
	//outp( (pwmDuty&0x00FF), OCR1BL);	// set the low 8bits of OCR1B
	OCR1B = pwmDuty;
}
    728c:	0f 93       	push	r16
    728e:	1f 93       	push	r17
    7290:	cf 93       	push	r28
    7292:	df 93       	push	r29
    7294:	00 d0       	rcall	.+0      	; 0x7296 <delay_us+0xa>
    7296:	00 d0       	rcall	.+0      	; 0x7298 <delay_us+0xc>
    7298:	cd b7       	in	r28, 0x3d	; 61
    729a:	de b7       	in	r29, 0x3e	; 62
    729c:	9c 83       	std	Y+4, r25	; 0x04
    729e:	8b 83       	std	Y+3, r24	; 0x03
    72a0:	8b 81       	ldd	r24, Y+3	; 0x03
    72a2:	9c 81       	ldd	r25, Y+4	; 0x04
    72a4:	03 96       	adiw	r24, 0x03	; 3
    72a6:	9c 01       	movw	r18, r24
    72a8:	ad ec       	ldi	r26, 0xCD	; 205
    72aa:	bc ec       	ldi	r27, 0xCC	; 204
    72ac:	0e 94 b0 3d 	call	0x7b60	; 0x7b60 <__umulhisi3>
    72b0:	96 95       	lsr	r25
    72b2:	87 95       	ror	r24
    72b4:	96 95       	lsr	r25
    72b6:	87 95       	ror	r24
    72b8:	82 95       	swap	r24
    72ba:	92 95       	swap	r25
    72bc:	90 7f       	andi	r25, 0xF0	; 240
    72be:	98 27       	eor	r25, r24
    72c0:	80 7f       	andi	r24, 0xF0	; 240
    72c2:	98 27       	eor	r25, r24
    72c4:	9a 83       	std	Y+2, r25	; 0x02
    72c6:	89 83       	std	Y+1, r24	; 0x01
    72c8:	00 e0       	ldi	r16, 0x00	; 0
    72ca:	10 e0       	ldi	r17, 0x00	; 0
    72cc:	04 c0       	rjmp	.+8      	; 0x72d6 <delay_us+0x4a>
    72ce:	c8 01       	movw	r24, r16
    72d0:	8c 01       	movw	r16, r24
    72d2:	0f 5f       	subi	r16, 0xFF	; 255
    72d4:	1f 4f       	sbci	r17, 0xFF	; 255
    72d6:	89 81       	ldd	r24, Y+1	; 0x01
    72d8:	9a 81       	ldd	r25, Y+2	; 0x02
    72da:	08 17       	cp	r16, r24
    72dc:	19 07       	cpc	r17, r25
    72de:	b8 f3       	brcs	.-18     	; 0x72ce <delay_us+0x42>
    72e0:	00 00       	nop
    72e2:	0f 90       	pop	r0
    72e4:	0f 90       	pop	r0
    72e6:	0f 90       	pop	r0
    72e8:	0f 90       	pop	r0
    72ea:	df 91       	pop	r29
    72ec:	cf 91       	pop	r28
    72ee:	1f 91       	pop	r17
    72f0:	0f 91       	pop	r16
    72f2:	08 95       	ret

000072f4 <timerAttach>:
    72f4:	cf 93       	push	r28
    72f6:	df 93       	push	r29
    72f8:	00 d0       	rcall	.+0      	; 0x72fa <timerAttach+0x6>
    72fa:	1f 92       	push	r1
    72fc:	cd b7       	in	r28, 0x3d	; 61
    72fe:	de b7       	in	r29, 0x3e	; 62
    7300:	89 83       	std	Y+1, r24	; 0x01
    7302:	7b 83       	std	Y+3, r23	; 0x03
    7304:	6a 83       	std	Y+2, r22	; 0x02
    7306:	89 81       	ldd	r24, Y+1	; 0x01
    7308:	88 30       	cpi	r24, 0x08	; 8
    730a:	60 f4       	brcc	.+24     	; 0x7324 <timerAttach+0x30>
    730c:	89 81       	ldd	r24, Y+1	; 0x01
    730e:	88 2f       	mov	r24, r24
    7310:	90 e0       	ldi	r25, 0x00	; 0
    7312:	88 0f       	add	r24, r24
    7314:	99 1f       	adc	r25, r25
    7316:	85 56       	subi	r24, 0x65	; 101
    7318:	9e 4f       	sbci	r25, 0xFE	; 254
    731a:	2a 81       	ldd	r18, Y+2	; 0x02
    731c:	3b 81       	ldd	r19, Y+3	; 0x03
    731e:	fc 01       	movw	r30, r24
    7320:	31 83       	std	Z+1, r19	; 0x01
    7322:	20 83       	st	Z, r18
    7324:	00 00       	nop
    7326:	0f 90       	pop	r0
    7328:	0f 90       	pop	r0
    732a:	0f 90       	pop	r0
    732c:	df 91       	pop	r29
    732e:	cf 91       	pop	r28
    7330:	08 95       	ret

00007332 <__vector_11>:

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect)
{
    7332:	1f 92       	push	r1
    7334:	0f 92       	push	r0
    7336:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    733a:	0f 92       	push	r0
    733c:	11 24       	eor	r1, r1
    733e:	2f 93       	push	r18
    7340:	3f 93       	push	r19
    7342:	4f 93       	push	r20
    7344:	5f 93       	push	r21
    7346:	6f 93       	push	r22
    7348:	7f 93       	push	r23
    734a:	8f 93       	push	r24
    734c:	9f 93       	push	r25
    734e:	af 93       	push	r26
    7350:	bf 93       	push	r27
    7352:	ef 93       	push	r30
    7354:	ff 93       	push	r31
    7356:	cf 93       	push	r28
    7358:	df 93       	push	r29
    735a:	cd b7       	in	r28, 0x3d	; 61
    735c:	de b7       	in	r29, 0x3e	; 62
	Timer0Reg0++;			// increment low-order counter
    735e:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <Timer0Reg0>
    7362:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <Timer0Reg0+0x1>
    7366:	a0 91 69 04 	lds	r26, 0x0469	; 0x800469 <Timer0Reg0+0x2>
    736a:	b0 91 6a 04 	lds	r27, 0x046A	; 0x80046a <Timer0Reg0+0x3>
    736e:	01 96       	adiw	r24, 0x01	; 1
    7370:	a1 1d       	adc	r26, r1
    7372:	b1 1d       	adc	r27, r1
    7374:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <Timer0Reg0>
    7378:	90 93 68 04 	sts	0x0468, r25	; 0x800468 <Timer0Reg0+0x1>
    737c:	a0 93 69 04 	sts	0x0469, r26	; 0x800469 <Timer0Reg0+0x2>
    7380:	b0 93 6a 04 	sts	0x046A, r27	; 0x80046a <Timer0Reg0+0x3>

	// increment pause counter
	TimerPauseReg++;
    7384:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <TimerPauseReg>
    7388:	90 91 6c 04 	lds	r25, 0x046C	; 0x80046c <TimerPauseReg+0x1>
    738c:	a0 91 6d 04 	lds	r26, 0x046D	; 0x80046d <TimerPauseReg+0x2>
    7390:	b0 91 6e 04 	lds	r27, 0x046E	; 0x80046e <TimerPauseReg+0x3>
    7394:	01 96       	adiw	r24, 0x01	; 1
    7396:	a1 1d       	adc	r26, r1
    7398:	b1 1d       	adc	r27, r1
    739a:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <TimerPauseReg>
    739e:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <TimerPauseReg+0x1>
    73a2:	a0 93 6d 04 	sts	0x046D, r26	; 0x80046d <TimerPauseReg+0x2>
    73a6:	b0 93 6e 04 	sts	0x046E, r27	; 0x80046e <TimerPauseReg+0x3>

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
    73aa:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <TimerIntFunc>
    73ae:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <TimerIntFunc+0x1>
    73b2:	89 2b       	or	r24, r25
    73b4:	31 f0       	breq	.+12     	; 0x73c2 <__vector_11+0x90>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
    73b6:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <TimerIntFunc>
    73ba:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <TimerIntFunc+0x1>
    73be:	fc 01       	movw	r30, r24
    73c0:	09 95       	icall
}
    73c2:	00 00       	nop
    73c4:	df 91       	pop	r29
    73c6:	cf 91       	pop	r28
    73c8:	ff 91       	pop	r31
    73ca:	ef 91       	pop	r30
    73cc:	bf 91       	pop	r27
    73ce:	af 91       	pop	r26
    73d0:	9f 91       	pop	r25
    73d2:	8f 91       	pop	r24
    73d4:	7f 91       	pop	r23
    73d6:	6f 91       	pop	r22
    73d8:	5f 91       	pop	r21
    73da:	4f 91       	pop	r20
    73dc:	3f 91       	pop	r19
    73de:	2f 91       	pop	r18
    73e0:	0f 90       	pop	r0
    73e2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    73e6:	0f 90       	pop	r0
    73e8:	1f 90       	pop	r1
    73ea:	18 95       	reti

000073ec <__vector_9>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect)
{
    73ec:	1f 92       	push	r1
    73ee:	0f 92       	push	r0
    73f0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    73f4:	0f 92       	push	r0
    73f6:	11 24       	eor	r1, r1
    73f8:	2f 93       	push	r18
    73fa:	3f 93       	push	r19
    73fc:	4f 93       	push	r20
    73fe:	5f 93       	push	r21
    7400:	6f 93       	push	r22
    7402:	7f 93       	push	r23
    7404:	8f 93       	push	r24
    7406:	9f 93       	push	r25
    7408:	af 93       	push	r26
    740a:	bf 93       	push	r27
    740c:	ef 93       	push	r30
    740e:	ff 93       	push	r31
    7410:	cf 93       	push	r28
    7412:	df 93       	push	r29
    7414:	cd b7       	in	r28, 0x3d	; 61
    7416:	de b7       	in	r29, 0x3e	; 62
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
    7418:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <TimerIntFunc+0x2>
    741c:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <TimerIntFunc+0x3>
    7420:	89 2b       	or	r24, r25
    7422:	31 f0       	breq	.+12     	; 0x7430 <__vector_9+0x44>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
    7424:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <TimerIntFunc+0x2>
    7428:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <TimerIntFunc+0x3>
    742c:	fc 01       	movw	r30, r24
    742e:	09 95       	icall
}
    7430:	00 00       	nop
    7432:	df 91       	pop	r29
    7434:	cf 91       	pop	r28
    7436:	ff 91       	pop	r31
    7438:	ef 91       	pop	r30
    743a:	bf 91       	pop	r27
    743c:	af 91       	pop	r26
    743e:	9f 91       	pop	r25
    7440:	8f 91       	pop	r24
    7442:	7f 91       	pop	r23
    7444:	6f 91       	pop	r22
    7446:	5f 91       	pop	r21
    7448:	4f 91       	pop	r20
    744a:	3f 91       	pop	r19
    744c:	2f 91       	pop	r18
    744e:	0f 90       	pop	r0
    7450:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    7454:	0f 90       	pop	r0
    7456:	1f 90       	pop	r1
    7458:	18 95       	reti

0000745a <__vector_5>:

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_OVF_vect)
{
    745a:	1f 92       	push	r1
    745c:	0f 92       	push	r0
    745e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    7462:	0f 92       	push	r0
    7464:	11 24       	eor	r1, r1
    7466:	2f 93       	push	r18
    7468:	3f 93       	push	r19
    746a:	4f 93       	push	r20
    746c:	5f 93       	push	r21
    746e:	6f 93       	push	r22
    7470:	7f 93       	push	r23
    7472:	8f 93       	push	r24
    7474:	9f 93       	push	r25
    7476:	af 93       	push	r26
    7478:	bf 93       	push	r27
    747a:	ef 93       	push	r30
    747c:	ff 93       	push	r31
    747e:	cf 93       	push	r28
    7480:	df 93       	push	r29
    7482:	cd b7       	in	r28, 0x3d	; 61
    7484:	de b7       	in	r29, 0x3e	; 62
	Timer2Reg0++;			// increment low-order counter
    7486:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <Timer2Reg0>
    748a:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <Timer2Reg0+0x1>
    748e:	a0 91 71 04 	lds	r26, 0x0471	; 0x800471 <Timer2Reg0+0x2>
    7492:	b0 91 72 04 	lds	r27, 0x0472	; 0x800472 <Timer2Reg0+0x3>
    7496:	01 96       	adiw	r24, 0x01	; 1
    7498:	a1 1d       	adc	r26, r1
    749a:	b1 1d       	adc	r27, r1
    749c:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Timer2Reg0>
    74a0:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <Timer2Reg0+0x1>
    74a4:	a0 93 71 04 	sts	0x0471, r26	; 0x800471 <Timer2Reg0+0x2>
    74a8:	b0 93 72 04 	sts	0x0472, r27	; 0x800472 <Timer2Reg0+0x3>

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
    74ac:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <TimerIntFunc+0xa>
    74b0:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <TimerIntFunc+0xb>
    74b4:	89 2b       	or	r24, r25
    74b6:	31 f0       	breq	.+12     	; 0x74c4 <__vector_5+0x6a>
		TimerIntFunc[TIMER2OVERFLOW_INT]();
    74b8:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <TimerIntFunc+0xa>
    74bc:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <TimerIntFunc+0xb>
    74c0:	fc 01       	movw	r30, r24
    74c2:	09 95       	icall
}
    74c4:	00 00       	nop
    74c6:	df 91       	pop	r29
    74c8:	cf 91       	pop	r28
    74ca:	ff 91       	pop	r31
    74cc:	ef 91       	pop	r30
    74ce:	bf 91       	pop	r27
    74d0:	af 91       	pop	r26
    74d2:	9f 91       	pop	r25
    74d4:	8f 91       	pop	r24
    74d6:	7f 91       	pop	r23
    74d8:	6f 91       	pop	r22
    74da:	5f 91       	pop	r21
    74dc:	4f 91       	pop	r20
    74de:	3f 91       	pop	r19
    74e0:	2f 91       	pop	r18
    74e2:	0f 90       	pop	r0
    74e4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    74e8:	0f 90       	pop	r0
    74ea:	1f 90       	pop	r1
    74ec:	18 95       	reti

000074ee <__vector_10>:

#ifdef OCR0
// include support for Output Compare 0 for new AVR processors that support it
//! Interrupt handler for OutputCompare0 match (OC0) interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_COMP_vect)
{
    74ee:	1f 92       	push	r1
    74f0:	0f 92       	push	r0
    74f2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    74f6:	0f 92       	push	r0
    74f8:	11 24       	eor	r1, r1
    74fa:	2f 93       	push	r18
    74fc:	3f 93       	push	r19
    74fe:	4f 93       	push	r20
    7500:	5f 93       	push	r21
    7502:	6f 93       	push	r22
    7504:	7f 93       	push	r23
    7506:	8f 93       	push	r24
    7508:	9f 93       	push	r25
    750a:	af 93       	push	r26
    750c:	bf 93       	push	r27
    750e:	ef 93       	push	r30
    7510:	ff 93       	push	r31
    7512:	cf 93       	push	r28
    7514:	df 93       	push	r29
    7516:	cd b7       	in	r28, 0x3d	; 61
    7518:	de b7       	in	r29, 0x3e	; 62
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER0OUTCOMPARE_INT])
    751a:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <TimerIntFunc+0xe>
    751e:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <TimerIntFunc+0xf>
    7522:	89 2b       	or	r24, r25
    7524:	31 f0       	breq	.+12     	; 0x7532 <__vector_10+0x44>
		TimerIntFunc[TIMER0OUTCOMPARE_INT]();
    7526:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <TimerIntFunc+0xe>
    752a:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <TimerIntFunc+0xf>
    752e:	fc 01       	movw	r30, r24
    7530:	09 95       	icall
}
    7532:	00 00       	nop
    7534:	df 91       	pop	r29
    7536:	cf 91       	pop	r28
    7538:	ff 91       	pop	r31
    753a:	ef 91       	pop	r30
    753c:	bf 91       	pop	r27
    753e:	af 91       	pop	r26
    7540:	9f 91       	pop	r25
    7542:	8f 91       	pop	r24
    7544:	7f 91       	pop	r23
    7546:	6f 91       	pop	r22
    7548:	5f 91       	pop	r21
    754a:	4f 91       	pop	r20
    754c:	3f 91       	pop	r19
    754e:	2f 91       	pop	r18
    7550:	0f 90       	pop	r0
    7552:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    7556:	0f 90       	pop	r0
    7558:	1f 90       	pop	r1
    755a:	18 95       	reti

0000755c <__vector_7>:
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect)
{
    755c:	1f 92       	push	r1
    755e:	0f 92       	push	r0
    7560:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    7564:	0f 92       	push	r0
    7566:	11 24       	eor	r1, r1
    7568:	2f 93       	push	r18
    756a:	3f 93       	push	r19
    756c:	4f 93       	push	r20
    756e:	5f 93       	push	r21
    7570:	6f 93       	push	r22
    7572:	7f 93       	push	r23
    7574:	8f 93       	push	r24
    7576:	9f 93       	push	r25
    7578:	af 93       	push	r26
    757a:	bf 93       	push	r27
    757c:	ef 93       	push	r30
    757e:	ff 93       	push	r31
    7580:	cf 93       	push	r28
    7582:	df 93       	push	r29
    7584:	cd b7       	in	r28, 0x3d	; 61
    7586:	de b7       	in	r29, 0x3e	; 62
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
    7588:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <TimerIntFunc+0x4>
    758c:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <TimerIntFunc+0x5>
    7590:	89 2b       	or	r24, r25
    7592:	31 f0       	breq	.+12     	; 0x75a0 <__vector_7+0x44>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
    7594:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <TimerIntFunc+0x4>
    7598:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <TimerIntFunc+0x5>
    759c:	fc 01       	movw	r30, r24
    759e:	09 95       	icall
}
    75a0:	00 00       	nop
    75a2:	df 91       	pop	r29
    75a4:	cf 91       	pop	r28
    75a6:	ff 91       	pop	r31
    75a8:	ef 91       	pop	r30
    75aa:	bf 91       	pop	r27
    75ac:	af 91       	pop	r26
    75ae:	9f 91       	pop	r25
    75b0:	8f 91       	pop	r24
    75b2:	7f 91       	pop	r23
    75b4:	6f 91       	pop	r22
    75b6:	5f 91       	pop	r21
    75b8:	4f 91       	pop	r20
    75ba:	3f 91       	pop	r19
    75bc:	2f 91       	pop	r18
    75be:	0f 90       	pop	r0
    75c0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    75c4:	0f 90       	pop	r0
    75c6:	1f 90       	pop	r1
    75c8:	18 95       	reti

000075ca <__vector_8>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect)
{
    75ca:	1f 92       	push	r1
    75cc:	0f 92       	push	r0
    75ce:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    75d2:	0f 92       	push	r0
    75d4:	11 24       	eor	r1, r1
    75d6:	2f 93       	push	r18
    75d8:	3f 93       	push	r19
    75da:	4f 93       	push	r20
    75dc:	5f 93       	push	r21
    75de:	6f 93       	push	r22
    75e0:	7f 93       	push	r23
    75e2:	8f 93       	push	r24
    75e4:	9f 93       	push	r25
    75e6:	af 93       	push	r26
    75e8:	bf 93       	push	r27
    75ea:	ef 93       	push	r30
    75ec:	ff 93       	push	r31
    75ee:	cf 93       	push	r28
    75f0:	df 93       	push	r29
    75f2:	cd b7       	in	r28, 0x3d	; 61
    75f4:	de b7       	in	r29, 0x3e	; 62
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
    75f6:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <TimerIntFunc+0x6>
    75fa:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <TimerIntFunc+0x7>
    75fe:	89 2b       	or	r24, r25
    7600:	31 f0       	breq	.+12     	; 0x760e <__vector_8+0x44>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
    7602:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <TimerIntFunc+0x6>
    7606:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <TimerIntFunc+0x7>
    760a:	fc 01       	movw	r30, r24
    760c:	09 95       	icall
}
    760e:	00 00       	nop
    7610:	df 91       	pop	r29
    7612:	cf 91       	pop	r28
    7614:	ff 91       	pop	r31
    7616:	ef 91       	pop	r30
    7618:	bf 91       	pop	r27
    761a:	af 91       	pop	r26
    761c:	9f 91       	pop	r25
    761e:	8f 91       	pop	r24
    7620:	7f 91       	pop	r23
    7622:	6f 91       	pop	r22
    7624:	5f 91       	pop	r21
    7626:	4f 91       	pop	r20
    7628:	3f 91       	pop	r19
    762a:	2f 91       	pop	r18
    762c:	0f 90       	pop	r0
    762e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    7632:	0f 90       	pop	r0
    7634:	1f 90       	pop	r1
    7636:	18 95       	reti

00007638 <__vector_6>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect)
{
    7638:	1f 92       	push	r1
    763a:	0f 92       	push	r0
    763c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    7640:	0f 92       	push	r0
    7642:	11 24       	eor	r1, r1
    7644:	2f 93       	push	r18
    7646:	3f 93       	push	r19
    7648:	4f 93       	push	r20
    764a:	5f 93       	push	r21
    764c:	6f 93       	push	r22
    764e:	7f 93       	push	r23
    7650:	8f 93       	push	r24
    7652:	9f 93       	push	r25
    7654:	af 93       	push	r26
    7656:	bf 93       	push	r27
    7658:	ef 93       	push	r30
    765a:	ff 93       	push	r31
    765c:	cf 93       	push	r28
    765e:	df 93       	push	r29
    7660:	cd b7       	in	r28, 0x3d	; 61
    7662:	de b7       	in	r29, 0x3e	; 62
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
    7664:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <TimerIntFunc+0x8>
    7668:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <TimerIntFunc+0x9>
    766c:	89 2b       	or	r24, r25
    766e:	31 f0       	breq	.+12     	; 0x767c <__vector_6+0x44>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
    7670:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <TimerIntFunc+0x8>
    7674:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <TimerIntFunc+0x9>
    7678:	fc 01       	movw	r30, r24
    767a:	09 95       	icall
}
    767c:	00 00       	nop
    767e:	df 91       	pop	r29
    7680:	cf 91       	pop	r28
    7682:	ff 91       	pop	r31
    7684:	ef 91       	pop	r30
    7686:	bf 91       	pop	r27
    7688:	af 91       	pop	r26
    768a:	9f 91       	pop	r25
    768c:	8f 91       	pop	r24
    768e:	7f 91       	pop	r23
    7690:	6f 91       	pop	r22
    7692:	5f 91       	pop	r21
    7694:	4f 91       	pop	r20
    7696:	3f 91       	pop	r19
    7698:	2f 91       	pop	r18
    769a:	0f 90       	pop	r0
    769c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    76a0:	0f 90       	pop	r0
    76a2:	1f 90       	pop	r1
    76a4:	18 95       	reti

000076a6 <__vector_4>:

//! Interrupt handler for OutputCompare2 match (OC2) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMP_vect)
{
    76a6:	1f 92       	push	r1
    76a8:	0f 92       	push	r0
    76aa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    76ae:	0f 92       	push	r0
    76b0:	11 24       	eor	r1, r1
    76b2:	2f 93       	push	r18
    76b4:	3f 93       	push	r19
    76b6:	4f 93       	push	r20
    76b8:	5f 93       	push	r21
    76ba:	6f 93       	push	r22
    76bc:	7f 93       	push	r23
    76be:	8f 93       	push	r24
    76c0:	9f 93       	push	r25
    76c2:	af 93       	push	r26
    76c4:	bf 93       	push	r27
    76c6:	ef 93       	push	r30
    76c8:	ff 93       	push	r31
    76ca:	cf 93       	push	r28
    76cc:	df 93       	push	r29
    76ce:	cd b7       	in	r28, 0x3d	; 61
    76d0:	de b7       	in	r29, 0x3e	; 62
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
    76d2:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <TimerIntFunc+0xc>
    76d6:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <TimerIntFunc+0xd>
    76da:	89 2b       	or	r24, r25
    76dc:	31 f0       	breq	.+12     	; 0x76ea <__vector_4+0x44>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
    76de:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <TimerIntFunc+0xc>
    76e2:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <TimerIntFunc+0xd>
    76e6:	fc 01       	movw	r30, r24
    76e8:	09 95       	icall
}
    76ea:	00 00       	nop
    76ec:	df 91       	pop	r29
    76ee:	cf 91       	pop	r28
    76f0:	ff 91       	pop	r31
    76f2:	ef 91       	pop	r30
    76f4:	bf 91       	pop	r27
    76f6:	af 91       	pop	r26
    76f8:	9f 91       	pop	r25
    76fa:	8f 91       	pop	r24
    76fc:	7f 91       	pop	r23
    76fe:	6f 91       	pop	r22
    7700:	5f 91       	pop	r21
    7702:	4f 91       	pop	r20
    7704:	3f 91       	pop	r19
    7706:	2f 91       	pop	r18
    7708:	0f 90       	pop	r0
    770a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    770e:	0f 90       	pop	r0
    7710:	1f 90       	pop	r1
    7712:	18 95       	reti

00007714 <uartInit>:
	else
	{
		// return failure
		return FALSE;
	}
}
    7714:	cf 93       	push	r28
    7716:	df 93       	push	r29
    7718:	cd b7       	in	r28, 0x3d	; 61
    771a:	de b7       	in	r29, 0x3e	; 62
    771c:	0e 94 b2 3b 	call	0x7764	; 0x7764 <uartInitBuffers>
    7720:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <UartRxFunc+0x1>
    7724:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <UartRxFunc>
    7728:	8a e2       	ldi	r24, 0x2A	; 42
    772a:	90 e0       	ldi	r25, 0x00	; 0
    772c:	28 ed       	ldi	r18, 0xD8	; 216
    772e:	fc 01       	movw	r30, r24
    7730:	20 83       	st	Z, r18
    7732:	80 e4       	ldi	r24, 0x40	; 64
    7734:	90 e0       	ldi	r25, 0x00	; 0
    7736:	26 e8       	ldi	r18, 0x86	; 134
    7738:	fc 01       	movw	r30, r24
    773a:	20 83       	st	Z, r18
    773c:	60 e8       	ldi	r22, 0x80	; 128
    773e:	75 e2       	ldi	r23, 0x25	; 37
    7740:	80 e0       	ldi	r24, 0x00	; 0
    7742:	90 e0       	ldi	r25, 0x00	; 0
    7744:	0e 94 dd 3b 	call	0x77ba	; 0x77ba <uartSetBaudRate>
    7748:	81 e0       	ldi	r24, 0x01	; 1
    774a:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <uartReadyTx>
    774e:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <uartBufferedTx>
    7752:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <uartRxOverflow+0x1>
    7756:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <uartRxOverflow>
    775a:	78 94       	sei
    775c:	00 00       	nop
    775e:	df 91       	pop	r29
    7760:	cf 91       	pop	r28
    7762:	08 95       	ret

00007764 <uartInitBuffers>:
    7764:	cf 93       	push	r28
    7766:	df 93       	push	r29
    7768:	cd b7       	in	r28, 0x3d	; 61
    776a:	de b7       	in	r29, 0x3e	; 62
    776c:	40 e4       	ldi	r20, 0x40	; 64
    776e:	50 e0       	ldi	r21, 0x00	; 0
    7770:	6b ea       	ldi	r22, 0xAB	; 171
    7772:	71 e0       	ldi	r23, 0x01	; 1
    7774:	84 e7       	ldi	r24, 0x74	; 116
    7776:	94 e0       	ldi	r25, 0x04	; 4
    7778:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <bufferInit>
    777c:	40 e4       	ldi	r20, 0x40	; 64
    777e:	50 e0       	ldi	r21, 0x00	; 0
    7780:	6b ee       	ldi	r22, 0xEB	; 235
    7782:	71 e0       	ldi	r23, 0x01	; 1
    7784:	8e e7       	ldi	r24, 0x7E	; 126
    7786:	94 e0       	ldi	r25, 0x04	; 4
    7788:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <bufferInit>
    778c:	00 00       	nop
    778e:	df 91       	pop	r29
    7790:	cf 91       	pop	r28
    7792:	08 95       	ret

00007794 <uartSetRxHandler>:
    7794:	cf 93       	push	r28
    7796:	df 93       	push	r29
    7798:	00 d0       	rcall	.+0      	; 0x779a <uartSetRxHandler+0x6>
    779a:	cd b7       	in	r28, 0x3d	; 61
    779c:	de b7       	in	r29, 0x3e	; 62
    779e:	9a 83       	std	Y+2, r25	; 0x02
    77a0:	89 83       	std	Y+1, r24	; 0x01
    77a2:	89 81       	ldd	r24, Y+1	; 0x01
    77a4:	9a 81       	ldd	r25, Y+2	; 0x02
    77a6:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <UartRxFunc+0x1>
    77aa:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <UartRxFunc>
    77ae:	00 00       	nop
    77b0:	0f 90       	pop	r0
    77b2:	0f 90       	pop	r0
    77b4:	df 91       	pop	r29
    77b6:	cf 91       	pop	r28
    77b8:	08 95       	ret

000077ba <uartSetBaudRate>:
    77ba:	ef 92       	push	r14
    77bc:	ff 92       	push	r15
    77be:	0f 93       	push	r16
    77c0:	1f 93       	push	r17
    77c2:	cf 93       	push	r28
    77c4:	df 93       	push	r29
    77c6:	00 d0       	rcall	.+0      	; 0x77c8 <uartSetBaudRate+0xe>
    77c8:	00 d0       	rcall	.+0      	; 0x77ca <uartSetBaudRate+0x10>
    77ca:	00 d0       	rcall	.+0      	; 0x77cc <uartSetBaudRate+0x12>
    77cc:	cd b7       	in	r28, 0x3d	; 61
    77ce:	de b7       	in	r29, 0x3e	; 62
    77d0:	6b 83       	std	Y+3, r22	; 0x03
    77d2:	7c 83       	std	Y+4, r23	; 0x04
    77d4:	8d 83       	std	Y+5, r24	; 0x05
    77d6:	9e 83       	std	Y+6, r25	; 0x06
    77d8:	8b 81       	ldd	r24, Y+3	; 0x03
    77da:	9c 81       	ldd	r25, Y+4	; 0x04
    77dc:	ad 81       	ldd	r26, Y+5	; 0x05
    77de:	be 81       	ldd	r27, Y+6	; 0x06
    77e0:	80 58       	subi	r24, 0x80	; 128
    77e2:	9b 47       	sbci	r25, 0x7B	; 123
    77e4:	a1 4e       	sbci	r26, 0xE1	; 225
    77e6:	bf 4f       	sbci	r27, 0xFF	; 255
    77e8:	88 0f       	add	r24, r24
    77ea:	99 1f       	adc	r25, r25
    77ec:	aa 1f       	adc	r26, r26
    77ee:	bb 1f       	adc	r27, r27
    77f0:	88 0f       	add	r24, r24
    77f2:	99 1f       	adc	r25, r25
    77f4:	aa 1f       	adc	r26, r26
    77f6:	bb 1f       	adc	r27, r27
    77f8:	88 0f       	add	r24, r24
    77fa:	99 1f       	adc	r25, r25
    77fc:	aa 1f       	adc	r26, r26
    77fe:	bb 1f       	adc	r27, r27
    7800:	7c 01       	movw	r14, r24
    7802:	8d 01       	movw	r16, r26
    7804:	8b 81       	ldd	r24, Y+3	; 0x03
    7806:	9c 81       	ldd	r25, Y+4	; 0x04
    7808:	ad 81       	ldd	r26, Y+5	; 0x05
    780a:	be 81       	ldd	r27, Y+6	; 0x06
    780c:	88 0f       	add	r24, r24
    780e:	99 1f       	adc	r25, r25
    7810:	aa 1f       	adc	r26, r26
    7812:	bb 1f       	adc	r27, r27
    7814:	88 0f       	add	r24, r24
    7816:	99 1f       	adc	r25, r25
    7818:	aa 1f       	adc	r26, r26
    781a:	bb 1f       	adc	r27, r27
    781c:	88 0f       	add	r24, r24
    781e:	99 1f       	adc	r25, r25
    7820:	aa 1f       	adc	r26, r26
    7822:	bb 1f       	adc	r27, r27
    7824:	88 0f       	add	r24, r24
    7826:	99 1f       	adc	r25, r25
    7828:	aa 1f       	adc	r26, r26
    782a:	bb 1f       	adc	r27, r27
    782c:	9c 01       	movw	r18, r24
    782e:	ad 01       	movw	r20, r26
    7830:	c8 01       	movw	r24, r16
    7832:	b7 01       	movw	r22, r14
    7834:	0e 94 69 3d 	call	0x7ad2	; 0x7ad2 <__udivmodsi4>
    7838:	da 01       	movw	r26, r20
    783a:	c9 01       	movw	r24, r18
    783c:	01 97       	sbiw	r24, 0x01	; 1
    783e:	9a 83       	std	Y+2, r25	; 0x02
    7840:	89 83       	std	Y+1, r24	; 0x01
    7842:	89 e2       	ldi	r24, 0x29	; 41
    7844:	90 e0       	ldi	r25, 0x00	; 0
    7846:	29 81       	ldd	r18, Y+1	; 0x01
    7848:	fc 01       	movw	r30, r24
    784a:	20 83       	st	Z, r18
    784c:	80 e4       	ldi	r24, 0x40	; 64
    784e:	90 e0       	ldi	r25, 0x00	; 0
    7850:	29 81       	ldd	r18, Y+1	; 0x01
    7852:	3a 81       	ldd	r19, Y+2	; 0x02
    7854:	23 2f       	mov	r18, r19
    7856:	33 27       	eor	r19, r19
    7858:	fc 01       	movw	r30, r24
    785a:	20 83       	st	Z, r18
    785c:	00 00       	nop
    785e:	26 96       	adiw	r28, 0x06	; 6
    7860:	0f b6       	in	r0, 0x3f	; 63
    7862:	f8 94       	cli
    7864:	de bf       	out	0x3e, r29	; 62
    7866:	0f be       	out	0x3f, r0	; 63
    7868:	cd bf       	out	0x3d, r28	; 61
    786a:	df 91       	pop	r29
    786c:	cf 91       	pop	r28
    786e:	1f 91       	pop	r17
    7870:	0f 91       	pop	r16
    7872:	ff 90       	pop	r15
    7874:	ef 90       	pop	r14
    7876:	08 95       	ret

00007878 <uartSendByte>:
    7878:	cf 93       	push	r28
    787a:	df 93       	push	r29
    787c:	1f 92       	push	r1
    787e:	cd b7       	in	r28, 0x3d	; 61
    7880:	de b7       	in	r29, 0x3e	; 62
    7882:	89 83       	std	Y+1, r24	; 0x01
    7884:	00 00       	nop
    7886:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <uartReadyTx>
    788a:	88 23       	and	r24, r24
    788c:	e1 f3       	breq	.-8      	; 0x7886 <uartSendByte+0xe>
    788e:	8c e2       	ldi	r24, 0x2C	; 44
    7890:	90 e0       	ldi	r25, 0x00	; 0
    7892:	29 81       	ldd	r18, Y+1	; 0x01
    7894:	fc 01       	movw	r30, r24
    7896:	20 83       	st	Z, r18
    7898:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <uartReadyTx>
    789c:	00 00       	nop
    789e:	0f 90       	pop	r0
    78a0:	df 91       	pop	r29
    78a2:	cf 91       	pop	r28
    78a4:	08 95       	ret

000078a6 <uartGetByte>:
    78a6:	cf 93       	push	r28
    78a8:	df 93       	push	r29
    78aa:	1f 92       	push	r1
    78ac:	cd b7       	in	r28, 0x3d	; 61
    78ae:	de b7       	in	r29, 0x3e	; 62
    78b0:	ce 01       	movw	r24, r28
    78b2:	01 96       	adiw	r24, 0x01	; 1
    78b4:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <uartReceiveByte>
    78b8:	88 23       	and	r24, r24
    78ba:	21 f0       	breq	.+8      	; 0x78c4 <uartGetByte+0x1e>
    78bc:	89 81       	ldd	r24, Y+1	; 0x01
    78be:	88 2f       	mov	r24, r24
    78c0:	90 e0       	ldi	r25, 0x00	; 0
    78c2:	02 c0       	rjmp	.+4      	; 0x78c8 <uartGetByte+0x22>
    78c4:	8f ef       	ldi	r24, 0xFF	; 255
    78c6:	9f ef       	ldi	r25, 0xFF	; 255
    78c8:	0f 90       	pop	r0
    78ca:	df 91       	pop	r29
    78cc:	cf 91       	pop	r28
    78ce:	08 95       	ret

000078d0 <uartReceiveByte>:
    78d0:	cf 93       	push	r28
    78d2:	df 93       	push	r29
    78d4:	00 d0       	rcall	.+0      	; 0x78d6 <uartReceiveByte+0x6>
    78d6:	cd b7       	in	r28, 0x3d	; 61
    78d8:	de b7       	in	r29, 0x3e	; 62
    78da:	9a 83       	std	Y+2, r25	; 0x02
    78dc:	89 83       	std	Y+1, r24	; 0x01
    78de:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <uartRxBuffer+0x2>
    78e2:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <uartRxBuffer+0x3>
    78e6:	89 2b       	or	r24, r25
    78e8:	99 f0       	breq	.+38     	; 0x7910 <uartReceiveByte+0x40>
    78ea:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <uartRxBuffer+0x4>
    78ee:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <uartRxBuffer+0x5>
    78f2:	89 2b       	or	r24, r25
    78f4:	59 f0       	breq	.+22     	; 0x790c <uartReceiveByte+0x3c>
    78f6:	84 e7       	ldi	r24, 0x74	; 116
    78f8:	94 e0       	ldi	r25, 0x04	; 4
    78fa:	0e 94 11 02 	call	0x422	; 0x422 <bufferGetFromFront>
    78fe:	28 2f       	mov	r18, r24
    7900:	89 81       	ldd	r24, Y+1	; 0x01
    7902:	9a 81       	ldd	r25, Y+2	; 0x02
    7904:	fc 01       	movw	r30, r24
    7906:	20 83       	st	Z, r18
    7908:	81 e0       	ldi	r24, 0x01	; 1
    790a:	03 c0       	rjmp	.+6      	; 0x7912 <uartReceiveByte+0x42>
    790c:	80 e0       	ldi	r24, 0x00	; 0
    790e:	01 c0       	rjmp	.+2      	; 0x7912 <uartReceiveByte+0x42>
    7910:	80 e0       	ldi	r24, 0x00	; 0
    7912:	0f 90       	pop	r0
    7914:	0f 90       	pop	r0
    7916:	df 91       	pop	r29
    7918:	cf 91       	pop	r28
    791a:	08 95       	ret

0000791c <uartFlushReceiveBuffer>:
    791c:	cf 93       	push	r28
    791e:	df 93       	push	r29
    7920:	cd b7       	in	r28, 0x3d	; 61
    7922:	de b7       	in	r29, 0x3e	; 62
    7924:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <uartRxBuffer+0x5>
    7928:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <uartRxBuffer+0x4>
    792c:	00 00       	nop
    792e:	df 91       	pop	r29
    7930:	cf 91       	pop	r28
    7932:	08 95       	ret

00007934 <uartReceiveBufferIsEmpty>:
    7934:	cf 93       	push	r28
    7936:	df 93       	push	r29
    7938:	cd b7       	in	r28, 0x3d	; 61
    793a:	de b7       	in	r29, 0x3e	; 62
    793c:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <uartRxBuffer+0x4>
    7940:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <uartRxBuffer+0x5>
    7944:	89 2b       	or	r24, r25
    7946:	11 f4       	brne	.+4      	; 0x794c <uartReceiveBufferIsEmpty+0x18>
    7948:	81 e0       	ldi	r24, 0x01	; 1
    794a:	01 c0       	rjmp	.+2      	; 0x794e <uartReceiveBufferIsEmpty+0x1a>
    794c:	80 e0       	ldi	r24, 0x00	; 0
    794e:	df 91       	pop	r29
    7950:	cf 91       	pop	r28
    7952:	08 95       	ret

00007954 <__vector_15>:

// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(USART_TXC_vect)
{
    7954:	1f 92       	push	r1
    7956:	0f 92       	push	r0
    7958:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    795c:	0f 92       	push	r0
    795e:	11 24       	eor	r1, r1
    7960:	0f 93       	push	r16
    7962:	1f 93       	push	r17
    7964:	2f 93       	push	r18
    7966:	3f 93       	push	r19
    7968:	4f 93       	push	r20
    796a:	5f 93       	push	r21
    796c:	6f 93       	push	r22
    796e:	7f 93       	push	r23
    7970:	8f 93       	push	r24
    7972:	9f 93       	push	r25
    7974:	af 93       	push	r26
    7976:	bf 93       	push	r27
    7978:	ef 93       	push	r30
    797a:	ff 93       	push	r31
    797c:	cf 93       	push	r28
    797e:	df 93       	push	r29
    7980:	cd b7       	in	r28, 0x3d	; 61
    7982:	de b7       	in	r29, 0x3e	; 62
	// check if buffered tx is enabled
	if(uartBufferedTx)
    7984:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <uartBufferedTx>
    7988:	88 23       	and	r24, r24
    798a:	a9 f0       	breq	.+42     	; 0x79b6 <__vector_15+0x62>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
    798c:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <uartTxBuffer+0x4>
    7990:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <uartTxBuffer+0x5>
    7994:	89 2b       	or	r24, r25
    7996:	49 f0       	breq	.+18     	; 0x79aa <__vector_15+0x56>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
    7998:	0c e2       	ldi	r16, 0x2C	; 44
    799a:	10 e0       	ldi	r17, 0x00	; 0
    799c:	8e e7       	ldi	r24, 0x7E	; 126
    799e:	94 e0       	ldi	r25, 0x04	; 4
    79a0:	0e 94 11 02 	call	0x422	; 0x422 <bufferGetFromFront>
    79a4:	f8 01       	movw	r30, r16
    79a6:	80 83       	st	Z, r24
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
	}
}
    79a8:	09 c0       	rjmp	.+18     	; 0x79bc <__vector_15+0x68>
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
    79aa:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <uartBufferedTx>
			// return to ready state
			uartReadyTx = TRUE;
    79ae:	81 e0       	ldi	r24, 0x01	; 1
    79b0:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <uartReadyTx>
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
	}
}
    79b4:	03 c0       	rjmp	.+6      	; 0x79bc <__vector_15+0x68>
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
    79b6:	81 e0       	ldi	r24, 0x01	; 1
    79b8:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <uartReadyTx>
	}
}
    79bc:	00 00       	nop
    79be:	df 91       	pop	r29
    79c0:	cf 91       	pop	r28
    79c2:	ff 91       	pop	r31
    79c4:	ef 91       	pop	r30
    79c6:	bf 91       	pop	r27
    79c8:	af 91       	pop	r26
    79ca:	9f 91       	pop	r25
    79cc:	8f 91       	pop	r24
    79ce:	7f 91       	pop	r23
    79d0:	6f 91       	pop	r22
    79d2:	5f 91       	pop	r21
    79d4:	4f 91       	pop	r20
    79d6:	3f 91       	pop	r19
    79d8:	2f 91       	pop	r18
    79da:	1f 91       	pop	r17
    79dc:	0f 91       	pop	r16
    79de:	0f 90       	pop	r0
    79e0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    79e4:	0f 90       	pop	r0
    79e6:	1f 90       	pop	r1
    79e8:	18 95       	reti

000079ea <__vector_13>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(USART_RXC_vect)
{
    79ea:	1f 92       	push	r1
    79ec:	0f 92       	push	r0
    79ee:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    79f2:	0f 92       	push	r0
    79f4:	11 24       	eor	r1, r1
    79f6:	2f 93       	push	r18
    79f8:	3f 93       	push	r19
    79fa:	4f 93       	push	r20
    79fc:	5f 93       	push	r21
    79fe:	6f 93       	push	r22
    7a00:	7f 93       	push	r23
    7a02:	8f 93       	push	r24
    7a04:	9f 93       	push	r25
    7a06:	af 93       	push	r26
    7a08:	bf 93       	push	r27
    7a0a:	ef 93       	push	r30
    7a0c:	ff 93       	push	r31
    7a0e:	cf 93       	push	r28
    7a10:	df 93       	push	r29
    7a12:	1f 92       	push	r1
    7a14:	cd b7       	in	r28, 0x3d	; 61
    7a16:	de b7       	in	r29, 0x3e	; 62
	u08 c;
	
	// get received char
	c = inb(UDR);
    7a18:	8c e2       	ldi	r24, 0x2C	; 44
    7a1a:	90 e0       	ldi	r25, 0x00	; 0
    7a1c:	fc 01       	movw	r30, r24
    7a1e:	80 81       	ld	r24, Z
    7a20:	89 83       	std	Y+1, r24	; 0x01
	
	// if there's a user function to handle this receive event
	if(UartRxFunc)
    7a22:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <UartRxFunc>
    7a26:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <UartRxFunc+0x1>
    7a2a:	89 2b       	or	r24, r25
    7a2c:	41 f0       	breq	.+16     	; 0x7a3e <__vector_13+0x54>
	{
		// call it and pass the received data
		UartRxFunc(c);
    7a2e:	20 91 2b 02 	lds	r18, 0x022B	; 0x80022b <UartRxFunc>
    7a32:	30 91 2c 02 	lds	r19, 0x022C	; 0x80022c <UartRxFunc+0x1>
    7a36:	89 81       	ldd	r24, Y+1	; 0x01
    7a38:	f9 01       	movw	r30, r18
    7a3a:	09 95       	icall
			// no space in buffer
			// count overflow
			uartRxOverflow++;
		}
	}
}
    7a3c:	10 c0       	rjmp	.+32     	; 0x7a5e <__vector_13+0x74>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
    7a3e:	69 81       	ldd	r22, Y+1	; 0x01
    7a40:	84 e7       	ldi	r24, 0x74	; 116
    7a42:	94 e0       	ldi	r25, 0x04	; 4
    7a44:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <bufferAddToEnd>
    7a48:	88 23       	and	r24, r24
    7a4a:	49 f4       	brne	.+18     	; 0x7a5e <__vector_13+0x74>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
    7a4c:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <uartRxOverflow>
    7a50:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <uartRxOverflow+0x1>
    7a54:	01 96       	adiw	r24, 0x01	; 1
    7a56:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <uartRxOverflow+0x1>
    7a5a:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <uartRxOverflow>
		}
	}
}
    7a5e:	00 00       	nop
    7a60:	0f 90       	pop	r0
    7a62:	df 91       	pop	r29
    7a64:	cf 91       	pop	r28
    7a66:	ff 91       	pop	r31
    7a68:	ef 91       	pop	r30
    7a6a:	bf 91       	pop	r27
    7a6c:	af 91       	pop	r26
    7a6e:	9f 91       	pop	r25
    7a70:	8f 91       	pop	r24
    7a72:	7f 91       	pop	r23
    7a74:	6f 91       	pop	r22
    7a76:	5f 91       	pop	r21
    7a78:	4f 91       	pop	r20
    7a7a:	3f 91       	pop	r19
    7a7c:	2f 91       	pop	r18
    7a7e:	0f 90       	pop	r0
    7a80:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    7a84:	0f 90       	pop	r0
    7a86:	1f 90       	pop	r1
    7a88:	18 95       	reti

00007a8a <__mulsi3>:
    7a8a:	db 01       	movw	r26, r22
    7a8c:	8f 93       	push	r24
    7a8e:	9f 93       	push	r25
    7a90:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <__muluhisi3>
    7a94:	bf 91       	pop	r27
    7a96:	af 91       	pop	r26
    7a98:	a2 9f       	mul	r26, r18
    7a9a:	80 0d       	add	r24, r0
    7a9c:	91 1d       	adc	r25, r1
    7a9e:	a3 9f       	mul	r26, r19
    7aa0:	90 0d       	add	r25, r0
    7aa2:	b2 9f       	mul	r27, r18
    7aa4:	90 0d       	add	r25, r0
    7aa6:	11 24       	eor	r1, r1
    7aa8:	08 95       	ret

00007aaa <__udivmodhi4>:
    7aaa:	aa 1b       	sub	r26, r26
    7aac:	bb 1b       	sub	r27, r27
    7aae:	51 e1       	ldi	r21, 0x11	; 17
    7ab0:	07 c0       	rjmp	.+14     	; 0x7ac0 <__udivmodhi4_ep>

00007ab2 <__udivmodhi4_loop>:
    7ab2:	aa 1f       	adc	r26, r26
    7ab4:	bb 1f       	adc	r27, r27
    7ab6:	a6 17       	cp	r26, r22
    7ab8:	b7 07       	cpc	r27, r23
    7aba:	10 f0       	brcs	.+4      	; 0x7ac0 <__udivmodhi4_ep>
    7abc:	a6 1b       	sub	r26, r22
    7abe:	b7 0b       	sbc	r27, r23

00007ac0 <__udivmodhi4_ep>:
    7ac0:	88 1f       	adc	r24, r24
    7ac2:	99 1f       	adc	r25, r25
    7ac4:	5a 95       	dec	r21
    7ac6:	a9 f7       	brne	.-22     	; 0x7ab2 <__udivmodhi4_loop>
    7ac8:	80 95       	com	r24
    7aca:	90 95       	com	r25
    7acc:	bc 01       	movw	r22, r24
    7ace:	cd 01       	movw	r24, r26
    7ad0:	08 95       	ret

00007ad2 <__udivmodsi4>:
    7ad2:	a1 e2       	ldi	r26, 0x21	; 33
    7ad4:	1a 2e       	mov	r1, r26
    7ad6:	aa 1b       	sub	r26, r26
    7ad8:	bb 1b       	sub	r27, r27
    7ada:	fd 01       	movw	r30, r26
    7adc:	0d c0       	rjmp	.+26     	; 0x7af8 <__udivmodsi4_ep>

00007ade <__udivmodsi4_loop>:
    7ade:	aa 1f       	adc	r26, r26
    7ae0:	bb 1f       	adc	r27, r27
    7ae2:	ee 1f       	adc	r30, r30
    7ae4:	ff 1f       	adc	r31, r31
    7ae6:	a2 17       	cp	r26, r18
    7ae8:	b3 07       	cpc	r27, r19
    7aea:	e4 07       	cpc	r30, r20
    7aec:	f5 07       	cpc	r31, r21
    7aee:	20 f0       	brcs	.+8      	; 0x7af8 <__udivmodsi4_ep>
    7af0:	a2 1b       	sub	r26, r18
    7af2:	b3 0b       	sbc	r27, r19
    7af4:	e4 0b       	sbc	r30, r20
    7af6:	f5 0b       	sbc	r31, r21

00007af8 <__udivmodsi4_ep>:
    7af8:	66 1f       	adc	r22, r22
    7afa:	77 1f       	adc	r23, r23
    7afc:	88 1f       	adc	r24, r24
    7afe:	99 1f       	adc	r25, r25
    7b00:	1a 94       	dec	r1
    7b02:	69 f7       	brne	.-38     	; 0x7ade <__udivmodsi4_loop>
    7b04:	60 95       	com	r22
    7b06:	70 95       	com	r23
    7b08:	80 95       	com	r24
    7b0a:	90 95       	com	r25
    7b0c:	9b 01       	movw	r18, r22
    7b0e:	ac 01       	movw	r20, r24
    7b10:	bd 01       	movw	r22, r26
    7b12:	cf 01       	movw	r24, r30
    7b14:	08 95       	ret

00007b16 <__divmodsi4>:
    7b16:	05 2e       	mov	r0, r21
    7b18:	97 fb       	bst	r25, 7
    7b1a:	1e f4       	brtc	.+6      	; 0x7b22 <__divmodsi4+0xc>
    7b1c:	00 94       	com	r0
    7b1e:	0e 94 a2 3d 	call	0x7b44	; 0x7b44 <__negsi2>
    7b22:	57 fd       	sbrc	r21, 7
    7b24:	07 d0       	rcall	.+14     	; 0x7b34 <__divmodsi4_neg2>
    7b26:	0e 94 69 3d 	call	0x7ad2	; 0x7ad2 <__udivmodsi4>
    7b2a:	07 fc       	sbrc	r0, 7
    7b2c:	03 d0       	rcall	.+6      	; 0x7b34 <__divmodsi4_neg2>
    7b2e:	4e f4       	brtc	.+18     	; 0x7b42 <__divmodsi4_exit>
    7b30:	0c 94 a2 3d 	jmp	0x7b44	; 0x7b44 <__negsi2>

00007b34 <__divmodsi4_neg2>:
    7b34:	50 95       	com	r21
    7b36:	40 95       	com	r20
    7b38:	30 95       	com	r19
    7b3a:	21 95       	neg	r18
    7b3c:	3f 4f       	sbci	r19, 0xFF	; 255
    7b3e:	4f 4f       	sbci	r20, 0xFF	; 255
    7b40:	5f 4f       	sbci	r21, 0xFF	; 255

00007b42 <__divmodsi4_exit>:
    7b42:	08 95       	ret

00007b44 <__negsi2>:
    7b44:	90 95       	com	r25
    7b46:	80 95       	com	r24
    7b48:	70 95       	com	r23
    7b4a:	61 95       	neg	r22
    7b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    7b4e:	8f 4f       	sbci	r24, 0xFF	; 255
    7b50:	9f 4f       	sbci	r25, 0xFF	; 255
    7b52:	08 95       	ret

00007b54 <__tablejump2__>:
    7b54:	ee 0f       	add	r30, r30
    7b56:	ff 1f       	adc	r31, r31
    7b58:	05 90       	lpm	r0, Z+
    7b5a:	f4 91       	lpm	r31, Z
    7b5c:	e0 2d       	mov	r30, r0
    7b5e:	09 94       	ijmp

00007b60 <__umulhisi3>:
    7b60:	a2 9f       	mul	r26, r18
    7b62:	b0 01       	movw	r22, r0
    7b64:	b3 9f       	mul	r27, r19
    7b66:	c0 01       	movw	r24, r0
    7b68:	a3 9f       	mul	r26, r19
    7b6a:	70 0d       	add	r23, r0
    7b6c:	81 1d       	adc	r24, r1
    7b6e:	11 24       	eor	r1, r1
    7b70:	91 1d       	adc	r25, r1
    7b72:	b2 9f       	mul	r27, r18
    7b74:	70 0d       	add	r23, r0
    7b76:	81 1d       	adc	r24, r1
    7b78:	11 24       	eor	r1, r1
    7b7a:	91 1d       	adc	r25, r1
    7b7c:	08 95       	ret

00007b7e <__muluhisi3>:
    7b7e:	0e 94 b0 3d 	call	0x7b60	; 0x7b60 <__umulhisi3>
    7b82:	a5 9f       	mul	r26, r21
    7b84:	90 0d       	add	r25, r0
    7b86:	b4 9f       	mul	r27, r20
    7b88:	90 0d       	add	r25, r0
    7b8a:	a4 9f       	mul	r26, r20
    7b8c:	80 0d       	add	r24, r0
    7b8e:	91 1d       	adc	r25, r1
    7b90:	11 24       	eor	r1, r1
    7b92:	08 95       	ret

00007b94 <memset>:
    7b94:	dc 01       	movw	r26, r24
    7b96:	01 c0       	rjmp	.+2      	; 0x7b9a <memset+0x6>
    7b98:	6d 93       	st	X+, r22
    7b9a:	41 50       	subi	r20, 0x01	; 1
    7b9c:	50 40       	sbci	r21, 0x00	; 0
    7b9e:	e0 f7       	brcc	.-8      	; 0x7b98 <memset+0x4>
    7ba0:	08 95       	ret

00007ba2 <strcmp>:
    7ba2:	fb 01       	movw	r30, r22
    7ba4:	dc 01       	movw	r26, r24
    7ba6:	8d 91       	ld	r24, X+
    7ba8:	01 90       	ld	r0, Z+
    7baa:	80 19       	sub	r24, r0
    7bac:	01 10       	cpse	r0, r1
    7bae:	d9 f3       	breq	.-10     	; 0x7ba6 <strcmp+0x4>
    7bb0:	99 0b       	sbc	r25, r25
    7bb2:	08 95       	ret

00007bb4 <strcpy>:
    7bb4:	fb 01       	movw	r30, r22
    7bb6:	dc 01       	movw	r26, r24
    7bb8:	01 90       	ld	r0, Z+
    7bba:	0d 92       	st	X+, r0
    7bbc:	00 20       	and	r0, r0
    7bbe:	e1 f7       	brne	.-8      	; 0x7bb8 <strcpy+0x4>
    7bc0:	08 95       	ret

00007bc2 <strlen>:
    7bc2:	fc 01       	movw	r30, r24
    7bc4:	01 90       	ld	r0, Z+
    7bc6:	00 20       	and	r0, r0
    7bc8:	e9 f7       	brne	.-6      	; 0x7bc4 <strlen+0x2>
    7bca:	80 95       	com	r24
    7bcc:	90 95       	com	r25
    7bce:	8e 0f       	add	r24, r30
    7bd0:	9f 1f       	adc	r25, r31
    7bd2:	08 95       	ret

00007bd4 <_exit>:
    7bd4:	f8 94       	cli

00007bd6 <__stop_program>:
    7bd6:	ff cf       	rjmp	.-2      	; 0x7bd6 <__stop_program>
